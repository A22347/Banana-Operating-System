
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f2 f9 00 00       	call   c000fa12 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 13 75 02 00       	call   c0027538 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 94 80 02 c0       	mov    ebx,0xc0028094
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb a0 80 02 c0    	cmp    ebx,0xc00280a0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 78 c6 02 c0       	mov    eax,0xc002c678
c0000049:	3d 78 c6 02 c0       	cmp    eax,0xc002c678
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 78 c6 02 c0       	push   0xc002c678
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 78 c6 02 c0       	mov    eax,0xc002c678
c0000075:	2d 78 c6 02 c0       	sub    eax,0xc002c678
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 78 c6 02 c0       	push   0xc002c678
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a8 cc 02 c0 00 	cmp    BYTE PTR ds:0xc002cca8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb a8 80 02 c0       	mov    ebx,0xc00280a8
c00000bb:	81 eb a4 80 02 c0    	sub    ebx,0xc00280a4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be a4 80 02 c0       	mov    esi,0xc00280a4
c00000ca:	a1 ac cc 02 c0       	mov    eax,ds:0xc002ccac
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ac cc 02 c0       	mov    ds:0xc002ccac,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ac cc 02 c0       	mov    eax,ds:0xc002ccac
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 78 c6 02 c0       	push   0xc002c678
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a8 cc 02 c0 01 	mov    BYTE PTR ds:0xc002cca8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 b0 cc 02 c0       	push   0xc002ccb0
c000012c:	68 78 c6 02 c0       	push   0xc002c678
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 59 ca 01 00       	call   c001cdf4 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 54 23 01 00       	call   c0012707 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 37 ca 01 00       	call   c001cdf4 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 85 ce 01 00       	call   c001d261 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 33 d4 01 00       	call   c001d818 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 f0 d0 02 c0 	lgdtd  ds:0xc002d0f0
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 1e 40 01 00       	call   c00145f7 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>

c000063d <memcmp>:
c000063d:	56                   	push   esi
c000063e:	53                   	push   ebx
c000063f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000643:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000647:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000064b:	01 d6                	add    esi,edx
c000064d:	39 f2                	cmp    edx,esi
c000064f:	74 0e                	je     c000065f <memcmp+0x22>
c0000651:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000654:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000657:	38 c8                	cmp    al,cl
c0000659:	75 08                	jne    c0000663 <memcmp+0x26>
c000065b:	42                   	inc    edx
c000065c:	43                   	inc    ebx
c000065d:	eb ee                	jmp    c000064d <memcmp+0x10>
c000065f:	31 c0                	xor    eax,eax
c0000661:	eb 02                	jmp    c0000665 <memcmp+0x28>
c0000663:	29 c8                	sub    eax,ecx
c0000665:	5b                   	pop    ebx
c0000666:	5e                   	pop    esi
c0000667:	c3                   	ret    

c0000668 <memmove>:
c0000668:	56                   	push   esi
c0000669:	53                   	push   ebx
c000066a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000066e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000672:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000676:	39 c8                	cmp    eax,ecx
c0000678:	73 12                	jae    c000068c <memmove+0x24>
c000067a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000067d:	89 c3                	mov    ebx,eax
c000067f:	39 f1                	cmp    ecx,esi
c0000681:	74 1a                	je     c000069d <memmove+0x35>
c0000683:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000685:	43                   	inc    ebx
c0000686:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000689:	41                   	inc    ecx
c000068a:	eb f3                	jmp    c000067f <memmove+0x17>
c000068c:	76 0f                	jbe    c000069d <memmove+0x35>
c000068e:	85 d2                	test   edx,edx
c0000690:	74 0b                	je     c000069d <memmove+0x35>
c0000692:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c0000696:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000069a:	4a                   	dec    edx
c000069b:	eb f1                	jmp    c000068e <memmove+0x26>
c000069d:	5b                   	pop    ebx
c000069e:	5e                   	pop    esi
c000069f:	c3                   	ret    

c00006a0 <memcpy>:
c00006a0:	56                   	push   esi
c00006a1:	53                   	push   ebx
c00006a2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00006aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00006ae:	89 f1                	mov    ecx,esi
c00006b0:	01 d3                	add    ebx,edx
c00006b2:	39 da                	cmp    edx,ebx
c00006b4:	74 09                	je     c00006bf <memcpy+0x1f>
c00006b6:	8a 02                	mov    al,BYTE PTR [edx]
c00006b8:	41                   	inc    ecx
c00006b9:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00006bc:	42                   	inc    edx
c00006bd:	eb f3                	jmp    c00006b2 <memcpy+0x12>
c00006bf:	89 f0                	mov    eax,esi
c00006c1:	5b                   	pop    ebx
c00006c2:	5e                   	pop    esi
c00006c3:	c3                   	ret    

c00006c4 <memset>:
c00006c4:	53                   	push   ebx
c00006c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006cd:	89 c2                	mov    edx,eax
c00006cf:	01 c1                	add    ecx,eax
c00006d1:	39 ca                	cmp    edx,ecx
c00006d3:	74 0a                	je     c00006df <memset+0x1b>
c00006d5:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006d9:	42                   	inc    edx
c00006da:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006dd:	eb f2                	jmp    c00006d1 <memset+0xd>
c00006df:	5b                   	pop    ebx
c00006e0:	c3                   	ret    

c00006e1 <strlen>:
c00006e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006e5:	31 c0                	xor    eax,eax
c00006e7:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006eb:	74 03                	je     c00006f0 <strlen+0xf>
c00006ed:	40                   	inc    eax
c00006ee:	eb f7                	jmp    c00006e7 <strlen+0x6>
c00006f0:	c3                   	ret    

c00006f1 <strpbrk>:
c00006f1:	53                   	push   ebx
c00006f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006f6:	8a 08                	mov    cl,BYTE PTR [eax]
c00006f8:	84 c9                	test   cl,cl
c00006fa:	74 14                	je     c0000710 <strpbrk+0x1f>
c00006fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000700:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000702:	84 db                	test   bl,bl
c0000704:	74 07                	je     c000070d <strpbrk+0x1c>
c0000706:	38 cb                	cmp    bl,cl
c0000708:	74 08                	je     c0000712 <strpbrk+0x21>
c000070a:	42                   	inc    edx
c000070b:	eb f3                	jmp    c0000700 <strpbrk+0xf>
c000070d:	40                   	inc    eax
c000070e:	eb e6                	jmp    c00006f6 <strpbrk+0x5>
c0000710:	31 c0                	xor    eax,eax
c0000712:	5b                   	pop    ebx
c0000713:	c3                   	ret    

c0000714 <strtok>:
c0000714:	56                   	push   esi
c0000715:	53                   	push   ebx
c0000716:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000071a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000071e:	85 db                	test   ebx,ebx
c0000720:	75 0e                	jne    c0000730 <strtok+0x1c>
c0000722:	8b 1d c8 cc 02 c0    	mov    ebx,DWORD PTR ds:0xc002ccc8
c0000728:	85 db                	test   ebx,ebx
c000072a:	75 04                	jne    c0000730 <strtok+0x1c>
c000072c:	31 db                	xor    ebx,ebx
c000072e:	eb 2e                	jmp    c000075e <strtok+0x4a>
c0000730:	56                   	push   esi
c0000731:	53                   	push   ebx
c0000732:	e8 ba ff ff ff       	call   c00006f1 <strpbrk>
c0000737:	5a                   	pop    edx
c0000738:	a3 c8 cc 02 c0       	mov    ds:0xc002ccc8,eax
c000073d:	59                   	pop    ecx
c000073e:	a1 c8 cc 02 c0       	mov    eax,ds:0xc002ccc8
c0000743:	39 d8                	cmp    eax,ebx
c0000745:	75 07                	jne    c000074e <strtok+0x3a>
c0000747:	43                   	inc    ebx
c0000748:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000074c:	eb e2                	jmp    c0000730 <strtok+0x1c>
c000074e:	85 c0                	test   eax,eax
c0000750:	74 da                	je     c000072c <strtok+0x18>
c0000752:	8d 50 01             	lea    edx,[eax+0x1]
c0000755:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000758:	89 15 c8 cc 02 c0    	mov    DWORD PTR ds:0xc002ccc8,edx
c000075e:	89 d8                	mov    eax,ebx
c0000760:	5b                   	pop    ebx
c0000761:	5e                   	pop    esi
c0000762:	c3                   	ret    

c0000763 <strcpy>:
c0000763:	53                   	push   ebx
c0000764:	31 d2                	xor    edx,edx
c0000766:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000076a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000076e:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000771:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0000774:	84 c9                	test   cl,cl
c0000776:	74 06                	je     c000077e <strcpy+0x1b>
c0000778:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c000077b:	42                   	inc    edx
c000077c:	eb ec                	jmp    c000076a <strcpy+0x7>
c000077e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000781:	5b                   	pop    ebx
c0000782:	c3                   	ret    

c0000783 <strncpy>:
c0000783:	56                   	push   esi
c0000784:	53                   	push   ebx
c0000785:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000789:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000791:	89 c3                	mov    ebx,eax
c0000793:	85 c9                	test   ecx,ecx
c0000795:	74 1a                	je     c00007b1 <strncpy+0x2e>
c0000797:	46                   	inc    esi
c0000798:	43                   	inc    ebx
c0000799:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c000079c:	49                   	dec    ecx
c000079d:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00007a0:	84 d2                	test   dl,dl
c00007a2:	75 ef                	jne    c0000793 <strncpy+0x10>
c00007a4:	31 d2                	xor    edx,edx
c00007a6:	39 d1                	cmp    ecx,edx
c00007a8:	74 07                	je     c00007b1 <strncpy+0x2e>
c00007aa:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007ae:	42                   	inc    edx
c00007af:	eb f5                	jmp    c00007a6 <strncpy+0x23>
c00007b1:	5b                   	pop    ebx
c00007b2:	5e                   	pop    esi
c00007b3:	c3                   	ret    

c00007b4 <strcmp>:
c00007b4:	31 c9                	xor    ecx,ecx
c00007b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007be:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007c2:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007c6:	38 d0                	cmp    al,dl
c00007c8:	75 08                	jne    c00007d2 <strcmp+0x1e>
c00007ca:	41                   	inc    ecx
c00007cb:	84 c0                	test   al,al
c00007cd:	75 e7                	jne    c00007b6 <strcmp+0x2>
c00007cf:	31 c0                	xor    eax,eax
c00007d1:	c3                   	ret    
c00007d2:	29 d0                	sub    eax,edx
c00007d4:	c3                   	ret    

c00007d5 <strchr>:
c00007d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007d9:	8a 10                	mov    dl,BYTE PTR [eax]
c00007db:	84 d2                	test   dl,dl
c00007dd:	74 09                	je     c00007e8 <strchr+0x13>
c00007df:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007e3:	74 05                	je     c00007ea <strchr+0x15>
c00007e5:	40                   	inc    eax
c00007e6:	eb f1                	jmp    c00007d9 <strchr+0x4>
c00007e8:	31 c0                	xor    eax,eax
c00007ea:	c3                   	ret    

c00007eb <strncmp>:
c00007eb:	56                   	push   esi
c00007ec:	53                   	push   ebx
c00007ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007f9:	01 d6                	add    esi,edx
c00007fb:	39 f2                	cmp    edx,esi
c00007fd:	74 12                	je     c0000811 <strncmp+0x26>
c00007ff:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000802:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000805:	38 c8                	cmp    al,cl
c0000807:	75 0c                	jne    c0000815 <strncmp+0x2a>
c0000809:	42                   	inc    edx
c000080a:	84 c0                	test   al,al
c000080c:	74 03                	je     c0000811 <strncmp+0x26>
c000080e:	43                   	inc    ebx
c000080f:	eb ea                	jmp    c00007fb <strncmp+0x10>
c0000811:	31 c0                	xor    eax,eax
c0000813:	eb 02                	jmp    c0000817 <strncmp+0x2c>
c0000815:	29 c8                	sub    eax,ecx
c0000817:	5b                   	pop    ebx
c0000818:	5e                   	pop    esi
c0000819:	c3                   	ret    

c000081a <strcat>:
c000081a:	53                   	push   ebx
c000081b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000081f:	89 c1                	mov    ecx,eax
c0000821:	8d 51 01             	lea    edx,[ecx+0x1]
c0000824:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000828:	74 04                	je     c000082e <strcat+0x14>
c000082a:	89 d1                	mov    ecx,edx
c000082c:	eb f3                	jmp    c0000821 <strcat+0x7>
c000082e:	31 d2                	xor    edx,edx
c0000830:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000834:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000837:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000083a:	42                   	inc    edx
c000083b:	84 db                	test   bl,bl
c000083d:	75 f1                	jne    c0000830 <strcat+0x16>
c000083f:	5b                   	pop    ebx
c0000840:	c3                   	ret    

c0000841 <strncat>:
c0000841:	56                   	push   esi
c0000842:	53                   	push   ebx
c0000843:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000847:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000084b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000084f:	89 c2                	mov    edx,eax
c0000851:	85 db                	test   ebx,ebx
c0000853:	74 23                	je     c0000878 <strncat+0x37>
c0000855:	8d 72 01             	lea    esi,[edx+0x1]
c0000858:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c000085c:	74 04                	je     c0000862 <strncat+0x21>
c000085e:	89 f2                	mov    edx,esi
c0000860:	eb f3                	jmp    c0000855 <strncat+0x14>
c0000862:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000865:	41                   	inc    ecx
c0000866:	42                   	inc    edx
c0000867:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c000086a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000086d:	84 db                	test   bl,bl
c000086f:	74 07                	je     c0000878 <strncat+0x37>
c0000871:	39 f1                	cmp    ecx,esi
c0000873:	75 f0                	jne    c0000865 <strncat+0x24>
c0000875:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000878:	5b                   	pop    ebx
c0000879:	5e                   	pop    esi
c000087a:	c3                   	ret    

c000087b <strstr>:
c000087b:	57                   	push   edi
c000087c:	56                   	push   esi
c000087d:	53                   	push   ebx
c000087e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000882:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000886:	57                   	push   edi
c0000887:	e8 55 fe ff ff       	call   c00006e1 <strlen>
c000088c:	59                   	pop    ecx
c000088d:	89 c6                	mov    esi,eax
c000088f:	85 c0                	test   eax,eax
c0000891:	74 1f                	je     c00008b2 <strstr+0x37>
c0000893:	53                   	push   ebx
c0000894:	e8 48 fe ff ff       	call   c00006e1 <strlen>
c0000899:	5a                   	pop    edx
c000089a:	39 f0                	cmp    eax,esi
c000089c:	72 12                	jb     c00008b0 <strstr+0x35>
c000089e:	56                   	push   esi
c000089f:	57                   	push   edi
c00008a0:	53                   	push   ebx
c00008a1:	e8 97 fd ff ff       	call   c000063d <memcmp>
c00008a6:	83 c4 0c             	add    esp,0xc
c00008a9:	85 c0                	test   eax,eax
c00008ab:	74 05                	je     c00008b2 <strstr+0x37>
c00008ad:	43                   	inc    ebx
c00008ae:	eb e3                	jmp    c0000893 <strstr+0x18>
c00008b0:	31 db                	xor    ebx,ebx
c00008b2:	89 d8                	mov    eax,ebx
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	5f                   	pop    edi
c00008b7:	c3                   	ret    

c00008b8 <toupper>:
c00008b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008bc:	0f b6 d0             	movzx  edx,al
c00008bf:	f6 82 c0 80 02 c0 02 	test   BYTE PTR [edx-0x3ffd7f40],0x2
c00008c6:	74 03                	je     c00008cb <toupper+0x13>
c00008c8:	83 e8 20             	sub    eax,0x20
c00008cb:	c3                   	ret    

c00008cc <tolower>:
c00008cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d0:	0f b6 d0             	movzx  edx,al
c00008d3:	f6 82 c0 80 02 c0 01 	test   BYTE PTR [edx-0x3ffd7f40],0x1
c00008da:	74 03                	je     c00008df <tolower+0x13>
c00008dc:	83 c0 20             	add    eax,0x20
c00008df:	c3                   	ret    

c00008e0 <simple_strtoul>:
c00008e0:	55                   	push   ebp
c00008e1:	57                   	push   edi
c00008e2:	56                   	push   esi
c00008e3:	53                   	push   ebx
c00008e4:	83 ec 08             	sub    esp,0x8
c00008e7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ef:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008f2:	f6 82 c0 80 02 c0 08 	test   BYTE PTR [edx-0x3ffd7f40],0x8
c00008f9:	74 03                	je     c00008fe <simple_strtoul+0x1e>
c00008fb:	41                   	inc    ecx
c00008fc:	eb f1                	jmp    c00008ef <simple_strtoul+0xf>
c00008fe:	80 fa 09             	cmp    dl,0x9
c0000901:	74 f8                	je     c00008fb <simple_strtoul+0x1b>
c0000903:	80 fa 2d             	cmp    dl,0x2d
c0000906:	75 0b                	jne    c0000913 <simple_strtoul+0x33>
c0000908:	41                   	inc    ecx
c0000909:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000911:	eb 0e                	jmp    c0000921 <simple_strtoul+0x41>
c0000913:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000091b:	80 fa 2b             	cmp    dl,0x2b
c000091e:	75 01                	jne    c0000921 <simple_strtoul+0x41>
c0000920:	41                   	inc    ecx
c0000921:	85 f6                	test   esi,esi
c0000923:	75 22                	jne    c0000947 <simple_strtoul+0x67>
c0000925:	be 0a 00 00 00       	mov    esi,0xa
c000092a:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000092d:	75 5a                	jne    c0000989 <simple_strtoul+0xa9>
c000092f:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000933:	50                   	push   eax
c0000934:	e8 93 ff ff ff       	call   c00008cc <tolower>
c0000939:	5a                   	pop    edx
c000093a:	83 f8 78             	cmp    eax,0x78
c000093d:	74 03                	je     c0000942 <simple_strtoul+0x62>
c000093f:	41                   	inc    ecx
c0000940:	eb 16                	jmp    c0000958 <simple_strtoul+0x78>
c0000942:	83 c1 02             	add    ecx,0x2
c0000945:	eb 22                	jmp    c0000969 <simple_strtoul+0x89>
c0000947:	8d 46 fe             	lea    eax,[esi-0x2]
c000094a:	83 f8 22             	cmp    eax,0x22
c000094d:	0f 87 b7 00 00 00    	ja     c0000a0a <simple_strtoul+0x12a>
c0000953:	83 fe 08             	cmp    esi,0x8
c0000956:	75 0c                	jne    c0000964 <simple_strtoul+0x84>
c0000958:	be 08 00 00 00       	mov    esi,0x8
c000095d:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000960:	75 27                	jne    c0000989 <simple_strtoul+0xa9>
c0000962:	eb 1f                	jmp    c0000983 <simple_strtoul+0xa3>
c0000964:	83 fe 10             	cmp    esi,0x10
c0000967:	75 20                	jne    c0000989 <simple_strtoul+0xa9>
c0000969:	be 10 00 00 00       	mov    esi,0x10
c000096e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000971:	75 16                	jne    c0000989 <simple_strtoul+0xa9>
c0000973:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000977:	50                   	push   eax
c0000978:	e8 4f ff ff ff       	call   c00008cc <tolower>
c000097d:	5d                   	pop    ebp
c000097e:	83 f8 78             	cmp    eax,0x78
c0000981:	74 03                	je     c0000986 <simple_strtoul+0xa6>
c0000983:	41                   	inc    ecx
c0000984:	eb 03                	jmp    c0000989 <simple_strtoul+0xa9>
c0000986:	83 c1 02             	add    ecx,0x2
c0000989:	31 ed                	xor    ebp,ebp
c000098b:	31 db                	xor    ebx,ebx
c000098d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000994:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000996:	84 d2                	test   dl,dl
c0000998:	74 27                	je     c00009c1 <simple_strtoul+0xe1>
c000099a:	0f b6 fa             	movzx  edi,dl
c000099d:	f6 87 c0 80 02 c0 04 	test   BYTE PTR [edi-0x3ffd7f40],0x4
c00009a4:	74 05                	je     c00009ab <simple_strtoul+0xcb>
c00009a6:	83 ef 30             	sub    edi,0x30
c00009a9:	eb 22                	jmp    c00009cd <simple_strtoul+0xed>
c00009ab:	0f be d2             	movsx  edx,dl
c00009ae:	52                   	push   edx
c00009af:	e8 04 ff ff ff       	call   c00008b8 <toupper>
c00009b4:	5f                   	pop    edi
c00009b5:	0f b6 d0             	movzx  edx,al
c00009b8:	f6 82 c0 80 02 c0 01 	test   BYTE PTR [edx-0x3ffd7f40],0x1
c00009bf:	75 09                	jne    c00009ca <simple_strtoul+0xea>
c00009c1:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009c6:	75 2d                	jne    c00009f5 <simple_strtoul+0x115>
c00009c8:	eb 57                	jmp    c0000a21 <simple_strtoul+0x141>
c00009ca:	8d 78 c9             	lea    edi,[eax-0x37]
c00009cd:	39 f7                	cmp    edi,esi
c00009cf:	73 f0                	jae    c00009c1 <simple_strtoul+0xe1>
c00009d1:	31 d2                	xor    edx,edx
c00009d3:	89 f8                	mov    eax,edi
c00009d5:	f7 d0                	not    eax
c00009d7:	f7 f6                	div    esi
c00009d9:	39 d8                	cmp    eax,ebx
c00009db:	72 0e                	jb     c00009eb <simple_strtoul+0x10b>
c00009dd:	0f af de             	imul   ebx,esi
c00009e0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e7:	01 fb                	add    ebx,edi
c00009e9:	eb 07                	jmp    c00009f2 <simple_strtoul+0x112>
c00009eb:	bd 01 00 00 00       	mov    ebp,0x1
c00009f0:	31 db                	xor    ebx,ebx
c00009f2:	41                   	inc    ecx
c00009f3:	eb 9f                	jmp    c0000994 <simple_strtoul+0xb4>
c00009f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009f8:	09 d8                	or     eax,ebx
c00009fa:	75 1f                	jne    c0000a1b <simple_strtoul+0x13b>
c00009fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a00:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a04:	31 db                	xor    ebx,ebx
c0000a06:	89 38                	mov    DWORD PTR [eax],edi
c0000a08:	eb 17                	jmp    c0000a21 <simple_strtoul+0x141>
c0000a0a:	31 db                	xor    ebx,ebx
c0000a0c:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a11:	74 14                	je     c0000a27 <simple_strtoul+0x147>
c0000a13:	31 ed                	xor    ebp,ebp
c0000a15:	85 c9                	test   ecx,ecx
c0000a17:	75 e3                	jne    c00009fc <simple_strtoul+0x11c>
c0000a19:	31 db                	xor    ebx,ebx
c0000a1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a1f:	89 08                	mov    DWORD PTR [eax],ecx
c0000a21:	4d                   	dec    ebp
c0000a22:	75 03                	jne    c0000a27 <simple_strtoul+0x147>
c0000a24:	83 cb ff             	or     ebx,0xffffffff
c0000a27:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a2c:	75 02                	jne    c0000a30 <simple_strtoul+0x150>
c0000a2e:	f7 db                	neg    ebx
c0000a30:	83 c4 08             	add    esp,0x8
c0000a33:	89 d8                	mov    eax,ebx
c0000a35:	5b                   	pop    ebx
c0000a36:	5e                   	pop    esi
c0000a37:	5f                   	pop    edi
c0000a38:	5d                   	pop    ebp
c0000a39:	c3                   	ret    

c0000a3a <largebin_index>:
c0000a3a:	89 c2                	mov    edx,eax
c0000a3c:	c1 ea 08             	shr    edx,0x8
c0000a3f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a45:	77 10                	ja     c0000a57 <largebin_index+0x1d>
c0000a47:	0f bd d2             	bsr    edx,edx
c0000a4a:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a4d:	d3 e8                	shr    eax,cl
c0000a4f:	83 e0 03             	and    eax,0x3
c0000a52:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a56:	c3                   	ret    
c0000a57:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a5c:	c3                   	ret    

c0000a5d <malloc_init_state>:
c0000a5d:	53                   	push   ebx
c0000a5e:	8d 50 34             	lea    edx,[eax+0x34]
c0000a61:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a67:	89 d1                	mov    ecx,edx
c0000a69:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a6c:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a6f:	83 c2 08             	add    edx,0x8
c0000a72:	39 da                	cmp    edx,ebx
c0000a74:	75 f3                	jne    c0000a69 <malloc_init_state+0xc>
c0000a76:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a78:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a82:	83 e2 03             	and    edx,0x3
c0000a85:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a8f:	83 ca 48             	or     edx,0x48
c0000a92:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a9c:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000aa6:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aad:	89 10                	mov    DWORD PTR [eax],edx
c0000aaf:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ab2:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000abc:	5b                   	pop    ebx
c0000abd:	c3                   	ret    

c0000abe <malloc_consolidate>:
c0000abe:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ac0:	85 d2                	test   edx,edx
c0000ac2:	0f 84 d8 00 00 00    	je     c0000ba0 <malloc_consolidate+0xe2>
c0000ac8:	55                   	push   ebp
c0000ac9:	83 e2 fd             	and    edx,0xfffffffd
c0000acc:	57                   	push   edi
c0000acd:	89 c5                	mov    ebp,eax
c0000acf:	56                   	push   esi
c0000ad0:	8d 78 34             	lea    edi,[eax+0x34]
c0000ad3:	53                   	push   ebx
c0000ad4:	83 ec 10             	sub    esp,0x10
c0000ad7:	89 10                	mov    DWORD PTR [eax],edx
c0000ad9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000add:	c1 ea 03             	shr    edx,0x3
c0000ae0:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000ae4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ae8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000aeb:	85 d2                	test   edx,edx
c0000aed:	0f 84 98 00 00 00    	je     c0000b8b <malloc_consolidate+0xcd>
c0000af3:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000afa:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000afd:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000b00:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b04:	89 f9                	mov    ecx,edi
c0000b06:	83 e1 fe             	and    ecx,0xfffffffe
c0000b09:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b0c:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b0f:	83 e3 fc             	and    ebx,0xfffffffc
c0000b12:	83 e7 01             	and    edi,0x1
c0000b15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b18:	75 14                	jne    c0000b2e <malloc_consolidate+0x70>
c0000b1a:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b1c:	29 fa                	sub    edx,edi
c0000b1e:	01 f9                	add    ecx,edi
c0000b20:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b23:	89 fb                	mov    ebx,edi
c0000b25:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b28:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b2b:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b2e:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b31:	74 40                	je     c0000b73 <malloc_consolidate+0xb5>
c0000b33:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b36:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b39:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b3d:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b40:	83 e7 01             	and    edi,0x1
c0000b43:	75 0e                	jne    c0000b53 <malloc_consolidate+0x95>
c0000b45:	01 d9                	add    ecx,ebx
c0000b47:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b4a:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b4d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b50:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b53:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b56:	89 ce                	mov    esi,ecx
c0000b58:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b5b:	83 ce 01             	or     esi,0x1
c0000b5e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b61:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b64:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b67:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b6b:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b6e:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b71:	eb 0c                	jmp    c0000b7f <malloc_consolidate+0xc1>
c0000b73:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b76:	83 c9 01             	or     ecx,0x1
c0000b79:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b7c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b83:	85 d2                	test   edx,edx
c0000b85:	0f 85 6f ff ff ff    	jne    c0000afa <malloc_consolidate+0x3c>
c0000b8b:	83 c5 04             	add    ebp,0x4
c0000b8e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b92:	0f 85 50 ff ff ff    	jne    c0000ae8 <malloc_consolidate+0x2a>
c0000b98:	83 c4 10             	add    esp,0x10
c0000b9b:	5b                   	pop    ebx
c0000b9c:	5e                   	pop    esi
c0000b9d:	5f                   	pop    edi
c0000b9e:	5d                   	pop    ebp
c0000b9f:	c3                   	ret    
c0000ba0:	e9 b8 fe ff ff       	jmp    c0000a5d <malloc_init_state>

c0000ba5 <dlfree>:
c0000ba5:	57                   	push   edi
c0000ba6:	56                   	push   esi
c0000ba7:	53                   	push   ebx
c0000ba8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bac:	85 db                	test   ebx,ebx
c0000bae:	0f 84 e2 00 00 00    	je     c0000c96 <dlfree+0xf1>
c0000bb4:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bb7:	8b 0d e0 cc 02 c0    	mov    ecx,DWORD PTR ds:0xc002cce0
c0000bbd:	89 f0                	mov    eax,esi
c0000bbf:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bc2:	83 e0 fc             	and    eax,0xfffffffc
c0000bc5:	39 c1                	cmp    ecx,eax
c0000bc7:	72 24                	jb     c0000bed <dlfree+0x48>
c0000bc9:	83 c9 03             	or     ecx,0x3
c0000bcc:	c1 e8 03             	shr    eax,0x3
c0000bcf:	89 0d e0 cc 02 c0    	mov    DWORD PTR ds:0xc002cce0,ecx
c0000bd5:	83 e8 02             	sub    eax,0x2
c0000bd8:	8b 0c 85 e4 cc 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd331c]
c0000bdf:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000be1:	89 14 85 e4 cc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd331c],edx
c0000be8:	e9 a9 00 00 00       	jmp    c0000c96 <dlfree+0xf1>
c0000bed:	83 e6 02             	and    esi,0x2
c0000bf0:	0f 85 a0 00 00 00    	jne    c0000c96 <dlfree+0xf1>
c0000bf6:	83 c9 01             	or     ecx,0x1
c0000bf9:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bfc:	89 0d e0 cc 02 c0    	mov    DWORD PTR ds:0xc002cce0,ecx
c0000c02:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c05:	83 e1 fc             	and    ecx,0xfffffffc
c0000c08:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c0c:	75 13                	jne    c0000c21 <dlfree+0x7c>
c0000c0e:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c11:	29 da                	sub    edx,ebx
c0000c13:	01 d8                	add    eax,ebx
c0000c15:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c18:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c1b:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c1e:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c21:	39 35 0c cd 02 c0    	cmp    DWORD PTR ds:0xc002cd0c,esi
c0000c27:	74 40                	je     c0000c69 <dlfree+0xc4>
c0000c29:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c2d:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c30:	80 e3 01             	and    bl,0x1
c0000c33:	75 0e                	jne    c0000c43 <dlfree+0x9e>
c0000c35:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c38:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c3b:	01 c8                	add    eax,ecx
c0000c3d:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c40:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c43:	8b 0d 1c cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cd1c
c0000c49:	c7 42 0c 14 cd 02 c0 	mov    DWORD PTR [edx+0xc],0xc002cd14
c0000c50:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c53:	89 15 1c cd 02 c0    	mov    DWORD PTR ds:0xc002cd1c,edx
c0000c59:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c5c:	89 c1                	mov    ecx,eax
c0000c5e:	83 c9 01             	or     ecx,0x1
c0000c61:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c64:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c67:	eb 10                	jmp    c0000c79 <dlfree+0xd4>
c0000c69:	01 c8                	add    eax,ecx
c0000c6b:	89 c1                	mov    ecx,eax
c0000c6d:	83 c9 01             	or     ecx,0x1
c0000c70:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c73:	89 15 0c cd 02 c0    	mov    DWORD PTR ds:0xc002cd0c,edx
c0000c79:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c7e:	76 16                	jbe    c0000c96 <dlfree+0xf1>
c0000c80:	f6 05 e0 cc 02 c0 02 	test   BYTE PTR ds:0xc002cce0,0x2
c0000c87:	74 0d                	je     c0000c96 <dlfree+0xf1>
c0000c89:	5b                   	pop    ebx
c0000c8a:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c0000c8f:	5e                   	pop    esi
c0000c90:	5f                   	pop    edi
c0000c91:	e9 28 fe ff ff       	jmp    c0000abe <malloc_consolidate>
c0000c96:	5b                   	pop    ebx
c0000c97:	5e                   	pop    esi
c0000c98:	5f                   	pop    edi
c0000c99:	c3                   	ret    

c0000c9a <sYSMALLOc>:
c0000c9a:	55                   	push   ebp
c0000c9b:	57                   	push   edi
c0000c9c:	56                   	push   esi
c0000c9d:	53                   	push   ebx
c0000c9e:	89 d3                	mov    ebx,edx
c0000ca0:	83 ec 2c             	sub    esp,0x2c
c0000ca3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ca7:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000cad:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000cb0:	8d 42 ff             	lea    eax,[edx-0x1]
c0000cb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cb7:	74 1f                	je     c0000cd8 <sYSMALLOc+0x3e>
c0000cb9:	89 d8                	mov    eax,ebx
c0000cbb:	e8 fe fd ff ff       	call   c0000abe <malloc_consolidate>
c0000cc0:	83 ec 0c             	sub    esp,0xc
c0000cc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000cc7:	83 e8 07             	sub    eax,0x7
c0000cca:	50                   	push   eax
c0000ccb:	e8 30 02 00 00       	call   c0000f00 <dlmalloc>
c0000cd0:	83 c4 10             	add    esp,0x10
c0000cd3:	e9 20 02 00 00       	jmp    c0000ef8 <sYSMALLOc+0x25e>
c0000cd8:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000cdb:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ce1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ce4:	83 e0 fc             	and    eax,0xfffffffc
c0000ce7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ceb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cef:	83 c0 10             	add    eax,0x10
c0000cf2:	01 c1                	add    ecx,eax
c0000cf4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cf8:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cff:	74 04                	je     c0000d05 <sYSMALLOc+0x6b>
c0000d01:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000d05:	f7 da                	neg    edx
c0000d07:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000d0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000d0f:	21 d1                	and    ecx,edx
c0000d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000d15:	7f 07                	jg     c0000d1e <sYSMALLOc+0x84>
c0000d17:	31 c0                	xor    eax,eax
c0000d19:	e9 da 01 00 00       	jmp    c0000ef8 <sYSMALLOc+0x25e>
c0000d1e:	83 ec 0c             	sub    esp,0xc
c0000d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d25:	e8 87 e7 00 00       	call   c000f4b1 <sbrk>
c0000d2a:	83 c4 10             	add    esp,0x10
c0000d2d:	89 c6                	mov    esi,eax
c0000d2f:	83 f8 ff             	cmp    eax,0xffffffff
c0000d32:	74 e3                	je     c0000d17 <sYSMALLOc+0x7d>
c0000d34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d38:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d3c:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d3f:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d45:	39 f1                	cmp    ecx,esi
c0000d47:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d4d:	75 13                	jne    c0000d62 <sYSMALLOc+0xc8>
c0000d4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d53:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d57:	83 c8 01             	or     eax,0x1
c0000d5a:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d5d:	e9 3e 01 00 00       	jmp    c0000ea0 <sYSMALLOc+0x206>
c0000d62:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d68:	88 d0                	mov    al,dl
c0000d6a:	83 e0 01             	and    eax,0x1
c0000d6d:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d72:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d76:	0f 95 c0             	setne  al
c0000d79:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d7d:	39 f1                	cmp    ecx,esi
c0000d7f:	76 12                	jbe    c0000d93 <sYSMALLOc+0xf9>
c0000d81:	84 c0                	test   al,al
c0000d83:	74 0e                	je     c0000d93 <sYSMALLOc+0xf9>
c0000d85:	83 e2 fe             	and    edx,0xfffffffe
c0000d88:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d8e:	e9 83 00 00 00       	jmp    c0000e16 <sYSMALLOc+0x17c>
c0000d93:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d98:	74 7c                	je     c0000e16 <sYSMALLOc+0x17c>
c0000d9a:	84 c0                	test   al,al
c0000d9c:	74 0c                	je     c0000daa <sYSMALLOc+0x110>
c0000d9e:	89 f0                	mov    eax,esi
c0000da0:	29 c8                	sub    eax,ecx
c0000da2:	01 e8                	add    eax,ebp
c0000da4:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000daa:	89 f2                	mov    edx,esi
c0000dac:	83 e2 07             	and    edx,0x7
c0000daf:	74 0c                	je     c0000dbd <sYSMALLOc+0x123>
c0000db1:	b8 08 00 00 00       	mov    eax,0x8
c0000db6:	29 d0                	sub    eax,edx
c0000db8:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000dbb:	eb 04                	jmp    c0000dc1 <sYSMALLOc+0x127>
c0000dbd:	89 f5                	mov    ebp,esi
c0000dbf:	31 c0                	xor    eax,eax
c0000dc1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000dc5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000dc9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dcd:	01 c1                	add    ecx,eax
c0000dcf:	83 ec 0c             	sub    esp,0xc
c0000dd2:	01 f1                	add    ecx,esi
c0000dd4:	01 ca                	add    edx,ecx
c0000dd6:	29 c8                	sub    eax,ecx
c0000dd8:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ddc:	01 c2                	add    edx,eax
c0000dde:	52                   	push   edx
c0000ddf:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000de3:	e8 c9 e6 00 00       	call   c000f4b1 <sbrk>
c0000de8:	83 c4 10             	add    esp,0x10
c0000deb:	83 f8 ff             	cmp    eax,0xffffffff
c0000dee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000df2:	75 0f                	jne    c0000e03 <sYSMALLOc+0x169>
c0000df4:	83 ec 0c             	sub    esp,0xc
c0000df7:	6a 00                	push   0x0
c0000df9:	e8 b3 e6 00 00       	call   c000f4b1 <sbrk>
c0000dfe:	83 c4 10             	add    esp,0x10
c0000e01:	eb 30                	jmp    c0000e33 <sYSMALLOc+0x199>
c0000e03:	39 c6                	cmp    esi,eax
c0000e05:	76 33                	jbe    c0000e3a <sYSMALLOc+0x1a0>
c0000e07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e0b:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e12:	01 f0                	add    eax,esi
c0000e14:	eb 1d                	jmp    c0000e33 <sYSMALLOc+0x199>
c0000e16:	83 ec 0c             	sub    esp,0xc
c0000e19:	89 f5                	mov    ebp,esi
c0000e1b:	6a 00                	push   0x0
c0000e1d:	e8 8f e6 00 00       	call   c000f4b1 <sbrk>
c0000e22:	89 c2                	mov    edx,eax
c0000e24:	29 f2                	sub    edx,esi
c0000e26:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e2a:	83 c4 10             	add    esp,0x10
c0000e2d:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e33:	31 d2                	xor    edx,edx
c0000e35:	83 f8 ff             	cmp    eax,0xffffffff
c0000e38:	74 66                	je     c0000ea0 <sYSMALLOc+0x206>
c0000e3a:	29 e8                	sub    eax,ebp
c0000e3c:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e3f:	01 d0                	add    eax,edx
c0000e41:	83 c8 01             	or     eax,0x1
c0000e44:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e47:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e4d:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e52:	74 4c                	je     c0000ea0 <sYSMALLOc+0x206>
c0000e54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e58:	83 e8 0c             	sub    eax,0xc
c0000e5b:	83 e0 f8             	and    eax,0xfffffff8
c0000e5e:	89 c2                	mov    edx,eax
c0000e60:	83 ca 01             	or     edx,0x1
c0000e63:	83 f8 0f             	cmp    eax,0xf
c0000e66:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e69:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e71:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e79:	76 25                	jbe    c0000ea0 <sYSMALLOc+0x206>
c0000e7b:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e81:	83 ec 0c             	sub    esp,0xc
c0000e84:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e8e:	83 c7 08             	add    edi,0x8
c0000e91:	57                   	push   edi
c0000e92:	e8 0e fd ff ff       	call   c0000ba5 <dlfree>
c0000e97:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000ea6:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000eac:	73 06                	jae    c0000eb4 <sYSMALLOc+0x21a>
c0000eae:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000eb4:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000eba:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ec0:	73 06                	jae    c0000ec8 <sYSMALLOc+0x22e>
c0000ec2:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ec8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ecb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ece:	83 e2 fc             	and    edx,0xfffffffc
c0000ed1:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ed5:	0f 82 3c fe ff ff    	jb     c0000d17 <sYSMALLOc+0x7d>
c0000edb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000edf:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ee2:	29 fa                	sub    edx,edi
c0000ee4:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ee7:	83 ca 01             	or     edx,0x1
c0000eea:	89 fb                	mov    ebx,edi
c0000eec:	83 c0 08             	add    eax,0x8
c0000eef:	83 cb 01             	or     ebx,0x1
c0000ef2:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ef5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ef8:	83 c4 2c             	add    esp,0x2c
c0000efb:	5b                   	pop    ebx
c0000efc:	5e                   	pop    esi
c0000efd:	5f                   	pop    edi
c0000efe:	5d                   	pop    ebp
c0000eff:	c3                   	ret    

c0000f00 <dlmalloc>:
c0000f00:	55                   	push   ebp
c0000f01:	57                   	push   edi
c0000f02:	56                   	push   esi
c0000f03:	53                   	push   ebx
c0000f04:	83 ec 1c             	sub    esp,0x1c
c0000f07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f0b:	83 f8 df             	cmp    eax,0xffffffdf
c0000f0e:	0f 87 70 03 00 00    	ja     c0001284 <dlmalloc+0x384>
c0000f14:	83 c0 0b             	add    eax,0xb
c0000f17:	be 10 00 00 00       	mov    esi,0x10
c0000f1c:	83 f8 0f             	cmp    eax,0xf
c0000f1f:	76 05                	jbe    c0000f26 <dlmalloc+0x26>
c0000f21:	83 e0 f8             	and    eax,0xfffffff8
c0000f24:	89 c6                	mov    esi,eax
c0000f26:	8b 3d e0 cc 02 c0    	mov    edi,DWORD PTR ds:0xc002cce0
c0000f2c:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f32:	75 17                	jne    c0000f4b <dlmalloc+0x4b>
c0000f34:	85 ff                	test   edi,edi
c0000f36:	0f 85 05 03 00 00    	jne    c0001241 <dlmalloc+0x341>
c0000f3c:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c0000f41:	e8 78 fb ff ff       	call   c0000abe <malloc_consolidate>
c0000f46:	e9 f6 02 00 00       	jmp    c0001241 <dlmalloc+0x341>
c0000f4b:	39 f7                	cmp    edi,esi
c0000f4d:	72 1f                	jb     c0000f6e <dlmalloc+0x6e>
c0000f4f:	89 f2                	mov    edx,esi
c0000f51:	c1 ea 03             	shr    edx,0x3
c0000f54:	83 ea 02             	sub    edx,0x2
c0000f57:	8b 04 95 e4 cc 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd331c]
c0000f5e:	85 c0                	test   eax,eax
c0000f60:	74 0c                	je     c0000f6e <dlmalloc+0x6e>
c0000f62:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f65:	89 0c 95 e4 cc 02 c0 	mov    DWORD PTR [edx*4-0x3ffd331c],ecx
c0000f6c:	eb 30                	jmp    c0000f9e <dlmalloc+0x9e>
c0000f6e:	89 f0                	mov    eax,esi
c0000f70:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f76:	77 2e                	ja     c0000fa6 <dlmalloc+0xa6>
c0000f78:	c1 e8 03             	shr    eax,0x3
c0000f7b:	8d 14 c5 14 cd 02 c0 	lea    edx,[eax*8-0x3ffd32ec]
c0000f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f86:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f89:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f8c:	39 c3                	cmp    ebx,eax
c0000f8e:	74 2e                	je     c0000fbe <dlmalloc+0xbe>
c0000f90:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f93:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f98:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f9b:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f9e:	83 c0 08             	add    eax,0x8
c0000fa1:	e9 e0 02 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0000fa6:	e8 8f fa ff ff       	call   c0000a3a <largebin_index>
c0000fab:	83 e7 02             	and    edi,0x2
c0000fae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fb2:	74 0a                	je     c0000fbe <dlmalloc+0xbe>
c0000fb4:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c0000fb9:	e8 00 fb ff ff       	call   c0000abe <malloc_consolidate>
c0000fbe:	8d 46 10             	lea    eax,[esi+0x10]
c0000fc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fc5:	8b 1d 20 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cd20
c0000fcb:	81 fb 14 cd 02 c0    	cmp    ebx,0xc002cd14
c0000fd1:	0f 84 13 01 00 00    	je     c00010ea <dlmalloc+0x1ea>
c0000fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fda:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fdd:	83 e7 fc             	and    edi,0xfffffffc
c0000fe0:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fe6:	77 4c                	ja     c0001034 <dlmalloc+0x134>
c0000fe8:	3d 14 cd 02 c0       	cmp    eax,0xc002cd14
c0000fed:	75 45                	jne    c0001034 <dlmalloc+0x134>
c0000fef:	39 1d 10 cd 02 c0    	cmp    DWORD PTR ds:0xc002cd10,ebx
c0000ff5:	75 3d                	jne    c0001034 <dlmalloc+0x134>
c0000ff7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000ffb:	73 37                	jae    c0001034 <dlmalloc+0x134>
c0000ffd:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001000:	89 fa                	mov    edx,edi
c0001002:	a3 1c cd 02 c0       	mov    ds:0xc002cd1c,eax
c0001007:	a3 20 cd 02 c0       	mov    ds:0xc002cd20,eax
c000100c:	a3 10 cd 02 c0       	mov    ds:0xc002cd10,eax
c0001011:	29 f2                	sub    edx,esi
c0001013:	c7 40 08 14 cd 02 c0 	mov    DWORD PTR [eax+0x8],0xc002cd14
c000101a:	c7 40 0c 14 cd 02 c0 	mov    DWORD PTR [eax+0xc],0xc002cd14
c0001021:	83 ce 01             	or     esi,0x1
c0001024:	89 d1                	mov    ecx,edx
c0001026:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001029:	83 c9 01             	or     ecx,0x1
c000102c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000102f:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001032:	eb 15                	jmp    c0001049 <dlmalloc+0x149>
c0001034:	a3 20 cd 02 c0       	mov    ds:0xc002cd20,eax
c0001039:	39 fe                	cmp    esi,edi
c000103b:	c7 40 08 14 cd 02 c0 	mov    DWORD PTR [eax+0x8],0xc002cd14
c0001042:	75 0d                	jne    c0001051 <dlmalloc+0x151>
c0001044:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001049:	8d 43 08             	lea    eax,[ebx+0x8]
c000104c:	e9 35 02 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001051:	89 f8                	mov    eax,edi
c0001053:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001059:	77 19                	ja     c0001074 <dlmalloc+0x174>
c000105b:	c1 e8 03             	shr    eax,0x3
c000105e:	8d 14 00             	lea    edx,[eax+eax*1]
c0001061:	83 c2 0d             	add    edx,0xd
c0001064:	8d 2c 95 d8 cc 02 c0 	lea    ebp,[edx*4-0x3ffd3328]
c000106b:	8b 14 95 e0 cc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3320]
c0001072:	eb 46                	jmp    c00010ba <dlmalloc+0x1ba>
c0001074:	e8 c1 f9 ff ff       	call   c0000a3a <largebin_index>
c0001079:	8d 14 00             	lea    edx,[eax+eax*1]
c000107c:	83 c2 0d             	add    edx,0xd
c000107f:	8d 0c 95 e0 cc 02 c0 	lea    ecx,[edx*4-0x3ffd3320]
c0001086:	8b 14 95 e0 cc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3320]
c000108d:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001090:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001094:	89 d5                	mov    ebp,edx
c0001096:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000109a:	74 1e                	je     c00010ba <dlmalloc+0x1ba>
c000109c:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000109f:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010a2:	77 12                	ja     c00010b6 <dlmalloc+0x1b6>
c00010a4:	83 cf 01             	or     edi,0x1
c00010a7:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010aa:	76 05                	jbe    c00010b1 <dlmalloc+0x1b1>
c00010ac:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010af:	eb f6                	jmp    c00010a7 <dlmalloc+0x1a7>
c00010b1:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010b4:	eb 04                	jmp    c00010ba <dlmalloc+0x1ba>
c00010b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010ba:	89 c7                	mov    edi,eax
c00010bc:	88 c1                	mov    cl,al
c00010be:	c1 ff 05             	sar    edi,0x5
c00010c1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010c5:	bf 01 00 00 00       	mov    edi,0x1
c00010ca:	d3 e7                	shl    edi,cl
c00010cc:	89 f8                	mov    eax,edi
c00010ce:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010d2:	09 04 bd 14 d0 02 c0 	or     DWORD PTR [edi*4-0x3ffd2fec],eax
c00010d9:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010dc:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010df:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010e2:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010e5:	e9 db fe ff ff       	jmp    c0000fc5 <dlmalloc+0xc5>
c00010ea:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010f0:	76 78                	jbe    c000116a <dlmalloc+0x26a>
c00010f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010f6:	8d 04 c5 14 cd 02 c0 	lea    eax,[eax*8-0x3ffd32ec]
c00010fd:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001100:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001103:	39 ca                	cmp    edx,ecx
c0001105:	74 63                	je     c000116a <dlmalloc+0x26a>
c0001107:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000110a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000110d:	83 e3 fc             	and    ebx,0xfffffffc
c0001110:	39 de                	cmp    esi,ebx
c0001112:	77 52                	ja     c0001166 <dlmalloc+0x266>
c0001114:	89 df                	mov    edi,ebx
c0001116:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001119:	29 f7                	sub    edi,esi
c000111b:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000111e:	01 d3                	add    ebx,edx
c0001120:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001123:	83 ff 0f             	cmp    edi,0xf
c0001126:	8d 42 08             	lea    eax,[edx+0x8]
c0001129:	77 09                	ja     c0001134 <dlmalloc+0x234>
c000112b:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000112f:	e9 52 01 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001134:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001137:	83 ce 01             	or     esi,0x1
c000113a:	89 0d 1c cd 02 c0    	mov    DWORD PTR ds:0xc002cd1c,ecx
c0001140:	89 0d 20 cd 02 c0    	mov    DWORD PTR ds:0xc002cd20,ecx
c0001146:	c7 41 08 14 cd 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002cd14
c000114d:	c7 41 0c 14 cd 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002cd14
c0001154:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001157:	89 fa                	mov    edx,edi
c0001159:	83 ca 01             	or     edx,0x1
c000115c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000115f:	89 3b                	mov    DWORD PTR [ebx],edi
c0001161:	e9 20 01 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001166:	89 c2                	mov    edx,eax
c0001168:	eb 99                	jmp    c0001103 <dlmalloc+0x203>
c000116a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000116e:	b8 01 00 00 00       	mov    eax,0x1
c0001173:	41                   	inc    ecx
c0001174:	89 cb                	mov    ebx,ecx
c0001176:	8d 14 cd 0c cd 02 c0 	lea    edx,[ecx*8-0x3ffd32f4]
c000117d:	c1 eb 05             	shr    ebx,0x5
c0001180:	d3 e0                	shl    eax,cl
c0001182:	8b 3c 9d 14 d0 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd2fec]
c0001189:	39 f8                	cmp    eax,edi
c000118b:	77 04                	ja     c0001191 <dlmalloc+0x291>
c000118d:	85 c0                	test   eax,eax
c000118f:	75 26                	jne    c00011b7 <dlmalloc+0x2b7>
c0001191:	43                   	inc    ebx
c0001192:	83 fb 02             	cmp    ebx,0x2
c0001195:	0f 87 a6 00 00 00    	ja     c0001241 <dlmalloc+0x341>
c000119b:	8b 3c 9d 14 d0 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd2fec]
c00011a2:	85 ff                	test   edi,edi
c00011a4:	74 eb                	je     c0001191 <dlmalloc+0x291>
c00011a6:	89 d8                	mov    eax,ebx
c00011a8:	c1 e0 06             	shl    eax,0x6
c00011ab:	8d 14 85 0c cd 02 c0 	lea    edx,[eax*4-0x3ffd32f4]
c00011b2:	b8 01 00 00 00       	mov    eax,0x1
c00011b7:	85 f8                	test   eax,edi
c00011b9:	75 07                	jne    c00011c2 <dlmalloc+0x2c2>
c00011bb:	83 c2 08             	add    edx,0x8
c00011be:	01 c0                	add    eax,eax
c00011c0:	eb f5                	jmp    c00011b7 <dlmalloc+0x2b7>
c00011c2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011c5:	39 ca                	cmp    edx,ecx
c00011c7:	75 14                	jne    c00011dd <dlmalloc+0x2dd>
c00011c9:	89 c1                	mov    ecx,eax
c00011cb:	83 c2 08             	add    edx,0x8
c00011ce:	f7 d1                	not    ecx
c00011d0:	01 c0                	add    eax,eax
c00011d2:	21 cf                	and    edi,ecx
c00011d4:	89 3c 9d 14 d0 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd2fec],edi
c00011db:	eb ac                	jmp    c0001189 <dlmalloc+0x289>
c00011dd:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011e0:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011e3:	83 e0 fc             	and    eax,0xfffffffc
c00011e6:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011e9:	89 c3                	mov    ebx,eax
c00011eb:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011ee:	29 f3                	sub    ebx,esi
c00011f0:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011f3:	83 fb 0f             	cmp    ebx,0xf
c00011f6:	8d 41 08             	lea    eax,[ecx+0x8]
c00011f9:	77 09                	ja     c0001204 <dlmalloc+0x304>
c00011fb:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011ff:	e9 82 00 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001204:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001207:	81 fe ff 00 00 00    	cmp    esi,0xff
c000120d:	89 3d 1c cd 02 c0    	mov    DWORD PTR ds:0xc002cd1c,edi
c0001213:	89 3d 20 cd 02 c0    	mov    DWORD PTR ds:0xc002cd20,edi
c0001219:	c7 47 08 14 cd 02 c0 	mov    DWORD PTR [edi+0x8],0xc002cd14
c0001220:	c7 47 0c 14 cd 02 c0 	mov    DWORD PTR [edi+0xc],0xc002cd14
c0001227:	77 06                	ja     c000122f <dlmalloc+0x32f>
c0001229:	89 3d 10 cd 02 c0    	mov    DWORD PTR ds:0xc002cd10,edi
c000122f:	83 ce 01             	or     esi,0x1
c0001232:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001235:	89 d9                	mov    ecx,ebx
c0001237:	83 c9 01             	or     ecx,0x1
c000123a:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000123d:	89 1a                	mov    DWORD PTR [edx],ebx
c000123f:	eb 45                	jmp    c0001286 <dlmalloc+0x386>
c0001241:	a1 0c cd 02 c0       	mov    eax,ds:0xc002cd0c
c0001246:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001249:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000124c:	83 e2 fc             	and    edx,0xfffffffc
c000124f:	39 d1                	cmp    ecx,edx
c0001251:	77 1e                	ja     c0001271 <dlmalloc+0x371>
c0001253:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001256:	89 f3                	mov    ebx,esi
c0001258:	89 0d 0c cd 02 c0    	mov    DWORD PTR ds:0xc002cd0c,ecx
c000125e:	83 cb 01             	or     ebx,0x1
c0001261:	29 f2                	sub    edx,esi
c0001263:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001266:	83 ca 01             	or     edx,0x1
c0001269:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000126c:	e9 2d fd ff ff       	jmp    c0000f9e <dlmalloc+0x9e>
c0001271:	83 c4 1c             	add    esp,0x1c
c0001274:	89 f0                	mov    eax,esi
c0001276:	5b                   	pop    ebx
c0001277:	ba e0 cc 02 c0       	mov    edx,0xc002cce0
c000127c:	5e                   	pop    esi
c000127d:	5f                   	pop    edi
c000127e:	5d                   	pop    ebp
c000127f:	e9 16 fa ff ff       	jmp    c0000c9a <sYSMALLOc>
c0001284:	31 c0                	xor    eax,eax
c0001286:	83 c4 1c             	add    esp,0x1c
c0001289:	5b                   	pop    ebx
c000128a:	5e                   	pop    esi
c000128b:	5f                   	pop    edi
c000128c:	5d                   	pop    ebp
c000128d:	c3                   	ret    

c000128e <iALLOc>:
c000128e:	55                   	push   ebp
c000128f:	89 c5                	mov    ebp,eax
c0001291:	57                   	push   edi
c0001292:	56                   	push   esi
c0001293:	53                   	push   ebx
c0001294:	83 ec 2c             	sub    esp,0x2c
c0001297:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000129b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000129f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012a3:	83 3d e0 cc 02 c0 00 	cmp    DWORD PTR ds:0xc002cce0,0x0
c00012aa:	75 12                	jne    c00012be <iALLOc+0x30>
c00012ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012b0:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c00012b5:	e8 04 f8 ff ff       	call   c0000abe <malloc_consolidate>
c00012ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012be:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012c3:	74 12                	je     c00012d7 <iALLOc+0x49>
c00012c5:	85 ed                	test   ebp,ebp
c00012c7:	0f 84 64 01 00 00    	je     c0001431 <iALLOc+0x1a3>
c00012cd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012d5:	eb 33                	jmp    c000130a <iALLOc+0x7c>
c00012d7:	85 ed                	test   ebp,ebp
c00012d9:	75 14                	jne    c00012ef <iALLOc+0x61>
c00012db:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012e3:	83 c4 2c             	add    esp,0x2c
c00012e6:	5b                   	pop    ebx
c00012e7:	5e                   	pop    esi
c00012e8:	5f                   	pop    edi
c00012e9:	5d                   	pop    ebp
c00012ea:	e9 11 fc ff ff       	jmp    c0000f00 <dlmalloc>
c00012ef:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012f6:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012fe:	83 f8 0f             	cmp    eax,0xf
c0001301:	76 07                	jbe    c000130a <iALLOc+0x7c>
c0001303:	83 e0 f8             	and    eax,0xfffffff8
c0001306:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000130a:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000130f:	75 09                	jne    c000131a <iALLOc+0x8c>
c0001311:	89 d0                	mov    eax,edx
c0001313:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001316:	31 f6                	xor    esi,esi
c0001318:	eb 3b                	jmp    c0001355 <iALLOc+0xc7>
c000131a:	8b 02                	mov    eax,DWORD PTR [edx]
c000131c:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001324:	83 c0 0b             	add    eax,0xb
c0001327:	83 f8 0f             	cmp    eax,0xf
c000132a:	76 07                	jbe    c0001333 <iALLOc+0xa5>
c000132c:	83 e0 f8             	and    eax,0xfffffff8
c000132f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001333:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001337:	0f af f5             	imul   esi,ebp
c000133a:	eb 25                	jmp    c0001361 <iALLOc+0xd3>
c000133c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000133e:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001341:	bb 10 00 00 00       	mov    ebx,0x10
c0001346:	83 f9 0f             	cmp    ecx,0xf
c0001349:	76 05                	jbe    c0001350 <iALLOc+0xc2>
c000134b:	83 e1 f8             	and    ecx,0xfffffff8
c000134e:	89 cb                	mov    ebx,ecx
c0001350:	01 de                	add    esi,ebx
c0001352:	83 c0 04             	add    eax,0x4
c0001355:	39 c7                	cmp    edi,eax
c0001357:	75 e3                	jne    c000133c <iALLOc+0xae>
c0001359:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001361:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001365:	8b 1d 34 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d034
c000136b:	83 ec 0c             	sub    esp,0xc
c000136e:	c7 05 34 d0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d034,0x0
c0001378:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000137c:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001380:	50                   	push   eax
c0001381:	e8 7a fb ff ff       	call   c0000f00 <dlmalloc>
c0001386:	83 c4 10             	add    esp,0x10
c0001389:	89 1d 34 d0 02 c0    	mov    DWORD PTR ds:0xc002d034,ebx
c000138f:	85 c0                	test   eax,eax
c0001391:	0f 84 92 00 00 00    	je     c0001429 <iALLOc+0x19b>
c0001397:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000139a:	8d 78 f8             	lea    edi,[eax-0x8]
c000139d:	83 e3 fc             	and    ebx,0xfffffffc
c00013a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013a4:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013a9:	74 1e                	je     c00013c9 <iALLOc+0x13b>
c00013ab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013af:	89 d9                	mov    ecx,ebx
c00013b1:	52                   	push   edx
c00013b2:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013b6:	83 e9 04             	sub    ecx,0x4
c00013b9:	51                   	push   ecx
c00013ba:	6a 00                	push   0x0
c00013bc:	50                   	push   eax
c00013bd:	e8 02 f3 ff ff       	call   c00006c4 <memset>
c00013c2:	83 c4 10             	add    esp,0x10
c00013c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013ce:	75 14                	jne    c00013e4 <iALLOc+0x156>
c00013d0:	8d 04 37             	lea    eax,[edi+esi*1]
c00013d3:	29 f3                	sub    ebx,esi
c00013d5:	8d 48 08             	lea    ecx,[eax+0x8]
c00013d8:	83 cb 01             	or     ebx,0x1
c00013db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013df:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013e2:	89 f3                	mov    ebx,esi
c00013e4:	31 c0                	xor    eax,eax
c00013e6:	4d                   	dec    ebp
c00013e7:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013ea:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013ee:	39 c5                	cmp    ebp,eax
c00013f0:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013f3:	74 2c                	je     c0001421 <iALLOc+0x193>
c00013f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013f9:	85 c9                	test   ecx,ecx
c00013fb:	75 15                	jne    c0001412 <iALLOc+0x184>
c00013fd:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001400:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001403:	b9 10 00 00 00       	mov    ecx,0x10
c0001408:	83 fe 0f             	cmp    esi,0xf
c000140b:	76 05                	jbe    c0001412 <iALLOc+0x184>
c000140d:	83 e6 f8             	and    esi,0xfffffff8
c0001410:	89 f1                	mov    ecx,esi
c0001412:	89 ce                	mov    esi,ecx
c0001414:	29 cb                	sub    ebx,ecx
c0001416:	83 ce 01             	or     esi,0x1
c0001419:	40                   	inc    eax
c000141a:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000141d:	01 cf                	add    edi,ecx
c000141f:	eb c6                	jmp    c00013e7 <iALLOc+0x159>
c0001421:	83 cb 01             	or     ebx,0x1
c0001424:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001427:	eb 08                	jmp    c0001431 <iALLOc+0x1a3>
c0001429:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001431:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001435:	83 c4 2c             	add    esp,0x2c
c0001438:	5b                   	pop    ebx
c0001439:	5e                   	pop    esi
c000143a:	5f                   	pop    edi
c000143b:	5d                   	pop    ebp
c000143c:	c3                   	ret    

c000143d <dlrealloc>:
c000143d:	55                   	push   ebp
c000143e:	57                   	push   edi
c000143f:	56                   	push   esi
c0001440:	53                   	push   ebx
c0001441:	83 ec 1c             	sub    esp,0x1c
c0001444:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001448:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000144c:	85 db                	test   ebx,ebx
c000144e:	75 10                	jne    c0001460 <dlrealloc+0x23>
c0001450:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001454:	83 c4 1c             	add    esp,0x1c
c0001457:	5b                   	pop    ebx
c0001458:	5e                   	pop    esi
c0001459:	5f                   	pop    edi
c000145a:	5d                   	pop    ebp
c000145b:	e9 a0 fa ff ff       	jmp    c0000f00 <dlmalloc>
c0001460:	83 f8 df             	cmp    eax,0xffffffdf
c0001463:	76 07                	jbe    c000146c <dlrealloc+0x2f>
c0001465:	31 db                	xor    ebx,ebx
c0001467:	e9 7c 01 00 00       	jmp    c00015e8 <dlrealloc+0x1ab>
c000146c:	83 c0 0b             	add    eax,0xb
c000146f:	bf 10 00 00 00       	mov    edi,0x10
c0001474:	83 f8 0f             	cmp    eax,0xf
c0001477:	76 05                	jbe    c000147e <dlrealloc+0x41>
c0001479:	83 e0 f8             	and    eax,0xfffffff8
c000147c:	89 c7                	mov    edi,eax
c000147e:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001481:	8d 6b f8             	lea    ebp,[ebx-0x8]
c0001484:	89 c6                	mov    esi,eax
c0001486:	83 e6 fc             	and    esi,0xfffffffc
c0001489:	a8 02                	test   al,0x2
c000148b:	75 d8                	jne    c0001465 <dlrealloc+0x28>
c000148d:	39 f7                	cmp    edi,esi
c000148f:	0f 86 15 01 00 00    	jbe    c00015aa <dlrealloc+0x16d>
c0001495:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001499:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000149c:	39 15 0c cd 02 c0    	cmp    DWORD PTR ds:0xc002cd0c,edx
c00014a2:	75 33                	jne    c00014d7 <dlrealloc+0x9a>
c00014a4:	83 e1 fc             	and    ecx,0xfffffffc
c00014a7:	01 f1                	add    ecx,esi
c00014a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014ad:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014b0:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014b4:	77 49                	ja     c00014ff <dlrealloc+0xc2>
c00014b6:	01 fd                	add    ebp,edi
c00014b8:	83 e0 01             	and    eax,0x1
c00014bb:	09 f8                	or     eax,edi
c00014bd:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014c0:	89 2d 0c cd 02 c0    	mov    DWORD PTR ds:0xc002cd0c,ebp
c00014c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014ca:	29 f8                	sub    eax,edi
c00014cc:	83 c8 01             	or     eax,0x1
c00014cf:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014d2:	e9 11 01 00 00       	jmp    c00015e8 <dlrealloc+0x1ab>
c00014d7:	89 c8                	mov    eax,ecx
c00014d9:	83 e0 fe             	and    eax,0xfffffffe
c00014dc:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014e1:	75 1c                	jne    c00014ff <dlrealloc+0xc2>
c00014e3:	83 e1 fc             	and    ecx,0xfffffffc
c00014e6:	01 f1                	add    ecx,esi
c00014e8:	39 cf                	cmp    edi,ecx
c00014ea:	77 13                	ja     c00014ff <dlrealloc+0xc2>
c00014ec:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014ef:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014f2:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014f5:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014f8:	89 ce                	mov    esi,ecx
c00014fa:	e9 ab 00 00 00       	jmp    c00015aa <dlrealloc+0x16d>
c00014ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001503:	8d 47 f9             	lea    eax,[edi-0x7]
c0001506:	83 ec 0c             	sub    esp,0xc
c0001509:	50                   	push   eax
c000150a:	e8 f1 f9 ff ff       	call   c0000f00 <dlmalloc>
c000150f:	83 c4 10             	add    esp,0x10
c0001512:	89 c1                	mov    ecx,eax
c0001514:	85 c0                	test   eax,eax
c0001516:	0f 84 49 ff ff ff    	je     c0001465 <dlrealloc+0x28>
c000151c:	8d 40 f8             	lea    eax,[eax-0x8]
c000151f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001523:	39 c2                	cmp    edx,eax
c0001525:	75 0a                	jne    c0001531 <dlrealloc+0xf4>
c0001527:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000152a:	83 e0 fc             	and    eax,0xfffffffc
c000152d:	01 c6                	add    esi,eax
c000152f:	eb 79                	jmp    c00015aa <dlrealloc+0x16d>
c0001531:	83 ee 04             	sub    esi,0x4
c0001534:	83 fe 27             	cmp    esi,0x27
c0001537:	76 16                	jbe    c000154f <dlrealloc+0x112>
c0001539:	50                   	push   eax
c000153a:	56                   	push   esi
c000153b:	53                   	push   ebx
c000153c:	51                   	push   ecx
c000153d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001541:	e8 5a f1 ff ff       	call   c00006a0 <memcpy>
c0001546:	83 c4 10             	add    esp,0x10
c0001549:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000154d:	eb 43                	jmp    c0001592 <dlrealloc+0x155>
c000154f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001551:	83 fe 13             	cmp    esi,0x13
c0001554:	89 01                	mov    DWORD PTR [ecx],eax
c0001556:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001559:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000155c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000155f:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001562:	76 2e                	jbe    c0001592 <dlrealloc+0x155>
c0001564:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001567:	83 fe 1b             	cmp    esi,0x1b
c000156a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000156d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001570:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001573:	76 1d                	jbe    c0001592 <dlrealloc+0x155>
c0001575:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001578:	83 fe 23             	cmp    esi,0x23
c000157b:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000157e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001581:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c0001584:	76 0c                	jbe    c0001592 <dlrealloc+0x155>
c0001586:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001589:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c000158c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000158f:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001592:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001596:	83 ec 0c             	sub    esp,0xc
c0001599:	53                   	push   ebx
c000159a:	e8 06 f6 ff ff       	call   c0000ba5 <dlfree>
c000159f:	83 c4 10             	add    esp,0x10
c00015a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015a6:	89 cb                	mov    ebx,ecx
c00015a8:	eb 3e                	jmp    c00015e8 <dlrealloc+0x1ab>
c00015aa:	89 f2                	mov    edx,esi
c00015ac:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015af:	29 fa                	sub    edx,edi
c00015b1:	83 e1 01             	and    ecx,0x1
c00015b4:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015b8:	83 fa 0f             	cmp    edx,0xf
c00015bb:	77 0b                	ja     c00015c8 <dlrealloc+0x18b>
c00015bd:	09 ce                	or     esi,ecx
c00015bf:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015c2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015c6:	eb 20                	jmp    c00015e8 <dlrealloc+0x1ab>
c00015c8:	01 fd                	add    ebp,edi
c00015ca:	83 ec 0c             	sub    esp,0xc
c00015cd:	09 cf                	or     edi,ecx
c00015cf:	83 ca 01             	or     edx,0x1
c00015d2:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015d5:	83 c5 08             	add    ebp,0x8
c00015d8:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015db:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015df:	55                   	push   ebp
c00015e0:	e8 c0 f5 ff ff       	call   c0000ba5 <dlfree>
c00015e5:	83 c4 10             	add    esp,0x10
c00015e8:	83 c4 1c             	add    esp,0x1c
c00015eb:	89 d8                	mov    eax,ebx
c00015ed:	5b                   	pop    ebx
c00015ee:	5e                   	pop    esi
c00015ef:	5f                   	pop    edi
c00015f0:	5d                   	pop    ebp
c00015f1:	c3                   	ret    

c00015f2 <dlmemalign>:
c00015f2:	55                   	push   ebp
c00015f3:	57                   	push   edi
c00015f4:	56                   	push   esi
c00015f5:	53                   	push   ebx
c00015f6:	83 ec 0c             	sub    esp,0xc
c00015f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001601:	83 fa 08             	cmp    edx,0x8
c0001604:	77 10                	ja     c0001616 <dlmemalign+0x24>
c0001606:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000160a:	83 c4 0c             	add    esp,0xc
c000160d:	5b                   	pop    ebx
c000160e:	5e                   	pop    esi
c000160f:	5f                   	pop    edi
c0001610:	5d                   	pop    ebp
c0001611:	e9 ea f8 ff ff       	jmp    c0000f00 <dlmalloc>
c0001616:	bf 10 00 00 00       	mov    edi,0x10
c000161b:	83 fa 0f             	cmp    edx,0xf
c000161e:	76 13                	jbe    c0001633 <dlmemalign+0x41>
c0001620:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001623:	85 d1                	test   ecx,edx
c0001625:	75 04                	jne    c000162b <dlmemalign+0x39>
c0001627:	89 d7                	mov    edi,edx
c0001629:	eb 08                	jmp    c0001633 <dlmemalign+0x41>
c000162b:	39 d7                	cmp    edi,edx
c000162d:	73 04                	jae    c0001633 <dlmemalign+0x41>
c000162f:	01 ff                	add    edi,edi
c0001631:	eb f8                	jmp    c000162b <dlmemalign+0x39>
c0001633:	83 f8 df             	cmp    eax,0xffffffdf
c0001636:	76 07                	jbe    c000163f <dlmemalign+0x4d>
c0001638:	31 c0                	xor    eax,eax
c000163a:	e9 ce 00 00 00       	jmp    c000170d <dlmemalign+0x11b>
c000163f:	83 c0 0b             	add    eax,0xb
c0001642:	bd 10 00 00 00       	mov    ebp,0x10
c0001647:	83 f8 0f             	cmp    eax,0xf
c000164a:	76 05                	jbe    c0001651 <dlmemalign+0x5f>
c000164c:	83 e0 f8             	and    eax,0xfffffff8
c000164f:	89 c5                	mov    ebp,eax
c0001651:	83 ec 0c             	sub    esp,0xc
c0001654:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001658:	50                   	push   eax
c0001659:	e8 a2 f8 ff ff       	call   c0000f00 <dlmalloc>
c000165e:	83 c4 10             	add    esp,0x10
c0001661:	89 c1                	mov    ecx,eax
c0001663:	85 c0                	test   eax,eax
c0001665:	74 d1                	je     c0001638 <dlmemalign+0x46>
c0001667:	31 d2                	xor    edx,edx
c0001669:	8d 70 f8             	lea    esi,[eax-0x8]
c000166c:	f7 f7                	div    edi
c000166e:	85 d2                	test   edx,edx
c0001670:	74 62                	je     c00016d4 <dlmemalign+0xe2>
c0001672:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001676:	89 f8                	mov    eax,edi
c0001678:	f7 d8                	neg    eax
c000167a:	21 c3                	and    ebx,eax
c000167c:	83 eb 08             	sub    ebx,0x8
c000167f:	89 d8                	mov    eax,ebx
c0001681:	29 f0                	sub    eax,esi
c0001683:	83 f8 0f             	cmp    eax,0xf
c0001686:	77 02                	ja     c000168a <dlmemalign+0x98>
c0001688:	01 fb                	add    ebx,edi
c000168a:	89 d8                	mov    eax,ebx
c000168c:	29 f0                	sub    eax,esi
c000168e:	89 c6                	mov    esi,eax
c0001690:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001693:	89 c2                	mov    edx,eax
c0001695:	83 e2 fc             	and    edx,0xfffffffc
c0001698:	29 f2                	sub    edx,esi
c000169a:	a8 02                	test   al,0x2
c000169c:	74 10                	je     c00016ae <dlmemalign+0xbc>
c000169e:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016a1:	83 ca 02             	or     edx,0x2
c00016a4:	8d 43 08             	lea    eax,[ebx+0x8]
c00016a7:	89 33                	mov    DWORD PTR [ebx],esi
c00016a9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016ac:	eb 5f                	jmp    c000170d <dlmemalign+0x11b>
c00016ae:	83 ec 0c             	sub    esp,0xc
c00016b1:	89 d0                	mov    eax,edx
c00016b3:	83 c8 01             	or     eax,0x1
c00016b6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016b9:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016be:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016c1:	83 e0 01             	and    eax,0x1
c00016c4:	09 f0                	or     eax,esi
c00016c6:	89 de                	mov    esi,ebx
c00016c8:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016cb:	51                   	push   ecx
c00016cc:	e8 d4 f4 ff ff       	call   c0000ba5 <dlfree>
c00016d1:	83 c4 10             	add    esp,0x10
c00016d4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016d7:	a8 02                	test   al,0x2
c00016d9:	75 2f                	jne    c000170a <dlmemalign+0x118>
c00016db:	83 e0 fc             	and    eax,0xfffffffc
c00016de:	8d 55 10             	lea    edx,[ebp+0x10]
c00016e1:	39 c2                	cmp    edx,eax
c00016e3:	73 25                	jae    c000170a <dlmemalign+0x118>
c00016e5:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016e8:	83 ec 0c             	sub    esp,0xc
c00016eb:	29 e8                	sub    eax,ebp
c00016ed:	83 c2 08             	add    edx,0x8
c00016f0:	83 c8 01             	or     eax,0x1
c00016f3:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016f6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016f9:	83 e0 01             	and    eax,0x1
c00016fc:	09 c5                	or     ebp,eax
c00016fe:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001701:	52                   	push   edx
c0001702:	e8 9e f4 ff ff       	call   c0000ba5 <dlfree>
c0001707:	83 c4 10             	add    esp,0x10
c000170a:	8d 46 08             	lea    eax,[esi+0x8]
c000170d:	83 c4 0c             	add    esp,0xc
c0001710:	5b                   	pop    ebx
c0001711:	5e                   	pop    esi
c0001712:	5f                   	pop    edi
c0001713:	5d                   	pop    ebp
c0001714:	c3                   	ret    

c0001715 <dlcalloc>:
c0001715:	53                   	push   ebx
c0001716:	83 ec 14             	sub    esp,0x14
c0001719:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000171d:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001722:	50                   	push   eax
c0001723:	e8 d8 f7 ff ff       	call   c0000f00 <dlmalloc>
c0001728:	83 c4 10             	add    esp,0x10
c000172b:	89 c3                	mov    ebx,eax
c000172d:	85 c0                	test   eax,eax
c000172f:	74 77                	je     c00017a8 <dlcalloc+0x93>
c0001731:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001734:	89 d0                	mov    eax,edx
c0001736:	83 e0 fc             	and    eax,0xfffffffc
c0001739:	80 e2 02             	and    dl,0x2
c000173c:	75 5a                	jne    c0001798 <dlcalloc+0x83>
c000173e:	83 e8 04             	sub    eax,0x4
c0001741:	83 f8 27             	cmp    eax,0x27
c0001744:	76 03                	jbe    c0001749 <dlcalloc+0x34>
c0001746:	51                   	push   ecx
c0001747:	eb 53                	jmp    c000179c <dlcalloc+0x87>
c0001749:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000174f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001756:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000175d:	83 f8 13             	cmp    eax,0x13
c0001760:	76 46                	jbe    c00017a8 <dlcalloc+0x93>
c0001762:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001769:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001770:	83 f8 1b             	cmp    eax,0x1b
c0001773:	76 33                	jbe    c00017a8 <dlcalloc+0x93>
c0001775:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000177c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001783:	83 f8 23             	cmp    eax,0x23
c0001786:	76 20                	jbe    c00017a8 <dlcalloc+0x93>
c0001788:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000178f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001796:	eb 10                	jmp    c00017a8 <dlcalloc+0x93>
c0001798:	83 e8 08             	sub    eax,0x8
c000179b:	52                   	push   edx
c000179c:	50                   	push   eax
c000179d:	6a 00                	push   0x0
c000179f:	53                   	push   ebx
c00017a0:	e8 1f ef ff ff       	call   c00006c4 <memset>
c00017a5:	83 c4 10             	add    esp,0x10
c00017a8:	89 d8                	mov    eax,ebx
c00017aa:	83 c4 08             	add    esp,0x8
c00017ad:	5b                   	pop    ebx
c00017ae:	c3                   	ret    

c00017af <dlcfree>:
c00017af:	e9 f1 f3 ff ff       	jmp    c0000ba5 <dlfree>

c00017b4 <dlindependent_calloc>:
c00017b4:	83 ec 28             	sub    esp,0x28
c00017b7:	b9 03 00 00 00       	mov    ecx,0x3
c00017bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017c8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017d0:	e8 b9 fa ff ff       	call   c000128e <iALLOc>
c00017d5:	83 c4 2c             	add    esp,0x2c
c00017d8:	c3                   	ret    

c00017d9 <dlindependent_comalloc>:
c00017d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017e1:	31 c9                	xor    ecx,ecx
c00017e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017eb:	e9 9e fa ff ff       	jmp    c000128e <iALLOc>

c00017f0 <dlvalloc>:
c00017f0:	83 ec 0c             	sub    esp,0xc
c00017f3:	83 3d e0 cc 02 c0 00 	cmp    DWORD PTR ds:0xc002cce0,0x0
c00017fa:	75 0a                	jne    c0001806 <dlvalloc+0x16>
c00017fc:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c0001801:	e8 b8 f2 ff ff       	call   c0000abe <malloc_consolidate>
c0001806:	50                   	push   eax
c0001807:	50                   	push   eax
c0001808:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000180c:	ff 35 3c d0 02 c0    	push   DWORD PTR ds:0xc002d03c
c0001812:	e8 db fd ff ff       	call   c00015f2 <dlmemalign>
c0001817:	83 c4 1c             	add    esp,0x1c
c000181a:	c3                   	ret    

c000181b <dlpvalloc>:
c000181b:	83 ec 0c             	sub    esp,0xc
c000181e:	83 3d e0 cc 02 c0 00 	cmp    DWORD PTR ds:0xc002cce0,0x0
c0001825:	75 0a                	jne    c0001831 <dlpvalloc+0x16>
c0001827:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c000182c:	e8 8d f2 ff ff       	call   c0000abe <malloc_consolidate>
c0001831:	a1 3c d0 02 c0       	mov    eax,ds:0xc002d03c
c0001836:	89 c1                	mov    ecx,eax
c0001838:	52                   	push   edx
c0001839:	f7 d9                	neg    ecx
c000183b:	52                   	push   edx
c000183c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001840:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001844:	21 ca                	and    edx,ecx
c0001846:	52                   	push   edx
c0001847:	50                   	push   eax
c0001848:	e8 a5 fd ff ff       	call   c00015f2 <dlmemalign>
c000184d:	83 c4 1c             	add    esp,0x1c
c0001850:	c3                   	ret    

c0001851 <dlmalloc_trim>:
c0001851:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c0001856:	e8 63 f2 ff ff       	call   c0000abe <malloc_consolidate>
c000185b:	31 c0                	xor    eax,eax
c000185d:	c3                   	ret    

c000185e <dlmalloc_usable_size>:
c000185e:	53                   	push   ebx
c000185f:	31 c0                	xor    eax,eax
c0001861:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001865:	85 c9                	test   ecx,ecx
c0001867:	74 24                	je     c000188d <dlmalloc_usable_size+0x2f>
c0001869:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000186c:	f6 c2 02             	test   dl,0x2
c000186f:	74 08                	je     c0001879 <dlmalloc_usable_size+0x1b>
c0001871:	83 e2 fc             	and    edx,0xfffffffc
c0001874:	8d 42 f8             	lea    eax,[edx-0x8]
c0001877:	eb 14                	jmp    c000188d <dlmalloc_usable_size+0x2f>
c0001879:	89 d3                	mov    ebx,edx
c000187b:	31 c0                	xor    eax,eax
c000187d:	83 e3 fe             	and    ebx,0xfffffffe
c0001880:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001885:	74 06                	je     c000188d <dlmalloc_usable_size+0x2f>
c0001887:	83 e2 fc             	and    edx,0xfffffffc
c000188a:	8d 42 fc             	lea    eax,[edx-0x4]
c000188d:	5b                   	pop    ebx
c000188e:	c3                   	ret    

c000188f <dlmallinfo>:
c000188f:	55                   	push   ebp
c0001890:	57                   	push   edi
c0001891:	56                   	push   esi
c0001892:	53                   	push   ebx
c0001893:	83 ec 08             	sub    esp,0x8
c0001896:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000189a:	83 3d 0c cd 02 c0 00 	cmp    DWORD PTR ds:0xc002cd0c,0x0
c00018a1:	75 0a                	jne    c00018ad <dlmallinfo+0x1e>
c00018a3:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c00018a8:	e8 11 f2 ff ff       	call   c0000abe <malloc_consolidate>
c00018ad:	a1 0c cd 02 c0       	mov    eax,ds:0xc002cd0c
c00018b2:	31 ed                	xor    ebp,ebp
c00018b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018b7:	31 c9                	xor    ecx,ecx
c00018b9:	83 e0 fc             	and    eax,0xfffffffc
c00018bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018c0:	31 c0                	xor    eax,eax
c00018c2:	8b 14 85 e4 cc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd331c]
c00018c9:	85 d2                	test   edx,edx
c00018cb:	74 0e                	je     c00018db <dlmallinfo+0x4c>
c00018cd:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018d0:	45                   	inc    ebp
c00018d1:	83 e6 fc             	and    esi,0xfffffffc
c00018d4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018d7:	01 f1                	add    ecx,esi
c00018d9:	eb ee                	jmp    c00018c9 <dlmallinfo+0x3a>
c00018db:	40                   	inc    eax
c00018dc:	83 f8 0a             	cmp    eax,0xa
c00018df:	75 e1                	jne    c00018c2 <dlmallinfo+0x33>
c00018e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018ec:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018ef:	b8 14 cd 02 c0       	mov    eax,0xc002cd14
c00018f4:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018f7:	39 f0                	cmp    eax,esi
c00018f9:	74 10                	je     c000190b <dlmallinfo+0x7c>
c00018fb:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018fe:	ff 04 24             	inc    DWORD PTR [esp]
c0001901:	83 e7 fc             	and    edi,0xfffffffc
c0001904:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001907:	01 fa                	add    edx,edi
c0001909:	eb ec                	jmp    c00018f7 <dlmallinfo+0x68>
c000190b:	83 c0 08             	add    eax,0x8
c000190e:	3d 0c d0 02 c0       	cmp    eax,0xc002d00c
c0001913:	75 df                	jne    c00018f4 <dlmallinfo+0x65>
c0001915:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001918:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000191b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000191e:	a1 48 d0 02 c0       	mov    eax,ds:0xc002d048
c0001923:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001926:	89 03                	mov    DWORD PTR [ebx],eax
c0001928:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000192b:	8b 35 30 d0 02 c0    	mov    esi,DWORD PTR ds:0xc002d030
c0001931:	29 d0                	sub    eax,edx
c0001933:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001936:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001939:	8b 35 44 d0 02 c0    	mov    esi,DWORD PTR ds:0xc002d044
c000193f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001943:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001946:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001949:	8b 35 54 d0 02 c0    	mov    esi,DWORD PTR ds:0xc002d054
c000194f:	89 d8                	mov    eax,ebx
c0001951:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001954:	83 c4 08             	add    esp,0x8
c0001957:	5b                   	pop    ebx
c0001958:	5e                   	pop    esi
c0001959:	5f                   	pop    edi
c000195a:	5d                   	pop    ebp
c000195b:	c2 04 00             	ret    0x4

c000195e <dlmalloc_stats>:
c000195e:	83 ec 30             	sub    esp,0x30
c0001961:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001965:	50                   	push   eax
c0001966:	e8 24 ff ff ff       	call   c000188f <dlmallinfo>
c000196b:	83 c4 30             	add    esp,0x30
c000196e:	c3                   	ret    

c000196f <dlmallopt>:
c000196f:	56                   	push   esi
c0001970:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c0001975:	53                   	push   ebx
c0001976:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000197a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000197e:	e8 3b f1 ff ff       	call   c0000abe <malloc_consolidate>
c0001983:	8d 46 04             	lea    eax,[esi+0x4]
c0001986:	83 f8 05             	cmp    eax,0x5
c0001989:	77 67                	ja     c00019f2 <dlmallopt+0x83>
c000198b:	ff 24 85 c4 81 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd7e3c]
c0001992:	83 fb 50             	cmp    ebx,0x50
c0001995:	77 5b                	ja     c00019f2 <dlmallopt+0x83>
c0001997:	ba 08 00 00 00       	mov    edx,0x8
c000199c:	85 db                	test   ebx,ebx
c000199e:	74 12                	je     c00019b2 <dlmallopt+0x43>
c00019a0:	83 c3 0b             	add    ebx,0xb
c00019a3:	ba 10 00 00 00       	mov    edx,0x10
c00019a8:	83 fb 0f             	cmp    ebx,0xf
c00019ab:	76 05                	jbe    c00019b2 <dlmallopt+0x43>
c00019ad:	89 da                	mov    edx,ebx
c00019af:	83 e2 f8             	and    edx,0xfffffff8
c00019b2:	a1 e0 cc 02 c0       	mov    eax,ds:0xc002cce0
c00019b7:	83 e0 03             	and    eax,0x3
c00019ba:	09 d0                	or     eax,edx
c00019bc:	a3 e0 cc 02 c0       	mov    ds:0xc002cce0,eax
c00019c1:	eb 31                	jmp    c00019f4 <dlmallopt+0x85>
c00019c3:	89 1d 24 d0 02 c0    	mov    DWORD PTR ds:0xc002d024,ebx
c00019c9:	eb 06                	jmp    c00019d1 <dlmallopt+0x62>
c00019cb:	89 1d 28 d0 02 c0    	mov    DWORD PTR ds:0xc002d028,ebx
c00019d1:	be 01 00 00 00       	mov    esi,0x1
c00019d6:	eb 1c                	jmp    c00019f4 <dlmallopt+0x85>
c00019d8:	89 1d 2c d0 02 c0    	mov    DWORD PTR ds:0xc002d02c,ebx
c00019de:	eb f1                	jmp    c00019d1 <dlmallopt+0x62>
c00019e0:	31 f6                	xor    esi,esi
c00019e2:	85 db                	test   ebx,ebx
c00019e4:	75 0e                	jne    c00019f4 <dlmallopt+0x85>
c00019e6:	c7 05 34 d0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d034,0x0
c00019f0:	eb df                	jmp    c00019d1 <dlmallopt+0x62>
c00019f2:	31 f6                	xor    esi,esi
c00019f4:	89 f0                	mov    eax,esi
c00019f6:	5b                   	pop    ebx
c00019f7:	5e                   	pop    esi
c00019f8:	c3                   	ret    

c00019f9 <disk_status>:
c00019f9:	31 c0                	xor    eax,eax
c00019fb:	c3                   	ret    

c00019fc <disk_initialize>:
c00019fc:	31 c0                	xor    eax,eax
c00019fe:	c3                   	ret    

c00019ff <disk_read>:
c00019ff:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a04:	0f b6 04 85 a0 e7 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1860]
c0001a0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a10:	e9 fb e7 01 00       	jmp    c0020210 <fatWrapperReadDisk>

c0001a15 <disk_write>:
c0001a15:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a1a:	0f b6 04 85 a0 e7 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1860]
c0001a22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a26:	e9 2c e8 01 00       	jmp    c0020257 <fatWrapperWriteDisk>

c0001a2b <disk_ioctl>:
c0001a2b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a34:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a39:	0f b6 04 85 a0 e7 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1860]
c0001a41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a45:	e9 54 e8 01 00       	jmp    c002029e <fatWrapperIoctl>

c0001a4a <ld_word>:
c0001a4a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a4e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a51:	c1 e2 08             	shl    edx,0x8
c0001a54:	09 d0                	or     eax,edx
c0001a56:	c3                   	ret    

c0001a57 <ld_dword>:
c0001a57:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a5b:	89 d1                	mov    ecx,edx
c0001a5d:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a61:	c1 e1 08             	shl    ecx,0x8
c0001a64:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a67:	09 ca                	or     edx,ecx
c0001a69:	c1 e2 08             	shl    edx,0x8
c0001a6c:	09 d0                	or     eax,edx
c0001a6e:	c3                   	ret    

c0001a6f <ld_qword>:
c0001a6f:	57                   	push   edi
c0001a70:	56                   	push   esi
c0001a71:	53                   	push   ebx
c0001a72:	31 db                	xor    ebx,ebx
c0001a74:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a77:	89 df                	mov    edi,ebx
c0001a79:	89 ce                	mov    esi,ecx
c0001a7b:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a7f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a83:	c1 e6 08             	shl    esi,0x8
c0001a86:	09 f2                	or     edx,esi
c0001a88:	89 d6                	mov    esi,edx
c0001a8a:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a8e:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a92:	c1 e6 08             	shl    esi,0x8
c0001a95:	09 f2                	or     edx,esi
c0001a97:	89 d6                	mov    esi,edx
c0001a99:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a9d:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aa1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001aa4:	c1 e6 08             	shl    esi,0x8
c0001aa7:	89 fb                	mov    ebx,edi
c0001aa9:	09 f2                	or     edx,esi
c0001aab:	89 d1                	mov    ecx,edx
c0001aad:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ab1:	c1 e1 08             	shl    ecx,0x8
c0001ab4:	89 da                	mov    edx,ebx
c0001ab6:	09 c8                	or     eax,ecx
c0001ab8:	5b                   	pop    ebx
c0001ab9:	5e                   	pop    esi
c0001aba:	5f                   	pop    edi
c0001abb:	c3                   	ret    

c0001abc <st_word>:
c0001abc:	66 89 10             	mov    WORD PTR [eax],dx
c0001abf:	c3                   	ret    

c0001ac0 <st_dword>:
c0001ac0:	89 10                	mov    DWORD PTR [eax],edx
c0001ac2:	c3                   	ret    

c0001ac3 <st_qword>:
c0001ac3:	89 10                	mov    DWORD PTR [eax],edx
c0001ac5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ac8:	c3                   	ret    

c0001ac9 <mem_cpy>:
c0001ac9:	85 c9                	test   ecx,ecx
c0001acb:	74 10                	je     c0001add <mem_cpy+0x14>
c0001acd:	57                   	push   edi
c0001ace:	01 c1                	add    ecx,eax
c0001ad0:	56                   	push   esi
c0001ad1:	89 c7                	mov    edi,eax
c0001ad3:	89 d6                	mov    esi,edx
c0001ad5:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ad6:	39 f9                	cmp    ecx,edi
c0001ad8:	75 fb                	jne    c0001ad5 <mem_cpy+0xc>
c0001ada:	5e                   	pop    esi
c0001adb:	5f                   	pop    edi
c0001adc:	c3                   	ret    
c0001add:	c3                   	ret    

c0001ade <mem_set>:
c0001ade:	01 c1                	add    ecx,eax
c0001ae0:	40                   	inc    eax
c0001ae1:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001ae4:	39 c8                	cmp    eax,ecx
c0001ae6:	75 f8                	jne    c0001ae0 <mem_set+0x2>
c0001ae8:	c3                   	ret    

c0001ae9 <mem_cmp>:
c0001ae9:	57                   	push   edi
c0001aea:	56                   	push   esi
c0001aeb:	89 c6                	mov    esi,eax
c0001aed:	53                   	push   ebx
c0001aee:	46                   	inc    esi
c0001aef:	42                   	inc    edx
c0001af0:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001af4:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001af8:	29 fb                	sub    ebx,edi
c0001afa:	89 cf                	mov    edi,ecx
c0001afc:	29 f7                	sub    edi,esi
c0001afe:	01 c7                	add    edi,eax
c0001b00:	74 04                	je     c0001b06 <mem_cmp+0x1d>
c0001b02:	85 db                	test   ebx,ebx
c0001b04:	74 e8                	je     c0001aee <mem_cmp+0x5>
c0001b06:	89 d8                	mov    eax,ebx
c0001b08:	5b                   	pop    ebx
c0001b09:	5e                   	pop    esi
c0001b0a:	5f                   	pop    edi
c0001b0b:	c3                   	ret    

c0001b0c <chk_chr>:
c0001b0c:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b0f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b12:	74 07                	je     c0001b1b <chk_chr+0xf>
c0001b14:	39 d1                	cmp    ecx,edx
c0001b16:	74 03                	je     c0001b1b <chk_chr+0xf>
c0001b18:	40                   	inc    eax
c0001b19:	eb f1                	jmp    c0001b0c <chk_chr>
c0001b1b:	89 c8                	mov    eax,ecx
c0001b1d:	c3                   	ret    

c0001b1e <dbc_1st>:
c0001b1e:	31 c0                	xor    eax,eax
c0001b20:	c3                   	ret    

c0001b21 <dbc_2nd>:
c0001b21:	31 c0                	xor    eax,eax
c0001b23:	c3                   	ret    

c0001b24 <tchar2uni>:
c0001b24:	57                   	push   edi
c0001b25:	89 c7                	mov    edi,eax
c0001b27:	56                   	push   esi
c0001b28:	53                   	push   ebx
c0001b29:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b2b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b2d:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b30:	84 c9                	test   cl,cl
c0001b32:	78 0a                	js     c0001b3e <tchar2uni+0x1a>
c0001b34:	0f b6 d1             	movzx  edx,cl
c0001b37:	89 f3                	mov    ebx,esi
c0001b39:	e9 9f 00 00 00       	jmp    c0001bdd <tchar2uni+0xb9>
c0001b3e:	88 ca                	mov    dl,cl
c0001b40:	83 e2 e0             	and    edx,0xffffffe0
c0001b43:	80 fa c0             	cmp    dl,0xc0
c0001b46:	75 0c                	jne    c0001b54 <tchar2uni+0x30>
c0001b48:	89 ca                	mov    edx,ecx
c0001b4a:	b9 01 00 00 00       	mov    ecx,0x1
c0001b4f:	83 e2 1f             	and    edx,0x1f
c0001b52:	eb 2e                	jmp    c0001b82 <tchar2uni+0x5e>
c0001b54:	88 ca                	mov    dl,cl
c0001b56:	83 e2 f0             	and    edx,0xfffffff0
c0001b59:	80 fa e0             	cmp    dl,0xe0
c0001b5c:	75 0c                	jne    c0001b6a <tchar2uni+0x46>
c0001b5e:	89 ca                	mov    edx,ecx
c0001b60:	b9 02 00 00 00       	mov    ecx,0x2
c0001b65:	83 e2 0f             	and    edx,0xf
c0001b68:	eb 18                	jmp    c0001b82 <tchar2uni+0x5e>
c0001b6a:	88 ca                	mov    dl,cl
c0001b6c:	83 e2 f8             	and    edx,0xfffffff8
c0001b6f:	88 d0                	mov    al,dl
c0001b71:	83 ca ff             	or     edx,0xffffffff
c0001b74:	3c f0                	cmp    al,0xf0
c0001b76:	75 6c                	jne    c0001be4 <tchar2uni+0xc0>
c0001b78:	89 ca                	mov    edx,ecx
c0001b7a:	b9 03 00 00 00       	mov    ecx,0x3
c0001b7f:	83 e2 07             	and    edx,0x7
c0001b82:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b86:	46                   	inc    esi
c0001b87:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b8a:	88 c8                	mov    al,cl
c0001b8c:	83 e0 c0             	and    eax,0xffffffc0
c0001b8f:	3c 80                	cmp    al,0x80
c0001b91:	75 4e                	jne    c0001be1 <tchar2uni+0xbd>
c0001b93:	c1 e2 06             	shl    edx,0x6
c0001b96:	83 e1 3f             	and    ecx,0x3f
c0001b99:	09 ca                	or     edx,ecx
c0001b9b:	39 de                	cmp    esi,ebx
c0001b9d:	75 e7                	jne    c0001b86 <tchar2uni+0x62>
c0001b9f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ba2:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ba8:	77 37                	ja     c0001be1 <tchar2uni+0xbd>
c0001baa:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001bb0:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bb6:	76 29                	jbe    c0001be1 <tchar2uni+0xbd>
c0001bb8:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bbe:	76 1d                	jbe    c0001bdd <tchar2uni+0xb9>
c0001bc0:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bc6:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bcc:	c1 e1 06             	shl    ecx,0x6
c0001bcf:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bd5:	09 ca                	or     edx,ecx
c0001bd7:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bdd:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bdf:	eb 03                	jmp    c0001be4 <tchar2uni+0xc0>
c0001be1:	83 ca ff             	or     edx,0xffffffff
c0001be4:	5b                   	pop    ebx
c0001be5:	89 d0                	mov    eax,edx
c0001be7:	5e                   	pop    esi
c0001be8:	5f                   	pop    edi
c0001be9:	c3                   	ret    

c0001bea <put_utf>:
c0001bea:	53                   	push   ebx
c0001beb:	83 f8 7f             	cmp    eax,0x7f
c0001bee:	89 c3                	mov    ebx,eax
c0001bf0:	b0 00                	mov    al,0x0
c0001bf2:	77 11                	ja     c0001c05 <put_utf+0x1b>
c0001bf4:	85 c9                	test   ecx,ecx
c0001bf6:	0f 84 e5 00 00 00    	je     c0001ce1 <put_utf+0xf7>
c0001bfc:	88 1a                	mov    BYTE PTR [edx],bl
c0001bfe:	b0 01                	mov    al,0x1
c0001c00:	e9 dc 00 00 00       	jmp    c0001ce1 <put_utf+0xf7>
c0001c05:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c0b:	77 23                	ja     c0001c30 <put_utf+0x46>
c0001c0d:	83 f9 01             	cmp    ecx,0x1
c0001c10:	0f 86 cb 00 00 00    	jbe    c0001ce1 <put_utf+0xf7>
c0001c16:	89 d8                	mov    eax,ebx
c0001c18:	83 e3 3f             	and    ebx,0x3f
c0001c1b:	c1 e8 06             	shr    eax,0x6
c0001c1e:	83 cb 80             	or     ebx,0xffffff80
c0001c21:	83 c8 c0             	or     eax,0xffffffc0
c0001c24:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c27:	88 02                	mov    BYTE PTR [edx],al
c0001c29:	b0 02                	mov    al,0x2
c0001c2b:	e9 b1 00 00 00       	jmp    c0001ce1 <put_utf+0xf7>
c0001c30:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c36:	77 40                	ja     c0001c78 <put_utf+0x8e>
c0001c38:	83 f9 02             	cmp    ecx,0x2
c0001c3b:	0f 86 a0 00 00 00    	jbe    c0001ce1 <put_utf+0xf7>
c0001c41:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c47:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c4d:	0f 86 8e 00 00 00    	jbe    c0001ce1 <put_utf+0xf7>
c0001c53:	89 d8                	mov    eax,ebx
c0001c55:	c1 e8 0c             	shr    eax,0xc
c0001c58:	83 c8 e0             	or     eax,0xffffffe0
c0001c5b:	88 02                	mov    BYTE PTR [edx],al
c0001c5d:	89 d8                	mov    eax,ebx
c0001c5f:	83 e3 3f             	and    ebx,0x3f
c0001c62:	c1 e8 06             	shr    eax,0x6
c0001c65:	83 cb 80             	or     ebx,0xffffff80
c0001c68:	83 e0 3f             	and    eax,0x3f
c0001c6b:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c6e:	83 c8 80             	or     eax,0xffffff80
c0001c71:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c74:	b0 03                	mov    al,0x3
c0001c76:	eb 69                	jmp    c0001ce1 <put_utf+0xf7>
c0001c78:	83 f9 03             	cmp    ecx,0x3
c0001c7b:	76 64                	jbe    c0001ce1 <put_utf+0xf7>
c0001c7d:	89 d9                	mov    ecx,ebx
c0001c7f:	0f b7 c3             	movzx  eax,bx
c0001c82:	66 31 c9             	xor    cx,cx
c0001c85:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c8b:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c91:	c1 e9 06             	shr    ecx,0x6
c0001c94:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c9a:	77 43                	ja     c0001cdf <put_utf+0xf5>
c0001c9c:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ca2:	77 3b                	ja     c0001cdf <put_utf+0xf5>
c0001ca4:	09 cb                	or     ebx,ecx
c0001ca6:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cac:	89 d8                	mov    eax,ebx
c0001cae:	c1 e8 12             	shr    eax,0x12
c0001cb1:	83 c8 f0             	or     eax,0xfffffff0
c0001cb4:	88 02                	mov    BYTE PTR [edx],al
c0001cb6:	89 d8                	mov    eax,ebx
c0001cb8:	c1 e8 0c             	shr    eax,0xc
c0001cbb:	83 e0 3f             	and    eax,0x3f
c0001cbe:	83 c8 80             	or     eax,0xffffff80
c0001cc1:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cc4:	89 d8                	mov    eax,ebx
c0001cc6:	83 e3 3f             	and    ebx,0x3f
c0001cc9:	c1 e8 06             	shr    eax,0x6
c0001ccc:	83 cb 80             	or     ebx,0xffffff80
c0001ccf:	83 e0 3f             	and    eax,0x3f
c0001cd2:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cd5:	83 c8 80             	or     eax,0xffffff80
c0001cd8:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cdb:	b0 04                	mov    al,0x4
c0001cdd:	eb 02                	jmp    c0001ce1 <put_utf+0xf7>
c0001cdf:	31 c0                	xor    eax,eax
c0001ce1:	5b                   	pop    ebx
c0001ce2:	c3                   	ret    

c0001ce3 <clst2sect>:
c0001ce3:	89 c1                	mov    ecx,eax
c0001ce5:	83 ea 02             	sub    edx,0x2
c0001ce8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ceb:	83 e8 02             	sub    eax,0x2
c0001cee:	39 d0                	cmp    eax,edx
c0001cf0:	76 0d                	jbe    c0001cff <clst2sect+0x1c>
c0001cf2:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cf6:	f7 e2                	mul    edx
c0001cf8:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cfb:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cfe:	c3                   	ret    
c0001cff:	31 c0                	xor    eax,eax
c0001d01:	31 d2                	xor    edx,edx
c0001d03:	c3                   	ret    

c0001d04 <clmt_clust>:
c0001d04:	57                   	push   edi
c0001d05:	89 cf                	mov    edi,ecx
c0001d07:	56                   	push   esi
c0001d08:	89 d6                	mov    esi,edx
c0001d0a:	53                   	push   ebx
c0001d0b:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d0f:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d12:	89 f2                	mov    edx,esi
c0001d14:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d16:	c1 ef 09             	shr    edi,0x9
c0001d19:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d1d:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d20:	89 f9                	mov    ecx,edi
c0001d22:	31 ff                	xor    edi,edi
c0001d24:	57                   	push   edi
c0001d25:	56                   	push   esi
c0001d26:	51                   	push   ecx
c0001d27:	52                   	push   edx
c0001d28:	e8 6f 3b 02 00       	call   c002589c <__udivdi3>
c0001d2d:	83 c4 10             	add    esp,0x10
c0001d30:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d32:	85 d2                	test   edx,edx
c0001d34:	74 10                	je     c0001d46 <clmt_clust+0x42>
c0001d36:	39 d0                	cmp    eax,edx
c0001d38:	72 07                	jb     c0001d41 <clmt_clust+0x3d>
c0001d3a:	29 d0                	sub    eax,edx
c0001d3c:	83 c3 08             	add    ebx,0x8
c0001d3f:	eb ef                	jmp    c0001d30 <clmt_clust+0x2c>
c0001d41:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d44:	89 c2                	mov    edx,eax
c0001d46:	5b                   	pop    ebx
c0001d47:	89 d0                	mov    eax,edx
c0001d49:	5e                   	pop    esi
c0001d4a:	5f                   	pop    edi
c0001d4b:	c3                   	ret    

c0001d4c <pick_lfn>:
c0001d4c:	55                   	push   ebp
c0001d4d:	57                   	push   edi
c0001d4e:	56                   	push   esi
c0001d4f:	89 d6                	mov    esi,edx
c0001d51:	53                   	push   ebx
c0001d52:	89 c3                	mov    ebx,eax
c0001d54:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d57:	e8 ee fc ff ff       	call   c0001a4a <ld_word>
c0001d5c:	66 85 c0             	test   ax,ax
c0001d5f:	74 04                	je     c0001d65 <pick_lfn+0x19>
c0001d61:	31 c0                	xor    eax,eax
c0001d63:	eb 5c                	jmp    c0001dc1 <pick_lfn+0x75>
c0001d65:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d68:	bd 01 00 00 00       	mov    ebp,0x1
c0001d6d:	83 e1 bf             	and    ecx,0xffffffbf
c0001d70:	31 ff                	xor    edi,edi
c0001d72:	49                   	dec    ecx
c0001d73:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d76:	0f b6 87 e0 82 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd7d20]
c0001d7d:	01 f0                	add    eax,esi
c0001d7f:	e8 c6 fc ff ff       	call   c0001a4a <ld_word>
c0001d84:	66 85 ed             	test   bp,bp
c0001d87:	74 11                	je     c0001d9a <pick_lfn+0x4e>
c0001d89:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d8f:	77 d0                	ja     c0001d61 <pick_lfn+0x15>
c0001d91:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d95:	89 c5                	mov    ebp,eax
c0001d97:	41                   	inc    ecx
c0001d98:	eb 04                	jmp    c0001d9e <pick_lfn+0x52>
c0001d9a:	66 40                	inc    ax
c0001d9c:	75 c3                	jne    c0001d61 <pick_lfn+0x15>
c0001d9e:	47                   	inc    edi
c0001d9f:	83 ff 0d             	cmp    edi,0xd
c0001da2:	75 d2                	jne    c0001d76 <pick_lfn+0x2a>
c0001da4:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001da7:	74 13                	je     c0001dbc <pick_lfn+0x70>
c0001da9:	66 85 ed             	test   bp,bp
c0001dac:	74 0e                	je     c0001dbc <pick_lfn+0x70>
c0001dae:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001db4:	77 ab                	ja     c0001d61 <pick_lfn+0x15>
c0001db6:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dbc:	b8 01 00 00 00       	mov    eax,0x1
c0001dc1:	5b                   	pop    ebx
c0001dc2:	5e                   	pop    esi
c0001dc3:	5f                   	pop    edi
c0001dc4:	5d                   	pop    ebp
c0001dc5:	c3                   	ret    

c0001dc6 <put_lfn>:
c0001dc6:	55                   	push   ebp
c0001dc7:	31 ed                	xor    ebp,ebp
c0001dc9:	57                   	push   edi
c0001dca:	89 d7                	mov    edi,edx
c0001dcc:	56                   	push   esi
c0001dcd:	31 f6                	xor    esi,esi
c0001dcf:	53                   	push   ebx
c0001dd0:	83 ec 08             	sub    esp,0x8
c0001dd3:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dd6:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001dda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001dde:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001de4:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001de7:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001dea:	31 d2                	xor    edx,edx
c0001dec:	e8 cb fc ff ff       	call   c0001abc <st_word>
c0001df1:	0f b6 d9             	movzx  ebx,cl
c0001df4:	4b                   	dec    ebx
c0001df5:	6b db 0d             	imul   ebx,ebx,0xd
c0001df8:	66 83 fe ff          	cmp    si,0xffff
c0001dfc:	74 08                	je     c0001e06 <put_lfn+0x40>
c0001dfe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e01:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e05:	43                   	inc    ebx
c0001e06:	0f b6 85 e0 82 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd7d20]
c0001e0d:	0f b7 d6             	movzx  edx,si
c0001e10:	01 f8                	add    eax,edi
c0001e12:	e8 a5 fc ff ff       	call   c0001abc <st_word>
c0001e17:	66 85 f6             	test   si,si
c0001e1a:	75 03                	jne    c0001e1f <put_lfn+0x59>
c0001e1c:	83 ce ff             	or     esi,0xffffffff
c0001e1f:	45                   	inc    ebp
c0001e20:	83 fd 0d             	cmp    ebp,0xd
c0001e23:	75 d3                	jne    c0001df8 <put_lfn+0x32>
c0001e25:	66 46                	inc    si
c0001e27:	74 0a                	je     c0001e33 <put_lfn+0x6d>
c0001e29:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e2c:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e31:	75 09                	jne    c0001e3c <put_lfn+0x76>
c0001e33:	88 c8                	mov    al,cl
c0001e35:	83 c8 40             	or     eax,0x40
c0001e38:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e3c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e40:	88 07                	mov    BYTE PTR [edi],al
c0001e42:	83 c4 08             	add    esp,0x8
c0001e45:	5b                   	pop    ebx
c0001e46:	5e                   	pop    esi
c0001e47:	5f                   	pop    edi
c0001e48:	5d                   	pop    ebp
c0001e49:	c3                   	ret    

c0001e4a <gen_numname>:
c0001e4a:	57                   	push   edi
c0001e4b:	89 cf                	mov    edi,ecx
c0001e4d:	56                   	push   esi
c0001e4e:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e53:	53                   	push   ebx
c0001e54:	89 c6                	mov    esi,eax
c0001e56:	83 ec 10             	sub    esp,0x10
c0001e59:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e5d:	e8 67 fc ff ff       	call   c0001ac9 <mem_cpy>
c0001e62:	83 fb 05             	cmp    ebx,0x5
c0001e65:	76 2d                	jbe    c0001e94 <gen_numname+0x4a>
c0001e67:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e6a:	66 85 c0             	test   ax,ax
c0001e6d:	74 25                	je     c0001e94 <gen_numname+0x4a>
c0001e6f:	83 c7 02             	add    edi,0x2
c0001e72:	ba 10 00 00 00       	mov    edx,0x10
c0001e77:	01 db                	add    ebx,ebx
c0001e79:	89 c1                	mov    ecx,eax
c0001e7b:	66 d1 e8             	shr    ax,1
c0001e7e:	83 e1 01             	and    ecx,0x1
c0001e81:	01 cb                	add    ebx,ecx
c0001e83:	0f ba e3 10          	bt     ebx,0x10
c0001e87:	73 06                	jae    c0001e8f <gen_numname+0x45>
c0001e89:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e8f:	4a                   	dec    edx
c0001e90:	75 e5                	jne    c0001e77 <gen_numname+0x2d>
c0001e92:	eb d3                	jmp    c0001e67 <gen_numname+0x1d>
c0001e94:	b8 07 00 00 00       	mov    eax,0x7
c0001e99:	88 d9                	mov    cl,bl
c0001e9b:	83 e1 0f             	and    ecx,0xf
c0001e9e:	8d 51 30             	lea    edx,[ecx+0x30]
c0001ea1:	80 fa 39             	cmp    dl,0x39
c0001ea4:	76 03                	jbe    c0001ea9 <gen_numname+0x5f>
c0001ea6:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ea9:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001eac:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001eb0:	89 da                	mov    edx,ebx
c0001eb2:	c1 ea 04             	shr    edx,0x4
c0001eb5:	83 fb 0f             	cmp    ebx,0xf
c0001eb8:	76 06                	jbe    c0001ec0 <gen_numname+0x76>
c0001eba:	89 c8                	mov    eax,ecx
c0001ebc:	89 d3                	mov    ebx,edx
c0001ebe:	eb d9                	jmp    c0001e99 <gen_numname+0x4f>
c0001ec0:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ec5:	31 d2                	xor    edx,edx
c0001ec7:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001eca:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ecd:	39 ca                	cmp    edx,ecx
c0001ecf:	73 18                	jae    c0001ee9 <gen_numname+0x9f>
c0001ed1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ed4:	3c 20                	cmp    al,0x20
c0001ed6:	74 11                	je     c0001ee9 <gen_numname+0x9f>
c0001ed8:	e8 41 fc ff ff       	call   c0001b1e <dbc_1st>
c0001edd:	85 c0                	test   eax,eax
c0001edf:	74 05                	je     c0001ee6 <gen_numname+0x9c>
c0001ee1:	39 d3                	cmp    ebx,edx
c0001ee3:	74 04                	je     c0001ee9 <gen_numname+0x9f>
c0001ee5:	42                   	inc    edx
c0001ee6:	42                   	inc    edx
c0001ee7:	eb e1                	jmp    c0001eca <gen_numname+0x80>
c0001ee9:	b0 20                	mov    al,0x20
c0001eeb:	83 f9 07             	cmp    ecx,0x7
c0001eee:	77 05                	ja     c0001ef5 <gen_numname+0xab>
c0001ef0:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ef4:	41                   	inc    ecx
c0001ef5:	42                   	inc    edx
c0001ef6:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001efa:	83 fa 07             	cmp    edx,0x7
c0001efd:	76 ea                	jbe    c0001ee9 <gen_numname+0x9f>
c0001eff:	83 c4 10             	add    esp,0x10
c0001f02:	5b                   	pop    ebx
c0001f03:	5e                   	pop    esi
c0001f04:	5f                   	pop    edi
c0001f05:	c3                   	ret    

c0001f06 <sum_sfn>:
c0001f06:	31 c9                	xor    ecx,ecx
c0001f08:	31 d2                	xor    edx,edx
c0001f0a:	d0 ca                	ror    dl,1
c0001f0c:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f0f:	41                   	inc    ecx
c0001f10:	83 f9 0b             	cmp    ecx,0xb
c0001f13:	75 f5                	jne    c0001f0a <sum_sfn+0x4>
c0001f15:	88 d0                	mov    al,dl
c0001f17:	c3                   	ret    

c0001f18 <xdir_sum>:
c0001f18:	56                   	push   esi
c0001f19:	31 c9                	xor    ecx,ecx
c0001f1b:	53                   	push   ebx
c0001f1c:	31 d2                	xor    edx,edx
c0001f1e:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f22:	43                   	inc    ebx
c0001f23:	c1 e3 05             	shl    ebx,0x5
c0001f26:	83 fa 02             	cmp    edx,0x2
c0001f29:	74 0b                	je     c0001f36 <xdir_sum+0x1e>
c0001f2b:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f2f:	66 d1 c9             	ror    cx,1
c0001f32:	01 f1                	add    ecx,esi
c0001f34:	eb 05                	jmp    c0001f3b <xdir_sum+0x23>
c0001f36:	ba 03 00 00 00       	mov    edx,0x3
c0001f3b:	42                   	inc    edx
c0001f3c:	39 d3                	cmp    ebx,edx
c0001f3e:	77 e6                	ja     c0001f26 <xdir_sum+0xe>
c0001f40:	89 c8                	mov    eax,ecx
c0001f42:	5b                   	pop    ebx
c0001f43:	5e                   	pop    esi
c0001f44:	c3                   	ret    

c0001f45 <xsum32>:
c0001f45:	d1 ca                	ror    edx,1
c0001f47:	0f b6 c0             	movzx  eax,al
c0001f4a:	01 d0                	add    eax,edx
c0001f4c:	c3                   	ret    

c0001f4d <get_xfileinfo>:
c0001f4d:	55                   	push   ebp
c0001f4e:	31 c9                	xor    ecx,ecx
c0001f50:	57                   	push   edi
c0001f51:	bd 40 00 00 00       	mov    ebp,0x40
c0001f56:	56                   	push   esi
c0001f57:	31 ff                	xor    edi,edi
c0001f59:	53                   	push   ebx
c0001f5a:	89 c6                	mov    esi,eax
c0001f5c:	83 ec 0c             	sub    esp,0xc
c0001f5f:	89 d3                	mov    ebx,edx
c0001f61:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f68:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f6c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f6f:	76 6d                	jbe    c0001fde <get_xfileinfo+0x91>
c0001f71:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f77:	76 0b                	jbe    c0001f84 <get_xfileinfo+0x37>
c0001f79:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f7d:	bf 01 00 00 00       	mov    edi,0x1
c0001f82:	eb 63                	jmp    c0001fe7 <get_xfileinfo+0x9a>
c0001f84:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f8a:	75 03                	jne    c0001f8f <get_xfileinfo+0x42>
c0001f8c:	83 c5 02             	add    ebp,0x2
c0001f8f:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f92:	83 c5 02             	add    ebp,0x2
c0001f95:	e8 b0 fa ff ff       	call   c0001a4a <ld_word>
c0001f9a:	ff 04 24             	inc    DWORD PTR [esp]
c0001f9d:	66 85 c9             	test   cx,cx
c0001fa0:	75 0d                	jne    c0001faf <get_xfileinfo+0x62>
c0001fa2:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fa8:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fad:	76 2b                	jbe    c0001fda <get_xfileinfo+0x8d>
c0001faf:	c1 e1 10             	shl    ecx,0x10
c0001fb2:	ba ff 00 00 00       	mov    edx,0xff
c0001fb7:	0f b7 c0             	movzx  eax,ax
c0001fba:	29 fa                	sub    edx,edi
c0001fbc:	09 c8                	or     eax,ecx
c0001fbe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fc2:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fc6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fca:	e8 1b fc ff ff       	call   c0001bea <put_utf>
c0001fcf:	84 c0                	test   al,al
c0001fd1:	74 a6                	je     c0001f79 <get_xfileinfo+0x2c>
c0001fd3:	0f b6 c0             	movzx  eax,al
c0001fd6:	01 c7                	add    edi,eax
c0001fd8:	31 c0                	xor    eax,eax
c0001fda:	89 c1                	mov    ecx,eax
c0001fdc:	eb 8a                	jmp    c0001f68 <get_xfileinfo+0x1b>
c0001fde:	85 ff                	test   edi,edi
c0001fe0:	74 97                	je     c0001f79 <get_xfileinfo+0x2c>
c0001fe2:	66 85 c9             	test   cx,cx
c0001fe5:	75 92                	jne    c0001f79 <get_xfileinfo+0x2c>
c0001fe7:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fec:	31 c0                	xor    eax,eax
c0001fee:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001ff2:	31 d2                	xor    edx,edx
c0001ff4:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001ff7:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001ffa:	80 e1 10             	and    cl,0x10
c0001ffd:	75 08                	jne    c0002007 <get_xfileinfo+0xba>
c0001fff:	8d 46 38             	lea    eax,[esi+0x38]
c0002002:	e8 68 fa ff ff       	call   c0001a6f <ld_qword>
c0002007:	89 03                	mov    DWORD PTR [ebx],eax
c0002009:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000200c:	8d 46 0c             	lea    eax,[esi+0xc]
c000200f:	e8 36 fa ff ff       	call   c0001a4a <ld_word>
c0002014:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002018:	8d 46 0e             	lea    eax,[esi+0xe]
c000201b:	e8 2a fa ff ff       	call   c0001a4a <ld_word>
c0002020:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002024:	83 c4 0c             	add    esp,0xc
c0002027:	5b                   	pop    ebx
c0002028:	5e                   	pop    esi
c0002029:	5f                   	pop    edi
c000202a:	5d                   	pop    ebp
c000202b:	c3                   	ret    

c000202c <get_ldnumber>:
c000202c:	8b 10                	mov    edx,DWORD PTR [eax]
c000202e:	85 d2                	test   edx,edx
c0002030:	74 14                	je     c0002046 <get_ldnumber+0x1a>
c0002032:	56                   	push   esi
c0002033:	53                   	push   ebx
c0002034:	89 d3                	mov    ebx,edx
c0002036:	43                   	inc    ebx
c0002037:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000203a:	80 f9 1f             	cmp    cl,0x1f
c000203d:	76 0d                	jbe    c000204c <get_ldnumber+0x20>
c000203f:	80 f9 3a             	cmp    cl,0x3a
c0002042:	75 f2                	jne    c0002036 <get_ldnumber+0xa>
c0002044:	eb 0a                	jmp    c0002050 <get_ldnumber+0x24>
c0002046:	83 c9 ff             	or     ecx,0xffffffff
c0002049:	89 c8                	mov    eax,ecx
c000204b:	c3                   	ret    
c000204c:	31 c9                	xor    ecx,ecx
c000204e:	eb 24                	jmp    c0002074 <get_ldnumber+0x48>
c0002050:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002053:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002056:	80 f9 09             	cmp    cl,0x9
c0002059:	77 16                	ja     c0002071 <get_ldnumber+0x45>
c000205b:	83 c2 02             	add    edx,0x2
c000205e:	83 c9 ff             	or     ecx,0xffffffff
c0002061:	39 d3                	cmp    ebx,edx
c0002063:	75 0f                	jne    c0002074 <get_ldnumber+0x48>
c0002065:	89 f2                	mov    edx,esi
c0002067:	89 18                	mov    DWORD PTR [eax],ebx
c0002069:	0f be ca             	movsx  ecx,dl
c000206c:	83 e9 30             	sub    ecx,0x30
c000206f:	eb 03                	jmp    c0002074 <get_ldnumber+0x48>
c0002071:	83 c9 ff             	or     ecx,0xffffffff
c0002074:	89 c8                	mov    eax,ecx
c0002076:	5b                   	pop    ebx
c0002077:	5e                   	pop    esi
c0002078:	c3                   	ret    

c0002079 <crc32>:
c0002079:	56                   	push   esi
c000207a:	89 d6                	mov    esi,edx
c000207c:	53                   	push   ebx
c000207d:	b2 01                	mov    dl,0x1
c000207f:	bb 08 00 00 00       	mov    ebx,0x8
c0002084:	89 f1                	mov    ecx,esi
c0002086:	84 d1                	test   cl,dl
c0002088:	0f 95 c1             	setne  cl
c000208b:	0f b6 c9             	movzx  ecx,cl
c000208e:	31 c1                	xor    ecx,eax
c0002090:	89 c8                	mov    eax,ecx
c0002092:	d1 e8                	shr    eax,1
c0002094:	80 e1 01             	and    cl,0x1
c0002097:	74 05                	je     c000209e <crc32+0x25>
c0002099:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000209e:	d1 e2                	shl    edx,1
c00020a0:	4b                   	dec    ebx
c00020a1:	75 e1                	jne    c0002084 <crc32+0xb>
c00020a3:	5b                   	pop    ebx
c00020a4:	5e                   	pop    esi
c00020a5:	c3                   	ret    

c00020a6 <test_gpt_header>:
c00020a6:	55                   	push   ebp
c00020a7:	b9 10 00 00 00       	mov    ecx,0x10
c00020ac:	57                   	push   edi
c00020ad:	ba e0 81 02 c0       	mov    edx,0xc00281e0
c00020b2:	56                   	push   esi
c00020b3:	31 ff                	xor    edi,edi
c00020b5:	53                   	push   ebx
c00020b6:	89 c3                	mov    ebx,eax
c00020b8:	e8 2c fa ff ff       	call   c0001ae9 <mem_cmp>
c00020bd:	85 c0                	test   eax,eax
c00020bf:	75 55                	jne    c0002116 <test_gpt_header+0x70>
c00020c1:	89 c7                	mov    edi,eax
c00020c3:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020c8:	83 ce ff             	or     esi,0xffffffff
c00020cb:	31 d2                	xor    edx,edx
c00020cd:	83 fd 03             	cmp    ebp,0x3
c00020d0:	76 05                	jbe    c00020d7 <test_gpt_header+0x31>
c00020d2:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020d7:	89 f0                	mov    eax,esi
c00020d9:	45                   	inc    ebp
c00020da:	e8 9a ff ff ff       	call   c0002079 <crc32>
c00020df:	83 fd 4c             	cmp    ebp,0x4c
c00020e2:	89 c6                	mov    esi,eax
c00020e4:	75 e5                	jne    c00020cb <test_gpt_header+0x25>
c00020e6:	8d 43 10             	lea    eax,[ebx+0x10]
c00020e9:	f7 d6                	not    esi
c00020eb:	e8 67 f9 ff ff       	call   c0001a57 <ld_dword>
c00020f0:	39 c6                	cmp    esi,eax
c00020f2:	75 22                	jne    c0002116 <test_gpt_header+0x70>
c00020f4:	8d 43 54             	lea    eax,[ebx+0x54]
c00020f7:	e8 5b f9 ff ff       	call   c0001a57 <ld_dword>
c00020fc:	83 c0 80             	add    eax,0xffffff80
c00020ff:	75 15                	jne    c0002116 <test_gpt_header+0x70>
c0002101:	8d 43 50             	lea    eax,[ebx+0x50]
c0002104:	e8 4e f9 ff ff       	call   c0001a57 <ld_dword>
c0002109:	3d 80 00 00 00       	cmp    eax,0x80
c000210e:	0f 96 c0             	setbe  al
c0002111:	0f b6 c0             	movzx  eax,al
c0002114:	89 c7                	mov    edi,eax
c0002116:	5b                   	pop    ebx
c0002117:	89 f8                	mov    eax,edi
c0002119:	5e                   	pop    esi
c000211a:	5f                   	pop    edi
c000211b:	5d                   	pop    ebp
c000211c:	c3                   	ret    

c000211d <make_rand>:
c000211d:	56                   	push   esi
c000211e:	85 c0                	test   eax,eax
c0002120:	53                   	push   ebx
c0002121:	75 05                	jne    c0002128 <make_rand+0xb>
c0002123:	b8 01 00 00 00       	mov    eax,0x1
c0002128:	01 d1                	add    ecx,edx
c000212a:	bb 08 00 00 00       	mov    ebx,0x8
c000212f:	89 c6                	mov    esi,eax
c0002131:	d1 e8                	shr    eax,1
c0002133:	83 e6 01             	and    esi,0x1
c0002136:	85 f6                	test   esi,esi
c0002138:	74 05                	je     c000213f <make_rand+0x22>
c000213a:	35 00 00 00 a3       	xor    eax,0xa3000000
c000213f:	4b                   	dec    ebx
c0002140:	75 ed                	jne    c000212f <make_rand+0x12>
c0002142:	42                   	inc    edx
c0002143:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002146:	39 ca                	cmp    edx,ecx
c0002148:	75 e0                	jne    c000212a <make_rand+0xd>
c000214a:	5b                   	pop    ebx
c000214b:	5e                   	pop    esi
c000214c:	c3                   	ret    

c000214d <validate>:
c000214d:	56                   	push   esi
c000214e:	53                   	push   ebx
c000214f:	89 d6                	mov    esi,edx
c0002151:	51                   	push   ecx
c0002152:	85 c0                	test   eax,eax
c0002154:	75 09                	jne    c000215f <validate+0x12>
c0002156:	b8 09 00 00 00       	mov    eax,0x9
c000215b:	31 c9                	xor    ecx,ecx
c000215d:	eb 2f                	jmp    c000218e <validate+0x41>
c000215f:	89 c3                	mov    ebx,eax
c0002161:	8b 00                	mov    eax,DWORD PTR [eax]
c0002163:	85 c0                	test   eax,eax
c0002165:	74 ef                	je     c0002156 <validate+0x9>
c0002167:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000216a:	74 ea                	je     c0002156 <validate+0x9>
c000216c:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002170:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002174:	75 e0                	jne    c0002156 <validate+0x9>
c0002176:	83 ec 0c             	sub    esp,0xc
c0002179:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217d:	50                   	push   eax
c000217e:	e8 76 f8 ff ff       	call   c00019f9 <disk_status>
c0002183:	83 c4 10             	add    esp,0x10
c0002186:	a8 01                	test   al,0x1
c0002188:	75 cc                	jne    c0002156 <validate+0x9>
c000218a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000218c:	31 c0                	xor    eax,eax
c000218e:	89 0e                	mov    DWORD PTR [esi],ecx
c0002190:	5a                   	pop    edx
c0002191:	5b                   	pop    ebx
c0002192:	5e                   	pop    esi
c0002193:	c3                   	ret    

c0002194 <sync_window>:
c0002194:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002198:	0f 84 85 00 00 00    	je     c0002223 <sync_window+0x8f>
c000219e:	55                   	push   ebp
c000219f:	8d 68 54             	lea    ebp,[eax+0x54]
c00021a2:	57                   	push   edi
c00021a3:	56                   	push   esi
c00021a4:	53                   	push   ebx
c00021a5:	89 c3                	mov    ebx,eax
c00021a7:	83 ec 28             	sub    esp,0x28
c00021aa:	6a 01                	push   0x1
c00021ac:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021af:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021b2:	55                   	push   ebp
c00021b3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021b7:	50                   	push   eax
c00021b8:	e8 58 f8 ff ff       	call   c0001a15 <disk_write>
c00021bd:	83 c4 20             	add    esp,0x20
c00021c0:	ba 01 00 00 00       	mov    edx,0x1
c00021c5:	85 c0                	test   eax,eax
c00021c7:	75 50                	jne    c0002219 <sync_window+0x85>
c00021c9:	31 ff                	xor    edi,edi
c00021cb:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021ce:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021d2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021d6:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021d9:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021dc:	89 c6                	mov    esi,eax
c00021de:	89 d7                	mov    edi,edx
c00021e0:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021e3:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021e7:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021ea:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021ee:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021f2:	73 23                	jae    c0002217 <sync_window+0x83>
c00021f4:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021f8:	75 1d                	jne    c0002217 <sync_window+0x83>
c00021fa:	83 ec 0c             	sub    esp,0xc
c00021fd:	6a 01                	push   0x1
c00021ff:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002203:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002207:	52                   	push   edx
c0002208:	50                   	push   eax
c0002209:	55                   	push   ebp
c000220a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000220e:	50                   	push   eax
c000220f:	e8 01 f8 ff ff       	call   c0001a15 <disk_write>
c0002214:	83 c4 20             	add    esp,0x20
c0002217:	31 d2                	xor    edx,edx
c0002219:	83 c4 1c             	add    esp,0x1c
c000221c:	89 d0                	mov    eax,edx
c000221e:	5b                   	pop    ebx
c000221f:	5e                   	pop    esi
c0002220:	5f                   	pop    edi
c0002221:	5d                   	pop    ebp
c0002222:	c3                   	ret    
c0002223:	31 d2                	xor    edx,edx
c0002225:	89 d0                	mov    eax,edx
c0002227:	c3                   	ret    

c0002228 <move_window>:
c0002228:	56                   	push   esi
c0002229:	53                   	push   ebx
c000222a:	89 c3                	mov    ebx,eax
c000222c:	83 ec 14             	sub    esp,0x14
c000222f:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002232:	75 07                	jne    c000223b <move_window+0x13>
c0002234:	31 f6                	xor    esi,esi
c0002236:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002239:	74 59                	je     c0002294 <move_window+0x6c>
c000223b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000223f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002243:	89 d8                	mov    eax,ebx
c0002245:	e8 4a ff ff ff       	call   c0002194 <sync_window>
c000224a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000224e:	89 c6                	mov    esi,eax
c0002250:	85 c0                	test   eax,eax
c0002252:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002256:	75 3c                	jne    c0002294 <move_window+0x6c>
c0002258:	83 ec 0c             	sub    esp,0xc
c000225b:	8d 43 54             	lea    eax,[ebx+0x54]
c000225e:	6a 01                	push   0x1
c0002260:	51                   	push   ecx
c0002261:	52                   	push   edx
c0002262:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002266:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000226a:	50                   	push   eax
c000226b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000226f:	50                   	push   eax
c0002270:	e8 8a f7 ff ff       	call   c00019ff <disk_read>
c0002275:	83 c4 20             	add    esp,0x20
c0002278:	85 c0                	test   eax,eax
c000227a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000227e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002282:	74 0a                	je     c000228e <move_window+0x66>
c0002284:	83 ca ff             	or     edx,0xffffffff
c0002287:	be 01 00 00 00       	mov    esi,0x1
c000228c:	89 d1                	mov    ecx,edx
c000228e:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002291:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002294:	89 f0                	mov    eax,esi
c0002296:	83 c4 14             	add    esp,0x14
c0002299:	5b                   	pop    ebx
c000229a:	5e                   	pop    esi
c000229b:	c3                   	ret    

c000229c <check_fs>:
c000229c:	53                   	push   ebx
c000229d:	89 c3                	mov    ebx,eax
c000229f:	83 ec 08             	sub    esp,0x8
c00022a2:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022a6:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022ad:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022b4:	e8 6f ff ff ff       	call   c0002228 <move_window>
c00022b9:	ba 04 00 00 00       	mov    edx,0x4
c00022be:	85 c0                	test   eax,eax
c00022c0:	0f 85 89 00 00 00    	jne    c000234f <check_fs+0xb3>
c00022c6:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022cc:	e8 79 f7 ff ff       	call   c0001a4a <ld_word>
c00022d1:	ba 03 00 00 00       	mov    edx,0x3
c00022d6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022da:	75 73                	jne    c000234f <check_fs+0xb3>
c00022dc:	ba 00 83 02 c0       	mov    edx,0xc0028300
c00022e1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022e4:	b9 0b 00 00 00       	mov    ecx,0xb
c00022e9:	e8 fb f7 ff ff       	call   c0001ae9 <mem_cmp>
c00022ee:	ba 01 00 00 00       	mov    edx,0x1
c00022f3:	85 c0                	test   eax,eax
c00022f5:	74 58                	je     c000234f <check_fs+0xb3>
c00022f7:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022fa:	8d 50 18             	lea    edx,[eax+0x18]
c00022fd:	80 fa 01             	cmp    dl,0x1
c0002300:	76 09                	jbe    c000230b <check_fs+0x6f>
c0002302:	ba 02 00 00 00       	mov    edx,0x2
c0002307:	3c eb                	cmp    al,0xeb
c0002309:	75 44                	jne    c000234f <check_fs+0xb3>
c000230b:	ba 44 b5 02 c0       	mov    edx,0xc002b544
c0002310:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002316:	b9 03 00 00 00       	mov    ecx,0x3
c000231b:	e8 c9 f7 ff ff       	call   c0001ae9 <mem_cmp>
c0002320:	31 d2                	xor    edx,edx
c0002322:	85 c0                	test   eax,eax
c0002324:	74 29                	je     c000234f <check_fs+0xb3>
c0002326:	ba 0c 83 02 c0       	mov    edx,0xc002830c
c000232b:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002331:	b9 05 00 00 00       	mov    ecx,0x5
c0002336:	e8 ae f7 ff ff       	call   c0001ae9 <mem_cmp>
c000233b:	31 d2                	xor    edx,edx
c000233d:	85 c0                	test   eax,eax
c000233f:	74 0e                	je     c000234f <check_fs+0xb3>
c0002341:	31 d2                	xor    edx,edx
c0002343:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000234a:	0f 95 c2             	setne  dl
c000234d:	01 d2                	add    edx,edx
c000234f:	89 d0                	mov    eax,edx
c0002351:	83 c4 08             	add    esp,0x8
c0002354:	5b                   	pop    ebx
c0002355:	c3                   	ret    

c0002356 <find_volume>:
c0002356:	55                   	push   ebp
c0002357:	31 c9                	xor    ecx,ecx
c0002359:	57                   	push   edi
c000235a:	56                   	push   esi
c000235b:	89 d6                	mov    esi,edx
c000235d:	53                   	push   ebx
c000235e:	31 d2                	xor    edx,edx
c0002360:	83 ec 3c             	sub    esp,0x3c
c0002363:	89 c3                	mov    ebx,eax
c0002365:	e8 32 ff ff ff       	call   c000229c <check_fs>
c000236a:	83 f8 02             	cmp    eax,0x2
c000236d:	74 0e                	je     c000237d <find_volume+0x27>
c000236f:	0f 87 5d 01 00 00    	ja     c00024d2 <find_volume+0x17c>
c0002375:	85 f6                	test   esi,esi
c0002377:	0f 84 55 01 00 00    	je     c00024d2 <find_volume+0x17c>
c000237d:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002384:	0f 85 dd 00 00 00    	jne    c0002467 <find_volume+0x111>
c000238a:	31 c9                	xor    ecx,ecx
c000238c:	ba 01 00 00 00       	mov    edx,0x1
c0002391:	89 d8                	mov    eax,ebx
c0002393:	e8 90 fe ff ff       	call   c0002228 <move_window>
c0002398:	85 c0                	test   eax,eax
c000239a:	74 0a                	je     c00023a6 <find_volume+0x50>
c000239c:	b8 04 00 00 00       	mov    eax,0x4
c00023a1:	e9 2c 01 00 00       	jmp    c00024d2 <find_volume+0x17c>
c00023a6:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023a9:	89 e8                	mov    eax,ebp
c00023ab:	e8 f6 fc ff ff       	call   c00020a6 <test_gpt_header>
c00023b0:	85 c0                	test   eax,eax
c00023b2:	75 0a                	jne    c00023be <find_volume+0x68>
c00023b4:	b8 03 00 00 00       	mov    eax,0x3
c00023b9:	e9 14 01 00 00       	jmp    c00024d2 <find_volume+0x17c>
c00023be:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023c4:	e8 8e f6 ff ff       	call   c0001a57 <ld_dword>
c00023c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023cd:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023d3:	e8 97 f6 ff ff       	call   c0001a6f <ld_qword>
c00023d8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023f4:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023f8:	74 ba                	je     c00023b4 <find_volume+0x5e>
c00023fa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023fe:	31 c9                	xor    ecx,ecx
c0002400:	c1 e7 07             	shl    edi,0x7
c0002403:	89 d8                	mov    eax,ebx
c0002405:	89 fa                	mov    edx,edi
c0002407:	c1 ea 09             	shr    edx,0x9
c000240a:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000240e:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002412:	e8 11 fe ff ff       	call   c0002228 <move_window>
c0002417:	85 c0                	test   eax,eax
c0002419:	75 81                	jne    c000239c <find_volume+0x46>
c000241b:	81 e7 80 01 00 00    	and    edi,0x180
c0002421:	b9 10 00 00 00       	mov    ecx,0x10
c0002426:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000242a:	ba f0 82 02 c0       	mov    edx,0xc00282f0
c000242f:	e8 b5 f6 ff ff       	call   c0001ae9 <mem_cmp>
c0002434:	85 c0                	test   eax,eax
c0002436:	75 29                	jne    c0002461 <find_volume+0x10b>
c0002438:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000243c:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002440:	e8 2a f6 ff ff       	call   c0001a6f <ld_qword>
c0002445:	89 d1                	mov    ecx,edx
c0002447:	89 c2                	mov    edx,eax
c0002449:	89 d8                	mov    eax,ebx
c000244b:	e8 4c fe ff ff       	call   c000229c <check_fs>
c0002450:	85 f6                	test   esi,esi
c0002452:	75 07                	jne    c000245b <find_volume+0x105>
c0002454:	83 f8 01             	cmp    eax,0x1
c0002457:	77 08                	ja     c0002461 <find_volume+0x10b>
c0002459:	eb 77                	jmp    c00024d2 <find_volume+0x17c>
c000245b:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000245f:	74 71                	je     c00024d2 <find_volume+0x17c>
c0002461:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002465:	eb 89                	jmp    c00023f0 <find_volume+0x9a>
c0002467:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000246b:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002471:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002477:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000247b:	89 cd                	mov    ebp,ecx
c000247d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002481:	89 f8                	mov    eax,edi
c0002483:	83 c7 10             	add    edi,0x10
c0002486:	e8 cc f5 ff ff       	call   c0001a57 <ld_dword>
c000248b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000248f:	89 01                	mov    DWORD PTR [ecx],eax
c0002491:	83 c1 04             	add    ecx,0x4
c0002494:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002498:	75 e3                	jne    c000247d <find_volume+0x127>
c000249a:	31 ff                	xor    edi,edi
c000249c:	85 f6                	test   esi,esi
c000249e:	74 03                	je     c00024a3 <find_volume+0x14d>
c00024a0:	8d 7e ff             	lea    edi,[esi-0x1]
c00024a3:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024a7:	85 d2                	test   edx,edx
c00024a9:	74 14                	je     c00024bf <find_volume+0x169>
c00024ab:	31 c9                	xor    ecx,ecx
c00024ad:	89 d8                	mov    eax,ebx
c00024af:	e8 e8 fd ff ff       	call   c000229c <check_fs>
c00024b4:	83 f8 01             	cmp    eax,0x1
c00024b7:	76 19                	jbe    c00024d2 <find_volume+0x17c>
c00024b9:	85 f6                	test   esi,esi
c00024bb:	74 0f                	je     c00024cc <find_volume+0x176>
c00024bd:	eb 13                	jmp    c00024d2 <find_volume+0x17c>
c00024bf:	85 f6                	test   esi,esi
c00024c1:	0f 85 ed fe ff ff    	jne    c00023b4 <find_volume+0x5e>
c00024c7:	b8 03 00 00 00       	mov    eax,0x3
c00024cc:	47                   	inc    edi
c00024cd:	83 ff 03             	cmp    edi,0x3
c00024d0:	76 d1                	jbe    c00024a3 <find_volume+0x14d>
c00024d2:	83 c4 3c             	add    esp,0x3c
c00024d5:	5b                   	pop    ebx
c00024d6:	5e                   	pop    esi
c00024d7:	5f                   	pop    edi
c00024d8:	5d                   	pop    ebp
c00024d9:	c3                   	ret    

c00024da <mount_volume>:
c00024da:	55                   	push   ebp
c00024db:	57                   	push   edi
c00024dc:	89 cf                	mov    edi,ecx
c00024de:	56                   	push   esi
c00024df:	53                   	push   ebx
c00024e0:	bb 0b 00 00 00       	mov    ebx,0xb
c00024e5:	83 ec 3c             	sub    esp,0x3c
c00024e8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024f2:	e8 35 fb ff ff       	call   c000202c <get_ldnumber>
c00024f7:	85 c0                	test   eax,eax
c00024f9:	0f 88 3a 05 00 00    	js     c0002a39 <mount_volume+0x55f>
c00024ff:	8b 2c 85 80 d0 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2f80]
c0002506:	89 c6                	mov    esi,eax
c0002508:	bb 0c 00 00 00       	mov    ebx,0xc
c000250d:	85 ed                	test   ebp,ebp
c000250f:	0f 84 24 05 00 00    	je     c0002a39 <mount_volume+0x55f>
c0002515:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002519:	83 e7 fe             	and    edi,0xfffffffe
c000251c:	89 2a                	mov    DWORD PTR [edx],ebp
c000251e:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002522:	74 32                	je     c0002556 <mount_volume+0x7c>
c0002524:	83 ec 0c             	sub    esp,0xc
c0002527:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000252b:	50                   	push   eax
c000252c:	e8 c8 f4 ff ff       	call   c00019f9 <disk_status>
c0002531:	83 c4 10             	add    esp,0x10
c0002534:	a8 01                	test   al,0x1
c0002536:	75 1e                	jne    c0002556 <mount_volume+0x7c>
c0002538:	31 db                	xor    ebx,ebx
c000253a:	89 f9                	mov    ecx,edi
c000253c:	84 c9                	test   cl,cl
c000253e:	0f 84 f5 04 00 00    	je     c0002a39 <mount_volume+0x55f>
c0002544:	a8 04                	test   al,0x4
c0002546:	0f 84 ed 04 00 00    	je     c0002a39 <mount_volume+0x55f>
c000254c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002551:	e9 e3 04 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c0002556:	83 ec 0c             	sub    esp,0xc
c0002559:	89 f0                	mov    eax,esi
c000255b:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000255f:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002562:	0f b6 f0             	movzx  esi,al
c0002565:	bb 03 00 00 00       	mov    ebx,0x3
c000256a:	56                   	push   esi
c000256b:	e8 8c f4 ff ff       	call   c00019fc <disk_initialize>
c0002570:	83 c4 10             	add    esp,0x10
c0002573:	a8 01                	test   al,0x1
c0002575:	0f 85 be 04 00 00    	jne    c0002a39 <mount_volume+0x55f>
c000257b:	89 f9                	mov    ecx,edi
c000257d:	84 c9                	test   cl,cl
c000257f:	74 04                	je     c0002585 <mount_volume+0xab>
c0002581:	a8 04                	test   al,0x4
c0002583:	75 c7                	jne    c000254c <mount_volume+0x72>
c0002585:	31 d2                	xor    edx,edx
c0002587:	89 e8                	mov    eax,ebp
c0002589:	e8 c8 fd ff ff       	call   c0002356 <find_volume>
c000258e:	83 f8 04             	cmp    eax,0x4
c0002591:	75 0a                	jne    c000259d <mount_volume+0xc3>
c0002593:	bb 01 00 00 00       	mov    ebx,0x1
c0002598:	e9 9c 04 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c000259d:	83 f8 01             	cmp    eax,0x1
c00025a0:	76 0a                	jbe    c00025ac <mount_volume+0xd2>
c00025a2:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a7:	e9 8d 04 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c00025ac:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025af:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025ba:	75 17                	jne    c00025d3 <mount_volume+0xf9>
c00025bc:	b8 0b 00 00 00       	mov    eax,0xb
c00025c1:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025c6:	75 da                	jne    c00025a2 <mount_volume+0xc8>
c00025c8:	40                   	inc    eax
c00025c9:	83 f8 40             	cmp    eax,0x40
c00025cc:	75 f3                	jne    c00025c1 <mount_volume+0xe7>
c00025ce:	e9 5a 02 00 00       	jmp    c000282d <mount_volume+0x353>
c00025d3:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025d6:	e8 6f f4 ff ff       	call   c0001a4a <ld_word>
c00025db:	66 3d 00 02          	cmp    ax,0x200
c00025df:	75 c1                	jne    c00025a2 <mount_volume+0xc8>
c00025e1:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025e4:	e8 61 f4 ff ff       	call   c0001a4a <ld_word>
c00025e9:	0f b7 c0             	movzx  eax,ax
c00025ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025f0:	85 c0                	test   eax,eax
c00025f2:	75 0c                	jne    c0002600 <mount_volume+0x126>
c00025f4:	8d 45 78             	lea    eax,[ebp+0x78]
c00025f7:	e8 5b f4 ff ff       	call   c0001a57 <ld_dword>
c00025fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002604:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002607:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000260a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000260e:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002611:	48                   	dec    eax
c0002612:	3c 01                	cmp    al,0x1
c0002614:	77 8c                	ja     c00025a2 <mount_volume+0xc8>
c0002616:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000261a:	89 c3                	mov    ebx,eax
c000261c:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002620:	66 85 c0             	test   ax,ax
c0002623:	0f 84 79 ff ff ff    	je     c00025a2 <mount_volume+0xc8>
c0002629:	8d 40 ff             	lea    eax,[eax-0x1]
c000262c:	85 d8                	test   eax,ebx
c000262e:	0f 85 6e ff ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002634:	8d 45 65             	lea    eax,[ebp+0x65]
c0002637:	e8 0e f4 ff ff       	call   c0001a4a <ld_word>
c000263c:	89 c7                	mov    edi,eax
c000263e:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002642:	a8 0f                	test   al,0xf
c0002644:	0f 85 58 ff ff ff    	jne    c00025a2 <mount_volume+0xc8>
c000264a:	8d 45 67             	lea    eax,[ebp+0x67]
c000264d:	e8 f8 f3 ff ff       	call   c0001a4a <ld_word>
c0002652:	0f b7 f0             	movzx  esi,ax
c0002655:	85 f6                	test   esi,esi
c0002657:	75 0a                	jne    c0002663 <mount_volume+0x189>
c0002659:	8d 45 74             	lea    eax,[ebp+0x74]
c000265c:	e8 f6 f3 ff ff       	call   c0001a57 <ld_dword>
c0002661:	89 c6                	mov    esi,eax
c0002663:	8d 45 62             	lea    eax,[ebp+0x62]
c0002666:	e8 df f3 ff ff       	call   c0001a4a <ld_word>
c000266b:	66 85 c0             	test   ax,ax
c000266e:	0f 84 2e ff ff ff    	je     c00025a2 <mount_volume+0xc8>
c0002674:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002679:	0f b7 c8             	movzx  ecx,ax
c000267c:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002681:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002685:	89 fa                	mov    edx,edi
c0002687:	66 c1 ea 04          	shr    dx,0x4
c000268b:	0f b7 d2             	movzx  edx,dx
c000268e:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002692:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002695:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002699:	39 c6                	cmp    esi,eax
c000269b:	0f 82 01 ff ff ff    	jb     c00025a2 <mount_volume+0xc8>
c00026a1:	29 c6                	sub    esi,eax
c00026a3:	31 d2                	xor    edx,edx
c00026a5:	89 f0                	mov    eax,esi
c00026a7:	f7 f3                	div    ebx
c00026a9:	39 de                	cmp    esi,ebx
c00026ab:	0f 82 f1 fe ff ff    	jb     c00025a2 <mount_volume+0xc8>
c00026b1:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026b6:	0f 87 e6 fe ff ff    	ja     c00025a2 <mount_volume+0xc8>
c00026bc:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026c1:	0f 86 63 03 00 00    	jbe    c0002a2a <mount_volume+0x550>
c00026c7:	bb 03 00 00 00       	mov    ebx,0x3
c00026cc:	8d 70 02             	lea    esi,[eax+0x2]
c00026cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026d7:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026da:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026dd:	31 d2                	xor    edx,edx
c00026df:	89 c8                	mov    eax,ecx
c00026e1:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026e4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026e8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026f0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026f4:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026f7:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026fe:	31 d2                	xor    edx,edx
c0002700:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002704:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002708:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000270b:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000270e:	83 fb 03             	cmp    ebx,0x3
c0002711:	75 2b                	jne    c000273e <mount_volume+0x264>
c0002713:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002716:	e8 2f f3 ff ff       	call   c0001a4a <ld_word>
c000271b:	66 09 c7             	or     di,ax
c000271e:	0f 85 7e fe ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002724:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000272a:	c1 e6 02             	shl    esi,0x2
c000272d:	e8 25 f3 ff ff       	call   c0001a57 <ld_dword>
c0002732:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002739:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000273c:	eb 30                	jmp    c000276e <mount_volume+0x294>
c000273e:	66 85 ff             	test   di,di
c0002741:	0f 84 5b fe ff ff    	je     c00025a2 <mount_volume+0xc8>
c0002747:	31 d2                	xor    edx,edx
c0002749:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000274d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002751:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002755:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002758:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000275b:	83 fb 02             	cmp    ebx,0x2
c000275e:	75 04                	jne    c0002764 <mount_volume+0x28a>
c0002760:	01 f6                	add    esi,esi
c0002762:	eb 0a                	jmp    c000276e <mount_volume+0x294>
c0002764:	8d 04 76             	lea    eax,[esi+esi*2]
c0002767:	83 e6 01             	and    esi,0x1
c000276a:	d1 e8                	shr    eax,1
c000276c:	01 c6                	add    esi,eax
c000276e:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002774:	c1 ee 09             	shr    esi,0x9
c0002777:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000277b:	0f 87 21 fe ff ff    	ja     c00025a2 <mount_volume+0xc8>
c0002781:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002788:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000278f:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002793:	83 fb 03             	cmp    ebx,0x3
c0002796:	75 7a                	jne    c0002812 <mount_volume+0x338>
c0002798:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000279e:	e8 a7 f2 ff ff       	call   c0001a4a <ld_word>
c00027a3:	66 48                	dec    ax
c00027a5:	75 6b                	jne    c0002812 <mount_volume+0x338>
c00027a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027af:	83 c2 01             	add    edx,0x1
c00027b2:	89 e8                	mov    eax,ebp
c00027b4:	83 d1 00             	adc    ecx,0x0
c00027b7:	e8 6c fa ff ff       	call   c0002228 <move_window>
c00027bc:	85 c0                	test   eax,eax
c00027be:	75 52                	jne    c0002812 <mount_volume+0x338>
c00027c0:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027c4:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027ca:	e8 7b f2 ff ff       	call   c0001a4a <ld_word>
c00027cf:	66 3d 55 aa          	cmp    ax,0xaa55
c00027d3:	75 3d                	jne    c0002812 <mount_volume+0x338>
c00027d5:	8d 45 54             	lea    eax,[ebp+0x54]
c00027d8:	e8 7a f2 ff ff       	call   c0001a57 <ld_dword>
c00027dd:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027e2:	75 2e                	jne    c0002812 <mount_volume+0x338>
c00027e4:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027ea:	e8 68 f2 ff ff       	call   c0001a57 <ld_dword>
c00027ef:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027f4:	75 1c                	jne    c0002812 <mount_volume+0x338>
c00027f6:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027fc:	e8 56 f2 ff ff       	call   c0001a57 <ld_dword>
c0002801:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002804:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000280a:	e8 48 f2 ff ff       	call   c0001a57 <ld_dword>
c000280f:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002812:	66 a1 60 d0 02 c0    	mov    ax,ds:0xc002d060
c0002818:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000281b:	40                   	inc    eax
c000281c:	31 db                	xor    ebx,ebx
c000281e:	66 a3 60 d0 02 c0    	mov    ds:0xc002d060,ax
c0002824:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002828:	e9 0c 02 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c000282d:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002833:	e8 12 f2 ff ff       	call   c0001a4a <ld_word>
c0002838:	66 3d 00 01          	cmp    ax,0x100
c000283c:	0f 85 60 fd ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002842:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002849:	0f 85 53 fd ff ff    	jne    c00025a2 <mount_volume+0xc8>
c000284f:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002855:	e8 15 f2 ff ff       	call   c0001a6f <ld_qword>
c000285a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000285e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002862:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002868:	e8 ea f1 ff ff       	call   c0001a57 <ld_dword>
c000286d:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002870:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002876:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002879:	fe c8                	dec    al
c000287b:	0f 85 21 fd ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002881:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002888:	bb 01 00 00 00       	mov    ebx,0x1
c000288d:	d3 e3                	shl    ebx,cl
c000288f:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002893:	66 85 db             	test   bx,bx
c0002896:	0f 84 06 fd ff ff    	je     c00025a2 <mount_volume+0xc8>
c000289c:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00028a2:	e8 b0 f1 ff ff       	call   c0001a57 <ld_dword>
c00028a7:	89 c6                	mov    esi,eax
c00028a9:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028ae:	0f 87 ee fc ff ff    	ja     c00025a2 <mount_volume+0xc8>
c00028b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b8:	8d 40 02             	lea    eax,[eax+0x2]
c00028bb:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028be:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028c5:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028c8:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028ce:	e8 84 f1 ff ff       	call   c0001a57 <ld_dword>
c00028d3:	31 d2                	xor    edx,edx
c00028d5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028d9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028f1:	e8 61 f1 ff ff       	call   c0001a57 <ld_dword>
c00028f6:	31 d2                	xor    edx,edx
c00028f8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028fc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002900:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002904:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002907:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000290a:	0f b7 c3             	movzx  eax,bx
c000290d:	31 d2                	xor    edx,edx
c000290f:	0f af f0             	imul   esi,eax
c0002912:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002916:	89 f0                	mov    eax,esi
c0002918:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000291c:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002920:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002924:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002928:	39 c1                	cmp    ecx,eax
c000292a:	89 df                	mov    edi,ebx
c000292c:	19 d7                	sbb    edi,edx
c000292e:	0f 82 6e fc ff ff    	jb     c00025a2 <mount_volume+0xc8>
c0002934:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000293a:	31 db                	xor    ebx,ebx
c000293c:	e8 16 f1 ff ff       	call   c0001a57 <ld_dword>
c0002941:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002948:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000294b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002953:	85 db                	test   ebx,ebx
c0002955:	75 39                	jne    c0002990 <mount_volume+0x4b6>
c0002957:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000295b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000295f:	0f 86 3d fc ff ff    	jbe    c00025a2 <mount_volume+0xc8>
c0002965:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002968:	31 ff                	xor    edi,edi
c000296a:	89 e8                	mov    eax,ebp
c000296c:	e8 72 f3 ff ff       	call   c0001ce3 <clst2sect>
c0002971:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002975:	01 c6                	add    esi,eax
c0002977:	89 e8                	mov    eax,ebp
c0002979:	11 d7                	adc    edi,edx
c000297b:	89 f2                	mov    edx,esi
c000297d:	89 f9                	mov    ecx,edi
c000297f:	e8 a4 f8 ff ff       	call   c0002228 <move_window>
c0002984:	85 c0                	test   eax,eax
c0002986:	0f 85 07 fc ff ff    	jne    c0002593 <mount_volume+0xb9>
c000298c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002990:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002995:	74 0b                	je     c00029a2 <mount_volume+0x4c8>
c0002997:	83 c3 20             	add    ebx,0x20
c000299a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00029a0:	eb b1                	jmp    c0002953 <mount_volume+0x479>
c00029a2:	8d 75 54             	lea    esi,[ebp+0x54]
c00029a5:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029a9:	e8 a9 f0 ff ff       	call   c0001a57 <ld_dword>
c00029ae:	89 c3                	mov    ebx,eax
c00029b0:	83 f8 01             	cmp    eax,0x1
c00029b3:	0f 86 e9 fb ff ff    	jbe    c00025a2 <mount_volume+0xc8>
c00029b9:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029bc:	0f 86 e0 fb ff ff    	jbe    c00025a2 <mount_volume+0xc8>
c00029c2:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029c5:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029c9:	0f af c2             	imul   eax,edx
c00029cc:	31 d2                	xor    edx,edx
c00029ce:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029d1:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029d4:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029d7:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029da:	31 c9                	xor    ecx,ecx
c00029dc:	89 da                	mov    edx,ebx
c00029de:	89 e8                	mov    eax,ebp
c00029e0:	c1 ea 07             	shr    edx,0x7
c00029e3:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029e6:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029e9:	e8 3a f8 ff ff       	call   c0002228 <move_window>
c00029ee:	85 c0                	test   eax,eax
c00029f0:	0f 85 9d fb ff ff    	jne    c0002593 <mount_volume+0xb9>
c00029f6:	89 d8                	mov    eax,ebx
c00029f8:	83 e0 7f             	and    eax,0x7f
c00029fb:	8d 04 86             	lea    eax,[esi+eax*4]
c00029fe:	e8 54 f0 ff ff       	call   c0001a57 <ld_dword>
c0002a03:	83 f8 ff             	cmp    eax,0xffffffff
c0002a06:	74 0a                	je     c0002a12 <mount_volume+0x538>
c0002a08:	43                   	inc    ebx
c0002a09:	39 d8                	cmp    eax,ebx
c0002a0b:	74 cd                	je     c00029da <mount_volume+0x500>
c0002a0d:	e9 90 fb ff ff       	jmp    c00025a2 <mount_volume+0xc8>
c0002a12:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a19:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a20:	bb 04 00 00 00       	mov    ebx,0x4
c0002a25:	e9 e8 fd ff ff       	jmp    c0002812 <mount_volume+0x338>
c0002a2a:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002a2f:	19 db                	sbb    ebx,ebx
c0002a31:	83 c3 02             	add    ebx,0x2
c0002a34:	e9 93 fc ff ff       	jmp    c00026cc <mount_volume+0x1f2>
c0002a39:	83 c4 3c             	add    esp,0x3c
c0002a3c:	89 d8                	mov    eax,ebx
c0002a3e:	5b                   	pop    ebx
c0002a3f:	5e                   	pop    esi
c0002a40:	5f                   	pop    edi
c0002a41:	5d                   	pop    ebp
c0002a42:	c3                   	ret    

c0002a43 <find_bitmap>:
c0002a43:	55                   	push   ebp
c0002a44:	57                   	push   edi
c0002a45:	89 c7                	mov    edi,eax
c0002a47:	56                   	push   esi
c0002a48:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a4b:	53                   	push   ebx
c0002a4c:	83 ec 1c             	sub    esp,0x1c
c0002a4f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a52:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a56:	83 e8 02             	sub    eax,0x2
c0002a59:	39 f0                	cmp    eax,esi
c0002a5b:	77 02                	ja     c0002a5f <find_bitmap+0x1c>
c0002a5d:	31 f6                	xor    esi,esi
c0002a5f:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a63:	89 f3                	mov    ebx,esi
c0002a65:	31 ed                	xor    ebp,ebp
c0002a67:	31 c9                	xor    ecx,ecx
c0002a69:	89 da                	mov    edx,ebx
c0002a6b:	89 f8                	mov    eax,edi
c0002a6d:	c1 ea 0c             	shr    edx,0xc
c0002a70:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a73:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a76:	e8 ad f7 ff ff       	call   c0002228 <move_window>
c0002a7b:	85 c0                	test   eax,eax
c0002a7d:	75 68                	jne    c0002ae7 <find_bitmap+0xa4>
c0002a7f:	89 da                	mov    edx,ebx
c0002a81:	89 d9                	mov    ecx,ebx
c0002a83:	c1 ea 03             	shr    edx,0x3
c0002a86:	83 e1 07             	and    ecx,0x7
c0002a89:	b8 01 00 00 00       	mov    eax,0x1
c0002a8e:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a94:	d3 e0                	shl    eax,cl
c0002a96:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a99:	83 e9 02             	sub    ecx,0x2
c0002a9c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aa0:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002aa4:	43                   	inc    ebx
c0002aa5:	21 c1                	and    ecx,eax
c0002aa7:	d1 e0                	shl    eax,1
c0002aa9:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002aad:	77 09                	ja     c0002ab8 <find_bitmap+0x75>
c0002aaf:	31 db                	xor    ebx,ebx
c0002ab1:	ba 00 02 00 00       	mov    edx,0x200
c0002ab6:	31 c0                	xor    eax,eax
c0002ab8:	84 c9                	test   cl,cl
c0002aba:	75 10                	jne    c0002acc <find_bitmap+0x89>
c0002abc:	45                   	inc    ebp
c0002abd:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ac1:	75 0f                	jne    c0002ad2 <find_bitmap+0x8f>
c0002ac3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ac7:	83 c0 02             	add    eax,0x2
c0002aca:	eb 22                	jmp    c0002aee <find_bitmap+0xab>
c0002acc:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ad0:	31 ed                	xor    ebp,ebp
c0002ad2:	39 de                	cmp    esi,ebx
c0002ad4:	74 16                	je     c0002aec <find_bitmap+0xa9>
c0002ad6:	84 c0                	test   al,al
c0002ad8:	75 c6                	jne    c0002aa0 <find_bitmap+0x5d>
c0002ada:	42                   	inc    edx
c0002adb:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002ae1:	77 84                	ja     c0002a67 <find_bitmap+0x24>
c0002ae3:	b0 01                	mov    al,0x1
c0002ae5:	eb b9                	jmp    c0002aa0 <find_bitmap+0x5d>
c0002ae7:	83 c8 ff             	or     eax,0xffffffff
c0002aea:	eb 02                	jmp    c0002aee <find_bitmap+0xab>
c0002aec:	31 c0                	xor    eax,eax
c0002aee:	83 c4 1c             	add    esp,0x1c
c0002af1:	5b                   	pop    ebx
c0002af2:	5e                   	pop    esi
c0002af3:	5f                   	pop    edi
c0002af4:	5d                   	pop    ebp
c0002af5:	c3                   	ret    

c0002af6 <change_bitmap>:
c0002af6:	55                   	push   ebp
c0002af7:	89 cd                	mov    ebp,ecx
c0002af9:	57                   	push   edi
c0002afa:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002afd:	56                   	push   esi
c0002afe:	89 c7                	mov    edi,eax
c0002b00:	53                   	push   ebx
c0002b01:	89 c8                	mov    eax,ecx
c0002b03:	83 ec 1c             	sub    esp,0x1c
c0002b06:	31 d2                	xor    edx,edx
c0002b08:	89 ce                	mov    esi,ecx
c0002b0a:	c1 e8 0c             	shr    eax,0xc
c0002b0d:	bb 01 00 00 00       	mov    ebx,0x1
c0002b12:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b15:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b18:	c1 ee 03             	shr    esi,0x3
c0002b1b:	83 e1 07             	and    ecx,0x7
c0002b1e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b24:	d3 e3                	shl    ebx,cl
c0002b26:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b2a:	89 c1                	mov    ecx,eax
c0002b2c:	89 d3                	mov    ebx,edx
c0002b2e:	83 c1 01             	add    ecx,0x1
c0002b31:	83 d3 00             	adc    ebx,0x0
c0002b34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b38:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b3c:	89 d1                	mov    ecx,edx
c0002b3e:	89 c2                	mov    edx,eax
c0002b40:	89 f8                	mov    eax,edi
c0002b42:	e8 e1 f6 ff ff       	call   c0002228 <move_window>
c0002b47:	89 c1                	mov    ecx,eax
c0002b49:	85 c0                	test   eax,eax
c0002b4b:	75 48                	jne    c0002b95 <change_bitmap+0x9f>
c0002b4d:	31 d2                	xor    edx,edx
c0002b4f:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b53:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b57:	0f 95 c2             	setne  dl
c0002b5a:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b5e:	74 3c                	je     c0002b9c <change_bitmap+0xa6>
c0002b60:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b64:	4d                   	dec    ebp
c0002b65:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b69:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b6d:	74 32                	je     c0002ba1 <change_bitmap+0xab>
c0002b6f:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b73:	75 d8                	jne    c0002b4d <change_bitmap+0x57>
c0002b75:	8d 46 01             	lea    eax,[esi+0x1]
c0002b78:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b7d:	89 c3                	mov    ebx,eax
c0002b7f:	31 f6                	xor    esi,esi
c0002b81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b89:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b8f:	74 99                	je     c0002b2a <change_bitmap+0x34>
c0002b91:	89 de                	mov    esi,ebx
c0002b93:	eb b8                	jmp    c0002b4d <change_bitmap+0x57>
c0002b95:	b9 01 00 00 00       	mov    ecx,0x1
c0002b9a:	eb 05                	jmp    c0002ba1 <change_bitmap+0xab>
c0002b9c:	b9 02 00 00 00       	mov    ecx,0x2
c0002ba1:	83 c4 1c             	add    esp,0x1c
c0002ba4:	89 c8                	mov    eax,ecx
c0002ba6:	5b                   	pop    ebx
c0002ba7:	5e                   	pop    esi
c0002ba8:	5f                   	pop    edi
c0002ba9:	5d                   	pop    ebp
c0002baa:	c3                   	ret    

c0002bab <put_fat>:
c0002bab:	83 fa 01             	cmp    edx,0x1
c0002bae:	0f 86 7b 01 00 00    	jbe    c0002d2f <put_fat+0x184>
c0002bb4:	55                   	push   ebp
c0002bb5:	57                   	push   edi
c0002bb6:	89 cf                	mov    edi,ecx
c0002bb8:	56                   	push   esi
c0002bb9:	b9 02 00 00 00       	mov    ecx,0x2
c0002bbe:	53                   	push   ebx
c0002bbf:	89 c6                	mov    esi,eax
c0002bc1:	83 ec 1c             	sub    esp,0x1c
c0002bc4:	89 d3                	mov    ebx,edx
c0002bc6:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bc9:	0f 86 68 01 00 00    	jbe    c0002d37 <put_fat+0x18c>
c0002bcf:	8a 00                	mov    al,BYTE PTR [eax]
c0002bd1:	3c 02                	cmp    al,0x2
c0002bd3:	0f 84 c7 00 00 00    	je     c0002ca0 <put_fat+0xf5>
c0002bd9:	77 09                	ja     c0002be4 <put_fat+0x39>
c0002bdb:	fe c8                	dec    al
c0002bdd:	74 17                	je     c0002bf6 <put_fat+0x4b>
c0002bdf:	e9 53 01 00 00       	jmp    c0002d37 <put_fat+0x18c>
c0002be4:	b9 02 00 00 00       	mov    ecx,0x2
c0002be9:	3c 04                	cmp    al,0x4
c0002beb:	0f 86 e1 00 00 00    	jbe    c0002cd2 <put_fat+0x127>
c0002bf1:	e9 41 01 00 00       	jmp    c0002d37 <put_fat+0x18c>
c0002bf6:	89 d5                	mov    ebp,edx
c0002bf8:	31 c9                	xor    ecx,ecx
c0002bfa:	d1 ed                	shr    ebp,1
c0002bfc:	89 f0                	mov    eax,esi
c0002bfe:	01 d5                	add    ebp,edx
c0002c00:	89 ea                	mov    edx,ebp
c0002c02:	c1 ea 09             	shr    edx,0x9
c0002c05:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c08:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c0b:	e8 18 f6 ff ff       	call   c0002228 <move_window>
c0002c10:	89 c1                	mov    ecx,eax
c0002c12:	85 c0                	test   eax,eax
c0002c14:	0f 85 1d 01 00 00    	jne    c0002d37 <put_fat+0x18c>
c0002c1a:	8d 46 54             	lea    eax,[esi+0x54]
c0002c1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c21:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c24:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c2e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c32:	89 f8                	mov    eax,edi
c0002c34:	83 e3 01             	and    ebx,0x1
c0002c37:	74 0d                	je     c0002c46 <put_fat+0x9b>
c0002c39:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c3c:	89 fa                	mov    edx,edi
c0002c3e:	83 e0 0f             	and    eax,0xf
c0002c41:	c1 e2 04             	shl    edx,0x4
c0002c44:	09 d0                	or     eax,edx
c0002c46:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c4d:	31 c9                	xor    ecx,ecx
c0002c4f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c53:	c1 ea 09             	shr    edx,0x9
c0002c56:	89 f0                	mov    eax,esi
c0002c58:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c5b:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c5e:	e8 c5 f5 ff ff       	call   c0002228 <move_window>
c0002c63:	89 c1                	mov    ecx,eax
c0002c65:	85 c0                	test   eax,eax
c0002c67:	0f 85 ca 00 00 00    	jne    c0002d37 <put_fat+0x18c>
c0002c6d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c71:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c77:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c7b:	85 db                	test   ebx,ebx
c0002c7d:	74 07                	je     c0002c86 <put_fat+0xdb>
c0002c7f:	c1 ef 04             	shr    edi,0x4
c0002c82:	89 fa                	mov    edx,edi
c0002c84:	eb 0e                	jmp    c0002c94 <put_fat+0xe9>
c0002c86:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c89:	c1 ef 08             	shr    edi,0x8
c0002c8c:	83 e2 f0             	and    edx,0xfffffff0
c0002c8f:	83 e7 0f             	and    edi,0xf
c0002c92:	09 fa                	or     edx,edi
c0002c94:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c97:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c9b:	e9 97 00 00 00       	jmp    c0002d37 <put_fat+0x18c>
c0002ca0:	31 c9                	xor    ecx,ecx
c0002ca2:	c1 ea 08             	shr    edx,0x8
c0002ca5:	89 f0                	mov    eax,esi
c0002ca7:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002caa:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cad:	e8 76 f5 ff ff       	call   c0002228 <move_window>
c0002cb2:	89 c1                	mov    ecx,eax
c0002cb4:	85 c0                	test   eax,eax
c0002cb6:	75 7f                	jne    c0002d37 <put_fat+0x18c>
c0002cb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cbc:	01 db                	add    ebx,ebx
c0002cbe:	0f b7 d7             	movzx  edx,di
c0002cc1:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cc7:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ccb:	e8 ec ed ff ff       	call   c0001abc <st_word>
c0002cd0:	eb 53                	jmp    c0002d25 <put_fat+0x17a>
c0002cd2:	31 c9                	xor    ecx,ecx
c0002cd4:	c1 ea 07             	shr    edx,0x7
c0002cd7:	89 f0                	mov    eax,esi
c0002cd9:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cdc:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cdf:	e8 44 f5 ff ff       	call   c0002228 <move_window>
c0002ce4:	89 c1                	mov    ecx,eax
c0002ce6:	85 c0                	test   eax,eax
c0002ce8:	75 4d                	jne    c0002d37 <put_fat+0x18c>
c0002cea:	c1 e3 02             	shl    ebx,0x2
c0002ced:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cf3:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cf6:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cfa:	74 1c                	je     c0002d18 <put_fat+0x16d>
c0002cfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d00:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d06:	89 d8                	mov    eax,ebx
c0002d08:	e8 4a ed ff ff       	call   c0001a57 <ld_dword>
c0002d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d11:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d16:	09 c7                	or     edi,eax
c0002d18:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d1c:	89 fa                	mov    edx,edi
c0002d1e:	89 d8                	mov    eax,ebx
c0002d20:	e8 9b ed ff ff       	call   c0001ac0 <st_dword>
c0002d25:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d29:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d2d:	eb 08                	jmp    c0002d37 <put_fat+0x18c>
c0002d2f:	b9 02 00 00 00       	mov    ecx,0x2
c0002d34:	89 c8                	mov    eax,ecx
c0002d36:	c3                   	ret    
c0002d37:	83 c4 1c             	add    esp,0x1c
c0002d3a:	89 c8                	mov    eax,ecx
c0002d3c:	5b                   	pop    ebx
c0002d3d:	5e                   	pop    esi
c0002d3e:	5f                   	pop    edi
c0002d3f:	5d                   	pop    ebp
c0002d40:	c3                   	ret    

c0002d41 <fill_last_frag>:
c0002d41:	57                   	push   edi
c0002d42:	89 cf                	mov    edi,ecx
c0002d44:	56                   	push   esi
c0002d45:	89 d6                	mov    esi,edx
c0002d47:	53                   	push   ebx
c0002d48:	89 c3                	mov    ebx,eax
c0002d4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d4d:	85 c0                	test   eax,eax
c0002d4f:	74 21                	je     c0002d72 <fill_last_frag+0x31>
c0002d51:	89 f9                	mov    ecx,edi
c0002d53:	83 f8 01             	cmp    eax,0x1
c0002d56:	76 05                	jbe    c0002d5d <fill_last_frag+0x1c>
c0002d58:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d5b:	29 c1                	sub    ecx,eax
c0002d5d:	8d 56 01             	lea    edx,[esi+0x1]
c0002d60:	29 c2                	sub    edx,eax
c0002d62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d64:	e8 42 fe ff ff       	call   c0002bab <put_fat>
c0002d69:	85 c0                	test   eax,eax
c0002d6b:	75 05                	jne    c0002d72 <fill_last_frag+0x31>
c0002d6d:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d70:	eb d8                	jmp    c0002d4a <fill_last_frag+0x9>
c0002d72:	5b                   	pop    ebx
c0002d73:	5e                   	pop    esi
c0002d74:	5f                   	pop    edi
c0002d75:	c3                   	ret    

c0002d76 <fill_first_frag>:
c0002d76:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d7a:	75 2d                	jne    c0002da9 <fill_first_frag+0x33>
c0002d7c:	57                   	push   edi
c0002d7d:	56                   	push   esi
c0002d7e:	53                   	push   ebx
c0002d7f:	89 c3                	mov    ebx,eax
c0002d81:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d84:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d87:	01 d7                	add    edi,edx
c0002d89:	39 fa                	cmp    edx,edi
c0002d8b:	74 14                	je     c0002da1 <fill_first_frag+0x2b>
c0002d8d:	8d 72 01             	lea    esi,[edx+0x1]
c0002d90:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d92:	89 f1                	mov    ecx,esi
c0002d94:	e8 12 fe ff ff       	call   c0002bab <put_fat>
c0002d99:	89 f2                	mov    edx,esi
c0002d9b:	85 c0                	test   eax,eax
c0002d9d:	74 ea                	je     c0002d89 <fill_first_frag+0x13>
c0002d9f:	eb 0b                	jmp    c0002dac <fill_first_frag+0x36>
c0002da1:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002da5:	31 c0                	xor    eax,eax
c0002da7:	eb 03                	jmp    c0002dac <fill_first_frag+0x36>
c0002da9:	31 c0                	xor    eax,eax
c0002dab:	c3                   	ret    
c0002dac:	5b                   	pop    ebx
c0002dad:	5e                   	pop    esi
c0002dae:	5f                   	pop    edi
c0002daf:	c3                   	ret    

c0002db0 <get_fat>:
c0002db0:	83 fa 01             	cmp    edx,0x1
c0002db3:	0f 86 db 01 00 00    	jbe    c0002f94 <get_fat+0x1e4>
c0002db9:	55                   	push   ebp
c0002dba:	b9 01 00 00 00       	mov    ecx,0x1
c0002dbf:	57                   	push   edi
c0002dc0:	56                   	push   esi
c0002dc1:	53                   	push   ebx
c0002dc2:	83 ec 1c             	sub    esp,0x1c
c0002dc5:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dc7:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dca:	0f 86 cc 01 00 00    	jbe    c0002f9c <get_fat+0x1ec>
c0002dd0:	89 c3                	mov    ebx,eax
c0002dd2:	89 d6                	mov    esi,edx
c0002dd4:	8a 07                	mov    al,BYTE PTR [edi]
c0002dd6:	3c 02                	cmp    al,0x2
c0002dd8:	0f 84 99 00 00 00    	je     c0002e77 <get_fat+0xc7>
c0002dde:	77 09                	ja     c0002de9 <get_fat+0x39>
c0002de0:	fe c8                	dec    al
c0002de2:	74 1a                	je     c0002dfe <get_fat+0x4e>
c0002de4:	e9 b3 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002de9:	3c 03                	cmp    al,0x3
c0002deb:	0f 84 b5 00 00 00    	je     c0002ea6 <get_fat+0xf6>
c0002df1:	3c 04                	cmp    al,0x4
c0002df3:	0f 84 e3 00 00 00    	je     c0002edc <get_fat+0x12c>
c0002df9:	e9 9e 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002dfe:	89 d3                	mov    ebx,edx
c0002e00:	31 c9                	xor    ecx,ecx
c0002e02:	d1 eb                	shr    ebx,1
c0002e04:	89 f8                	mov    eax,edi
c0002e06:	01 d3                	add    ebx,edx
c0002e08:	89 da                	mov    edx,ebx
c0002e0a:	c1 ea 09             	shr    edx,0x9
c0002e0d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e10:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e13:	e8 10 f4 ff ff       	call   c0002228 <move_window>
c0002e18:	85 c0                	test   eax,eax
c0002e1a:	74 08                	je     c0002e24 <get_fat+0x74>
c0002e1c:	83 c9 ff             	or     ecx,0xffffffff
c0002e1f:	e9 78 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002e24:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e27:	31 c9                	xor    ecx,ecx
c0002e29:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e2f:	89 ea                	mov    edx,ebp
c0002e31:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e35:	c1 ea 09             	shr    edx,0x9
c0002e38:	89 f8                	mov    eax,edi
c0002e3a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e3d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e40:	e8 e3 f3 ff ff       	call   c0002228 <move_window>
c0002e45:	85 c0                	test   eax,eax
c0002e47:	75 d3                	jne    c0002e1c <get_fat+0x6c>
c0002e49:	0f b6 c3             	movzx  eax,bl
c0002e4c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e52:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e57:	c1 e3 08             	shl    ebx,0x8
c0002e5a:	09 c3                	or     ebx,eax
c0002e5c:	89 d9                	mov    ecx,ebx
c0002e5e:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e64:	83 e6 01             	and    esi,0x1
c0002e67:	0f 84 2f 01 00 00    	je     c0002f9c <get_fat+0x1ec>
c0002e6d:	89 d9                	mov    ecx,ebx
c0002e6f:	c1 e9 04             	shr    ecx,0x4
c0002e72:	e9 25 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002e77:	31 c9                	xor    ecx,ecx
c0002e79:	c1 ea 08             	shr    edx,0x8
c0002e7c:	89 f8                	mov    eax,edi
c0002e7e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e81:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e84:	e8 9f f3 ff ff       	call   c0002228 <move_window>
c0002e89:	85 c0                	test   eax,eax
c0002e8b:	75 8f                	jne    c0002e1c <get_fat+0x6c>
c0002e8d:	01 f6                	add    esi,esi
c0002e8f:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e95:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e99:	e8 ac eb ff ff       	call   c0001a4a <ld_word>
c0002e9e:	0f b7 c8             	movzx  ecx,ax
c0002ea1:	e9 f6 00 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002ea6:	31 c9                	xor    ecx,ecx
c0002ea8:	c1 ea 07             	shr    edx,0x7
c0002eab:	89 f8                	mov    eax,edi
c0002ead:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002eb0:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb3:	e8 70 f3 ff ff       	call   c0002228 <move_window>
c0002eb8:	85 c0                	test   eax,eax
c0002eba:	0f 85 5c ff ff ff    	jne    c0002e1c <get_fat+0x6c>
c0002ec0:	c1 e6 02             	shl    esi,0x2
c0002ec3:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ecd:	e8 85 eb ff ff       	call   c0001a57 <ld_dword>
c0002ed2:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ed7:	e9 b4 00 00 00       	jmp    c0002f90 <get_fat+0x1e0>
c0002edc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002edf:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ee2:	89 d1                	mov    ecx,edx
c0002ee4:	09 c1                	or     ecx,eax
c0002ee6:	74 06                	je     c0002eee <get_fat+0x13e>
c0002ee8:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eec:	75 0f                	jne    c0002efd <get_fat+0x14d>
c0002eee:	b9 01 00 00 00       	mov    ecx,0x1
c0002ef3:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ef7:	0f 85 9f 00 00 00    	jne    c0002f9c <get_fat+0x1ec>
c0002efd:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002f01:	89 f5                	mov    ebp,esi
c0002f03:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f08:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f0b:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f0e:	80 f9 02             	cmp    cl,0x2
c0002f11:	75 35                	jne    c0002f48 <get_fat+0x198>
c0002f13:	83 c0 ff             	add    eax,0xffffffff
c0002f16:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f1b:	83 d2 ff             	adc    edx,0xffffffff
c0002f1e:	31 db                	xor    ebx,ebx
c0002f20:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f24:	53                   	push   ebx
c0002f25:	c1 ea 09             	shr    edx,0x9
c0002f28:	51                   	push   ecx
c0002f29:	52                   	push   edx
c0002f2a:	50                   	push   eax
c0002f2b:	e8 6c 29 02 00       	call   c002589c <__udivdi3>
c0002f30:	83 c4 10             	add    esp,0x10
c0002f33:	b9 01 00 00 00       	mov    ecx,0x1
c0002f38:	39 c5                	cmp    ebp,eax
c0002f3a:	77 60                	ja     c0002f9c <get_fat+0x1ec>
c0002f3c:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f41:	74 59                	je     c0002f9c <get_fat+0x1ec>
c0002f43:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f46:	eb 54                	jmp    c0002f9c <get_fat+0x1ec>
c0002f48:	80 f9 03             	cmp    cl,0x3
c0002f4b:	75 05                	jne    c0002f52 <get_fat+0x1a2>
c0002f4d:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f50:	77 f1                	ja     c0002f43 <get_fat+0x193>
c0002f52:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f57:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f5b:	75 3f                	jne    c0002f9c <get_fat+0x1ec>
c0002f5d:	31 c9                	xor    ecx,ecx
c0002f5f:	89 f2                	mov    edx,esi
c0002f61:	89 f8                	mov    eax,edi
c0002f63:	c1 ea 07             	shr    edx,0x7
c0002f66:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f69:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f6c:	e8 b7 f2 ff ff       	call   c0002228 <move_window>
c0002f71:	85 c0                	test   eax,eax
c0002f73:	0f 85 a3 fe ff ff    	jne    c0002e1c <get_fat+0x6c>
c0002f79:	c1 e6 02             	shl    esi,0x2
c0002f7c:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f82:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f86:	e8 cc ea ff ff       	call   c0001a57 <ld_dword>
c0002f8b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f90:	89 c1                	mov    ecx,eax
c0002f92:	eb 08                	jmp    c0002f9c <get_fat+0x1ec>
c0002f94:	b9 01 00 00 00       	mov    ecx,0x1
c0002f99:	89 c8                	mov    eax,ecx
c0002f9b:	c3                   	ret    
c0002f9c:	83 c4 1c             	add    esp,0x1c
c0002f9f:	89 c8                	mov    eax,ecx
c0002fa1:	5b                   	pop    ebx
c0002fa2:	5e                   	pop    esi
c0002fa3:	5f                   	pop    edi
c0002fa4:	5d                   	pop    ebp
c0002fa5:	c3                   	ret    

c0002fa6 <dir_sdi>:
c0002fa6:	55                   	push   ebp
c0002fa7:	57                   	push   edi
c0002fa8:	56                   	push   esi
c0002fa9:	53                   	push   ebx
c0002faa:	89 c3                	mov    ebx,eax
c0002fac:	83 ec 1c             	sub    esp,0x1c
c0002faf:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fb1:	31 c0                	xor    eax,eax
c0002fb3:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fb6:	0f 94 c0             	sete   al
c0002fb9:	48                   	dec    eax
c0002fba:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fbf:	05 00 00 00 10       	add    eax,0x10000000
c0002fc4:	39 d0                	cmp    eax,edx
c0002fc6:	77 0a                	ja     c0002fd2 <dir_sdi+0x2c>
c0002fc8:	b8 02 00 00 00       	mov    eax,0x2
c0002fcd:	e9 c4 00 00 00       	jmp    c0003096 <dir_sdi+0xf0>
c0002fd2:	89 d6                	mov    esi,edx
c0002fd4:	f6 c2 1f             	test   dl,0x1f
c0002fd7:	75 ef                	jne    c0002fc8 <dir_sdi+0x22>
c0002fd9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fdc:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fdf:	85 c9                	test   ecx,ecx
c0002fe1:	75 2d                	jne    c0003010 <dir_sdi+0x6a>
c0002fe3:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fe6:	77 1b                	ja     c0003003 <dir_sdi+0x5d>
c0002fe8:	89 f2                	mov    edx,esi
c0002fea:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fee:	c1 ea 05             	shr    edx,0x5
c0002ff1:	39 c2                	cmp    edx,eax
c0002ff3:	73 d3                	jae    c0002fc8 <dir_sdi+0x22>
c0002ff5:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ff8:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002ffb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002ffe:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003001:	eb 4b                	jmp    c000304e <dir_sdi+0xa8>
c0003003:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003006:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000300a:	85 c0                	test   eax,eax
c000300c:	74 da                	je     c0002fe8 <dir_sdi+0x42>
c000300e:	89 c1                	mov    ecx,eax
c0003010:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003014:	c1 e5 09             	shl    ebp,0x9
c0003017:	89 ca                	mov    edx,ecx
c0003019:	39 ee                	cmp    esi,ebp
c000301b:	72 1c                	jb     c0003039 <dir_sdi+0x93>
c000301d:	89 d8                	mov    eax,ebx
c000301f:	e8 8c fd ff ff       	call   c0002db0 <get_fat>
c0003024:	89 c1                	mov    ecx,eax
c0003026:	83 f8 ff             	cmp    eax,0xffffffff
c0003029:	74 66                	je     c0003091 <dir_sdi+0xeb>
c000302b:	83 f8 01             	cmp    eax,0x1
c000302e:	76 98                	jbe    c0002fc8 <dir_sdi+0x22>
c0003030:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003033:	76 93                	jbe    c0002fc8 <dir_sdi+0x22>
c0003035:	29 ee                	sub    esi,ebp
c0003037:	eb de                	jmp    c0003017 <dir_sdi+0x71>
c0003039:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000303d:	89 f8                	mov    eax,edi
c000303f:	e8 9f ec ff ff       	call   c0001ce3 <clst2sect>
c0003044:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003048:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000304b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003051:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003054:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003057:	89 d1                	mov    ecx,edx
c0003059:	09 c1                	or     ecx,eax
c000305b:	0f 84 67 ff ff ff    	je     c0002fc8 <dir_sdi+0x22>
c0003061:	89 f1                	mov    ecx,esi
c0003063:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000306b:	c1 e9 09             	shr    ecx,0x9
c000306e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003072:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003076:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000307a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000307d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003083:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003086:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000308a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000308d:	31 c0                	xor    eax,eax
c000308f:	eb 05                	jmp    c0003096 <dir_sdi+0xf0>
c0003091:	b8 01 00 00 00       	mov    eax,0x1
c0003096:	83 c4 1c             	add    esp,0x1c
c0003099:	5b                   	pop    ebx
c000309a:	5e                   	pop    esi
c000309b:	5f                   	pop    edi
c000309c:	5d                   	pop    ebp
c000309d:	c3                   	ret    

c000309e <create_chain>:
c000309e:	55                   	push   ebp
c000309f:	89 c5                	mov    ebp,eax
c00030a1:	57                   	push   edi
c00030a2:	56                   	push   esi
c00030a3:	53                   	push   ebx
c00030a4:	83 ec 1c             	sub    esp,0x1c
c00030a7:	85 d2                	test   edx,edx
c00030a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00030af:	75 0e                	jne    c00030bf <create_chain+0x21>
c00030b1:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030b4:	85 ff                	test   edi,edi
c00030b6:	74 39                	je     c00030f1 <create_chain+0x53>
c00030b8:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030bb:	77 39                	ja     c00030f6 <create_chain+0x58>
c00030bd:	eb 32                	jmp    c00030f1 <create_chain+0x53>
c00030bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030c3:	e8 e8 fc ff ff       	call   c0002db0 <get_fat>
c00030c8:	89 c3                	mov    ebx,eax
c00030ca:	83 f8 01             	cmp    eax,0x1
c00030cd:	77 0a                	ja     c00030d9 <create_chain+0x3b>
c00030cf:	bb 01 00 00 00       	mov    ebx,0x1
c00030d4:	e9 ba 01 00 00       	jmp    c0003293 <create_chain+0x1f5>
c00030d9:	83 f8 ff             	cmp    eax,0xffffffff
c00030dc:	0f 84 62 01 00 00    	je     c0003244 <create_chain+0x1a6>
c00030e2:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030e5:	0f 87 a8 01 00 00    	ja     c0003293 <create_chain+0x1f5>
c00030eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030ef:	eb 05                	jmp    c00030f6 <create_chain+0x58>
c00030f1:	bf 01 00 00 00       	mov    edi,0x1
c00030f6:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030fa:	75 07                	jne    c0003103 <create_chain+0x65>
c00030fc:	31 db                	xor    ebx,ebx
c00030fe:	e9 90 01 00 00       	jmp    c0003293 <create_chain+0x1f5>
c0003103:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003106:	75 74                	jne    c000317c <create_chain+0xde>
c0003108:	b9 01 00 00 00       	mov    ecx,0x1
c000310d:	89 fa                	mov    edx,edi
c000310f:	89 f0                	mov    eax,esi
c0003111:	e8 2d f9 ff ff       	call   c0002a43 <find_bitmap>
c0003116:	89 c3                	mov    ebx,eax
c0003118:	8d 40 ff             	lea    eax,[eax-0x1]
c000311b:	83 f8 fd             	cmp    eax,0xfffffffd
c000311e:	0f 87 6f 01 00 00    	ja     c0003293 <create_chain+0x1f5>
c0003124:	83 ec 0c             	sub    esp,0xc
c0003127:	b9 01 00 00 00       	mov    ecx,0x1
c000312c:	6a 01                	push   0x1
c000312e:	89 da                	mov    edx,ebx
c0003130:	89 f0                	mov    eax,esi
c0003132:	e8 bf f9 ff ff       	call   c0002af6 <change_bitmap>
c0003137:	83 c4 10             	add    esp,0x10
c000313a:	83 f8 02             	cmp    eax,0x2
c000313d:	74 90                	je     c00030cf <create_chain+0x31>
c000313f:	83 f8 01             	cmp    eax,0x1
c0003142:	0f 84 fc 00 00 00    	je     c0003244 <create_chain+0x1a6>
c0003148:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000314d:	75 09                	jne    c0003158 <create_chain+0xba>
c000314f:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003153:	e9 0c 01 00 00       	jmp    c0003264 <create_chain+0x1c6>
c0003158:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000315c:	0f 85 e7 00 00 00    	jne    c0003249 <create_chain+0x1ab>
c0003162:	8d 57 01             	lea    edx,[edi+0x1]
c0003165:	39 da                	cmp    edx,ebx
c0003167:	0f 84 f7 00 00 00    	je     c0003264 <create_chain+0x1c6>
c000316d:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003170:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003174:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003177:	e9 cd 00 00 00       	jmp    c0003249 <create_chain+0x1ab>
c000317c:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003180:	75 41                	jne    c00031c3 <create_chain+0x125>
c0003182:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003185:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003188:	77 05                	ja     c000318f <create_chain+0xf1>
c000318a:	bb 02 00 00 00       	mov    ebx,0x2
c000318f:	89 da                	mov    edx,ebx
c0003191:	89 e8                	mov    eax,ebp
c0003193:	e8 18 fc ff ff       	call   c0002db0 <get_fat>
c0003198:	83 f8 01             	cmp    eax,0x1
c000319b:	0f 84 2e ff ff ff    	je     c00030cf <create_chain+0x31>
c00031a1:	83 f8 ff             	cmp    eax,0xffffffff
c00031a4:	0f 84 9a 00 00 00    	je     c0003244 <create_chain+0x1a6>
c00031aa:	85 c0                	test   eax,eax
c00031ac:	74 11                	je     c00031bf <create_chain+0x121>
c00031ae:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031b1:	83 f8 01             	cmp    eax,0x1
c00031b4:	76 0d                	jbe    c00031c3 <create_chain+0x125>
c00031b6:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031b9:	76 08                	jbe    c00031c3 <create_chain+0x125>
c00031bb:	89 c7                	mov    edi,eax
c00031bd:	eb 04                	jmp    c00031c3 <create_chain+0x125>
c00031bf:	85 db                	test   ebx,ebx
c00031c1:	75 38                	jne    c00031fb <create_chain+0x15d>
c00031c3:	89 fb                	mov    ebx,edi
c00031c5:	43                   	inc    ebx
c00031c6:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031c9:	77 0e                	ja     c00031d9 <create_chain+0x13b>
c00031cb:	83 ff 01             	cmp    edi,0x1
c00031ce:	0f 86 28 ff ff ff    	jbe    c00030fc <create_chain+0x5e>
c00031d4:	bb 02 00 00 00       	mov    ebx,0x2
c00031d9:	89 da                	mov    edx,ebx
c00031db:	89 e8                	mov    eax,ebp
c00031dd:	e8 ce fb ff ff       	call   c0002db0 <get_fat>
c00031e2:	85 c0                	test   eax,eax
c00031e4:	74 15                	je     c00031fb <create_chain+0x15d>
c00031e6:	83 f8 01             	cmp    eax,0x1
c00031e9:	0f 84 e0 fe ff ff    	je     c00030cf <create_chain+0x31>
c00031ef:	40                   	inc    eax
c00031f0:	74 52                	je     c0003244 <create_chain+0x1a6>
c00031f2:	39 fb                	cmp    ebx,edi
c00031f4:	75 cf                	jne    c00031c5 <create_chain+0x127>
c00031f6:	e9 01 ff ff ff       	jmp    c00030fc <create_chain+0x5e>
c00031fb:	83 c9 ff             	or     ecx,0xffffffff
c00031fe:	89 da                	mov    edx,ebx
c0003200:	89 f0                	mov    eax,esi
c0003202:	e8 a4 f9 ff ff       	call   c0002bab <put_fat>
c0003207:	85 c0                	test   eax,eax
c0003209:	75 32                	jne    c000323d <create_chain+0x19f>
c000320b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003210:	74 11                	je     c0003223 <create_chain+0x185>
c0003212:	89 d9                	mov    ecx,ebx
c0003214:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003218:	89 f0                	mov    eax,esi
c000321a:	e8 8c f9 ff ff       	call   c0002bab <put_fat>
c000321f:	85 c0                	test   eax,eax
c0003221:	75 1a                	jne    c000323d <create_chain+0x19f>
c0003223:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003226:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003229:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000322c:	8d 51 fe             	lea    edx,[ecx-0x2]
c000322f:	39 d0                	cmp    eax,edx
c0003231:	77 04                	ja     c0003237 <create_chain+0x199>
c0003233:	48                   	dec    eax
c0003234:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003237:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000323b:	eb 56                	jmp    c0003293 <create_chain+0x1f5>
c000323d:	48                   	dec    eax
c000323e:	0f 85 8b fe ff ff    	jne    c00030cf <create_chain+0x31>
c0003244:	83 cb ff             	or     ebx,0xffffffff
c0003247:	eb 4a                	jmp    c0003293 <create_chain+0x1f5>
c0003249:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000324d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003250:	41                   	inc    ecx
c0003251:	39 d9                	cmp    ecx,ebx
c0003253:	75 19                	jne    c000326e <create_chain+0x1d0>
c0003255:	b9 02 00 00 00       	mov    ecx,0x2
c000325a:	85 d2                	test   edx,edx
c000325c:	74 03                	je     c0003261 <create_chain+0x1c3>
c000325e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003261:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003264:	85 c0                	test   eax,eax
c0003266:	0f 85 63 fe ff ff    	jne    c00030cf <create_chain+0x31>
c000326c:	eb b5                	jmp    c0003223 <create_chain+0x185>
c000326e:	85 d2                	test   edx,edx
c0003270:	75 07                	jne    c0003279 <create_chain+0x1db>
c0003272:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003279:	89 d9                	mov    ecx,ebx
c000327b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000327f:	89 e8                	mov    eax,ebp
c0003281:	e8 bb fa ff ff       	call   c0002d41 <fill_last_frag>
c0003286:	85 c0                	test   eax,eax
c0003288:	75 b3                	jne    c000323d <create_chain+0x19f>
c000328a:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003291:	eb 90                	jmp    c0003223 <create_chain+0x185>
c0003293:	83 c4 1c             	add    esp,0x1c
c0003296:	89 d8                	mov    eax,ebx
c0003298:	5b                   	pop    ebx
c0003299:	5e                   	pop    esi
c000329a:	5f                   	pop    edi
c000329b:	5d                   	pop    ebp
c000329c:	c3                   	ret    

c000329d <remove_chain>:
c000329d:	55                   	push   ebp
c000329e:	57                   	push   edi
c000329f:	56                   	push   esi
c00032a0:	53                   	push   ebx
c00032a1:	83 ec 1c             	sub    esp,0x1c
c00032a4:	83 fa 01             	cmp    edx,0x1
c00032a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032ab:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032ad:	77 0a                	ja     c00032b9 <remove_chain+0x1c>
c00032af:	b8 02 00 00 00       	mov    eax,0x2
c00032b4:	e9 24 01 00 00       	jmp    c00033dd <remove_chain+0x140>
c00032b9:	89 d6                	mov    esi,edx
c00032bb:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032be:	76 ef                	jbe    c00032af <remove_chain+0x12>
c00032c0:	89 c7                	mov    edi,eax
c00032c2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032c7:	75 06                	jne    c00032cf <remove_chain+0x32>
c00032c9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032cd:	eb 54                	jmp    c0003323 <remove_chain+0x86>
c00032cf:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032d2:	75 06                	jne    c00032da <remove_chain+0x3d>
c00032d4:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032d8:	74 ef                	je     c00032c9 <remove_chain+0x2c>
c00032da:	83 c9 ff             	or     ecx,0xffffffff
c00032dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032e1:	89 d8                	mov    eax,ebx
c00032e3:	e8 c3 f8 ff ff       	call   c0002bab <put_fat>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 dd                	je     c00032c9 <remove_chain+0x2c>
c00032ec:	e9 ec 00 00 00       	jmp    c00033dd <remove_chain+0x140>
c00032f1:	83 f8 01             	cmp    eax,0x1
c00032f4:	74 b9                	je     c00032af <remove_chain+0x12>
c00032f6:	83 f8 ff             	cmp    eax,0xffffffff
c00032f9:	74 6d                	je     c0003368 <remove_chain+0xcb>
c00032fb:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fe:	75 6f                	jne    c000336f <remove_chain+0xd2>
c0003300:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003303:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003306:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003309:	39 d0                	cmp    eax,edx
c000330b:	73 08                	jae    c0003315 <remove_chain+0x78>
c000330d:	40                   	inc    eax
c000330e:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003312:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003315:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003318:	39 e9                	cmp    ecx,ebp
c000331a:	75 64                	jne    c0003380 <remove_chain+0xe3>
c000331c:	89 ee                	mov    esi,ebp
c000331e:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003321:	76 0f                	jbe    c0003332 <remove_chain+0x95>
c0003323:	89 f2                	mov    edx,esi
c0003325:	89 f8                	mov    eax,edi
c0003327:	e8 84 fa ff ff       	call   c0002db0 <get_fat>
c000332c:	89 c5                	mov    ebp,eax
c000332e:	85 c0                	test   eax,eax
c0003330:	75 bf                	jne    c00032f1 <remove_chain+0x54>
c0003332:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003335:	0f 85 a0 00 00 00    	jne    c00033db <remove_chain+0x13e>
c000333b:	eb 6c                	jmp    c00033a9 <remove_chain+0x10c>
c000333d:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003340:	84 c0                	test   al,al
c0003342:	75 7d                	jne    c00033c1 <remove_chain+0x124>
c0003344:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003347:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000334b:	0f 84 86 00 00 00    	je     c00033d7 <remove_chain+0x13a>
c0003351:	89 da                	mov    edx,ebx
c0003353:	89 f8                	mov    eax,edi
c0003355:	e8 56 fa ff ff       	call   c0002db0 <get_fat>
c000335a:	83 f8 01             	cmp    eax,0x1
c000335d:	0f 86 4c ff ff ff    	jbe    c00032af <remove_chain+0x12>
c0003363:	83 f8 ff             	cmp    eax,0xffffffff
c0003366:	75 4e                	jne    c00033b6 <remove_chain+0x119>
c0003368:	b8 01 00 00 00       	mov    eax,0x1
c000336d:	eb 6e                	jmp    c00033dd <remove_chain+0x140>
c000336f:	31 c9                	xor    ecx,ecx
c0003371:	89 f2                	mov    edx,esi
c0003373:	89 d8                	mov    eax,ebx
c0003375:	e8 31 f8 ff ff       	call   c0002bab <put_fat>
c000337a:	85 c0                	test   eax,eax
c000337c:	74 82                	je     c0003300 <remove_chain+0x63>
c000337e:	eb 5d                	jmp    c00033dd <remove_chain+0x140>
c0003380:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003383:	75 1b                	jne    c00033a0 <remove_chain+0x103>
c0003385:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003389:	89 d8                	mov    eax,ebx
c000338b:	83 ec 0c             	sub    esp,0xc
c000338e:	6a 00                	push   0x0
c0003390:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003394:	e8 5d f7 ff ff       	call   c0002af6 <change_bitmap>
c0003399:	83 c4 10             	add    esp,0x10
c000339c:	85 c0                	test   eax,eax
c000339e:	75 3d                	jne    c00033dd <remove_chain+0x140>
c00033a0:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00033a4:	e9 73 ff ff ff       	jmp    c000331c <remove_chain+0x7f>
c00033a9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033ae:	75 8d                	jne    c000333d <remove_chain+0xa0>
c00033b0:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033b4:	eb 25                	jmp    c00033db <remove_chain+0x13e>
c00033b6:	8d 53 01             	lea    edx,[ebx+0x1]
c00033b9:	89 c3                	mov    ebx,eax
c00033bb:	39 c2                	cmp    edx,eax
c00033bd:	74 88                	je     c0003347 <remove_chain+0xaa>
c00033bf:	eb 1a                	jmp    c00033db <remove_chain+0x13e>
c00033c1:	3c 03                	cmp    al,0x3
c00033c3:	75 16                	jne    c00033db <remove_chain+0x13e>
c00033c5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033c8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033cc:	77 0d                	ja     c00033db <remove_chain+0x13e>
c00033ce:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033d1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033d5:	72 04                	jb     c00033db <remove_chain+0x13e>
c00033d7:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033db:	31 c0                	xor    eax,eax
c00033dd:	83 c4 1c             	add    esp,0x1c
c00033e0:	5b                   	pop    ebx
c00033e1:	5e                   	pop    esi
c00033e2:	5f                   	pop    edi
c00033e3:	5d                   	pop    ebp
c00033e4:	c3                   	ret    

c00033e5 <dir_clear>:
c00033e5:	55                   	push   ebp
c00033e6:	57                   	push   edi
c00033e7:	56                   	push   esi
c00033e8:	89 c6                	mov    esi,eax
c00033ea:	53                   	push   ebx
c00033eb:	83 ec 1c             	sub    esp,0x1c
c00033ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033f2:	e8 9d ed ff ff       	call   c0002194 <sync_window>
c00033f7:	85 c0                	test   eax,eax
c00033f9:	0f 85 de 00 00 00    	jne    c00034dd <dir_clear+0xf8>
c00033ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003403:	89 f0                	mov    eax,esi
c0003405:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003408:	e8 d6 e8 ff ff       	call   c0001ce3 <clst2sect>
c000340d:	b9 00 02 00 00       	mov    ecx,0x200
c0003412:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003416:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000341a:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000341d:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003420:	89 e8                	mov    eax,ebp
c0003422:	31 d2                	xor    edx,edx
c0003424:	e8 b5 e6 ff ff       	call   c0001ade <mem_set>
c0003429:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000342d:	c1 e3 09             	shl    ebx,0x9
c0003430:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003436:	76 1f                	jbe    c0003457 <dir_clear+0x72>
c0003438:	bb 00 80 00 00       	mov    ebx,0x8000
c000343d:	eb 18                	jmp    c0003457 <dir_clear+0x72>
c000343f:	83 ec 0c             	sub    esp,0xc
c0003442:	53                   	push   ebx
c0003443:	e8 35 4e 00 00       	call   c000827d <ff_memalloc>
c0003448:	83 c4 10             	add    esp,0x10
c000344b:	89 c7                	mov    edi,eax
c000344d:	85 c0                	test   eax,eax
c000344f:	0f 85 8f 00 00 00    	jne    c00034e4 <dir_clear+0xff>
c0003455:	d1 eb                	shr    ebx,1
c0003457:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000345d:	77 e0                	ja     c000343f <dir_clear+0x5a>
c000345f:	31 db                	xor    ebx,ebx
c0003461:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003465:	39 d8                	cmp    eax,ebx
c0003467:	76 66                	jbe    c00034cf <dir_clear+0xea>
c0003469:	83 ec 0c             	sub    esp,0xc
c000346c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003470:	6a 01                	push   0x1
c0003472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000347a:	55                   	push   ebp
c000347b:	50                   	push   eax
c000347c:	e8 94 e5 ff ff       	call   c0001a15 <disk_write>
c0003481:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003486:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000348b:	83 c4 20             	add    esp,0x20
c000348e:	85 c0                	test   eax,eax
c0003490:	75 3d                	jne    c00034cf <dir_clear+0xea>
c0003492:	43                   	inc    ebx
c0003493:	eb cc                	jmp    c0003461 <dir_clear+0x7c>
c0003495:	83 ec 0c             	sub    esp,0xc
c0003498:	31 d2                	xor    edx,edx
c000349a:	55                   	push   ebp
c000349b:	89 d8                	mov    eax,ebx
c000349d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00034a1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00034a5:	52                   	push   edx
c00034a6:	50                   	push   eax
c00034a7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034ab:	57                   	push   edi
c00034ac:	50                   	push   eax
c00034ad:	e8 63 e5 ff ff       	call   c0001a15 <disk_write>
c00034b2:	83 c4 20             	add    esp,0x20
c00034b5:	85 c0                	test   eax,eax
c00034b7:	75 0a                	jne    c00034c3 <dir_clear+0xde>
c00034b9:	01 eb                	add    ebx,ebp
c00034bb:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034bf:	39 d8                	cmp    eax,ebx
c00034c1:	77 d2                	ja     c0003495 <dir_clear+0xb0>
c00034c3:	83 ec 0c             	sub    esp,0xc
c00034c6:	57                   	push   edi
c00034c7:	e8 c7 4d 00 00       	call   c0008293 <ff_memfree>
c00034cc:	83 c4 10             	add    esp,0x10
c00034cf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034d3:	39 d8                	cmp    eax,ebx
c00034d5:	0f 95 c0             	setne  al
c00034d8:	0f b6 c0             	movzx  eax,al
c00034db:	eb 19                	jmp    c00034f6 <dir_clear+0x111>
c00034dd:	b8 01 00 00 00       	mov    eax,0x1
c00034e2:	eb 12                	jmp    c00034f6 <dir_clear+0x111>
c00034e4:	89 d9                	mov    ecx,ebx
c00034e6:	31 d2                	xor    edx,edx
c00034e8:	c1 eb 09             	shr    ebx,0x9
c00034eb:	e8 ee e5 ff ff       	call   c0001ade <mem_set>
c00034f0:	89 dd                	mov    ebp,ebx
c00034f2:	31 db                	xor    ebx,ebx
c00034f4:	eb c5                	jmp    c00034bb <dir_clear+0xd6>
c00034f6:	83 c4 1c             	add    esp,0x1c
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    

c00034fe <dir_next>:
c00034fe:	55                   	push   ebp
c00034ff:	57                   	push   edi
c0003500:	56                   	push   esi
c0003501:	53                   	push   ebx
c0003502:	89 c3                	mov    ebx,eax
c0003504:	83 ec 1c             	sub    esp,0x1c
c0003507:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003509:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000350d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003510:	8d 78 20             	lea    edi,[eax+0x20]
c0003513:	31 c0                	xor    eax,eax
c0003515:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003519:	0f 94 c0             	sete   al
c000351c:	48                   	dec    eax
c000351d:	25 00 00 20 f0       	and    eax,0xf0200000
c0003522:	05 00 00 00 10       	add    eax,0x10000000
c0003527:	39 f8                	cmp    eax,edi
c0003529:	77 0e                	ja     c0003539 <dir_next+0x3b>
c000352b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003532:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003539:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000353c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000353f:	b8 04 00 00 00       	mov    eax,0x4
c0003544:	89 ce                	mov    esi,ecx
c0003546:	09 d6                	or     esi,edx
c0003548:	0f 84 da 00 00 00    	je     c0003628 <dir_next+0x12a>
c000354e:	89 f8                	mov    eax,edi
c0003550:	25 ff 01 00 00       	and    eax,0x1ff
c0003555:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003559:	0f 85 b9 00 00 00    	jne    c0003618 <dir_next+0x11a>
c000355f:	83 c2 01             	add    edx,0x1
c0003562:	83 d1 00             	adc    ecx,0x0
c0003565:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003568:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000356b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000356e:	85 d2                	test   edx,edx
c0003570:	75 29                	jne    c000359b <dir_next+0x9d>
c0003572:	89 fa                	mov    edx,edi
c0003574:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003578:	c1 ea 05             	shr    edx,0x5
c000357b:	39 c2                	cmp    edx,eax
c000357d:	0f 82 95 00 00 00    	jb     c0003618 <dir_next+0x11a>
c0003583:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000358a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003591:	b8 04 00 00 00       	mov    eax,0x4
c0003596:	e9 8d 00 00 00       	jmp    c0003628 <dir_next+0x12a>
c000359b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000359f:	89 f9                	mov    ecx,edi
c00035a1:	48                   	dec    eax
c00035a2:	c1 e9 09             	shr    ecx,0x9
c00035a5:	85 c8                	test   eax,ecx
c00035a7:	75 6f                	jne    c0003618 <dir_next+0x11a>
c00035a9:	89 d8                	mov    eax,ebx
c00035ab:	e8 00 f8 ff ff       	call   c0002db0 <get_fat>
c00035b0:	89 c6                	mov    esi,eax
c00035b2:	83 f8 01             	cmp    eax,0x1
c00035b5:	77 07                	ja     c00035be <dir_next+0xc0>
c00035b7:	b8 02 00 00 00       	mov    eax,0x2
c00035bc:	eb 6a                	jmp    c0003628 <dir_next+0x12a>
c00035be:	83 f8 ff             	cmp    eax,0xffffffff
c00035c1:	75 07                	jne    c00035ca <dir_next+0xcc>
c00035c3:	b8 01 00 00 00       	mov    eax,0x1
c00035c8:	eb 5e                	jmp    c0003628 <dir_next+0x12a>
c00035ca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035cd:	77 37                	ja     c0003606 <dir_next+0x108>
c00035cf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035d4:	74 ad                	je     c0003583 <dir_next+0x85>
c00035d6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035d9:	89 d8                	mov    eax,ebx
c00035db:	e8 be fa ff ff       	call   c000309e <create_chain>
c00035e0:	89 c6                	mov    esi,eax
c00035e2:	b8 07 00 00 00       	mov    eax,0x7
c00035e7:	85 f6                	test   esi,esi
c00035e9:	74 3d                	je     c0003628 <dir_next+0x12a>
c00035eb:	83 fe 01             	cmp    esi,0x1
c00035ee:	74 c7                	je     c00035b7 <dir_next+0xb9>
c00035f0:	83 fe ff             	cmp    esi,0xffffffff
c00035f3:	74 ce                	je     c00035c3 <dir_next+0xc5>
c00035f5:	89 f2                	mov    edx,esi
c00035f7:	89 e8                	mov    eax,ebp
c00035f9:	e8 e7 fd ff ff       	call   c00033e5 <dir_clear>
c00035fe:	85 c0                	test   eax,eax
c0003600:	75 c1                	jne    c00035c3 <dir_next+0xc5>
c0003602:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003606:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003609:	89 f2                	mov    edx,esi
c000360b:	89 e8                	mov    eax,ebp
c000360d:	e8 d1 e6 ff ff       	call   c0001ce3 <clst2sect>
c0003612:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003615:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000361c:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000361f:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003623:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003626:	31 c0                	xor    eax,eax
c0003628:	83 c4 1c             	add    esp,0x1c
c000362b:	5b                   	pop    ebx
c000362c:	5e                   	pop    esi
c000362d:	5f                   	pop    edi
c000362e:	5d                   	pop    ebp
c000362f:	c3                   	ret    

c0003630 <load_xdir>:
c0003630:	55                   	push   ebp
c0003631:	57                   	push   edi
c0003632:	56                   	push   esi
c0003633:	89 c6                	mov    esi,eax
c0003635:	53                   	push   ebx
c0003636:	83 ec 1c             	sub    esp,0x1c
c0003639:	8b 00                	mov    eax,DWORD PTR [eax]
c000363b:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000363e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003641:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003644:	e8 df eb ff ff       	call   c0002228 <move_window>
c0003649:	89 c3                	mov    ebx,eax
c000364b:	85 c0                	test   eax,eax
c000364d:	0f 85 0c 01 00 00    	jne    c000375f <load_xdir+0x12f>
c0003653:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003656:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003659:	0f 85 fb 00 00 00    	jne    c000375a <load_xdir+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	b9 20 00 00 00       	mov    ecx,0x20
c0003666:	e8 5e e4 ff ff       	call   c0001ac9 <mem_cpy>
c000366b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000366f:	40                   	inc    eax
c0003670:	c1 e0 05             	shl    eax,0x5
c0003673:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003677:	83 e8 60             	sub    eax,0x60
c000367a:	3d 00 02 00 00       	cmp    eax,0x200
c000367f:	0f 87 d5 00 00 00    	ja     c000375a <load_xdir+0x12a>
c0003685:	31 d2                	xor    edx,edx
c0003687:	89 f0                	mov    eax,esi
c0003689:	e8 70 fe ff ff       	call   c00034fe <dir_next>
c000368e:	89 c3                	mov    ebx,eax
c0003690:	83 f8 04             	cmp    eax,0x4
c0003693:	0f 84 c1 00 00 00    	je     c000375a <load_xdir+0x12a>
c0003699:	85 c0                	test   eax,eax
c000369b:	0f 85 be 00 00 00    	jne    c000375f <load_xdir+0x12f>
c00036a1:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036a4:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036a7:	8b 06                	mov    eax,DWORD PTR [esi]
c00036a9:	e8 7a eb ff ff       	call   c0002228 <move_window>
c00036ae:	89 c3                	mov    ebx,eax
c00036b0:	85 c0                	test   eax,eax
c00036b2:	0f 85 a7 00 00 00    	jne    c000375f <load_xdir+0x12f>
c00036b8:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036bb:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036be:	0f 85 96 00 00 00    	jne    c000375a <load_xdir+0x12a>
c00036c4:	8d 47 20             	lea    eax,[edi+0x20]
c00036c7:	b9 20 00 00 00       	mov    ecx,0x20
c00036cc:	e8 f8 e3 ff ff       	call   c0001ac9 <mem_cpy>
c00036d1:	31 d2                	xor    edx,edx
c00036d3:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036d7:	b9 0f 00 00 00       	mov    ecx,0xf
c00036dc:	83 c0 2c             	add    eax,0x2c
c00036df:	f7 f1                	div    ecx
c00036e1:	c1 e0 05             	shl    eax,0x5
c00036e4:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036e8:	77 70                	ja     c000375a <load_xdir+0x12a>
c00036ea:	bd 40 00 00 00       	mov    ebp,0x40
c00036ef:	31 d2                	xor    edx,edx
c00036f1:	89 f0                	mov    eax,esi
c00036f3:	e8 06 fe ff ff       	call   c00034fe <dir_next>
c00036f8:	89 c3                	mov    ebx,eax
c00036fa:	83 f8 04             	cmp    eax,0x4
c00036fd:	74 5b                	je     c000375a <load_xdir+0x12a>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 5c                	jne    c000375f <load_xdir+0x12f>
c0003703:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003706:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003709:	8b 06                	mov    eax,DWORD PTR [esi]
c000370b:	e8 18 eb ff ff       	call   c0002228 <move_window>
c0003710:	89 c3                	mov    ebx,eax
c0003712:	85 c0                	test   eax,eax
c0003714:	75 49                	jne    c000375f <load_xdir+0x12f>
c0003716:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003719:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000371c:	75 3c                	jne    c000375a <load_xdir+0x12a>
c000371e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003724:	77 0d                	ja     c0003733 <load_xdir+0x103>
c0003726:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003729:	b9 20 00 00 00       	mov    ecx,0x20
c000372e:	e8 96 e3 ff ff       	call   c0001ac9 <mem_cpy>
c0003733:	83 c5 20             	add    ebp,0x20
c0003736:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000373a:	77 b3                	ja     c00036ef <load_xdir+0xbf>
c000373c:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003742:	77 1b                	ja     c000375f <load_xdir+0x12f>
c0003744:	89 f8                	mov    eax,edi
c0003746:	e8 cd e7 ff ff       	call   c0001f18 <xdir_sum>
c000374b:	89 c1                	mov    ecx,eax
c000374d:	8d 47 02             	lea    eax,[edi+0x2]
c0003750:	e8 f5 e2 ff ff       	call   c0001a4a <ld_word>
c0003755:	66 39 c1             	cmp    cx,ax
c0003758:	74 05                	je     c000375f <load_xdir+0x12f>
c000375a:	bb 02 00 00 00       	mov    ebx,0x2
c000375f:	83 c4 1c             	add    esp,0x1c
c0003762:	89 d8                	mov    eax,ebx
c0003764:	5b                   	pop    ebx
c0003765:	5e                   	pop    esi
c0003766:	5f                   	pop    edi
c0003767:	5d                   	pop    ebp
c0003768:	c3                   	ret    

c0003769 <load_obj_xdir>:
c0003769:	53                   	push   ebx
c000376a:	89 c3                	mov    ebx,eax
c000376c:	83 ec 08             	sub    esp,0x8
c000376f:	8b 02                	mov    eax,DWORD PTR [edx]
c0003771:	89 03                	mov    DWORD PTR [ebx],eax
c0003773:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003776:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003779:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000377c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000377f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003782:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003789:	30 c0                	xor    al,al
c000378b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003792:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003795:	89 d8                	mov    eax,ebx
c0003797:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000379a:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000379d:	e8 04 f8 ff ff       	call   c0002fa6 <dir_sdi>
c00037a2:	85 c0                	test   eax,eax
c00037a4:	75 0b                	jne    c00037b1 <load_obj_xdir+0x48>
c00037a6:	89 d8                	mov    eax,ebx
c00037a8:	83 c4 08             	add    esp,0x8
c00037ab:	5b                   	pop    ebx
c00037ac:	e9 7f fe ff ff       	jmp    c0003630 <load_xdir>
c00037b1:	83 c4 08             	add    esp,0x8
c00037b4:	5b                   	pop    ebx
c00037b5:	c3                   	ret    

c00037b6 <dir_read>:
c00037b6:	55                   	push   ebp
c00037b7:	bd 04 00 00 00       	mov    ebp,0x4
c00037bc:	57                   	push   edi
c00037bd:	56                   	push   esi
c00037be:	be ff ff ff ff       	mov    esi,0xffffffff
c00037c3:	53                   	push   ebx
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	83 ec 1c             	sub    esp,0x1c
c00037c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037cd:	8b 38                	mov    edi,DWORD PTR [eax]
c00037cf:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037d4:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037d7:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037da:	89 c8                	mov    eax,ecx
c00037dc:	09 d0                	or     eax,edx
c00037de:	0f 84 25 01 00 00    	je     c0003909 <dir_read+0x153>
c00037e4:	89 f8                	mov    eax,edi
c00037e6:	e8 3d ea ff ff       	call   c0002228 <move_window>
c00037eb:	89 c5                	mov    ebp,eax
c00037ed:	85 c0                	test   eax,eax
c00037ef:	0f 85 23 01 00 00    	jne    c0003918 <dir_read+0x162>
c00037f5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037f8:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037fa:	84 c9                	test   cl,cl
c00037fc:	0f 84 11 01 00 00    	je     c0003913 <dir_read+0x15d>
c0003802:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003805:	75 48                	jne    c000384f <dir_read+0x99>
c0003807:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000380c:	74 10                	je     c000381e <dir_read+0x68>
c000380e:	80 f9 83             	cmp    cl,0x83
c0003811:	0f 85 dd 00 00 00    	jne    c00038f4 <dir_read+0x13e>
c0003817:	31 ed                	xor    ebp,ebp
c0003819:	e9 08 01 00 00       	jmp    c0003926 <dir_read+0x170>
c000381e:	80 f9 85             	cmp    cl,0x85
c0003821:	0f 85 cd 00 00 00    	jne    c00038f4 <dir_read+0x13e>
c0003827:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000382a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000382d:	89 d8                	mov    eax,ebx
c000382f:	e8 fc fd ff ff       	call   c0003630 <load_xdir>
c0003834:	89 c5                	mov    ebp,eax
c0003836:	85 c0                	test   eax,eax
c0003838:	0f 85 da 00 00 00    	jne    c0003918 <dir_read+0x162>
c000383e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003841:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003844:	83 e0 3f             	and    eax,0x3f
c0003847:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000384a:	e9 d7 00 00 00       	jmp    c0003926 <dir_read+0x170>
c000384f:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003852:	83 e0 3f             	and    eax,0x3f
c0003855:	80 f9 2e             	cmp    cl,0x2e
c0003858:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000385c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000385f:	0f 84 8a 00 00 00    	je     c00038ef <dir_read+0x139>
c0003865:	80 f9 e5             	cmp    cl,0xe5
c0003868:	0f 84 81 00 00 00    	je     c00038ef <dir_read+0x139>
c000386e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003872:	83 e0 1f             	and    eax,0x1f
c0003875:	83 f8 08             	cmp    eax,0x8
c0003878:	0f 94 c0             	sete   al
c000387b:	0f b6 c0             	movzx  eax,al
c000387e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003882:	75 6b                	jne    c00038ef <dir_read+0x139>
c0003884:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003889:	75 44                	jne    c00038cf <dir_read+0x119>
c000388b:	f6 c1 40             	test   cl,0x40
c000388e:	74 12                	je     c00038a2 <dir_read+0xec>
c0003890:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003893:	83 e1 bf             	and    ecx,0xffffffbf
c0003896:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000389a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000389d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00038a0:	eb 06                	jmp    c00038a8 <dir_read+0xf2>
c00038a2:	89 f0                	mov    eax,esi
c00038a4:	38 c8                	cmp    al,cl
c00038a6:	75 47                	jne    c00038ef <dir_read+0x139>
c00038a8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038ac:	be ff ff ff ff       	mov    esi,0xffffffff
c00038b1:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038b4:	75 3e                	jne    c00038f4 <dir_read+0x13e>
c00038b6:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038ba:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038bd:	e8 8a e4 ff ff       	call   c0001d4c <pick_lfn>
c00038c2:	85 c0                	test   eax,eax
c00038c4:	74 2e                	je     c00038f4 <dir_read+0x13e>
c00038c6:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038ca:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038cd:	eb 25                	jmp    c00038f4 <dir_read+0x13e>
c00038cf:	89 f0                	mov    eax,esi
c00038d1:	84 c0                	test   al,al
c00038d3:	75 11                	jne    c00038e6 <dir_read+0x130>
c00038d5:	89 d0                	mov    eax,edx
c00038d7:	e8 2a e6 ff ff       	call   c0001f06 <sum_sfn>
c00038dc:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038e0:	0f 84 31 ff ff ff    	je     c0003817 <dir_read+0x61>
c00038e6:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038ed:	eb 37                	jmp    c0003926 <dir_read+0x170>
c00038ef:	be ff ff ff ff       	mov    esi,0xffffffff
c00038f4:	31 d2                	xor    edx,edx
c00038f6:	89 d8                	mov    eax,ebx
c00038f8:	e8 01 fc ff ff       	call   c00034fe <dir_next>
c00038fd:	89 c5                	mov    ebp,eax
c00038ff:	85 c0                	test   eax,eax
c0003901:	0f 84 cd fe ff ff    	je     c00037d4 <dir_read+0x1e>
c0003907:	eb 0f                	jmp    c0003918 <dir_read+0x162>
c0003909:	85 ed                	test   ebp,ebp
c000390b:	0f 84 06 ff ff ff    	je     c0003817 <dir_read+0x61>
c0003911:	eb 05                	jmp    c0003918 <dir_read+0x162>
c0003913:	bd 04 00 00 00       	mov    ebp,0x4
c0003918:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000391f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003926:	83 c4 1c             	add    esp,0x1c
c0003929:	89 e8                	mov    eax,ebp
c000392b:	5b                   	pop    ebx
c000392c:	5e                   	pop    esi
c000392d:	5f                   	pop    edi
c000392e:	5d                   	pop    ebp
c000392f:	c3                   	ret    

c0003930 <dir_alloc>:
c0003930:	55                   	push   ebp
c0003931:	89 d5                	mov    ebp,edx
c0003933:	57                   	push   edi
c0003934:	31 d2                	xor    edx,edx
c0003936:	56                   	push   esi
c0003937:	53                   	push   ebx
c0003938:	89 c3                	mov    ebx,eax
c000393a:	83 ec 0c             	sub    esp,0xc
c000393d:	8b 38                	mov    edi,DWORD PTR [eax]
c000393f:	e8 62 f6 ff ff       	call   c0002fa6 <dir_sdi>
c0003944:	85 c0                	test   eax,eax
c0003946:	75 4e                	jne    c0003996 <dir_alloc+0x66>
c0003948:	31 f6                	xor    esi,esi
c000394a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000394d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003950:	89 f8                	mov    eax,edi
c0003952:	e8 d1 e8 ff ff       	call   c0002228 <move_window>
c0003957:	85 c0                	test   eax,eax
c0003959:	75 3b                	jne    c0003996 <dir_alloc+0x66>
c000395b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000395e:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003961:	8a 12                	mov    dl,BYTE PTR [edx]
c0003963:	75 07                	jne    c000396c <dir_alloc+0x3c>
c0003965:	f7 d2                	not    edx
c0003967:	c0 ea 07             	shr    dl,0x7
c000396a:	eb 0d                	jmp    c0003979 <dir_alloc+0x49>
c000396c:	84 d2                	test   dl,dl
c000396e:	0f 94 c1             	sete   cl
c0003971:	80 fa e5             	cmp    dl,0xe5
c0003974:	0f 94 c2             	sete   dl
c0003977:	09 ca                	or     edx,ecx
c0003979:	84 d2                	test   dl,dl
c000397b:	74 07                	je     c0003984 <dir_alloc+0x54>
c000397d:	46                   	inc    esi
c000397e:	39 ee                	cmp    esi,ebp
c0003980:	75 04                	jne    c0003986 <dir_alloc+0x56>
c0003982:	eb 1c                	jmp    c00039a0 <dir_alloc+0x70>
c0003984:	31 f6                	xor    esi,esi
c0003986:	ba 01 00 00 00       	mov    edx,0x1
c000398b:	89 d8                	mov    eax,ebx
c000398d:	e8 6c fb ff ff       	call   c00034fe <dir_next>
c0003992:	85 c0                	test   eax,eax
c0003994:	74 b4                	je     c000394a <dir_alloc+0x1a>
c0003996:	83 f8 04             	cmp    eax,0x4
c0003999:	75 05                	jne    c00039a0 <dir_alloc+0x70>
c000399b:	b8 07 00 00 00       	mov    eax,0x7
c00039a0:	83 c4 0c             	add    esp,0xc
c00039a3:	5b                   	pop    ebx
c00039a4:	5e                   	pop    esi
c00039a5:	5f                   	pop    edi
c00039a6:	5d                   	pop    ebp
c00039a7:	c3                   	ret    

c00039a8 <store_xdir>:
c00039a8:	55                   	push   ebp
c00039a9:	57                   	push   edi
c00039aa:	89 c7                	mov    edi,eax
c00039ac:	56                   	push   esi
c00039ad:	53                   	push   ebx
c00039ae:	83 ec 0c             	sub    esp,0xc
c00039b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00039b3:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039b6:	89 e8                	mov    eax,ebp
c00039b8:	e8 5b e5 ff ff       	call   c0001f18 <xdir_sum>
c00039bd:	0f b7 d0             	movzx  edx,ax
c00039c0:	8d 45 02             	lea    eax,[ebp+0x2]
c00039c3:	e8 f4 e0 ff ff       	call   c0001abc <st_word>
c00039c8:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039cc:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039cf:	89 f8                	mov    eax,edi
c00039d1:	e8 d0 f5 ff ff       	call   c0002fa6 <dir_sdi>
c00039d6:	89 c6                	mov    esi,eax
c00039d8:	85 f6                	test   esi,esi
c00039da:	75 3d                	jne    c0003a19 <store_xdir+0x71>
c00039dc:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039df:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039e2:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e4:	e8 3f e8 ff ff       	call   c0002228 <move_window>
c00039e9:	89 c6                	mov    esi,eax
c00039eb:	85 c0                	test   eax,eax
c00039ed:	75 2a                	jne    c0003a19 <store_xdir+0x71>
c00039ef:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039f2:	b9 20 00 00 00       	mov    ecx,0x20
c00039f7:	89 ea                	mov    edx,ebp
c00039f9:	e8 cb e0 ff ff       	call   c0001ac9 <mem_cpy>
c00039fe:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a00:	85 db                	test   ebx,ebx
c0003a02:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a06:	74 11                	je     c0003a19 <store_xdir+0x71>
c0003a08:	31 d2                	xor    edx,edx
c0003a0a:	89 f8                	mov    eax,edi
c0003a0c:	83 c5 20             	add    ebp,0x20
c0003a0f:	e8 ea fa ff ff       	call   c00034fe <dir_next>
c0003a14:	4b                   	dec    ebx
c0003a15:	89 c6                	mov    esi,eax
c0003a17:	eb bf                	jmp    c00039d8 <store_xdir+0x30>
c0003a19:	89 f0                	mov    eax,esi
c0003a1b:	83 fe 02             	cmp    esi,0x2
c0003a1e:	76 05                	jbe    c0003a25 <store_xdir+0x7d>
c0003a20:	b8 02 00 00 00       	mov    eax,0x2
c0003a25:	83 c4 0c             	add    esp,0xc
c0003a28:	5b                   	pop    ebx
c0003a29:	5e                   	pop    esi
c0003a2a:	5f                   	pop    edi
c0003a2b:	5d                   	pop    ebp
c0003a2c:	c3                   	ret    

c0003a2d <dir_remove>:
c0003a2d:	57                   	push   edi
c0003a2e:	56                   	push   esi
c0003a2f:	53                   	push   ebx
c0003a30:	89 c3                	mov    ebx,eax
c0003a32:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a35:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a37:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a3a:	83 fa ff             	cmp    edx,0xffffffff
c0003a3d:	74 09                	je     c0003a48 <dir_remove+0x1b>
c0003a3f:	e8 62 f5 ff ff       	call   c0002fa6 <dir_sdi>
c0003a44:	85 c0                	test   eax,eax
c0003a46:	75 41                	jne    c0003a89 <dir_remove+0x5c>
c0003a48:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a4b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a4e:	89 f0                	mov    eax,esi
c0003a50:	e8 d3 e7 ff ff       	call   c0002228 <move_window>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 26                	jne    c0003a7f <dir_remove+0x52>
c0003a59:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a5c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a5f:	75 05                	jne    c0003a66 <dir_remove+0x39>
c0003a61:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a64:	eb 03                	jmp    c0003a69 <dir_remove+0x3c>
c0003a66:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a69:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a6d:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a70:	73 17                	jae    c0003a89 <dir_remove+0x5c>
c0003a72:	31 d2                	xor    edx,edx
c0003a74:	89 d8                	mov    eax,ebx
c0003a76:	e8 83 fa ff ff       	call   c00034fe <dir_next>
c0003a7b:	85 c0                	test   eax,eax
c0003a7d:	74 c9                	je     c0003a48 <dir_remove+0x1b>
c0003a7f:	83 f8 04             	cmp    eax,0x4
c0003a82:	75 05                	jne    c0003a89 <dir_remove+0x5c>
c0003a84:	b8 02 00 00 00       	mov    eax,0x2
c0003a89:	5b                   	pop    ebx
c0003a8a:	5e                   	pop    esi
c0003a8b:	5f                   	pop    edi
c0003a8c:	c3                   	ret    

c0003a8d <create_name>:
c0003a8d:	55                   	push   ebp
c0003a8e:	89 d5                	mov    ebp,edx
c0003a90:	57                   	push   edi
c0003a91:	89 c7                	mov    edi,eax
c0003a93:	56                   	push   esi
c0003a94:	31 f6                	xor    esi,esi
c0003a96:	53                   	push   ebx
c0003a97:	83 ec 3c             	sub    esp,0x3c
c0003a9a:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a9c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003aa0:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aa2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003aa5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003aa9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003aad:	e8 72 e0 ff ff       	call   c0001b24 <tchar2uni>
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 f8 ff             	cmp    eax,0xffffffff
c0003ab7:	75 0a                	jne    c0003ac3 <create_name+0x36>
c0003ab9:	b8 06 00 00 00       	mov    eax,0x6
c0003abe:	e9 9e 02 00 00       	jmp    c0003d61 <create_name+0x2d4>
c0003ac3:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ac8:	76 0c                	jbe    c0003ad6 <create_name+0x49>
c0003aca:	c1 e8 10             	shr    eax,0x10
c0003acd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ad1:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ad5:	46                   	inc    esi
c0003ad6:	66 83 fb 1f          	cmp    bx,0x1f
c0003ada:	76 4f                	jbe    c0003b2b <create_name+0x9e>
c0003adc:	66 83 fb 5c          	cmp    bx,0x5c
c0003ae0:	74 35                	je     c0003b17 <create_name+0x8a>
c0003ae2:	66 83 fb 2f          	cmp    bx,0x2f
c0003ae6:	74 2f                	je     c0003b17 <create_name+0x8a>
c0003ae8:	66 83 fb 7f          	cmp    bx,0x7f
c0003aec:	77 11                	ja     c0003aff <create_name+0x72>
c0003aee:	0f b7 d3             	movzx  edx,bx
c0003af1:	b8 12 83 02 c0       	mov    eax,0xc0028312
c0003af6:	e8 11 e0 ff ff       	call   c0001b0c <chk_chr>
c0003afb:	85 c0                	test   eax,eax
c0003afd:	75 ba                	jne    c0003ab9 <create_name+0x2c>
c0003aff:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b05:	77 b2                	ja     c0003ab9 <create_name+0x2c>
c0003b07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b0b:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b0f:	46                   	inc    esi
c0003b10:	eb 97                	jmp    c0003aa9 <create_name+0x1c>
c0003b12:	40                   	inc    eax
c0003b13:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b1b:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b1d:	80 fa 2f             	cmp    dl,0x2f
c0003b20:	74 f0                	je     c0003b12 <create_name+0x85>
c0003b22:	80 fa 5c             	cmp    dl,0x5c
c0003b25:	74 eb                	je     c0003b12 <create_name+0x85>
c0003b27:	31 db                	xor    ebx,ebx
c0003b29:	eb 02                	jmp    c0003b2d <create_name+0xa0>
c0003b2b:	b3 04                	mov    bl,0x4
c0003b2d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b34:	85 f6                	test   esi,esi
c0003b36:	74 18                	je     c0003b50 <create_name+0xc3>
c0003b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b3c:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b41:	66 83 f8 20          	cmp    ax,0x20
c0003b45:	74 06                	je     c0003b4d <create_name+0xc0>
c0003b47:	66 83 f8 2e          	cmp    ax,0x2e
c0003b4b:	75 03                	jne    c0003b50 <create_name+0xc3>
c0003b4d:	4e                   	dec    esi
c0003b4e:	eb e4                	jmp    c0003b34 <create_name+0xa7>
c0003b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b54:	31 ed                	xor    ebp,ebp
c0003b56:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b5c:	85 f6                	test   esi,esi
c0003b5e:	0f 84 55 ff ff ff    	je     c0003ab9 <create_name+0x2c>
c0003b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b68:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b6b:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b6f:	66 83 f8 20          	cmp    ax,0x20
c0003b73:	75 04                	jne    c0003b79 <create_name+0xec>
c0003b75:	89 d5                	mov    ebp,edx
c0003b77:	eb eb                	jmp    c0003b64 <create_name+0xd7>
c0003b79:	85 ed                	test   ebp,ebp
c0003b7b:	75 06                	jne    c0003b83 <create_name+0xf6>
c0003b7d:	66 83 f8 2e          	cmp    ax,0x2e
c0003b81:	75 08                	jne    c0003b8b <create_name+0xfe>
c0003b83:	83 cb 03             	or     ebx,0x3
c0003b86:	eb 03                	jmp    c0003b8b <create_name+0xfe>
c0003b88:	4e                   	dec    esi
c0003b89:	74 0c                	je     c0003b97 <create_name+0x10a>
c0003b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8f:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b95:	75 f1                	jne    c0003b88 <create_name+0xfb>
c0003b97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b9c:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b9f:	ba 20 00 00 00       	mov    edx,0x20
c0003ba4:	e8 35 df ff ff       	call   c0001ade <mem_set>
c0003ba9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003bb1:	31 c9                	xor    ecx,ecx
c0003bb3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003bb8:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bbb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003bbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003bc3:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bc7:	66 85 ed             	test   bp,bp
c0003bca:	0f 84 30 01 00 00    	je     c0003d00 <create_name+0x273>
c0003bd0:	66 83 fd 20          	cmp    bp,0x20
c0003bd4:	74 10                	je     c0003be6 <create_name+0x159>
c0003bd6:	66 83 fd 2e          	cmp    bp,0x2e
c0003bda:	75 13                	jne    c0003bef <create_name+0x162>
c0003bdc:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be0:	0f 84 6b 01 00 00    	je     c0003d51 <create_name+0x2c4>
c0003be6:	83 cb 03             	or     ebx,0x3
c0003be9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bed:	eb c9                	jmp    c0003bb8 <create_name+0x12b>
c0003bef:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bf3:	73 0b                	jae    c0003c00 <create_name+0x173>
c0003bf5:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bf9:	75 47                	jne    c0003c42 <create_name+0x1b5>
c0003bfb:	e9 51 01 00 00       	jmp    c0003d51 <create_name+0x2c4>
c0003c00:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c05:	75 10                	jne    c0003c17 <create_name+0x18a>
c0003c07:	83 cb 03             	or     ebx,0x3
c0003c0a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c12:	e9 e9 00 00 00       	jmp    c0003d00 <create_name+0x273>
c0003c17:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c1b:	74 0d                	je     c0003c2a <create_name+0x19d>
c0003c1d:	83 cb 03             	or     ebx,0x3
c0003c20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c24:	0f 87 d6 00 00 00    	ja     c0003d00 <create_name+0x273>
c0003c2a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c2f:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003c33:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c3b:	b9 08 00 00 00       	mov    ecx,0x8
c0003c40:	eb a7                	jmp    c0003be9 <create_name+0x15c>
c0003c42:	66 83 fd 7f          	cmp    bp,0x7f
c0003c46:	76 68                	jbe    c0003cb0 <create_name+0x223>
c0003c48:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c4c:	88 da                	mov    dl,bl
c0003c4e:	83 ca 02             	or     edx,0x2
c0003c51:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c55:	50                   	push   eax
c0003c56:	50                   	push   eax
c0003c57:	68 b5 01 00 00       	push   0x1b5
c0003c5c:	55                   	push   ebp
c0003c5d:	e8 48 46 00 00       	call   c00082aa <ff_uni2oem>
c0003c62:	83 c4 10             	add    esp,0x10
c0003c65:	89 c5                	mov    ebp,eax
c0003c67:	a8 80                	test   al,0x80
c0003c69:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c6d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c71:	74 0c                	je     c0003c7f <create_name+0x1f2>
c0003c73:	83 e5 7f             	and    ebp,0x7f
c0003c76:	0f b6 ad 60 82 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd7da0]
c0003c7d:	eb 2a                	jmp    c0003ca9 <create_name+0x21c>
c0003c7f:	66 3d ff 00          	cmp    ax,0xff
c0003c83:	76 24                	jbe    c0003ca9 <create_name+0x21c>
c0003c85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c89:	48                   	dec    eax
c0003c8a:	39 c8                	cmp    eax,ecx
c0003c8c:	77 0c                	ja     c0003c9a <create_name+0x20d>
c0003c8e:	83 cb 03             	or     ebx,0x3
c0003c91:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c95:	e9 4f ff ff ff       	jmp    c0003be9 <create_name+0x15c>
c0003c9a:	89 e8                	mov    eax,ebp
c0003c9c:	88 d3                	mov    bl,dl
c0003c9e:	66 c1 e8 08          	shr    ax,0x8
c0003ca2:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ca6:	41                   	inc    ecx
c0003ca7:	eb 4b                	jmp    c0003cf4 <create_name+0x267>
c0003ca9:	88 d3                	mov    bl,dl
c0003cab:	66 85 ed             	test   bp,bp
c0003cae:	74 19                	je     c0003cc9 <create_name+0x23c>
c0003cb0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cb4:	0f b7 d5             	movzx  edx,bp
c0003cb7:	b8 1b 83 02 c0       	mov    eax,0xc002831b
c0003cbc:	e8 4b de ff ff       	call   c0001b0c <chk_chr>
c0003cc1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cc5:	85 c0                	test   eax,eax
c0003cc7:	74 0a                	je     c0003cd3 <create_name+0x246>
c0003cc9:	83 cb 03             	or     ebx,0x3
c0003ccc:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cd1:	eb 21                	jmp    c0003cf4 <create_name+0x267>
c0003cd3:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cd6:	66 83 f8 19          	cmp    ax,0x19
c0003cda:	77 07                	ja     c0003ce3 <create_name+0x256>
c0003cdc:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ce1:	eb 11                	jmp    c0003cf4 <create_name+0x267>
c0003ce3:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ce6:	66 83 f8 19          	cmp    ax,0x19
c0003cea:	77 08                	ja     c0003cf4 <create_name+0x267>
c0003cec:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cf1:	83 ed 20             	sub    ebp,0x20
c0003cf4:	89 e8                	mov    eax,ebp
c0003cf6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cfa:	41                   	inc    ecx
c0003cfb:	e9 e9 fe ff ff       	jmp    c0003be9 <create_name+0x15c>
c0003d00:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003d04:	75 04                	jne    c0003d0a <create_name+0x27d>
c0003d06:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d0a:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003d0f:	75 05                	jne    c0003d16 <create_name+0x289>
c0003d11:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d16:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d1a:	83 e0 0c             	and    eax,0xc
c0003d1d:	3c 0c                	cmp    al,0xc
c0003d1f:	74 0b                	je     c0003d2c <create_name+0x29f>
c0003d21:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d25:	83 e0 03             	and    eax,0x3
c0003d28:	3c 03                	cmp    al,0x3
c0003d2a:	75 05                	jne    c0003d31 <create_name+0x2a4>
c0003d2c:	83 cb 02             	or     ebx,0x2
c0003d2f:	eb 19                	jmp    c0003d4a <create_name+0x2bd>
c0003d31:	f6 c3 02             	test   bl,0x2
c0003d34:	75 14                	jne    c0003d4a <create_name+0x2bd>
c0003d36:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d3b:	74 03                	je     c0003d40 <create_name+0x2b3>
c0003d3d:	83 cb 10             	or     ebx,0x10
c0003d40:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d45:	74 03                	je     c0003d4a <create_name+0x2bd>
c0003d47:	83 cb 08             	or     ebx,0x8
c0003d4a:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d4d:	31 c0                	xor    eax,eax
c0003d4f:	eb 10                	jmp    c0003d61 <create_name+0x2d4>
c0003d51:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d56:	0f 85 ce fe ff ff    	jne    c0003c2a <create_name+0x19d>
c0003d5c:	e9 a6 fe ff ff       	jmp    c0003c07 <create_name+0x17a>
c0003d61:	83 c4 3c             	add    esp,0x3c
c0003d64:	5b                   	pop    ebx
c0003d65:	5e                   	pop    esi
c0003d66:	5f                   	pop    edi
c0003d67:	5d                   	pop    ebp
c0003d68:	c3                   	ret    

c0003d69 <xname_sum>:
c0003d69:	56                   	push   esi
c0003d6a:	53                   	push   ebx
c0003d6b:	89 c6                	mov    esi,eax
c0003d6d:	51                   	push   ecx
c0003d6e:	31 db                	xor    ebx,ebx
c0003d70:	83 c6 02             	add    esi,0x2
c0003d73:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d77:	66 85 c0             	test   ax,ax
c0003d7a:	74 1f                	je     c0003d9b <xname_sum+0x32>
c0003d7c:	83 ec 0c             	sub    esp,0xc
c0003d7f:	66 d1 cb             	ror    bx,1
c0003d82:	50                   	push   eax
c0003d83:	e8 1e 46 00 00       	call   c00083a6 <ff_wtoupper>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	0f b6 d0             	movzx  edx,al
c0003d8e:	66 c1 e8 08          	shr    ax,0x8
c0003d92:	01 d3                	add    ebx,edx
c0003d94:	66 d1 cb             	ror    bx,1
c0003d97:	01 c3                	add    ebx,eax
c0003d99:	eb d5                	jmp    c0003d70 <xname_sum+0x7>
c0003d9b:	89 d8                	mov    eax,ebx
c0003d9d:	5a                   	pop    edx
c0003d9e:	5b                   	pop    ebx
c0003d9f:	5e                   	pop    esi
c0003da0:	c3                   	ret    

c0003da1 <create_xdir>:
c0003da1:	55                   	push   ebp
c0003da2:	b9 40 00 00 00       	mov    ecx,0x40
c0003da7:	57                   	push   edi
c0003da8:	bd 01 00 00 00       	mov    ebp,0x1
c0003dad:	56                   	push   esi
c0003dae:	31 ff                	xor    edi,edi
c0003db0:	53                   	push   ebx
c0003db1:	be 40 00 00 00       	mov    esi,0x40
c0003db6:	89 c3                	mov    ebx,eax
c0003db8:	83 ec 1c             	sub    esp,0x1c
c0003dbb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003dbf:	31 d2                	xor    edx,edx
c0003dc1:	e8 18 dd ff ff       	call   c0001ade <mem_set>
c0003dc6:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003dc9:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003dcd:	31 c9                	xor    ecx,ecx
c0003dcf:	8d 46 01             	lea    eax,[esi+0x1]
c0003dd2:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dd6:	83 c6 02             	add    esi,0x2
c0003dd9:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ddd:	66 85 ed             	test   bp,bp
c0003de0:	74 12                	je     c0003df4 <create_xdir+0x53>
c0003de2:	0f b6 c1             	movzx  eax,cl
c0003de5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003de9:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003ded:	66 83 fd 01          	cmp    bp,0x1
c0003df1:	80 d9 ff             	sbb    cl,0xff
c0003df4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003df7:	0f b7 d5             	movzx  edx,bp
c0003dfa:	83 c6 02             	add    esi,0x2
c0003dfd:	e8 ba dc ff ff       	call   c0001abc <st_word>
c0003e02:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003e08:	75 d3                	jne    c0003ddd <create_xdir+0x3c>
c0003e0a:	8d 47 01             	lea    eax,[edi+0x1]
c0003e0d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e11:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e15:	0f b6 c1             	movzx  eax,cl
c0003e18:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e1d:	74 07                	je     c0003e26 <create_xdir+0x85>
c0003e1f:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e24:	eb a9                	jmp    c0003dcf <create_xdir+0x2e>
c0003e26:	8d 47 02             	lea    eax,[edi+0x2]
c0003e29:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e2c:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e2f:	89 d0                	mov    eax,edx
c0003e31:	e8 33 ff ff ff       	call   c0003d69 <xname_sum>
c0003e36:	83 c4 1c             	add    esp,0x1c
c0003e39:	0f b7 d0             	movzx  edx,ax
c0003e3c:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e3f:	5b                   	pop    ebx
c0003e40:	5e                   	pop    esi
c0003e41:	5f                   	pop    edi
c0003e42:	5d                   	pop    ebp
c0003e43:	e9 74 dc ff ff       	jmp    c0001abc <st_word>

c0003e48 <cmp_lfn>:
c0003e48:	55                   	push   ebp
c0003e49:	57                   	push   edi
c0003e4a:	89 d7                	mov    edi,edx
c0003e4c:	56                   	push   esi
c0003e4d:	53                   	push   ebx
c0003e4e:	83 ec 1c             	sub    esp,0x1c
c0003e51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e55:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e58:	e8 ed db ff ff       	call   c0001a4a <ld_word>
c0003e5d:	66 85 c0             	test   ax,ax
c0003e60:	74 07                	je     c0003e69 <cmp_lfn+0x21>
c0003e62:	31 c0                	xor    eax,eax
c0003e64:	e9 9a 00 00 00       	jmp    c0003f03 <cmp_lfn+0xbb>
c0003e69:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e6b:	bd 01 00 00 00       	mov    ebp,0x1
c0003e70:	83 e3 3f             	and    ebx,0x3f
c0003e73:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e7b:	4b                   	dec    ebx
c0003e7c:	6b db 0d             	imul   ebx,ebx,0xd
c0003e7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e83:	0f b6 80 e0 82 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7d20]
c0003e8a:	01 f8                	add    eax,edi
c0003e8c:	e8 b9 db ff ff       	call   c0001a4a <ld_word>
c0003e91:	66 85 ed             	test   bp,bp
c0003e94:	89 c6                	mov    esi,eax
c0003e96:	74 3c                	je     c0003ed4 <cmp_lfn+0x8c>
c0003e98:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e9e:	77 c2                	ja     c0003e62 <cmp_lfn+0x1a>
c0003ea0:	83 ec 0c             	sub    esp,0xc
c0003ea3:	0f b7 c0             	movzx  eax,ax
c0003ea6:	50                   	push   eax
c0003ea7:	e8 fa 44 00 00       	call   c00083a6 <ff_wtoupper>
c0003eac:	89 c5                	mov    ebp,eax
c0003eae:	8d 43 01             	lea    eax,[ebx+0x1]
c0003eb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003eb5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003eb9:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003ebd:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ec0:	e8 e1 44 00 00       	call   c00083a6 <ff_wtoupper>
c0003ec5:	83 c4 10             	add    esp,0x10
c0003ec8:	39 c5                	cmp    ebp,eax
c0003eca:	75 96                	jne    c0003e62 <cmp_lfn+0x1a>
c0003ecc:	89 f5                	mov    ebp,esi
c0003ece:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ed2:	eb 04                	jmp    c0003ed8 <cmp_lfn+0x90>
c0003ed4:	66 46                	inc    si
c0003ed6:	75 8a                	jne    c0003e62 <cmp_lfn+0x1a>
c0003ed8:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003edc:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ee1:	75 9c                	jne    c0003e7f <cmp_lfn+0x37>
c0003ee3:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ee6:	74 16                	je     c0003efe <cmp_lfn+0xb6>
c0003ee8:	66 85 ed             	test   bp,bp
c0003eeb:	74 11                	je     c0003efe <cmp_lfn+0xb6>
c0003eed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ef1:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ef6:	0f 94 c0             	sete   al
c0003ef9:	0f b6 c0             	movzx  eax,al
c0003efc:	eb 05                	jmp    c0003f03 <cmp_lfn+0xbb>
c0003efe:	b8 01 00 00 00       	mov    eax,0x1
c0003f03:	83 c4 1c             	add    esp,0x1c
c0003f06:	5b                   	pop    ebx
c0003f07:	5e                   	pop    esi
c0003f08:	5f                   	pop    edi
c0003f09:	5d                   	pop    ebp
c0003f0a:	c3                   	ret    

c0003f0b <dir_find>:
c0003f0b:	55                   	push   ebp
c0003f0c:	31 d2                	xor    edx,edx
c0003f0e:	57                   	push   edi
c0003f0f:	56                   	push   esi
c0003f10:	53                   	push   ebx
c0003f11:	89 c3                	mov    ebx,eax
c0003f13:	83 ec 1c             	sub    esp,0x1c
c0003f16:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f18:	e8 89 f0 ff ff       	call   c0002fa6 <dir_sdi>
c0003f1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f20:	85 c0                	test   eax,eax
c0003f22:	0f 85 9e 01 00 00    	jne    c00040c6 <dir_find+0x1bb>
c0003f28:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f2b:	0f 85 8d 00 00 00    	jne    c0003fbe <dir_find+0xb3>
c0003f31:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f34:	e8 30 fe ff ff       	call   c0003d69 <xname_sum>
c0003f39:	89 c7                	mov    edi,eax
c0003f3b:	31 d2                	xor    edx,edx
c0003f3d:	89 d8                	mov    eax,ebx
c0003f3f:	e8 72 f8 ff ff       	call   c00037b6 <dir_read>
c0003f44:	85 c0                	test   eax,eax
c0003f46:	0f 85 5e 01 00 00    	jne    c00040aa <dir_find+0x19f>
c0003f4c:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f4f:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f52:	e8 f3 da ff ff       	call   c0001a4a <ld_word>
c0003f57:	66 39 f8             	cmp    ax,di
c0003f5a:	75 df                	jne    c0003f3b <dir_find+0x30>
c0003f5c:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f5f:	31 ed                	xor    ebp,ebp
c0003f61:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f65:	ba 40 00 00 00       	mov    edx,0x40
c0003f6a:	89 e9                	mov    ecx,ebp
c0003f6c:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f70:	0f 84 42 01 00 00    	je     c00040b8 <dir_find+0x1ad>
c0003f76:	f6 c2 1f             	test   dl,0x1f
c0003f79:	75 03                	jne    c0003f7e <dir_find+0x73>
c0003f7b:	83 c2 02             	add    edx,0x2
c0003f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f82:	89 d0                	mov    eax,edx
c0003f84:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f87:	e8 be da ff ff       	call   c0001a4a <ld_word>
c0003f8c:	83 ec 0c             	sub    esp,0xc
c0003f8f:	0f b7 c0             	movzx  eax,ax
c0003f92:	50                   	push   eax
c0003f93:	e8 0e 44 00 00       	call   c00083a6 <ff_wtoupper>
c0003f98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f9c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f9f:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003fa3:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fa6:	e8 fb 43 00 00       	call   c00083a6 <ff_wtoupper>
c0003fab:	83 c4 10             	add    esp,0x10
c0003fae:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003fb2:	75 87                	jne    c0003f3b <dir_find+0x30>
c0003fb4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003fb8:	45                   	inc    ebp
c0003fb9:	83 c2 02             	add    edx,0x2
c0003fbc:	eb ac                	jmp    c0003f6a <dir_find+0x5f>
c0003fbe:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fc5:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fca:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fcf:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fd2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fd5:	89 f0                	mov    eax,esi
c0003fd7:	e8 4c e2 ff ff       	call   c0002228 <move_window>
c0003fdc:	85 c0                	test   eax,eax
c0003fde:	0f 85 c6 00 00 00    	jne    c00040aa <dir_find+0x19f>
c0003fe4:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fe7:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fea:	84 c9                	test   cl,cl
c0003fec:	0f 84 bd 00 00 00    	je     c00040af <dir_find+0x1a4>
c0003ff2:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ff5:	88 d0                	mov    al,dl
c0003ff7:	83 e0 3f             	and    eax,0x3f
c0003ffa:	80 f9 e5             	cmp    cl,0xe5
c0003ffd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004000:	0f 84 87 00 00 00    	je     c000408d <dir_find+0x182>
c0004006:	80 e2 08             	and    dl,0x8
c0004009:	74 06                	je     c0004011 <dir_find+0x106>
c000400b:	3c 0f                	cmp    al,0xf
c000400d:	75 7e                	jne    c000408d <dir_find+0x182>
c000400f:	eb 04                	jmp    c0004015 <dir_find+0x10a>
c0004011:	3c 0f                	cmp    al,0xf
c0004013:	75 4c                	jne    c0004061 <dir_find+0x156>
c0004015:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004019:	75 7e                	jne    c0004099 <dir_find+0x18e>
c000401b:	f6 c1 40             	test   cl,0x40
c000401e:	74 12                	je     c0004032 <dir_find+0x127>
c0004020:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004023:	83 e1 bf             	and    ecx,0xffffffbf
c0004026:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000402a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000402d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004030:	eb 06                	jmp    c0004038 <dir_find+0x12d>
c0004032:	89 f8                	mov    eax,edi
c0004034:	38 c8                	cmp    al,cl
c0004036:	75 5c                	jne    c0004094 <dir_find+0x189>
c0004038:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000403c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004041:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004044:	75 53                	jne    c0004099 <dir_find+0x18e>
c0004046:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000404a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000404d:	89 ea                	mov    edx,ebp
c000404f:	e8 f4 fd ff ff       	call   c0003e48 <cmp_lfn>
c0004054:	85 c0                	test   eax,eax
c0004056:	74 41                	je     c0004099 <dir_find+0x18e>
c0004058:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000405c:	8d 79 ff             	lea    edi,[ecx-0x1]
c000405f:	eb 38                	jmp    c0004099 <dir_find+0x18e>
c0004061:	89 f8                	mov    eax,edi
c0004063:	84 c0                	test   al,al
c0004065:	75 0d                	jne    c0004074 <dir_find+0x169>
c0004067:	89 e8                	mov    eax,ebp
c0004069:	e8 98 de ff ff       	call   c0001f06 <sum_sfn>
c000406e:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004072:	74 52                	je     c00040c6 <dir_find+0x1bb>
c0004074:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004078:	75 13                	jne    c000408d <dir_find+0x182>
c000407a:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000407d:	b9 0b 00 00 00       	mov    ecx,0xb
c0004082:	89 e8                	mov    eax,ebp
c0004084:	e8 60 da ff ff       	call   c0001ae9 <mem_cmp>
c0004089:	85 c0                	test   eax,eax
c000408b:	74 39                	je     c00040c6 <dir_find+0x1bb>
c000408d:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004094:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004099:	31 d2                	xor    edx,edx
c000409b:	89 d8                	mov    eax,ebx
c000409d:	e8 5c f4 ff ff       	call   c00034fe <dir_next>
c00040a2:	85 c0                	test   eax,eax
c00040a4:	0f 84 25 ff ff ff    	je     c0003fcf <dir_find+0xc4>
c00040aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040ad:	eb 17                	jmp    c00040c6 <dir_find+0x1bb>
c00040af:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040b6:	eb 0e                	jmp    c00040c6 <dir_find+0x1bb>
c00040b8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040bb:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00040c0:	0f 85 75 fe ff ff    	jne    c0003f3b <dir_find+0x30>
c00040c6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040c9:	83 c4 1c             	add    esp,0x1c
c00040cc:	5b                   	pop    ebx
c00040cd:	5e                   	pop    esi
c00040ce:	5f                   	pop    edi
c00040cf:	5d                   	pop    ebp
c00040d0:	c3                   	ret    

c00040d1 <dir_register>:
c00040d1:	55                   	push   ebp
c00040d2:	57                   	push   edi
c00040d3:	56                   	push   esi
c00040d4:	be 06 00 00 00       	mov    esi,0x6
c00040d9:	53                   	push   ebx
c00040da:	83 ec 6c             	sub    esp,0x6c
c00040dd:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040e1:	0f 85 62 02 00 00    	jne    c0004349 <dir_register+0x278>
c00040e7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040e9:	31 ff                	xor    edi,edi
c00040eb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040ee:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040f3:	74 03                	je     c00040f8 <dir_register+0x27>
c00040f5:	47                   	inc    edi
c00040f6:	eb f6                	jmp    c00040ee <dir_register+0x1d>
c00040f8:	89 c3                	mov    ebx,eax
c00040fa:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040fe:	0f 85 e1 00 00 00    	jne    c00041e5 <dir_register+0x114>
c0004104:	83 c7 0e             	add    edi,0xe
c0004107:	b9 0f 00 00 00       	mov    ecx,0xf
c000410c:	89 f8                	mov    eax,edi
c000410e:	31 d2                	xor    edx,edx
c0004110:	f7 f1                	div    ecx
c0004112:	8d 50 02             	lea    edx,[eax+0x2]
c0004115:	89 c7                	mov    edi,eax
c0004117:	89 d8                	mov    eax,ebx
c0004119:	e8 12 f8 ff ff       	call   c0003930 <dir_alloc>
c000411e:	89 c6                	mov    esi,eax
c0004120:	85 c0                	test   eax,eax
c0004122:	0f 85 21 02 00 00    	jne    c0004349 <dir_register+0x278>
c0004128:	81 c7 01 00 00 08    	add    edi,0x8000001
c000412e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004131:	c1 e7 05             	shl    edi,0x5
c0004134:	29 f8                	sub    eax,edi
c0004136:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004139:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000413c:	a8 04                	test   al,0x4
c000413e:	0f 84 91 00 00 00    	je     c00041d5 <dir_register+0x104>
c0004144:	83 e0 fb             	and    eax,0xfffffffb
c0004147:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000414a:	89 d8                	mov    eax,ebx
c000414c:	e8 25 ec ff ff       	call   c0002d76 <fill_first_frag>
c0004151:	85 c0                	test   eax,eax
c0004153:	0f 85 ee 01 00 00    	jne    c0004347 <dir_register+0x276>
c0004159:	83 c9 ff             	or     ecx,0xffffffff
c000415c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000415f:	89 d8                	mov    eax,ebx
c0004161:	e8 db eb ff ff       	call   c0002d41 <fill_last_frag>
c0004166:	85 c0                	test   eax,eax
c0004168:	0f 85 d9 01 00 00    	jne    c0004347 <dir_register+0x276>
c000416e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004172:	74 61                	je     c00041d5 <dir_register+0x104>
c0004174:	89 da                	mov    edx,ebx
c0004176:	8d 44 24 14          	lea    eax,[esp+0x14]
c000417a:	e8 ea f5 ff ff       	call   c0003769 <load_obj_xdir>
c000417f:	85 c0                	test   eax,eax
c0004181:	0f 85 c0 01 00 00    	jne    c0004347 <dir_register+0x276>
c0004187:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000418b:	31 c9                	xor    ecx,ecx
c000418d:	c1 e2 09             	shl    edx,0x9
c0004190:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004193:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004196:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004199:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000419c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000419f:	83 c0 38             	add    eax,0x38
c00041a2:	e8 1c d9 ff ff       	call   c0001ac3 <st_qword>
c00041a7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041aa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041ad:	83 c0 28             	add    eax,0x28
c00041b0:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041b3:	e8 0b d9 ff ff       	call   c0001ac3 <st_qword>
c00041b8:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041bb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041be:	83 c8 01             	or     eax,0x1
c00041c1:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041c8:	e8 db f7 ff ff       	call   c00039a8 <store_xdir>
c00041cd:	85 c0                	test   eax,eax
c00041cf:	0f 85 72 01 00 00    	jne    c0004347 <dir_register+0x276>
c00041d5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041d8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041db:	e8 c1 fb ff ff       	call   c0003da1 <create_xdir>
c00041e0:	e9 64 01 00 00       	jmp    c0004349 <dir_register+0x278>
c00041e5:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041e8:	b9 0c 00 00 00       	mov    ecx,0xc
c00041ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041f1:	89 c2                	mov    edx,eax
c00041f3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041f7:	e8 cd d8 ff ff       	call   c0001ac9 <mem_cpy>
c00041fc:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004201:	74 58                	je     c000425b <dir_register+0x18a>
c0004203:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004207:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000420f:	83 ec 0c             	sub    esp,0xc
c0004212:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004215:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004219:	8d 54 24 24          	lea    edx,[esp+0x24]
c000421d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004221:	e8 24 dc ff ff       	call   c0001e4a <gen_numname>
c0004226:	89 d8                	mov    eax,ebx
c0004228:	e8 de fc ff ff       	call   c0003f0b <dir_find>
c000422d:	83 c4 10             	add    esp,0x10
c0004230:	89 c6                	mov    esi,eax
c0004232:	85 c0                	test   eax,eax
c0004234:	75 15                	jne    c000424b <dir_register+0x17a>
c0004236:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000423a:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000423f:	75 ce                	jne    c000420f <dir_register+0x13e>
c0004241:	be 07 00 00 00       	mov    esi,0x7
c0004246:	e9 fe 00 00 00       	jmp    c0004349 <dir_register+0x278>
c000424b:	83 f8 04             	cmp    eax,0x4
c000424e:	0f 85 f5 00 00 00    	jne    c0004349 <dir_register+0x278>
c0004254:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004258:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000425b:	b9 01 00 00 00       	mov    ecx,0x1
c0004260:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004265:	74 0f                	je     c0004276 <dir_register+0x1a5>
c0004267:	b9 0d 00 00 00       	mov    ecx,0xd
c000426c:	8d 47 0c             	lea    eax,[edi+0xc]
c000426f:	31 d2                	xor    edx,edx
c0004271:	f7 f1                	div    ecx
c0004273:	8d 48 01             	lea    ecx,[eax+0x1]
c0004276:	89 ca                	mov    edx,ecx
c0004278:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000427c:	89 d8                	mov    eax,ebx
c000427e:	e8 ad f6 ff ff       	call   c0003930 <dir_alloc>
c0004283:	89 c6                	mov    esi,eax
c0004285:	85 c0                	test   eax,eax
c0004287:	0f 85 bc 00 00 00    	jne    c0004349 <dir_register+0x278>
c000428d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004291:	49                   	dec    ecx
c0004292:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004296:	74 6a                	je     c0004302 <dir_register+0x231>
c0004298:	89 c8                	mov    eax,ecx
c000429a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000429d:	c1 e0 05             	shl    eax,0x5
c00042a0:	29 c2                	sub    edx,eax
c00042a2:	89 d8                	mov    eax,ebx
c00042a4:	e8 fd ec ff ff       	call   c0002fa6 <dir_sdi>
c00042a9:	89 c6                	mov    esi,eax
c00042ab:	85 c0                	test   eax,eax
c00042ad:	0f 85 96 00 00 00    	jne    c0004349 <dir_register+0x278>
c00042b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042b7:	e8 4a dc ff ff       	call   c0001f06 <sum_sfn>
c00042bc:	0f b6 f8             	movzx  edi,al
c00042bf:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042c2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042c5:	89 e8                	mov    eax,ebp
c00042c7:	e8 5c df ff ff       	call   c0002228 <move_window>
c00042cc:	89 c6                	mov    esi,eax
c00042ce:	85 c0                	test   eax,eax
c00042d0:	75 77                	jne    c0004349 <dir_register+0x278>
c00042d2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00042d7:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042da:	83 ec 0c             	sub    esp,0xc
c00042dd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042e0:	57                   	push   edi
c00042e1:	e8 e0 da ff ff       	call   c0001dc6 <put_lfn>
c00042e6:	31 d2                	xor    edx,edx
c00042e8:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042ec:	89 d8                	mov    eax,ebx
c00042ee:	e8 0b f2 ff ff       	call   c00034fe <dir_next>
c00042f3:	83 c4 10             	add    esp,0x10
c00042f6:	89 c6                	mov    esi,eax
c00042f8:	85 c0                	test   eax,eax
c00042fa:	75 4d                	jne    c0004349 <dir_register+0x278>
c00042fc:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004300:	75 bd                	jne    c00042bf <dir_register+0x1ee>
c0004302:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004305:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004308:	89 e8                	mov    eax,ebp
c000430a:	e8 19 df ff ff       	call   c0002228 <move_window>
c000430f:	89 c6                	mov    esi,eax
c0004311:	85 c0                	test   eax,eax
c0004313:	75 34                	jne    c0004349 <dir_register+0x278>
c0004315:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004318:	b9 20 00 00 00       	mov    ecx,0x20
c000431d:	31 d2                	xor    edx,edx
c000431f:	e8 ba d7 ff ff       	call   c0001ade <mem_set>
c0004324:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004327:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000432b:	b9 0b 00 00 00       	mov    ecx,0xb
c0004330:	e8 94 d7 ff ff       	call   c0001ac9 <mem_cpy>
c0004335:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004338:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000433b:	83 e0 18             	and    eax,0x18
c000433e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004341:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004345:	eb 02                	jmp    c0004349 <dir_register+0x278>
c0004347:	89 c6                	mov    esi,eax
c0004349:	83 c4 6c             	add    esp,0x6c
c000434c:	89 f0                	mov    eax,esi
c000434e:	5b                   	pop    ebx
c000434f:	5e                   	pop    esi
c0004350:	5f                   	pop    edi
c0004351:	5d                   	pop    ebp
c0004352:	c3                   	ret    

c0004353 <sync_fs>:
c0004353:	56                   	push   esi
c0004354:	53                   	push   ebx
c0004355:	53                   	push   ebx
c0004356:	89 c3                	mov    ebx,eax
c0004358:	e8 37 de ff ff       	call   c0002194 <sync_window>
c000435d:	85 c0                	test   eax,eax
c000435f:	0f 85 b1 00 00 00    	jne    c0004416 <sync_fs+0xc3>
c0004365:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004368:	0f 85 8e 00 00 00    	jne    c00043fc <sync_fs+0xa9>
c000436e:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004372:	0f 85 84 00 00 00    	jne    c00043fc <sync_fs+0xa9>
c0004378:	b9 00 02 00 00       	mov    ecx,0x200
c000437d:	8d 73 54             	lea    esi,[ebx+0x54]
c0004380:	31 d2                	xor    edx,edx
c0004382:	89 f0                	mov    eax,esi
c0004384:	e8 55 d7 ff ff       	call   c0001ade <mem_set>
c0004389:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000438f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004394:	e8 23 d7 ff ff       	call   c0001abc <st_word>
c0004399:	ba 52 52 61 41       	mov    edx,0x41615252
c000439e:	89 f0                	mov    eax,esi
c00043a0:	e8 1b d7 ff ff       	call   c0001ac0 <st_dword>
c00043a5:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00043ab:	ba 72 72 41 61       	mov    edx,0x61417272
c00043b0:	e8 0b d7 ff ff       	call   c0001ac0 <st_dword>
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043be:	e8 fd d6 ff ff       	call   c0001ac0 <st_dword>
c00043c3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043c6:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043cc:	e8 ef d6 ff ff       	call   c0001ac0 <st_dword>
c00043d1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043d4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043d7:	83 c0 01             	add    eax,0x1
c00043da:	83 d2 00             	adc    edx,0x0
c00043dd:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043e0:	83 ec 0c             	sub    esp,0xc
c00043e3:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043e6:	6a 01                	push   0x1
c00043e8:	52                   	push   edx
c00043e9:	50                   	push   eax
c00043ea:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043ee:	56                   	push   esi
c00043ef:	50                   	push   eax
c00043f0:	e8 20 d6 ff ff       	call   c0001a15 <disk_write>
c00043f5:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043f9:	83 c4 20             	add    esp,0x20
c00043fc:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004400:	51                   	push   ecx
c0004401:	6a 00                	push   0x0
c0004403:	6a 00                	push   0x0
c0004405:	50                   	push   eax
c0004406:	e8 20 d6 ff ff       	call   c0001a2b <disk_ioctl>
c000440b:	83 c4 10             	add    esp,0x10
c000440e:	85 c0                	test   eax,eax
c0004410:	0f 95 c0             	setne  al
c0004413:	0f b6 c0             	movzx  eax,al
c0004416:	5a                   	pop    edx
c0004417:	5b                   	pop    ebx
c0004418:	5e                   	pop    esi
c0004419:	c3                   	ret    

c000441a <create_partition>:
c000441a:	55                   	push   ebp
c000441b:	0f b6 c0             	movzx  eax,al
c000441e:	57                   	push   edi
c000441f:	56                   	push   esi
c0004420:	53                   	push   ebx
c0004421:	83 ec 60             	sub    esp,0x60
c0004424:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004428:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000442c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004430:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004434:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004438:	50                   	push   eax
c0004439:	6a 01                	push   0x1
c000443b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000443f:	e8 e7 d5 ff ff       	call   c0001a2b <disk_ioctl>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	85 c0                	test   eax,eax
c0004449:	74 0a                	je     c0004455 <create_partition+0x3b>
c000444b:	b8 01 00 00 00       	mov    eax,0x1
c0004450:	e9 67 05 00 00       	jmp    c00049bc <create_partition+0x5a2>
c0004455:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004459:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000445d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004461:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004465:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000446a:	0f 86 ed 03 00 00    	jbe    c000485d <create_partition+0x443>
c0004470:	83 c0 df             	add    eax,0xffffffdf
c0004473:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000447b:	83 d2 ff             	adc    edx,0xffffffff
c000447e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004482:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004486:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000448a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000448e:	83 c0 bd             	add    eax,0xffffffbd
c0004491:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004498:	83 d2 ff             	adc    edx,0xffffffff
c000449b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000449f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00044a3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044ab:	be 22 00 00 00       	mov    esi,0x22
c00044b0:	31 ff                	xor    edi,edi
c00044b2:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044ba:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044c2:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044ca:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044ce:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044d4:	75 0e                	jne    c00044e4 <create_partition+0xca>
c00044d6:	b9 00 02 00 00       	mov    ecx,0x200
c00044db:	31 d2                	xor    edx,edx
c00044dd:	89 d8                	mov    eax,ebx
c00044df:	e8 fa d5 ff ff       	call   c0001ade <mem_set>
c00044e4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044e8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044f0:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044f3:	0f 84 23 01 00 00    	je     c000461c <create_partition+0x202>
c00044f9:	89 f0                	mov    eax,esi
c00044fb:	89 fa                	mov    edx,edi
c00044fd:	05 ff 07 00 00       	add    eax,0x7ff
c0004502:	83 d2 00             	adc    edx,0x0
c0004505:	89 c1                	mov    ecx,eax
c0004507:	89 d7                	mov    edi,edx
c0004509:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000450f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004513:	89 ce                	mov    esi,ecx
c0004515:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004519:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000451d:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004521:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004524:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004528:	89 04 24             	mov    DWORD PTR [esp],eax
c000452b:	b8 64 00 00 00       	mov    eax,0x64
c0004530:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004533:	b8 00 00 00 00       	mov    eax,0x0
c0004538:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000453c:	72 41                	jb     c000457f <create_partition+0x165>
c000453e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004546:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000454a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000454f:	01 c1                	add    ecx,eax
c0004551:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004555:	f7 24 24             	mul    DWORD PTR [esp]
c0004558:	6a 00                	push   0x0
c000455a:	01 ca                	add    edx,ecx
c000455c:	6a 64                	push   0x64
c000455e:	52                   	push   edx
c000455f:	50                   	push   eax
c0004560:	e8 37 13 02 00       	call   c002589c <__udivdi3>
c0004565:	83 c4 10             	add    esp,0x10
c0004568:	05 ff 07 00 00       	add    eax,0x7ff
c000456d:	83 d2 00             	adc    edx,0x0
c0004570:	89 c1                	mov    ecx,eax
c0004572:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004576:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000457c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000457f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004582:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004586:	01 f0                	add    eax,esi
c0004588:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000458c:	11 fa                	adc    edx,edi
c000458e:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004592:	19 d1                	sbb    ecx,edx
c0004594:	73 2e                	jae    c00045c4 <create_partition+0x1aa>
c0004596:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000459a:	89 f8                	mov    eax,edi
c000459c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00045a3:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00045a7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045af:	73 6b                	jae    c000461c <create_partition+0x202>
c00045b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045b9:	29 f0                	sub    eax,esi
c00045bb:	19 fa                	sbb    edx,edi
c00045bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00045c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045c8:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045cb:	74 4f                	je     c000461c <create_partition+0x202>
c00045cd:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045d0:	b9 10 00 00 00       	mov    ecx,0x10
c00045d5:	ba f0 82 02 c0       	mov    edx,0xc00282f0
c00045da:	e8 ea d4 ff ff       	call   c0001ac9 <mem_cpy>
c00045df:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045e3:	b9 10 00 00 00       	mov    ecx,0x10
c00045e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045ec:	e8 2c db ff ff       	call   c000211d <make_rand>
c00045f1:	89 f2                	mov    edx,esi
c00045f3:	89 f9                	mov    ecx,edi
c00045f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045f9:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045fd:	e8 c1 d4 ff ff       	call   c0001ac3 <st_qword>
c0004602:	03 34 24             	add    esi,DWORD PTR [esp]
c0004605:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004609:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000460d:	89 f2                	mov    edx,esi
c000460f:	89 f9                	mov    ecx,edi
c0004611:	83 c2 ff             	add    edx,0xffffffff
c0004614:	83 d1 ff             	adc    ecx,0xffffffff
c0004617:	e8 a7 d4 ff ff       	call   c0001ac3 <st_qword>
c000461c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004620:	83 e8 80             	sub    eax,0xffffff80
c0004623:	89 c5                	mov    ebp,eax
c0004625:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004629:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000462f:	75 6b                	jne    c000469c <create_partition+0x282>
c0004631:	45                   	inc    ebp
c0004632:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004636:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000463b:	e8 39 da ff ff       	call   c0002079 <crc32>
c0004640:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004646:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000464a:	75 e5                	jne    c0004631 <create_partition+0x217>
c000464c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004650:	31 d2                	xor    edx,edx
c0004652:	83 ec 0c             	sub    esp,0xc
c0004655:	c1 ed 09             	shr    ebp,0x9
c0004658:	6a 01                	push   0x1
c000465a:	8d 45 02             	lea    eax,[ebp+0x2]
c000465d:	52                   	push   edx
c000465e:	50                   	push   eax
c000465f:	53                   	push   ebx
c0004660:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004664:	e8 ac d3 ff ff       	call   c0001a15 <disk_write>
c0004669:	83 c4 20             	add    esp,0x20
c000466c:	85 c0                	test   eax,eax
c000466e:	0f 85 d7 fd ff ff    	jne    c000444b <create_partition+0x31>
c0004674:	83 ec 0c             	sub    esp,0xc
c0004677:	31 d2                	xor    edx,edx
c0004679:	6a 01                	push   0x1
c000467b:	89 e8                	mov    eax,ebp
c000467d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004681:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004685:	52                   	push   edx
c0004686:	50                   	push   eax
c0004687:	53                   	push   ebx
c0004688:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000468c:	e8 84 d3 ff ff       	call   c0001a15 <disk_write>
c0004691:	83 c4 20             	add    esp,0x20
c0004694:	85 c0                	test   eax,eax
c0004696:	0f 85 af fd ff ff    	jne    c000444b <create_partition+0x31>
c000469c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00046a4:	3d 00 40 00 00       	cmp    eax,0x4000
c00046a9:	74 0d                	je     c00046b8 <create_partition+0x29e>
c00046ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046b3:	e9 12 fe ff ff       	jmp    c00044ca <create_partition+0xb0>
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	b9 00 02 00 00       	mov    ecx,0x200
c00046bf:	89 d8                	mov    eax,ebx
c00046c1:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046c4:	e8 15 d4 ff ff       	call   c0001ade <mem_set>
c00046c9:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046cc:	b9 10 00 00 00       	mov    ecx,0x10
c00046d1:	ba e0 81 02 c0       	mov    edx,0xc00281e0
c00046d6:	89 d8                	mov    eax,ebx
c00046d8:	e8 ec d3 ff ff       	call   c0001ac9 <mem_cpy>
c00046dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046e1:	8d 43 58             	lea    eax,[ebx+0x58]
c00046e4:	f7 d2                	not    edx
c00046e6:	e8 d5 d3 ff ff       	call   c0001ac0 <st_dword>
c00046eb:	8d 43 18             	lea    eax,[ebx+0x18]
c00046ee:	31 c9                	xor    ecx,ecx
c00046f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00046f3:	ba 01 00 00 00       	mov    edx,0x1
c00046f8:	e8 c6 d3 ff ff       	call   c0001ac3 <st_qword>
c00046fd:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004701:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004705:	83 c2 ff             	add    edx,0xffffffff
c0004708:	89 e8                	mov    eax,ebp
c000470a:	83 d1 ff             	adc    ecx,0xffffffff
c000470d:	e8 b1 d3 ff ff       	call   c0001ac3 <st_qword>
c0004712:	31 c9                	xor    ecx,ecx
c0004714:	8d 43 28             	lea    eax,[ebx+0x28]
c0004717:	ba 22 00 00 00       	mov    edx,0x22
c000471c:	e8 a2 d3 ff ff       	call   c0001ac3 <st_qword>
c0004721:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004725:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004729:	83 c2 de             	add    edx,0xffffffde
c000472c:	8d 43 30             	lea    eax,[ebx+0x30]
c000472f:	83 d1 ff             	adc    ecx,0xffffffff
c0004732:	31 f6                	xor    esi,esi
c0004734:	e8 8a d3 ff ff       	call   c0001ac3 <st_qword>
c0004739:	8d 43 54             	lea    eax,[ebx+0x54]
c000473c:	ba 80 00 00 00       	mov    edx,0x80
c0004741:	e8 7a d3 ff ff       	call   c0001ac0 <st_dword>
c0004746:	8d 43 50             	lea    eax,[ebx+0x50]
c0004749:	ba 80 00 00 00       	mov    edx,0x80
c000474e:	e8 6d d3 ff ff       	call   c0001ac0 <st_dword>
c0004753:	ba 02 00 00 00       	mov    edx,0x2
c0004758:	89 f8                	mov    eax,edi
c000475a:	e8 61 d3 ff ff       	call   c0001ac0 <st_dword>
c000475f:	8d 53 38             	lea    edx,[ebx+0x38]
c0004762:	b9 10 00 00 00       	mov    ecx,0x10
c0004767:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000476b:	e8 ad d9 ff ff       	call   c000211d <make_rand>
c0004770:	83 c8 ff             	or     eax,0xffffffff
c0004773:	46                   	inc    esi
c0004774:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004779:	e8 fb d8 ff ff       	call   c0002079 <crc32>
c000477e:	83 fe 5c             	cmp    esi,0x5c
c0004781:	75 f0                	jne    c0004773 <create_partition+0x359>
c0004783:	f7 d0                	not    eax
c0004785:	8d 73 10             	lea    esi,[ebx+0x10]
c0004788:	89 c2                	mov    edx,eax
c000478a:	89 f0                	mov    eax,esi
c000478c:	e8 2f d3 ff ff       	call   c0001ac0 <st_dword>
c0004791:	83 ec 0c             	sub    esp,0xc
c0004794:	6a 01                	push   0x1
c0004796:	6a 00                	push   0x0
c0004798:	6a 01                	push   0x1
c000479a:	53                   	push   ebx
c000479b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479f:	e8 71 d2 ff ff       	call   c0001a15 <disk_write>
c00047a4:	83 c4 20             	add    esp,0x20
c00047a7:	85 c0                	test   eax,eax
c00047a9:	0f 85 9c fc ff ff    	jne    c000444b <create_partition+0x31>
c00047af:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047b3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047b7:	83 c2 ff             	add    edx,0xffffffff
c00047ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bd:	83 d1 ff             	adc    ecx,0xffffffff
c00047c0:	e8 fe d2 ff ff       	call   c0001ac3 <st_qword>
c00047c5:	ba 01 00 00 00       	mov    edx,0x1
c00047ca:	31 c9                	xor    ecx,ecx
c00047cc:	89 e8                	mov    eax,ebp
c00047ce:	e8 f0 d2 ff ff       	call   c0001ac3 <st_qword>
c00047d3:	89 f8                	mov    eax,edi
c00047d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047d9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047dd:	31 ff                	xor    edi,edi
c00047df:	e8 df d2 ff ff       	call   c0001ac3 <st_qword>
c00047e4:	89 f0                	mov    eax,esi
c00047e6:	31 d2                	xor    edx,edx
c00047e8:	e8 d3 d2 ff ff       	call   c0001ac0 <st_dword>
c00047ed:	83 c8 ff             	or     eax,0xffffffff
c00047f0:	47                   	inc    edi
c00047f1:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047f6:	e8 7e d8 ff ff       	call   c0002079 <crc32>
c00047fb:	83 ff 5c             	cmp    edi,0x5c
c00047fe:	75 f0                	jne    c00047f0 <create_partition+0x3d6>
c0004800:	f7 d0                	not    eax
c0004802:	89 c2                	mov    edx,eax
c0004804:	89 f0                	mov    eax,esi
c0004806:	e8 b5 d2 ff ff       	call   c0001ac0 <st_dword>
c000480b:	83 ec 0c             	sub    esp,0xc
c000480e:	6a 01                	push   0x1
c0004810:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004814:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004818:	83 c0 ff             	add    eax,0xffffffff
c000481b:	83 d2 ff             	adc    edx,0xffffffff
c000481e:	52                   	push   edx
c000481f:	50                   	push   eax
c0004820:	53                   	push   ebx
c0004821:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004825:	e8 eb d1 ff ff       	call   c0001a15 <disk_write>
c000482a:	83 c4 20             	add    esp,0x20
c000482d:	85 c0                	test   eax,eax
c000482f:	0f 85 16 fc ff ff    	jne    c000444b <create_partition+0x31>
c0004835:	31 d2                	xor    edx,edx
c0004837:	89 d8                	mov    eax,ebx
c0004839:	b9 00 02 00 00       	mov    ecx,0x200
c000483e:	e8 9b d2 ff ff       	call   c0001ade <mem_set>
c0004843:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004849:	b9 10 00 00 00       	mov    ecx,0x10
c000484e:	ba f0 81 02 c0       	mov    edx,0xc00281f0
c0004853:	e8 71 d2 ff ff       	call   c0001ac9 <mem_cpy>
c0004858:	e9 21 01 00 00       	jmp    c000497e <create_partition+0x564>
c000485d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004861:	b9 05 00 00 00       	mov    ecx,0x5
c0004866:	89 04 24             	mov    DWORD PTR [esp],eax
c0004869:	bf 08 00 00 00       	mov    edi,0x8
c000486e:	89 f8                	mov    eax,edi
c0004870:	31 d2                	xor    edx,edx
c0004872:	0f b6 f0             	movzx  esi,al
c0004875:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004878:	f7 f6                	div    esi
c000487a:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c000487f:	76 0a                	jbe    c000488b <create_partition+0x471>
c0004881:	d1 e7                	shl    edi,1
c0004883:	49                   	dec    ecx
c0004884:	75 e8                	jne    c000486e <create_partition+0x454>
c0004886:	bf ff ff ff ff       	mov    edi,0xffffffff
c000488b:	b9 00 02 00 00       	mov    ecx,0x200
c0004890:	31 d2                	xor    edx,edx
c0004892:	89 d8                	mov    eax,ebx
c0004894:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c000489a:	e8 3f d2 ff ff       	call   c0001ade <mem_set>
c000489f:	b9 64 00 00 00       	mov    ecx,0x64
c00048a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048a7:	31 d2                	xor    edx,edx
c00048a9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00048b1:	f7 f1                	div    ecx
c00048b3:	b9 3f 00 00 00       	mov    ecx,0x3f
c00048b8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048bc:	89 f8                	mov    eax,edi
c00048be:	0f b6 c0             	movzx  eax,al
c00048c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00048c5:	e9 80 00 00 00       	jmp    c000494a <create_partition+0x530>
c00048ca:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048cd:	29 cf                	sub    edi,ecx
c00048cf:	89 ca                	mov    edx,ecx
c00048d1:	89 f0                	mov    eax,esi
c00048d3:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048d8:	e8 e3 d1 ff ff       	call   c0001ac0 <st_dword>
c00048dd:	8d 46 04             	lea    eax,[esi+0x4]
c00048e0:	89 fa                	mov    edx,edi
c00048e2:	83 c6 10             	add    esi,0x10
c00048e5:	e8 d6 d1 ff ff       	call   c0001ac0 <st_dword>
c00048ea:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048ee:	31 d2                	xor    edx,edx
c00048f0:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048f3:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048f7:	89 c8                	mov    eax,ecx
c00048f9:	01 f9                	add    ecx,edi
c00048fb:	f7 f5                	div    ebp
c00048fd:	89 d5                	mov    ebp,edx
c00048ff:	31 d2                	xor    edx,edx
c0004901:	45                   	inc    ebp
c0004902:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004906:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004909:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c000490c:	89 c2                	mov    edx,eax
c000490e:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004911:	c1 ea 02             	shr    edx,0x2
c0004914:	83 e2 c0             	and    edx,0xffffffc0
c0004917:	09 ea                	or     edx,ebp
c0004919:	bd 3f 00 00 00       	mov    ebp,0x3f
c000491e:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004921:	31 d2                	xor    edx,edx
c0004923:	f7 f5                	div    ebp
c0004925:	89 d7                	mov    edi,edx
c0004927:	31 d2                	xor    edx,edx
c0004929:	47                   	inc    edi
c000492a:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000492e:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004931:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004934:	89 c5                	mov    ebp,eax
c0004936:	c1 ed 02             	shr    ebp,0x2
c0004939:	83 e5 c0             	and    ebp,0xffffffc0
c000493c:	09 ef                	or     edi,ebp
c000493e:	89 fa                	mov    edx,edi
c0004940:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004943:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004948:	74 34                	je     c000497e <create_partition+0x564>
c000494a:	85 c9                	test   ecx,ecx
c000494c:	74 30                	je     c000497e <create_partition+0x564>
c000494e:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004951:	76 2b                	jbe    c000497e <create_partition+0x564>
c0004953:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004957:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000495b:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c000495e:	83 ff 64             	cmp    edi,0x64
c0004961:	76 4b                	jbe    c00049ae <create_partition+0x594>
c0004963:	89 f8                	mov    eax,edi
c0004965:	01 c8                	add    eax,ecx
c0004967:	0f 82 5d ff ff ff    	jb     c00048ca <create_partition+0x4b0>
c000496d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004970:	0f 87 54 ff ff ff    	ja     c00048ca <create_partition+0x4b0>
c0004976:	85 ff                	test   edi,edi
c0004978:	0f 85 51 ff ff ff    	jne    c00048cf <create_partition+0x4b5>
c000497e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004984:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004989:	e8 2e d1 ff ff       	call   c0001abc <st_word>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	6a 01                	push   0x1
c0004993:	6a 00                	push   0x0
c0004995:	6a 00                	push   0x0
c0004997:	53                   	push   ebx
c0004998:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000499c:	e8 74 d0 ff ff       	call   c0001a15 <disk_write>
c00049a1:	83 c4 20             	add    esp,0x20
c00049a4:	85 c0                	test   eax,eax
c00049a6:	0f 95 c0             	setne  al
c00049a9:	0f b6 c0             	movzx  eax,al
c00049ac:	eb 0e                	jmp    c00049bc <create_partition+0x5a2>
c00049ae:	74 07                	je     c00049b7 <create_partition+0x59d>
c00049b0:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00049b5:	eb ac                	jmp    c0004963 <create_partition+0x549>
c00049b7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049ba:	eb a7                	jmp    c0004963 <create_partition+0x549>
c00049bc:	83 c4 5c             	add    esp,0x5c
c00049bf:	5b                   	pop    ebx
c00049c0:	5e                   	pop    esi
c00049c1:	5f                   	pop    edi
c00049c2:	5d                   	pop    ebp
c00049c3:	c3                   	ret    

c00049c4 <get_fileinfo>:
c00049c4:	55                   	push   ebp
c00049c5:	57                   	push   edi
c00049c6:	56                   	push   esi
c00049c7:	53                   	push   ebx
c00049c8:	83 ec 1c             	sub    esp,0x1c
c00049cb:	8b 30                	mov    esi,DWORD PTR [eax]
c00049cd:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049d1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049d5:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049d8:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049db:	0f 84 dc 01 00 00    	je     c0004bbd <get_fileinfo+0x1f9>
c00049e1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049e4:	75 0f                	jne    c00049f5 <get_fileinfo+0x31>
c00049e6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049e9:	83 c4 1c             	add    esp,0x1c
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	5d                   	pop    ebp
c00049f0:	e9 58 d5 ff ff       	jmp    c0001f4d <get_xfileinfo>
c00049f5:	89 d3                	mov    ebx,edx
c00049f7:	89 c6                	mov    esi,eax
c00049f9:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049fd:	74 6a                	je     c0004a69 <get_fileinfo+0xa5>
c00049ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004a07:	31 ed                	xor    ebp,ebp
c0004a09:	31 ff                	xor    edi,edi
c0004a0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a0f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a13:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a16:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a1a:	66 85 d2             	test   dx,dx
c0004a1d:	74 3e                	je     c0004a5d <get_fileinfo+0x99>
c0004a1f:	66 85 ed             	test   bp,bp
c0004a22:	75 0c                	jne    c0004a30 <get_fileinfo+0x6c>
c0004a24:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a2a:	66 3d ff 07          	cmp    ax,0x7ff
c0004a2e:	76 22                	jbe    c0004a52 <get_fileinfo+0x8e>
c0004a30:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a35:	89 e8                	mov    eax,ebp
c0004a37:	29 f9                	sub    ecx,edi
c0004a39:	c1 e0 10             	shl    eax,0x10
c0004a3c:	09 d0                	or     eax,edx
c0004a3e:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a42:	e8 a3 d1 ff ff       	call   c0001bea <put_utf>
c0004a47:	84 c0                	test   al,al
c0004a49:	74 10                	je     c0004a5b <get_fileinfo+0x97>
c0004a4b:	0f b6 c0             	movzx  eax,al
c0004a4e:	31 d2                	xor    edx,edx
c0004a50:	01 c7                	add    edi,eax
c0004a52:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a57:	89 d5                	mov    ebp,edx
c0004a59:	eb b0                	jmp    c0004a0b <get_fileinfo+0x47>
c0004a5b:	31 ff                	xor    edi,edi
c0004a5d:	66 85 ed             	test   bp,bp
c0004a60:	74 02                	je     c0004a64 <get_fileinfo+0xa0>
c0004a62:	31 ff                	xor    edi,edi
c0004a64:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a69:	31 ff                	xor    edi,edi
c0004a6b:	31 c9                	xor    ecx,ecx
c0004a6d:	83 f9 0a             	cmp    ecx,0xa
c0004a70:	0f 87 ad 00 00 00    	ja     c0004b23 <get_fileinfo+0x15f>
c0004a76:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a79:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a7c:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a80:	66 83 fa 20          	cmp    dx,0x20
c0004a84:	0f 84 92 00 00 00    	je     c0004b1c <get_fileinfo+0x158>
c0004a8a:	66 83 fa 05          	cmp    dx,0x5
c0004a8e:	75 05                	jne    c0004a95 <get_fileinfo+0xd1>
c0004a90:	ba e5 00 00 00       	mov    edx,0xe5
c0004a95:	83 ff 0b             	cmp    edi,0xb
c0004a98:	77 0b                	ja     c0004aa5 <get_fileinfo+0xe1>
c0004a9a:	83 fd 09             	cmp    ebp,0x9
c0004a9d:	75 06                	jne    c0004aa5 <get_fileinfo+0xe1>
c0004a9f:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004aa4:	47                   	inc    edi
c0004aa5:	0f b7 c2             	movzx  eax,dx
c0004aa8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004aac:	e8 6d d0 ff ff       	call   c0001b1e <dbc_1st>
c0004ab1:	85 c0                	test   eax,eax
c0004ab3:	74 2f                	je     c0004ae4 <get_fileinfo+0x120>
c0004ab5:	83 fd 08             	cmp    ebp,0x8
c0004ab8:	74 2a                	je     c0004ae4 <get_fileinfo+0x120>
c0004aba:	83 fd 0b             	cmp    ebp,0xb
c0004abd:	74 25                	je     c0004ae4 <get_fileinfo+0x120>
c0004abf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac2:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ac6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004aca:	e8 52 d0 ff ff       	call   c0001b21 <dbc_2nd>
c0004acf:	85 c0                	test   eax,eax
c0004ad1:	74 11                	je     c0004ae4 <get_fileinfo+0x120>
c0004ad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ad7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004adc:	c1 e2 08             	shl    edx,0x8
c0004adf:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004ae2:	09 c2                	or     edx,eax
c0004ae4:	0f b7 d2             	movzx  edx,dx
c0004ae7:	50                   	push   eax
c0004ae8:	50                   	push   eax
c0004ae9:	68 b5 01 00 00       	push   0x1b5
c0004aee:	52                   	push   edx
c0004aef:	e8 46 38 00 00       	call   c000833a <ff_oem2uni>
c0004af4:	83 c4 10             	add    esp,0x10
c0004af7:	66 85 c0             	test   ax,ax
c0004afa:	75 04                	jne    c0004b00 <get_fileinfo+0x13c>
c0004afc:	31 ff                	xor    edi,edi
c0004afe:	eb 23                	jmp    c0004b23 <get_fileinfo+0x15f>
c0004b00:	b9 0c 00 00 00       	mov    ecx,0xc
c0004b05:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004b09:	29 f9                	sub    ecx,edi
c0004b0b:	0f b7 c0             	movzx  eax,ax
c0004b0e:	e8 d7 d0 ff ff       	call   c0001bea <put_utf>
c0004b13:	84 c0                	test   al,al
c0004b15:	74 e5                	je     c0004afc <get_fileinfo+0x138>
c0004b17:	0f b6 c0             	movzx  eax,al
c0004b1a:	01 c7                	add    edi,eax
c0004b1c:	89 e9                	mov    ecx,ebp
c0004b1e:	e9 4a ff ff ff       	jmp    c0004a6d <get_fileinfo+0xa9>
c0004b23:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b28:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b2c:	75 54                	jne    c0004b82 <get_fileinfo+0x1be>
c0004b2e:	85 ff                	test   edi,edi
c0004b30:	75 0b                	jne    c0004b3d <get_fileinfo+0x179>
c0004b32:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b36:	ba 01 00 00 00       	mov    edx,0x1
c0004b3b:	eb 33                	jmp    c0004b70 <get_fileinfo+0x1ac>
c0004b3d:	b1 08                	mov    cl,0x8
c0004b3f:	31 d2                	xor    edx,edx
c0004b41:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b47:	84 c0                	test   al,al
c0004b49:	74 25                	je     c0004b70 <get_fileinfo+0x1ac>
c0004b4b:	66 83 f8 2e          	cmp    ax,0x2e
c0004b4f:	74 16                	je     c0004b67 <get_fileinfo+0x1a3>
c0004b51:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b54:	66 83 ff 19          	cmp    di,0x19
c0004b58:	77 0f                	ja     c0004b69 <get_fileinfo+0x1a5>
c0004b5a:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b5d:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b60:	74 07                	je     c0004b69 <get_fileinfo+0x1a5>
c0004b62:	83 c0 20             	add    eax,0x20
c0004b65:	eb 02                	jmp    c0004b69 <get_fileinfo+0x1a5>
c0004b67:	b1 10                	mov    cl,0x10
c0004b69:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b6d:	42                   	inc    edx
c0004b6e:	eb d1                	jmp    c0004b41 <get_fileinfo+0x17d>
c0004b70:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b75:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b78:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b7c:	75 04                	jne    c0004b82 <get_fileinfo+0x1be>
c0004b7e:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b82:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b85:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b88:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8e:	83 c0 1c             	add    eax,0x1c
c0004b91:	e8 c1 ce ff ff       	call   c0001a57 <ld_dword>
c0004b96:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b9d:	89 03                	mov    DWORD PTR [ebx],eax
c0004b9f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ba2:	83 c0 16             	add    eax,0x16
c0004ba5:	e8 a0 ce ff ff       	call   c0001a4a <ld_word>
c0004baa:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004bae:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bb1:	83 c0 18             	add    eax,0x18
c0004bb4:	e8 91 ce ff ff       	call   c0001a4a <ld_word>
c0004bb9:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bbd:	83 c4 1c             	add    esp,0x1c
c0004bc0:	5b                   	pop    ebx
c0004bc1:	5e                   	pop    esi
c0004bc2:	5f                   	pop    edi
c0004bc3:	5d                   	pop    ebp
c0004bc4:	c3                   	ret    

c0004bc5 <ld_clust.isra.0>:
c0004bc5:	56                   	push   esi
c0004bc6:	89 c6                	mov    esi,eax
c0004bc8:	53                   	push   ebx
c0004bc9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bcc:	89 d3                	mov    ebx,edx
c0004bce:	e8 77 ce ff ff       	call   c0001a4a <ld_word>
c0004bd3:	0f b7 c8             	movzx  ecx,ax
c0004bd6:	89 f0                	mov    eax,esi
c0004bd8:	3c 03                	cmp    al,0x3
c0004bda:	75 0d                	jne    c0004be9 <ld_clust.isra.0+0x24>
c0004bdc:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bdf:	e8 66 ce ff ff       	call   c0001a4a <ld_word>
c0004be4:	c1 e0 10             	shl    eax,0x10
c0004be7:	09 c1                	or     ecx,eax
c0004be9:	89 c8                	mov    eax,ecx
c0004beb:	5b                   	pop    ebx
c0004bec:	5e                   	pop    esi
c0004bed:	c3                   	ret    

c0004bee <st_clust.isra.1>:
c0004bee:	56                   	push   esi
c0004bef:	89 c6                	mov    esi,eax
c0004bf1:	53                   	push   ebx
c0004bf2:	89 d3                	mov    ebx,edx
c0004bf4:	0f b7 d1             	movzx  edx,cx
c0004bf7:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bfa:	e8 bd ce ff ff       	call   c0001abc <st_word>
c0004bff:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004c02:	75 0f                	jne    c0004c13 <st_clust.isra.1+0x25>
c0004c04:	c1 e9 10             	shr    ecx,0x10
c0004c07:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c0a:	89 ca                	mov    edx,ecx
c0004c0c:	5b                   	pop    ebx
c0004c0d:	5e                   	pop    esi
c0004c0e:	e9 a9 ce ff ff       	jmp    c0001abc <st_word>
c0004c13:	5b                   	pop    ebx
c0004c14:	5e                   	pop    esi
c0004c15:	c3                   	ret    

c0004c16 <init_alloc_info.isra.2>:
c0004c16:	56                   	push   esi
c0004c17:	53                   	push   ebx
c0004c18:	89 c6                	mov    esi,eax
c0004c1a:	89 d3                	mov    ebx,edx
c0004c1c:	51                   	push   ecx
c0004c1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c1f:	83 c0 34             	add    eax,0x34
c0004c22:	e8 30 ce ff ff       	call   c0001a57 <ld_dword>
c0004c27:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c2a:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c2c:	83 c0 38             	add    eax,0x38
c0004c2f:	e8 3b ce ff ff       	call   c0001a6f <ld_qword>
c0004c34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c37:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c3a:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c3c:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c3f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c46:	83 e0 02             	and    eax,0x2
c0004c49:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c4c:	5b                   	pop    ebx
c0004c4d:	5b                   	pop    ebx
c0004c4e:	5e                   	pop    esi
c0004c4f:	c3                   	ret    

c0004c50 <follow_path>:
c0004c50:	56                   	push   esi
c0004c51:	53                   	push   ebx
c0004c52:	89 c3                	mov    ebx,eax
c0004c54:	83 ec 14             	sub    esp,0x14
c0004c57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c5b:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c61:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c63:	80 fa 5c             	cmp    dl,0x5c
c0004c66:	75 07                	jne    c0004c6f <follow_path+0x1f>
c0004c68:	40                   	inc    eax
c0004c69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6d:	eb ee                	jmp    c0004c5d <follow_path+0xd>
c0004c6f:	80 fa 2f             	cmp    dl,0x2f
c0004c72:	74 f4                	je     c0004c68 <follow_path+0x18>
c0004c74:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c7b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c82:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c85:	77 52                	ja     c0004cd9 <follow_path+0x89>
c0004c87:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c8b:	31 d2                	xor    edx,edx
c0004c8d:	89 d8                	mov    eax,ebx
c0004c8f:	e8 12 e3 ff ff       	call   c0002fa6 <dir_sdi>
c0004c94:	eb 7c                	jmp    c0004d12 <follow_path+0xc2>
c0004c96:	89 d8                	mov    eax,ebx
c0004c98:	e8 6e f2 ff ff       	call   c0003f0b <dir_find>
c0004c9d:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ca0:	85 c0                	test   eax,eax
c0004ca2:	75 46                	jne    c0004cea <follow_path+0x9a>
c0004ca4:	80 e2 04             	and    dl,0x4
c0004ca7:	75 69                	jne    c0004d12 <follow_path+0xc2>
c0004ca9:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004cad:	74 5e                	je     c0004d0d <follow_path+0xbd>
c0004caf:	8a 06                	mov    al,BYTE PTR [esi]
c0004cb1:	3c 04                	cmp    al,0x4
c0004cb3:	75 41                	jne    c0004cf6 <follow_path+0xa6>
c0004cb5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cb8:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004cbc:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004cbf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cc2:	30 c0                	xor    al,al
c0004cc4:	09 d0                	or     eax,edx
c0004cc6:	89 da                	mov    edx,ebx
c0004cc8:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ccb:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cce:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cd1:	8d 46 10             	lea    eax,[esi+0x10]
c0004cd4:	e8 3d ff ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0004cd9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cdd:	89 d8                	mov    eax,ebx
c0004cdf:	e8 a9 ed ff ff       	call   c0003a8d <create_name>
c0004ce4:	85 c0                	test   eax,eax
c0004ce6:	74 ae                	je     c0004c96 <follow_path+0x46>
c0004ce8:	eb 28                	jmp    c0004d12 <follow_path+0xc2>
c0004cea:	83 f8 04             	cmp    eax,0x4
c0004ced:	75 23                	jne    c0004d12 <follow_path+0xc2>
c0004cef:	80 e2 04             	and    dl,0x4
c0004cf2:	74 19                	je     c0004d0d <follow_path+0xbd>
c0004cf4:	eb 1c                	jmp    c0004d12 <follow_path+0xc2>
c0004cf6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cf9:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cff:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004d03:	e8 bd fe ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0004d08:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d0b:	eb cc                	jmp    c0004cd9 <follow_path+0x89>
c0004d0d:	b8 05 00 00 00       	mov    eax,0x5
c0004d12:	83 c4 14             	add    esp,0x14
c0004d15:	5b                   	pop    ebx
c0004d16:	5e                   	pop    esi
c0004d17:	c3                   	ret    

c0004d18 <f_mount>:
c0004d18:	53                   	push   ebx
c0004d19:	83 ec 18             	sub    esp,0x18
c0004d1c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d20:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d28:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d2c:	e8 fb d2 ff ff       	call   c000202c <get_ldnumber>
c0004d31:	89 c2                	mov    edx,eax
c0004d33:	b8 0b 00 00 00       	mov    eax,0xb
c0004d38:	85 d2                	test   edx,edx
c0004d3a:	78 39                	js     c0004d75 <f_mount+0x5d>
c0004d3c:	8b 04 95 80 d0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2f80]
c0004d43:	85 c0                	test   eax,eax
c0004d45:	74 03                	je     c0004d4a <f_mount+0x32>
c0004d47:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d4e:	85 c0                	test   eax,eax
c0004d50:	74 03                	je     c0004d55 <f_mount+0x3d>
c0004d52:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d59:	89 04 95 80 d0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2f80],eax
c0004d60:	31 c0                	xor    eax,eax
c0004d62:	84 db                	test   bl,bl
c0004d64:	74 0f                	je     c0004d75 <f_mount+0x5d>
c0004d66:	31 c9                	xor    ecx,ecx
c0004d68:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d6c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d70:	e8 65 d7 ff ff       	call   c00024da <mount_volume>
c0004d75:	83 c4 18             	add    esp,0x18
c0004d78:	5b                   	pop    ebx
c0004d79:	c3                   	ret    

c0004d7a <f_open>:
c0004d7a:	55                   	push   ebp
c0004d7b:	bd 09 00 00 00       	mov    ebp,0x9
c0004d80:	57                   	push   edi
c0004d81:	56                   	push   esi
c0004d82:	53                   	push   ebx
c0004d83:	83 ec 7c             	sub    esp,0x7c
c0004d86:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d8d:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d94:	85 db                	test   ebx,ebx
c0004d96:	0f 84 10 04 00 00    	je     c00051ac <f_open+0x432>
c0004d9c:	89 fe                	mov    esi,edi
c0004d9e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004da2:	83 e6 3f             	and    esi,0x3f
c0004da5:	89 f0                	mov    eax,esi
c0004da7:	0f b6 c8             	movzx  ecx,al
c0004daa:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004db1:	e8 24 d7 ff ff       	call   c00024da <mount_volume>
c0004db6:	89 c5                	mov    ebp,eax
c0004db8:	85 c0                	test   eax,eax
c0004dba:	0f 85 e6 03 00 00    	jne    c00051a6 <f_open+0x42c>
c0004dc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dc4:	bd 11 00 00 00       	mov    ebp,0x11
c0004dc9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	68 60 04 00 00       	push   0x460
c0004dd5:	e8 a3 34 00 00       	call   c000827d <ff_memalloc>
c0004dda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004de6:	0f 84 c0 03 00 00    	je     c00051ac <f_open+0x432>
c0004dec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004df0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004df4:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dfa:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dfd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004e00:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004e07:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e0b:	e8 40 fe ff ff       	call   c0004c50 <follow_path>
c0004e10:	89 c5                	mov    ebp,eax
c0004e12:	85 c0                	test   eax,eax
c0004e14:	75 0c                	jne    c0004e22 <f_open+0xa8>
c0004e16:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e1b:	79 05                	jns    c0004e22 <f_open+0xa8>
c0004e1d:	bd 06 00 00 00       	mov    ebp,0x6
c0004e22:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e28:	0f 84 84 01 00 00    	je     c0004fb2 <f_open+0x238>
c0004e2e:	85 ed                	test   ebp,ebp
c0004e30:	74 20                	je     c0004e52 <f_open+0xd8>
c0004e32:	83 fd 04             	cmp    ebp,0x4
c0004e35:	0f 85 58 03 00 00    	jne    c0005193 <f_open+0x419>
c0004e3b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e3f:	83 ce 08             	or     esi,0x8
c0004e42:	e8 8a f2 ff ff       	call   c00040d1 <dir_register>
c0004e47:	89 c5                	mov    ebp,eax
c0004e49:	85 c0                	test   eax,eax
c0004e4b:	74 2f                	je     c0004e7c <f_open+0x102>
c0004e4d:	e9 41 03 00 00       	jmp    c0005193 <f_open+0x419>
c0004e52:	bd 07 00 00 00       	mov    ebp,0x7
c0004e57:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e5c:	0f 85 31 03 00 00    	jne    c0005193 <f_open+0x419>
c0004e62:	bd 08 00 00 00       	mov    ebp,0x8
c0004e67:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e6d:	0f 85 20 03 00 00    	jne    c0005193 <f_open+0x419>
c0004e73:	83 e7 08             	and    edi,0x8
c0004e76:	0f 84 65 01 00 00    	je     c0004fe1 <f_open+0x267>
c0004e7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e80:	8a 02                	mov    al,BYTE PTR [edx]
c0004e82:	3c 04                	cmp    al,0x4
c0004e84:	0f 85 97 00 00 00    	jne    c0004f21 <f_open+0x1a7>
c0004e8a:	8d 42 10             	lea    eax,[edx+0x10]
c0004e8d:	89 13                	mov    DWORD PTR [ebx],edx
c0004e8f:	89 da                	mov    edx,ebx
c0004e91:	e8 80 fd ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0004e96:	31 d2                	xor    edx,edx
c0004e98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e9c:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004ea1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ea4:	83 c0 02             	add    eax,0x2
c0004ea7:	e8 32 cc ff ff       	call   c0001ade <mem_set>
c0004eac:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004eb1:	31 d2                	xor    edx,edx
c0004eb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eba:	83 c0 26             	add    eax,0x26
c0004ebd:	e8 1c cc ff ff       	call   c0001ade <mem_set>
c0004ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004ec9:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004ecd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ed2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ed5:	83 c0 08             	add    eax,0x8
c0004ed8:	e8 e3 cb ff ff       	call   c0001ac0 <st_dword>
c0004edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ee4:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ee8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eec:	e8 b7 ea ff ff       	call   c00039a8 <store_xdir>
c0004ef1:	89 c5                	mov    ebp,eax
c0004ef3:	85 c0                	test   eax,eax
c0004ef5:	0f 85 98 02 00 00    	jne    c0005193 <f_open+0x419>
c0004efb:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004efe:	85 d2                	test   edx,edx
c0004f00:	0f 84 db 00 00 00    	je     c0004fe1 <f_open+0x267>
c0004f06:	31 c9                	xor    ecx,ecx
c0004f08:	89 d8                	mov    eax,ebx
c0004f0a:	e8 8e e3 ff ff       	call   c000329d <remove_chain>
c0004f0f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f13:	89 c5                	mov    ebp,eax
c0004f15:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f18:	48                   	dec    eax
c0004f19:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f1c:	e9 b8 00 00 00       	jmp    c0004fd9 <f_open+0x25f>
c0004f21:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f25:	89 ea                	mov    edx,ebp
c0004f27:	e8 99 fc ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0004f2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f31:	89 c7                	mov    edi,eax
c0004f33:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f36:	e8 85 cb ff ff       	call   c0001ac0 <st_dword>
c0004f3b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f3f:	31 c9                	xor    ecx,ecx
c0004f41:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f49:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4d:	e8 9c fc ff ff       	call   c0004bee <st_clust.isra.1>
c0004f52:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f56:	31 d2                	xor    edx,edx
c0004f58:	83 c0 1c             	add    eax,0x1c
c0004f5b:	e8 60 cb ff ff       	call   c0001ac0 <st_dword>
c0004f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f64:	85 ff                	test   edi,edi
c0004f66:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f6a:	74 75                	je     c0004fe1 <f_open+0x267>
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	31 c9                	xor    ecx,ecx
c0004f72:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f75:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f80:	89 fa                	mov    edx,edi
c0004f82:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f86:	e8 12 e3 ff ff       	call   c000329d <remove_chain>
c0004f8b:	89 c5                	mov    ebp,eax
c0004f8d:	85 c0                	test   eax,eax
c0004f8f:	0f 85 fe 01 00 00    	jne    c0005193 <f_open+0x419>
c0004f95:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f99:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	4f                   	dec    edi
c0004fa2:	e8 81 d2 ff ff       	call   c0002228 <move_window>
c0004fa7:	89 c5                	mov    ebp,eax
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fb0:	eb 27                	jmp    c0004fd9 <f_open+0x25f>
c0004fb2:	85 ed                	test   ebp,ebp
c0004fb4:	0f 85 d9 01 00 00    	jne    c0005193 <f_open+0x419>
c0004fba:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fbe:	bd 04 00 00 00       	mov    ebp,0x4
c0004fc3:	a8 10                	test   al,0x10
c0004fc5:	0f 85 c8 01 00 00    	jne    c0005193 <f_open+0x419>
c0004fcb:	83 e7 02             	and    edi,0x2
c0004fce:	74 11                	je     c0004fe1 <f_open+0x267>
c0004fd0:	bd 07 00 00 00       	mov    ebp,0x7
c0004fd5:	a8 01                	test   al,0x1
c0004fd7:	eb 02                	jmp    c0004fdb <f_open+0x261>
c0004fd9:	85 ed                	test   ebp,ebp
c0004fdb:	0f 85 b2 01 00 00    	jne    c0005193 <f_open+0x419>
c0004fe1:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fe7:	74 03                	je     c0004fec <f_open+0x272>
c0004fe9:	83 ce 40             	or     esi,0x40
c0004fec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ff0:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004ff3:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004ff6:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004ff9:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004ffc:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005000:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005003:	8a 02                	mov    al,BYTE PTR [edx]
c0005005:	3c 04                	cmp    al,0x4
c0005007:	75 2a                	jne    c0005033 <f_open+0x2b9>
c0005009:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000500d:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005012:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005015:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005019:	30 c0                	xor    al,al
c000501b:	09 c8                	or     eax,ecx
c000501d:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005020:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005024:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005027:	8d 42 10             	lea    eax,[edx+0x10]
c000502a:	89 da                	mov    edx,ebx
c000502c:	e8 e5 fb ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0005031:	eb 1c                	jmp    c000504f <f_open+0x2d5>
c0005033:	89 fa                	mov    edx,edi
c0005035:	e8 8b fb ff ff       	call   c0004bc5 <ld_clust.isra.0>
c000503a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000503d:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005040:	e8 12 ca ff ff       	call   c0001a57 <ld_dword>
c0005045:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000504c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000504f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005053:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000505a:	89 03                	mov    DWORD PTR [ebx],eax
c000505c:	31 d2                	xor    edx,edx
c000505e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005062:	b9 00 02 00 00       	mov    ecx,0x200
c0005067:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000506b:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000506f:	89 f0                	mov    eax,esi
c0005071:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005078:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000507b:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005082:	8d 43 50             	lea    eax,[ebx+0x50]
c0005085:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000508c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005093:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005097:	e8 42 ca ff ff       	call   c0001ade <mem_set>
c000509c:	83 e6 20             	and    esi,0x20
c000509f:	75 07                	jne    c00050a8 <f_open+0x32e>
c00050a1:	31 ed                	xor    ebp,ebp
c00050a3:	e9 eb 00 00 00       	jmp    c0005193 <f_open+0x419>
c00050a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050ab:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050ba:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050be:	74 e1                	je     c00050a1 <f_open+0x327>
c00050c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050c8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050cb:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050d5:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050d9:	31 ff                	xor    edi,edi
c00050db:	c1 e5 09             	shl    ebp,0x9
c00050de:	89 ee                	mov    esi,ebp
c00050e0:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050e4:	89 f8                	mov    eax,edi
c00050e6:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050ea:	73 22                	jae    c000510e <f_open+0x394>
c00050ec:	89 d8                	mov    eax,ebx
c00050ee:	e8 bd dc ff ff       	call   c0002db0 <get_fat>
c00050f3:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050f7:	89 c2                	mov    edx,eax
c00050f9:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050fd:	83 f8 01             	cmp    eax,0x1
c0005100:	76 10                	jbe    c0005112 <f_open+0x398>
c0005102:	83 f8 ff             	cmp    eax,0xffffffff
c0005105:	75 d9                	jne    c00050e0 <f_open+0x366>
c0005107:	bd 01 00 00 00       	mov    ebp,0x1
c000510c:	eb 09                	jmp    c0005117 <f_open+0x39d>
c000510e:	31 ed                	xor    ebp,ebp
c0005110:	eb 05                	jmp    c0005117 <f_open+0x39d>
c0005112:	bd 02 00 00 00       	mov    ebp,0x2
c0005117:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000511a:	85 ed                	test   ebp,ebp
c000511c:	75 75                	jne    c0005193 <f_open+0x419>
c000511e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005122:	25 ff 01 00 00       	and    eax,0x1ff
c0005127:	0f 84 74 ff ff ff    	je     c00050a1 <f_open+0x327>
c000512d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005131:	bd 02 00 00 00       	mov    ebp,0x2
c0005136:	89 c8                	mov    eax,ecx
c0005138:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000513c:	e8 a2 cb ff ff       	call   c0001ce3 <clst2sect>
c0005141:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005145:	89 d7                	mov    edi,edx
c0005147:	09 c7                	or     edi,eax
c0005149:	74 48                	je     c0005193 <f_open+0x419>
c000514b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000514f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005153:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000515b:	0f ac fe 09          	shrd   esi,edi,0x9
c000515f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005163:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005167:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000516a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000516e:	83 ec 0c             	sub    esp,0xc
c0005171:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005174:	6a 01                	push   0x1
c0005176:	52                   	push   edx
c0005177:	50                   	push   eax
c0005178:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000517c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005180:	50                   	push   eax
c0005181:	e8 79 c8 ff ff       	call   c00019ff <disk_read>
c0005186:	83 c4 20             	add    esp,0x20
c0005189:	85 c0                	test   eax,eax
c000518b:	0f 95 c0             	setne  al
c000518e:	0f b6 c0             	movzx  eax,al
c0005191:	89 c5                	mov    ebp,eax
c0005193:	83 ec 0c             	sub    esp,0xc
c0005196:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000519a:	e8 f4 30 00 00       	call   c0008293 <ff_memfree>
c000519f:	83 c4 10             	add    esp,0x10
c00051a2:	85 ed                	test   ebp,ebp
c00051a4:	74 06                	je     c00051ac <f_open+0x432>
c00051a6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051ac:	83 c4 7c             	add    esp,0x7c
c00051af:	89 e8                	mov    eax,ebp
c00051b1:	5b                   	pop    ebx
c00051b2:	5e                   	pop    esi
c00051b3:	5f                   	pop    edi
c00051b4:	5d                   	pop    ebp
c00051b5:	c3                   	ret    

c00051b6 <f_read>:
c00051b6:	55                   	push   ebp
c00051b7:	57                   	push   edi
c00051b8:	56                   	push   esi
c00051b9:	53                   	push   ebx
c00051ba:	83 ec 2c             	sub    esp,0x2c
c00051bd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051c1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051cb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051cf:	89 d8                	mov    eax,ebx
c00051d1:	e8 77 cf ff ff       	call   c000214d <validate>
c00051d6:	89 c5                	mov    ebp,eax
c00051d8:	85 c0                	test   eax,eax
c00051da:	0f 85 4c 02 00 00    	jne    c000542c <f_read+0x276>
c00051e0:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051e4:	85 ed                	test   ebp,ebp
c00051e6:	0f 85 40 02 00 00    	jne    c000542c <f_read+0x276>
c00051ec:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051f0:	0f 84 31 02 00 00    	je     c0005427 <f_read+0x271>
c00051f6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051f9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051fc:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051ff:	bf 00 00 00 00       	mov    edi,0x0
c0005204:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005207:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000520b:	89 d1                	mov    ecx,edx
c000520d:	19 f9                	sbb    ecx,edi
c000520f:	0f 83 cf 00 00 00    	jae    c00052e4 <f_read+0x12e>
c0005215:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005219:	e9 c6 00 00 00       	jmp    c00052e4 <f_read+0x12e>
c000521e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005221:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005224:	89 d0                	mov    eax,edx
c0005226:	25 ff 01 00 00       	and    eax,0x1ff
c000522b:	0f 85 c9 01 00 00    	jne    c00053fa <f_read+0x244>
c0005231:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005235:	89 d6                	mov    esi,edx
c0005237:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000523b:	89 cf                	mov    edi,ecx
c000523d:	48                   	dec    eax
c000523e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005242:	21 f0                	and    eax,esi
c0005244:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005248:	0f 84 a6 00 00 00    	je     c00052f4 <f_read+0x13e>
c000524e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005252:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005255:	89 c8                	mov    eax,ecx
c0005257:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000525a:	e8 84 ca ff ff       	call   c0001ce3 <clst2sect>
c000525f:	89 d7                	mov    edi,edx
c0005261:	09 c7                	or     edi,eax
c0005263:	0f 84 b4 00 00 00    	je     c000531d <f_read+0x167>
c0005269:	31 ff                	xor    edi,edi
c000526b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000526f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005272:	01 c6                	add    esi,eax
c0005274:	11 d7                	adc    edi,edx
c0005276:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000527e:	0f 86 fd 00 00 00    	jbe    c0005381 <f_read+0x1cb>
c0005284:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005288:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000528c:	c1 e8 09             	shr    eax,0x9
c000528f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005292:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005296:	03 14 24             	add    edx,DWORD PTR [esp]
c0005299:	39 c2                	cmp    edx,eax
c000529b:	76 07                	jbe    c00052a4 <f_read+0xee>
c000529d:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00052a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052ab:	57                   	push   edi
c00052ac:	56                   	push   esi
c00052ad:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052b1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052b5:	50                   	push   eax
c00052b6:	e8 44 c7 ff ff       	call   c00019ff <disk_read>
c00052bb:	83 c4 20             	add    esp,0x20
c00052be:	85 c0                	test   eax,eax
c00052c0:	75 6e                	jne    c0005330 <f_read+0x17a>
c00052c2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052c6:	78 7e                	js     c0005346 <f_read+0x190>
c00052c8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052cb:	c1 e6 09             	shl    esi,0x9
c00052ce:	31 ff                	xor    edi,edi
c00052d0:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d8:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052dc:	01 30                	add    DWORD PTR [eax],esi
c00052de:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052e1:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052e4:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052e9:	0f 85 2f ff ff ff    	jne    c000521e <f_read+0x68>
c00052ef:	e9 38 01 00 00       	jmp    c000542c <f_read+0x276>
c00052f4:	89 c8                	mov    eax,ecx
c00052f6:	09 d0                	or     eax,edx
c00052f8:	75 05                	jne    c00052ff <f_read+0x149>
c00052fa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052fd:	eb 19                	jmp    c0005318 <f_read+0x162>
c00052ff:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005303:	74 09                	je     c000530e <f_read+0x158>
c0005305:	89 d8                	mov    eax,ebx
c0005307:	e8 f8 c9 ff ff       	call   c0001d04 <clmt_clust>
c000530c:	eb 0a                	jmp    c0005318 <f_read+0x162>
c000530e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005311:	89 d8                	mov    eax,ebx
c0005313:	e8 98 da ff ff       	call   c0002db0 <get_fat>
c0005318:	83 f8 01             	cmp    eax,0x1
c000531b:	77 0e                	ja     c000532b <f_read+0x175>
c000531d:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005321:	bd 02 00 00 00       	mov    ebp,0x2
c0005326:	e9 01 01 00 00       	jmp    c000542c <f_read+0x276>
c000532b:	83 f8 ff             	cmp    eax,0xffffffff
c000532e:	75 0e                	jne    c000533e <f_read+0x188>
c0005330:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005334:	bd 01 00 00 00       	mov    ebp,0x1
c0005339:	e9 ee 00 00 00       	jmp    c000542c <f_read+0x276>
c000533e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005341:	e9 08 ff ff ff       	jmp    c000524e <f_read+0x98>
c0005346:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005349:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534c:	29 f0                	sub    eax,esi
c000534e:	19 fa                	sbb    edx,edi
c0005350:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005353:	89 d7                	mov    edi,edx
c0005355:	ba 00 00 00 00       	mov    edx,0x0
c000535a:	89 f9                	mov    ecx,edi
c000535c:	19 d1                	sbb    ecx,edx
c000535e:	0f 83 64 ff ff ff    	jae    c00052c8 <f_read+0x112>
c0005364:	89 c7                	mov    edi,eax
c0005366:	8d 53 50             	lea    edx,[ebx+0x50]
c0005369:	c1 e7 09             	shl    edi,0x9
c000536c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005370:	b9 00 02 00 00       	mov    ecx,0x200
c0005375:	01 f8                	add    eax,edi
c0005377:	e8 4d c7 ff ff       	call   c0001ac9 <mem_cpy>
c000537c:	e9 47 ff ff ff       	jmp    c00052c8 <f_read+0x112>
c0005381:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005384:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005387:	89 04 24             	mov    DWORD PTR [esp],eax
c000538a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000538e:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005392:	75 05                	jne    c0005399 <f_read+0x1e3>
c0005394:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005397:	74 5b                	je     c00053f4 <f_read+0x23e>
c0005399:	8d 43 50             	lea    eax,[ebx+0x50]
c000539c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053a4:	79 2a                	jns    c00053d0 <f_read+0x21a>
c00053a6:	83 ec 0c             	sub    esp,0xc
c00053a9:	6a 01                	push   0x1
c00053ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053b3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053bb:	50                   	push   eax
c00053bc:	e8 54 c6 ff ff       	call   c0001a15 <disk_write>
c00053c1:	83 c4 20             	add    esp,0x20
c00053c4:	85 c0                	test   eax,eax
c00053c6:	0f 85 64 ff ff ff    	jne    c0005330 <f_read+0x17a>
c00053cc:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053d0:	83 ec 0c             	sub    esp,0xc
c00053d3:	6a 01                	push   0x1
c00053d5:	57                   	push   edi
c00053d6:	56                   	push   esi
c00053d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053df:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053e3:	50                   	push   eax
c00053e4:	e8 16 c6 ff ff       	call   c00019ff <disk_read>
c00053e9:	83 c4 20             	add    esp,0x20
c00053ec:	85 c0                	test   eax,eax
c00053ee:	0f 85 3c ff ff ff    	jne    c0005330 <f_read+0x17a>
c00053f4:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053f7:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053fa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053fd:	ba 00 02 00 00       	mov    edx,0x200
c0005402:	25 ff 01 00 00       	and    eax,0x1ff
c0005407:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000540b:	29 c2                	sub    edx,eax
c000540d:	39 d6                	cmp    esi,edx
c000540f:	76 02                	jbe    c0005413 <f_read+0x25d>
c0005411:	89 d6                	mov    esi,edx
c0005413:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005417:	89 f1                	mov    ecx,esi
c0005419:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000541d:	e8 a7 c6 ff ff       	call   c0001ac9 <mem_cpy>
c0005422:	e9 a7 fe ff ff       	jmp    c00052ce <f_read+0x118>
c0005427:	bd 07 00 00 00       	mov    ebp,0x7
c000542c:	83 c4 2c             	add    esp,0x2c
c000542f:	89 e8                	mov    eax,ebp
c0005431:	5b                   	pop    ebx
c0005432:	5e                   	pop    esi
c0005433:	5f                   	pop    edi
c0005434:	5d                   	pop    ebp
c0005435:	c3                   	ret    

c0005436 <f_write>:
c0005436:	55                   	push   ebp
c0005437:	57                   	push   edi
c0005438:	56                   	push   esi
c0005439:	53                   	push   ebx
c000543a:	83 ec 2c             	sub    esp,0x2c
c000543d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005441:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005445:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000544b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000544f:	89 d8                	mov    eax,ebx
c0005451:	e8 f7 cc ff ff       	call   c000214d <validate>
c0005456:	89 c5                	mov    ebp,eax
c0005458:	85 c0                	test   eax,eax
c000545a:	0f 85 86 02 00 00    	jne    c00056e6 <f_write+0x2b0>
c0005460:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005464:	85 ed                	test   ebp,ebp
c0005466:	0f 85 7a 02 00 00    	jne    c00056e6 <f_write+0x2b0>
c000546c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005470:	0f 84 6b 02 00 00    	je     c00056e1 <f_write+0x2ab>
c0005476:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000547d:	0f 84 43 01 00 00    	je     c00055c6 <f_write+0x190>
c0005483:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005486:	89 c1                	mov    ecx,eax
c0005488:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000548c:	0f 83 34 01 00 00    	jae    c00055c6 <f_write+0x190>
c0005492:	f7 d0                	not    eax
c0005494:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005498:	e9 29 01 00 00       	jmp    c00055c6 <f_write+0x190>
c000549d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00054a0:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00054a3:	89 d0                	mov    eax,edx
c00054a5:	25 ff 01 00 00       	and    eax,0x1ff
c00054aa:	0f 85 00 02 00 00    	jne    c00056b0 <f_write+0x27a>
c00054b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054b4:	89 d6                	mov    esi,edx
c00054b6:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054ba:	89 cf                	mov    edi,ecx
c00054bc:	48                   	dec    eax
c00054bd:	0f ac fe 09          	shrd   esi,edi,0x9
c00054c1:	21 f0                	and    eax,esi
c00054c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054c7:	0f 84 06 01 00 00    	je     c00055d3 <f_write+0x19d>
c00054cd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054d1:	0f 88 6e 01 00 00    	js     c0005645 <f_write+0x20f>
c00054d7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054db:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054de:	89 c8                	mov    eax,ecx
c00054e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054e4:	e8 fa c7 ff ff       	call   c0001ce3 <clst2sect>
c00054e9:	89 d1                	mov    ecx,edx
c00054eb:	09 c1                	or     ecx,eax
c00054ed:	0f 84 1c 01 00 00    	je     c000560f <f_write+0x1d9>
c00054f3:	31 ff                	xor    edi,edi
c00054f5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054fd:	01 c6                	add    esi,eax
c00054ff:	11 d7                	adc    edi,edx
c0005501:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005509:	0f 86 63 01 00 00    	jbe    c0005672 <f_write+0x23c>
c000550f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005513:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005517:	c1 e8 09             	shr    eax,0x9
c000551a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000551e:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005522:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005526:	39 c2                	cmp    edx,eax
c0005528:	76 08                	jbe    c0005532 <f_write+0xfc>
c000552a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000552e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005532:	83 ec 0c             	sub    esp,0xc
c0005535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005539:	57                   	push   edi
c000553a:	56                   	push   esi
c000553b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000553f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005543:	50                   	push   eax
c0005544:	e8 cc c4 ff ff       	call   c0001a15 <disk_write>
c0005549:	83 c4 20             	add    esp,0x20
c000554c:	85 c0                	test   eax,eax
c000554e:	0f 85 ce 00 00 00    	jne    c0005622 <f_write+0x1ec>
c0005554:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005557:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000555a:	29 f0                	sub    eax,esi
c000555c:	19 fa                	sbb    edx,edi
c000555e:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005562:	89 d7                	mov    edi,edx
c0005564:	ba 00 00 00 00       	mov    edx,0x0
c0005569:	89 f9                	mov    ecx,edi
c000556b:	19 d1                	sbb    ecx,edx
c000556d:	73 1c                	jae    c000558b <f_write+0x155>
c000556f:	89 c7                	mov    edi,eax
c0005571:	b9 00 02 00 00       	mov    ecx,0x200
c0005576:	c1 e7 09             	shl    edi,0x9
c0005579:	8d 43 50             	lea    eax,[ebx+0x50]
c000557c:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005580:	89 fa                	mov    edx,edi
c0005582:	e8 42 c5 ff ff       	call   c0001ac9 <mem_cpy>
c0005587:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000558b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000558f:	c1 e6 09             	shl    esi,0x9
c0005592:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005596:	31 ff                	xor    edi,edi
c0005598:	01 30                	add    DWORD PTR [eax],esi
c000559a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000559e:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00055a2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055a5:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00055a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055ab:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055ae:	89 c1                	mov    ecx,eax
c00055b0:	39 f2                	cmp    edx,esi
c00055b2:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055b5:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055b8:	19 f9                	sbb    ecx,edi
c00055ba:	73 04                	jae    c00055c0 <f_write+0x18a>
c00055bc:	89 f2                	mov    edx,esi
c00055be:	89 f8                	mov    eax,edi
c00055c0:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055c3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055c6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055cb:	0f 85 cc fe ff ff    	jne    c000549d <f_write+0x67>
c00055d1:	eb 2e                	jmp    c0005601 <f_write+0x1cb>
c00055d3:	89 c8                	mov    eax,ecx
c00055d5:	09 d0                	or     eax,edx
c00055d7:	75 0b                	jne    c00055e4 <f_write+0x1ae>
c00055d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055dc:	31 d2                	xor    edx,edx
c00055de:	85 c0                	test   eax,eax
c00055e0:	75 28                	jne    c000560a <f_write+0x1d4>
c00055e2:	eb 12                	jmp    c00055f6 <f_write+0x1c0>
c00055e4:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055e8:	74 09                	je     c00055f3 <f_write+0x1bd>
c00055ea:	89 d8                	mov    eax,ebx
c00055ec:	e8 13 c7 ff ff       	call   c0001d04 <clmt_clust>
c00055f1:	eb 0a                	jmp    c00055fd <f_write+0x1c7>
c00055f3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055f6:	89 d8                	mov    eax,ebx
c00055f8:	e8 a1 da ff ff       	call   c000309e <create_chain>
c00055fd:	85 c0                	test   eax,eax
c00055ff:	75 09                	jne    c000560a <f_write+0x1d4>
c0005601:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005605:	e9 dc 00 00 00       	jmp    c00056e6 <f_write+0x2b0>
c000560a:	83 f8 01             	cmp    eax,0x1
c000560d:	75 0e                	jne    c000561d <f_write+0x1e7>
c000560f:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005613:	bd 02 00 00 00       	mov    ebp,0x2
c0005618:	e9 c9 00 00 00       	jmp    c00056e6 <f_write+0x2b0>
c000561d:	83 f8 ff             	cmp    eax,0xffffffff
c0005620:	75 0e                	jne    c0005630 <f_write+0x1fa>
c0005622:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005626:	bd 01 00 00 00       	mov    ebp,0x1
c000562b:	e9 b6 00 00 00       	jmp    c00056e6 <f_write+0x2b0>
c0005630:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005633:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005637:	0f 85 90 fe ff ff    	jne    c00054cd <f_write+0x97>
c000563d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005640:	e9 88 fe ff ff       	jmp    c00054cd <f_write+0x97>
c0005645:	83 ec 0c             	sub    esp,0xc
c0005648:	8d 43 50             	lea    eax,[ebx+0x50]
c000564b:	6a 01                	push   0x1
c000564d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005650:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005653:	50                   	push   eax
c0005654:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005658:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000565c:	50                   	push   eax
c000565d:	e8 b3 c3 ff ff       	call   c0001a15 <disk_write>
c0005662:	83 c4 20             	add    esp,0x20
c0005665:	85 c0                	test   eax,eax
c0005667:	75 b9                	jne    c0005622 <f_write+0x1ec>
c0005669:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000566d:	e9 65 fe ff ff       	jmp    c00054d7 <f_write+0xa1>
c0005672:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005675:	75 05                	jne    c000567c <f_write+0x246>
c0005677:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000567a:	74 2e                	je     c00056aa <f_write+0x274>
c000567c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000567f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005682:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005685:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005688:	73 20                	jae    c00056aa <f_write+0x274>
c000568a:	83 ec 0c             	sub    esp,0xc
c000568d:	8d 43 50             	lea    eax,[ebx+0x50]
c0005690:	6a 01                	push   0x1
c0005692:	57                   	push   edi
c0005693:	56                   	push   esi
c0005694:	50                   	push   eax
c0005695:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005699:	50                   	push   eax
c000569a:	e8 60 c3 ff ff       	call   c00019ff <disk_read>
c000569f:	83 c4 20             	add    esp,0x20
c00056a2:	85 c0                	test   eax,eax
c00056a4:	0f 85 78 ff ff ff    	jne    c0005622 <f_write+0x1ec>
c00056aa:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056ad:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056b0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056b3:	ba 00 02 00 00       	mov    edx,0x200
c00056b8:	25 ff 01 00 00       	and    eax,0x1ff
c00056bd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056c1:	29 c2                	sub    edx,eax
c00056c3:	39 d6                	cmp    esi,edx
c00056c5:	76 02                	jbe    c00056c9 <f_write+0x293>
c00056c7:	89 d6                	mov    esi,edx
c00056c9:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056cd:	89 f1                	mov    ecx,esi
c00056cf:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056d3:	e8 f1 c3 ff ff       	call   c0001ac9 <mem_cpy>
c00056d8:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056dc:	e9 b1 fe ff ff       	jmp    c0005592 <f_write+0x15c>
c00056e1:	bd 07 00 00 00       	mov    ebp,0x7
c00056e6:	83 c4 2c             	add    esp,0x2c
c00056e9:	89 e8                	mov    eax,ebp
c00056eb:	5b                   	pop    ebx
c00056ec:	5e                   	pop    esi
c00056ed:	5f                   	pop    edi
c00056ee:	5d                   	pop    ebp
c00056ef:	c3                   	ret    

c00056f0 <f_sync>:
c00056f0:	56                   	push   esi
c00056f1:	53                   	push   ebx
c00056f2:	83 ec 64             	sub    esp,0x64
c00056f5:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056f9:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056fd:	89 d8                	mov    eax,ebx
c00056ff:	e8 49 ca ff ff       	call   c000214d <validate>
c0005704:	85 c0                	test   eax,eax
c0005706:	0f 85 ba 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c000570c:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000570f:	f6 c2 40             	test   dl,0x40
c0005712:	0f 84 ae 01 00 00    	je     c00058c6 <f_sync+0x1d6>
c0005718:	84 d2                	test   dl,dl
c000571a:	79 33                	jns    c000574f <f_sync+0x5f>
c000571c:	83 ec 0c             	sub    esp,0xc
c000571f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005722:	6a 01                	push   0x1
c0005724:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005727:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000572a:	50                   	push   eax
c000572b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000572f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005733:	50                   	push   eax
c0005734:	e8 dc c2 ff ff       	call   c0001a15 <disk_write>
c0005739:	83 c4 20             	add    esp,0x20
c000573c:	89 c2                	mov    edx,eax
c000573e:	b8 01 00 00 00       	mov    eax,0x1
c0005743:	85 d2                	test   edx,edx
c0005745:	0f 85 7b 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c000574b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000574f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005753:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005756:	0f 85 11 01 00 00    	jne    c000586d <f_sync+0x17d>
c000575c:	89 d8                	mov    eax,ebx
c000575e:	e8 13 d6 ff ff       	call   c0002d76 <fill_first_frag>
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 5b 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c000576b:	83 c9 ff             	or     ecx,0xffffffff
c000576e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005771:	89 d8                	mov    eax,ebx
c0005773:	e8 c9 d5 ff ff       	call   c0002d41 <fill_last_frag>
c0005778:	85 c0                	test   eax,eax
c000577a:	0f 85 46 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c0005780:	83 ec 0c             	sub    esp,0xc
c0005783:	68 60 04 00 00       	push   0x460
c0005788:	e8 f0 2a 00 00       	call   c000827d <ff_memalloc>
c000578d:	83 c4 10             	add    esp,0x10
c0005790:	89 c6                	mov    esi,eax
c0005792:	b8 11 00 00 00       	mov    eax,0x11
c0005797:	85 f6                	test   esi,esi
c0005799:	0f 84 27 01 00 00    	je     c00058c6 <f_sync+0x1d6>
c000579f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00057a9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057ac:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057af:	89 da                	mov    edx,ebx
c00057b1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057b5:	e8 af df ff ff       	call   c0003769 <load_obj_xdir>
c00057ba:	85 c0                	test   eax,eax
c00057bc:	0f 85 95 00 00 00    	jne    c0005857 <f_sync+0x167>
c00057c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057c6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057c9:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057cd:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057d0:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057d3:	83 ca 01             	or     edx,0x1
c00057d6:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057d9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057df:	83 c0 34             	add    eax,0x34
c00057e2:	e8 d9 c2 ff ff       	call   c0001ac0 <st_dword>
c00057e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057eb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057ee:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057f1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057f4:	83 c0 38             	add    eax,0x38
c00057f7:	e8 c7 c2 ff ff       	call   c0001ac3 <st_qword>
c00057fc:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005803:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005806:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005809:	83 c0 28             	add    eax,0x28
c000580c:	e8 b2 c2 ff ff       	call   c0001ac3 <st_qword>
c0005811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005815:	ba 00 00 21 50       	mov    edx,0x50210000
c000581a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000581d:	83 c0 0c             	add    eax,0xc
c0005820:	e8 9b c2 ff ff       	call   c0001ac0 <st_dword>
c0005825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005829:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000582c:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005830:	31 d2                	xor    edx,edx
c0005832:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005835:	83 c0 10             	add    eax,0x10
c0005838:	e8 83 c2 ff ff       	call   c0001ac0 <st_dword>
c000583d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005841:	e8 62 e1 ff ff       	call   c00039a8 <store_xdir>
c0005846:	85 c0                	test   eax,eax
c0005848:	75 0d                	jne    c0005857 <f_sync+0x167>
c000584a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000584e:	e8 00 eb ff ff       	call   c0004353 <sync_fs>
c0005853:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005857:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000585b:	83 ec 0c             	sub    esp,0xc
c000585e:	56                   	push   esi
c000585f:	e8 2f 2a 00 00       	call   c0008293 <ff_memfree>
c0005864:	83 c4 10             	add    esp,0x10
c0005867:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000586b:	eb 59                	jmp    c00058c6 <f_sync+0x1d6>
c000586d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005870:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005873:	e8 b0 c9 ff ff       	call   c0002228 <move_window>
c0005878:	85 c0                	test   eax,eax
c000587a:	75 4a                	jne    c00058c6 <f_sync+0x1d6>
c000587c:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c000587f:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005883:	89 f2                	mov    edx,esi
c0005885:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005888:	8b 03                	mov    eax,DWORD PTR [ebx]
c000588a:	e8 5f f3 ff ff       	call   c0004bee <st_clust.isra.1>
c000588f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005892:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005895:	e8 26 c2 ff ff       	call   c0001ac0 <st_dword>
c000589a:	8d 46 16             	lea    eax,[esi+0x16]
c000589d:	ba 00 00 21 50       	mov    edx,0x50210000
c00058a2:	e8 19 c2 ff ff       	call   c0001ac0 <st_dword>
c00058a7:	8d 46 12             	lea    eax,[esi+0x12]
c00058aa:	31 d2                	xor    edx,edx
c00058ac:	e8 0b c2 ff ff       	call   c0001abc <st_word>
c00058b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058bd:	e8 91 ea ff ff       	call   c0004353 <sync_fs>
c00058c2:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058c6:	83 c4 64             	add    esp,0x64
c00058c9:	5b                   	pop    ebx
c00058ca:	5e                   	pop    esi
c00058cb:	c3                   	ret    

c00058cc <f_close>:
c00058cc:	53                   	push   ebx
c00058cd:	83 ec 24             	sub    esp,0x24
c00058d0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058d4:	53                   	push   ebx
c00058d5:	e8 16 fe ff ff       	call   c00056f0 <f_sync>
c00058da:	83 c4 10             	add    esp,0x10
c00058dd:	85 c0                	test   eax,eax
c00058df:	75 15                	jne    c00058f6 <f_close+0x2a>
c00058e1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058e5:	89 d8                	mov    eax,ebx
c00058e7:	e8 61 c8 ff ff       	call   c000214d <validate>
c00058ec:	85 c0                	test   eax,eax
c00058ee:	75 06                	jne    c00058f6 <f_close+0x2a>
c00058f0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058f6:	83 c4 18             	add    esp,0x18
c00058f9:	5b                   	pop    ebx
c00058fa:	c3                   	ret    

c00058fb <f_lseek>:
c00058fb:	55                   	push   ebp
c00058fc:	57                   	push   edi
c00058fd:	56                   	push   esi
c00058fe:	53                   	push   ebx
c00058ff:	83 ec 3c             	sub    esp,0x3c
c0005902:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005906:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000590a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000590e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005911:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005915:	89 d8                	mov    eax,ebx
c0005917:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000591b:	e8 2d c8 ff ff       	call   c000214d <validate>
c0005920:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005924:	85 c0                	test   eax,eax
c0005926:	0f 85 7a 04 00 00    	jne    c0005da6 <f_lseek+0x4ab>
c000592c:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005930:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005934:	85 c0                	test   eax,eax
c0005936:	0f 85 6a 04 00 00    	jne    c0005da6 <f_lseek+0x4ab>
c000593c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005940:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005943:	74 0c                	je     c0005951 <f_lseek+0x56>
c0005945:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005948:	85 c0                	test   eax,eax
c000594a:	75 1f                	jne    c000596b <f_lseek+0x70>
c000594c:	e9 b5 01 00 00       	jmp    c0005b06 <f_lseek+0x20b>
c0005951:	83 c9 ff             	or     ecx,0xffffffff
c0005954:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005957:	89 d8                	mov    eax,ebx
c0005959:	e8 e3 d3 ff ff       	call   c0002d41 <fill_last_frag>
c000595e:	85 c0                	test   eax,eax
c0005960:	74 e3                	je     c0005945 <f_lseek+0x4a>
c0005962:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005966:	e9 3b 04 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c000596b:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005970:	0f 85 ac 00 00 00    	jne    c0005a22 <f_lseek+0x127>
c0005976:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c000597a:	0f 85 a2 00 00 00    	jne    c0005a22 <f_lseek+0x127>
c0005980:	8d 78 04             	lea    edi,[eax+0x4]
c0005983:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005986:	8b 00                	mov    eax,DWORD PTR [eax]
c0005988:	be 02 00 00 00       	mov    esi,0x2
c000598d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005991:	85 ed                	test   ebp,ebp
c0005993:	74 73                	je     c0005a08 <f_lseek+0x10d>
c0005995:	89 e9                	mov    ecx,ebp
c0005997:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000599e:	ff 04 24             	inc    DWORD PTR [esp]
c00059a1:	89 ca                	mov    edx,ecx
c00059a3:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059a7:	89 d8                	mov    eax,ebx
c00059a9:	e8 02 d4 ff ff       	call   c0002db0 <get_fat>
c00059ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059b2:	83 f8 01             	cmp    eax,0x1
c00059b5:	77 11                	ja     c00059c8 <f_lseek+0xcd>
c00059b7:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059bb:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059c3:	e9 de 03 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c00059c8:	83 f8 ff             	cmp    eax,0xffffffff
c00059cb:	75 11                	jne    c00059de <f_lseek+0xe3>
c00059cd:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059d1:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059d9:	e9 c8 03 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c00059de:	8d 51 01             	lea    edx,[ecx+0x1]
c00059e1:	89 c1                	mov    ecx,eax
c00059e3:	39 c2                	cmp    edx,eax
c00059e5:	74 b7                	je     c000599e <f_lseek+0xa3>
c00059e7:	83 c6 02             	add    esi,0x2
c00059ea:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059ee:	72 0b                	jb     c00059fb <f_lseek+0x100>
c00059f0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059f3:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059f6:	89 0f                	mov    DWORD PTR [edi],ecx
c00059f8:	83 c7 08             	add    edi,0x8
c00059fb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059ff:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005a02:	76 04                	jbe    c0005a08 <f_lseek+0x10d>
c0005a04:	89 c5                	mov    ebp,eax
c0005a06:	eb 8d                	jmp    c0005995 <f_lseek+0x9a>
c0005a08:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a0b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a0f:	89 30                	mov    DWORD PTR [eax],esi
c0005a11:	0f 87 87 03 00 00    	ja     c0005d9e <f_lseek+0x4a3>
c0005a17:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a1d:	e9 84 03 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c0005a22:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a25:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a2c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a34:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a3b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a3f:	73 0f                	jae    c0005a50 <f_lseek+0x155>
c0005a41:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a44:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a58:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a5b:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a62:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a66:	0f 84 3a 03 00 00    	je     c0005da6 <f_lseek+0x4ab>
c0005a6c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a70:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a74:	83 c6 ff             	add    esi,0xffffffff
c0005a77:	89 d8                	mov    eax,ebx
c0005a79:	83 d7 ff             	adc    edi,0xffffffff
c0005a7c:	89 f2                	mov    edx,esi
c0005a7e:	89 f9                	mov    ecx,edi
c0005a80:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a84:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a87:	e8 78 c2 ff ff       	call   c0001d04 <clmt_clust>
c0005a8c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a90:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a93:	89 c2                	mov    edx,eax
c0005a95:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a99:	89 c8                	mov    eax,ecx
c0005a9b:	e8 43 c2 ff ff       	call   c0001ce3 <clst2sect>
c0005aa0:	89 d7                	mov    edi,edx
c0005aa2:	09 c7                	or     edi,eax
c0005aa4:	0f 84 0d ff ff ff    	je     c00059b7 <f_lseek+0xbc>
c0005aaa:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005aae:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ab4:	0f 84 ec 02 00 00    	je     c0005da6 <f_lseek+0x4ab>
c0005aba:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005abe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ac5:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ac9:	0f ac fe 09          	shrd   esi,edi,0x9
c0005acd:	4d                   	dec    ebp
c0005ace:	31 ff                	xor    edi,edi
c0005ad0:	21 ee                	and    esi,ebp
c0005ad2:	01 c6                	add    esi,eax
c0005ad4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005ad7:	11 d7                	adc    edi,edx
c0005ad9:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005adc:	39 fa                	cmp    edx,edi
c0005ade:	75 08                	jne    c0005ae8 <f_lseek+0x1ed>
c0005ae0:	39 f0                	cmp    eax,esi
c0005ae2:	0f 84 be 02 00 00    	je     c0005da6 <f_lseek+0x4ab>
c0005ae8:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aeb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aef:	0f 89 80 02 00 00    	jns    c0005d75 <f_lseek+0x47a>
c0005af5:	83 ec 0c             	sub    esp,0xc
c0005af8:	6a 01                	push   0x1
c0005afa:	52                   	push   edx
c0005afb:	50                   	push   eax
c0005afc:	55                   	push   ebp
c0005afd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005b01:	e9 5a 02 00 00       	jmp    c0005d60 <f_lseek+0x465>
c0005b06:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b0a:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b0d:	74 16                	je     c0005b25 <f_lseek+0x22a>
c0005b0f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b14:	76 0f                	jbe    c0005b25 <f_lseek+0x22a>
c0005b16:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b1d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b25:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b28:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b2b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b2e:	89 c7                	mov    edi,eax
c0005b30:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b34:	73 0d                	jae    c0005b43 <f_lseek+0x248>
c0005b36:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b3a:	75 07                	jne    c0005b43 <f_lseek+0x248>
c0005b3c:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b43:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b46:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b49:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b4d:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b54:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b5b:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b5e:	75 09                	jne    c0005b69 <f_lseek+0x26e>
c0005b60:	31 f6                	xor    esi,esi
c0005b62:	31 ff                	xor    edi,edi
c0005b64:	e9 af 01 00 00       	jmp    c0005d18 <f_lseek+0x41d>
c0005b69:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b6d:	89 d7                	mov    edi,edx
c0005b6f:	c1 e1 09             	shl    ecx,0x9
c0005b72:	09 c7                	or     edi,eax
c0005b74:	89 cd                	mov    ebp,ecx
c0005b76:	74 6d                	je     c0005be5 <f_lseek+0x2ea>
c0005b78:	83 c0 ff             	add    eax,0xffffffff
c0005b7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b7f:	83 d2 ff             	adc    edx,0xffffffff
c0005b82:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b85:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b89:	83 c0 ff             	add    eax,0xffffffff
c0005b8c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b90:	83 d2 ff             	adc    edx,0xffffffff
c0005b93:	31 ff                	xor    edi,edi
c0005b95:	57                   	push   edi
c0005b96:	51                   	push   ecx
c0005b97:	52                   	push   edx
c0005b98:	50                   	push   eax
c0005b99:	e8 fe fc 01 00       	call   c002589c <__udivdi3>
c0005b9e:	83 c4 10             	add    esp,0x10
c0005ba1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ba5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005ba9:	57                   	push   edi
c0005baa:	55                   	push   ebp
c0005bab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bb3:	e8 e4 fc 01 00       	call   c002589c <__udivdi3>
c0005bb8:	83 c4 10             	add    esp,0x10
c0005bbb:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005bbf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005bc3:	19 d1                	sbb    ecx,edx
c0005bc5:	72 1e                	jb     c0005be5 <f_lseek+0x2ea>
c0005bc7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bcb:	89 e9                	mov    ecx,ebp
c0005bcd:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bd0:	f7 d9                	neg    ecx
c0005bd2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005bd5:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005bd9:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005bdc:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005bdf:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005be3:	eb 28                	jmp    c0005c0d <f_lseek+0x312>
c0005be5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005be8:	85 c0                	test   eax,eax
c0005bea:	75 1e                	jne    c0005c0a <f_lseek+0x30f>
c0005bec:	31 d2                	xor    edx,edx
c0005bee:	89 d8                	mov    eax,ebx
c0005bf0:	e8 a9 d4 ff ff       	call   c000309e <create_chain>
c0005bf5:	83 f8 01             	cmp    eax,0x1
c0005bf8:	0f 84 b9 fd ff ff    	je     c00059b7 <f_lseek+0xbc>
c0005bfe:	83 f8 ff             	cmp    eax,0xffffffff
c0005c01:	0f 84 c6 fd ff ff    	je     c00059cd <f_lseek+0xd2>
c0005c07:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005c0a:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c0d:	85 c0                	test   eax,eax
c0005c0f:	0f 84 4b ff ff ff    	je     c0005b60 <f_lseek+0x265>
c0005c15:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c19:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c21:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c24:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c28:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c2b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c2e:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c32:	0f 83 9d 00 00 00    	jae    c0005cd5 <f_lseek+0x3da>
c0005c38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c3c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c40:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c43:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c47:	01 f2                	add    edx,esi
c0005c49:	11 f9                	adc    ecx,edi
c0005c4b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c4f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c53:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c56:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c59:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c5c:	f6 c1 02             	test   cl,0x2
c0005c5f:	74 35                	je     c0005c96 <f_lseek+0x39b>
c0005c61:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c65:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c68:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c6b:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c6f:	73 16                	jae    c0005c87 <f_lseek+0x38c>
c0005c71:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c75:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c79:	88 ca                	mov    dl,cl
c0005c7b:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c7e:	83 ca 40             	or     edx,0x40
c0005c81:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c84:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c87:	89 c2                	mov    edx,eax
c0005c89:	89 d8                	mov    eax,ebx
c0005c8b:	e8 0e d4 ff ff       	call   c000309e <create_chain>
c0005c90:	85 c0                	test   eax,eax
c0005c92:	75 0b                	jne    c0005c9f <f_lseek+0x3a4>
c0005c94:	eb 30                	jmp    c0005cc6 <f_lseek+0x3cb>
c0005c96:	89 c2                	mov    edx,eax
c0005c98:	89 d8                	mov    eax,ebx
c0005c9a:	e8 11 d1 ff ff       	call   c0002db0 <get_fat>
c0005c9f:	83 f8 ff             	cmp    eax,0xffffffff
c0005ca2:	0f 84 25 fd ff ff    	je     c00059cd <f_lseek+0xd2>
c0005ca8:	83 f8 01             	cmp    eax,0x1
c0005cab:	0f 86 06 fd ff ff    	jbe    c00059b7 <f_lseek+0xbc>
c0005cb1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005cb5:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005cb8:	0f 86 f9 fc ff ff    	jbe    c00059b7 <f_lseek+0xbc>
c0005cbe:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cc1:	e9 5b ff ff ff       	jmp    c0005c21 <f_lseek+0x326>
c0005cc6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ccd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005cd5:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005cd8:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005cdc:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005cdf:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ce2:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ce5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ceb:	0f 84 6f fe ff ff    	je     c0005b60 <f_lseek+0x265>
c0005cf1:	89 c2                	mov    edx,eax
c0005cf3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cf7:	e8 e7 bf ff ff       	call   c0001ce3 <clst2sect>
c0005cfc:	89 d7                	mov    edi,edx
c0005cfe:	09 c7                	or     edi,eax
c0005d00:	0f 84 b1 fc ff ff    	je     c00059b7 <f_lseek+0xbc>
c0005d06:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d0a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d0d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d11:	c1 ef 09             	shr    edi,0x9
c0005d14:	01 c6                	add    esi,eax
c0005d16:	11 d7                	adc    edi,edx
c0005d18:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d1b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d1e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d21:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d24:	19 d1                	sbb    ecx,edx
c0005d26:	73 0a                	jae    c0005d32 <f_lseek+0x437>
c0005d28:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d2b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d2e:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d32:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d37:	74 6d                	je     c0005da6 <f_lseek+0x4ab>
c0005d39:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d3c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d3f:	39 fa                	cmp    edx,edi
c0005d41:	75 04                	jne    c0005d47 <f_lseek+0x44c>
c0005d43:	39 f0                	cmp    eax,esi
c0005d45:	74 5f                	je     c0005da6 <f_lseek+0x4ab>
c0005d47:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d4a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d4e:	79 25                	jns    c0005d75 <f_lseek+0x47a>
c0005d50:	83 ec 0c             	sub    esp,0xc
c0005d53:	6a 01                	push   0x1
c0005d55:	52                   	push   edx
c0005d56:	50                   	push   eax
c0005d57:	55                   	push   ebp
c0005d58:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d5c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d60:	50                   	push   eax
c0005d61:	e8 af bc ff ff       	call   c0001a15 <disk_write>
c0005d66:	83 c4 20             	add    esp,0x20
c0005d69:	85 c0                	test   eax,eax
c0005d6b:	0f 85 5c fc ff ff    	jne    c00059cd <f_lseek+0xd2>
c0005d71:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d75:	83 ec 0c             	sub    esp,0xc
c0005d78:	6a 01                	push   0x1
c0005d7a:	57                   	push   edi
c0005d7b:	56                   	push   esi
c0005d7c:	55                   	push   ebp
c0005d7d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d81:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d85:	50                   	push   eax
c0005d86:	e8 74 bc ff ff       	call   c00019ff <disk_read>
c0005d8b:	83 c4 20             	add    esp,0x20
c0005d8e:	85 c0                	test   eax,eax
c0005d90:	0f 85 37 fc ff ff    	jne    c00059cd <f_lseek+0xd2>
c0005d96:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d99:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d9c:	eb 08                	jmp    c0005da6 <f_lseek+0x4ab>
c0005d9e:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005da6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005daa:	83 c4 3c             	add    esp,0x3c
c0005dad:	5b                   	pop    ebx
c0005dae:	5e                   	pop    esi
c0005daf:	5f                   	pop    edi
c0005db0:	5d                   	pop    ebp
c0005db1:	c3                   	ret    

c0005db2 <f_opendir>:
c0005db2:	56                   	push   esi
c0005db3:	b8 09 00 00 00       	mov    eax,0x9
c0005db8:	53                   	push   ebx
c0005db9:	83 ec 24             	sub    esp,0x24
c0005dbc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005dc0:	85 db                	test   ebx,ebx
c0005dc2:	0f 84 e6 00 00 00    	je     c0005eae <f_opendir+0xfc>
c0005dc8:	31 c9                	xor    ecx,ecx
c0005dca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005dce:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005dd2:	e8 03 c7 ff ff       	call   c00024da <mount_volume>
c0005dd7:	85 c0                	test   eax,eax
c0005dd9:	0f 85 c9 00 00 00    	jne    c0005ea8 <f_opendir+0xf6>
c0005ddf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005de3:	83 ec 0c             	sub    esp,0xc
c0005de6:	89 03                	mov    DWORD PTR [ebx],eax
c0005de8:	68 60 04 00 00       	push   0x460
c0005ded:	e8 8b 24 00 00       	call   c000827d <ff_memalloc>
c0005df2:	83 c4 10             	add    esp,0x10
c0005df5:	89 c6                	mov    esi,eax
c0005df7:	b8 11 00 00 00       	mov    eax,0x11
c0005dfc:	85 f6                	test   esi,esi
c0005dfe:	0f 84 aa 00 00 00    	je     c0005eae <f_opendir+0xfc>
c0005e04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e08:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e0e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e11:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e14:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005e18:	89 d8                	mov    eax,ebx
c0005e1a:	e8 31 ee ff ff       	call   c0004c50 <follow_path>
c0005e1f:	85 c0                	test   eax,eax
c0005e21:	75 61                	jne    c0005e84 <f_opendir+0xd2>
c0005e23:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e27:	78 46                	js     c0005e6f <f_opendir+0xbd>
c0005e29:	b8 05 00 00 00       	mov    eax,0x5
c0005e2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e32:	74 50                	je     c0005e84 <f_opendir+0xd2>
c0005e34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e38:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e3a:	3c 04                	cmp    al,0x4
c0005e3c:	75 26                	jne    c0005e64 <f_opendir+0xb2>
c0005e3e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e41:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e44:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e47:	30 d2                	xor    dl,dl
c0005e49:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e4d:	09 c2                	or     edx,eax
c0005e4f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e52:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e55:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e58:	89 da                	mov    edx,ebx
c0005e5a:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e5d:	e8 b4 ed ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0005e62:	eb 0b                	jmp    c0005e6f <f_opendir+0xbd>
c0005e64:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e67:	e8 59 ed ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0005e6c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e73:	31 d2                	xor    edx,edx
c0005e75:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e79:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e7d:	89 d8                	mov    eax,ebx
c0005e7f:	e8 22 d1 ff ff       	call   c0002fa6 <dir_sdi>
c0005e84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e88:	83 ec 0c             	sub    esp,0xc
c0005e8b:	56                   	push   esi
c0005e8c:	e8 02 24 00 00       	call   c0008293 <ff_memfree>
c0005e91:	83 c4 10             	add    esp,0x10
c0005e94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e98:	83 f8 04             	cmp    eax,0x4
c0005e9b:	74 06                	je     c0005ea3 <f_opendir+0xf1>
c0005e9d:	85 c0                	test   eax,eax
c0005e9f:	74 0d                	je     c0005eae <f_opendir+0xfc>
c0005ea1:	eb 05                	jmp    c0005ea8 <f_opendir+0xf6>
c0005ea3:	b8 05 00 00 00       	mov    eax,0x5
c0005ea8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005eae:	83 c4 24             	add    esp,0x24
c0005eb1:	5b                   	pop    ebx
c0005eb2:	5e                   	pop    esi
c0005eb3:	c3                   	ret    

c0005eb4 <f_closedir>:
c0005eb4:	53                   	push   ebx
c0005eb5:	83 ec 18             	sub    esp,0x18
c0005eb8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005ebc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 86 c2 ff ff       	call   c000214d <validate>
c0005ec7:	85 c0                	test   eax,eax
c0005ec9:	75 06                	jne    c0005ed1 <f_closedir+0x1d>
c0005ecb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ed1:	83 c4 18             	add    esp,0x18
c0005ed4:	5b                   	pop    ebx
c0005ed5:	c3                   	ret    

c0005ed6 <f_readdir>:
c0005ed6:	57                   	push   edi
c0005ed7:	56                   	push   esi
c0005ed8:	53                   	push   ebx
c0005ed9:	83 ec 20             	sub    esp,0x20
c0005edc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ee0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ee4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ee8:	89 d8                	mov    eax,ebx
c0005eea:	e8 5e c2 ff ff       	call   c000214d <validate>
c0005eef:	85 c0                	test   eax,eax
c0005ef1:	75 77                	jne    c0005f6a <f_readdir+0x94>
c0005ef3:	85 ff                	test   edi,edi
c0005ef5:	75 0b                	jne    c0005f02 <f_readdir+0x2c>
c0005ef7:	31 d2                	xor    edx,edx
c0005ef9:	89 d8                	mov    eax,ebx
c0005efb:	e8 a6 d0 ff ff       	call   c0002fa6 <dir_sdi>
c0005f00:	eb 68                	jmp    c0005f6a <f_readdir+0x94>
c0005f02:	83 ec 0c             	sub    esp,0xc
c0005f05:	68 60 04 00 00       	push   0x460
c0005f0a:	e8 6e 23 00 00       	call   c000827d <ff_memalloc>
c0005f0f:	83 c4 10             	add    esp,0x10
c0005f12:	89 c6                	mov    esi,eax
c0005f14:	b8 11 00 00 00       	mov    eax,0x11
c0005f19:	85 f6                	test   esi,esi
c0005f1b:	74 4d                	je     c0005f6a <f_readdir+0x94>
c0005f1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f21:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f27:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f2a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f2d:	31 d2                	xor    edx,edx
c0005f2f:	89 d8                	mov    eax,ebx
c0005f31:	e8 80 d8 ff ff       	call   c00037b6 <dir_read>
c0005f36:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f3b:	75 19                	jne    c0005f56 <f_readdir+0x80>
c0005f3d:	89 fa                	mov    edx,edi
c0005f3f:	89 d8                	mov    eax,ebx
c0005f41:	e8 7e ea ff ff       	call   c00049c4 <get_fileinfo>
c0005f46:	31 d2                	xor    edx,edx
c0005f48:	89 d8                	mov    eax,ebx
c0005f4a:	e8 af d5 ff ff       	call   c00034fe <dir_next>
c0005f4f:	83 f8 04             	cmp    eax,0x4
c0005f52:	75 02                	jne    c0005f56 <f_readdir+0x80>
c0005f54:	31 c0                	xor    eax,eax
c0005f56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5a:	83 ec 0c             	sub    esp,0xc
c0005f5d:	56                   	push   esi
c0005f5e:	e8 30 23 00 00       	call   c0008293 <ff_memfree>
c0005f63:	83 c4 10             	add    esp,0x10
c0005f66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f6a:	83 c4 20             	add    esp,0x20
c0005f6d:	5b                   	pop    ebx
c0005f6e:	5e                   	pop    esi
c0005f6f:	5f                   	pop    edi
c0005f70:	c3                   	ret    

c0005f71 <f_stat>:
c0005f71:	57                   	push   edi
c0005f72:	31 c9                	xor    ecx,ecx
c0005f74:	56                   	push   esi
c0005f75:	53                   	push   ebx
c0005f76:	83 ec 50             	sub    esp,0x50
c0005f79:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f7d:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f81:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f85:	e8 50 c5 ff ff       	call   c00024da <mount_volume>
c0005f8a:	89 c3                	mov    ebx,eax
c0005f8c:	85 c0                	test   eax,eax
c0005f8e:	75 67                	jne    c0005ff7 <f_stat+0x86>
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	bb 11 00 00 00       	mov    ebx,0x11
c0005f98:	68 60 04 00 00       	push   0x460
c0005f9d:	e8 db 22 00 00       	call   c000827d <ff_memalloc>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	89 c6                	mov    esi,eax
c0005fa7:	85 c0                	test   eax,eax
c0005fa9:	74 4c                	je     c0005ff7 <f_stat+0x86>
c0005fab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005faf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005fb5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fb8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005fbb:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005fbf:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fc3:	e8 88 ec ff ff       	call   c0004c50 <follow_path>
c0005fc8:	89 c3                	mov    ebx,eax
c0005fca:	85 c0                	test   eax,eax
c0005fcc:	75 1d                	jne    c0005feb <f_stat+0x7a>
c0005fce:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005fd3:	78 11                	js     c0005fe6 <f_stat+0x75>
c0005fd5:	85 ff                	test   edi,edi
c0005fd7:	74 12                	je     c0005feb <f_stat+0x7a>
c0005fd9:	89 fa                	mov    edx,edi
c0005fdb:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fdf:	e8 e0 e9 ff ff       	call   c00049c4 <get_fileinfo>
c0005fe4:	eb 05                	jmp    c0005feb <f_stat+0x7a>
c0005fe6:	bb 06 00 00 00       	mov    ebx,0x6
c0005feb:	83 ec 0c             	sub    esp,0xc
c0005fee:	56                   	push   esi
c0005fef:	e8 9f 22 00 00       	call   c0008293 <ff_memfree>
c0005ff4:	83 c4 10             	add    esp,0x10
c0005ff7:	83 c4 50             	add    esp,0x50
c0005ffa:	89 d8                	mov    eax,ebx
c0005ffc:	5b                   	pop    ebx
c0005ffd:	5e                   	pop    esi
c0005ffe:	5f                   	pop    edi
c0005fff:	c3                   	ret    

c0006000 <f_getfree>:
c0006000:	55                   	push   ebp
c0006001:	31 c9                	xor    ecx,ecx
c0006003:	57                   	push   edi
c0006004:	56                   	push   esi
c0006005:	53                   	push   ebx
c0006006:	83 ec 5c             	sub    esp,0x5c
c0006009:	8d 54 24 24          	lea    edx,[esp+0x24]
c000600d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006011:	e8 c4 c4 ff ff       	call   c00024da <mount_volume>
c0006016:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000601a:	85 c0                	test   eax,eax
c000601c:	0f 85 9d 01 00 00    	jne    c00061bf <f_getfree+0x1bf>
c0006022:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006026:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000602a:	89 02                	mov    DWORD PTR [edx],eax
c000602c:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000602f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006032:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006035:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006039:	39 f2                	cmp    edx,esi
c000603b:	77 0b                	ja     c0006048 <f_getfree+0x48>
c000603d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006041:	89 10                	mov    DWORD PTR [eax],edx
c0006043:	e9 77 01 00 00       	jmp    c00061bf <f_getfree+0x1bf>
c0006048:	8a 10                	mov    dl,BYTE PTR [eax]
c000604a:	80 fa 01             	cmp    dl,0x1
c000604d:	75 3a                	jne    c0006089 <f_getfree+0x89>
c000604f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006053:	be 02 00 00 00       	mov    esi,0x2
c0006058:	31 db                	xor    ebx,ebx
c000605a:	89 f2                	mov    edx,esi
c000605c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006060:	e8 4b cd ff ff       	call   c0002db0 <get_fat>
c0006065:	83 f8 ff             	cmp    eax,0xffffffff
c0006068:	0f 84 28 01 00 00    	je     c0006196 <f_getfree+0x196>
c000606e:	83 f8 01             	cmp    eax,0x1
c0006071:	0f 84 29 01 00 00    	je     c00061a0 <f_getfree+0x1a0>
c0006077:	83 d3 00             	adc    ebx,0x0
c000607a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607e:	46                   	inc    esi
c000607f:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006082:	77 d6                	ja     c000605a <f_getfree+0x5a>
c0006084:	e9 25 01 00 00       	jmp    c00061ae <f_getfree+0x1ae>
c0006089:	80 fa 04             	cmp    dl,0x4
c000608c:	0f 85 88 00 00 00    	jne    c000611a <f_getfree+0x11a>
c0006092:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006095:	31 ed                	xor    ebp,ebp
c0006097:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c000609a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000609e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060a2:	31 db                	xor    ebx,ebx
c00060a4:	85 ed                	test   ebp,ebp
c00060a6:	75 3f                	jne    c00060e7 <f_getfree+0xe7>
c00060a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00060b0:	83 c0 01             	add    eax,0x1
c00060b3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00060b7:	83 d2 00             	adc    edx,0x0
c00060ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00060c2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00060ca:	e8 59 c1 ff ff       	call   c0002228 <move_window>
c00060cf:	85 c0                	test   eax,eax
c00060d1:	0f 85 d3 00 00 00    	jne    c00061aa <f_getfree+0x1aa>
c00060d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060e3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060eb:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060ee:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060f2:	89 cf                	mov    edi,ecx
c00060f4:	85 f6                	test   esi,esi
c00060f6:	74 12                	je     c000610a <f_getfree+0x10a>
c00060f8:	88 c1                	mov    cl,al
c00060fa:	83 e1 01             	and    ecx,0x1
c00060fd:	80 f9 01             	cmp    cl,0x1
c0006100:	83 d3 00             	adc    ebx,0x0
c0006103:	d0 e8                	shr    al,1
c0006105:	4e                   	dec    esi
c0006106:	39 fe                	cmp    esi,edi
c0006108:	75 ea                	jne    c00060f4 <f_getfree+0xf4>
c000610a:	45                   	inc    ebp
c000610b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006111:	85 f6                	test   esi,esi
c0006113:	75 8f                	jne    c00060a4 <f_getfree+0xa4>
c0006115:	e9 94 00 00 00       	jmp    c00061ae <f_getfree+0x1ae>
c000611a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000611d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006120:	31 f6                	xor    esi,esi
c0006122:	31 db                	xor    ebx,ebx
c0006124:	85 f6                	test   esi,esi
c0006126:	75 1b                	jne    c0006143 <f_getfree+0x143>
c0006128:	89 d7                	mov    edi,edx
c000612a:	89 cd                	mov    ebp,ecx
c000612c:	83 c7 01             	add    edi,0x1
c000612f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006133:	83 d5 00             	adc    ebp,0x0
c0006136:	e8 ed c0 ff ff       	call   c0002228 <move_window>
c000613b:	85 c0                	test   eax,eax
c000613d:	75 6b                	jne    c00061aa <f_getfree+0x1aa>
c000613f:	89 fa                	mov    edx,edi
c0006141:	89 e9                	mov    ecx,ebp
c0006143:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006147:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000614b:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000614f:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006152:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006156:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000615a:	75 11                	jne    c000616d <f_getfree+0x16d>
c000615c:	e8 e9 b8 ff ff       	call   c0001a4a <ld_word>
c0006161:	66 83 f8 01          	cmp    ax,0x1
c0006165:	83 d3 00             	adc    ebx,0x0
c0006168:	83 c6 02             	add    esi,0x2
c000616b:	eb 13                	jmp    c0006180 <f_getfree+0x180>
c000616d:	e8 e5 b8 ff ff       	call   c0001a57 <ld_dword>
c0006172:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006177:	83 f8 01             	cmp    eax,0x1
c000617a:	83 d3 00             	adc    ebx,0x0
c000617d:	83 c6 04             	add    esi,0x4
c0006180:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006186:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000618a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000618e:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006192:	75 90                	jne    c0006124 <f_getfree+0x124>
c0006194:	eb 18                	jmp    c00061ae <f_getfree+0x1ae>
c0006196:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000619e:	eb 0e                	jmp    c00061ae <f_getfree+0x1ae>
c00061a0:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00061a8:	eb 04                	jmp    c00061ae <f_getfree+0x1ae>
c00061aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061ae:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061b2:	89 18                	mov    DWORD PTR [eax],ebx
c00061b4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061b8:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00061bb:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00061bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061c3:	83 c4 5c             	add    esp,0x5c
c00061c6:	5b                   	pop    ebx
c00061c7:	5e                   	pop    esi
c00061c8:	5f                   	pop    edi
c00061c9:	5d                   	pop    ebp
c00061ca:	c3                   	ret    

c00061cb <f_truncate>:
c00061cb:	56                   	push   esi
c00061cc:	53                   	push   ebx
c00061cd:	83 ec 14             	sub    esp,0x14
c00061d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061d4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00061d8:	89 d8                	mov    eax,ebx
c00061da:	e8 6e bf ff ff       	call   c000214d <validate>
c00061df:	89 c6                	mov    esi,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	0f 85 d2 00 00 00    	jne    c00062bb <f_truncate+0xf0>
c00061e9:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061ed:	85 f6                	test   esi,esi
c00061ef:	0f 85 c6 00 00 00    	jne    c00062bb <f_truncate+0xf0>
c00061f5:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061f9:	0f 84 b7 00 00 00    	je     c00062b6 <f_truncate+0xeb>
c00061ff:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006202:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006205:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006208:	89 d1                	mov    ecx,edx
c000620a:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000620d:	0f 83 a8 00 00 00    	jae    c00062bb <f_truncate+0xf0>
c0006213:	09 c2                	or     edx,eax
c0006215:	75 15                	jne    c000622c <f_truncate+0x61>
c0006217:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000621a:	31 c9                	xor    ecx,ecx
c000621c:	89 d8                	mov    eax,ebx
c000621e:	e8 7a d0 ff ff       	call   c000329d <remove_chain>
c0006223:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000622a:	eb 35                	jmp    c0006261 <f_truncate+0x96>
c000622c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000622f:	89 d8                	mov    eax,ebx
c0006231:	e8 7a cb ff ff       	call   c0002db0 <get_fat>
c0006236:	89 c2                	mov    edx,eax
c0006238:	b8 01 00 00 00       	mov    eax,0x1
c000623d:	83 fa ff             	cmp    edx,0xffffffff
c0006240:	74 1f                	je     c0006261 <f_truncate+0x96>
c0006242:	b8 02 00 00 00       	mov    eax,0x2
c0006247:	83 fa 01             	cmp    edx,0x1
c000624a:	74 15                	je     c0006261 <f_truncate+0x96>
c000624c:	31 c0                	xor    eax,eax
c000624e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006252:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006255:	76 0a                	jbe    c0006261 <f_truncate+0x96>
c0006257:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000625a:	89 d8                	mov    eax,ebx
c000625c:	e8 3c d0 ff ff       	call   c000329d <remove_chain>
c0006261:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006264:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006267:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000626a:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000626d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006270:	83 ca 40             	or     edx,0x40
c0006273:	85 c0                	test   eax,eax
c0006275:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006278:	75 35                	jne    c00062af <f_truncate+0xe4>
c000627a:	84 d2                	test   dl,dl
c000627c:	79 3d                	jns    c00062bb <f_truncate+0xf0>
c000627e:	83 ec 0c             	sub    esp,0xc
c0006281:	8d 43 50             	lea    eax,[ebx+0x50]
c0006284:	6a 01                	push   0x1
c0006286:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006289:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000628c:	50                   	push   eax
c000628d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006291:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006295:	50                   	push   eax
c0006296:	e8 7a b7 ff ff       	call   c0001a15 <disk_write>
c000629b:	83 c4 20             	add    esp,0x20
c000629e:	85 c0                	test   eax,eax
c00062a0:	75 08                	jne    c00062aa <f_truncate+0xdf>
c00062a2:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00062a6:	31 f6                	xor    esi,esi
c00062a8:	eb 11                	jmp    c00062bb <f_truncate+0xf0>
c00062aa:	b8 01 00 00 00       	mov    eax,0x1
c00062af:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00062b2:	89 c6                	mov    esi,eax
c00062b4:	eb 05                	jmp    c00062bb <f_truncate+0xf0>
c00062b6:	be 07 00 00 00       	mov    esi,0x7
c00062bb:	89 f0                	mov    eax,esi
c00062bd:	83 c4 14             	add    esp,0x14
c00062c0:	5b                   	pop    ebx
c00062c1:	5e                   	pop    esi
c00062c2:	c3                   	ret    

c00062c3 <f_unlink>:
c00062c3:	56                   	push   esi
c00062c4:	b9 02 00 00 00       	mov    ecx,0x2
c00062c9:	53                   	push   ebx
c00062ca:	81 ec e4 00 00 00    	sub    esp,0xe4
c00062d0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062d4:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062db:	e8 fa c1 ff ff       	call   c00024da <mount_volume>
c00062e0:	85 c0                	test   eax,eax
c00062e2:	0f 85 55 01 00 00    	jne    c000643d <f_unlink+0x17a>
c00062e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ec:	83 ec 0c             	sub    esp,0xc
c00062ef:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062f3:	68 60 04 00 00       	push   0x460
c00062f8:	e8 80 1f 00 00       	call   c000827d <ff_memalloc>
c00062fd:	83 c4 10             	add    esp,0x10
c0006300:	89 c3                	mov    ebx,eax
c0006302:	b8 11 00 00 00       	mov    eax,0x11
c0006307:	85 db                	test   ebx,ebx
c0006309:	0f 84 2e 01 00 00    	je     c000643d <f_unlink+0x17a>
c000630f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006313:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006319:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000631c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000631f:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006326:	8d 44 24 48          	lea    eax,[esp+0x48]
c000632a:	e8 21 e9 ff ff       	call   c0004c50 <follow_path>
c000632f:	85 c0                	test   eax,eax
c0006331:	0f 85 f2 00 00 00    	jne    c0006429 <f_unlink+0x166>
c0006337:	b8 06 00 00 00       	mov    eax,0x6
c000633c:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006344:	0f 88 df 00 00 00    	js     c0006429 <f_unlink+0x166>
c000634a:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000634f:	74 0a                	je     c000635b <f_unlink+0x98>
c0006351:	b8 07 00 00 00       	mov    eax,0x7
c0006356:	e9 ce 00 00 00       	jmp    c0006429 <f_unlink+0x166>
c000635b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000635f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006363:	8a 02                	mov    al,BYTE PTR [edx]
c0006365:	3c 04                	cmp    al,0x4
c0006367:	75 12                	jne    c000637b <f_unlink+0xb8>
c0006369:	8d 42 10             	lea    eax,[edx+0x10]
c000636c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006370:	e8 a1 e8 ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0006375:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006379:	eb 0e                	jmp    c0006389 <f_unlink+0xc6>
c000637b:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006382:	e8 3e e8 ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0006387:	89 c6                	mov    esi,eax
c0006389:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000638e:	75 12                	jne    c00063a2 <f_unlink+0xdf>
c0006390:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006394:	e8 94 d6 ff ff       	call   c0003a2d <dir_remove>
c0006399:	85 c0                	test   eax,eax
c000639b:	74 6c                	je     c0006409 <f_unlink+0x146>
c000639d:	e9 87 00 00 00       	jmp    c0006429 <f_unlink+0x166>
c00063a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063a6:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00063ad:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00063b4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00063b7:	75 21                	jne    c00063da <f_unlink+0x117>
c00063b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063bd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00063c1:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063c8:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063cf:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063d3:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063da:	31 d2                	xor    edx,edx
c00063dc:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063e3:	e8 be cb ff ff       	call   c0002fa6 <dir_sdi>
c00063e8:	85 c0                	test   eax,eax
c00063ea:	75 3d                	jne    c0006429 <f_unlink+0x166>
c00063ec:	31 d2                	xor    edx,edx
c00063ee:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063f5:	e8 bc d3 ff ff       	call   c00037b6 <dir_read>
c00063fa:	85 c0                	test   eax,eax
c00063fc:	0f 84 4f ff ff ff    	je     c0006351 <f_unlink+0x8e>
c0006402:	83 f8 04             	cmp    eax,0x4
c0006405:	75 22                	jne    c0006429 <f_unlink+0x166>
c0006407:	eb 87                	jmp    c0006390 <f_unlink+0xcd>
c0006409:	85 f6                	test   esi,esi
c000640b:	75 0b                	jne    c0006418 <f_unlink+0x155>
c000640d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006411:	e8 3d df ff ff       	call   c0004353 <sync_fs>
c0006416:	eb 11                	jmp    c0006429 <f_unlink+0x166>
c0006418:	31 c9                	xor    ecx,ecx
c000641a:	89 f2                	mov    edx,esi
c000641c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006420:	e8 78 ce ff ff       	call   c000329d <remove_chain>
c0006425:	85 c0                	test   eax,eax
c0006427:	74 e4                	je     c000640d <f_unlink+0x14a>
c0006429:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000642d:	83 ec 0c             	sub    esp,0xc
c0006430:	53                   	push   ebx
c0006431:	e8 5d 1e 00 00       	call   c0008293 <ff_memfree>
c0006436:	83 c4 10             	add    esp,0x10
c0006439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000643d:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006443:	5b                   	pop    ebx
c0006444:	5e                   	pop    esi
c0006445:	c3                   	ret    

c0006446 <f_mkdir>:
c0006446:	57                   	push   edi
c0006447:	b9 02 00 00 00       	mov    ecx,0x2
c000644c:	56                   	push   esi
c000644d:	53                   	push   ebx
c000644e:	83 c4 80             	add    esp,0xffffff80
c0006451:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006455:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000645c:	e8 79 c0 ff ff       	call   c00024da <mount_volume>
c0006461:	89 c3                	mov    ebx,eax
c0006463:	85 c0                	test   eax,eax
c0006465:	0f 85 fe 01 00 00    	jne    c0006669 <f_mkdir+0x223>
c000646b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646f:	bb 11 00 00 00       	mov    ebx,0x11
c0006474:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006478:	83 ec 0c             	sub    esp,0xc
c000647b:	68 60 04 00 00       	push   0x460
c0006480:	e8 f8 1d 00 00       	call   c000827d <ff_memalloc>
c0006485:	83 c4 10             	add    esp,0x10
c0006488:	89 c7                	mov    edi,eax
c000648a:	85 c0                	test   eax,eax
c000648c:	0f 84 d7 01 00 00    	je     c0006669 <f_mkdir+0x223>
c0006492:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006496:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c000649c:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000649f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064a2:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00064a9:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064ad:	e8 9e e7 ff ff       	call   c0004c50 <follow_path>
c00064b2:	89 c3                	mov    ebx,eax
c00064b4:	85 c0                	test   eax,eax
c00064b6:	74 3e                	je     c00064f6 <f_mkdir+0xb0>
c00064b8:	83 f8 04             	cmp    eax,0x4
c00064bb:	75 3e                	jne    c00064fb <f_mkdir+0xb5>
c00064bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c1:	31 d2                	xor    edx,edx
c00064c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064c7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064cb:	e8 ce cb ff ff       	call   c000309e <create_chain>
c00064d0:	89 c6                	mov    esi,eax
c00064d2:	85 c0                	test   eax,eax
c00064d4:	74 0c                	je     c00064e2 <f_mkdir+0x9c>
c00064d6:	bb 02 00 00 00       	mov    ebx,0x2
c00064db:	83 f8 01             	cmp    eax,0x1
c00064de:	74 07                	je     c00064e7 <f_mkdir+0xa1>
c00064e0:	eb 2a                	jmp    c000650c <f_mkdir+0xc6>
c00064e2:	bb 07 00 00 00       	mov    ebx,0x7
c00064e7:	31 c9                	xor    ecx,ecx
c00064e9:	89 f2                	mov    edx,esi
c00064eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064ef:	e8 a9 cd ff ff       	call   c000329d <remove_chain>
c00064f4:	eb 05                	jmp    c00064fb <f_mkdir+0xb5>
c00064f6:	bb 08 00 00 00       	mov    ebx,0x8
c00064fb:	83 ec 0c             	sub    esp,0xc
c00064fe:	57                   	push   edi
c00064ff:	e8 8f 1d 00 00       	call   c0008293 <ff_memfree>
c0006504:	83 c4 10             	add    esp,0x10
c0006507:	e9 5d 01 00 00       	jmp    c0006669 <f_mkdir+0x223>
c000650c:	bb 01 00 00 00       	mov    ebx,0x1
c0006511:	83 f8 ff             	cmp    eax,0xffffffff
c0006514:	74 d1                	je     c00064e7 <f_mkdir+0xa1>
c0006516:	89 f2                	mov    edx,esi
c0006518:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651c:	e8 c4 ce ff ff       	call   c00033e5 <dir_clear>
c0006521:	89 c3                	mov    ebx,eax
c0006523:	85 c0                	test   eax,eax
c0006525:	75 c0                	jne    c00064e7 <f_mkdir+0xa1>
c0006527:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000652b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000652e:	74 69                	je     c0006599 <f_mkdir+0x153>
c0006530:	b9 0b 00 00 00       	mov    ecx,0xb
c0006535:	83 c0 54             	add    eax,0x54
c0006538:	ba 20 00 00 00       	mov    edx,0x20
c000653d:	e8 9c b5 ff ff       	call   c0001ade <mem_set>
c0006542:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006546:	ba 00 00 21 50       	mov    edx,0x50210000
c000654b:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000654f:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006553:	83 c0 6a             	add    eax,0x6a
c0006556:	e8 65 b5 ff ff       	call   c0001ac0 <st_dword>
c000655b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655f:	89 f1                	mov    ecx,esi
c0006561:	8d 50 54             	lea    edx,[eax+0x54]
c0006564:	e8 85 e6 ff ff       	call   c0004bee <st_clust.isra.1>
c0006569:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000656d:	b9 20 00 00 00       	mov    ecx,0x20
c0006572:	8d 50 54             	lea    edx,[eax+0x54]
c0006575:	83 c0 74             	add    eax,0x74
c0006578:	e8 4c b5 ff ff       	call   c0001ac9 <mem_cpy>
c000657d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006581:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006585:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006589:	8d 50 74             	lea    edx,[eax+0x74]
c000658c:	e8 5d e6 ff ff       	call   c0004bee <st_clust.isra.1>
c0006591:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006595:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006599:	8d 44 24 34          	lea    eax,[esp+0x34]
c000659d:	e8 2f db ff ff       	call   c00040d1 <dir_register>
c00065a2:	89 c3                	mov    ebx,eax
c00065a4:	85 c0                	test   eax,eax
c00065a6:	0f 85 3b ff ff ff    	jne    c00064e7 <f_mkdir+0xa1>
c00065ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065b3:	75 74                	jne    c0006629 <f_mkdir+0x1e3>
c00065b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065b8:	ba 00 00 21 50       	mov    edx,0x50210000
c00065bd:	83 c0 0c             	add    eax,0xc
c00065c0:	e8 fb b4 ff ff       	call   c0001ac0 <st_dword>
c00065c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065c9:	89 f2                	mov    edx,esi
c00065cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065ce:	83 c0 34             	add    eax,0x34
c00065d1:	e8 ea b4 ff ff       	call   c0001ac0 <st_dword>
c00065d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065da:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065de:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065e1:	c1 e2 09             	shl    edx,0x9
c00065e4:	83 c0 38             	add    eax,0x38
c00065e7:	e8 d4 b4 ff ff       	call   c0001ac0 <st_dword>
c00065ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f0:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065f4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065f7:	c1 e2 09             	shl    edx,0x9
c00065fa:	83 c0 28             	add    eax,0x28
c00065fd:	e8 be b4 ff ff       	call   c0001ac0 <st_dword>
c0006602:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006606:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006609:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000660d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006610:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006614:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006618:	e8 8b d3 ff ff       	call   c00039a8 <store_xdir>
c000661d:	89 c3                	mov    ebx,eax
c000661f:	85 c0                	test   eax,eax
c0006621:	0f 85 d4 fe ff ff    	jne    c00064fb <f_mkdir+0xb5>
c0006627:	eb 30                	jmp    c0006659 <f_mkdir+0x213>
c0006629:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000662d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006632:	83 c0 16             	add    eax,0x16
c0006635:	e8 86 b4 ff ff       	call   c0001ac0 <st_dword>
c000663a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663e:	89 f1                	mov    ecx,esi
c0006640:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006644:	e8 a5 e5 ff ff       	call   c0004bee <st_clust.isra.1>
c0006649:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000664d:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006651:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006655:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006659:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000665d:	e8 f1 dc ff ff       	call   c0004353 <sync_fs>
c0006662:	89 c3                	mov    ebx,eax
c0006664:	e9 92 fe ff ff       	jmp    c00064fb <f_mkdir+0xb5>
c0006669:	83 ec 80             	sub    esp,0xffffff80
c000666c:	89 d8                	mov    eax,ebx
c000666e:	5b                   	pop    ebx
c000666f:	5e                   	pop    esi
c0006670:	5f                   	pop    edi
c0006671:	c3                   	ret    

c0006672 <f_rename>:
c0006672:	55                   	push   ebp
c0006673:	57                   	push   edi
c0006674:	56                   	push   esi
c0006675:	53                   	push   ebx
c0006676:	81 ec fc 00 00 00    	sub    esp,0xfc
c000667c:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006683:	e8 a4 b9 ff ff       	call   c000202c <get_ldnumber>
c0006688:	b9 02 00 00 00       	mov    ecx,0x2
c000668d:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006691:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006698:	e8 3d be ff ff       	call   c00024da <mount_volume>
c000669d:	85 c0                	test   eax,eax
c000669f:	0f 85 b5 02 00 00    	jne    c000695a <f_rename+0x2e8>
c00066a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066a9:	83 ec 0c             	sub    esp,0xc
c00066ac:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00066b0:	68 60 04 00 00       	push   0x460
c00066b5:	e8 c3 1b 00 00       	call   c000827d <ff_memalloc>
c00066ba:	83 c4 10             	add    esp,0x10
c00066bd:	89 c3                	mov    ebx,eax
c00066bf:	b8 11 00 00 00       	mov    eax,0x11
c00066c4:	85 db                	test   ebx,ebx
c00066c6:	0f 84 8e 02 00 00    	je     c000695a <f_rename+0x2e8>
c00066cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066d6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066d9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066dc:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066e3:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066e7:	e8 64 e5 ff ff       	call   c0004c50 <follow_path>
c00066ec:	85 c0                	test   eax,eax
c00066ee:	0f 85 52 02 00 00    	jne    c0006946 <f_rename+0x2d4>
c00066f4:	b8 06 00 00 00       	mov    eax,0x6
c00066f9:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006701:	0f 85 3f 02 00 00    	jne    c0006946 <f_rename+0x2d4>
c0006707:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670e:	0f 85 05 01 00 00    	jne    c0006819 <f_rename+0x1a7>
c0006714:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006717:	b9 40 00 00 00       	mov    ecx,0x40
c000671c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006720:	e8 a4 b3 ff ff       	call   c0001ac9 <mem_cpy>
c0006725:	b9 4c 00 00 00       	mov    ecx,0x4c
c000672a:	8d 54 24 58          	lea    edx,[esp+0x58]
c000672e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006735:	e8 8f b3 ff ff       	call   c0001ac9 <mem_cpy>
c000673a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006741:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006748:	e8 03 e5 ff ff       	call   c0004c50 <follow_path>
c000674d:	85 c0                	test   eax,eax
c000674f:	75 29                	jne    c000677a <f_rename+0x108>
c0006751:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006755:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000675c:	74 0a                	je     c0006768 <f_rename+0xf6>
c000675e:	b8 08 00 00 00       	mov    eax,0x8
c0006763:	e9 de 01 00 00       	jmp    c0006946 <f_rename+0x2d4>
c0006768:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000676f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006776:	75 e6                	jne    c000675e <f_rename+0xec>
c0006778:	eb 09                	jmp    c0006783 <f_rename+0x111>
c000677a:	83 f8 04             	cmp    eax,0x4
c000677d:	0f 85 c3 01 00 00    	jne    c0006946 <f_rename+0x2d4>
c0006783:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000678a:	e8 42 d9 ff ff       	call   c00040d1 <dir_register>
c000678f:	85 c0                	test   eax,eax
c0006791:	0f 85 af 01 00 00    	jne    c0006946 <f_rename+0x2d4>
c0006797:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679b:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000679e:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00067a1:	89 c5                	mov    ebp,eax
c00067a3:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00067a6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00067aa:	8d 46 24             	lea    eax,[esi+0x24]
c00067ad:	e8 98 b2 ff ff       	call   c0001a4a <ld_word>
c00067b2:	b9 40 00 00 00       	mov    ecx,0x40
c00067b7:	89 c7                	mov    edi,eax
c00067b9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00067bd:	89 f0                	mov    eax,esi
c00067bf:	e8 05 b3 ff ff       	call   c0001ac9 <mem_cpy>
c00067c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067c8:	89 e9                	mov    ecx,ebp
c00067ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cd:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00067d0:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00067d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067db:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067de:	0f b7 d7             	movzx  edx,di
c00067e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e4:	83 c0 24             	add    eax,0x24
c00067e7:	e8 d0 b2 ff ff       	call   c0001abc <st_word>
c00067ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067f0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067f3:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067f6:	a8 10                	test   al,0x10
c00067f8:	75 06                	jne    c0006800 <f_rename+0x18e>
c00067fa:	83 c8 20             	or     eax,0x20
c00067fd:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006800:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006807:	e8 9c d1 ff ff       	call   c00039a8 <store_xdir>
c000680c:	85 c0                	test   eax,eax
c000680e:	0f 84 1c 01 00 00    	je     c0006930 <f_rename+0x2be>
c0006814:	e9 2d 01 00 00       	jmp    c0006946 <f_rename+0x2d4>
c0006819:	b9 20 00 00 00       	mov    ecx,0x20
c000681e:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006825:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006829:	e8 9b b2 ff ff       	call   c0001ac9 <mem_cpy>
c000682e:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006833:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006837:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683e:	e8 86 b2 ff ff       	call   c0001ac9 <mem_cpy>
c0006843:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000684a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006851:	e8 fa e3 ff ff       	call   c0004c50 <follow_path>
c0006856:	85 c0                	test   eax,eax
c0006858:	75 27                	jne    c0006881 <f_rename+0x20f>
c000685a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000685e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006865:	0f 85 f3 fe ff ff    	jne    c000675e <f_rename+0xec>
c000686b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006872:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006879:	0f 85 df fe ff ff    	jne    c000675e <f_rename+0xec>
c000687f:	eb 09                	jmp    c000688a <f_rename+0x218>
c0006881:	83 f8 04             	cmp    eax,0x4
c0006884:	0f 85 bc 00 00 00    	jne    c0006946 <f_rename+0x2d4>
c000688a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006891:	e8 3b d8 ff ff       	call   c00040d1 <dir_register>
c0006896:	85 c0                	test   eax,eax
c0006898:	0f 85 a8 00 00 00    	jne    c0006946 <f_rename+0x2d4>
c000689e:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00068a5:	b9 13 00 00 00       	mov    ecx,0x13
c00068aa:	8d 46 0d             	lea    eax,[esi+0xd]
c00068ad:	8d 54 24 25          	lea    edx,[esp+0x25]
c00068b1:	e8 13 b2 ff ff       	call   c0001ac9 <mem_cpy>
c00068b6:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00068ba:	a8 10                	test   al,0x10
c00068bc:	75 03                	jne    c00068c1 <f_rename+0x24f>
c00068be:	83 c8 20             	or     eax,0x20
c00068c1:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00068c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068cc:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00068d0:	74 5e                	je     c0006930 <f_rename+0x2be>
c00068d2:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068d9:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068dd:	74 51                	je     c0006930 <f_rename+0x2be>
c00068df:	89 f2                	mov    edx,esi
c00068e1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068e5:	8a 07                	mov    al,BYTE PTR [edi]
c00068e7:	e8 d9 e2 ff ff       	call   c0004bc5 <ld_clust.isra.0>
c00068ec:	89 c2                	mov    edx,eax
c00068ee:	89 f8                	mov    eax,edi
c00068f0:	e8 ee b3 ff ff       	call   c0001ce3 <clst2sect>
c00068f5:	89 c6                	mov    esi,eax
c00068f7:	89 d1                	mov    ecx,edx
c00068f9:	b8 02 00 00 00       	mov    eax,0x2
c00068fe:	09 f2                	or     edx,esi
c0006900:	74 44                	je     c0006946 <f_rename+0x2d4>
c0006902:	89 f2                	mov    edx,esi
c0006904:	89 f8                	mov    eax,edi
c0006906:	e8 1d b9 ff ff       	call   c0002228 <move_window>
c000690b:	85 c0                	test   eax,eax
c000690d:	75 37                	jne    c0006946 <f_rename+0x2d4>
c000690f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006913:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006917:	75 17                	jne    c0006930 <f_rename+0x2be>
c0006919:	8d 50 74             	lea    edx,[eax+0x74]
c000691c:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006923:	e8 c6 e2 ff ff       	call   c0004bee <st_clust.isra.1>
c0006928:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000692c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006930:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006934:	e8 f4 d0 ff ff       	call   c0003a2d <dir_remove>
c0006939:	85 c0                	test   eax,eax
c000693b:	75 09                	jne    c0006946 <f_rename+0x2d4>
c000693d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006941:	e8 0d da ff ff       	call   c0004353 <sync_fs>
c0006946:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000694a:	83 ec 0c             	sub    esp,0xc
c000694d:	53                   	push   ebx
c000694e:	e8 40 19 00 00       	call   c0008293 <ff_memfree>
c0006953:	83 c4 10             	add    esp,0x10
c0006956:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000695a:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006960:	5b                   	pop    ebx
c0006961:	5e                   	pop    esi
c0006962:	5f                   	pop    edi
c0006963:	5d                   	pop    ebp
c0006964:	c3                   	ret    

c0006965 <f_chmod>:
c0006965:	57                   	push   edi
c0006966:	b9 02 00 00 00       	mov    ecx,0x2
c000696b:	56                   	push   esi
c000696c:	53                   	push   ebx
c000696d:	83 ec 60             	sub    esp,0x60
c0006970:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006974:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006978:	8d 54 24 10          	lea    edx,[esp+0x10]
c000697c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006980:	e8 55 bb ff ff       	call   c00024da <mount_volume>
c0006985:	85 c0                	test   eax,eax
c0006987:	0f 85 af 00 00 00    	jne    c0006a3c <f_chmod+0xd7>
c000698d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006991:	83 ec 0c             	sub    esp,0xc
c0006994:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006998:	68 60 04 00 00       	push   0x460
c000699d:	e8 db 18 00 00       	call   c000827d <ff_memalloc>
c00069a2:	83 c4 10             	add    esp,0x10
c00069a5:	89 c6                	mov    esi,eax
c00069a7:	b8 11 00 00 00       	mov    eax,0x11
c00069ac:	85 f6                	test   esi,esi
c00069ae:	0f 84 88 00 00 00    	je     c0006a3c <f_chmod+0xd7>
c00069b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069b8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00069be:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00069c1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069c4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069cc:	e8 7f e2 ff ff       	call   c0004c50 <follow_path>
c00069d1:	85 c0                	test   eax,eax
c00069d3:	75 53                	jne    c0006a28 <f_chmod+0xc3>
c00069d5:	b8 06 00 00 00       	mov    eax,0x6
c00069da:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069df:	75 47                	jne    c0006a28 <f_chmod+0xc3>
c00069e1:	89 f9                	mov    ecx,edi
c00069e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069e7:	83 e1 27             	and    ecx,0x27
c00069ea:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069ed:	75 1d                	jne    c0006a0c <f_chmod+0xa7>
c00069ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069f2:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069f5:	21 cb                	and    ebx,ecx
c00069f7:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069fa:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069fd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a01:	e8 a2 cf ff ff       	call   c00039a8 <store_xdir>
c0006a06:	85 c0                	test   eax,eax
c0006a08:	75 1e                	jne    c0006a28 <f_chmod+0xc3>
c0006a0a:	eb 13                	jmp    c0006a1f <f_chmod+0xba>
c0006a0c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006a10:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a13:	21 cb                	and    ebx,ecx
c0006a15:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a18:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006a1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a23:	e8 2b d9 ff ff       	call   c0004353 <sync_fs>
c0006a28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a2c:	83 ec 0c             	sub    esp,0xc
c0006a2f:	56                   	push   esi
c0006a30:	e8 5e 18 00 00       	call   c0008293 <ff_memfree>
c0006a35:	83 c4 10             	add    esp,0x10
c0006a38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a3c:	83 c4 60             	add    esp,0x60
c0006a3f:	5b                   	pop    ebx
c0006a40:	5e                   	pop    esi
c0006a41:	5f                   	pop    edi
c0006a42:	c3                   	ret    

c0006a43 <f_utime>:
c0006a43:	56                   	push   esi
c0006a44:	b9 02 00 00 00       	mov    ecx,0x2
c0006a49:	53                   	push   ebx
c0006a4a:	83 ec 64             	sub    esp,0x64
c0006a4d:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a51:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a59:	e8 7c ba ff ff       	call   c00024da <mount_volume>
c0006a5e:	85 c0                	test   eax,eax
c0006a60:	0f 85 b5 00 00 00    	jne    c0006b1b <f_utime+0xd8>
c0006a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a6a:	83 ec 0c             	sub    esp,0xc
c0006a6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a71:	68 60 04 00 00       	push   0x460
c0006a76:	e8 02 18 00 00       	call   c000827d <ff_memalloc>
c0006a7b:	83 c4 10             	add    esp,0x10
c0006a7e:	89 c3                	mov    ebx,eax
c0006a80:	b8 11 00 00 00       	mov    eax,0x11
c0006a85:	85 db                	test   ebx,ebx
c0006a87:	0f 84 8e 00 00 00    	je     c0006b1b <f_utime+0xd8>
c0006a8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a91:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a97:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a9a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a9d:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006aa1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa5:	e8 a6 e1 ff ff       	call   c0004c50 <follow_path>
c0006aaa:	85 c0                	test   eax,eax
c0006aac:	75 59                	jne    c0006b07 <f_utime+0xc4>
c0006aae:	b8 06 00 00 00       	mov    eax,0x6
c0006ab3:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ab8:	75 4d                	jne    c0006b07 <f_utime+0xc4>
c0006aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006abe:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ac2:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ac6:	c1 e2 10             	shl    edx,0x10
c0006ac9:	09 ca                	or     edx,ecx
c0006acb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ace:	75 1a                	jne    c0006aea <f_utime+0xa7>
c0006ad0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006ad3:	83 c0 0c             	add    eax,0xc
c0006ad6:	e8 e5 af ff ff       	call   c0001ac0 <st_dword>
c0006adb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006adf:	e8 c4 ce ff ff       	call   c00039a8 <store_xdir>
c0006ae4:	85 c0                	test   eax,eax
c0006ae6:	75 1f                	jne    c0006b07 <f_utime+0xc4>
c0006ae8:	eb 14                	jmp    c0006afe <f_utime+0xbb>
c0006aea:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aee:	83 c0 16             	add    eax,0x16
c0006af1:	e8 ca af ff ff       	call   c0001ac0 <st_dword>
c0006af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006afa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b02:	e8 4c d8 ff ff       	call   c0004353 <sync_fs>
c0006b07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b0b:	83 ec 0c             	sub    esp,0xc
c0006b0e:	53                   	push   ebx
c0006b0f:	e8 7f 17 00 00       	call   c0008293 <ff_memfree>
c0006b14:	83 c4 10             	add    esp,0x10
c0006b17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b1b:	83 c4 64             	add    esp,0x64
c0006b1e:	5b                   	pop    ebx
c0006b1f:	5e                   	pop    esi
c0006b20:	c3                   	ret    

c0006b21 <f_getlabel>:
c0006b21:	55                   	push   ebp
c0006b22:	31 c9                	xor    ecx,ecx
c0006b24:	57                   	push   edi
c0006b25:	56                   	push   esi
c0006b26:	53                   	push   ebx
c0006b27:	83 ec 6c             	sub    esp,0x6c
c0006b2a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006b35:	e8 a0 b9 ff ff       	call   c00024da <mount_volume>
c0006b3a:	89 c6                	mov    esi,eax
c0006b3c:	85 c0                	test   eax,eax
c0006b3e:	0f 85 c1 01 00 00    	jne    c0006d05 <f_getlabel+0x1e4>
c0006b44:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b4c:	0f 84 5f 01 00 00    	je     c0006cb1 <f_getlabel+0x190>
c0006b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b56:	31 d2                	xor    edx,edx
c0006b58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b5c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b64:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b68:	e8 39 c4 ff ff       	call   c0002fa6 <dir_sdi>
c0006b6d:	85 c0                	test   eax,eax
c0006b6f:	0f 85 2d 01 00 00    	jne    c0006ca2 <f_getlabel+0x181>
c0006b75:	ba 01 00 00 00       	mov    edx,0x1
c0006b7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b7e:	e8 33 cc ff ff       	call   c00037b6 <dir_read>
c0006b83:	85 c0                	test   eax,eax
c0006b85:	0f 85 17 01 00 00    	jne    c0006ca2 <f_getlabel+0x181>
c0006b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b8f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b92:	74 09                	je     c0006b9d <f_getlabel+0x7c>
c0006b94:	31 db                	xor    ebx,ebx
c0006b96:	31 c9                	xor    ecx,ecx
c0006b98:	e9 c8 00 00 00       	jmp    c0006c65 <f_getlabel+0x144>
c0006b9d:	31 ed                	xor    ebp,ebp
c0006b9f:	31 db                	xor    ebx,ebx
c0006ba1:	31 ff                	xor    edi,edi
c0006ba3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ba7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006bab:	39 fa                	cmp    edx,edi
c0006bad:	76 4b                	jbe    c0006bfa <f_getlabel+0xd9>
c0006baf:	47                   	inc    edi
c0006bb0:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006bb3:	01 d0                	add    eax,edx
c0006bb5:	e8 90 ae ff ff       	call   c0001a4a <ld_word>
c0006bba:	66 85 ed             	test   bp,bp
c0006bbd:	75 0d                	jne    c0006bcc <f_getlabel+0xab>
c0006bbf:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006bc5:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006bca:	76 28                	jbe    c0006bf4 <f_getlabel+0xd3>
c0006bcc:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bd3:	89 e9                	mov    ecx,ebp
c0006bd5:	01 da                	add    edx,ebx
c0006bd7:	c1 e1 10             	shl    ecx,0x10
c0006bda:	0f b7 c0             	movzx  eax,ax
c0006bdd:	09 c8                	or     eax,ecx
c0006bdf:	b9 04 00 00 00       	mov    ecx,0x4
c0006be4:	e8 01 b0 ff ff       	call   c0001bea <put_utf>
c0006be9:	84 c0                	test   al,al
c0006beb:	74 0b                	je     c0006bf8 <f_getlabel+0xd7>
c0006bed:	0f b6 c0             	movzx  eax,al
c0006bf0:	01 c3                	add    ebx,eax
c0006bf2:	31 c0                	xor    eax,eax
c0006bf4:	89 c5                	mov    ebp,eax
c0006bf6:	eb ab                	jmp    c0006ba3 <f_getlabel+0x82>
c0006bf8:	31 db                	xor    ebx,ebx
c0006bfa:	66 85 ed             	test   bp,bp
c0006bfd:	74 02                	je     c0006c01 <f_getlabel+0xe0>
c0006bff:	31 db                	xor    ebx,ebx
c0006c01:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c08:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006c0c:	e9 a0 00 00 00       	jmp    c0006cb1 <f_getlabel+0x190>
c0006c11:	83 ff 0b             	cmp    edi,0xb
c0006c14:	74 11                	je     c0006c27 <f_getlabel+0x106>
c0006c16:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c1f:	8d 79 02             	lea    edi,[ecx+0x2]
c0006c22:	c1 e0 08             	shl    eax,0x8
c0006c25:	09 c2                	or     edx,eax
c0006c27:	0f b7 d2             	movzx  edx,dx
c0006c2a:	50                   	push   eax
c0006c2b:	50                   	push   eax
c0006c2c:	68 b5 01 00 00       	push   0x1b5
c0006c31:	52                   	push   edx
c0006c32:	e8 03 17 00 00       	call   c000833a <ff_oem2uni>
c0006c37:	83 c4 10             	add    esp,0x10
c0006c3a:	66 85 c0             	test   ax,ax
c0006c3d:	74 46                	je     c0006c85 <f_getlabel+0x164>
c0006c3f:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c46:	0f b7 c0             	movzx  eax,ax
c0006c49:	01 da                	add    edx,ebx
c0006c4b:	b9 04 00 00 00       	mov    ecx,0x4
c0006c50:	e8 95 af ff ff       	call   c0001bea <put_utf>
c0006c55:	84 c0                	test   al,al
c0006c57:	74 2c                	je     c0006c85 <f_getlabel+0x164>
c0006c59:	0f b6 c0             	movzx  eax,al
c0006c5c:	01 c3                	add    ebx,eax
c0006c5e:	83 ff 0b             	cmp    edi,0xb
c0006c61:	74 24                	je     c0006c87 <f_getlabel+0x166>
c0006c63:	89 f9                	mov    ecx,edi
c0006c65:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c69:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c6c:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c71:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c7a:	e8 9f ae ff ff       	call   c0001b1e <dbc_1st>
c0006c7f:	85 c0                	test   eax,eax
c0006c81:	74 a4                	je     c0006c27 <f_getlabel+0x106>
c0006c83:	eb 8c                	jmp    c0006c11 <f_getlabel+0xf0>
c0006c85:	31 db                	xor    ebx,ebx
c0006c87:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c8e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c91:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c98:	74 17                	je     c0006cb1 <f_getlabel+0x190>
c0006c9a:	4b                   	dec    ebx
c0006c9b:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c9e:	74 ee                	je     c0006c8e <f_getlabel+0x16d>
c0006ca0:	eb 0f                	jmp    c0006cb1 <f_getlabel+0x190>
c0006ca2:	83 f8 04             	cmp    eax,0x4
c0006ca5:	75 5c                	jne    c0006d03 <f_getlabel+0x1e2>
c0006ca7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006cae:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006cb1:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006cb9:	74 4a                	je     c0006d05 <f_getlabel+0x1e4>
c0006cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cbf:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006cc2:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006cc5:	e8 5e b5 ff ff       	call   c0002228 <move_window>
c0006cca:	89 c6                	mov    esi,eax
c0006ccc:	85 c0                	test   eax,eax
c0006cce:	75 35                	jne    c0006d05 <f_getlabel+0x1e4>
c0006cd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006cd4:	b8 43 00 00 00       	mov    eax,0x43
c0006cd9:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006cdb:	80 f9 03             	cmp    cl,0x3
c0006cde:	74 0f                	je     c0006cef <f_getlabel+0x1ce>
c0006ce0:	31 c0                	xor    eax,eax
c0006ce2:	80 f9 04             	cmp    cl,0x4
c0006ce5:	0f 94 c0             	sete   al
c0006ce8:	48                   	dec    eax
c0006ce9:	83 e0 c3             	and    eax,0xffffffc3
c0006cec:	83 c0 64             	add    eax,0x64
c0006cef:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cf3:	e8 5f ad ff ff       	call   c0001a57 <ld_dword>
c0006cf8:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cff:	89 07                	mov    DWORD PTR [edi],eax
c0006d01:	eb 02                	jmp    c0006d05 <f_getlabel+0x1e4>
c0006d03:	89 c6                	mov    esi,eax
c0006d05:	83 c4 6c             	add    esp,0x6c
c0006d08:	89 f0                	mov    eax,esi
c0006d0a:	5b                   	pop    ebx
c0006d0b:	5e                   	pop    esi
c0006d0c:	5f                   	pop    edi
c0006d0d:	5d                   	pop    ebp
c0006d0e:	c3                   	ret    

c0006d0f <f_setlabel>:
c0006d0f:	56                   	push   esi
c0006d10:	b9 02 00 00 00       	mov    ecx,0x2
c0006d15:	53                   	push   ebx
c0006d16:	83 ec 74             	sub    esp,0x74
c0006d19:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006d1d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d24:	e8 b1 b7 ff ff       	call   c00024da <mount_volume>
c0006d29:	89 c6                	mov    esi,eax
c0006d2b:	85 c0                	test   eax,eax
c0006d2d:	0f 85 41 02 00 00    	jne    c0006f74 <f_setlabel+0x265>
c0006d33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d37:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d3a:	0f 85 8e 00 00 00    	jne    c0006dce <f_setlabel+0xbf>
c0006d40:	b9 16 00 00 00       	mov    ecx,0x16
c0006d45:	31 d2                	xor    edx,edx
c0006d47:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d4b:	31 db                	xor    ebx,ebx
c0006d4d:	e8 8c ad ff ff       	call   c0001ade <mem_set>
c0006d52:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d59:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d5c:	0f 86 0a 01 00 00    	jbe    c0006e6c <f_setlabel+0x15d>
c0006d62:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d69:	e8 b6 ad ff ff       	call   c0001b24 <tchar2uni>
c0006d6e:	89 c6                	mov    esi,eax
c0006d70:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d75:	76 2a                	jbe    c0006da1 <f_setlabel+0x92>
c0006d77:	83 f8 ff             	cmp    eax,0xffffffff
c0006d7a:	74 05                	je     c0006d81 <f_setlabel+0x72>
c0006d7c:	83 fb 09             	cmp    ebx,0x9
c0006d7f:	76 0a                	jbe    c0006d8b <f_setlabel+0x7c>
c0006d81:	be 06 00 00 00       	mov    esi,0x6
c0006d86:	e9 e9 01 00 00       	jmp    c0006f74 <f_setlabel+0x265>
c0006d8b:	89 c2                	mov    edx,eax
c0006d8d:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d91:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d94:	c1 ea 10             	shr    edx,0x10
c0006d97:	01 c8                	add    eax,ecx
c0006d99:	43                   	inc    ebx
c0006d9a:	e8 1d ad ff ff       	call   c0001abc <st_word>
c0006d9f:	eb 04                	jmp    c0006da5 <f_setlabel+0x96>
c0006da1:	85 c0                	test   eax,eax
c0006da3:	74 dc                	je     c0006d81 <f_setlabel+0x72>
c0006da5:	89 f2                	mov    edx,esi
c0006da7:	b8 37 82 02 c0       	mov    eax,0xc0028237
c0006dac:	e8 5b ad ff ff       	call   c0001b0c <chk_chr>
c0006db1:	85 c0                	test   eax,eax
c0006db3:	75 cc                	jne    c0006d81 <f_setlabel+0x72>
c0006db5:	83 fb 0a             	cmp    ebx,0xa
c0006db8:	77 c7                	ja     c0006d81 <f_setlabel+0x72>
c0006dba:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006dbd:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006dc1:	0f b7 d6             	movzx  edx,si
c0006dc4:	01 c8                	add    eax,ecx
c0006dc6:	43                   	inc    ebx
c0006dc7:	e8 f0 ac ff ff       	call   c0001abc <st_word>
c0006dcc:	eb 84                	jmp    c0006d52 <f_setlabel+0x43>
c0006dce:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dd3:	ba 20 00 00 00       	mov    edx,0x20
c0006dd8:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	e8 fb ac ff ff       	call   c0001ade <mem_set>
c0006de3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006dea:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ded:	76 60                	jbe    c0006e4f <f_setlabel+0x140>
c0006def:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006df6:	e8 29 ad ff ff       	call   c0001b24 <tchar2uni>
c0006dfb:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e00:	0f 87 7b ff ff ff    	ja     c0006d81 <f_setlabel+0x72>
c0006e06:	83 ec 0c             	sub    esp,0xc
c0006e09:	50                   	push   eax
c0006e0a:	e8 97 15 00 00       	call   c00083a6 <ff_wtoupper>
c0006e0f:	5a                   	pop    edx
c0006e10:	59                   	pop    ecx
c0006e11:	68 b5 01 00 00       	push   0x1b5
c0006e16:	50                   	push   eax
c0006e17:	e8 8e 14 00 00       	call   c00082aa <ff_uni2oem>
c0006e1c:	83 c4 10             	add    esp,0x10
c0006e1f:	89 c6                	mov    esi,eax
c0006e21:	66 85 c0             	test   ax,ax
c0006e24:	0f 84 57 ff ff ff    	je     c0006d81 <f_setlabel+0x72>
c0006e2a:	0f b7 d0             	movzx  edx,ax
c0006e2d:	b8 30 82 02 c0       	mov    eax,0xc0028230
c0006e32:	e8 d5 ac ff ff       	call   c0001b0c <chk_chr>
c0006e37:	85 c0                	test   eax,eax
c0006e39:	0f 85 42 ff ff ff    	jne    c0006d81 <f_setlabel+0x72>
c0006e3f:	66 81 fe ff 00       	cmp    si,0xff
c0006e44:	0f 87 14 01 00 00    	ja     c0006f5e <f_setlabel+0x24f>
c0006e4a:	e9 fa 00 00 00       	jmp    c0006f49 <f_setlabel+0x23a>
c0006e4f:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e54:	0f 84 27 ff ff ff    	je     c0006d81 <f_setlabel+0x72>
c0006e5a:	85 db                	test   ebx,ebx
c0006e5c:	74 0e                	je     c0006e6c <f_setlabel+0x15d>
c0006e5e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e61:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e66:	75 04                	jne    c0006e6c <f_setlabel+0x15d>
c0006e68:	89 c3                	mov    ebx,eax
c0006e6a:	eb ee                	jmp    c0006e5a <f_setlabel+0x14b>
c0006e6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e70:	31 d2                	xor    edx,edx
c0006e72:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e76:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e7e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e82:	e8 1f c1 ff ff       	call   c0002fa6 <dir_sdi>
c0006e87:	89 c6                	mov    esi,eax
c0006e89:	85 c0                	test   eax,eax
c0006e8b:	0f 85 e3 00 00 00    	jne    c0006f74 <f_setlabel+0x265>
c0006e91:	ba 01 00 00 00       	mov    edx,0x1
c0006e96:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e9a:	e8 17 c9 ff ff       	call   c00037b6 <dir_read>
c0006e9f:	85 c0                	test   eax,eax
c0006ea1:	75 21                	jne    c0006ec4 <f_setlabel+0x1b5>
c0006ea3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ea7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eab:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006eae:	74 5d                	je     c0006f0d <f_setlabel+0x1fe>
c0006eb0:	85 db                	test   ebx,ebx
c0006eb2:	74 0b                	je     c0006ebf <f_setlabel+0x1b0>
c0006eb4:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eb9:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ebd:	eb 70                	jmp    c0006f2f <f_setlabel+0x220>
c0006ebf:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006ec2:	eb 70                	jmp    c0006f34 <f_setlabel+0x225>
c0006ec4:	83 f8 04             	cmp    eax,0x4
c0006ec7:	75 7c                	jne    c0006f45 <f_setlabel+0x236>
c0006ec9:	85 db                	test   ebx,ebx
c0006ecb:	0f 84 a3 00 00 00    	je     c0006f74 <f_setlabel+0x265>
c0006ed1:	ba 01 00 00 00       	mov    edx,0x1
c0006ed6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006eda:	e8 51 ca ff ff       	call   c0003930 <dir_alloc>
c0006edf:	89 c6                	mov    esi,eax
c0006ee1:	85 c0                	test   eax,eax
c0006ee3:	0f 85 8b 00 00 00    	jne    c0006f74 <f_setlabel+0x265>
c0006ee9:	31 d2                	xor    edx,edx
c0006eeb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eef:	b9 20 00 00 00       	mov    ecx,0x20
c0006ef4:	e8 e5 ab ff ff       	call   c0001ade <mem_set>
c0006ef9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006efd:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f00:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f04:	75 18                	jne    c0006f1e <f_setlabel+0x20f>
c0006f06:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006f09:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f0d:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006f10:	b9 16 00 00 00       	mov    ecx,0x16
c0006f15:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f19:	83 c0 02             	add    eax,0x2
c0006f1c:	eb 9b                	jmp    c0006eb9 <f_setlabel+0x1aa>
c0006f1e:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006f22:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f27:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006f2b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f2f:	e8 95 ab ff ff       	call   c0001ac9 <mem_cpy>
c0006f34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f38:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f40:	e8 0e d4 ff ff       	call   c0004353 <sync_fs>
c0006f45:	89 c6                	mov    esi,eax
c0006f47:	eb 2b                	jmp    c0006f74 <f_setlabel+0x265>
c0006f49:	83 fb 0a             	cmp    ebx,0xa
c0006f4c:	0f 87 2f fe ff ff    	ja     c0006d81 <f_setlabel+0x72>
c0006f52:	89 f0                	mov    eax,esi
c0006f54:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f58:	43                   	inc    ebx
c0006f59:	e9 85 fe ff ff       	jmp    c0006de3 <f_setlabel+0xd4>
c0006f5e:	83 fb 09             	cmp    ebx,0x9
c0006f61:	0f 87 1a fe ff ff    	ja     c0006d81 <f_setlabel+0x72>
c0006f67:	89 f0                	mov    eax,esi
c0006f69:	66 c1 e8 08          	shr    ax,0x8
c0006f6d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f71:	43                   	inc    ebx
c0006f72:	eb de                	jmp    c0006f52 <f_setlabel+0x243>
c0006f74:	89 f0                	mov    eax,esi
c0006f76:	83 c4 74             	add    esp,0x74
c0006f79:	5b                   	pop    ebx
c0006f7a:	5e                   	pop    esi
c0006f7b:	c3                   	ret    

c0006f7c <f_forward>:
c0006f7c:	55                   	push   ebp
c0006f7d:	57                   	push   edi
c0006f7e:	56                   	push   esi
c0006f7f:	53                   	push   ebx
c0006f80:	83 ec 2c             	sub    esp,0x2c
c0006f83:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f87:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f8b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f91:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f95:	89 d8                	mov    eax,ebx
c0006f97:	e8 b1 b1 ff ff       	call   c000214d <validate>
c0006f9c:	89 c5                	mov    ebp,eax
c0006f9e:	85 c0                	test   eax,eax
c0006fa0:	0f 85 aa 01 00 00    	jne    c0007150 <f_forward+0x1d4>
c0006fa6:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006faa:	85 ed                	test   ebp,ebp
c0006fac:	0f 85 9e 01 00 00    	jne    c0007150 <f_forward+0x1d4>
c0006fb2:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006fb6:	0f 84 8f 01 00 00    	je     c000714b <f_forward+0x1cf>
c0006fbc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006fbf:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006fc2:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006fc5:	bf 00 00 00 00       	mov    edi,0x0
c0006fca:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006fcd:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006fd1:	89 d1                	mov    ecx,edx
c0006fd3:	19 f9                	sbb    ecx,edi
c0006fd5:	0f 83 cf 00 00 00    	jae    c00070aa <f_forward+0x12e>
c0006fdb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fdf:	e9 c6 00 00 00       	jmp    c00070aa <f_forward+0x12e>
c0006fe4:	50                   	push   eax
c0006fe5:	50                   	push   eax
c0006fe6:	6a 00                	push   0x0
c0006fe8:	6a 00                	push   0x0
c0006fea:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fee:	83 c4 10             	add    esp,0x10
c0006ff1:	85 c0                	test   eax,eax
c0006ff3:	0f 84 57 01 00 00    	je     c0007150 <f_forward+0x1d4>
c0006ff9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006ffc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007000:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007003:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007007:	89 d7                	mov    edi,edx
c0007009:	8d 4e ff             	lea    ecx,[esi-0x1]
c000700c:	89 c6                	mov    esi,eax
c000700e:	0f ac fe 09          	shrd   esi,edi,0x9
c0007012:	21 ce                	and    esi,ecx
c0007014:	89 c1                	mov    ecx,eax
c0007016:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000701c:	0f 84 98 00 00 00    	je     c00070ba <f_forward+0x13e>
c0007022:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007026:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007029:	89 c8                	mov    eax,ecx
c000702b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000702f:	e8 af ac ff ff       	call   c0001ce3 <clst2sect>
c0007034:	89 d7                	mov    edi,edx
c0007036:	09 c7                	or     edi,eax
c0007038:	0f 84 9e 00 00 00    	je     c00070dc <f_forward+0x160>
c000703e:	31 ff                	xor    edi,edi
c0007040:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007043:	01 c6                	add    esi,eax
c0007045:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007049:	11 d7                	adc    edi,edx
c000704b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000704e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007051:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007055:	39 fa                	cmp    edx,edi
c0007057:	0f 85 a2 00 00 00    	jne    c00070ff <f_forward+0x183>
c000705d:	39 f0                	cmp    eax,esi
c000705f:	0f 85 9a 00 00 00    	jne    c00070ff <f_forward+0x183>
c0007065:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007068:	ba 00 02 00 00       	mov    edx,0x200
c000706d:	25 ff 01 00 00       	and    eax,0x1ff
c0007072:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007076:	29 c2                	sub    edx,eax
c0007078:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000707b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000707e:	39 d1                	cmp    ecx,edx
c0007080:	76 02                	jbe    c0007084 <f_forward+0x108>
c0007082:	89 d1                	mov    ecx,edx
c0007084:	8d 73 50             	lea    esi,[ebx+0x50]
c0007087:	52                   	push   edx
c0007088:	01 c6                	add    esi,eax
c000708a:	52                   	push   edx
c000708b:	51                   	push   ecx
c000708c:	56                   	push   esi
c000708d:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007091:	83 c4 10             	add    esp,0x10
c0007094:	85 c0                	test   eax,eax
c0007096:	74 44                	je     c00070dc <f_forward+0x160>
c0007098:	31 ff                	xor    edi,edi
c000709a:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000709d:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00070a0:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00070a4:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00070a8:	01 07                	add    DWORD PTR [edi],eax
c00070aa:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00070af:	0f 85 2f ff ff ff    	jne    c0006fe4 <f_forward+0x68>
c00070b5:	e9 96 00 00 00       	jmp    c0007150 <f_forward+0x1d4>
c00070ba:	85 f6                	test   esi,esi
c00070bc:	0f 85 60 ff ff ff    	jne    c0007022 <f_forward+0xa6>
c00070c2:	89 d7                	mov    edi,edx
c00070c4:	09 c7                	or     edi,eax
c00070c6:	75 05                	jne    c00070cd <f_forward+0x151>
c00070c8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070cb:	eb 0a                	jmp    c00070d7 <f_forward+0x15b>
c00070cd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070d0:	89 d8                	mov    eax,ebx
c00070d2:	e8 d9 bc ff ff       	call   c0002db0 <get_fat>
c00070d7:	83 f8 01             	cmp    eax,0x1
c00070da:	77 0b                	ja     c00070e7 <f_forward+0x16b>
c00070dc:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070e0:	bd 02 00 00 00       	mov    ebp,0x2
c00070e5:	eb 69                	jmp    c0007150 <f_forward+0x1d4>
c00070e7:	83 f8 ff             	cmp    eax,0xffffffff
c00070ea:	75 0b                	jne    c00070f7 <f_forward+0x17b>
c00070ec:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070f0:	bd 01 00 00 00       	mov    ebp,0x1
c00070f5:	eb 59                	jmp    c0007150 <f_forward+0x1d4>
c00070f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070fa:	e9 23 ff ff ff       	jmp    c0007022 <f_forward+0xa6>
c00070ff:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007103:	79 20                	jns    c0007125 <f_forward+0x1a9>
c0007105:	83 ec 0c             	sub    esp,0xc
c0007108:	6a 01                	push   0x1
c000710a:	52                   	push   edx
c000710b:	50                   	push   eax
c000710c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007110:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007114:	50                   	push   eax
c0007115:	e8 fb a8 ff ff       	call   c0001a15 <disk_write>
c000711a:	83 c4 20             	add    esp,0x20
c000711d:	85 c0                	test   eax,eax
c000711f:	75 cb                	jne    c00070ec <f_forward+0x170>
c0007121:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007125:	83 ec 0c             	sub    esp,0xc
c0007128:	6a 01                	push   0x1
c000712a:	57                   	push   edi
c000712b:	56                   	push   esi
c000712c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007130:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007134:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007138:	50                   	push   eax
c0007139:	e8 c1 a8 ff ff       	call   c00019ff <disk_read>
c000713e:	83 c4 20             	add    esp,0x20
c0007141:	85 c0                	test   eax,eax
c0007143:	0f 84 1c ff ff ff    	je     c0007065 <f_forward+0xe9>
c0007149:	eb a1                	jmp    c00070ec <f_forward+0x170>
c000714b:	bd 07 00 00 00       	mov    ebp,0x7
c0007150:	83 c4 2c             	add    esp,0x2c
c0007153:	89 e8                	mov    eax,ebp
c0007155:	5b                   	pop    ebx
c0007156:	5e                   	pop    esi
c0007157:	5f                   	pop    edi
c0007158:	5d                   	pop    ebp
c0007159:	c3                   	ret    

c000715a <f_mkfs>:
c000715a:	55                   	push   ebp
c000715b:	57                   	push   edi
c000715c:	56                   	push   esi
c000715d:	53                   	push   ebx
c000715e:	bb 0b 00 00 00       	mov    ebx,0xb
c0007163:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007169:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007170:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007177:	e8 b0 ae ff ff       	call   c000202c <get_ldnumber>
c000717c:	85 c0                	test   eax,eax
c000717e:	0f 88 ec 10 00 00    	js     c0008270 <f_mkfs+0x1116>
c0007184:	8b 14 85 80 d0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2f80]
c000718b:	85 d2                	test   edx,edx
c000718d:	74 03                	je     c0007192 <f_mkfs+0x38>
c000718f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007192:	85 f6                	test   esi,esi
c0007194:	75 05                	jne    c000719b <f_mkfs+0x41>
c0007196:	be 20 82 02 c0       	mov    esi,0xc0028220
c000719b:	83 ec 0c             	sub    esp,0xc
c000719e:	0f b6 c0             	movzx  eax,al
c00071a1:	bb 03 00 00 00       	mov    ebx,0x3
c00071a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071ae:	e8 49 a8 ff ff       	call   c00019fc <disk_initialize>
c00071b3:	83 c4 10             	add    esp,0x10
c00071b6:	a8 01                	test   al,0x1
c00071b8:	0f 85 b2 10 00 00    	jne    c0008270 <f_mkfs+0x1116>
c00071be:	bb 0a 00 00 00       	mov    ebx,0xa
c00071c3:	a8 04                	test   al,0x4
c00071c5:	0f 85 a5 10 00 00    	jne    c0008270 <f_mkfs+0x1116>
c00071cb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00071ce:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071d2:	85 c0                	test   eax,eax
c00071d4:	75 20                	jne    c00071f6 <f_mkfs+0x9c>
c00071d6:	51                   	push   ecx
c00071d7:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071db:	50                   	push   eax
c00071dc:	6a 03                	push   0x3
c00071de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071e2:	e8 44 a8 ff ff       	call   c0001a2b <disk_ioctl>
c00071e7:	83 c4 10             	add    esp,0x10
c00071ea:	85 c0                	test   eax,eax
c00071ec:	74 08                	je     c00071f6 <f_mkfs+0x9c>
c00071ee:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071f6:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071fa:	8d 42 ff             	lea    eax,[edx-0x1]
c00071fd:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007202:	77 04                	ja     c0007208 <f_mkfs+0xae>
c0007204:	85 c2                	test   edx,eax
c0007206:	74 08                	je     c0007210 <f_mkfs+0xb6>
c0007208:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007210:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007213:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007217:	48                   	dec    eax
c0007218:	3c 01                	cmp    al,0x1
c000721a:	76 05                	jbe    c0007221 <f_mkfs+0xc7>
c000721c:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007221:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007224:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007228:	48                   	dec    eax
c0007229:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000722e:	77 07                	ja     c0007237 <f_mkfs+0xdd>
c0007230:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007235:	74 08                	je     c000723f <f_mkfs+0xe5>
c0007237:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000723f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007242:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007248:	77 07                	ja     c0007251 <f_mkfs+0xf7>
c000724a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000724d:	85 d8                	test   eax,ebx
c000724f:	74 02                	je     c0007253 <f_mkfs+0xf9>
c0007251:	31 db                	xor    ebx,ebx
c0007253:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000725e:	77 0a                	ja     c000726a <f_mkfs+0x110>
c0007260:	bb 11 00 00 00       	mov    ebx,0x11
c0007265:	e9 06 10 00 00       	jmp    c0008270 <f_mkfs+0x1116>
c000726a:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007271:	8b 36                	mov    esi,DWORD PTR [esi]
c0007273:	85 ed                	test   ebp,ebp
c0007275:	75 1e                	jne    c0007295 <f_mkfs+0x13b>
c0007277:	83 ec 0c             	sub    esp,0xc
c000727a:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007281:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007286:	50                   	push   eax
c0007287:	e8 f1 0f 00 00       	call   c000827d <ff_memalloc>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	89 c5                	mov    ebp,eax
c0007291:	85 c0                	test   eax,eax
c0007293:	74 cb                	je     c0007260 <f_mkfs+0x106>
c0007295:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000729d:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00072a5:	52                   	push   edx
c00072a6:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00072aa:	50                   	push   eax
c00072ab:	6a 01                	push   0x1
c00072ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b1:	e8 75 a7 ff ff       	call   c0001a2b <disk_ioctl>
c00072b6:	83 c4 10             	add    esp,0x10
c00072b9:	85 c0                	test   eax,eax
c00072bb:	0f 85 4a 0f 00 00    	jne    c000820b <f_mkfs+0x10b1>
c00072c1:	89 f1                	mov    ecx,esi
c00072c3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00072cb:	83 e1 0f             	and    ecx,0xf
c00072ce:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072d6:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072da:	83 e6 08             	and    esi,0x8
c00072dd:	75 56                	jne    c0007335 <f_mkfs+0x1db>
c00072df:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072e3:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072e7:	83 ff 00             	cmp    edi,0x0
c00072ea:	76 20                	jbe    c000730c <f_mkfs+0x1b2>
c00072ec:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072f1:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072f9:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072ff:	83 d7 ff             	adc    edi,0xffffffff
c0007302:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007306:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000730a:	eb 21                	jmp    c000732d <f_mkfs+0x1d3>
c000730c:	ba 3f 00 00 00       	mov    edx,0x3f
c0007311:	39 f2                	cmp    edx,esi
c0007313:	19 f8                	sbb    eax,edi
c0007315:	73 1e                	jae    c0007335 <f_mkfs+0x1db>
c0007317:	83 c6 c1             	add    esi,0xffffffc1
c000731a:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007322:	83 d7 ff             	adc    edi,0xffffffff
c0007325:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007329:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000732d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007335:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007339:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000733d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007340:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007344:	31 c0                	xor    eax,eax
c0007346:	ba 7f 00 00 00       	mov    edx,0x7f
c000734b:	89 c7                	mov    edi,eax
c000734d:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007350:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007354:	0f 83 c5 0a 00 00    	jae    c0007e1f <f_mkfs+0xcc5>
c000735a:	89 df                	mov    edi,ebx
c000735c:	c1 ef 09             	shr    edi,0x9
c000735f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007363:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000736a:	c1 ef 09             	shr    edi,0x9
c000736d:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007372:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007376:	74 29                	je     c00073a1 <f_mkfs+0x247>
c0007378:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000737e:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007383:	0f 97 c2             	seta   dl
c0007386:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007389:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000738d:	0f 92 c0             	setb   al
c0007390:	08 c2                	or     dl,al
c0007392:	75 5b                	jne    c00073ef <f_mkfs+0x295>
c0007394:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007398:	83 e0 07             	and    eax,0x7
c000739b:	3c 04                	cmp    al,0x4
c000739d:	74 50                	je     c00073ef <f_mkfs+0x295>
c000739f:	eb 1b                	jmp    c00073bc <f_mkfs+0x262>
c00073a1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00073a6:	0f 87 73 0a 00 00    	ja     c0007e1f <f_mkfs+0xcc5>
c00073ac:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073b2:	76 08                	jbe    c00073bc <f_mkfs+0x262>
c00073b4:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00073bc:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073c0:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00073c4:	83 e0 01             	and    eax,0x1
c00073c7:	80 e1 02             	and    cl,0x2
c00073ca:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00073ce:	74 0d                	je     c00073dd <f_mkfs+0x283>
c00073d0:	84 c0                	test   al,al
c00073d2:	0f 84 53 09 00 00    	je     c0007d2b <f_mkfs+0xbd1>
c00073d8:	e9 12 08 00 00       	jmp    c0007bef <f_mkfs+0xa95>
c00073dd:	bb 13 00 00 00       	mov    ebx,0x13
c00073e2:	84 c0                	test   al,al
c00073e4:	0f 85 05 08 00 00    	jne    c0007bef <f_mkfs+0xa95>
c00073ea:	e9 39 0e 00 00       	jmp    c0008228 <f_mkfs+0x10ce>
c00073ef:	31 c0                	xor    eax,eax
c00073f1:	ba ff 0f 00 00       	mov    edx,0xfff
c00073f6:	89 c7                	mov    edi,eax
c00073f8:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073fb:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073ff:	0f 83 1a 0a 00 00    	jae    c0007e1f <f_mkfs+0xcc5>
c0007405:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000740b:	77 39                	ja     c0007446 <f_mkfs+0x2ec>
c000740d:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007412:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000741a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000741d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007421:	73 08                	jae    c000742b <f_mkfs+0x2d1>
c0007423:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000742b:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007430:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007433:	b8 00 00 00 00       	mov    eax,0x0
c0007438:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000743c:	73 08                	jae    c0007446 <f_mkfs+0x2ec>
c000743e:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000744a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000744e:	83 c0 20             	add    eax,0x20
c0007451:	83 d2 00             	adc    edx,0x0
c0007454:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007458:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000745c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007460:	31 d2                	xor    edx,edx
c0007462:	31 ff                	xor    edi,edi
c0007464:	52                   	push   edx
c0007465:	89 fb                	mov    ebx,edi
c0007467:	50                   	push   eax
c0007468:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000746c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007470:	e8 27 e4 01 00       	call   c002589c <__udivdi3>
c0007475:	83 c4 10             	add    esp,0x10
c0007478:	c1 e0 02             	shl    eax,0x2
c000747b:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000747f:	05 07 02 00 00       	add    eax,0x207
c0007484:	89 f1                	mov    ecx,esi
c0007486:	c1 e8 09             	shr    eax,0x9
c0007489:	83 c1 ff             	add    ecx,0xffffffff
c000748c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007490:	83 d3 ff             	adc    ebx,0xffffffff
c0007493:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007497:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c000749b:	31 d2                	xor    edx,edx
c000749d:	01 c8                	add    eax,ecx
c000749f:	11 da                	adc    edx,ebx
c00074a1:	89 c1                	mov    ecx,eax
c00074a3:	f7 de                	neg    esi
c00074a5:	89 d0                	mov    eax,edx
c00074a7:	83 d7 00             	adc    edi,0x0
c00074aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074ae:	f7 df                	neg    edi
c00074b0:	21 f1                	and    ecx,esi
c00074b2:	21 f8                	and    eax,edi
c00074b4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00074b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00074bc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00074c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00074c4:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00074c8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074cb:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00074cf:	0f ac d0 01          	shrd   eax,edx,0x1
c00074d3:	89 df                	mov    edi,ebx
c00074d5:	d1 ea                	shr    edx,1
c00074d7:	39 c1                	cmp    ecx,eax
c00074d9:	19 d7                	sbb    edi,edx
c00074db:	0f 83 3e 09 00 00    	jae    c0007e1f <f_mkfs+0xcc5>
c00074e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074e5:	31 d2                	xor    edx,edx
c00074e7:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074ef:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074f3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074f6:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074fa:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074fe:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007502:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007506:	83 f8 0f             	cmp    eax,0xf
c0007509:	0f 86 10 09 00 00    	jbe    c0007e1f <f_mkfs+0xcc5>
c000750f:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007517:	0f 87 02 09 00 00    	ja     c0007e1f <f_mkfs+0xcc5>
c000751d:	31 d2                	xor    edx,edx
c000751f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007523:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000752b:	83 c0 07             	add    eax,0x7
c000752e:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007536:	c1 e8 03             	shr    eax,0x3
c0007539:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007540:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007548:	c1 e0 09             	shl    eax,0x9
c000754b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000754f:	48                   	dec    eax
c0007550:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007554:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007558:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000755c:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007560:	31 d2                	xor    edx,edx
c0007562:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007566:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000756d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007571:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007576:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000757a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000757e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007582:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007586:	31 ff                	xor    edi,edi
c0007588:	31 f6                	xor    esi,esi
c000758a:	31 db                	xor    ebx,ebx
c000758c:	85 ff                	test   edi,edi
c000758e:	74 05                	je     c0007595 <f_mkfs+0x43b>
c0007590:	4f                   	dec    edi
c0007591:	74 44                	je     c00075d7 <f_mkfs+0x47d>
c0007593:	eb 4f                	jmp    c00075e4 <f_mkfs+0x48a>
c0007595:	83 ec 0c             	sub    esp,0xc
c0007598:	0f b7 c3             	movzx  eax,bx
c000759b:	50                   	push   eax
c000759c:	e8 05 0e 00 00       	call   c00083a6 <ff_wtoupper>
c00075a1:	83 c4 10             	add    esp,0x10
c00075a4:	89 c1                	mov    ecx,eax
c00075a6:	8d 53 01             	lea    edx,[ebx+0x1]
c00075a9:	66 39 c3             	cmp    bx,ax
c00075ac:	75 3e                	jne    c00075ec <f_mkfs+0x492>
c00075ae:	be 01 00 00 00       	mov    esi,0x1
c00075b3:	89 df                	mov    edi,ebx
c00075b5:	66 01 f7             	add    di,si
c00075b8:	75 07                	jne    c00075c1 <f_mkfs+0x467>
c00075ba:	83 fe 7f             	cmp    esi,0x7f
c00075bd:	77 31                	ja     c00075f0 <f_mkfs+0x496>
c00075bf:	eb 16                	jmp    c00075d7 <f_mkfs+0x47d>
c00075c1:	83 ec 0c             	sub    esp,0xc
c00075c4:	0f b7 ff             	movzx  edi,di
c00075c7:	57                   	push   edi
c00075c8:	e8 d9 0d 00 00       	call   c00083a6 <ff_wtoupper>
c00075cd:	83 c4 10             	add    esp,0x10
c00075d0:	39 c7                	cmp    edi,eax
c00075d2:	75 e6                	jne    c00075ba <f_mkfs+0x460>
c00075d4:	46                   	inc    esi
c00075d5:	eb dc                	jmp    c00075b3 <f_mkfs+0x459>
c00075d7:	31 c0                	xor    eax,eax
c00075d9:	89 d9                	mov    ecx,ebx
c00075db:	4e                   	dec    esi
c00075dc:	0f 95 c0             	setne  al
c00075df:	43                   	inc    ebx
c00075e0:	89 c7                	mov    edi,eax
c00075e2:	eb 14                	jmp    c00075f8 <f_mkfs+0x49e>
c00075e4:	89 f1                	mov    ecx,esi
c00075e6:	01 f3                	add    ebx,esi
c00075e8:	31 ff                	xor    edi,edi
c00075ea:	eb 0c                	jmp    c00075f8 <f_mkfs+0x49e>
c00075ec:	89 d3                	mov    ebx,edx
c00075ee:	eb 08                	jmp    c00075f8 <f_mkfs+0x49e>
c00075f0:	bf 02 00 00 00       	mov    edi,0x2
c00075f5:	83 c9 ff             	or     ecx,0xffffffff
c00075f8:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075fc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075ff:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007603:	0f b6 c1             	movzx  eax,cl
c0007606:	e8 3a a9 ff ff       	call   c0001f45 <xsum32>
c000760b:	66 c1 e9 08          	shr    cx,0x8
c000760f:	89 c2                	mov    edx,eax
c0007611:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007614:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007618:	0f b7 c1             	movzx  eax,cx
c000761b:	e8 25 a9 ff ff       	call   c0001f45 <xsum32>
c0007620:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007625:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007629:	66 85 db             	test   bx,bx
c000762c:	74 1f                	je     c000764d <f_mkfs+0x4f3>
c000762e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007631:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007638:	83 c0 02             	add    eax,0x2
c000763b:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007641:	39 c2                	cmp    edx,eax
c0007643:	74 08                	je     c000764d <f_mkfs+0x4f3>
c0007645:	89 04 24             	mov    DWORD PTR [esp],eax
c0007648:	e9 3f ff ff ff       	jmp    c000758c <f_mkfs+0x432>
c000764d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007650:	83 ec 0c             	sub    esp,0xc
c0007653:	05 01 02 00 00       	add    eax,0x201
c0007658:	c1 e8 09             	shr    eax,0x9
c000765b:	50                   	push   eax
c000765c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007660:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007664:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007668:	55                   	push   ebp
c0007669:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000766d:	e8 a3 a3 ff ff       	call   c0001a15 <disk_write>
c0007672:	83 c4 20             	add    esp,0x20
c0007675:	85 c0                	test   eax,eax
c0007677:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000767a:	0f 85 8b 0b 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007680:	89 d0                	mov    eax,edx
c0007682:	31 d2                	xor    edx,edx
c0007684:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007688:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c000768c:	66 85 db             	test   bx,bx
c000768f:	74 04                	je     c0007695 <f_mkfs+0x53b>
c0007691:	31 c0                	xor    eax,eax
c0007693:	eb b0                	jmp    c0007645 <f_mkfs+0x4eb>
c0007695:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007699:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000769d:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00076a1:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00076a7:	31 d2                	xor    edx,edx
c00076a9:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00076b4:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076b8:	c1 eb 09             	shr    ebx,0x9
c00076bb:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00076c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076c6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00076ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076ce:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076d2:	8d 70 01             	lea    esi,[eax+0x1]
c00076d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076dd:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076e4:	31 d2                	xor    edx,edx
c00076e6:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00076ee:	89 c1                	mov    ecx,eax
c00076f0:	89 e8                	mov    eax,ebp
c00076f2:	e8 e7 a3 ff ff       	call   c0001ade <mem_set>
c00076f7:	31 c0                	xor    eax,eax
c00076f9:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076fc:	76 10                	jbe    c000770e <f_mkfs+0x5b4>
c00076fe:	83 fe 07             	cmp    esi,0x7
c0007701:	76 0b                	jbe    c000770e <f_mkfs+0x5b4>
c0007703:	40                   	inc    eax
c0007704:	83 ee 08             	sub    esi,0x8
c0007707:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000770c:	eb eb                	jmp    c00076f9 <f_mkfs+0x59f>
c000770e:	b2 01                	mov    dl,0x1
c0007710:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007714:	85 f6                	test   esi,esi
c0007716:	74 0c                	je     c0007724 <f_mkfs+0x5ca>
c0007718:	39 04 24             	cmp    DWORD PTR [esp],eax
c000771b:	76 07                	jbe    c0007724 <f_mkfs+0x5ca>
c000771d:	08 11                	or     BYTE PTR [ecx],dl
c000771f:	4e                   	dec    esi
c0007720:	d1 e2                	shl    edx,1
c0007722:	eb f0                	jmp    c0007714 <f_mkfs+0x5ba>
c0007724:	89 df                	mov    edi,ebx
c0007726:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000772a:	76 04                	jbe    c0007730 <f_mkfs+0x5d6>
c000772c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007730:	83 ec 0c             	sub    esp,0xc
c0007733:	57                   	push   edi
c0007734:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007738:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000773c:	55                   	push   ebp
c000773d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007741:	e8 cf a2 ff ff       	call   c0001a15 <disk_write>
c0007746:	83 c4 20             	add    esp,0x20
c0007749:	85 c0                	test   eax,eax
c000774b:	0f 85 ba 0a 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007751:	31 d2                	xor    edx,edx
c0007753:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007757:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000775b:	29 fb                	sub    ebx,edi
c000775d:	0f 85 7a ff ff ff    	jne    c00076dd <f_mkfs+0x583>
c0007763:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007767:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000776f:	31 f6                	xor    esi,esi
c0007771:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007775:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007778:	31 d2                	xor    edx,edx
c000777a:	89 e8                	mov    eax,ebp
c000777c:	e8 5d a3 ff ff       	call   c0001ade <mem_set>
c0007781:	31 c9                	xor    ecx,ecx
c0007783:	85 db                	test   ebx,ebx
c0007785:	75 40                	jne    c00077c7 <f_mkfs+0x66d>
c0007787:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000778c:	89 e8                	mov    eax,ebp
c000778e:	bb 02 00 00 00       	mov    ebx,0x2
c0007793:	e8 28 a3 ff ff       	call   c0001ac0 <st_dword>
c0007798:	8d 45 04             	lea    eax,[ebp+0x4]
c000779b:	83 ca ff             	or     edx,0xffffffff
c000779e:	e8 1d a3 ff ff       	call   c0001ac0 <st_dword>
c00077a3:	b9 08 00 00 00       	mov    ecx,0x8
c00077a8:	eb 1d                	jmp    c00077c7 <f_mkfs+0x66d>
c00077aa:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077ad:	76 3b                	jbe    c00077ea <f_mkfs+0x690>
c00077af:	43                   	inc    ebx
c00077b0:	83 fe 01             	cmp    esi,0x1
c00077b3:	89 da                	mov    edx,ebx
c00077b5:	77 03                	ja     c00077ba <f_mkfs+0x660>
c00077b7:	83 ca ff             	or     edx,0xffffffff
c00077ba:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00077be:	4e                   	dec    esi
c00077bf:	e8 fc a2 ff ff       	call   c0001ac0 <st_dword>
c00077c4:	83 c1 04             	add    ecx,0x4
c00077c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00077cb:	85 f6                	test   esi,esi
c00077cd:	75 db                	jne    c00077aa <f_mkfs+0x650>
c00077cf:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077d4:	77 14                	ja     c00077ea <f_mkfs+0x690>
c00077d6:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077da:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077e1:	85 f6                	test   esi,esi
c00077e3:	74 05                	je     c00077ea <f_mkfs+0x690>
c00077e5:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077e8:	77 dd                	ja     c00077c7 <f_mkfs+0x66d>
c00077ea:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f2:	39 cf                	cmp    edi,ecx
c00077f4:	76 02                	jbe    c00077f8 <f_mkfs+0x69e>
c00077f6:	89 cf                	mov    edi,ecx
c00077f8:	83 ec 0c             	sub    esp,0xc
c00077fb:	57                   	push   edi
c00077fc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007800:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007804:	55                   	push   ebp
c0007805:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007809:	e8 07 a2 ff ff       	call   c0001a15 <disk_write>
c000780e:	83 c4 20             	add    esp,0x20
c0007811:	85 c0                	test   eax,eax
c0007813:	0f 85 f2 09 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007819:	31 d2                	xor    edx,edx
c000781b:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c000781f:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007823:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007827:	0f 85 48 ff ff ff    	jne    c0007775 <f_mkfs+0x61b>
c000782d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007830:	31 d2                	xor    edx,edx
c0007832:	89 e8                	mov    eax,ebp
c0007834:	31 ff                	xor    edi,edi
c0007836:	e8 a3 a2 ff ff       	call   c0001ade <mem_set>
c000783b:	8d 45 34             	lea    eax,[ebp+0x34]
c000783e:	ba 02 00 00 00       	mov    edx,0x2
c0007843:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007847:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000784b:	e8 70 a2 ff ff       	call   c0001ac0 <st_dword>
c0007850:	8d 45 38             	lea    eax,[ebp+0x38]
c0007853:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007857:	e8 64 a2 ff ff       	call   c0001ac0 <st_dword>
c000785c:	8d 45 44             	lea    eax,[ebp+0x44]
c000785f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007863:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007867:	e8 54 a2 ff ff       	call   c0001ac0 <st_dword>
c000786c:	8d 45 54             	lea    eax,[ebp+0x54]
c000786f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007873:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007877:	83 c2 02             	add    edx,0x2
c000787a:	e8 41 a2 ff ff       	call   c0001ac0 <st_dword>
c000787f:	8d 45 58             	lea    eax,[ebp+0x58]
c0007882:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007886:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000788a:	e8 31 a2 ff ff       	call   c0001ac0 <st_dword>
c000788f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007893:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007898:	89 c6                	mov    esi,eax
c000789a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000789e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00078a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00078a5:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00078a9:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00078ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078b0:	39 cb                	cmp    ebx,ecx
c00078b2:	76 02                	jbe    c00078b6 <f_mkfs+0x75c>
c00078b4:	89 cb                	mov    ebx,ecx
c00078b6:	83 ec 0c             	sub    esp,0xc
c00078b9:	53                   	push   ebx
c00078ba:	57                   	push   edi
c00078bb:	56                   	push   esi
c00078bc:	55                   	push   ebp
c00078bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078c1:	e8 4f a1 ff ff       	call   c0001a15 <disk_write>
c00078c6:	83 c4 20             	add    esp,0x20
c00078c9:	85 c0                	test   eax,eax
c00078cb:	0f 85 3a 09 00 00    	jne    c000820b <f_mkfs+0x10b1>
c00078d1:	31 d2                	xor    edx,edx
c00078d3:	b9 00 02 00 00       	mov    ecx,0x200
c00078d8:	89 e8                	mov    eax,ebp
c00078da:	e8 ff a1 ff ff       	call   c0001ade <mem_set>
c00078df:	31 d2                	xor    edx,edx
c00078e1:	01 de                	add    esi,ebx
c00078e3:	11 d7                	adc    edi,edx
c00078e5:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078e8:	75 bf                	jne    c00078a9 <f_mkfs+0x74f>
c00078ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078ee:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078f2:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078fa:	b9 00 02 00 00       	mov    ecx,0x200
c00078ff:	31 d2                	xor    edx,edx
c0007901:	89 e8                	mov    eax,ebp
c0007903:	e8 d6 a1 ff ff       	call   c0001ade <mem_set>
c0007908:	b9 0b 00 00 00       	mov    ecx,0xb
c000790d:	ba 00 83 02 c0       	mov    edx,0xc0028300
c0007912:	89 e8                	mov    eax,ebp
c0007914:	e8 b0 a1 ff ff       	call   c0001ac9 <mem_cpy>
c0007919:	8d 45 40             	lea    eax,[ebp+0x40]
c000791c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007920:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007924:	e8 9a a1 ff ff       	call   c0001ac3 <st_qword>
c0007929:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000792d:	8d 45 48             	lea    eax,[ebp+0x48]
c0007930:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007934:	e8 8a a1 ff ff       	call   c0001ac3 <st_qword>
c0007939:	8d 45 50             	lea    eax,[ebp+0x50]
c000793c:	ba 20 00 00 00       	mov    edx,0x20
c0007941:	e8 7a a1 ff ff       	call   c0001ac0 <st_dword>
c0007946:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000794a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000794e:	e8 6d a1 ff ff       	call   c0001ac0 <st_dword>
c0007953:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007957:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000795b:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c000795f:	e8 5c a1 ff ff       	call   c0001ac0 <st_dword>
c0007964:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007967:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000796b:	e8 50 a1 ff ff       	call   c0001ac0 <st_dword>
c0007970:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007974:	8d 50 02             	lea    edx,[eax+0x2]
c0007977:	8d 45 60             	lea    eax,[ebp+0x60]
c000797a:	e8 41 a1 ff ff       	call   c0001ac0 <st_dword>
c000797f:	8d 45 64             	lea    eax,[ebp+0x64]
c0007982:	ba 00 00 21 50       	mov    edx,0x50210000
c0007987:	e8 34 a1 ff ff       	call   c0001ac0 <st_dword>
c000798c:	8d 45 68             	lea    eax,[ebp+0x68]
c000798f:	ba 00 01 00 00       	mov    edx,0x100
c0007994:	e8 23 a1 ff ff       	call   c0001abc <st_word>
c0007999:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c000799d:	b8 0a 00 00 00       	mov    eax,0xa
c00079a2:	48                   	dec    eax
c00079a3:	74 05                	je     c00079aa <f_mkfs+0x850>
c00079a5:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00079a8:	eb f8                	jmp    c00079a2 <f_mkfs+0x848>
c00079aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079ae:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00079b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079b6:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00079ba:	74 05                	je     c00079c1 <f_mkfs+0x867>
c00079bc:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00079bf:	eb f5                	jmp    c00079b6 <f_mkfs+0x85c>
c00079c1:	8d 45 78             	lea    eax,[ebp+0x78]
c00079c4:	ba eb fe 00 00       	mov    edx,0xfeeb
c00079c9:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00079cf:	31 db                	xor    ebx,ebx
c00079d1:	e8 e6 a0 ff ff       	call   c0001abc <st_word>
c00079d6:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079dc:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00079e4:	e8 d3 a0 ff ff       	call   c0001abc <st_word>
c00079e9:	31 c9                	xor    ecx,ecx
c00079eb:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079ee:	83 f8 01             	cmp    eax,0x1
c00079f1:	76 13                	jbe    c0007a06 <f_mkfs+0x8ac>
c00079f3:	83 f9 70             	cmp    ecx,0x70
c00079f6:	74 0e                	je     c0007a06 <f_mkfs+0x8ac>
c00079f8:	89 da                	mov    edx,ebx
c00079fa:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079ff:	e8 41 a5 ff ff       	call   c0001f45 <xsum32>
c0007a04:	89 c3                	mov    ebx,eax
c0007a06:	41                   	inc    ecx
c0007a07:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a0d:	75 dc                	jne    c00079eb <f_mkfs+0x891>
c0007a0f:	89 f0                	mov    eax,esi
c0007a11:	89 fa                	mov    edx,edi
c0007a13:	83 c0 01             	add    eax,0x1
c0007a16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1a:	83 d2 00             	adc    edx,0x0
c0007a1d:	83 ec 0c             	sub    esp,0xc
c0007a20:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007a24:	6a 01                	push   0x1
c0007a26:	57                   	push   edi
c0007a27:	56                   	push   esi
c0007a28:	55                   	push   ebp
c0007a29:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a2d:	e8 e3 9f ff ff       	call   c0001a15 <disk_write>
c0007a32:	83 c4 20             	add    esp,0x20
c0007a35:	85 c0                	test   eax,eax
c0007a37:	0f 85 ce 07 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007a3d:	31 d2                	xor    edx,edx
c0007a3f:	b9 00 02 00 00       	mov    ecx,0x200
c0007a44:	89 e8                	mov    eax,ebp
c0007a46:	e8 93 a0 ff ff       	call   c0001ade <mem_set>
c0007a4b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a50:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a53:	e8 64 a0 ff ff       	call   c0001abc <st_word>
c0007a58:	89 f0                	mov    eax,esi
c0007a5a:	89 fa                	mov    edx,edi
c0007a5c:	83 c0 09             	add    eax,0x9
c0007a5f:	83 d2 00             	adc    edx,0x0
c0007a62:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a65:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a69:	31 c9                	xor    ecx,ecx
c0007a6b:	41                   	inc    ecx
c0007a6c:	89 da                	mov    edx,ebx
c0007a6e:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a73:	e8 cd a4 ff ff       	call   c0001f45 <xsum32>
c0007a78:	89 c3                	mov    ebx,eax
c0007a7a:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a80:	75 e9                	jne    c0007a6b <f_mkfs+0x911>
c0007a82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a86:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a8a:	83 c0 01             	add    eax,0x1
c0007a8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a91:	83 d2 00             	adc    edx,0x0
c0007a94:	83 ec 0c             	sub    esp,0xc
c0007a97:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a9b:	6a 01                	push   0x1
c0007a9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aa1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aa5:	55                   	push   ebp
c0007aa6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aaa:	e8 66 9f ff ff       	call   c0001a15 <disk_write>
c0007aaf:	83 c4 20             	add    esp,0x20
c0007ab2:	85 c0                	test   eax,eax
c0007ab4:	0f 85 51 07 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007aba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007abe:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ac2:	75 09                	jne    c0007acd <f_mkfs+0x973>
c0007ac4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ac7:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007acb:	74 12                	je     c0007adf <f_mkfs+0x985>
c0007acd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ad1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ad5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007ad9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007add:	eb 8a                	jmp    c0007a69 <f_mkfs+0x90f>
c0007adf:	31 d2                	xor    edx,edx
c0007ae1:	b9 00 02 00 00       	mov    ecx,0x200
c0007ae6:	89 e8                	mov    eax,ebp
c0007ae8:	e8 f1 9f ff ff       	call   c0001ade <mem_set>
c0007aed:	83 c6 0b             	add    esi,0xb
c0007af0:	83 d7 00             	adc    edi,0x0
c0007af3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007af7:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007afb:	31 c9                	xor    ecx,ecx
c0007afd:	41                   	inc    ecx
c0007afe:	89 da                	mov    edx,ebx
c0007b00:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007b05:	e8 3b a4 ff ff       	call   c0001f45 <xsum32>
c0007b0a:	89 c3                	mov    ebx,eax
c0007b0c:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b12:	75 e9                	jne    c0007afd <f_mkfs+0x9a3>
c0007b14:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b1b:	83 c6 01             	add    esi,0x1
c0007b1e:	83 d7 00             	adc    edi,0x0
c0007b21:	83 ec 0c             	sub    esp,0xc
c0007b24:	6a 01                	push   0x1
c0007b26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b2e:	55                   	push   ebp
c0007b2f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b33:	e8 dd 9e ff ff       	call   c0001a15 <disk_write>
c0007b38:	83 c4 20             	add    esp,0x20
c0007b3b:	85 c0                	test   eax,eax
c0007b3d:	0f 85 c8 06 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007b43:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b47:	75 06                	jne    c0007b4f <f_mkfs+0x9f5>
c0007b49:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b4d:	74 09                	je     c0007b58 <f_mkfs+0x9fe>
c0007b4f:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b52:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b56:	eb a3                	jmp    c0007afb <f_mkfs+0x9a1>
c0007b58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b5c:	89 da                	mov    edx,ebx
c0007b5e:	01 e8                	add    eax,ebp
c0007b60:	e8 5b 9f ff ff       	call   c0001ac0 <st_dword>
c0007b65:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b6a:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b72:	75 e4                	jne    c0007b58 <f_mkfs+0x9fe>
c0007b74:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b77:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b7b:	83 c6 02             	add    esi,0x2
c0007b7e:	83 d7 00             	adc    edi,0x0
c0007b81:	83 ec 0c             	sub    esp,0xc
c0007b84:	6a 01                	push   0x1
c0007b86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b8e:	55                   	push   ebp
c0007b8f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b93:	e8 7d 9e ff ff       	call   c0001a15 <disk_write>
c0007b98:	83 c4 20             	add    esp,0x20
c0007b9b:	85 c0                	test   eax,eax
c0007b9d:	0f 85 68 06 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007ba3:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007ba8:	74 0d                	je     c0007bb7 <f_mkfs+0xa5d>
c0007baa:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007bb2:	e9 43 fd ff ff       	jmp    c00078fa <f_mkfs+0x7a0>
c0007bb7:	b1 07                	mov    cl,0x7
c0007bb9:	e9 e3 05 00 00       	jmp    c00081a1 <f_mkfs+0x1047>
c0007bbe:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007bc3:	0f 85 4f 02 00 00    	jne    c0007e18 <f_mkfs+0xcbe>
c0007bc9:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007bce:	0f 86 22 02 00 00    	jbe    c0007df6 <f_mkfs+0xc9c>
c0007bd4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bd9:	0f 85 81 06 00 00    	jne    c0008260 <f_mkfs+0x1106>
c0007bdf:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007be2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007be6:	83 f8 40             	cmp    eax,0x40
c0007be9:	0f 87 51 06 00 00    	ja     c0008240 <f_mkfs+0x10e6>
c0007bef:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bf3:	85 ff                	test   edi,edi
c0007bf5:	75 1c                	jne    c0007c13 <f_mkfs+0xab9>
c0007bf7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bfa:	ba 00 82 02 c0       	mov    edx,0xc0028200
c0007bff:	c1 e9 0c             	shr    ecx,0xc
c0007c02:	bf 01 00 00 00       	mov    edi,0x1
c0007c07:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c0a:	66 85 c0             	test   ax,ax
c0007c0d:	0f 85 95 01 00 00    	jne    c0007da8 <f_mkfs+0xc4e>
c0007c13:	31 d2                	xor    edx,edx
c0007c15:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c18:	f7 f7                	div    edi
c0007c1a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007c1f:	0f 86 95 01 00 00    	jbe    c0007dba <f_mkfs+0xc60>
c0007c25:	83 c0 02             	add    eax,0x2
c0007c28:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007c2d:	01 c0                	add    eax,eax
c0007c2f:	05 ff 01 00 00       	add    eax,0x1ff
c0007c34:	be 01 00 00 00       	mov    esi,0x1
c0007c39:	c1 e8 09             	shr    eax,0x9
c0007c3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c40:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c44:	c1 e0 05             	shl    eax,0x5
c0007c47:	c1 e8 09             	shr    eax,0x9
c0007c4a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c4e:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c53:	31 d2                	xor    edx,edx
c0007c55:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c59:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c5d:	89 f0                	mov    eax,esi
c0007c5f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c63:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c67:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c6b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c6f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c73:	31 d2                	xor    edx,edx
c0007c75:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c7a:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c7e:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c82:	31 db                	xor    ebx,ebx
c0007c84:	01 c8                	add    eax,ecx
c0007c86:	11 da                	adc    edx,ebx
c0007c88:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c8c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c90:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c94:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c98:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c9c:	f7 da                	neg    edx
c0007c9e:	21 d1                	and    ecx,edx
c0007ca0:	29 d9                	sub    ecx,ebx
c0007ca2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ca7:	0f 85 20 01 00 00    	jne    c0007dcd <f_mkfs+0xc73>
c0007cad:	31 db                	xor    ebx,ebx
c0007caf:	01 ce                	add    esi,ecx
c0007cb1:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007cb5:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007cb9:	31 d2                	xor    edx,edx
c0007cbb:	89 f8                	mov    eax,edi
c0007cbd:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007cc1:	c1 e0 04             	shl    eax,0x4
c0007cc4:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007cc8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ccc:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007cd0:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007cd4:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007cd7:	19 d3                	sbb    ebx,edx
c0007cd9:	0f 82 40 01 00 00    	jb     c0007e1f <f_mkfs+0xcc5>
c0007cdf:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ce2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ce6:	89 c8                	mov    eax,ecx
c0007ce8:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ced:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cf1:	29 f0                	sub    eax,esi
c0007cf3:	29 d0                	sub    eax,edx
c0007cf5:	31 d2                	xor    edx,edx
c0007cf7:	f7 f7                	div    edi
c0007cf9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cfe:	89 c3                	mov    ebx,eax
c0007d00:	0f 85 b8 fe ff ff    	jne    c0007bbe <f_mkfs+0xa64>
c0007d06:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d0b:	0f 87 1d 01 00 00    	ja     c0007e2e <f_mkfs+0xcd4>
c0007d11:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d16:	0f 85 03 01 00 00    	jne    c0007e1f <f_mkfs+0xcc5>
c0007d1c:	83 ff 01             	cmp    edi,0x1
c0007d1f:	0f 86 fa 00 00 00    	jbe    c0007e1f <f_mkfs+0xcc5>
c0007d25:	d1 ef                	shr    edi,1
c0007d27:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007d2b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007d2f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d32:	85 db                	test   ebx,ebx
c0007d34:	75 2d                	jne    c0007d63 <f_mkfs+0xc09>
c0007d36:	89 cb                	mov    ebx,ecx
c0007d38:	ba 10 82 02 c0       	mov    edx,0xc0028210
c0007d3d:	c1 eb 11             	shr    ebx,0x11
c0007d40:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d48:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d4b:	66 85 c0             	test   ax,ax
c0007d4e:	74 11                	je     c0007d61 <f_mkfs+0xc07>
c0007d50:	83 c2 02             	add    edx,0x2
c0007d53:	39 d8                	cmp    eax,ebx
c0007d55:	77 0a                	ja     c0007d61 <f_mkfs+0xc07>
c0007d57:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d5b:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d5f:	eb e7                	jmp    c0007d48 <f_mkfs+0xbee>
c0007d61:	31 db                	xor    ebx,ebx
c0007d63:	31 d2                	xor    edx,edx
c0007d65:	89 c8                	mov    eax,ecx
c0007d67:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d6b:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d72:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d77:	c1 ea 09             	shr    edx,0x9
c0007d7a:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d7f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d83:	0f 87 96 00 00 00    	ja     c0007e1f <f_mkfs+0xcc5>
c0007d89:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d8d:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d95:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d99:	be 20 00 00 00       	mov    esi,0x20
c0007d9e:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007da3:	e9 a6 fe ff ff       	jmp    c0007c4e <f_mkfs+0xaf4>
c0007da8:	83 c2 02             	add    edx,0x2
c0007dab:	39 c8                	cmp    eax,ecx
c0007dad:	0f 87 60 fe ff ff    	ja     c0007c13 <f_mkfs+0xab9>
c0007db3:	01 ff                	add    edi,edi
c0007db5:	e9 4d fe ff ff       	jmp    c0007c07 <f_mkfs+0xaad>
c0007dba:	8d 04 40             	lea    eax,[eax+eax*2]
c0007dbd:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007dc2:	40                   	inc    eax
c0007dc3:	d1 e8                	shr    eax,1
c0007dc5:	83 c0 03             	add    eax,0x3
c0007dc8:	e9 62 fe ff ff       	jmp    c0007c2f <f_mkfs+0xad5>
c0007dcd:	31 d2                	xor    edx,edx
c0007dcf:	89 c8                	mov    eax,ecx
c0007dd1:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007dd5:	85 d2                	test   edx,edx
c0007dd7:	74 0c                	je     c0007de5 <f_mkfs+0xc8b>
c0007dd9:	49                   	dec    ecx
c0007dda:	46                   	inc    esi
c0007ddb:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007de0:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007de5:	89 c8                	mov    eax,ecx
c0007de7:	31 d2                	xor    edx,edx
c0007de9:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007ded:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007df1:	e9 c3 fe ff ff       	jmp    c0007cb9 <f_mkfs+0xb5f>
c0007df6:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfb:	77 31                	ja     c0007e2e <f_mkfs+0xcd4>
c0007dfd:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e02:	75 1b                	jne    c0007e1f <f_mkfs+0xcc5>
c0007e04:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e0b:	3d 80 00 00 00       	cmp    eax,0x80
c0007e10:	0f 86 d9 fd ff ff    	jbe    c0007bef <f_mkfs+0xa95>
c0007e16:	eb 07                	jmp    c0007e1f <f_mkfs+0xcc5>
c0007e18:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e1d:	76 0a                	jbe    c0007e29 <f_mkfs+0xccf>
c0007e1f:	bb 0e 00 00 00       	mov    ebx,0xe
c0007e24:	e9 ff 03 00 00       	jmp    c0008228 <f_mkfs+0x10ce>
c0007e29:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007e2e:	31 d2                	xor    edx,edx
c0007e30:	b9 00 02 00 00       	mov    ecx,0x200
c0007e35:	89 e8                	mov    eax,ebp
c0007e37:	e8 a2 9c ff ff       	call   c0001ade <mem_set>
c0007e3c:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e41:	ba 22 83 02 c0       	mov    edx,0xc0028322
c0007e46:	89 e8                	mov    eax,ebp
c0007e48:	e8 7c 9c ff ff       	call   c0001ac9 <mem_cpy>
c0007e4d:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e50:	ba 00 02 00 00       	mov    edx,0x200
c0007e55:	e8 62 9c ff ff       	call   c0001abc <st_word>
c0007e5a:	89 f8                	mov    eax,edi
c0007e5c:	0f b7 d6             	movzx  edx,si
c0007e5f:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e62:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e65:	e8 52 9c ff ff       	call   c0001abc <st_word>
c0007e6a:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e6e:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e73:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e76:	75 08                	jne    c0007e80 <f_mkfs+0xd26>
c0007e78:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e80:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e83:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e87:	e8 30 9c ff ff       	call   c0001abc <st_word>
c0007e8c:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e91:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e95:	39 d0                	cmp    eax,edx
c0007e97:	b8 00 00 00 00       	mov    eax,0x0
c0007e9c:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007ea0:	72 0a                	jb     c0007eac <f_mkfs+0xd52>
c0007ea2:	8d 45 13             	lea    eax,[ebp+0x13]
c0007ea5:	e8 12 9c ff ff       	call   c0001abc <st_word>
c0007eaa:	eb 08                	jmp    c0007eb4 <f_mkfs+0xd5a>
c0007eac:	8d 45 20             	lea    eax,[ebp+0x20]
c0007eaf:	e8 0c 9c ff ff       	call   c0001ac0 <st_dword>
c0007eb4:	8d 45 18             	lea    eax,[ebp+0x18]
c0007eb7:	ba 3f 00 00 00       	mov    edx,0x3f
c0007ebc:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007ec0:	e8 f7 9b ff ff       	call   c0001abc <st_word>
c0007ec5:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007ec8:	ba ff 00 00 00       	mov    edx,0xff
c0007ecd:	e8 ea 9b ff ff       	call   c0001abc <st_word>
c0007ed2:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007ed5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ed9:	e8 e2 9b ff ff       	call   c0001ac0 <st_dword>
c0007ede:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ee3:	75 57                	jne    c0007f3c <f_mkfs+0xde2>
c0007ee5:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ee8:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eed:	e8 ce 9b ff ff       	call   c0001ac0 <st_dword>
c0007ef2:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ef5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ef9:	e8 c2 9b ff ff       	call   c0001ac0 <st_dword>
c0007efe:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007f01:	ba 02 00 00 00       	mov    edx,0x2
c0007f06:	e8 b5 9b ff ff       	call   c0001ac0 <st_dword>
c0007f0b:	8d 45 30             	lea    eax,[ebp+0x30]
c0007f0e:	ba 01 00 00 00       	mov    edx,0x1
c0007f13:	e8 a4 9b ff ff       	call   c0001abc <st_word>
c0007f18:	8d 45 32             	lea    eax,[ebp+0x32]
c0007f1b:	ba 06 00 00 00       	mov    edx,0x6
c0007f20:	e8 97 9b ff ff       	call   c0001abc <st_word>
c0007f25:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007f29:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007f2d:	8d 45 47             	lea    eax,[ebp+0x47]
c0007f30:	b9 13 00 00 00       	mov    ecx,0x13
c0007f35:	ba 2e 83 02 c0       	mov    edx,0xc002832e
c0007f3a:	eb 2f                	jmp    c0007f6b <f_mkfs+0xe11>
c0007f3c:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f3f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f44:	e8 77 9b ff ff       	call   c0001ac0 <st_dword>
c0007f49:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f4e:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f51:	e8 66 9b ff ff       	call   c0001abc <st_word>
c0007f56:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f5a:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f5e:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f61:	b9 13 00 00 00       	mov    ecx,0x13
c0007f66:	ba 42 83 02 c0       	mov    edx,0xc0028342
c0007f6b:	e8 59 9b ff ff       	call   c0001ac9 <mem_cpy>
c0007f70:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f76:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f7b:	89 f0                	mov    eax,esi
c0007f7d:	e8 3a 9b ff ff       	call   c0001abc <st_word>
c0007f82:	83 ec 0c             	sub    esp,0xc
c0007f85:	6a 01                	push   0x1
c0007f87:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f8b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f8f:	55                   	push   ebp
c0007f90:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f94:	e8 7c 9a ff ff       	call   c0001a15 <disk_write>
c0007f99:	83 c4 20             	add    esp,0x20
c0007f9c:	85 c0                	test   eax,eax
c0007f9e:	0f 85 67 02 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007fa4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fa9:	0f 85 b7 00 00 00    	jne    c0008066 <f_mkfs+0xf0c>
c0007faf:	83 ec 0c             	sub    esp,0xc
c0007fb2:	6a 01                	push   0x1
c0007fb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fb8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fbc:	83 c0 06             	add    eax,0x6
c0007fbf:	83 d2 00             	adc    edx,0x0
c0007fc2:	52                   	push   edx
c0007fc3:	50                   	push   eax
c0007fc4:	55                   	push   ebp
c0007fc5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fc9:	e8 47 9a ff ff       	call   c0001a15 <disk_write>
c0007fce:	83 c4 20             	add    esp,0x20
c0007fd1:	b9 00 02 00 00       	mov    ecx,0x200
c0007fd6:	31 d2                	xor    edx,edx
c0007fd8:	89 e8                	mov    eax,ebp
c0007fda:	e8 ff 9a ff ff       	call   c0001ade <mem_set>
c0007fdf:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fe4:	89 e8                	mov    eax,ebp
c0007fe6:	e8 d5 9a ff ff       	call   c0001ac0 <st_dword>
c0007feb:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007ff1:	ba 72 72 41 61       	mov    edx,0x61417272
c0007ff6:	e8 c5 9a ff ff       	call   c0001ac0 <st_dword>
c0007ffb:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007ffe:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008004:	e8 b7 9a ff ff       	call   c0001ac0 <st_dword>
c0008009:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000800f:	ba 02 00 00 00       	mov    edx,0x2
c0008014:	e8 a7 9a ff ff       	call   c0001ac0 <st_dword>
c0008019:	ba 55 aa 00 00       	mov    edx,0xaa55
c000801e:	89 f0                	mov    eax,esi
c0008020:	e8 97 9a ff ff       	call   c0001abc <st_word>
c0008025:	83 ec 0c             	sub    esp,0xc
c0008028:	6a 01                	push   0x1
c000802a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000802e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008032:	83 c0 07             	add    eax,0x7
c0008035:	83 d2 00             	adc    edx,0x0
c0008038:	52                   	push   edx
c0008039:	50                   	push   eax
c000803a:	55                   	push   ebp
c000803b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000803f:	e8 d1 99 ff ff       	call   c0001a15 <disk_write>
c0008044:	83 c4 14             	add    esp,0x14
c0008047:	6a 01                	push   0x1
c0008049:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000804d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008051:	83 c0 01             	add    eax,0x1
c0008054:	83 d2 00             	adc    edx,0x0
c0008057:	52                   	push   edx
c0008058:	50                   	push   eax
c0008059:	55                   	push   ebp
c000805a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000805e:	e8 b2 99 ff ff       	call   c0001a15 <disk_write>
c0008063:	83 c4 20             	add    esp,0x20
c0008066:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000806d:	31 d2                	xor    edx,edx
c000806f:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008075:	31 db                	xor    ebx,ebx
c0008077:	89 e8                	mov    eax,ebp
c0008079:	e8 60 9a ff ff       	call   c0001ade <mem_set>
c000807e:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008083:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000808a:	0f 94 c3             	sete   bl
c000808d:	4b                   	dec    ebx
c000808e:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008094:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c000809a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000809f:	75 21                	jne    c00080c2 <f_mkfs+0xf68>
c00080a1:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00080a6:	89 e8                	mov    eax,ebp
c00080a8:	e8 13 9a ff ff       	call   c0001ac0 <st_dword>
c00080ad:	8d 45 04             	lea    eax,[ebp+0x4]
c00080b0:	83 ca ff             	or     edx,0xffffffff
c00080b3:	e8 08 9a ff ff       	call   c0001ac0 <st_dword>
c00080b8:	8d 45 08             	lea    eax,[ebp+0x8]
c00080bb:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00080c0:	eb 04                	jmp    c00080c6 <f_mkfs+0xf6c>
c00080c2:	89 da                	mov    edx,ebx
c00080c4:	89 e8                	mov    eax,ebp
c00080c6:	e8 f5 99 ff ff       	call   c0001ac0 <st_dword>
c00080cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080d3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080d7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080db:	39 ce                	cmp    esi,ecx
c00080dd:	76 02                	jbe    c00080e1 <f_mkfs+0xf87>
c00080df:	89 ce                	mov    esi,ecx
c00080e1:	83 ec 0c             	sub    esp,0xc
c00080e4:	56                   	push   esi
c00080e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080e9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080ed:	55                   	push   ebp
c00080ee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080f2:	e8 1e 99 ff ff       	call   c0001a15 <disk_write>
c00080f7:	83 c4 20             	add    esp,0x20
c00080fa:	85 c0                	test   eax,eax
c00080fc:	0f 85 09 01 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0008102:	31 d2                	xor    edx,edx
c0008104:	b9 00 02 00 00       	mov    ecx,0x200
c0008109:	89 e8                	mov    eax,ebp
c000810b:	e8 ce 99 ff ff       	call   c0001ade <mem_set>
c0008110:	31 d2                	xor    edx,edx
c0008112:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008116:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000811a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000811e:	75 b3                	jne    c00080d3 <f_mkfs+0xf79>
c0008120:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008123:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000812a:	40                   	inc    eax
c000812b:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000812f:	0f 87 65 ff ff ff    	ja     c000809a <f_mkfs+0xf40>
c0008135:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000813a:	74 04                	je     c0008140 <f_mkfs+0xfe6>
c000813c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008140:	89 fb                	mov    ebx,edi
c0008142:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008146:	76 04                	jbe    c000814c <f_mkfs+0xff2>
c0008148:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000814c:	83 ec 0c             	sub    esp,0xc
c000814f:	53                   	push   ebx
c0008150:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008154:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008158:	55                   	push   ebp
c0008159:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000815d:	e8 b3 98 ff ff       	call   c0001a15 <disk_write>
c0008162:	83 c4 20             	add    esp,0x20
c0008165:	85 c0                	test   eax,eax
c0008167:	0f 85 9e 00 00 00    	jne    c000820b <f_mkfs+0x10b1>
c000816d:	31 d2                	xor    edx,edx
c000816f:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008173:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008177:	29 df                	sub    edi,ebx
c0008179:	75 c5                	jne    c0008140 <f_mkfs+0xfe6>
c000817b:	b1 0c                	mov    cl,0xc
c000817d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008182:	74 1d                	je     c00081a1 <f_mkfs+0x1047>
c0008184:	b8 ff ff 00 00       	mov    eax,0xffff
c0008189:	b1 06                	mov    cl,0x6
c000818b:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000818f:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008193:	72 0c                	jb     c00081a1 <f_mkfs+0x1047>
c0008195:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c000819a:	0f 94 c1             	sete   cl
c000819d:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00081a1:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00081a6:	75 4c                	jne    c00081f4 <f_mkfs+0x109a>
c00081a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00081ac:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00081b0:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00081b7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00081be:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00081c9:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081d4:	0f b6 c9             	movzx  ecx,cl
c00081d7:	83 ec 0c             	sub    esp,0xc
c00081da:	55                   	push   ebp
c00081db:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081e6:	e8 2f c2 ff ff       	call   c000441a <create_partition>
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	89 c3                	mov    ebx,eax
c00081f0:	85 c0                	test   eax,eax
c00081f2:	75 34                	jne    c0008228 <f_mkfs+0x10ce>
c00081f4:	31 db                	xor    ebx,ebx
c00081f6:	50                   	push   eax
c00081f7:	6a 00                	push   0x0
c00081f9:	6a 00                	push   0x0
c00081fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081ff:	e8 27 98 ff ff       	call   c0001a2b <disk_ioctl>
c0008204:	83 c4 10             	add    esp,0x10
c0008207:	85 c0                	test   eax,eax
c0008209:	74 1d                	je     c0008228 <f_mkfs+0x10ce>
c000820b:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008213:	75 0c                	jne    c0008221 <f_mkfs+0x10c7>
c0008215:	83 ec 0c             	sub    esp,0xc
c0008218:	55                   	push   ebp
c0008219:	e8 75 00 00 00       	call   c0008293 <ff_memfree>
c000821e:	83 c4 10             	add    esp,0x10
c0008221:	bb 01 00 00 00       	mov    ebx,0x1
c0008226:	eb 48                	jmp    c0008270 <f_mkfs+0x1116>
c0008228:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008230:	75 3e                	jne    c0008270 <f_mkfs+0x1116>
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	55                   	push   ebp
c0008236:	e8 58 00 00 00       	call   c0008293 <ff_memfree>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	eb 30                	jmp    c0008270 <f_mkfs+0x1116>
c0008240:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008245:	0f 85 eb fa ff ff    	jne    c0007d36 <f_mkfs+0xbdc>
c000824b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000824f:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008255:	0f 86 b8 f9 ff ff    	jbe    c0007c13 <f_mkfs+0xab9>
c000825b:	e9 bf fb ff ff       	jmp    c0007e1f <f_mkfs+0xcc5>
c0008260:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008265:	0f 85 c0 fa ff ff    	jne    c0007d2b <f_mkfs+0xbd1>
c000826b:	e9 af fb ff ff       	jmp    c0007e1f <f_mkfs+0xcc5>
c0008270:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008276:	89 d8                	mov    eax,ebx
c0008278:	5b                   	pop    ebx
c0008279:	5e                   	pop    esi
c000827a:	5f                   	pop    edi
c000827b:	5d                   	pop    ebp
c000827c:	c3                   	ret    

c000827d <ff_memalloc>:
c000827d:	83 ec 0c             	sub    esp,0xc
c0008280:	83 ec 0c             	sub    esp,0xc
c0008283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008287:	e8 ce 73 00 00       	call   c000f65a <malloc>
c000828c:	83 c4 10             	add    esp,0x10
c000828f:	83 c4 0c             	add    esp,0xc
c0008292:	c3                   	ret    

c0008293 <ff_memfree>:
c0008293:	83 ec 0c             	sub    esp,0xc
c0008296:	83 ec 0c             	sub    esp,0xc
c0008299:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000829d:	e8 c8 73 00 00       	call   c000f66a <free>
c00082a2:	83 c4 10             	add    esp,0x10
c00082a5:	90                   	nop
c00082a6:	83 c4 0c             	add    esp,0xc
c00082a9:	c3                   	ret    

c00082aa <ff_uni2oem>:
c00082aa:	83 ec 14             	sub    esp,0x14
c00082ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082b1:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082b5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082bc:	c7 44 24 0c 60 86 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028660
c00082c4:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00082c9:	77 0b                	ja     c00082d6 <ff_uni2oem+0x2c>
c00082cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082cf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082d4:	eb 5b                	jmp    c0008331 <ff_uni2oem+0x87>
c00082d6:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082de:	77 51                	ja     c0008331 <ff_uni2oem+0x87>
c00082e0:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082e6:	75 49                	jne    c0008331 <ff_uni2oem+0x87>
c00082e8:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082ef:	eb 0b                	jmp    c00082fc <ff_uni2oem+0x52>
c00082f1:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082f6:	40                   	inc    eax
c00082f7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082fc:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008302:	77 1b                	ja     c000831f <ff_uni2oem+0x75>
c0008304:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008309:	01 c0                	add    eax,eax
c000830b:	89 c2                	mov    edx,eax
c000830d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008311:	01 d0                	add    eax,edx
c0008313:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008316:	0f b7 c0             	movzx  eax,ax
c0008319:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000831d:	75 d2                	jne    c00082f1 <ff_uni2oem+0x47>
c000831f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008324:	83 e8 80             	sub    eax,0xffffff80
c0008327:	25 ff 00 00 00       	and    eax,0xff
c000832c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008331:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008336:	83 c4 14             	add    esp,0x14
c0008339:	c3                   	ret    

c000833a <ff_oem2uni>:
c000833a:	83 ec 18             	sub    esp,0x18
c000833d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008345:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000834a:	66 89 04 24          	mov    WORD PTR [esp],ax
c000834e:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008355:	c7 44 24 10 60 86 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028660
c000835d:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008363:	77 0b                	ja     c0008370 <ff_oem2uni+0x36>
c0008365:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008369:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000836e:	eb 2d                	jmp    c000839d <ff_oem2uni+0x63>
c0008370:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008376:	75 25                	jne    c000839d <ff_oem2uni+0x63>
c0008378:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000837f:	77 1c                	ja     c000839d <ff_oem2uni+0x63>
c0008381:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008386:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000838b:	01 c0                	add    eax,eax
c000838d:	89 c2                	mov    edx,eax
c000838f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008393:	01 d0                	add    eax,edx
c0008395:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008398:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000839d:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00083a2:	83 c4 18             	add    esp,0x18
c00083a5:	c3                   	ret    

c00083a6 <ff_wtoupper>:
c00083a6:	83 ec 10             	sub    esp,0x10
c00083a9:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083b1:	0f 87 3e 01 00 00    	ja     c00084f5 <ff_wtoupper+0x14f>
c00083b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083bb:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c0:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00083c7:	77 07                	ja     c00083d0 <ff_wtoupper+0x2a>
c00083c9:	b8 60 84 02 c0       	mov    eax,0xc0028460
c00083ce:	eb 05                	jmp    c00083d5 <ff_wtoupper+0x2f>
c00083d0:	b8 a0 83 02 c0       	mov    eax,0xc00283a0
c00083d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083dd:	8d 50 02             	lea    edx,[eax+0x2]
c00083e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083e4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083e7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083ec:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083f2:	0f 84 f4 00 00 00    	je     c00084ec <ff_wtoupper+0x146>
c00083f8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083fd:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008402:	0f 82 e4 00 00 00    	jb     c00084ec <ff_wtoupper+0x146>
c0008408:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000840c:	8d 50 02             	lea    edx,[eax+0x2]
c000840f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008413:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008416:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000841b:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008420:	66 c1 e8 08          	shr    ax,0x8
c0008424:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008429:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008430:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008435:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000843a:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000843f:	01 ca                	add    edx,ecx
c0008441:	39 d0                	cmp    eax,edx
c0008443:	0f 8d 86 00 00 00    	jge    c00084cf <ff_wtoupper+0x129>
c0008449:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000844e:	83 f8 08             	cmp    eax,0x8
c0008451:	0f 87 94 00 00 00    	ja     c00084eb <ff_wtoupper+0x145>
c0008457:	8b 04 85 60 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ca0]
c000845e:	ff e0                	jmp    eax
c0008460:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008465:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000846a:	29 c2                	sub    edx,eax
c000846c:	89 d0                	mov    eax,edx
c000846e:	01 c0                	add    eax,eax
c0008470:	89 c2                	mov    edx,eax
c0008472:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008476:	01 d0                	add    eax,edx
c0008478:	66 8b 00             	mov    ax,WORD PTR [eax]
c000847b:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008480:	eb 4b                	jmp    c00084cd <ff_wtoupper+0x127>
c0008482:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008487:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000848b:	83 e0 01             	and    eax,0x1
c000848e:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008493:	eb 38                	jmp    c00084cd <ff_wtoupper+0x127>
c0008495:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000849b:	eb 30                	jmp    c00084cd <ff_wtoupper+0x127>
c000849d:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00084a3:	eb 28                	jmp    c00084cd <ff_wtoupper+0x127>
c00084a5:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00084ab:	eb 20                	jmp    c00084cd <ff_wtoupper+0x127>
c00084ad:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084b3:	eb 18                	jmp    c00084cd <ff_wtoupper+0x127>
c00084b5:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084bb:	eb 10                	jmp    c00084cd <ff_wtoupper+0x127>
c00084bd:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084c3:	eb 08                	jmp    c00084cd <ff_wtoupper+0x127>
c00084c5:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084cc:	90                   	nop
c00084cd:	eb 1c                	jmp    c00084eb <ff_wtoupper+0x145>
c00084cf:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084d5:	0f 85 fe fe ff ff    	jne    c00083d9 <ff_wtoupper+0x33>
c00084db:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084e0:	01 c0                	add    eax,eax
c00084e2:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084e6:	e9 ee fe ff ff       	jmp    c00083d9 <ff_wtoupper+0x33>
c00084eb:	90                   	nop
c00084ec:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084f9:	83 c4 10             	add    esp,0x10
c00084fc:	c3                   	ret    

c00084fd <psrc_set_converter>:
c00084fd:	56                   	push   esi
c00084fe:	89 d6                	mov    esi,edx
c0008500:	53                   	push   ebx
c0008501:	89 c3                	mov    ebx,eax
c0008503:	83 ec 0c             	sub    esp,0xc
c0008506:	52                   	push   edx
c0008507:	50                   	push   eax
c0008508:	e8 6f 55 00 00       	call   c000da7c <sinc_set_converter>
c000850d:	83 c4 10             	add    esp,0x10
c0008510:	85 c0                	test   eax,eax
c0008512:	74 25                	je     c0008539 <psrc_set_converter+0x3c>
c0008514:	50                   	push   eax
c0008515:	50                   	push   eax
c0008516:	56                   	push   esi
c0008517:	53                   	push   ebx
c0008518:	e8 17 5d 00 00       	call   c000e234 <zoh_set_converter>
c000851d:	83 c4 10             	add    esp,0x10
c0008520:	85 c0                	test   eax,eax
c0008522:	74 15                	je     c0008539 <psrc_set_converter+0x3c>
c0008524:	51                   	push   ecx
c0008525:	51                   	push   ecx
c0008526:	56                   	push   esi
c0008527:	53                   	push   ebx
c0008528:	e8 0f 11 00 00       	call   c000963c <linear_set_converter>
c000852d:	83 c4 10             	add    esp,0x10
c0008530:	ba 0a 00 00 00       	mov    edx,0xa
c0008535:	85 c0                	test   eax,eax
c0008537:	75 02                	jne    c000853b <psrc_set_converter+0x3e>
c0008539:	31 d2                	xor    edx,edx
c000853b:	89 d0                	mov    eax,edx
c000853d:	5a                   	pop    edx
c000853e:	5b                   	pop    ebx
c000853f:	5e                   	pop    esi
c0008540:	c3                   	ret    

c0008541 <src_delete>:
c0008541:	53                   	push   ebx
c0008542:	83 ec 08             	sub    esp,0x8
c0008545:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008549:	85 db                	test   ebx,ebx
c000854b:	74 29                	je     c0008576 <src_delete+0x35>
c000854d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008550:	85 c0                	test   eax,eax
c0008552:	74 0c                	je     c0008560 <src_delete+0x1f>
c0008554:	83 ec 0c             	sub    esp,0xc
c0008557:	50                   	push   eax
c0008558:	e8 0d 71 00 00       	call   c000f66a <free>
c000855d:	83 c4 10             	add    esp,0x10
c0008560:	50                   	push   eax
c0008561:	6a 3c                	push   0x3c
c0008563:	6a 00                	push   0x0
c0008565:	53                   	push   ebx
c0008566:	e8 59 81 ff ff       	call   c00006c4 <memset>
c000856b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000856e:	e8 f7 70 00 00       	call   c000f66a <free>
c0008573:	83 c4 10             	add    esp,0x10
c0008576:	31 c0                	xor    eax,eax
c0008578:	83 c4 08             	add    esp,0x8
c000857b:	5b                   	pop    ebx
c000857c:	c3                   	ret    

c000857d <src_process>:
c000857d:	55                   	push   ebp
c000857e:	57                   	push   edi
c000857f:	56                   	push   esi
c0008580:	53                   	push   ebx
c0008581:	83 ec 1c             	sub    esp,0x1c
c0008584:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008588:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000858c:	85 ed                	test   ebp,ebp
c000858e:	0f 84 6f 01 00 00    	je     c0008703 <src_process+0x186>
c0008594:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008598:	0f 84 6c 01 00 00    	je     c000870a <src_process+0x18d>
c000859e:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00085a2:	0f 84 62 01 00 00    	je     c000870a <src_process+0x18d>
c00085a8:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00085af:	0f 85 5c 01 00 00    	jne    c0008711 <src_process+0x194>
c00085b5:	85 db                	test   ebx,ebx
c00085b7:	0f 84 5b 01 00 00    	je     c0008718 <src_process+0x19b>
c00085bd:	8b 33                	mov    esi,DWORD PTR [ebx]
c00085bf:	85 f6                	test   esi,esi
c00085c1:	0f 84 58 01 00 00    	je     c000871f <src_process+0x1a2>
c00085c7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00085ca:	85 ff                	test   edi,edi
c00085cc:	0f 84 4d 01 00 00    	je     c000871f <src_process+0x1a2>
c00085d2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00085d5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00085d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085e0:	68 00 00 70 3f       	push   0x3f700000
c00085e5:	6a 00                	push   0x0
c00085e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085ef:	e8 7b ed 01 00       	call   c002736f <__ltdf2>
c00085f4:	83 c4 10             	add    esp,0x10
c00085f7:	85 c0                	test   eax,eax
c00085f9:	0f 88 27 01 00 00    	js     c0008726 <src_process+0x1a9>
c00085ff:	68 00 00 70 40       	push   0x40700000
c0008604:	6a 00                	push   0x0
c0008606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000860a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000860e:	e8 3e ed 01 00       	call   c0027351 <__gtdf2>
c0008613:	83 c4 10             	add    esp,0x10
c0008616:	85 c0                	test   eax,eax
c0008618:	0f 8f 08 01 00 00    	jg     c0008726 <src_process+0x1a9>
c000861e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008622:	79 07                	jns    c000862b <src_process+0xae>
c0008624:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000862b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000862e:	85 c0                	test   eax,eax
c0008630:	79 50                	jns    c0008682 <src_process+0x105>
c0008632:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008639:	39 fe                	cmp    esi,edi
c000863b:	72 37                	jb     c0008674 <src_process+0xf7>
c000863d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008644:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000864b:	68 00 00 70 3f       	push   0x3f700000
c0008650:	6a 00                	push   0x0
c0008652:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008655:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008658:	e8 12 ed 01 00       	call   c002736f <__ltdf2>
c000865d:	83 c4 10             	add    esp,0x10
c0008660:	85 c0                	test   eax,eax
c0008662:	79 37                	jns    c000869b <src_process+0x11e>
c0008664:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008668:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000866c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000866f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008672:	eb 27                	jmp    c000869b <src_process+0x11e>
c0008674:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008677:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000867b:	8d 04 86             	lea    eax,[esi+eax*4]
c000867e:	39 c7                	cmp    edi,eax
c0008680:	eb 0d                	jmp    c000868f <src_process+0x112>
c0008682:	39 fe                	cmp    esi,edi
c0008684:	72 ee                	jb     c0008674 <src_process+0xf7>
c0008686:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000868a:	8d 04 87             	lea    eax,[edi+eax*4]
c000868d:	39 c6                	cmp    esi,eax
c000868f:	73 ac                	jae    c000863d <src_process+0xc0>
c0008691:	b8 10 00 00 00       	mov    eax,0x10
c0008696:	e9 90 00 00 00       	jmp    c000872b <src_process+0x1ae>
c000869b:	83 ec 10             	sub    esp,0x10
c000869e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00086a1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00086a4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00086a7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00086aa:	e8 c5 e3 01 00       	call   c0026a74 <__subdf3>
c00086af:	83 c4 18             	add    esp,0x18
c00086b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00086b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00086ba:	52                   	push   edx
c00086bb:	50                   	push   eax
c00086bc:	e8 3f ee 01 00       	call   c0027500 <fabs>
c00086c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086c5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00086c9:	83 c4 10             	add    esp,0x10
c00086cc:	68 af 03 d2 3c       	push   0x3cd203af
c00086d1:	68 16 56 e7 9e       	push   0x9ee75616
c00086d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086de:	e8 8c ec 01 00       	call   c002736f <__ltdf2>
c00086e3:	83 c4 10             	add    esp,0x10
c00086e6:	85 c0                	test   eax,eax
c00086e8:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086ec:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086f0:	79 05                	jns    c00086f7 <src_process+0x17a>
c00086f2:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086f5:	eb 03                	jmp    c00086fa <src_process+0x17d>
c00086f7:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086fa:	83 c4 1c             	add    esp,0x1c
c00086fd:	5b                   	pop    ebx
c00086fe:	5e                   	pop    esi
c00086ff:	5f                   	pop    edi
c0008700:	5d                   	pop    ebp
c0008701:	ff e0                	jmp    eax
c0008703:	b8 02 00 00 00       	mov    eax,0x2
c0008708:	eb 21                	jmp    c000872b <src_process+0x1ae>
c000870a:	b8 07 00 00 00       	mov    eax,0x7
c000870f:	eb 1a                	jmp    c000872b <src_process+0x1ae>
c0008711:	b8 12 00 00 00       	mov    eax,0x12
c0008716:	eb 13                	jmp    c000872b <src_process+0x1ae>
c0008718:	b8 03 00 00 00       	mov    eax,0x3
c000871d:	eb 0c                	jmp    c000872b <src_process+0x1ae>
c000871f:	b8 04 00 00 00       	mov    eax,0x4
c0008724:	eb 05                	jmp    c000872b <src_process+0x1ae>
c0008726:	b8 06 00 00 00       	mov    eax,0x6
c000872b:	83 c4 1c             	add    esp,0x1c
c000872e:	5b                   	pop    ebx
c000872f:	5e                   	pop    esi
c0008730:	5f                   	pop    edi
c0008731:	5d                   	pop    ebp
c0008732:	c3                   	ret    

c0008733 <src_callback_read>:
c0008733:	55                   	push   ebp
c0008734:	57                   	push   edi
c0008735:	56                   	push   esi
c0008736:	53                   	push   ebx
c0008737:	83 ec 3c             	sub    esp,0x3c
c000873a:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000873e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008742:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008746:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c000874a:	85 ed                	test   ebp,ebp
c000874c:	0f 8e 52 01 00 00    	jle    c00088a4 <src_callback_read+0x171>
c0008752:	85 db                	test   ebx,ebx
c0008754:	0f 84 4a 01 00 00    	je     c00088a4 <src_callback_read+0x171>
c000875a:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008761:	74 0c                	je     c000876f <src_callback_read+0x3c>
c0008763:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c000876a:	e9 35 01 00 00       	jmp    c00088a4 <src_callback_read+0x171>
c000876f:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008773:	75 0c                	jne    c0008781 <src_callback_read+0x4e>
c0008775:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000877c:	e9 23 01 00 00       	jmp    c00088a4 <src_callback_read+0x171>
c0008781:	51                   	push   ecx
c0008782:	6a 24                	push   0x24
c0008784:	6a 00                	push   0x0
c0008786:	8d 44 24 18          	lea    eax,[esp+0x18]
c000878a:	50                   	push   eax
c000878b:	e8 34 7f ff ff       	call   c00006c4 <memset>
c0008790:	83 c4 10             	add    esp,0x10
c0008793:	68 00 00 70 3f       	push   0x3f700000
c0008798:	6a 00                	push   0x0
c000879a:	57                   	push   edi
c000879b:	56                   	push   esi
c000879c:	e8 ce eb 01 00       	call   c002736f <__ltdf2>
c00087a1:	83 c4 10             	add    esp,0x10
c00087a4:	85 c0                	test   eax,eax
c00087a6:	78 3e                	js     c00087e6 <src_callback_read+0xb3>
c00087a8:	68 00 00 70 40       	push   0x40700000
c00087ad:	6a 00                	push   0x0
c00087af:	57                   	push   edi
c00087b0:	56                   	push   esi
c00087b1:	e8 9b eb 01 00       	call   c0027351 <__gtdf2>
c00087b6:	83 c4 10             	add    esp,0x10
c00087b9:	85 c0                	test   eax,eax
c00087bb:	7f 29                	jg     c00087e6 <src_callback_read+0xb3>
c00087bd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00087c1:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00087c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00087c9:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00087cd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00087d0:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00087d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087d8:	31 f6                	xor    esi,esi
c00087da:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087e1:	e9 97 00 00 00       	jmp    c000887d <src_callback_read+0x14a>
c00087e6:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087ed:	e9 b2 00 00 00       	jmp    c00088a4 <src_callback_read+0x171>
c00087f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087fa:	52                   	push   edx
c00087fb:	52                   	push   edx
c00087fc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008800:	50                   	push   eax
c0008801:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008804:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008807:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000880b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000880f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008813:	83 c4 10             	add    esp,0x10
c0008816:	85 c0                	test   eax,eax
c0008818:	75 08                	jne    c0008822 <src_callback_read+0xef>
c000881a:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008822:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008829:	50                   	push   eax
c000882a:	50                   	push   eax
c000882b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000882f:	50                   	push   eax
c0008830:	53                   	push   ebx
c0008831:	e8 47 fd ff ff       	call   c000857d <src_process>
c0008836:	83 c4 10             	add    esp,0x10
c0008839:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008840:	85 c0                	test   eax,eax
c0008842:	75 49                	jne    c000888d <src_callback_read+0x15a>
c0008844:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008848:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000884b:	89 f9                	mov    ecx,edi
c000884d:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008851:	0f af ca             	imul   ecx,edx
c0008854:	c1 e1 02             	shl    ecx,0x2
c0008857:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c000885b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000885f:	0f af d1             	imul   edx,ecx
c0008862:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008866:	c1 e2 02             	shl    edx,0x2
c0008869:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c000886d:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008870:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008875:	74 12                	je     c0008889 <src_callback_read+0x156>
c0008877:	39 d5                	cmp    ebp,edx
c0008879:	7e 14                	jle    c000888f <src_callback_read+0x15c>
c000887b:	89 d6                	mov    esi,edx
c000887d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008882:	75 9e                	jne    c0008822 <src_callback_read+0xef>
c0008884:	e9 69 ff ff ff       	jmp    c00087f2 <src_callback_read+0xbf>
c0008889:	85 c9                	test   ecx,ecx
c000888b:	75 ea                	jne    c0008877 <src_callback_read+0x144>
c000888d:	89 f2                	mov    edx,esi
c000888f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008893:	85 c0                	test   eax,eax
c0008895:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008898:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000889c:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000889f:	74 05                	je     c00088a6 <src_callback_read+0x173>
c00088a1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00088a4:	31 d2                	xor    edx,edx
c00088a6:	83 c4 3c             	add    esp,0x3c
c00088a9:	89 d0                	mov    eax,edx
c00088ab:	5b                   	pop    ebx
c00088ac:	5e                   	pop    esi
c00088ad:	5f                   	pop    edi
c00088ae:	5d                   	pop    ebp
c00088af:	c3                   	ret    

c00088b0 <src_set_ratio>:
c00088b0:	57                   	push   edi
c00088b1:	ba 02 00 00 00       	mov    edx,0x2
c00088b6:	56                   	push   esi
c00088b7:	53                   	push   ebx
c00088b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00088c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00088c4:	85 db                	test   ebx,ebx
c00088c6:	74 4c                	je     c0008914 <src_set_ratio+0x64>
c00088c8:	ba 07 00 00 00       	mov    edx,0x7
c00088cd:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00088d1:	74 41                	je     c0008914 <src_set_ratio+0x64>
c00088d3:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00088d7:	74 3b                	je     c0008914 <src_set_ratio+0x64>
c00088d9:	68 00 00 70 3f       	push   0x3f700000
c00088de:	6a 00                	push   0x0
c00088e0:	57                   	push   edi
c00088e1:	56                   	push   esi
c00088e2:	e8 88 ea 01 00       	call   c002736f <__ltdf2>
c00088e7:	83 c4 10             	add    esp,0x10
c00088ea:	ba 06 00 00 00       	mov    edx,0x6
c00088ef:	85 c0                	test   eax,eax
c00088f1:	78 21                	js     c0008914 <src_set_ratio+0x64>
c00088f3:	68 00 00 70 40       	push   0x40700000
c00088f8:	6a 00                	push   0x0
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	e8 50 ea 01 00       	call   c0027351 <__gtdf2>
c0008901:	83 c4 10             	add    esp,0x10
c0008904:	ba 06 00 00 00       	mov    edx,0x6
c0008909:	85 c0                	test   eax,eax
c000890b:	7f 07                	jg     c0008914 <src_set_ratio+0x64>
c000890d:	89 33                	mov    DWORD PTR [ebx],esi
c000890f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008912:	31 d2                	xor    edx,edx
c0008914:	5b                   	pop    ebx
c0008915:	89 d0                	mov    eax,edx
c0008917:	5e                   	pop    esi
c0008918:	5f                   	pop    edi
c0008919:	c3                   	ret    

c000891a <src_get_channels>:
c000891a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000891e:	b8 02 00 00 00       	mov    eax,0x2
c0008923:	85 d2                	test   edx,edx
c0008925:	74 14                	je     c000893b <src_get_channels+0x21>
c0008927:	b8 07 00 00 00       	mov    eax,0x7
c000892c:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008930:	74 09                	je     c000893b <src_get_channels+0x21>
c0008932:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008936:	74 03                	je     c000893b <src_get_channels+0x21>
c0008938:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000893b:	c3                   	ret    

c000893c <src_reset>:
c000893c:	53                   	push   ebx
c000893d:	b8 02 00 00 00       	mov    eax,0x2
c0008942:	83 ec 08             	sub    esp,0x8
c0008945:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008949:	85 db                	test   ebx,ebx
c000894b:	74 36                	je     c0008983 <src_reset+0x47>
c000894d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008950:	85 c0                	test   eax,eax
c0008952:	74 09                	je     c000895d <src_reset+0x21>
c0008954:	83 ec 0c             	sub    esp,0xc
c0008957:	53                   	push   ebx
c0008958:	ff d0                	call   eax
c000895a:	83 c4 10             	add    esp,0x10
c000895d:	31 c0                	xor    eax,eax
c000895f:	31 d2                	xor    edx,edx
c0008961:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008964:	89 03                	mov    DWORD PTR [ebx],eax
c0008966:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008969:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000896c:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008973:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000897a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008981:	31 c0                	xor    eax,eax
c0008983:	83 c4 08             	add    esp,0x8
c0008986:	5b                   	pop    ebx
c0008987:	c3                   	ret    

c0008988 <src_new>:
c0008988:	57                   	push   edi
c0008989:	56                   	push   esi
c000898a:	53                   	push   ebx
c000898b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000898f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008993:	85 f6                	test   esi,esi
c0008995:	74 73                	je     c0008a0a <src_new+0x82>
c0008997:	85 ff                	test   edi,edi
c0008999:	7f 08                	jg     c00089a3 <src_new+0x1b>
c000899b:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c00089a1:	eb 1e                	jmp    c00089c1 <src_new+0x39>
c00089a3:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00089a9:	50                   	push   eax
c00089aa:	50                   	push   eax
c00089ab:	6a 3c                	push   0x3c
c00089ad:	6a 01                	push   0x1
c00089af:	e8 d6 6c 00 00       	call   c000f68a <calloc>
c00089b4:	83 c4 10             	add    esp,0x10
c00089b7:	89 c3                	mov    ebx,eax
c00089b9:	85 c0                	test   eax,eax
c00089bb:	75 10                	jne    c00089cd <src_new+0x45>
c00089bd:	85 f6                	test   esi,esi
c00089bf:	75 04                	jne    c00089c5 <src_new+0x3d>
c00089c1:	31 db                	xor    ebx,ebx
c00089c3:	eb 4b                	jmp    c0008a10 <src_new+0x88>
c00089c5:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00089cb:	eb 43                	jmp    c0008a10 <src_new+0x88>
c00089cd:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00089d0:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c00089d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089db:	e8 1d fb ff ff       	call   c00084fd <psrc_set_converter>
c00089e0:	85 c0                	test   eax,eax
c00089e2:	74 18                	je     c00089fc <src_new+0x74>
c00089e4:	85 f6                	test   esi,esi
c00089e6:	74 06                	je     c00089ee <src_new+0x66>
c00089e8:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089ee:	83 ec 0c             	sub    esp,0xc
c00089f1:	53                   	push   ebx
c00089f2:	31 db                	xor    ebx,ebx
c00089f4:	e8 71 6c 00 00       	call   c000f66a <free>
c00089f9:	83 c4 10             	add    esp,0x10
c00089fc:	83 ec 0c             	sub    esp,0xc
c00089ff:	53                   	push   ebx
c0008a00:	e8 37 ff ff ff       	call   c000893c <src_reset>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	eb 06                	jmp    c0008a10 <src_new+0x88>
c0008a0a:	85 ff                	test   edi,edi
c0008a0c:	7f 9b                	jg     c00089a9 <src_new+0x21>
c0008a0e:	eb b1                	jmp    c00089c1 <src_new+0x39>
c0008a10:	89 d8                	mov    eax,ebx
c0008a12:	5b                   	pop    ebx
c0008a13:	5e                   	pop    esi
c0008a14:	5f                   	pop    edi
c0008a15:	c3                   	ret    

c0008a16 <src_callback_new>:
c0008a16:	56                   	push   esi
c0008a17:	53                   	push   ebx
c0008a18:	53                   	push   ebx
c0008a19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008a1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a21:	85 f6                	test   esi,esi
c0008a23:	75 0e                	jne    c0008a33 <src_callback_new+0x1d>
c0008a25:	31 db                	xor    ebx,ebx
c0008a27:	85 c0                	test   eax,eax
c0008a29:	74 47                	je     c0008a72 <src_callback_new+0x5c>
c0008a2b:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008a31:	eb 3f                	jmp    c0008a72 <src_callback_new+0x5c>
c0008a33:	85 c0                	test   eax,eax
c0008a35:	74 06                	je     c0008a3d <src_callback_new+0x27>
c0008a37:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a3d:	51                   	push   ecx
c0008a3e:	50                   	push   eax
c0008a3f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a43:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a47:	e8 3c ff ff ff       	call   c0008988 <src_new>
c0008a4c:	83 c4 10             	add    esp,0x10
c0008a4f:	89 c3                	mov    ebx,eax
c0008a51:	85 c0                	test   eax,eax
c0008a53:	74 1d                	je     c0008a72 <src_callback_new+0x5c>
c0008a55:	83 ec 0c             	sub    esp,0xc
c0008a58:	50                   	push   eax
c0008a59:	e8 de fe ff ff       	call   c000893c <src_reset>
c0008a5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a62:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a69:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a6c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a6f:	83 c4 10             	add    esp,0x10
c0008a72:	89 d8                	mov    eax,ebx
c0008a74:	5a                   	pop    edx
c0008a75:	5b                   	pop    ebx
c0008a76:	5e                   	pop    esi
c0008a77:	c3                   	ret    

c0008a78 <src_get_name>:
c0008a78:	53                   	push   ebx
c0008a79:	83 ec 14             	sub    esp,0x14
c0008a7c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a80:	53                   	push   ebx
c0008a81:	e8 d0 4f 00 00       	call   c000da56 <sinc_get_name>
c0008a86:	83 c4 10             	add    esp,0x10
c0008a89:	85 c0                	test   eax,eax
c0008a8b:	75 1d                	jne    c0008aaa <src_get_name+0x32>
c0008a8d:	83 ec 0c             	sub    esp,0xc
c0008a90:	53                   	push   ebx
c0008a91:	e8 80 57 00 00       	call   c000e216 <zoh_get_name>
c0008a96:	83 c4 10             	add    esp,0x10
c0008a99:	85 c0                	test   eax,eax
c0008a9b:	75 0d                	jne    c0008aaa <src_get_name+0x32>
c0008a9d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008aa1:	83 c4 08             	add    esp,0x8
c0008aa4:	5b                   	pop    ebx
c0008aa5:	e9 74 0b 00 00       	jmp    c000961e <linear_get_name>
c0008aaa:	83 c4 08             	add    esp,0x8
c0008aad:	5b                   	pop    ebx
c0008aae:	c3                   	ret    

c0008aaf <src_get_description>:
c0008aaf:	53                   	push   ebx
c0008ab0:	83 ec 14             	sub    esp,0x14
c0008ab3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008ab7:	53                   	push   ebx
c0008ab8:	e8 ac 4f 00 00       	call   c000da69 <sinc_get_description>
c0008abd:	83 c4 10             	add    esp,0x10
c0008ac0:	85 c0                	test   eax,eax
c0008ac2:	75 1d                	jne    c0008ae1 <src_get_description+0x32>
c0008ac4:	83 ec 0c             	sub    esp,0xc
c0008ac7:	53                   	push   ebx
c0008ac8:	e8 58 57 00 00       	call   c000e225 <zoh_get_description>
c0008acd:	83 c4 10             	add    esp,0x10
c0008ad0:	85 c0                	test   eax,eax
c0008ad2:	75 0d                	jne    c0008ae1 <src_get_description+0x32>
c0008ad4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008ad8:	83 c4 08             	add    esp,0x8
c0008adb:	5b                   	pop    ebx
c0008adc:	e9 4c 0b 00 00       	jmp    c000962d <linear_get_description>
c0008ae1:	83 c4 08             	add    esp,0x8
c0008ae4:	5b                   	pop    ebx
c0008ae5:	c3                   	ret    

c0008ae6 <src_get_version>:
c0008ae6:	b8 60 87 02 c0       	mov    eax,0xc0028760
c0008aeb:	c3                   	ret    

c0008aec <src_is_valid_ratio>:
c0008aec:	83 ec 1c             	sub    esp,0x1c
c0008aef:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008af3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008af7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008afb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008aff:	68 00 00 70 3f       	push   0x3f700000
c0008b04:	6a 00                	push   0x0
c0008b06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b0e:	e8 5c e8 01 00       	call   c002736f <__ltdf2>
c0008b13:	83 c4 10             	add    esp,0x10
c0008b16:	31 d2                	xor    edx,edx
c0008b18:	85 c0                	test   eax,eax
c0008b1a:	78 1e                	js     c0008b3a <src_is_valid_ratio+0x4e>
c0008b1c:	68 00 00 70 40       	push   0x40700000
c0008b21:	6a 00                	push   0x0
c0008b23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b2b:	e8 21 e8 01 00       	call   c0027351 <__gtdf2>
c0008b30:	31 d2                	xor    edx,edx
c0008b32:	83 c4 10             	add    esp,0x10
c0008b35:	85 c0                	test   eax,eax
c0008b37:	0f 9e c2             	setle  dl
c0008b3a:	89 d0                	mov    eax,edx
c0008b3c:	83 c4 1c             	add    esp,0x1c
c0008b3f:	c3                   	ret    

c0008b40 <src_error>:
c0008b40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b44:	31 c0                	xor    eax,eax
c0008b46:	85 d2                	test   edx,edx
c0008b48:	74 03                	je     c0008b4d <src_error+0xd>
c0008b4a:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b4d:	c3                   	ret    

c0008b4e <src_strerror>:
c0008b4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b52:	31 c0                	xor    eax,eax
c0008b54:	83 fa 17             	cmp    edx,0x17
c0008b57:	77 07                	ja     c0008b60 <src_strerror+0x12>
c0008b59:	8b 04 95 c0 8b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7440]
c0008b60:	c3                   	ret    

c0008b61 <src_simple>:
c0008b61:	56                   	push   esi
c0008b62:	53                   	push   ebx
c0008b63:	83 ec 18             	sub    esp,0x18
c0008b66:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b6a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b6e:	50                   	push   eax
c0008b6f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b73:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b77:	e8 0c fe ff ff       	call   c0008988 <src_new>
c0008b7c:	83 c4 10             	add    esp,0x10
c0008b7f:	85 c0                	test   eax,eax
c0008b81:	75 06                	jne    c0008b89 <src_simple+0x28>
c0008b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b87:	eb 25                	jmp    c0008bae <src_simple+0x4d>
c0008b89:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b90:	89 c3                	mov    ebx,eax
c0008b92:	50                   	push   eax
c0008b93:	50                   	push   eax
c0008b94:	56                   	push   esi
c0008b95:	53                   	push   ebx
c0008b96:	e8 e2 f9 ff ff       	call   c000857d <src_process>
c0008b9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ba2:	e8 9a f9 ff ff       	call   c0008541 <src_delete>
c0008ba7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bab:	83 c4 10             	add    esp,0x10
c0008bae:	83 c4 14             	add    esp,0x14
c0008bb1:	5b                   	pop    ebx
c0008bb2:	5e                   	pop    esi
c0008bb3:	c3                   	ret    

c0008bb4 <src_short_to_float_array>:
c0008bb4:	53                   	push   ebx
c0008bb5:	83 ec 18             	sub    esp,0x18
c0008bb8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bbc:	85 db                	test   ebx,ebx
c0008bbe:	74 54                	je     c0008c14 <src_short_to_float_array+0x60>
c0008bc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bc4:	4b                   	dec    ebx
c0008bc5:	83 ec 0c             	sub    esp,0xc
c0008bc8:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008bcc:	50                   	push   eax
c0008bcd:	e8 31 e5 01 00       	call   c0027103 <__floatsidf>
c0008bd2:	83 c4 10             	add    esp,0x10
c0008bd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bd9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008bdd:	68 00 00 00 3f       	push   0x3f000000
c0008be2:	6a 00                	push   0x0
c0008be4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008be8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bec:	e8 af de 01 00       	call   c0026aa0 <__muldf3>
c0008bf1:	59                   	pop    ecx
c0008bf2:	59                   	pop    ecx
c0008bf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bf7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c03:	e8 6b e7 01 00       	call   c0027373 <__truncdfsf2>
c0008c08:	83 c4 10             	add    esp,0x10
c0008c0b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008c0f:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008c12:	eb a8                	jmp    c0008bbc <src_short_to_float_array+0x8>
c0008c14:	83 c4 18             	add    esp,0x18
c0008c17:	5b                   	pop    ebx
c0008c18:	c3                   	ret    

c0008c19 <src_float_to_short_array>:
c0008c19:	56                   	push   esi
c0008c1a:	53                   	push   ebx
c0008c1b:	83 ec 14             	sub    esp,0x14
c0008c1e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008c22:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c26:	85 db                	test   ebx,ebx
c0008c28:	0f 84 a4 00 00 00    	je     c0008cd2 <src_float_to_short_array+0xb9>
c0008c2e:	83 ec 0c             	sub    esp,0xc
c0008c31:	4b                   	dec    ebx
c0008c32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008c36:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c39:	e8 59 e8 01 00       	call   c0027497 <__extendsfdf2>
c0008c3e:	83 c4 10             	add    esp,0x10
c0008c41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c49:	68 00 00 e0 41       	push   0x41e00000
c0008c4e:	6a 00                	push   0x0
c0008c50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c58:	e8 43 de 01 00       	call   c0026aa0 <__muldf3>
c0008c5d:	83 c4 10             	add    esp,0x10
c0008c60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c68:	68 ff ff df 41       	push   0x41dfffff
c0008c6d:	68 00 00 c0 ff       	push   0xffc00000
c0008c72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c7a:	e8 ee e6 01 00       	call   c002736d <__gedf2>
c0008c7f:	83 c4 10             	add    esp,0x10
c0008c82:	85 c0                	test   eax,eax
c0008c84:	78 08                	js     c0008c8e <src_float_to_short_array+0x75>
c0008c86:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c8c:	eb 98                	jmp    c0008c26 <src_float_to_short_array+0xd>
c0008c8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008c93:	6a 00                	push   0x0
c0008c95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c9d:	e8 cf e6 01 00       	call   c0027371 <__ledf2>
c0008ca2:	83 c4 10             	add    esp,0x10
c0008ca5:	85 c0                	test   eax,eax
c0008ca7:	7f 0b                	jg     c0008cb4 <src_float_to_short_array+0x9b>
c0008ca9:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008caf:	e9 72 ff ff ff       	jmp    c0008c26 <src_float_to_short_array+0xd>
c0008cb4:	50                   	push   eax
c0008cb5:	50                   	push   eax
c0008cb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cbe:	e8 5d e8 01 00       	call   c0027520 <lrint>
c0008cc3:	83 c4 10             	add    esp,0x10
c0008cc6:	c1 f8 10             	sar    eax,0x10
c0008cc9:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ccd:	e9 54 ff ff ff       	jmp    c0008c26 <src_float_to_short_array+0xd>
c0008cd2:	83 c4 14             	add    esp,0x14
c0008cd5:	5b                   	pop    ebx
c0008cd6:	5e                   	pop    esi
c0008cd7:	c3                   	ret    

c0008cd8 <src_int_to_float_array>:
c0008cd8:	53                   	push   ebx
c0008cd9:	83 ec 18             	sub    esp,0x18
c0008cdc:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ce0:	85 db                	test   ebx,ebx
c0008ce2:	74 52                	je     c0008d36 <src_int_to_float_array+0x5e>
c0008ce4:	83 ec 0c             	sub    esp,0xc
c0008ce7:	4b                   	dec    ebx
c0008ce8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cec:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cef:	e8 0f e4 01 00       	call   c0027103 <__floatsidf>
c0008cf4:	83 c4 10             	add    esp,0x10
c0008cf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cfb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cff:	68 00 00 00 3e       	push   0x3e000000
c0008d04:	6a 00                	push   0x0
c0008d06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d0e:	e8 8d dd 01 00       	call   c0026aa0 <__muldf3>
c0008d13:	59                   	pop    ecx
c0008d14:	59                   	pop    ecx
c0008d15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008d19:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 49 e6 01 00       	call   c0027373 <__truncdfsf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d31:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008d34:	eb aa                	jmp    c0008ce0 <src_int_to_float_array+0x8>
c0008d36:	83 c4 18             	add    esp,0x18
c0008d39:	5b                   	pop    ebx
c0008d3a:	c3                   	ret    

c0008d3b <src_float_to_int_array>:
c0008d3b:	56                   	push   esi
c0008d3c:	53                   	push   ebx
c0008d3d:	83 ec 14             	sub    esp,0x14
c0008d40:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d44:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d48:	85 db                	test   ebx,ebx
c0008d4a:	0f 84 a2 00 00 00    	je     c0008df2 <src_float_to_int_array+0xb7>
c0008d50:	83 ec 0c             	sub    esp,0xc
c0008d53:	4b                   	dec    ebx
c0008d54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d58:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d5b:	e8 37 e7 01 00       	call   c0027497 <__extendsfdf2>
c0008d60:	83 c4 10             	add    esp,0x10
c0008d63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d6b:	68 00 00 e0 41       	push   0x41e00000
c0008d70:	6a 00                	push   0x0
c0008d72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d7a:	e8 21 dd 01 00       	call   c0026aa0 <__muldf3>
c0008d7f:	83 c4 10             	add    esp,0x10
c0008d82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d8a:	68 ff ff df 41       	push   0x41dfffff
c0008d8f:	68 00 00 c0 ff       	push   0xffc00000
c0008d94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d9c:	e8 cc e5 01 00       	call   c002736d <__gedf2>
c0008da1:	83 c4 10             	add    esp,0x10
c0008da4:	85 c0                	test   eax,eax
c0008da6:	78 09                	js     c0008db1 <src_float_to_int_array+0x76>
c0008da8:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008daf:	eb 97                	jmp    c0008d48 <src_float_to_int_array+0xd>
c0008db1:	68 00 00 e0 c1       	push   0xc1e00000
c0008db6:	6a 00                	push   0x0
c0008db8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc0:	e8 ac e5 01 00       	call   c0027371 <__ledf2>
c0008dc5:	83 c4 10             	add    esp,0x10
c0008dc8:	85 c0                	test   eax,eax
c0008dca:	7f 0c                	jg     c0008dd8 <src_float_to_int_array+0x9d>
c0008dcc:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008dd3:	e9 70 ff ff ff       	jmp    c0008d48 <src_float_to_int_array+0xd>
c0008dd8:	50                   	push   eax
c0008dd9:	50                   	push   eax
c0008dda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de2:	e8 39 e7 01 00       	call   c0027520 <lrint>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008ded:	e9 56 ff ff ff       	jmp    c0008d48 <src_float_to_int_array+0xd>
c0008df2:	83 c4 14             	add    esp,0x14
c0008df5:	5b                   	pop    ebx
c0008df6:	5e                   	pop    esi
c0008df7:	c3                   	ret    

c0008df8 <linear_vari_process>:
c0008df8:	55                   	push   ebp
c0008df9:	31 d2                	xor    edx,edx
c0008dfb:	57                   	push   edi
c0008dfc:	56                   	push   esi
c0008dfd:	53                   	push   ebx
c0008dfe:	83 ec 3c             	sub    esp,0x3c
c0008e01:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008e05:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008e09:	0f 8e d3 07 00 00    	jle    c00095e2 <linear_vari_process+0x7ea>
c0008e0f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e13:	ba 05 00 00 00       	mov    edx,0x5
c0008e18:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008e1b:	85 db                	test   ebx,ebx
c0008e1d:	0f 84 bf 07 00 00    	je     c00095e2 <linear_vari_process+0x7ea>
c0008e23:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008e26:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008e2a:	74 19                	je     c0008e45 <linear_vari_process+0x4d>
c0008e2c:	31 d2                	xor    edx,edx
c0008e2e:	39 c2                	cmp    edx,eax
c0008e30:	7d 0c                	jge    c0008e3e <linear_vari_process+0x46>
c0008e32:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e34:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008e37:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e3b:	42                   	inc    edx
c0008e3c:	eb f0                	jmp    c0008e2e <linear_vari_process+0x36>
c0008e3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e45:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e48:	0f af d0             	imul   edx,eax
c0008e4b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e4e:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e52:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e59:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e5c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e63:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e67:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e6c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e74:	68 00 00 70 3f       	push   0x3f700000
c0008e79:	6a 00                	push   0x0
c0008e7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e83:	e8 e7 e4 01 00       	call   c002736f <__ltdf2>
c0008e88:	83 c4 10             	add    esp,0x10
c0008e8b:	ba 16 00 00 00       	mov    edx,0x16
c0008e90:	85 c0                	test   eax,eax
c0008e92:	0f 88 4a 07 00 00    	js     c00095e2 <linear_vari_process+0x7ea>
c0008e98:	68 00 00 70 40       	push   0x40700000
c0008e9d:	6a 00                	push   0x0
c0008e9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ea3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ea7:	e8 a5 e4 01 00       	call   c0027351 <__gtdf2>
c0008eac:	83 c4 10             	add    esp,0x10
c0008eaf:	ba 16 00 00 00       	mov    edx,0x16
c0008eb4:	85 c0                	test   eax,eax
c0008eb6:	0f 8f 26 07 00 00    	jg     c00095e2 <linear_vari_process+0x7ea>
c0008ebc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ec0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008ec3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008ec6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008eca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ece:	68 00 00 f0 3f       	push   0x3ff00000
c0008ed3:	6a 00                	push   0x0
c0008ed5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008edd:	e8 8d e4 01 00       	call   c002736f <__ltdf2>
c0008ee2:	83 c4 10             	add    esp,0x10
c0008ee5:	85 c0                	test   eax,eax
c0008ee7:	0f 89 89 02 00 00    	jns    c0009176 <linear_vari_process+0x37e>
c0008eed:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008ef0:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008ef3:	0f 8d 7d 02 00 00    	jge    c0009176 <linear_vari_process+0x37e>
c0008ef9:	83 ec 0c             	sub    esp,0xc
c0008efc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008eff:	e8 ff e1 01 00       	call   c0027103 <__floatsidf>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f0a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008f0e:	68 00 00 f0 3f       	push   0x3ff00000
c0008f13:	6a 00                	push   0x0
c0008f15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1d:	e8 01 d5 01 00       	call   c0026423 <__adddf3>
c0008f22:	83 c4 10             	add    esp,0x10
c0008f25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f2d:	52                   	push   edx
c0008f2e:	50                   	push   eax
c0008f2f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f33:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f37:	e8 64 db 01 00       	call   c0026aa0 <__muldf3>
c0008f3c:	5d                   	pop    ebp
c0008f3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f41:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f45:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f48:	e8 b6 e1 01 00       	call   c0027103 <__floatsidf>
c0008f4d:	83 c4 10             	add    esp,0x10
c0008f50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f54:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f58:	52                   	push   edx
c0008f59:	50                   	push   eax
c0008f5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f62:	e8 bc d4 01 00       	call   c0026423 <__adddf3>
c0008f67:	59                   	pop    ecx
c0008f68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f6c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f70:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f73:	e8 8b e1 01 00       	call   c0027103 <__floatsidf>
c0008f78:	83 c4 10             	add    esp,0x10
c0008f7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f7f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f83:	52                   	push   edx
c0008f84:	50                   	push   eax
c0008f85:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f89:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f8d:	e8 db e3 01 00       	call   c002736d <__gedf2>
c0008f92:	83 c4 10             	add    esp,0x10
c0008f95:	85 c0                	test   eax,eax
c0008f97:	0f 89 d9 01 00 00    	jns    c0009176 <linear_vari_process+0x37e>
c0008f9d:	85 ff                	test   edi,edi
c0008f9f:	0f 8e f4 00 00 00    	jle    c0009099 <linear_vari_process+0x2a1>
c0008fa5:	83 ec 10             	sub    esp,0x10
c0008fa8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fab:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fae:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008fb2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008fb5:	ff 30                	push   DWORD PTR [eax]
c0008fb7:	e8 b8 da 01 00       	call   c0026a74 <__subdf3>
c0008fbc:	83 c4 18             	add    esp,0x18
c0008fbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fc7:	52                   	push   edx
c0008fc8:	50                   	push   eax
c0008fc9:	e8 32 e5 01 00       	call   c0027500 <fabs>
c0008fce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008fd6:	83 c4 10             	add    esp,0x10
c0008fd9:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fde:	68 23 42 92 0c       	push   0xc924223
c0008fe3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fe7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008feb:	e8 61 e3 01 00       	call   c0027351 <__gtdf2>
c0008ff0:	83 c4 10             	add    esp,0x10
c0008ff3:	85 c0                	test   eax,eax
c0008ff5:	0f 8e 9e 00 00 00    	jle    c0009099 <linear_vari_process+0x2a1>
c0008ffb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fff:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009002:	8b 00                	mov    eax,DWORD PTR [eax]
c0009004:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009008:	89 04 24             	mov    DWORD PTR [esp],eax
c000900b:	52                   	push   edx
c000900c:	50                   	push   eax
c000900d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009010:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009013:	e8 5c da 01 00       	call   c0026a74 <__subdf3>
c0009018:	59                   	pop    ecx
c0009019:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000901d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009021:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009024:	e8 da e0 01 00       	call   c0027103 <__floatsidf>
c0009029:	83 c4 10             	add    esp,0x10
c000902c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009030:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009034:	52                   	push   edx
c0009035:	50                   	push   eax
c0009036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000903a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000903e:	e8 5d da 01 00       	call   c0026aa0 <__muldf3>
c0009043:	5f                   	pop    edi
c0009044:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009048:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000904c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000904f:	e8 af e0 01 00       	call   c0027103 <__floatsidf>
c0009054:	83 c4 10             	add    esp,0x10
c0009057:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000905b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000905f:	52                   	push   edx
c0009060:	50                   	push   eax
c0009061:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009065:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009069:	e8 16 dd 01 00       	call   c0026d84 <__divdf3>
c000906e:	83 c4 10             	add    esp,0x10
c0009071:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009075:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009079:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000907d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009081:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009085:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009089:	e8 95 d3 01 00       	call   c0026423 <__adddf3>
c000908e:	83 c4 10             	add    esp,0x10
c0009091:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009095:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009099:	31 ff                	xor    edi,edi
c000909b:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000909e:	0f 8e 9d 00 00 00    	jle    c0009141 <linear_vari_process+0x349>
c00090a4:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00090a7:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00090ab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00090ae:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00090b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00090b5:	8b 06                	mov    eax,DWORD PTR [esi]
c00090b7:	52                   	push   edx
c00090b8:	52                   	push   edx
c00090b9:	55                   	push   ebp
c00090ba:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00090bd:	47                   	inc    edi
c00090be:	e8 f5 cc 01 00       	call   c0025db8 <__subsf3>
c00090c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00090c6:	e8 cc e3 01 00       	call   c0027497 <__extendsfdf2>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090e6:	e8 b5 d9 01 00       	call   c0026aa0 <__muldf3>
c00090eb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090ee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090f6:	e8 9c e3 01 00       	call   c0027497 <__extendsfdf2>
c00090fb:	83 c4 10             	add    esp,0x10
c00090fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009102:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009106:	52                   	push   edx
c0009107:	50                   	push   eax
c0009108:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000910c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009110:	e8 0e d3 01 00       	call   c0026423 <__adddf3>
c0009115:	59                   	pop    ecx
c0009116:	5d                   	pop    ebp
c0009117:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000911b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000911f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009123:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009127:	e8 47 e2 01 00       	call   c0027373 <__truncdfsf2>
c000912c:	83 c4 10             	add    esp,0x10
c000912f:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009132:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009136:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009139:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000913c:	e9 5a ff ff ff       	jmp    c000909b <linear_vari_process+0x2a3>
c0009141:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009145:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009149:	68 00 00 f0 3f       	push   0x3ff00000
c000914e:	6a 00                	push   0x0
c0009150:	e8 2f dc 01 00       	call   c0026d84 <__divdf3>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 04 24             	mov    DWORD PTR [esp],eax
c000915b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000915f:	52                   	push   edx
c0009160:	50                   	push   eax
c0009161:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009165:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009169:	e8 b5 d2 01 00       	call   c0026423 <__adddf3>
c000916e:	83 c4 10             	add    esp,0x10
c0009171:	e9 50 fd ff ff       	jmp    c0008ec6 <linear_vari_process+0xce>
c0009176:	50                   	push   eax
c0009177:	50                   	push   eax
c0009178:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000917c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009180:	e8 9b e3 01 00       	call   c0027520 <lrint>
c0009185:	83 ec 0c             	sub    esp,0xc
c0009188:	50                   	push   eax
c0009189:	e8 75 df 01 00       	call   c0027103 <__floatsidf>
c000918e:	83 c4 10             	add    esp,0x10
c0009191:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009195:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009199:	52                   	push   edx
c000919a:	50                   	push   eax
c000919b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000919f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091a3:	e8 cc d8 01 00       	call   c0026a74 <__subdf3>
c00091a8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00091ac:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00091b0:	83 c4 20             	add    esp,0x20
c00091b3:	6a 00                	push   0x0
c00091b5:	6a 00                	push   0x0
c00091b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091bf:	e8 ab e1 01 00       	call   c002736f <__ltdf2>
c00091c4:	83 c4 10             	add    esp,0x10
c00091c7:	85 c0                	test   eax,eax
c00091c9:	79 1e                	jns    c00091e9 <linear_vari_process+0x3f1>
c00091cb:	68 00 00 f0 3f       	push   0x3ff00000
c00091d0:	6a 00                	push   0x0
c00091d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091da:	e8 44 d2 01 00       	call   c0026423 <__adddf3>
c00091df:	83 c4 10             	add    esp,0x10
c00091e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091ec:	83 ec 10             	sub    esp,0x10
c00091ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091ff:	e8 70 d8 01 00       	call   c0026a74 <__subdf3>
c0009204:	83 c4 18             	add    esp,0x18
c0009207:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000920b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000920f:	52                   	push   edx
c0009210:	50                   	push   eax
c0009211:	e8 0a e3 01 00       	call   c0027520 <lrint>
c0009216:	83 c4 10             	add    esp,0x10
c0009219:	0f af f8             	imul   edi,eax
c000921c:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000921f:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009222:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009225:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009228:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000922b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000922f:	0f 8d 13 03 00 00    	jge    c0009548 <linear_vari_process+0x750>
c0009235:	83 ec 0c             	sub    esp,0xc
c0009238:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000923b:	e8 c3 de 01 00       	call   c0027103 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009247:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000924b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000924f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009253:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009257:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000925b:	e8 40 d8 01 00       	call   c0026aa0 <__muldf3>
c0009260:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009263:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009267:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926b:	e8 93 de 01 00       	call   c0027103 <__floatsidf>
c0009270:	83 c4 10             	add    esp,0x10
c0009273:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009277:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000927b:	52                   	push   edx
c000927c:	50                   	push   eax
c000927d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009281:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009285:	e8 99 d1 01 00       	call   c0026423 <__adddf3>
c000928a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000928d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009291:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009295:	e8 69 de 01 00       	call   c0027103 <__floatsidf>
c000929a:	83 c4 10             	add    esp,0x10
c000929d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092a1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092a5:	52                   	push   edx
c00092a6:	50                   	push   eax
c00092a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092af:	e8 bb e0 01 00       	call   c002736f <__ltdf2>
c00092b4:	83 c4 10             	add    esp,0x10
c00092b7:	85 c0                	test   eax,eax
c00092b9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00092bd:	0f 89 85 02 00 00    	jns    c0009548 <linear_vari_process+0x750>
c00092c3:	85 c9                	test   ecx,ecx
c00092c5:	0f 8e f5 00 00 00    	jle    c00093c0 <linear_vari_process+0x5c8>
c00092cb:	83 ec 10             	sub    esp,0x10
c00092ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00092d4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00092d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092db:	ff 30                	push   DWORD PTR [eax]
c00092dd:	e8 92 d7 01 00       	call   c0026a74 <__subdf3>
c00092e2:	83 c4 18             	add    esp,0x18
c00092e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092ed:	52                   	push   edx
c00092ee:	50                   	push   eax
c00092ef:	e8 0c e2 01 00       	call   c0027500 <fabs>
c00092f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092fc:	83 c4 10             	add    esp,0x10
c00092ff:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009304:	68 23 42 92 0c       	push   0xc924223
c0009309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000930d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009311:	e8 3b e0 01 00       	call   c0027351 <__gtdf2>
c0009316:	83 c4 10             	add    esp,0x10
c0009319:	85 c0                	test   eax,eax
c000931b:	0f 8e 9f 00 00 00    	jle    c00093c0 <linear_vari_process+0x5c8>
c0009321:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009325:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009328:	8b 00                	mov    eax,DWORD PTR [eax]
c000932a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000932e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009332:	52                   	push   edx
c0009333:	50                   	push   eax
c0009334:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009337:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000933a:	e8 35 d7 01 00       	call   c0026a74 <__subdf3>
c000933f:	5f                   	pop    edi
c0009340:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009344:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009348:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000934b:	e8 b3 dd 01 00       	call   c0027103 <__floatsidf>
c0009350:	83 c4 10             	add    esp,0x10
c0009353:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009357:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000935b:	52                   	push   edx
c000935c:	50                   	push   eax
c000935d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009361:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009365:	e8 36 d7 01 00       	call   c0026aa0 <__muldf3>
c000936a:	5d                   	pop    ebp
c000936b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000936f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009373:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009376:	e8 88 dd 01 00       	call   c0027103 <__floatsidf>
c000937b:	83 c4 10             	add    esp,0x10
c000937e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009382:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009386:	52                   	push   edx
c0009387:	50                   	push   eax
c0009388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000938c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009390:	e8 ef d9 01 00       	call   c0026d84 <__divdf3>
c0009395:	83 c4 10             	add    esp,0x10
c0009398:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000939c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093b0:	e8 6e d0 01 00       	call   c0026423 <__adddf3>
c00093b5:	83 c4 10             	add    esp,0x10
c00093b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093c0:	31 ff                	xor    edi,edi
c00093c2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00093c5:	39 f8                	cmp    eax,edi
c00093c7:	0f 8e ac 00 00 00    	jle    c0009479 <linear_vari_process+0x681>
c00093cd:	8b 16                	mov    edx,DWORD PTR [esi]
c00093cf:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00093d2:	29 c1                	sub    ecx,eax
c00093d4:	89 c8                	mov    eax,ecx
c00093d6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093d9:	01 f8                	add    eax,edi
c00093db:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093df:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093e2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093e9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093ec:	51                   	push   ecx
c00093ed:	01 f8                	add    eax,edi
c00093ef:	51                   	push   ecx
c00093f0:	47                   	inc    edi
c00093f1:	55                   	push   ebp
c00093f2:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093f5:	e8 be c9 01 00       	call   c0025db8 <__subsf3>
c00093fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fd:	e8 95 e0 01 00       	call   c0027497 <__extendsfdf2>
c0009402:	83 c4 10             	add    esp,0x10
c0009405:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009409:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000940d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009411:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009415:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009419:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941d:	e8 7e d6 01 00       	call   c0026aa0 <__muldf3>
c0009422:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000942d:	e8 65 e0 01 00       	call   c0027497 <__extendsfdf2>
c0009432:	83 c4 10             	add    esp,0x10
c0009435:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009439:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000943d:	52                   	push   edx
c000943e:	50                   	push   eax
c000943f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009443:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009447:	e8 d7 cf 01 00       	call   c0026423 <__adddf3>
c000944c:	5d                   	pop    ebp
c000944d:	59                   	pop    ecx
c000944e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009452:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009456:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000945a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000945e:	e8 10 df 01 00       	call   c0027373 <__truncdfsf2>
c0009463:	83 c4 10             	add    esp,0x10
c0009466:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000946a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000946e:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009471:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009474:	e9 49 ff ff ff       	jmp    c00093c2 <linear_vari_process+0x5ca>
c0009479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009481:	68 00 00 f0 3f       	push   0x3ff00000
c0009486:	6a 00                	push   0x0
c0009488:	e8 f7 d8 01 00       	call   c0026d84 <__divdf3>
c000948d:	83 c4 10             	add    esp,0x10
c0009490:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009494:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009498:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000949c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a8:	e8 76 cf 01 00       	call   c0026423 <__adddf3>
c00094ad:	59                   	pop    ecx
c00094ae:	5f                   	pop    edi
c00094af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094bf:	e8 5c e0 01 00       	call   c0027520 <lrint>
c00094c4:	83 ec 0c             	sub    esp,0xc
c00094c7:	50                   	push   eax
c00094c8:	e8 36 dc 01 00       	call   c0027103 <__floatsidf>
c00094cd:	83 c4 10             	add    esp,0x10
c00094d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094d4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094d8:	52                   	push   edx
c00094d9:	50                   	push   eax
c00094da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094e2:	e8 8d d5 01 00       	call   c0026a74 <__subdf3>
c00094e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094eb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094ef:	83 c4 20             	add    esp,0x20
c00094f2:	6a 00                	push   0x0
c00094f4:	6a 00                	push   0x0
c00094f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094fe:	e8 6c de 01 00       	call   c002736f <__ltdf2>
c0009503:	83 c4 10             	add    esp,0x10
c0009506:	85 c0                	test   eax,eax
c0009508:	79 1e                	jns    c0009528 <linear_vari_process+0x730>
c000950a:	68 00 00 f0 3f       	push   0x3ff00000
c000950f:	6a 00                	push   0x0
c0009511:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009515:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009519:	e8 05 cf 01 00       	call   c0026423 <__adddf3>
c000951e:	83 c4 10             	add    esp,0x10
c0009521:	89 04 24             	mov    DWORD PTR [esp],eax
c0009524:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009528:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000952b:	83 ec 10             	sub    esp,0x10
c000952e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009532:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009536:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953e:	e8 31 d5 01 00       	call   c0026a74 <__subdf3>
c0009543:	e9 bc fc ff ff       	jmp    c0009204 <linear_vari_process+0x40c>
c0009548:	39 fd                	cmp    ebp,edi
c000954a:	7d 38                	jge    c0009584 <linear_vari_process+0x78c>
c000954c:	83 ec 0c             	sub    esp,0xc
c000954f:	89 f8                	mov    eax,edi
c0009551:	29 e8                	sub    eax,ebp
c0009553:	99                   	cdq    
c0009554:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009557:	50                   	push   eax
c0009558:	e8 a6 db 01 00       	call   c0027103 <__floatsidf>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009564:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009568:	52                   	push   edx
c0009569:	50                   	push   eax
c000956a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000956e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009572:	e8 ac ce 01 00       	call   c0026423 <__adddf3>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000957d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009580:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009584:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009588:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000958b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000958f:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009592:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009595:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009598:	85 c0                	test   eax,eax
c000959a:	7f 29                	jg     c00095c5 <linear_vari_process+0x7cd>
c000959c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00095a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00095a8:	89 01                	mov    DWORD PTR [ecx],eax
c00095aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00095ad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095b0:	99                   	cdq    
c00095b1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095b4:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00095b7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095ba:	99                   	cdq    
c00095bb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095be:	31 d2                	xor    edx,edx
c00095c0:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00095c3:	eb 1d                	jmp    c00095e2 <linear_vari_process+0x7ea>
c00095c5:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00095c8:	31 d2                	xor    edx,edx
c00095ca:	29 c8                	sub    eax,ecx
c00095cc:	c1 e0 02             	shl    eax,0x2
c00095cf:	39 d1                	cmp    ecx,edx
c00095d1:	7e c9                	jle    c000959c <linear_vari_process+0x7a4>
c00095d3:	8b 3e                	mov    edi,DWORD PTR [esi]
c00095d5:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00095d8:	83 c0 04             	add    eax,0x4
c00095db:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095df:	42                   	inc    edx
c00095e0:	eb ed                	jmp    c00095cf <linear_vari_process+0x7d7>
c00095e2:	83 c4 3c             	add    esp,0x3c
c00095e5:	89 d0                	mov    eax,edx
c00095e7:	5b                   	pop    ebx
c00095e8:	5e                   	pop    esi
c00095e9:	5f                   	pop    edi
c00095ea:	5d                   	pop    ebp
c00095eb:	c3                   	ret    

c00095ec <linear_reset>:
c00095ec:	83 ec 0c             	sub    esp,0xc
c00095ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095f3:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095f6:	85 c0                	test   eax,eax
c00095f8:	74 20                	je     c000961a <linear_reset+0x2e>
c00095fa:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095fd:	83 c0 1c             	add    eax,0x1c
c0009600:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009603:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000960a:	c1 e2 02             	shl    edx,0x2
c000960d:	51                   	push   ecx
c000960e:	52                   	push   edx
c000960f:	6a 00                	push   0x0
c0009611:	50                   	push   eax
c0009612:	e8 ad 70 ff ff       	call   c00006c4 <memset>
c0009617:	83 c4 10             	add    esp,0x10
c000961a:	83 c4 0c             	add    esp,0xc
c000961d:	c3                   	ret    

c000961e <linear_get_name>:
c000961e:	31 c0                	xor    eax,eax
c0009620:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009625:	75 05                	jne    c000962c <linear_get_name+0xe>
c0009627:	b8 20 8c 02 c0       	mov    eax,0xc0028c20
c000962c:	c3                   	ret    

c000962d <linear_get_description>:
c000962d:	31 c0                	xor    eax,eax
c000962f:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009634:	75 05                	jne    c000963b <linear_get_description+0xe>
c0009636:	b8 34 8c 02 c0       	mov    eax,0xc0028c34
c000963b:	c3                   	ret    

c000963c <linear_set_converter>:
c000963c:	53                   	push   ebx
c000963d:	b8 0a 00 00 00       	mov    eax,0xa
c0009642:	83 ec 08             	sub    esp,0x8
c0009645:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009649:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000964e:	75 6e                	jne    c00096be <linear_set_converter+0x82>
c0009650:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009653:	85 c0                	test   eax,eax
c0009655:	74 13                	je     c000966a <linear_set_converter+0x2e>
c0009657:	83 ec 0c             	sub    esp,0xc
c000965a:	50                   	push   eax
c000965b:	e8 0a 60 00 00       	call   c000f66a <free>
c0009660:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009667:	83 c4 10             	add    esp,0x10
c000966a:	50                   	push   eax
c000966b:	50                   	push   eax
c000966c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000966f:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009676:	50                   	push   eax
c0009677:	6a 01                	push   0x1
c0009679:	e8 0c 60 00 00       	call   c000f68a <calloc>
c000967e:	83 c4 10             	add    esp,0x10
c0009681:	89 c2                	mov    edx,eax
c0009683:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009686:	85 d2                	test   edx,edx
c0009688:	b8 01 00 00 00       	mov    eax,0x1
c000968d:	74 2f                	je     c00096be <linear_set_converter+0x82>
c000968f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009692:	83 ec 0c             	sub    esp,0xc
c0009695:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009698:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000969e:	c7 43 24 f8 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008df8
c00096a5:	c7 43 20 f8 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008df8
c00096ac:	c7 43 28 ec 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095ec
c00096b3:	53                   	push   ebx
c00096b4:	e8 33 ff ff ff       	call   c00095ec <linear_reset>
c00096b9:	83 c4 10             	add    esp,0x10
c00096bc:	31 c0                	xor    eax,eax
c00096be:	83 c4 08             	add    esp,0x8
c00096c1:	5b                   	pop    ebx
c00096c2:	c3                   	ret    

c00096c3 <int_to_fp>:
c00096c3:	c1 e0 0c             	shl    eax,0xc
c00096c6:	c3                   	ret    

c00096c7 <fp_to_int>:
c00096c7:	c1 f8 0c             	sar    eax,0xc
c00096ca:	c3                   	ret    

c00096cb <fp_fraction_part>:
c00096cb:	25 ff 0f 00 00       	and    eax,0xfff
c00096d0:	c3                   	ret    

c00096d1 <fp_to_double>:
c00096d1:	83 ec 1c             	sub    esp,0x1c
c00096d4:	e8 f2 ff ff ff       	call   c00096cb <fp_fraction_part>
c00096d9:	83 ec 0c             	sub    esp,0xc
c00096dc:	50                   	push   eax
c00096dd:	e8 21 da 01 00       	call   c0027103 <__floatsidf>
c00096e2:	83 c4 10             	add    esp,0x10
c00096e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096ed:	68 00 00 30 3f       	push   0x3f300000
c00096f2:	6a 00                	push   0x0
c00096f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096fc:	e8 9f d3 01 00       	call   c0026aa0 <__muldf3>
c0009701:	83 c4 2c             	add    esp,0x2c
c0009704:	c3                   	ret    

c0009705 <calc_output_single>:
c0009705:	55                   	push   ebp
c0009706:	57                   	push   edi
c0009707:	56                   	push   esi
c0009708:	89 c6                	mov    esi,eax
c000970a:	53                   	push   ebx
c000970b:	89 d3                	mov    ebx,edx
c000970d:	83 ec 4c             	sub    esp,0x4c
c0009710:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009714:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009717:	e8 a7 ff ff ff       	call   c00096c3 <int_to_fp>
c000971c:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000971f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009723:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009727:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000972b:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000972e:	99                   	cdq    
c000972f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009737:	f7 fb                	idiv   ebx
c0009739:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009741:	89 da                	mov    edx,ebx
c0009743:	0f af d0             	imul   edx,eax
c0009746:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000974a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000974e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009752:	29 c2                	sub    edx,eax
c0009754:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000975b:	83 c5 04             	add    ebp,0x4
c000975e:	e8 6e ff ff ff       	call   c00096d1 <fp_to_double>
c0009763:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009767:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000976b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000976f:	e8 53 ff ff ff       	call   c00096c7 <fp_to_int>
c0009774:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009777:	52                   	push   edx
c0009778:	52                   	push   edx
c0009779:	51                   	push   ecx
c000977a:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000977e:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009782:	e8 31 c6 01 00       	call   c0025db8 <__subsf3>
c0009787:	89 04 24             	mov    DWORD PTR [esp],eax
c000978a:	e8 08 dd 01 00       	call   c0027497 <__extendsfdf2>
c000978f:	83 c4 10             	add    esp,0x10
c0009792:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009796:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000979a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000979e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097aa:	e8 f1 d2 01 00       	call   c0026aa0 <__muldf3>
c00097af:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00097b3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00097b7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00097ba:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00097be:	e8 d4 dc 01 00       	call   c0027497 <__extendsfdf2>
c00097c3:	83 c4 10             	add    esp,0x10
c00097c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097ce:	52                   	push   edx
c00097cf:	50                   	push   eax
c00097d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097d8:	e8 46 cc 01 00       	call   c0026423 <__adddf3>
c00097dd:	59                   	pop    ecx
c00097de:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097e2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097e6:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097ec:	e8 a6 dc 01 00       	call   c0027497 <__extendsfdf2>
c00097f1:	83 c4 10             	add    esp,0x10
c00097f4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097f8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097fc:	52                   	push   edx
c00097fd:	50                   	push   eax
c00097fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009802:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009806:	e8 95 d2 01 00       	call   c0026aa0 <__muldf3>
c000980b:	83 c4 10             	add    esp,0x10
c000980e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009812:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009816:	52                   	push   edx
c0009817:	50                   	push   eax
c0009818:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000981c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009820:	e8 fe cb 01 00       	call   c0026423 <__adddf3>
c0009825:	83 c4 10             	add    esp,0x10
c0009828:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000982c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009830:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009834:	0f 89 1d ff ff ff    	jns    c0009757 <calc_output_single+0x52>
c000983a:	89 d9                	mov    ecx,ebx
c000983c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009840:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009844:	89 dd                	mov    ebp,ebx
c0009846:	29 c8                	sub    eax,ecx
c0009848:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009850:	99                   	cdq    
c0009851:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009859:	f7 fb                	idiv   ebx
c000985b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000985f:	0f af e8             	imul   ebp,eax
c0009862:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009866:	01 cd                	add    ebp,ecx
c0009868:	8d 34 86             	lea    esi,[esi+eax*4]
c000986b:	89 e8                	mov    eax,ebp
c000986d:	83 ee 04             	sub    esi,0x4
c0009870:	e8 5c fe ff ff       	call   c00096d1 <fp_to_double>
c0009875:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009879:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000987d:	89 e8                	mov    eax,ebp
c000987f:	29 dd                	sub    ebp,ebx
c0009881:	e8 41 fe ff ff       	call   c00096c7 <fp_to_int>
c0009886:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009889:	52                   	push   edx
c000988a:	52                   	push   edx
c000988b:	51                   	push   ecx
c000988c:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009890:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009894:	e8 1f c5 01 00       	call   c0025db8 <__subsf3>
c0009899:	89 04 24             	mov    DWORD PTR [esp],eax
c000989c:	e8 f6 db 01 00       	call   c0027497 <__extendsfdf2>
c00098a1:	83 c4 10             	add    esp,0x10
c00098a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098a8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098bc:	e8 df d1 01 00       	call   c0026aa0 <__muldf3>
c00098c1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00098c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00098c9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00098cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00098d0:	e8 c2 db 01 00       	call   c0027497 <__extendsfdf2>
c00098d5:	83 c4 10             	add    esp,0x10
c00098d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098dc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098e0:	52                   	push   edx
c00098e1:	50                   	push   eax
c00098e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ea:	e8 34 cb 01 00       	call   c0026423 <__adddf3>
c00098ef:	59                   	pop    ecx
c00098f0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098f4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098f8:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098fe:	e8 94 db 01 00       	call   c0027497 <__extendsfdf2>
c0009903:	83 c4 10             	add    esp,0x10
c0009906:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000990a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000990e:	52                   	push   edx
c000990f:	50                   	push   eax
c0009910:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009914:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009918:	e8 83 d1 01 00       	call   c0026aa0 <__muldf3>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009924:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009928:	52                   	push   edx
c0009929:	50                   	push   eax
c000992a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000992e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009932:	e8 ec ca 01 00       	call   c0026423 <__adddf3>
c0009937:	83 c4 10             	add    esp,0x10
c000993a:	85 ed                	test   ebp,ebp
c000993c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009940:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009944:	0f 8f 21 ff ff ff    	jg     c000986b <calc_output_single+0x166>
c000994a:	52                   	push   edx
c000994b:	50                   	push   eax
c000994c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009950:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009954:	e8 ca ca 01 00       	call   c0026423 <__adddf3>
c0009959:	83 c4 5c             	add    esp,0x5c
c000995c:	5b                   	pop    ebx
c000995d:	5e                   	pop    esi
c000995e:	5f                   	pop    edi
c000995f:	5d                   	pop    ebp
c0009960:	c3                   	ret    

c0009961 <calc_output_stereo>:
c0009961:	55                   	push   ebp
c0009962:	89 cd                	mov    ebp,ecx
c0009964:	57                   	push   edi
c0009965:	56                   	push   esi
c0009966:	53                   	push   ebx
c0009967:	89 c3                	mov    ebx,eax
c0009969:	83 ec 6c             	sub    esp,0x6c
c000996c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009970:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009977:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000997e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009982:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009986:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009989:	e8 35 fd ff ff       	call   c00096c3 <int_to_fp>
c000998e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009996:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000999a:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00099a2:	29 c8                	sub    eax,ecx
c00099a4:	99                   	cdq    
c00099a5:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c00099a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099ad:	0f af d0             	imul   edx,eax
c00099b0:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00099b3:	31 d2                	xor    edx,edx
c00099b5:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00099b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00099bd:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c00099c0:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00099c4:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00099c7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00099cb:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00099cf:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c00099d2:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00099d7:	29 c1                	sub    ecx,eax
c00099d9:	31 c0                	xor    eax,eax
c00099db:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099e6:	83 c7 08             	add    edi,0x8
c00099e9:	e8 e3 fc ff ff       	call   c00096d1 <fp_to_double>
c00099ee:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099fa:	e8 c8 fc ff ff       	call   c00096c7 <fp_to_int>
c00099ff:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009a02:	52                   	push   edx
c0009a03:	52                   	push   edx
c0009a04:	51                   	push   ecx
c0009a05:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009a09:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009a0d:	e8 a6 c3 01 00       	call   c0025db8 <__subsf3>
c0009a12:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a15:	e8 7d da 01 00       	call   c0027497 <__extendsfdf2>
c0009a1a:	83 c4 10             	add    esp,0x10
c0009a1d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a21:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a29:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a2d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a31:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a35:	e8 66 d0 01 00       	call   c0026aa0 <__muldf3>
c0009a3a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a3e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a42:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a45:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a49:	e8 49 da 01 00       	call   c0027497 <__extendsfdf2>
c0009a4e:	83 c4 10             	add    esp,0x10
c0009a51:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a55:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a59:	52                   	push   edx
c0009a5a:	50                   	push   eax
c0009a5b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a5f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a63:	e8 bb c9 01 00       	call   c0026423 <__adddf3>
c0009a68:	59                   	pop    ecx
c0009a69:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a6d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a71:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a77:	e8 1b da 01 00       	call   c0027497 <__extendsfdf2>
c0009a7c:	83 c4 10             	add    esp,0x10
c0009a7f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a83:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a87:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a8b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a8f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a93:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a97:	e8 04 d0 01 00       	call   c0026aa0 <__muldf3>
c0009a9c:	83 c4 10             	add    esp,0x10
c0009a9f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009aa3:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009aa7:	52                   	push   edx
c0009aa8:	50                   	push   eax
c0009aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ab1:	e8 6d c9 01 00       	call   c0026423 <__adddf3>
c0009ab6:	59                   	pop    ecx
c0009ab7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009abb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009abf:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ac5:	e8 cd d9 01 00       	call   c0027497 <__extendsfdf2>
c0009aca:	83 c4 10             	add    esp,0x10
c0009acd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ad1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ad5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ad9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009add:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ae1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ae5:	e8 b6 cf 01 00       	call   c0026aa0 <__muldf3>
c0009aea:	83 c4 10             	add    esp,0x10
c0009aed:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009af1:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009af5:	52                   	push   edx
c0009af6:	50                   	push   eax
c0009af7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009afb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009aff:	e8 1f c9 01 00       	call   c0026423 <__adddf3>
c0009b04:	83 c4 10             	add    esp,0x10
c0009b07:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009b0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b13:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009b17:	0f 89 c5 fe ff ff    	jns    c00099e2 <calc_output_stereo+0x81>
c0009b1d:	29 e9                	sub    ecx,ebp
c0009b1f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009b23:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009b27:	29 c8                	sub    eax,ecx
c0009b29:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b31:	99                   	cdq    
c0009b32:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b36:	31 d2                	xor    edx,edx
c0009b38:	0f af f8             	imul   edi,eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	40                   	inc    eax
c0009b40:	01 cf                	add    edi,ecx
c0009b42:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b47:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b4b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b53:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b56:	31 c0                	xor    eax,eax
c0009b58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b5c:	89 f8                	mov    eax,edi
c0009b5e:	83 eb 08             	sub    ebx,0x8
c0009b61:	e8 6b fb ff ff       	call   c00096d1 <fp_to_double>
c0009b66:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b6a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b6e:	89 f8                	mov    eax,edi
c0009b70:	e8 52 fb ff ff       	call   c00096c7 <fp_to_int>
c0009b75:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b78:	52                   	push   edx
c0009b79:	52                   	push   edx
c0009b7a:	55                   	push   ebp
c0009b7b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b7f:	e8 34 c2 01 00       	call   c0025db8 <__subsf3>
c0009b84:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b87:	e8 0b d9 01 00       	call   c0027497 <__extendsfdf2>
c0009b8c:	83 c4 10             	add    esp,0x10
c0009b8f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b93:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b97:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b9f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ba3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ba7:	e8 f4 ce 01 00       	call   c0026aa0 <__muldf3>
c0009bac:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009baf:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009bb3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009bb7:	e8 db d8 01 00       	call   c0027497 <__extendsfdf2>
c0009bbc:	83 c4 10             	add    esp,0x10
c0009bbf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bc3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bc7:	52                   	push   edx
c0009bc8:	50                   	push   eax
c0009bc9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bcd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bd1:	e8 4d c8 01 00       	call   c0026423 <__adddf3>
c0009bd6:	59                   	pop    ecx
c0009bd7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009bdb:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009bdf:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009be5:	e8 ad d8 01 00       	call   c0027497 <__extendsfdf2>
c0009bea:	83 c4 10             	add    esp,0x10
c0009bed:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bf1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bf5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bf9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bfd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c01:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c05:	e8 96 ce 01 00       	call   c0026aa0 <__muldf3>
c0009c0a:	83 c4 10             	add    esp,0x10
c0009c0d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c11:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c15:	52                   	push   edx
c0009c16:	50                   	push   eax
c0009c17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c1b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c1f:	e8 ff c7 01 00       	call   c0026423 <__adddf3>
c0009c24:	5d                   	pop    ebp
c0009c25:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009c29:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009c2d:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009c33:	e8 5f d8 01 00       	call   c0027497 <__extendsfdf2>
c0009c38:	83 c4 10             	add    esp,0x10
c0009c3b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c3f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c4b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c4f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c53:	e8 48 ce 01 00       	call   c0026aa0 <__muldf3>
c0009c58:	83 c4 10             	add    esp,0x10
c0009c5b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c5f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c63:	52                   	push   edx
c0009c64:	50                   	push   eax
c0009c65:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c69:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c6d:	e8 b1 c7 01 00       	call   c0026423 <__adddf3>
c0009c72:	83 c4 10             	add    esp,0x10
c0009c75:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c79:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c7d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c81:	85 ff                	test   edi,edi
c0009c83:	0f 8f d3 fe ff ff    	jg     c0009b5c <calc_output_stereo+0x1fb>
c0009c89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c99:	e8 85 c7 01 00       	call   c0026423 <__adddf3>
c0009c9e:	83 c4 10             	add    esp,0x10
c0009ca1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ca5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ca9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cad:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cb9:	e8 e2 cd 01 00       	call   c0026aa0 <__muldf3>
c0009cbe:	59                   	pop    ecx
c0009cbf:	5b                   	pop    ebx
c0009cc0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009cc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ccc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd0:	e8 9e d6 01 00       	call   c0027373 <__truncdfsf2>
c0009cd5:	83 c4 10             	add    esp,0x10
c0009cd8:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009cdf:	89 03                	mov    DWORD PTR [ebx],eax
c0009ce1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ce5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ce9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ced:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cf1:	e8 2d c7 01 00       	call   c0026423 <__adddf3>
c0009cf6:	83 c4 10             	add    esp,0x10
c0009cf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d01:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d05:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d11:	e8 8a cd 01 00       	call   c0026aa0 <__muldf3>
c0009d16:	5e                   	pop    esi
c0009d17:	5f                   	pop    edi
c0009d18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d1c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d28:	e8 46 d6 01 00       	call   c0027373 <__truncdfsf2>
c0009d2d:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009d34:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009d37:	83 c4 7c             	add    esp,0x7c
c0009d3a:	5b                   	pop    ebx
c0009d3b:	5e                   	pop    esi
c0009d3c:	5f                   	pop    edi
c0009d3d:	5d                   	pop    ebp
c0009d3e:	c3                   	ret    

c0009d3f <calc_output_quad>:
c0009d3f:	55                   	push   ebp
c0009d40:	57                   	push   edi
c0009d41:	56                   	push   esi
c0009d42:	89 c6                	mov    esi,eax
c0009d44:	53                   	push   ebx
c0009d45:	83 ec 7c             	sub    esp,0x7c
c0009d48:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d4c:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d50:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d57:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d66:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d69:	e8 55 f9 ff ff       	call   c00096c3 <int_to_fp>
c0009d6e:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d71:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d74:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d78:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d7c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d80:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d84:	99                   	cdq    
c0009d85:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d89:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d8d:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d90:	31 d2                	xor    edx,edx
c0009d92:	0f af d8             	imul   ebx,eax
c0009d95:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d9d:	0f af c7             	imul   eax,edi
c0009da0:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009da4:	29 c1                	sub    ecx,eax
c0009da6:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009dae:	31 c0                	xor    eax,eax
c0009db0:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009db3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009db7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009dbb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dbf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009dc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009dcb:	89 d8                	mov    eax,ebx
c0009dcd:	83 c7 10             	add    edi,0x10
c0009dd0:	e8 fc f8 ff ff       	call   c00096d1 <fp_to_double>
c0009dd5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009dd9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ddd:	89 d8                	mov    eax,ebx
c0009ddf:	e8 e3 f8 ff ff       	call   c00096c7 <fp_to_int>
c0009de4:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009de8:	52                   	push   edx
c0009de9:	52                   	push   edx
c0009dea:	51                   	push   ecx
c0009deb:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009def:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009df3:	e8 c0 bf 01 00       	call   c0025db8 <__subsf3>
c0009df8:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dfb:	e8 97 d6 01 00       	call   c0027497 <__extendsfdf2>
c0009e00:	83 c4 10             	add    esp,0x10
c0009e03:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e07:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e13:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e17:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e1b:	e8 80 cc 01 00       	call   c0026aa0 <__muldf3>
c0009e20:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009e24:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e28:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e2f:	e8 63 d6 01 00       	call   c0027497 <__extendsfdf2>
c0009e34:	83 c4 10             	add    esp,0x10
c0009e37:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e3b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e3f:	52                   	push   edx
c0009e40:	50                   	push   eax
c0009e41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e49:	e8 d5 c5 01 00       	call   c0026423 <__adddf3>
c0009e4e:	59                   	pop    ecx
c0009e4f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e53:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e57:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e5d:	e8 35 d6 01 00       	call   c0027497 <__extendsfdf2>
c0009e62:	83 c4 10             	add    esp,0x10
c0009e65:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e69:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e75:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e79:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e7d:	e8 1e cc 01 00       	call   c0026aa0 <__muldf3>
c0009e82:	83 c4 10             	add    esp,0x10
c0009e85:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e89:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e8d:	52                   	push   edx
c0009e8e:	50                   	push   eax
c0009e8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e97:	e8 87 c5 01 00       	call   c0026423 <__adddf3>
c0009e9c:	59                   	pop    ecx
c0009e9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009ea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009ea5:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009eab:	e8 e7 d5 01 00       	call   c0027497 <__extendsfdf2>
c0009eb0:	83 c4 10             	add    esp,0x10
c0009eb3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eb7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ebb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ebf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ec7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ecb:	e8 d0 cb 01 00       	call   c0026aa0 <__muldf3>
c0009ed0:	83 c4 10             	add    esp,0x10
c0009ed3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ed7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009edb:	52                   	push   edx
c0009edc:	50                   	push   eax
c0009edd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee5:	e8 39 c5 01 00       	call   c0026423 <__adddf3>
c0009eea:	59                   	pop    ecx
c0009eeb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009eef:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009ef3:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ef9:	e8 99 d5 01 00       	call   c0027497 <__extendsfdf2>
c0009efe:	83 c4 10             	add    esp,0x10
c0009f01:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f05:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f11:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f15:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f19:	e8 82 cb 01 00       	call   c0026aa0 <__muldf3>
c0009f1e:	83 c4 10             	add    esp,0x10
c0009f21:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f25:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f29:	52                   	push   edx
c0009f2a:	50                   	push   eax
c0009f2b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f2f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f33:	e8 eb c4 01 00       	call   c0026423 <__adddf3>
c0009f38:	59                   	pop    ecx
c0009f39:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f3d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f41:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f47:	e8 4b d5 01 00       	call   c0027497 <__extendsfdf2>
c0009f4c:	83 c4 10             	add    esp,0x10
c0009f4f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f53:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f5f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f63:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f67:	e8 34 cb 01 00       	call   c0026aa0 <__muldf3>
c0009f6c:	83 c4 10             	add    esp,0x10
c0009f6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f73:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f77:	52                   	push   edx
c0009f78:	50                   	push   eax
c0009f79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f81:	e8 9d c4 01 00       	call   c0026423 <__adddf3>
c0009f86:	83 c4 10             	add    esp,0x10
c0009f89:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f8d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f91:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f95:	0f 89 30 fe ff ff    	jns    c0009dcb <calc_output_quad+0x8c>
c0009f9b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f9f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fa3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009fa7:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009fab:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009fb3:	29 c8                	sub    eax,ecx
c0009fb5:	99                   	cdq    
c0009fb6:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fba:	31 d2                	xor    edx,edx
c0009fbc:	0f af d8             	imul   ebx,eax
c0009fbf:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009fc3:	40                   	inc    eax
c0009fc4:	01 cb                	add    ebx,ecx
c0009fc6:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009fcb:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009fcf:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009fd3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009fd7:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fda:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fe2:	31 c0                	xor    eax,eax
c0009fe4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009fe8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ff0:	89 d8                	mov    eax,ebx
c0009ff2:	83 ee 10             	sub    esi,0x10
c0009ff5:	e8 d7 f6 ff ff       	call   c00096d1 <fp_to_double>
c0009ffa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ffe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a002:	89 d8                	mov    eax,ebx
c000a004:	e8 be f6 ff ff       	call   c00096c7 <fp_to_int>
c000a009:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a00d:	52                   	push   edx
c000a00e:	52                   	push   edx
c000a00f:	57                   	push   edi
c000a010:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a014:	e8 9f bd 01 00       	call   c0025db8 <__subsf3>
c000a019:	89 04 24             	mov    DWORD PTR [esp],eax
c000a01c:	e8 76 d4 01 00       	call   c0027497 <__extendsfdf2>
c000a021:	83 c4 10             	add    esp,0x10
c000a024:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a028:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a02c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a034:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a038:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a03c:	e8 5f ca 01 00       	call   c0026aa0 <__muldf3>
c000a041:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a044:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a048:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a04c:	e8 46 d4 01 00       	call   c0027497 <__extendsfdf2>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a058:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a05c:	52                   	push   edx
c000a05d:	50                   	push   eax
c000a05e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a062:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a066:	e8 b8 c3 01 00       	call   c0026423 <__adddf3>
c000a06b:	59                   	pop    ecx
c000a06c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a070:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a074:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a07a:	e8 18 d4 01 00       	call   c0027497 <__extendsfdf2>
c000a07f:	83 c4 10             	add    esp,0x10
c000a082:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a086:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a08a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a092:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a096:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09a:	e8 01 ca 01 00       	call   c0026aa0 <__muldf3>
c000a09f:	83 c4 10             	add    esp,0x10
c000a0a2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0aa:	52                   	push   edx
c000a0ab:	50                   	push   eax
c000a0ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0b0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0b4:	e8 6a c3 01 00       	call   c0026423 <__adddf3>
c000a0b9:	5f                   	pop    edi
c000a0ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a0be:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a0c2:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a0c8:	e8 ca d3 01 00       	call   c0027497 <__extendsfdf2>
c000a0cd:	83 c4 10             	add    esp,0x10
c000a0d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e8:	e8 b3 c9 01 00       	call   c0026aa0 <__muldf3>
c000a0ed:	83 c4 10             	add    esp,0x10
c000a0f0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f8:	52                   	push   edx
c000a0f9:	50                   	push   eax
c000a0fa:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0fe:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a102:	e8 1c c3 01 00       	call   c0026423 <__adddf3>
c000a107:	59                   	pop    ecx
c000a108:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a10c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a110:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a116:	e8 7c d3 01 00       	call   c0027497 <__extendsfdf2>
c000a11b:	83 c4 10             	add    esp,0x10
c000a11e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a122:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a132:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a136:	e8 65 c9 01 00       	call   c0026aa0 <__muldf3>
c000a13b:	83 c4 10             	add    esp,0x10
c000a13e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a142:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a146:	52                   	push   edx
c000a147:	50                   	push   eax
c000a148:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a14c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a150:	e8 ce c2 01 00       	call   c0026423 <__adddf3>
c000a155:	5f                   	pop    edi
c000a156:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a15a:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a15e:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a164:	e8 2e d3 01 00       	call   c0027497 <__extendsfdf2>
c000a169:	83 c4 10             	add    esp,0x10
c000a16c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a170:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a180:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a184:	e8 17 c9 01 00       	call   c0026aa0 <__muldf3>
c000a189:	83 c4 10             	add    esp,0x10
c000a18c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a190:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a194:	52                   	push   edx
c000a195:	50                   	push   eax
c000a196:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a19a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a19e:	e8 80 c2 01 00       	call   c0026423 <__adddf3>
c000a1a3:	83 c4 10             	add    esp,0x10
c000a1a6:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1aa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a1ae:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a1b2:	85 db                	test   ebx,ebx
c000a1b4:	0f 8f 36 fe ff ff    	jg     c0009ff0 <calc_output_quad+0x2b1>
c000a1ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1ca:	e8 54 c2 01 00       	call   c0026423 <__adddf3>
c000a1cf:	83 c4 10             	add    esp,0x10
c000a1d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ea:	e8 b1 c8 01 00       	call   c0026aa0 <__muldf3>
c000a1ef:	59                   	pop    ecx
c000a1f0:	5b                   	pop    ebx
c000a1f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a201:	e8 6d d1 01 00       	call   c0027373 <__truncdfsf2>
c000a206:	83 c4 10             	add    esp,0x10
c000a209:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a210:	89 06                	mov    DWORD PTR [esi],eax
c000a212:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a216:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a21a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a21e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a222:	e8 fc c1 01 00       	call   c0026423 <__adddf3>
c000a227:	83 c4 10             	add    esp,0x10
c000a22a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a22e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a232:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a236:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a242:	e8 59 c8 01 00       	call   c0026aa0 <__muldf3>
c000a247:	5e                   	pop    esi
c000a248:	5f                   	pop    edi
c000a249:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a24d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a251:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a255:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a259:	e8 15 d1 01 00       	call   c0027373 <__truncdfsf2>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a268:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a26b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a26f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a273:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a277:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a27b:	e8 a3 c1 01 00       	call   c0026423 <__adddf3>
c000a280:	83 c4 10             	add    esp,0x10
c000a283:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a287:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a28b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a28f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a293:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a297:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a29b:	e8 00 c8 01 00       	call   c0026aa0 <__muldf3>
c000a2a0:	5d                   	pop    ebp
c000a2a1:	59                   	pop    ecx
c000a2a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b2:	e8 bc d0 01 00       	call   c0027373 <__truncdfsf2>
c000a2b7:	83 c4 10             	add    esp,0x10
c000a2ba:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a2c1:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a2c4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2cc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2d0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2d4:	e8 4a c1 01 00       	call   c0026423 <__adddf3>
c000a2d9:	83 c4 10             	add    esp,0x10
c000a2dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2f4:	e8 a7 c7 01 00       	call   c0026aa0 <__muldf3>
c000a2f9:	5b                   	pop    ebx
c000a2fa:	5e                   	pop    esi
c000a2fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2ff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a303:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a307:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a30b:	e8 63 d0 01 00       	call   c0027373 <__truncdfsf2>
c000a310:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a317:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a31a:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a320:	5b                   	pop    ebx
c000a321:	5e                   	pop    esi
c000a322:	5f                   	pop    edi
c000a323:	5d                   	pop    ebp
c000a324:	c3                   	ret    

c000a325 <calc_output_hex>:
c000a325:	55                   	push   ebp
c000a326:	89 cd                	mov    ebp,ecx
c000a328:	57                   	push   edi
c000a329:	56                   	push   esi
c000a32a:	53                   	push   ebx
c000a32b:	89 c3                	mov    ebx,eax
c000a32d:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a333:	89 14 24             	mov    DWORD PTR [esp],edx
c000a336:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a33d:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a344:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a348:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a34c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a34f:	e8 6f f3 ff ff       	call   c00096c3 <int_to_fp>
c000a354:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a357:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a35b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a35e:	29 c8                	sub    eax,ecx
c000a360:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a364:	99                   	cdq    
c000a365:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a36d:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a370:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a378:	0f af f8             	imul   edi,eax
c000a37b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a37e:	01 cf                	add    edi,ecx
c000a380:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a384:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a387:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a38b:	0f af c2             	imul   eax,edx
c000a38e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a392:	29 c1                	sub    ecx,eax
c000a394:	31 d2                	xor    edx,edx
c000a396:	31 c0                	xor    eax,eax
c000a398:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a39b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a39f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a3a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a3ab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a3af:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a3b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3b7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3c3:	89 f8                	mov    eax,edi
c000a3c5:	e8 07 f3 ff ff       	call   c00096d1 <fp_to_double>
c000a3ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d2:	89 f8                	mov    eax,edi
c000a3d4:	e8 ee f2 ff ff       	call   c00096c7 <fp_to_int>
c000a3d9:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3dd:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3e0:	52                   	push   edx
c000a3e1:	52                   	push   edx
c000a3e2:	51                   	push   ecx
c000a3e3:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3e7:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3ee:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3f2:	e8 c1 b9 01 00       	call   c0025db8 <__subsf3>
c000a3f7:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3fa:	e8 98 d0 01 00       	call   c0027497 <__extendsfdf2>
c000a3ff:	83 c4 10             	add    esp,0x10
c000a402:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a406:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a40a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a40e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a412:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a416:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a41a:	e8 81 c6 01 00       	call   c0026aa0 <__muldf3>
c000a41f:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a423:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a427:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a42a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a42e:	e8 64 d0 01 00       	call   c0027497 <__extendsfdf2>
c000a433:	83 c4 10             	add    esp,0x10
c000a436:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a43a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a43e:	52                   	push   edx
c000a43f:	50                   	push   eax
c000a440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a448:	e8 d6 bf 01 00       	call   c0026423 <__adddf3>
c000a44d:	59                   	pop    ecx
c000a44e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a452:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a456:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a45c:	e8 36 d0 01 00       	call   c0027497 <__extendsfdf2>
c000a461:	83 c4 10             	add    esp,0x10
c000a464:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a468:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a478:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a47c:	e8 1f c6 01 00       	call   c0026aa0 <__muldf3>
c000a481:	83 c4 10             	add    esp,0x10
c000a484:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a488:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a48c:	52                   	push   edx
c000a48d:	50                   	push   eax
c000a48e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a492:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a496:	e8 88 bf 01 00       	call   c0026423 <__adddf3>
c000a49b:	59                   	pop    ecx
c000a49c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4a0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a4a4:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a4aa:	e8 e8 cf 01 00       	call   c0027497 <__extendsfdf2>
c000a4af:	83 c4 10             	add    esp,0x10
c000a4b2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4b6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4c6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ca:	e8 d1 c5 01 00       	call   c0026aa0 <__muldf3>
c000a4cf:	83 c4 10             	add    esp,0x10
c000a4d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4da:	52                   	push   edx
c000a4db:	50                   	push   eax
c000a4dc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e4:	e8 3a bf 01 00       	call   c0026423 <__adddf3>
c000a4e9:	59                   	pop    ecx
c000a4ea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4ee:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4f2:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4f8:	e8 9a cf 01 00       	call   c0027497 <__extendsfdf2>
c000a4fd:	83 c4 10             	add    esp,0x10
c000a500:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a504:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a508:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a510:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a514:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a518:	e8 83 c5 01 00       	call   c0026aa0 <__muldf3>
c000a51d:	83 c4 10             	add    esp,0x10
c000a520:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a524:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a528:	52                   	push   edx
c000a529:	50                   	push   eax
c000a52a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a52e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a532:	e8 ec be 01 00       	call   c0026423 <__adddf3>
c000a537:	59                   	pop    ecx
c000a538:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a53c:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a540:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a546:	e8 4c cf 01 00       	call   c0027497 <__extendsfdf2>
c000a54b:	83 c4 10             	add    esp,0x10
c000a54e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a552:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a556:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a55a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a55e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a562:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a566:	e8 35 c5 01 00       	call   c0026aa0 <__muldf3>
c000a56b:	83 c4 10             	add    esp,0x10
c000a56e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a572:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a576:	52                   	push   edx
c000a577:	50                   	push   eax
c000a578:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a57c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a580:	e8 9e be 01 00       	call   c0026423 <__adddf3>
c000a585:	59                   	pop    ecx
c000a586:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a58a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a58e:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a594:	e8 fe ce 01 00       	call   c0027497 <__extendsfdf2>
c000a599:	83 c4 10             	add    esp,0x10
c000a59c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ac:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5b0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5b4:	e8 e7 c4 01 00       	call   c0026aa0 <__muldf3>
c000a5b9:	83 c4 10             	add    esp,0x10
c000a5bc:	83 c6 18             	add    esi,0x18
c000a5bf:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5c3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5c7:	52                   	push   edx
c000a5c8:	50                   	push   eax
c000a5c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5d1:	e8 4d be 01 00       	call   c0026423 <__adddf3>
c000a5d6:	59                   	pop    ecx
c000a5d7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5db:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5df:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5e5:	e8 ad ce 01 00       	call   c0027497 <__extendsfdf2>
c000a5ea:	83 c4 10             	add    esp,0x10
c000a5ed:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5f1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5fd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a601:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a605:	e8 96 c4 01 00       	call   c0026aa0 <__muldf3>
c000a60a:	83 c4 10             	add    esp,0x10
c000a60d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a611:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a615:	52                   	push   edx
c000a616:	50                   	push   eax
c000a617:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a61b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a61f:	e8 ff bd 01 00       	call   c0026423 <__adddf3>
c000a624:	83 c4 10             	add    esp,0x10
c000a627:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a62b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a62f:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a632:	0f 89 8b fd ff ff    	jns    c000a3c3 <calc_output_hex+0x9e>
c000a638:	31 f6                	xor    esi,esi
c000a63a:	31 ff                	xor    edi,edi
c000a63c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a640:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a643:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a647:	29 e9                	sub    ecx,ebp
c000a649:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a64d:	29 c8                	sub    eax,ecx
c000a64f:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a652:	99                   	cdq    
c000a653:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a657:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a65a:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a65e:	0f af e8             	imul   ebp,eax
c000a661:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a665:	40                   	inc    eax
c000a666:	01 cd                	add    ebp,ecx
c000a668:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a66d:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a671:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a675:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a679:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a67c:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a680:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a684:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a688:	89 e8                	mov    eax,ebp
c000a68a:	e8 42 f0 ff ff       	call   c00096d1 <fp_to_double>
c000a68f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a693:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a697:	89 e8                	mov    eax,ebp
c000a699:	e8 29 f0 ff ff       	call   c00096c7 <fp_to_int>
c000a69e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a6a2:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a6a5:	52                   	push   edx
c000a6a6:	52                   	push   edx
c000a6a7:	51                   	push   ecx
c000a6a8:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a6af:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a6b6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a6ba:	e8 f9 b6 01 00       	call   c0025db8 <__subsf3>
c000a6bf:	89 04 24             	mov    DWORD PTR [esp],eax
c000a6c2:	e8 d0 cd 01 00       	call   c0027497 <__extendsfdf2>
c000a6c7:	83 c4 10             	add    esp,0x10
c000a6ca:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6ce:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6da:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6de:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6e2:	e8 b9 c3 01 00       	call   c0026aa0 <__muldf3>
c000a6e7:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6f2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6f5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6f9:	e8 99 cd 01 00       	call   c0027497 <__extendsfdf2>
c000a6fe:	83 c4 10             	add    esp,0x10
c000a701:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a705:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a709:	52                   	push   edx
c000a70a:	50                   	push   eax
c000a70b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a70f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a713:	e8 0b bd 01 00       	call   c0026423 <__adddf3>
c000a718:	59                   	pop    ecx
c000a719:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a71d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a721:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a727:	e8 6b cd 01 00       	call   c0027497 <__extendsfdf2>
c000a72c:	83 c4 10             	add    esp,0x10
c000a72f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a733:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a743:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a747:	e8 54 c3 01 00       	call   c0026aa0 <__muldf3>
c000a74c:	83 c4 10             	add    esp,0x10
c000a74f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a753:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a757:	52                   	push   edx
c000a758:	50                   	push   eax
c000a759:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a75d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a761:	e8 bd bc 01 00       	call   c0026423 <__adddf3>
c000a766:	59                   	pop    ecx
c000a767:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a76b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a76f:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a775:	e8 1d cd 01 00       	call   c0027497 <__extendsfdf2>
c000a77a:	83 c4 10             	add    esp,0x10
c000a77d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a781:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a78d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a791:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a795:	e8 06 c3 01 00       	call   c0026aa0 <__muldf3>
c000a79a:	83 c4 10             	add    esp,0x10
c000a79d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7a1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7a5:	52                   	push   edx
c000a7a6:	50                   	push   eax
c000a7a7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7ab:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7af:	e8 6f bc 01 00       	call   c0026423 <__adddf3>
c000a7b4:	59                   	pop    ecx
c000a7b5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a7b9:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a7bd:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a7c3:	e8 cf cc 01 00       	call   c0027497 <__extendsfdf2>
c000a7c8:	83 c4 10             	add    esp,0x10
c000a7cb:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7cf:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7db:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7df:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7e3:	e8 b8 c2 01 00       	call   c0026aa0 <__muldf3>
c000a7e8:	83 c4 10             	add    esp,0x10
c000a7eb:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7ef:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7f3:	52                   	push   edx
c000a7f4:	50                   	push   eax
c000a7f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7fd:	e8 21 bc 01 00       	call   c0026423 <__adddf3>
c000a802:	59                   	pop    ecx
c000a803:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a807:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a80b:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a811:	e8 81 cc 01 00       	call   c0027497 <__extendsfdf2>
c000a816:	83 c4 10             	add    esp,0x10
c000a819:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a81d:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a825:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a829:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a82d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a831:	e8 6a c2 01 00       	call   c0026aa0 <__muldf3>
c000a836:	83 c4 10             	add    esp,0x10
c000a839:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a83d:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a841:	52                   	push   edx
c000a842:	50                   	push   eax
c000a843:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a847:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a84b:	e8 d3 bb 01 00       	call   c0026423 <__adddf3>
c000a850:	59                   	pop    ecx
c000a851:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a855:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a859:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a85f:	e8 33 cc 01 00       	call   c0027497 <__extendsfdf2>
c000a864:	83 c4 10             	add    esp,0x10
c000a867:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a86b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a86f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a873:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a877:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a87b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a87f:	e8 1c c2 01 00       	call   c0026aa0 <__muldf3>
c000a884:	83 c4 10             	add    esp,0x10
c000a887:	83 eb 18             	sub    ebx,0x18
c000a88a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a88e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a892:	52                   	push   edx
c000a893:	50                   	push   eax
c000a894:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a898:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a89c:	e8 82 bb 01 00       	call   c0026423 <__adddf3>
c000a8a1:	59                   	pop    ecx
c000a8a2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a8a6:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a8aa:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a8b0:	e8 e2 cb 01 00       	call   c0027497 <__extendsfdf2>
c000a8b5:	83 c4 10             	add    esp,0x10
c000a8b8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8bc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8c8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8cc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8d0:	e8 cb c1 01 00       	call   c0026aa0 <__muldf3>
c000a8d5:	83 c4 10             	add    esp,0x10
c000a8d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8e0:	52                   	push   edx
c000a8e1:	50                   	push   eax
c000a8e2:	57                   	push   edi
c000a8e3:	56                   	push   esi
c000a8e4:	e8 3a bb 01 00       	call   c0026423 <__adddf3>
c000a8e9:	83 c4 10             	add    esp,0x10
c000a8ec:	89 c6                	mov    esi,eax
c000a8ee:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8f1:	89 d7                	mov    edi,edx
c000a8f3:	85 ed                	test   ebp,ebp
c000a8f5:	0f 8f 8d fd ff ff    	jg     c000a688 <calc_output_hex+0x363>
c000a8fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a903:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a907:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a90b:	e8 13 bb 01 00       	call   c0026423 <__adddf3>
c000a910:	83 c4 10             	add    esp,0x10
c000a913:	89 04 24             	mov    DWORD PTR [esp],eax
c000a916:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a91a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a91e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a922:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a926:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a92a:	e8 71 c1 01 00       	call   c0026aa0 <__muldf3>
c000a92f:	59                   	pop    ecx
c000a930:	5b                   	pop    ebx
c000a931:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a935:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a939:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a941:	e8 2d ca 01 00       	call   c0027373 <__truncdfsf2>
c000a946:	83 c4 10             	add    esp,0x10
c000a949:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a950:	89 03                	mov    DWORD PTR [ebx],eax
c000a952:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a956:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a95a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a95e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a962:	e8 bc ba 01 00       	call   c0026423 <__adddf3>
c000a967:	83 c4 10             	add    esp,0x10
c000a96a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a96d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a971:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a975:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a979:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a97d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a981:	e8 1a c1 01 00       	call   c0026aa0 <__muldf3>
c000a986:	5d                   	pop    ebp
c000a987:	59                   	pop    ecx
c000a988:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a98c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a994:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a998:	e8 d6 c9 01 00       	call   c0027373 <__truncdfsf2>
c000a99d:	83 c4 10             	add    esp,0x10
c000a9a0:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9a7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a9aa:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9ae:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9b2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9b6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9ba:	e8 64 ba 01 00       	call   c0026423 <__adddf3>
c000a9bf:	83 c4 10             	add    esp,0x10
c000a9c2:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d9:	e8 c2 c0 01 00       	call   c0026aa0 <__muldf3>
c000a9de:	5b                   	pop    ebx
c000a9df:	5d                   	pop    ebp
c000a9e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f0:	e8 7e c9 01 00       	call   c0027373 <__truncdfsf2>
c000a9f5:	83 c4 10             	add    esp,0x10
c000a9f8:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9ff:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000aa02:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa06:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa0a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa0e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa12:	e8 0c ba 01 00       	call   c0026423 <__adddf3>
c000aa17:	83 c4 10             	add    esp,0x10
c000aa1a:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa1d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa31:	e8 6a c0 01 00       	call   c0026aa0 <__muldf3>
c000aa36:	59                   	pop    ecx
c000aa37:	5b                   	pop    ebx
c000aa38:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa48:	e8 26 c9 01 00       	call   c0027373 <__truncdfsf2>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa57:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa5a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa5e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa66:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa6a:	e8 b4 b9 01 00       	call   c0026423 <__adddf3>
c000aa6f:	83 c4 10             	add    esp,0x10
c000aa72:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa75:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa7d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa81:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa85:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa89:	e8 12 c0 01 00       	call   c0026aa0 <__muldf3>
c000aa8e:	5d                   	pop    ebp
c000aa8f:	59                   	pop    ecx
c000aa90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa0:	e8 ce c8 01 00       	call   c0027373 <__truncdfsf2>
c000aaa5:	83 c4 10             	add    esp,0x10
c000aaa8:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aaaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aab2:	57                   	push   edi
c000aab3:	56                   	push   esi
c000aab4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aab8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aabc:	e8 62 b9 01 00       	call   c0026423 <__adddf3>
c000aac1:	83 c4 10             	add    esp,0x10
c000aac4:	89 04 24             	mov    DWORD PTR [esp],eax
c000aac7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aacb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aacf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aadb:	e8 c0 bf 01 00       	call   c0026aa0 <__muldf3>
c000aae0:	5b                   	pop    ebx
c000aae1:	5e                   	pop    esi
c000aae2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aae6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aaea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaf2:	e8 7c c8 01 00       	call   c0027373 <__truncdfsf2>
c000aaf7:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aafe:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ab01:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ab07:	5b                   	pop    ebx
c000ab08:	5e                   	pop    esi
c000ab09:	5f                   	pop    edi
c000ab0a:	5d                   	pop    ebp
c000ab0b:	c3                   	ret    

c000ab0c <sinc_reset>:
c000ab0c:	56                   	push   esi
c000ab0d:	53                   	push   ebx
c000ab0e:	51                   	push   ecx
c000ab0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab13:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ab16:	85 db                	test   ebx,ebx
c000ab18:	74 59                	je     c000ab73 <sinc_reset+0x67>
c000ab1a:	31 d2                	xor    edx,edx
c000ab1c:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ab23:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ab26:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ab29:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ab30:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ab37:	31 c0                	xor    eax,eax
c000ab39:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab3f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab42:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab45:	52                   	push   edx
c000ab46:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab49:	c1 e0 02             	shl    eax,0x2
c000ab4c:	50                   	push   eax
c000ab4d:	6a 00                	push   0x0
c000ab4f:	56                   	push   esi
c000ab50:	e8 6f 5b ff ff       	call   c00006c4 <memset>
c000ab55:	83 c4 0c             	add    esp,0xc
c000ab58:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab5b:	c1 e0 02             	shl    eax,0x2
c000ab5e:	50                   	push   eax
c000ab5f:	68 aa 00 00 00       	push   0xaa
c000ab64:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab67:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab6a:	50                   	push   eax
c000ab6b:	e8 54 5b ff ff       	call   c00006c4 <memset>
c000ab70:	83 c4 10             	add    esp,0x10
c000ab73:	58                   	pop    eax
c000ab74:	5b                   	pop    ebx
c000ab75:	5e                   	pop    esi
c000ab76:	c3                   	ret    

c000ab77 <calc_output_multi>:
c000ab77:	55                   	push   ebp
c000ab78:	57                   	push   edi
c000ab79:	56                   	push   esi
c000ab7a:	89 c6                	mov    esi,eax
c000ab7c:	53                   	push   ebx
c000ab7d:	83 ec 4c             	sub    esp,0x4c
c000ab80:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab84:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab88:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab8c:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab90:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab9c:	8d 46 44             	lea    eax,[esi+0x44]
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000aba8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000abac:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000abaf:	e8 0f eb ff ff       	call   c00096c3 <int_to_fp>
c000abb4:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000abb7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000abbb:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000abbf:	99                   	cdq    
c000abc0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000abc4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000abc8:	0f af d0             	imul   edx,eax
c000abcb:	0f af c3             	imul   eax,ebx
c000abce:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000abd2:	29 c1                	sub    ecx,eax
c000abd4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000abd8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000abdc:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abe3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abe7:	57                   	push   edi
c000abe8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abec:	6a 00                	push   0x0
c000abee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf2:	e8 cd 5a ff ff       	call   c00006c4 <memset>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abfe:	89 df                	mov    edi,ebx
c000ac00:	e8 cc ea ff ff       	call   c00096d1 <fp_to_double>
c000ac05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac09:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac0d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac11:	e8 b1 ea ff ff       	call   c00096c7 <fp_to_int>
c000ac16:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ac19:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ac1c:	51                   	push   ecx
c000ac1d:	51                   	push   ecx
c000ac1e:	55                   	push   ebp
c000ac1f:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ac23:	e8 90 b1 01 00       	call   c0025db8 <__subsf3>
c000ac28:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac2b:	e8 67 c8 01 00       	call   c0027497 <__extendsfdf2>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac4b:	e8 50 be 01 00       	call   c0026aa0 <__muldf3>
c000ac50:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac53:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac57:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac5b:	e8 37 c8 01 00       	call   c0027497 <__extendsfdf2>
c000ac60:	83 c4 10             	add    esp,0x10
c000ac63:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac67:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac6b:	52                   	push   edx
c000ac6c:	50                   	push   eax
c000ac6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac75:	e8 a9 b7 01 00       	call   c0026423 <__adddf3>
c000ac7a:	83 c4 10             	add    esp,0x10
c000ac7d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac81:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac85:	89 f8                	mov    eax,edi
c000ac87:	b9 08 00 00 00       	mov    ecx,0x8
c000ac8c:	99                   	cdq    
c000ac8d:	f7 f9                	idiv   ecx
c000ac8f:	4a                   	dec    edx
c000ac90:	83 fa 06             	cmp    edx,0x6
c000ac93:	77 07                	ja     c000ac9c <calc_output_multi+0x125>
c000ac95:	ff 24 95 64 8c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd739c]
c000ac9c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac9f:	4f                   	dec    edi
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aca6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acaa:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acb1:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acb5:	e8 dd c7 01 00       	call   c0027497 <__extendsfdf2>
c000acba:	83 c4 10             	add    esp,0x10
c000acbd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acc1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000accd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acd1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acd5:	e8 c6 bd 01 00       	call   c0026aa0 <__muldf3>
c000acda:	83 c4 10             	add    esp,0x10
c000acdd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ace1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ace5:	52                   	push   edx
c000ace6:	50                   	push   eax
c000ace7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acea:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aced:	e8 31 b7 01 00       	call   c0026423 <__adddf3>
c000acf2:	83 c4 10             	add    esp,0x10
c000acf5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acf8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acfb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acfe:	4f                   	dec    edi
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad09:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad10:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad14:	e8 7e c7 01 00       	call   c0027497 <__extendsfdf2>
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad20:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad30:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad34:	e8 67 bd 01 00       	call   c0026aa0 <__muldf3>
c000ad39:	83 c4 10             	add    esp,0x10
c000ad3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad40:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad44:	52                   	push   edx
c000ad45:	50                   	push   eax
c000ad46:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad49:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad4c:	e8 d2 b6 01 00       	call   c0026423 <__adddf3>
c000ad51:	83 c4 10             	add    esp,0x10
c000ad54:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad57:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad5a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad5d:	4f                   	dec    edi
c000ad5e:	83 ec 0c             	sub    esp,0xc
c000ad61:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad68:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad6f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad73:	e8 1f c7 01 00       	call   c0027497 <__extendsfdf2>
c000ad78:	83 c4 10             	add    esp,0x10
c000ad7b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad7f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad8b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad93:	e8 08 bd 01 00       	call   c0026aa0 <__muldf3>
c000ad98:	83 c4 10             	add    esp,0x10
c000ad9b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad9f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ada3:	52                   	push   edx
c000ada4:	50                   	push   eax
c000ada5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ada8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000adab:	e8 73 b6 01 00       	call   c0026423 <__adddf3>
c000adb0:	83 c4 10             	add    esp,0x10
c000adb3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000adb6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000adb9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000adbc:	4f                   	dec    edi
c000adbd:	83 ec 0c             	sub    esp,0xc
c000adc0:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000adc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adc7:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adce:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000add2:	e8 c0 c6 01 00       	call   c0027497 <__extendsfdf2>
c000add7:	83 c4 10             	add    esp,0x10
c000adda:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ade2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ade6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adea:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adee:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adf2:	e8 a9 bc 01 00       	call   c0026aa0 <__muldf3>
c000adf7:	83 c4 10             	add    esp,0x10
c000adfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae02:	52                   	push   edx
c000ae03:	50                   	push   eax
c000ae04:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae07:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae0a:	e8 14 b6 01 00       	call   c0026423 <__adddf3>
c000ae0f:	83 c4 10             	add    esp,0x10
c000ae12:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae15:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae1b:	4f                   	dec    edi
c000ae1c:	83 ec 0c             	sub    esp,0xc
c000ae1f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae26:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae2d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae31:	e8 61 c6 01 00       	call   c0027497 <__extendsfdf2>
c000ae36:	83 c4 10             	add    esp,0x10
c000ae39:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae3d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae49:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae4d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae51:	e8 4a bc 01 00       	call   c0026aa0 <__muldf3>
c000ae56:	83 c4 10             	add    esp,0x10
c000ae59:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae5d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae61:	52                   	push   edx
c000ae62:	50                   	push   eax
c000ae63:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae66:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae69:	e8 b5 b5 01 00       	call   c0026423 <__adddf3>
c000ae6e:	83 c4 10             	add    esp,0x10
c000ae71:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae74:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae77:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7a:	4f                   	dec    edi
c000ae7b:	83 ec 0c             	sub    esp,0xc
c000ae7e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae85:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae90:	e8 02 c6 01 00       	call   c0027497 <__extendsfdf2>
c000ae95:	83 c4 10             	add    esp,0x10
c000ae98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb0:	e8 eb bb 01 00       	call   c0026aa0 <__muldf3>
c000aeb5:	83 c4 10             	add    esp,0x10
c000aeb8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebc:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec0:	52                   	push   edx
c000aec1:	50                   	push   eax
c000aec2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec5:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aec8:	e8 56 b5 01 00       	call   c0026423 <__adddf3>
c000aecd:	83 c4 10             	add    esp,0x10
c000aed0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed3:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aed9:	4f                   	dec    edi
c000aeda:	83 ec 0c             	sub    esp,0xc
c000aedd:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeeb:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeef:	e8 a3 c5 01 00       	call   c0027497 <__extendsfdf2>
c000aef4:	83 c4 10             	add    esp,0x10
c000aef7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af07:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0f:	e8 8c bb 01 00       	call   c0026aa0 <__muldf3>
c000af14:	83 c4 10             	add    esp,0x10
c000af17:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af1f:	52                   	push   edx
c000af20:	50                   	push   eax
c000af21:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af24:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af27:	e8 f7 b4 01 00       	call   c0026423 <__adddf3>
c000af2c:	83 c4 10             	add    esp,0x10
c000af2f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af32:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af35:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af38:	4f                   	dec    edi
c000af39:	83 ec 0c             	sub    esp,0xc
c000af3c:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af43:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af4e:	e8 44 c5 01 00       	call   c0027497 <__extendsfdf2>
c000af53:	83 c4 10             	add    esp,0x10
c000af56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6e:	e8 2d bb 01 00       	call   c0026aa0 <__muldf3>
c000af73:	83 c4 10             	add    esp,0x10
c000af76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af7e:	52                   	push   edx
c000af7f:	50                   	push   eax
c000af80:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af83:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af86:	e8 98 b4 01 00       	call   c0026423 <__adddf3>
c000af8b:	83 c4 10             	add    esp,0x10
c000af8e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af91:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af94:	85 ff                	test   edi,edi
c000af96:	0f 8f e9 fc ff ff    	jg     c000ac85 <calc_output_multi+0x10e>
c000af9c:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000afa0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000afa4:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000afa8:	0f 89 4c fc ff ff    	jns    c000abfa <calc_output_multi+0x83>
c000afae:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000afb2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000afb6:	29 c8                	sub    eax,ecx
c000afb8:	99                   	cdq    
c000afb9:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afbd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000afc1:	0f af d0             	imul   edx,eax
c000afc4:	40                   	inc    eax
c000afc5:	01 d1                	add    ecx,edx
c000afc7:	0f af c3             	imul   eax,ebx
c000afca:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000afce:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000afd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000afd5:	55                   	push   ebp
c000afd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afda:	6a 00                	push   0x0
c000afdc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afe0:	e8 df 56 ff ff       	call   c00006c4 <memset>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afec:	e8 e0 e6 ff ff       	call   c00096d1 <fp_to_double>
c000aff1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aff5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aff9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000affd:	e8 c5 e6 ff ff       	call   c00096c7 <fp_to_int>
c000b002:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b005:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b008:	57                   	push   edi
c000b009:	57                   	push   edi
c000b00a:	89 df                	mov    edi,ebx
c000b00c:	55                   	push   ebp
c000b00d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b011:	e8 a2 ad 01 00       	call   c0025db8 <__subsf3>
c000b016:	89 04 24             	mov    DWORD PTR [esp],eax
c000b019:	e8 79 c4 01 00       	call   c0027497 <__extendsfdf2>
c000b01e:	83 c4 10             	add    esp,0x10
c000b021:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b025:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b029:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b02d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b031:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b035:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b039:	e8 62 ba 01 00       	call   c0026aa0 <__muldf3>
c000b03e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b041:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b045:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b049:	e8 49 c4 01 00       	call   c0027497 <__extendsfdf2>
c000b04e:	83 c4 10             	add    esp,0x10
c000b051:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b055:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b059:	52                   	push   edx
c000b05a:	50                   	push   eax
c000b05b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b05f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b063:	e8 bb b3 01 00       	call   c0026423 <__adddf3>
c000b068:	83 c4 10             	add    esp,0x10
c000b06b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b06f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b073:	89 f8                	mov    eax,edi
c000b075:	b9 08 00 00 00       	mov    ecx,0x8
c000b07a:	99                   	cdq    
c000b07b:	f7 f9                	idiv   ecx
c000b07d:	4a                   	dec    edx
c000b07e:	83 fa 06             	cmp    edx,0x6
c000b081:	77 07                	ja     c000b08a <calc_output_multi+0x513>
c000b083:	ff 24 95 80 8c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7380]
c000b08a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b08e:	4f                   	dec    edi
c000b08f:	83 ec 0c             	sub    esp,0xc
c000b092:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b095:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b099:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a4:	e8 ee c3 01 00       	call   c0027497 <__extendsfdf2>
c000b0a9:	83 c4 10             	add    esp,0x10
c000b0ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0c4:	e8 d7 b9 01 00       	call   c0026aa0 <__muldf3>
c000b0c9:	83 c4 10             	add    esp,0x10
c000b0cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0d4:	52                   	push   edx
c000b0d5:	50                   	push   eax
c000b0d6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0d9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0dc:	e8 42 b3 01 00       	call   c0026423 <__adddf3>
c000b0e1:	83 c4 10             	add    esp,0x10
c000b0e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0ee:	4f                   	dec    edi
c000b0ef:	83 ec 0c             	sub    esp,0xc
c000b0f2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0f9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b100:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b104:	e8 8e c3 01 00       	call   c0027497 <__extendsfdf2>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b110:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b114:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b118:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b120:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b124:	e8 77 b9 01 00       	call   c0026aa0 <__muldf3>
c000b129:	83 c4 10             	add    esp,0x10
c000b12c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b130:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b134:	52                   	push   edx
c000b135:	50                   	push   eax
c000b136:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b139:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13c:	e8 e2 b2 01 00       	call   c0026423 <__adddf3>
c000b141:	83 c4 10             	add    esp,0x10
c000b144:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b147:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b14e:	4f                   	dec    edi
c000b14f:	83 ec 0c             	sub    esp,0xc
c000b152:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b155:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b159:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b160:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b164:	e8 2e c3 01 00       	call   c0027497 <__extendsfdf2>
c000b169:	83 c4 10             	add    esp,0x10
c000b16c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b170:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b174:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b178:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b180:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b184:	e8 17 b9 01 00       	call   c0026aa0 <__muldf3>
c000b189:	83 c4 10             	add    esp,0x10
c000b18c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b190:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b194:	52                   	push   edx
c000b195:	50                   	push   eax
c000b196:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b199:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19c:	e8 82 b2 01 00       	call   c0026423 <__adddf3>
c000b1a1:	83 c4 10             	add    esp,0x10
c000b1a4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1ae:	4f                   	dec    edi
c000b1af:	83 ec 0c             	sub    esp,0xc
c000b1b2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1b9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1c0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1c4:	e8 ce c2 01 00       	call   c0027497 <__extendsfdf2>
c000b1c9:	83 c4 10             	add    esp,0x10
c000b1cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1e4:	e8 b7 b8 01 00       	call   c0026aa0 <__muldf3>
c000b1e9:	83 c4 10             	add    esp,0x10
c000b1ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1f4:	52                   	push   edx
c000b1f5:	50                   	push   eax
c000b1f6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1f9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1fc:	e8 22 b2 01 00       	call   c0026423 <__adddf3>
c000b201:	83 c4 10             	add    esp,0x10
c000b204:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b207:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b20a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b20e:	4f                   	dec    edi
c000b20f:	83 ec 0c             	sub    esp,0xc
c000b212:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b215:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b219:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b220:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b224:	e8 6e c2 01 00       	call   c0027497 <__extendsfdf2>
c000b229:	83 c4 10             	add    esp,0x10
c000b22c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b230:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b234:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b238:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b23c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b240:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b244:	e8 57 b8 01 00       	call   c0026aa0 <__muldf3>
c000b249:	83 c4 10             	add    esp,0x10
c000b24c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b250:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b254:	52                   	push   edx
c000b255:	50                   	push   eax
c000b256:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b259:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b25c:	e8 c2 b1 01 00       	call   c0026423 <__adddf3>
c000b261:	83 c4 10             	add    esp,0x10
c000b264:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b267:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b26a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26e:	4f                   	dec    edi
c000b26f:	83 ec 0c             	sub    esp,0xc
c000b272:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b275:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b279:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b280:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b284:	e8 0e c2 01 00       	call   c0027497 <__extendsfdf2>
c000b289:	83 c4 10             	add    esp,0x10
c000b28c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b290:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b294:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b298:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b29c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a4:	e8 f7 b7 01 00       	call   c0026aa0 <__muldf3>
c000b2a9:	83 c4 10             	add    esp,0x10
c000b2ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b4:	52                   	push   edx
c000b2b5:	50                   	push   eax
c000b2b6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2bc:	e8 62 b1 01 00       	call   c0026423 <__adddf3>
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2ce:	4f                   	dec    edi
c000b2cf:	83 ec 0c             	sub    esp,0xc
c000b2d2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2e0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e4:	e8 ae c1 01 00       	call   c0027497 <__extendsfdf2>
c000b2e9:	83 c4 10             	add    esp,0x10
c000b2ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b300:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b304:	e8 97 b7 01 00       	call   c0026aa0 <__muldf3>
c000b309:	83 c4 10             	add    esp,0x10
c000b30c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b310:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b314:	52                   	push   edx
c000b315:	50                   	push   eax
c000b316:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b319:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b31c:	e8 02 b1 01 00       	call   c0026423 <__adddf3>
c000b321:	83 c4 10             	add    esp,0x10
c000b324:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b327:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b32a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32e:	4f                   	dec    edi
c000b32f:	83 ec 0c             	sub    esp,0xc
c000b332:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b335:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b339:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b340:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b344:	e8 4e c1 01 00       	call   c0027497 <__extendsfdf2>
c000b349:	83 c4 10             	add    esp,0x10
c000b34c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b350:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b354:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b35c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b360:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b364:	e8 37 b7 01 00       	call   c0026aa0 <__muldf3>
c000b369:	83 c4 10             	add    esp,0x10
c000b36c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b370:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b374:	52                   	push   edx
c000b375:	50                   	push   eax
c000b376:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b379:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b37c:	e8 a2 b0 01 00       	call   c0026423 <__adddf3>
c000b381:	83 c4 10             	add    esp,0x10
c000b384:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b387:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b38a:	85 ff                	test   edi,edi
c000b38c:	0f 8f e1 fc ff ff    	jg     c000b073 <calc_output_multi+0x4fc>
c000b392:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b396:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b39a:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b39e:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b3a3:	0f 8f 3f fc ff ff    	jg     c000afe8 <calc_output_multi+0x471>
c000b3a9:	be 08 00 00 00       	mov    esi,0x8
c000b3ae:	89 d8                	mov    eax,ebx
c000b3b0:	99                   	cdq    
c000b3b1:	f7 fe                	idiv   esi
c000b3b3:	4a                   	dec    edx
c000b3b4:	83 fa 06             	cmp    edx,0x6
c000b3b7:	77 07                	ja     c000b3c0 <calc_output_multi+0x849>
c000b3b9:	ff 24 95 9c 8c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7364]
c000b3c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c4:	4b                   	dec    ebx
c000b3c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3d7:	e8 47 b0 01 00       	call   c0026423 <__adddf3>
c000b3dc:	83 c4 10             	add    esp,0x10
c000b3df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f7:	e8 a4 b6 01 00       	call   c0026aa0 <__muldf3>
c000b3fc:	5d                   	pop    ebp
c000b3fd:	59                   	pop    ecx
c000b3fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b402:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b40a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b40e:	e8 60 bf 01 00       	call   c0027373 <__truncdfsf2>
c000b413:	83 c4 10             	add    esp,0x10
c000b416:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b41a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b41d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b421:	4b                   	dec    ebx
c000b422:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b426:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b429:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b42d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b431:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b434:	e8 ea af 01 00       	call   c0026423 <__adddf3>
c000b439:	83 c4 10             	add    esp,0x10
c000b43c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b440:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b44c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b450:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b454:	e8 47 b6 01 00       	call   c0026aa0 <__muldf3>
c000b459:	59                   	pop    ecx
c000b45a:	5f                   	pop    edi
c000b45b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b45f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b463:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b46b:	e8 03 bf 01 00       	call   c0027373 <__truncdfsf2>
c000b470:	83 c4 10             	add    esp,0x10
c000b473:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b477:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b47a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b47e:	4b                   	dec    ebx
c000b47f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b483:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b48a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b48e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b491:	e8 8d af 01 00       	call   c0026423 <__adddf3>
c000b496:	83 c4 10             	add    esp,0x10
c000b499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b49d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b1:	e8 ea b5 01 00       	call   c0026aa0 <__muldf3>
c000b4b6:	5f                   	pop    edi
c000b4b7:	5d                   	pop    ebp
c000b4b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c8:	e8 a6 be 01 00       	call   c0027373 <__truncdfsf2>
c000b4cd:	83 c4 10             	add    esp,0x10
c000b4d0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4d4:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4db:	4b                   	dec    ebx
c000b4dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4ee:	e8 30 af 01 00       	call   c0026423 <__adddf3>
c000b4f3:	83 c4 10             	add    esp,0x10
c000b4f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b506:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50e:	e8 8d b5 01 00       	call   c0026aa0 <__muldf3>
c000b513:	5d                   	pop    ebp
c000b514:	59                   	pop    ecx
c000b515:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b519:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b525:	e8 49 be 01 00       	call   c0027373 <__truncdfsf2>
c000b52a:	83 c4 10             	add    esp,0x10
c000b52d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b531:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b534:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b538:	4b                   	dec    ebx
c000b539:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b53d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b540:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b544:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b548:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b54b:	e8 d3 ae 01 00       	call   c0026423 <__adddf3>
c000b550:	83 c4 10             	add    esp,0x10
c000b553:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b557:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b55b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b55f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b563:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b567:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56b:	e8 30 b5 01 00       	call   c0026aa0 <__muldf3>
c000b570:	59                   	pop    ecx
c000b571:	5f                   	pop    edi
c000b572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b57a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b582:	e8 ec bd 01 00       	call   c0027373 <__truncdfsf2>
c000b587:	83 c4 10             	add    esp,0x10
c000b58a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b58e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b591:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b595:	4b                   	dec    ebx
c000b596:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b59a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b59d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a8:	e8 76 ae 01 00       	call   c0026423 <__adddf3>
c000b5ad:	83 c4 10             	add    esp,0x10
c000b5b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5c8:	e8 d3 b4 01 00       	call   c0026aa0 <__muldf3>
c000b5cd:	5f                   	pop    edi
c000b5ce:	5d                   	pop    ebp
c000b5cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5df:	e8 8f bd 01 00       	call   c0027373 <__truncdfsf2>
c000b5e4:	83 c4 10             	add    esp,0x10
c000b5e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5f2:	4b                   	dec    ebx
c000b5f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b602:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b605:	e8 19 ae 01 00       	call   c0026423 <__adddf3>
c000b60a:	83 c4 10             	add    esp,0x10
c000b60d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b611:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b615:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b619:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 76 b4 01 00       	call   c0026aa0 <__muldf3>
c000b62a:	5d                   	pop    ebp
c000b62b:	59                   	pop    ecx
c000b62c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b630:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b634:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b638:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b63c:	e8 32 bd 01 00       	call   c0027373 <__truncdfsf2>
c000b641:	83 c4 10             	add    esp,0x10
c000b644:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b648:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b64b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b64f:	4b                   	dec    ebx
c000b650:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b654:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b657:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b65b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b65f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b662:	e8 bc ad 01 00       	call   c0026423 <__adddf3>
c000b667:	83 c4 10             	add    esp,0x10
c000b66a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b66e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 19 b4 01 00       	call   c0026aa0 <__muldf3>
c000b687:	59                   	pop    ecx
c000b688:	5f                   	pop    edi
c000b689:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b68d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b691:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b695:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b699:	e8 d5 bc 01 00       	call   c0027373 <__truncdfsf2>
c000b69e:	83 c4 10             	add    esp,0x10
c000b6a1:	85 db                	test   ebx,ebx
c000b6a3:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b6a7:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b6aa:	0f 8f fe fc ff ff    	jg     c000b3ae <calc_output_multi+0x837>
c000b6b0:	83 c4 4c             	add    esp,0x4c
c000b6b3:	5b                   	pop    ebx
c000b6b4:	5e                   	pop    esi
c000b6b5:	5f                   	pop    edi
c000b6b6:	5d                   	pop    ebp
c000b6b7:	c3                   	ret    

c000b6b8 <double_to_fp>:
c000b6b8:	83 ec 0c             	sub    esp,0xc
c000b6bb:	68 00 00 b0 40       	push   0x40b00000
c000b6c0:	6a 00                	push   0x0
c000b6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ca:	e8 d1 b3 01 00       	call   c0026aa0 <__muldf3>
c000b6cf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b6d3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b6d7:	83 c4 1c             	add    esp,0x1c
c000b6da:	e9 41 be 01 00       	jmp    c0027520 <lrint>

c000b6df <prepare_data>:
c000b6df:	55                   	push   ebp
c000b6e0:	57                   	push   edi
c000b6e1:	56                   	push   esi
c000b6e2:	53                   	push   ebx
c000b6e3:	83 ec 1c             	sub    esp,0x1c
c000b6e6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6ea:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6ee:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6f2:	0f 89 57 01 00 00    	jns    c000b84f <prepare_data+0x170>
c000b6f8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6fb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6fe:	85 d2                	test   edx,edx
c000b700:	75 0d                	jne    c000b70f <prepare_data+0x30>
c000b702:	8d 14 36             	lea    edx,[esi+esi*1]
c000b705:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b708:	29 d0                	sub    eax,edx
c000b70a:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b70d:	eb 44                	jmp    c000b753 <prepare_data+0x74>
c000b70f:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b712:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b715:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b718:	39 c1                	cmp    ecx,eax
c000b71a:	7d 04                	jge    c000b720 <prepare_data+0x41>
c000b71c:	29 d0                	sub    eax,edx
c000b71e:	eb 2d                	jmp    c000b74d <prepare_data+0x6e>
c000b720:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b726:	29 d7                	sub    edi,edx
c000b728:	01 f7                	add    edi,esi
c000b72a:	51                   	push   ecx
c000b72b:	29 f2                	sub    edx,esi
c000b72d:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b734:	8d 14 90             	lea    edx,[eax+edx*4]
c000b737:	51                   	push   ecx
c000b738:	52                   	push   edx
c000b739:	50                   	push   eax
c000b73a:	e8 29 4f ff ff       	call   c0000668 <memmove>
c000b73f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b742:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b745:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b748:	29 f0                	sub    eax,esi
c000b74a:	83 c4 10             	add    esp,0x10
c000b74d:	29 f0                	sub    eax,esi
c000b74f:	79 02                	jns    c000b753 <prepare_data+0x74>
c000b751:	31 c0                	xor    eax,eax
c000b753:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b756:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b759:	29 ef                	sub    edi,ebp
c000b75b:	39 c7                	cmp    edi,eax
c000b75d:	7e 02                	jle    c000b761 <prepare_data+0x82>
c000b75f:	89 c7                	mov    edi,eax
c000b761:	89 f8                	mov    eax,edi
c000b763:	99                   	cdq    
c000b764:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b767:	b8 15 00 00 00       	mov    eax,0x15
c000b76c:	29 d7                	sub    edi,edx
c000b76e:	0f 88 dd 00 00 00    	js     c000b851 <prepare_data+0x172>
c000b774:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b777:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b77a:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b77d:	0f 8f ce 00 00 00    	jg     c000b851 <prepare_data+0x172>
c000b783:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b789:	50                   	push   eax
c000b78a:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b791:	50                   	push   eax
c000b792:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b796:	8b 00                	mov    eax,DWORD PTR [eax]
c000b798:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b79b:	50                   	push   eax
c000b79c:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b79f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b7a3:	50                   	push   eax
c000b7a4:	e8 f7 4e ff ff       	call   c00006a0 <memcpy>
c000b7a9:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b7ac:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b7af:	01 fd                	add    ebp,edi
c000b7b1:	01 f9                	add    ecx,edi
c000b7b3:	83 c4 10             	add    esp,0x10
c000b7b6:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b7b9:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b7bc:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b7bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7c3:	0f 85 86 00 00 00    	jne    c000b84f <prepare_data+0x170>
c000b7c9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b7cc:	89 e8                	mov    eax,ebp
c000b7ce:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b7d1:	29 c8                	sub    eax,ecx
c000b7d3:	39 f8                	cmp    eax,edi
c000b7d5:	7d 78                	jge    c000b84f <prepare_data+0x170>
c000b7d7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7db:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7df:	74 6e                	je     c000b84f <prepare_data+0x170>
c000b7e1:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7e4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7e8:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7eb:	29 ef                	sub    edi,ebp
c000b7ed:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7f1:	7c 29                	jl     c000b81c <prepare_data+0x13d>
c000b7f3:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7f6:	29 f1                	sub    ecx,esi
c000b7f8:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7ff:	55                   	push   ebp
c000b800:	50                   	push   eax
c000b801:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b804:	50                   	push   eax
c000b805:	52                   	push   edx
c000b806:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b80a:	e8 59 4e ff ff       	call   c0000668 <memmove>
c000b80f:	83 c4 10             	add    esp,0x10
c000b812:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b815:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b818:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b81c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b81f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b822:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b825:	83 c6 05             	add    esi,0x5
c000b828:	78 07                	js     c000b831 <prepare_data+0x152>
c000b82a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b82d:	39 cf                	cmp    edi,ecx
c000b82f:	7e 04                	jle    c000b835 <prepare_data+0x156>
c000b831:	89 ce                	mov    esi,ecx
c000b833:	29 c6                	sub    esi,eax
c000b835:	8d 04 82             	lea    eax,[edx+eax*4]
c000b838:	51                   	push   ecx
c000b839:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b840:	51                   	push   ecx
c000b841:	6a 00                	push   0x0
c000b843:	50                   	push   eax
c000b844:	e8 7b 4e ff ff       	call   c00006c4 <memset>
c000b849:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	31 c0                	xor    eax,eax
c000b851:	83 c4 1c             	add    esp,0x1c
c000b854:	5b                   	pop    ebx
c000b855:	5e                   	pop    esi
c000b856:	5f                   	pop    edi
c000b857:	5d                   	pop    ebp
c000b858:	c3                   	ret    

c000b859 <sinc_multichan_vari_process>:
c000b859:	55                   	push   ebp
c000b85a:	ba 05 00 00 00       	mov    edx,0x5
c000b85f:	57                   	push   edi
c000b860:	56                   	push   esi
c000b861:	53                   	push   ebx
c000b862:	83 ec 4c             	sub    esp,0x4c
c000b865:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b869:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b86d:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b870:	85 db                	test   ebx,ebx
c000b872:	0f 84 9b 06 00 00    	je     c000bf13 <sinc_multichan_vari_process+0x6ba>
c000b878:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b87b:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b87e:	0f af c5             	imul   eax,ebp
c000b881:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b884:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b887:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b88e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b895:	0f af c5             	imul   eax,ebp
c000b898:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b89b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b89e:	8b 06                	mov    eax,DWORD PTR [esi]
c000b8a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a8:	68 00 00 70 3f       	push   0x3f700000
c000b8ad:	6a 00                	push   0x0
c000b8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b7:	e8 b3 ba 01 00       	call   c002736f <__ltdf2>
c000b8bc:	83 c4 10             	add    esp,0x10
c000b8bf:	ba 16 00 00 00       	mov    edx,0x16
c000b8c4:	85 c0                	test   eax,eax
c000b8c6:	0f 88 47 06 00 00    	js     c000bf13 <sinc_multichan_vari_process+0x6ba>
c000b8cc:	68 00 00 70 40       	push   0x40700000
c000b8d1:	6a 00                	push   0x0
c000b8d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8db:	e8 71 ba 01 00       	call   c0027351 <__gtdf2>
c000b8e0:	83 c4 10             	add    esp,0x10
c000b8e3:	ba 16 00 00 00       	mov    edx,0x16
c000b8e8:	85 c0                	test   eax,eax
c000b8ea:	0f 8f 23 06 00 00    	jg     c000bf13 <sinc_multichan_vari_process+0x6ba>
c000b8f0:	83 ec 0c             	sub    esp,0xc
c000b8f3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8f6:	e8 08 b8 01 00       	call   c0027103 <__floatsidf>
c000b8fb:	83 c4 10             	add    esp,0x10
c000b8fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b902:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b906:	68 00 00 00 40       	push   0x40000000
c000b90b:	6a 00                	push   0x0
c000b90d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b911:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b915:	e8 09 ab 01 00       	call   c0026423 <__adddf3>
c000b91a:	59                   	pop    ecx
c000b91b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b91f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b923:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b926:	e8 d8 b7 01 00       	call   c0027103 <__floatsidf>
c000b92b:	83 c4 10             	add    esp,0x10
c000b92e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b932:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b936:	52                   	push   edx
c000b937:	50                   	push   eax
c000b938:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b93c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b940:	e8 3f b4 01 00       	call   c0026d84 <__divdf3>
c000b945:	83 c4 10             	add    esp,0x10
c000b948:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b94c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b950:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b953:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b956:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b95a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b95e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b96a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b96e:	e8 de b9 01 00       	call   c0027351 <__gtdf2>
c000b973:	83 c4 10             	add    esp,0x10
c000b976:	85 c0                	test   eax,eax
c000b978:	7e 2d                	jle    c000b9a7 <sinc_multichan_vari_process+0x14e>
c000b97a:	68 00 00 f0 3f       	push   0x3ff00000
c000b97f:	6a 00                	push   0x0
c000b981:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b985:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b989:	e8 e1 b9 01 00       	call   c002736f <__ltdf2>
c000b98e:	83 c4 10             	add    esp,0x10
c000b991:	85 c0                	test   eax,eax
c000b993:	79 4d                	jns    c000b9e2 <sinc_multichan_vari_process+0x189>
c000b995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b999:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b99d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b9a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b9a5:	eb 1b                	jmp    c000b9c2 <sinc_multichan_vari_process+0x169>
c000b9a7:	68 00 00 f0 3f       	push   0x3ff00000
c000b9ac:	6a 00                	push   0x0
c000b9ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9b6:	e8 b4 b9 01 00       	call   c002736f <__ltdf2>
c000b9bb:	83 c4 10             	add    esp,0x10
c000b9be:	85 c0                	test   eax,eax
c000b9c0:	79 20                	jns    c000b9e2 <sinc_multichan_vari_process+0x189>
c000b9c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d2:	e8 ad b3 01 00       	call   c0026d84 <__divdf3>
c000b9d7:	83 c4 10             	add    esp,0x10
c000b9da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e2:	50                   	push   eax
c000b9e3:	50                   	push   eax
c000b9e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9ec:	e8 2f bb 01 00       	call   c0027520 <lrint>
c000b9f1:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9f4:	40                   	inc    eax
c000b9f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9f9:	0f af c5             	imul   eax,ebp
c000b9fc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ba00:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ba03:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba07:	58                   	pop    eax
c000ba08:	5a                   	pop    edx
c000ba09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba11:	e8 0a bb 01 00       	call   c0027520 <lrint>
c000ba16:	83 ec 0c             	sub    esp,0xc
c000ba19:	50                   	push   eax
c000ba1a:	e8 e4 b6 01 00       	call   c0027103 <__floatsidf>
c000ba1f:	83 c4 10             	add    esp,0x10
c000ba22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba2a:	52                   	push   edx
c000ba2b:	50                   	push   eax
c000ba2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba34:	e8 3b b0 01 00       	call   c0026a74 <__subdf3>
c000ba39:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba41:	83 c4 20             	add    esp,0x20
c000ba44:	6a 00                	push   0x0
c000ba46:	6a 00                	push   0x0
c000ba48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba50:	e8 1a b9 01 00       	call   c002736f <__ltdf2>
c000ba55:	83 c4 10             	add    esp,0x10
c000ba58:	85 c0                	test   eax,eax
c000ba5a:	79 1f                	jns    c000ba7b <sinc_multichan_vari_process+0x222>
c000ba5c:	68 00 00 f0 3f       	push   0x3ff00000
c000ba61:	6a 00                	push   0x0
c000ba63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba6b:	e8 b3 a9 01 00       	call   c0026423 <__adddf3>
c000ba70:	83 c4 10             	add    esp,0x10
c000ba73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba7b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba7e:	83 ec 10             	sub    esp,0x10
c000ba81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba85:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba94:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba98:	e8 d7 af 01 00       	call   c0026a74 <__subdf3>
c000ba9d:	83 c4 18             	add    esp,0x18
c000baa0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000baa4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baa8:	52                   	push   edx
c000baa9:	50                   	push   eax
c000baaa:	e8 71 ba 01 00       	call   c0027520 <lrint>
c000baaf:	0f af e8             	imul   ebp,eax
c000bab2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bab6:	01 e8                	add    eax,ebp
c000bab8:	99                   	cdq    
c000bab9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000babc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000babf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bac7:	68 00 00 f0 3f       	push   0x3ff00000
c000bacc:	6a 00                	push   0x0
c000bace:	e8 b1 b2 01 00       	call   c0026d84 <__divdf3>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bada:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bade:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bae3:	68 23 42 92 0c       	push   0xc924223
c000bae8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baf0:	e8 2e a9 01 00       	call   c0026423 <__adddf3>
c000baf5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000baf9:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bafd:	83 c4 20             	add    esp,0x20
c000bb00:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bb08:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bb10:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bb13:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bb16:	7d 50                	jge    c000bb68 <sinc_multichan_vari_process+0x30f>
c000bb18:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb1b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb1e:	01 c8                	add    eax,ecx
c000bb20:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb23:	99                   	cdq    
c000bb24:	f7 f9                	idiv   ecx
c000bb26:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb2a:	7d 0c                	jge    c000bb38 <sinc_multichan_vari_process+0x2df>
c000bb2c:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bb2f:	85 ed                	test   ebp,ebp
c000bb31:	79 6b                	jns    c000bb9e <sinc_multichan_vari_process+0x345>
c000bb33:	e9 e6 00 00 00       	jmp    c000bc1e <sinc_multichan_vari_process+0x3c5>
c000bb38:	50                   	push   eax
c000bb39:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb3d:	57                   	push   edi
c000bb3e:	53                   	push   ebx
c000bb3f:	e8 9b fb ff ff       	call   c000b6df <prepare_data>
c000bb44:	83 c4 10             	add    esp,0x10
c000bb47:	89 c2                	mov    edx,eax
c000bb49:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb4c:	85 c0                	test   eax,eax
c000bb4e:	0f 85 bf 03 00 00    	jne    c000bf13 <sinc_multichan_vari_process+0x6ba>
c000bb54:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb57:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb5a:	01 c8                	add    eax,ecx
c000bb5c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb5f:	99                   	cdq    
c000bb60:	f7 f9                	idiv   ecx
c000bb62:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb66:	7c c4                	jl     c000bb2c <sinc_multichan_vari_process+0x2d3>
c000bb68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb70:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb73:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb7a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7e:	89 06                	mov    DWORD PTR [esi],eax
c000bb80:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb86:	99                   	cdq    
c000bb87:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb8a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb8d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb90:	99                   	cdq    
c000bb91:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb94:	31 d2                	xor    edx,edx
c000bb96:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb99:	e9 75 03 00 00       	jmp    c000bf13 <sinc_multichan_vari_process+0x6ba>
c000bb9e:	83 ec 0c             	sub    esp,0xc
c000bba1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bba4:	e8 5a b5 01 00       	call   c0027103 <__floatsidf>
c000bba9:	83 c4 10             	add    esp,0x10
c000bbac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bbb0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bbb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbbc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc4:	e8 5a a8 01 00       	call   c0026423 <__adddf3>
c000bbc9:	83 c4 10             	add    esp,0x10
c000bbcc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bbd0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bbd4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbd8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbdc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbe0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbe4:	e8 3a a8 01 00       	call   c0026423 <__adddf3>
c000bbe9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbf0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbf4:	e8 0a b5 01 00       	call   c0027103 <__floatsidf>
c000bbf9:	83 c4 10             	add    esp,0x10
c000bbfc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc04:	52                   	push   edx
c000bc05:	50                   	push   eax
c000bc06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc0e:	e8 5a b7 01 00       	call   c002736d <__gedf2>
c000bc13:	83 c4 10             	add    esp,0x10
c000bc16:	85 c0                	test   eax,eax
c000bc18:	0f 89 4a ff ff ff    	jns    c000bb68 <sinc_multichan_vari_process+0x30f>
c000bc1e:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bc22:	0f 8e ed 00 00 00    	jle    c000bd15 <sinc_multichan_vari_process+0x4bc>
c000bc28:	83 ec 10             	sub    esp,0x10
c000bc2b:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc2e:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc31:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bc34:	ff 36                	push   DWORD PTR [esi]
c000bc36:	e8 39 ae 01 00       	call   c0026a74 <__subdf3>
c000bc3b:	83 c4 18             	add    esp,0x18
c000bc3e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc42:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc46:	52                   	push   edx
c000bc47:	50                   	push   eax
c000bc48:	e8 b3 b8 01 00       	call   c0027500 <fabs>
c000bc4d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc55:	83 c4 10             	add    esp,0x10
c000bc58:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc5d:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc6a:	e8 e2 b6 01 00       	call   c0027351 <__gtdf2>
c000bc6f:	83 c4 10             	add    esp,0x10
c000bc72:	85 c0                	test   eax,eax
c000bc74:	0f 8e 9b 00 00 00    	jle    c000bd15 <sinc_multichan_vari_process+0x4bc>
c000bc7a:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc7c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc7f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc83:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc87:	52                   	push   edx
c000bc88:	50                   	push   eax
c000bc89:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc8c:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc8f:	e8 e0 ad 01 00       	call   c0026a74 <__subdf3>
c000bc94:	59                   	pop    ecx
c000bc95:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc99:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc9d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bca0:	e8 5e b4 01 00       	call   c0027103 <__floatsidf>
c000bca5:	83 c4 10             	add    esp,0x10
c000bca8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcb0:	52                   	push   edx
c000bcb1:	50                   	push   eax
c000bcb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcba:	e8 e1 ad 01 00       	call   c0026aa0 <__muldf3>
c000bcbf:	5d                   	pop    ebp
c000bcc0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bcc4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bcc8:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bccb:	e8 33 b4 01 00       	call   c0027103 <__floatsidf>
c000bcd0:	83 c4 10             	add    esp,0x10
c000bcd3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcd7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcdb:	52                   	push   edx
c000bcdc:	50                   	push   eax
c000bcdd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bce1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bce5:	e8 9a b0 01 00       	call   c0026d84 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcf1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd05:	e8 19 a7 01 00       	call   c0026423 <__adddf3>
c000bd0a:	83 c4 10             	add    esp,0x10
c000bd0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bd11:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bd15:	83 ec 0c             	sub    esp,0xc
c000bd18:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd1b:	e8 e3 b3 01 00       	call   c0027103 <__floatsidf>
c000bd20:	83 c4 10             	add    esp,0x10
c000bd23:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd27:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd3b:	e8 2f b6 01 00       	call   c002736f <__ltdf2>
c000bd40:	83 c4 10             	add    esp,0x10
c000bd43:	85 c0                	test   eax,eax
c000bd45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd49:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd4d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd51:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd55:	78 10                	js     c000bd67 <sinc_multichan_vari_process+0x50e>
c000bd57:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd5b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd5f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd63:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd77:	e8 24 ad 01 00       	call   c0026aa0 <__muldf3>
c000bd7c:	59                   	pop    ecx
c000bd7d:	5d                   	pop    ebp
c000bd7e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd82:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd8e:	e8 25 f9 ff ff       	call   c000b6b8 <double_to_fp>
c000bd93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd97:	89 c5                	mov    ebp,eax
c000bd99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd9d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bda1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bda5:	e8 f6 ac 01 00       	call   c0026aa0 <__muldf3>
c000bdaa:	83 c4 18             	add    esp,0x18
c000bdad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdb1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdb5:	52                   	push   edx
c000bdb6:	50                   	push   eax
c000bdb7:	e8 fc f8 ff ff       	call   c000b6b8 <double_to_fp>
c000bdbc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bdbf:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bdc3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bdc6:	8d 04 90             	lea    eax,[eax+edx*4]
c000bdc9:	50                   	push   eax
c000bdca:	50                   	push   eax
c000bdcb:	50                   	push   eax
c000bdcc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bdcf:	e8 2f b3 01 00       	call   c0027103 <__floatsidf>
c000bdd4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bdd8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bddc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdec:	e8 93 af 01 00       	call   c0026d84 <__divdf3>
c000bdf1:	83 c4 1c             	add    esp,0x1c
c000bdf4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdf8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdfc:	52                   	push   edx
c000bdfd:	89 ea                	mov    edx,ebp
c000bdff:	50                   	push   eax
c000be00:	89 d8                	mov    eax,ebx
c000be02:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be05:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000be09:	e8 69 ed ff ff       	call   c000ab77 <calc_output_multi>
c000be0e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be11:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000be14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be24:	e8 5b af 01 00       	call   c0026d84 <__divdf3>
c000be29:	83 c4 10             	add    esp,0x10
c000be2c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000be30:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000be34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be44:	e8 da a5 01 00       	call   c0026423 <__adddf3>
c000be49:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be4d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be51:	83 c4 28             	add    esp,0x28
c000be54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be5c:	e8 bf b6 01 00       	call   c0027520 <lrint>
c000be61:	83 ec 0c             	sub    esp,0xc
c000be64:	50                   	push   eax
c000be65:	e8 99 b2 01 00       	call   c0027103 <__floatsidf>
c000be6a:	83 c4 10             	add    esp,0x10
c000be6d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be71:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be75:	52                   	push   edx
c000be76:	50                   	push   eax
c000be77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be7f:	e8 f0 ab 01 00       	call   c0026a74 <__subdf3>
c000be84:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be88:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8c:	83 c4 20             	add    esp,0x20
c000be8f:	6a 00                	push   0x0
c000be91:	6a 00                	push   0x0
c000be93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be9b:	e8 cf b4 01 00       	call   c002736f <__ltdf2>
c000bea0:	83 c4 10             	add    esp,0x10
c000bea3:	85 c0                	test   eax,eax
c000bea5:	79 20                	jns    c000bec7 <sinc_multichan_vari_process+0x66e>
c000bea7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beaf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beb7:	e8 67 a5 01 00       	call   c0026423 <__adddf3>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bec3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bec7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000beca:	83 ec 10             	sub    esp,0x10
c000becd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000bed1:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bed8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bedc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bee0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bee4:	e8 8b ab 01 00       	call   c0026a74 <__subdf3>
c000bee9:	83 c4 18             	add    esp,0x18
c000beec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bef4:	52                   	push   edx
c000bef5:	50                   	push   eax
c000bef6:	e8 25 b6 01 00       	call   c0027520 <lrint>
c000befb:	0f af e8             	imul   ebp,eax
c000befe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf02:	83 c4 10             	add    esp,0x10
c000bf05:	01 e8                	add    eax,ebp
c000bf07:	99                   	cdq    
c000bf08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bf0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bf0e:	e9 fd fb ff ff       	jmp    c000bb10 <sinc_multichan_vari_process+0x2b7>
c000bf13:	83 c4 4c             	add    esp,0x4c
c000bf16:	89 d0                	mov    eax,edx
c000bf18:	5b                   	pop    ebx
c000bf19:	5e                   	pop    esi
c000bf1a:	5f                   	pop    edi
c000bf1b:	5d                   	pop    ebp
c000bf1c:	c3                   	ret    

c000bf1d <sinc_hex_vari_process>:
c000bf1d:	55                   	push   ebp
c000bf1e:	ba 05 00 00 00       	mov    edx,0x5
c000bf23:	57                   	push   edi
c000bf24:	56                   	push   esi
c000bf25:	53                   	push   ebx
c000bf26:	83 ec 4c             	sub    esp,0x4c
c000bf29:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bf2d:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bf31:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000bf34:	85 db                	test   ebx,ebx
c000bf36:	0f 84 9c 06 00 00    	je     c000c5d8 <sinc_hex_vari_process+0x6bb>
c000bf3c:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf3f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf42:	0f af c7             	imul   eax,edi
c000bf45:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf48:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf4b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf52:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf59:	0f af c7             	imul   eax,edi
c000bf5c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf5f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf62:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf65:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf69:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf6d:	68 00 00 70 3f       	push   0x3f700000
c000bf72:	6a 00                	push   0x0
c000bf74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf7c:	e8 ee b3 01 00       	call   c002736f <__ltdf2>
c000bf81:	83 c4 10             	add    esp,0x10
c000bf84:	ba 16 00 00 00       	mov    edx,0x16
c000bf89:	85 c0                	test   eax,eax
c000bf8b:	0f 88 47 06 00 00    	js     c000c5d8 <sinc_hex_vari_process+0x6bb>
c000bf91:	68 00 00 70 40       	push   0x40700000
c000bf96:	6a 00                	push   0x0
c000bf98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfa0:	e8 ac b3 01 00       	call   c0027351 <__gtdf2>
c000bfa5:	83 c4 10             	add    esp,0x10
c000bfa8:	ba 16 00 00 00       	mov    edx,0x16
c000bfad:	85 c0                	test   eax,eax
c000bfaf:	0f 8f 23 06 00 00    	jg     c000c5d8 <sinc_hex_vari_process+0x6bb>
c000bfb5:	83 ec 0c             	sub    esp,0xc
c000bfb8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bfbb:	e8 43 b1 01 00       	call   c0027103 <__floatsidf>
c000bfc0:	83 c4 10             	add    esp,0x10
c000bfc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfc7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfcb:	68 00 00 00 40       	push   0x40000000
c000bfd0:	6a 00                	push   0x0
c000bfd2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfda:	e8 44 a4 01 00       	call   c0026423 <__adddf3>
c000bfdf:	59                   	pop    ecx
c000bfe0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfe4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfe8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfeb:	e8 13 b1 01 00       	call   c0027103 <__floatsidf>
c000bff0:	83 c4 10             	add    esp,0x10
c000bff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bffb:	52                   	push   edx
c000bffc:	50                   	push   eax
c000bffd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c001:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c005:	e8 7a ad 01 00       	call   c0026d84 <__divdf3>
c000c00a:	83 c4 10             	add    esp,0x10
c000c00d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c011:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c015:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c018:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c01b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c01f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c023:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c027:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c02b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c02f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c033:	e8 19 b3 01 00       	call   c0027351 <__gtdf2>
c000c038:	83 c4 10             	add    esp,0x10
c000c03b:	85 c0                	test   eax,eax
c000c03d:	7e 2d                	jle    c000c06c <sinc_hex_vari_process+0x14f>
c000c03f:	68 00 00 f0 3f       	push   0x3ff00000
c000c044:	6a 00                	push   0x0
c000c046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c04e:	e8 1c b3 01 00       	call   c002736f <__ltdf2>
c000c053:	83 c4 10             	add    esp,0x10
c000c056:	85 c0                	test   eax,eax
c000c058:	79 4d                	jns    c000c0a7 <sinc_hex_vari_process+0x18a>
c000c05a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c05e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c062:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c066:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c06a:	eb 1b                	jmp    c000c087 <sinc_hex_vari_process+0x16a>
c000c06c:	68 00 00 f0 3f       	push   0x3ff00000
c000c071:	6a 00                	push   0x0
c000c073:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c077:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c07b:	e8 ef b2 01 00       	call   c002736f <__ltdf2>
c000c080:	83 c4 10             	add    esp,0x10
c000c083:	85 c0                	test   eax,eax
c000c085:	79 20                	jns    c000c0a7 <sinc_hex_vari_process+0x18a>
c000c087:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c08b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c08f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c093:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c097:	e8 e8 ac 01 00       	call   c0026d84 <__divdf3>
c000c09c:	83 c4 10             	add    esp,0x10
c000c09f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0a7:	50                   	push   eax
c000c0a8:	50                   	push   eax
c000c0a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0b1:	e8 6a b4 01 00       	call   c0027520 <lrint>
c000c0b6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c0b9:	40                   	inc    eax
c000c0ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0be:	0f af c7             	imul   eax,edi
c000c0c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c0c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c0c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0cc:	58                   	pop    eax
c000c0cd:	5a                   	pop    edx
c000c0ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0d6:	e8 45 b4 01 00       	call   c0027520 <lrint>
c000c0db:	83 ec 0c             	sub    esp,0xc
c000c0de:	50                   	push   eax
c000c0df:	e8 1f b0 01 00       	call   c0027103 <__floatsidf>
c000c0e4:	83 c4 10             	add    esp,0x10
c000c0e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0ef:	52                   	push   edx
c000c0f0:	50                   	push   eax
c000c0f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0f9:	e8 76 a9 01 00       	call   c0026a74 <__subdf3>
c000c0fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c102:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c106:	83 c4 20             	add    esp,0x20
c000c109:	6a 00                	push   0x0
c000c10b:	6a 00                	push   0x0
c000c10d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c111:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c115:	e8 55 b2 01 00       	call   c002736f <__ltdf2>
c000c11a:	83 c4 10             	add    esp,0x10
c000c11d:	85 c0                	test   eax,eax
c000c11f:	79 1f                	jns    c000c140 <sinc_hex_vari_process+0x223>
c000c121:	68 00 00 f0 3f       	push   0x3ff00000
c000c126:	6a 00                	push   0x0
c000c128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c12c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c130:	e8 ee a2 01 00       	call   c0026423 <__adddf3>
c000c135:	83 c4 10             	add    esp,0x10
c000c138:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c13c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c140:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c143:	83 ec 10             	sub    esp,0x10
c000c146:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c14a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c14d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c159:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c15d:	e8 12 a9 01 00       	call   c0026a74 <__subdf3>
c000c162:	83 c4 18             	add    esp,0x18
c000c165:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c169:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c16d:	52                   	push   edx
c000c16e:	50                   	push   eax
c000c16f:	e8 ac b3 01 00       	call   c0027520 <lrint>
c000c174:	0f af f8             	imul   edi,eax
c000c177:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c17b:	01 f8                	add    eax,edi
c000c17d:	99                   	cdq    
c000c17e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c181:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c188:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c18c:	68 00 00 f0 3f       	push   0x3ff00000
c000c191:	6a 00                	push   0x0
c000c193:	e8 ec ab 01 00       	call   c0026d84 <__divdf3>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c19f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c1a3:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c1a8:	68 23 42 92 0c       	push   0xc924223
c000c1ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b5:	e8 69 a2 01 00       	call   c0026423 <__adddf3>
c000c1ba:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c1be:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c1c2:	83 c4 20             	add    esp,0x20
c000c1c5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c1cd:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c1d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c1d8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1db:	7d 50                	jge    c000c22d <sinc_hex_vari_process+0x310>
c000c1dd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1e0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1e3:	01 c8                	add    eax,ecx
c000c1e5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1e8:	99                   	cdq    
c000c1e9:	f7 f9                	idiv   ecx
c000c1eb:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1ef:	7d 0c                	jge    c000c1fd <sinc_hex_vari_process+0x2e0>
c000c1f1:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1f4:	85 ff                	test   edi,edi
c000c1f6:	79 6c                	jns    c000c264 <sinc_hex_vari_process+0x347>
c000c1f8:	e9 e7 00 00 00       	jmp    c000c2e4 <sinc_hex_vari_process+0x3c7>
c000c1fd:	50                   	push   eax
c000c1fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c202:	56                   	push   esi
c000c203:	53                   	push   ebx
c000c204:	e8 d6 f4 ff ff       	call   c000b6df <prepare_data>
c000c209:	83 c4 10             	add    esp,0x10
c000c20c:	89 c2                	mov    edx,eax
c000c20e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c211:	85 c0                	test   eax,eax
c000c213:	0f 85 bf 03 00 00    	jne    c000c5d8 <sinc_hex_vari_process+0x6bb>
c000c219:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c21c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c21f:	01 c8                	add    eax,ecx
c000c221:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c224:	99                   	cdq    
c000c225:	f7 f9                	idiv   ecx
c000c227:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c22b:	7c c4                	jl     c000c1f1 <sinc_hex_vari_process+0x2d4>
c000c22d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c231:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c235:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c238:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c243:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c246:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c249:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c24c:	99                   	cdq    
c000c24d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c250:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c253:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c256:	99                   	cdq    
c000c257:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c25a:	31 d2                	xor    edx,edx
c000c25c:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c25f:	e9 74 03 00 00       	jmp    c000c5d8 <sinc_hex_vari_process+0x6bb>
c000c264:	83 ec 0c             	sub    esp,0xc
c000c267:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c26a:	e8 94 ae 01 00       	call   c0027103 <__floatsidf>
c000c26f:	83 c4 10             	add    esp,0x10
c000c272:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c276:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c27a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c27e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c282:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c286:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c28a:	e8 94 a1 01 00       	call   c0026423 <__adddf3>
c000c28f:	83 c4 10             	add    esp,0x10
c000c292:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c296:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c29a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c29e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2aa:	e8 74 a1 01 00       	call   c0026423 <__adddf3>
c000c2af:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c2b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2ba:	e8 44 ae 01 00       	call   c0027103 <__floatsidf>
c000c2bf:	83 c4 10             	add    esp,0x10
c000c2c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2ca:	52                   	push   edx
c000c2cb:	50                   	push   eax
c000c2cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2d4:	e8 94 b0 01 00       	call   c002736d <__gedf2>
c000c2d9:	83 c4 10             	add    esp,0x10
c000c2dc:	85 c0                	test   eax,eax
c000c2de:	0f 89 49 ff ff ff    	jns    c000c22d <sinc_hex_vari_process+0x310>
c000c2e4:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2e8:	0f 8e ef 00 00 00    	jle    c000c3dd <sinc_hex_vari_process+0x4c0>
c000c2ee:	83 ec 10             	sub    esp,0x10
c000c2f1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2f4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2f7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2fa:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2fd:	e8 72 a7 01 00       	call   c0026a74 <__subdf3>
c000c302:	83 c4 18             	add    esp,0x18
c000c305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c30d:	52                   	push   edx
c000c30e:	50                   	push   eax
c000c30f:	e8 ec b1 01 00       	call   c0027500 <fabs>
c000c314:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c318:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c31c:	83 c4 10             	add    esp,0x10
c000c31f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c324:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c329:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c32d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c331:	e8 1b b0 01 00       	call   c0027351 <__gtdf2>
c000c336:	83 c4 10             	add    esp,0x10
c000c339:	85 c0                	test   eax,eax
c000c33b:	0f 8e 9c 00 00 00    	jle    c000c3dd <sinc_hex_vari_process+0x4c0>
c000c341:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c344:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c347:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c34b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c34f:	52                   	push   edx
c000c350:	50                   	push   eax
c000c351:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c354:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c357:	e8 18 a7 01 00       	call   c0026a74 <__subdf3>
c000c35c:	59                   	pop    ecx
c000c35d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c361:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c365:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c368:	e8 96 ad 01 00       	call   c0027103 <__floatsidf>
c000c36d:	83 c4 10             	add    esp,0x10
c000c370:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c374:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c378:	52                   	push   edx
c000c379:	50                   	push   eax
c000c37a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c37e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c382:	e8 19 a7 01 00       	call   c0026aa0 <__muldf3>
c000c387:	5f                   	pop    edi
c000c388:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c38c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c390:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c393:	e8 6b ad 01 00       	call   c0027103 <__floatsidf>
c000c398:	83 c4 10             	add    esp,0x10
c000c39b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c39f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3a3:	52                   	push   edx
c000c3a4:	50                   	push   eax
c000c3a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3ad:	e8 d2 a9 01 00       	call   c0026d84 <__divdf3>
c000c3b2:	83 c4 10             	add    esp,0x10
c000c3b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3b9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3cd:	e8 51 a0 01 00       	call   c0026423 <__adddf3>
c000c3d2:	83 c4 10             	add    esp,0x10
c000c3d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3d9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3dd:	83 ec 0c             	sub    esp,0xc
c000c3e0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3e3:	e8 1b ad 01 00       	call   c0027103 <__floatsidf>
c000c3e8:	83 c4 10             	add    esp,0x10
c000c3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c403:	e8 67 af 01 00       	call   c002736f <__ltdf2>
c000c408:	83 c4 10             	add    esp,0x10
c000c40b:	85 c0                	test   eax,eax
c000c40d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c411:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c415:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c419:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c41d:	78 10                	js     c000c42f <sinc_hex_vari_process+0x512>
c000c41f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c423:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c427:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c42b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c42f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c433:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c437:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c43b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c43f:	e8 5c a6 01 00       	call   c0026aa0 <__muldf3>
c000c444:	59                   	pop    ecx
c000c445:	5f                   	pop    edi
c000c446:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c44a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c44e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c452:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c456:	e8 5d f2 ff ff       	call   c000b6b8 <double_to_fp>
c000c45b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c45f:	89 c7                	mov    edi,eax
c000c461:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c465:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c469:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c46d:	e8 2e a6 01 00       	call   c0026aa0 <__muldf3>
c000c472:	83 c4 18             	add    esp,0x18
c000c475:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c479:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c47d:	52                   	push   edx
c000c47e:	50                   	push   eax
c000c47f:	e8 34 f2 ff ff       	call   c000b6b8 <double_to_fp>
c000c484:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c487:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c48b:	83 c4 0c             	add    esp,0xc
c000c48e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c491:	8d 04 90             	lea    eax,[eax+edx*4]
c000c494:	50                   	push   eax
c000c495:	50                   	push   eax
c000c496:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c499:	e8 65 ac 01 00       	call   c0027103 <__floatsidf>
c000c49e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c4a2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4b6:	e8 c9 a8 01 00       	call   c0026d84 <__divdf3>
c000c4bb:	83 c4 18             	add    esp,0x18
c000c4be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c6:	52                   	push   edx
c000c4c7:	89 fa                	mov    edx,edi
c000c4c9:	50                   	push   eax
c000c4ca:	89 d8                	mov    eax,ebx
c000c4cc:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c4d0:	e8 50 de ff ff       	call   c000a325 <calc_output_hex>
c000c4d5:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4e9:	e8 96 a8 01 00       	call   c0026d84 <__divdf3>
c000c4ee:	83 c4 10             	add    esp,0x10
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c501:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c505:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c509:	e8 15 9f 01 00       	call   c0026423 <__adddf3>
c000c50e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c512:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c516:	83 c4 18             	add    esp,0x18
c000c519:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c51d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c521:	e8 fa af 01 00       	call   c0027520 <lrint>
c000c526:	83 ec 0c             	sub    esp,0xc
c000c529:	50                   	push   eax
c000c52a:	e8 d4 ab 01 00       	call   c0027103 <__floatsidf>
c000c52f:	83 c4 10             	add    esp,0x10
c000c532:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c536:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c53a:	52                   	push   edx
c000c53b:	50                   	push   eax
c000c53c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c540:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c544:	e8 2b a5 01 00       	call   c0026a74 <__subdf3>
c000c549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c551:	83 c4 20             	add    esp,0x20
c000c554:	6a 00                	push   0x0
c000c556:	6a 00                	push   0x0
c000c558:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c55c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c560:	e8 0a ae 01 00       	call   c002736f <__ltdf2>
c000c565:	83 c4 10             	add    esp,0x10
c000c568:	85 c0                	test   eax,eax
c000c56a:	79 20                	jns    c000c58c <sinc_hex_vari_process+0x66f>
c000c56c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c574:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c578:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c57c:	e8 a2 9e 01 00       	call   c0026423 <__adddf3>
c000c581:	83 c4 10             	add    esp,0x10
c000c584:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c588:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c58c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c58f:	83 ec 10             	sub    esp,0x10
c000c592:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c596:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c59d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5a1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5a9:	e8 c6 a4 01 00       	call   c0026a74 <__subdf3>
c000c5ae:	83 c4 18             	add    esp,0x18
c000c5b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b9:	52                   	push   edx
c000c5ba:	50                   	push   eax
c000c5bb:	e8 60 af 01 00       	call   c0027520 <lrint>
c000c5c0:	0f af f8             	imul   edi,eax
c000c5c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c5c7:	83 c4 10             	add    esp,0x10
c000c5ca:	01 f8                	add    eax,edi
c000c5cc:	99                   	cdq    
c000c5cd:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c5d0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c5d3:	e9 fd fb ff ff       	jmp    c000c1d5 <sinc_hex_vari_process+0x2b8>
c000c5d8:	83 c4 4c             	add    esp,0x4c
c000c5db:	89 d0                	mov    eax,edx
c000c5dd:	5b                   	pop    ebx
c000c5de:	5e                   	pop    esi
c000c5df:	5f                   	pop    edi
c000c5e0:	5d                   	pop    ebp
c000c5e1:	c3                   	ret    

c000c5e2 <sinc_quad_vari_process>:
c000c5e2:	55                   	push   ebp
c000c5e3:	ba 05 00 00 00       	mov    edx,0x5
c000c5e8:	57                   	push   edi
c000c5e9:	56                   	push   esi
c000c5ea:	53                   	push   ebx
c000c5eb:	83 ec 4c             	sub    esp,0x4c
c000c5ee:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5f2:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5f6:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5f9:	85 db                	test   ebx,ebx
c000c5fb:	0f 84 9c 06 00 00    	je     c000cc9d <sinc_quad_vari_process+0x6bb>
c000c601:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c604:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c607:	0f af c7             	imul   eax,edi
c000c60a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c60d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c610:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c617:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c61e:	0f af c7             	imul   eax,edi
c000c621:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c624:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c627:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c62a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c62e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c632:	68 00 00 70 3f       	push   0x3f700000
c000c637:	6a 00                	push   0x0
c000c639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c641:	e8 29 ad 01 00       	call   c002736f <__ltdf2>
c000c646:	83 c4 10             	add    esp,0x10
c000c649:	ba 16 00 00 00       	mov    edx,0x16
c000c64e:	85 c0                	test   eax,eax
c000c650:	0f 88 47 06 00 00    	js     c000cc9d <sinc_quad_vari_process+0x6bb>
c000c656:	68 00 00 70 40       	push   0x40700000
c000c65b:	6a 00                	push   0x0
c000c65d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c661:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c665:	e8 e7 ac 01 00       	call   c0027351 <__gtdf2>
c000c66a:	83 c4 10             	add    esp,0x10
c000c66d:	ba 16 00 00 00       	mov    edx,0x16
c000c672:	85 c0                	test   eax,eax
c000c674:	0f 8f 23 06 00 00    	jg     c000cc9d <sinc_quad_vari_process+0x6bb>
c000c67a:	83 ec 0c             	sub    esp,0xc
c000c67d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c680:	e8 7e aa 01 00       	call   c0027103 <__floatsidf>
c000c685:	83 c4 10             	add    esp,0x10
c000c688:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c68c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c690:	68 00 00 00 40       	push   0x40000000
c000c695:	6a 00                	push   0x0
c000c697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c69f:	e8 7f 9d 01 00       	call   c0026423 <__adddf3>
c000c6a4:	59                   	pop    ecx
c000c6a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c6a9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 4e aa 01 00       	call   c0027103 <__floatsidf>
c000c6b5:	83 c4 10             	add    esp,0x10
c000c6b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6c0:	52                   	push   edx
c000c6c1:	50                   	push   eax
c000c6c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ca:	e8 b5 a6 01 00       	call   c0026d84 <__divdf3>
c000c6cf:	83 c4 10             	add    esp,0x10
c000c6d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6dd:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f8:	e8 54 ac 01 00       	call   c0027351 <__gtdf2>
c000c6fd:	83 c4 10             	add    esp,0x10
c000c700:	85 c0                	test   eax,eax
c000c702:	7e 2d                	jle    c000c731 <sinc_quad_vari_process+0x14f>
c000c704:	68 00 00 f0 3f       	push   0x3ff00000
c000c709:	6a 00                	push   0x0
c000c70b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c70f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c713:	e8 57 ac 01 00       	call   c002736f <__ltdf2>
c000c718:	83 c4 10             	add    esp,0x10
c000c71b:	85 c0                	test   eax,eax
c000c71d:	79 4d                	jns    c000c76c <sinc_quad_vari_process+0x18a>
c000c71f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c723:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c727:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c72b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c72f:	eb 1b                	jmp    c000c74c <sinc_quad_vari_process+0x16a>
c000c731:	68 00 00 f0 3f       	push   0x3ff00000
c000c736:	6a 00                	push   0x0
c000c738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c740:	e8 2a ac 01 00       	call   c002736f <__ltdf2>
c000c745:	83 c4 10             	add    esp,0x10
c000c748:	85 c0                	test   eax,eax
c000c74a:	79 20                	jns    c000c76c <sinc_quad_vari_process+0x18a>
c000c74c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c750:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c754:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c758:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c75c:	e8 23 a6 01 00       	call   c0026d84 <__divdf3>
c000c761:	83 c4 10             	add    esp,0x10
c000c764:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c768:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c76c:	50                   	push   eax
c000c76d:	50                   	push   eax
c000c76e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c772:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c776:	e8 a5 ad 01 00       	call   c0027520 <lrint>
c000c77b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c77e:	40                   	inc    eax
c000c77f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c783:	0f af c7             	imul   eax,edi
c000c786:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c78a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c78d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c791:	58                   	pop    eax
c000c792:	5a                   	pop    edx
c000c793:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c797:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c79b:	e8 80 ad 01 00       	call   c0027520 <lrint>
c000c7a0:	83 ec 0c             	sub    esp,0xc
c000c7a3:	50                   	push   eax
c000c7a4:	e8 5a a9 01 00       	call   c0027103 <__floatsidf>
c000c7a9:	83 c4 10             	add    esp,0x10
c000c7ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7b4:	52                   	push   edx
c000c7b5:	50                   	push   eax
c000c7b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7be:	e8 b1 a2 01 00       	call   c0026a74 <__subdf3>
c000c7c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cb:	83 c4 20             	add    esp,0x20
c000c7ce:	6a 00                	push   0x0
c000c7d0:	6a 00                	push   0x0
c000c7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7da:	e8 90 ab 01 00       	call   c002736f <__ltdf2>
c000c7df:	83 c4 10             	add    esp,0x10
c000c7e2:	85 c0                	test   eax,eax
c000c7e4:	79 1f                	jns    c000c805 <sinc_quad_vari_process+0x223>
c000c7e6:	68 00 00 f0 3f       	push   0x3ff00000
c000c7eb:	6a 00                	push   0x0
c000c7ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7f5:	e8 29 9c 01 00       	call   c0026423 <__adddf3>
c000c7fa:	83 c4 10             	add    esp,0x10
c000c7fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c801:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c805:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c808:	83 ec 10             	sub    esp,0x10
c000c80b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c80f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c81e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c822:	e8 4d a2 01 00       	call   c0026a74 <__subdf3>
c000c827:	83 c4 18             	add    esp,0x18
c000c82a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c82e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c832:	52                   	push   edx
c000c833:	50                   	push   eax
c000c834:	e8 e7 ac 01 00       	call   c0027520 <lrint>
c000c839:	0f af f8             	imul   edi,eax
c000c83c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c840:	01 f8                	add    eax,edi
c000c842:	99                   	cdq    
c000c843:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c846:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c849:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c84d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c851:	68 00 00 f0 3f       	push   0x3ff00000
c000c856:	6a 00                	push   0x0
c000c858:	e8 27 a5 01 00       	call   c0026d84 <__divdf3>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c864:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c868:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c86d:	68 23 42 92 0c       	push   0xc924223
c000c872:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c876:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c87a:	e8 a4 9b 01 00       	call   c0026423 <__adddf3>
c000c87f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c883:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c887:	83 c4 20             	add    esp,0x20
c000c88a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c892:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c89a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c89d:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c8a0:	7d 50                	jge    c000c8f2 <sinc_quad_vari_process+0x310>
c000c8a2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8a5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8a8:	01 c8                	add    eax,ecx
c000c8aa:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8ad:	99                   	cdq    
c000c8ae:	f7 f9                	idiv   ecx
c000c8b0:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8b4:	7d 0c                	jge    c000c8c2 <sinc_quad_vari_process+0x2e0>
c000c8b6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c8b9:	85 ff                	test   edi,edi
c000c8bb:	79 6c                	jns    c000c929 <sinc_quad_vari_process+0x347>
c000c8bd:	e9 e7 00 00 00       	jmp    c000c9a9 <sinc_quad_vari_process+0x3c7>
c000c8c2:	50                   	push   eax
c000c8c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c7:	56                   	push   esi
c000c8c8:	53                   	push   ebx
c000c8c9:	e8 11 ee ff ff       	call   c000b6df <prepare_data>
c000c8ce:	83 c4 10             	add    esp,0x10
c000c8d1:	89 c2                	mov    edx,eax
c000c8d3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c8d6:	85 c0                	test   eax,eax
c000c8d8:	0f 85 bf 03 00 00    	jne    c000cc9d <sinc_quad_vari_process+0x6bb>
c000c8de:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8e1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8e4:	01 c8                	add    eax,ecx
c000c8e6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8e9:	99                   	cdq    
c000c8ea:	f7 f9                	idiv   ecx
c000c8ec:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8f0:	7c c4                	jl     c000c8b6 <sinc_quad_vari_process+0x2d4>
c000c8f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8fa:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8fd:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c904:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c908:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c90b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c90e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c911:	99                   	cdq    
c000c912:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c915:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c918:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c91b:	99                   	cdq    
c000c91c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c91f:	31 d2                	xor    edx,edx
c000c921:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c924:	e9 74 03 00 00       	jmp    c000cc9d <sinc_quad_vari_process+0x6bb>
c000c929:	83 ec 0c             	sub    esp,0xc
c000c92c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c92f:	e8 cf a7 01 00       	call   c0027103 <__floatsidf>
c000c934:	83 c4 10             	add    esp,0x10
c000c937:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c93b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c93f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c943:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c947:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94f:	e8 cf 9a 01 00       	call   c0026423 <__adddf3>
c000c954:	83 c4 10             	add    esp,0x10
c000c957:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c95b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c95f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c963:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c967:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c96b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c96f:	e8 af 9a 01 00       	call   c0026423 <__adddf3>
c000c974:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c977:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c97b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c97f:	e8 7f a7 01 00       	call   c0027103 <__floatsidf>
c000c984:	83 c4 10             	add    esp,0x10
c000c987:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c98b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c98f:	52                   	push   edx
c000c990:	50                   	push   eax
c000c991:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c995:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c999:	e8 cf a9 01 00       	call   c002736d <__gedf2>
c000c99e:	83 c4 10             	add    esp,0x10
c000c9a1:	85 c0                	test   eax,eax
c000c9a3:	0f 89 49 ff ff ff    	jns    c000c8f2 <sinc_quad_vari_process+0x310>
c000c9a9:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c9ad:	0f 8e ef 00 00 00    	jle    c000caa2 <sinc_quad_vari_process+0x4c0>
c000c9b3:	83 ec 10             	sub    esp,0x10
c000c9b6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9b9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9bc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c9bf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c9c2:	e8 ad a0 01 00       	call   c0026a74 <__subdf3>
c000c9c7:	83 c4 18             	add    esp,0x18
c000c9ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9d2:	52                   	push   edx
c000c9d3:	50                   	push   eax
c000c9d4:	e8 27 ab 01 00       	call   c0027500 <fabs>
c000c9d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9e1:	83 c4 10             	add    esp,0x10
c000c9e4:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9e9:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9f6:	e8 56 a9 01 00       	call   c0027351 <__gtdf2>
c000c9fb:	83 c4 10             	add    esp,0x10
c000c9fe:	85 c0                	test   eax,eax
c000ca00:	0f 8e 9c 00 00 00    	jle    c000caa2 <sinc_quad_vari_process+0x4c0>
c000ca06:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca09:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ca0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca10:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca14:	52                   	push   edx
c000ca15:	50                   	push   eax
c000ca16:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ca19:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ca1c:	e8 53 a0 01 00       	call   c0026a74 <__subdf3>
c000ca21:	59                   	pop    ecx
c000ca22:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca26:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca2a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ca2d:	e8 d1 a6 01 00       	call   c0027103 <__floatsidf>
c000ca32:	83 c4 10             	add    esp,0x10
c000ca35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca39:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca3d:	52                   	push   edx
c000ca3e:	50                   	push   eax
c000ca3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca47:	e8 54 a0 01 00       	call   c0026aa0 <__muldf3>
c000ca4c:	5f                   	pop    edi
c000ca4d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca51:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca55:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca58:	e8 a6 a6 01 00       	call   c0027103 <__floatsidf>
c000ca5d:	83 c4 10             	add    esp,0x10
c000ca60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca68:	52                   	push   edx
c000ca69:	50                   	push   eax
c000ca6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca72:	e8 0d a3 01 00       	call   c0026d84 <__divdf3>
c000ca77:	83 c4 10             	add    esp,0x10
c000ca7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca7e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca92:	e8 8c 99 01 00       	call   c0026423 <__adddf3>
c000ca97:	83 c4 10             	add    esp,0x10
c000ca9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca9e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000caa2:	83 ec 0c             	sub    esp,0xc
c000caa5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000caa8:	e8 56 a6 01 00       	call   c0027103 <__floatsidf>
c000caad:	83 c4 10             	add    esp,0x10
c000cab0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cab4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cabc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac8:	e8 a2 a8 01 00       	call   c002736f <__ltdf2>
c000cacd:	83 c4 10             	add    esp,0x10
c000cad0:	85 c0                	test   eax,eax
c000cad2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cad6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cada:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cade:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cae2:	78 10                	js     c000caf4 <sinc_quad_vari_process+0x512>
c000cae4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cae8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000caec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000caf0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000caf4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cafc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb00:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb04:	e8 97 9f 01 00       	call   c0026aa0 <__muldf3>
c000cb09:	59                   	pop    ecx
c000cb0a:	5f                   	pop    edi
c000cb0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb0f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb1b:	e8 98 eb ff ff       	call   c000b6b8 <double_to_fp>
c000cb20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb24:	89 c7                	mov    edi,eax
c000cb26:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb32:	e8 69 9f 01 00       	call   c0026aa0 <__muldf3>
c000cb37:	83 c4 18             	add    esp,0x18
c000cb3a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb3e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb42:	52                   	push   edx
c000cb43:	50                   	push   eax
c000cb44:	e8 6f eb ff ff       	call   c000b6b8 <double_to_fp>
c000cb49:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb4c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb50:	83 c4 0c             	add    esp,0xc
c000cb53:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb56:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb59:	50                   	push   eax
c000cb5a:	50                   	push   eax
c000cb5b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb5e:	e8 a0 a5 01 00       	call   c0027103 <__floatsidf>
c000cb63:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb67:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb6b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb7b:	e8 04 a2 01 00       	call   c0026d84 <__divdf3>
c000cb80:	83 c4 18             	add    esp,0x18
c000cb83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb87:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb8b:	52                   	push   edx
c000cb8c:	89 fa                	mov    edx,edi
c000cb8e:	50                   	push   eax
c000cb8f:	89 d8                	mov    eax,ebx
c000cb91:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb95:	e8 a5 d1 ff ff       	call   c0009d3f <calc_output_quad>
c000cb9a:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb9e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cba2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cba6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbae:	e8 d1 a1 01 00       	call   c0026d84 <__divdf3>
c000cbb3:	83 c4 10             	add    esp,0x10
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbc6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbce:	e8 50 98 01 00       	call   c0026423 <__adddf3>
c000cbd3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cbd7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cbdb:	83 c4 18             	add    esp,0x18
c000cbde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbe2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbe6:	e8 35 a9 01 00       	call   c0027520 <lrint>
c000cbeb:	83 ec 0c             	sub    esp,0xc
c000cbee:	50                   	push   eax
c000cbef:	e8 0f a5 01 00       	call   c0027103 <__floatsidf>
c000cbf4:	83 c4 10             	add    esp,0x10
c000cbf7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbfb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbff:	52                   	push   edx
c000cc00:	50                   	push   eax
c000cc01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc09:	e8 66 9e 01 00       	call   c0026a74 <__subdf3>
c000cc0e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc12:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc16:	83 c4 20             	add    esp,0x20
c000cc19:	6a 00                	push   0x0
c000cc1b:	6a 00                	push   0x0
c000cc1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc25:	e8 45 a7 01 00       	call   c002736f <__ltdf2>
c000cc2a:	83 c4 10             	add    esp,0x10
c000cc2d:	85 c0                	test   eax,eax
c000cc2f:	79 20                	jns    c000cc51 <sinc_quad_vari_process+0x66f>
c000cc31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc41:	e8 dd 97 01 00       	call   c0026423 <__adddf3>
c000cc46:	83 c4 10             	add    esp,0x10
c000cc49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc51:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc54:	83 ec 10             	sub    esp,0x10
c000cc57:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc5b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc66:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc6e:	e8 01 9e 01 00       	call   c0026a74 <__subdf3>
c000cc73:	83 c4 18             	add    esp,0x18
c000cc76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7e:	52                   	push   edx
c000cc7f:	50                   	push   eax
c000cc80:	e8 9b a8 01 00       	call   c0027520 <lrint>
c000cc85:	0f af f8             	imul   edi,eax
c000cc88:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc8c:	83 c4 10             	add    esp,0x10
c000cc8f:	01 f8                	add    eax,edi
c000cc91:	99                   	cdq    
c000cc92:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc95:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc98:	e9 fd fb ff ff       	jmp    c000c89a <sinc_quad_vari_process+0x2b8>
c000cc9d:	83 c4 4c             	add    esp,0x4c
c000cca0:	89 d0                	mov    eax,edx
c000cca2:	5b                   	pop    ebx
c000cca3:	5e                   	pop    esi
c000cca4:	5f                   	pop    edi
c000cca5:	5d                   	pop    ebp
c000cca6:	c3                   	ret    

c000cca7 <sinc_stereo_vari_process>:
c000cca7:	55                   	push   ebp
c000cca8:	ba 05 00 00 00       	mov    edx,0x5
c000ccad:	57                   	push   edi
c000ccae:	56                   	push   esi
c000ccaf:	53                   	push   ebx
c000ccb0:	83 ec 4c             	sub    esp,0x4c
c000ccb3:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ccb7:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ccbb:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ccbe:	85 db                	test   ebx,ebx
c000ccc0:	0f 84 9c 06 00 00    	je     c000d362 <sinc_stereo_vari_process+0x6bb>
c000ccc6:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ccc9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cccc:	0f af c7             	imul   eax,edi
c000cccf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ccd2:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ccd5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ccdc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cce3:	0f af c7             	imul   eax,edi
c000cce6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cce9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ccec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ccef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccf7:	68 00 00 70 3f       	push   0x3f700000
c000ccfc:	6a 00                	push   0x0
c000ccfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd06:	e8 64 a6 01 00       	call   c002736f <__ltdf2>
c000cd0b:	83 c4 10             	add    esp,0x10
c000cd0e:	ba 16 00 00 00       	mov    edx,0x16
c000cd13:	85 c0                	test   eax,eax
c000cd15:	0f 88 47 06 00 00    	js     c000d362 <sinc_stereo_vari_process+0x6bb>
c000cd1b:	68 00 00 70 40       	push   0x40700000
c000cd20:	6a 00                	push   0x0
c000cd22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd2a:	e8 22 a6 01 00       	call   c0027351 <__gtdf2>
c000cd2f:	83 c4 10             	add    esp,0x10
c000cd32:	ba 16 00 00 00       	mov    edx,0x16
c000cd37:	85 c0                	test   eax,eax
c000cd39:	0f 8f 23 06 00 00    	jg     c000d362 <sinc_stereo_vari_process+0x6bb>
c000cd3f:	83 ec 0c             	sub    esp,0xc
c000cd42:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd45:	e8 b9 a3 01 00       	call   c0027103 <__floatsidf>
c000cd4a:	83 c4 10             	add    esp,0x10
c000cd4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd55:	68 00 00 00 40       	push   0x40000000
c000cd5a:	6a 00                	push   0x0
c000cd5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd64:	e8 ba 96 01 00       	call   c0026423 <__adddf3>
c000cd69:	59                   	pop    ecx
c000cd6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd6e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 89 a3 01 00       	call   c0027103 <__floatsidf>
c000cd7a:	83 c4 10             	add    esp,0x10
c000cd7d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd81:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd85:	52                   	push   edx
c000cd86:	50                   	push   eax
c000cd87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd8f:	e8 f0 9f 01 00       	call   c0026d84 <__divdf3>
c000cd94:	83 c4 10             	add    esp,0x10
c000cd97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd9f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cda2:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cda5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cda9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdbd:	e8 8f a5 01 00       	call   c0027351 <__gtdf2>
c000cdc2:	83 c4 10             	add    esp,0x10
c000cdc5:	85 c0                	test   eax,eax
c000cdc7:	7e 2d                	jle    c000cdf6 <sinc_stereo_vari_process+0x14f>
c000cdc9:	68 00 00 f0 3f       	push   0x3ff00000
c000cdce:	6a 00                	push   0x0
c000cdd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd8:	e8 92 a5 01 00       	call   c002736f <__ltdf2>
c000cddd:	83 c4 10             	add    esp,0x10
c000cde0:	85 c0                	test   eax,eax
c000cde2:	79 4d                	jns    c000ce31 <sinc_stereo_vari_process+0x18a>
c000cde4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdf0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdf4:	eb 1b                	jmp    c000ce11 <sinc_stereo_vari_process+0x16a>
c000cdf6:	68 00 00 f0 3f       	push   0x3ff00000
c000cdfb:	6a 00                	push   0x0
c000cdfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce05:	e8 65 a5 01 00       	call   c002736f <__ltdf2>
c000ce0a:	83 c4 10             	add    esp,0x10
c000ce0d:	85 c0                	test   eax,eax
c000ce0f:	79 20                	jns    c000ce31 <sinc_stereo_vari_process+0x18a>
c000ce11:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce15:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce19:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce21:	e8 5e 9f 01 00       	call   c0026d84 <__divdf3>
c000ce26:	83 c4 10             	add    esp,0x10
c000ce29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce2d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce31:	50                   	push   eax
c000ce32:	50                   	push   eax
c000ce33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce37:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce3b:	e8 e0 a6 01 00       	call   c0027520 <lrint>
c000ce40:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce43:	40                   	inc    eax
c000ce44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce48:	0f af c7             	imul   eax,edi
c000ce4b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce52:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce56:	58                   	pop    eax
c000ce57:	5a                   	pop    edx
c000ce58:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce60:	e8 bb a6 01 00       	call   c0027520 <lrint>
c000ce65:	83 ec 0c             	sub    esp,0xc
c000ce68:	50                   	push   eax
c000ce69:	e8 95 a2 01 00       	call   c0027103 <__floatsidf>
c000ce6e:	83 c4 10             	add    esp,0x10
c000ce71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce79:	52                   	push   edx
c000ce7a:	50                   	push   eax
c000ce7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce83:	e8 ec 9b 01 00       	call   c0026a74 <__subdf3>
c000ce88:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce8c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce90:	83 c4 20             	add    esp,0x20
c000ce93:	6a 00                	push   0x0
c000ce95:	6a 00                	push   0x0
c000ce97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce9f:	e8 cb a4 01 00       	call   c002736f <__ltdf2>
c000cea4:	83 c4 10             	add    esp,0x10
c000cea7:	85 c0                	test   eax,eax
c000cea9:	79 1f                	jns    c000ceca <sinc_stereo_vari_process+0x223>
c000ceab:	68 00 00 f0 3f       	push   0x3ff00000
c000ceb0:	6a 00                	push   0x0
c000ceb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ceb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ceba:	e8 64 95 01 00       	call   c0026423 <__adddf3>
c000cebf:	83 c4 10             	add    esp,0x10
c000cec2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cec6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ceca:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cecd:	83 ec 10             	sub    esp,0x10
c000ced0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ced4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ced7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cee3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cee7:	e8 88 9b 01 00       	call   c0026a74 <__subdf3>
c000ceec:	83 c4 18             	add    esp,0x18
c000ceef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cef3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cef7:	52                   	push   edx
c000cef8:	50                   	push   eax
c000cef9:	e8 22 a6 01 00       	call   c0027520 <lrint>
c000cefe:	0f af f8             	imul   edi,eax
c000cf01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf05:	01 f8                	add    eax,edi
c000cf07:	99                   	cdq    
c000cf08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cf0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cf0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf16:	68 00 00 f0 3f       	push   0x3ff00000
c000cf1b:	6a 00                	push   0x0
c000cf1d:	e8 62 9e 01 00       	call   c0026d84 <__divdf3>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf2d:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cf32:	68 23 42 92 0c       	push   0xc924223
c000cf37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf3f:	e8 df 94 01 00       	call   c0026423 <__adddf3>
c000cf44:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf48:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf4c:	83 c4 20             	add    esp,0x20
c000cf4f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf57:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf5f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf62:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf65:	7d 50                	jge    c000cfb7 <sinc_stereo_vari_process+0x310>
c000cf67:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf6a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf6d:	01 c8                	add    eax,ecx
c000cf6f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf72:	99                   	cdq    
c000cf73:	f7 f9                	idiv   ecx
c000cf75:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf79:	7d 0c                	jge    c000cf87 <sinc_stereo_vari_process+0x2e0>
c000cf7b:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf7e:	85 ff                	test   edi,edi
c000cf80:	79 6c                	jns    c000cfee <sinc_stereo_vari_process+0x347>
c000cf82:	e9 e7 00 00 00       	jmp    c000d06e <sinc_stereo_vari_process+0x3c7>
c000cf87:	50                   	push   eax
c000cf88:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8c:	56                   	push   esi
c000cf8d:	53                   	push   ebx
c000cf8e:	e8 4c e7 ff ff       	call   c000b6df <prepare_data>
c000cf93:	83 c4 10             	add    esp,0x10
c000cf96:	89 c2                	mov    edx,eax
c000cf98:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf9b:	85 c0                	test   eax,eax
c000cf9d:	0f 85 bf 03 00 00    	jne    c000d362 <sinc_stereo_vari_process+0x6bb>
c000cfa3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cfa6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cfa9:	01 c8                	add    eax,ecx
c000cfab:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cfae:	99                   	cdq    
c000cfaf:	f7 f9                	idiv   ecx
c000cfb1:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cfb5:	7c c4                	jl     c000cf7b <sinc_stereo_vari_process+0x2d4>
c000cfb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cfbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cfbf:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cfc2:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cfc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfcd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cfd0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cfd3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cfd6:	99                   	cdq    
c000cfd7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfda:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfdd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfe0:	99                   	cdq    
c000cfe1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfe4:	31 d2                	xor    edx,edx
c000cfe6:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfe9:	e9 74 03 00 00       	jmp    c000d362 <sinc_stereo_vari_process+0x6bb>
c000cfee:	83 ec 0c             	sub    esp,0xc
c000cff1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cff4:	e8 0a a1 01 00       	call   c0027103 <__floatsidf>
c000cff9:	83 c4 10             	add    esp,0x10
c000cffc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d000:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d004:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d008:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d010:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d014:	e8 0a 94 01 00       	call   c0026423 <__adddf3>
c000d019:	83 c4 10             	add    esp,0x10
c000d01c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d020:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d024:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d028:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d02c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d030:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d034:	e8 ea 93 01 00       	call   c0026423 <__adddf3>
c000d039:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d03c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d040:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d044:	e8 ba a0 01 00       	call   c0027103 <__floatsidf>
c000d049:	83 c4 10             	add    esp,0x10
c000d04c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d050:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d054:	52                   	push   edx
c000d055:	50                   	push   eax
c000d056:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d05a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d05e:	e8 0a a3 01 00       	call   c002736d <__gedf2>
c000d063:	83 c4 10             	add    esp,0x10
c000d066:	85 c0                	test   eax,eax
c000d068:	0f 89 49 ff ff ff    	jns    c000cfb7 <sinc_stereo_vari_process+0x310>
c000d06e:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d072:	0f 8e ef 00 00 00    	jle    c000d167 <sinc_stereo_vari_process+0x4c0>
c000d078:	83 ec 10             	sub    esp,0x10
c000d07b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d07e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d081:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d084:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d087:	e8 e8 99 01 00       	call   c0026a74 <__subdf3>
c000d08c:	83 c4 18             	add    esp,0x18
c000d08f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d093:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d097:	52                   	push   edx
c000d098:	50                   	push   eax
c000d099:	e8 62 a4 01 00       	call   c0027500 <fabs>
c000d09e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0a2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d0a6:	83 c4 10             	add    esp,0x10
c000d0a9:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d0ae:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d0b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0bb:	e8 91 a2 01 00       	call   c0027351 <__gtdf2>
c000d0c0:	83 c4 10             	add    esp,0x10
c000d0c3:	85 c0                	test   eax,eax
c000d0c5:	0f 8e 9c 00 00 00    	jle    c000d167 <sinc_stereo_vari_process+0x4c0>
c000d0cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d0ce:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d0d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0d9:	52                   	push   edx
c000d0da:	50                   	push   eax
c000d0db:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0de:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0e1:	e8 8e 99 01 00       	call   c0026a74 <__subdf3>
c000d0e6:	59                   	pop    ecx
c000d0e7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0eb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0ef:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0f2:	e8 0c a0 01 00       	call   c0027103 <__floatsidf>
c000d0f7:	83 c4 10             	add    esp,0x10
c000d0fa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0fe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d102:	52                   	push   edx
c000d103:	50                   	push   eax
c000d104:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d108:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d10c:	e8 8f 99 01 00       	call   c0026aa0 <__muldf3>
c000d111:	5f                   	pop    edi
c000d112:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d116:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d11a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d11d:	e8 e1 9f 01 00       	call   c0027103 <__floatsidf>
c000d122:	83 c4 10             	add    esp,0x10
c000d125:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d129:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d12d:	52                   	push   edx
c000d12e:	50                   	push   eax
c000d12f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d133:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d137:	e8 48 9c 01 00       	call   c0026d84 <__divdf3>
c000d13c:	83 c4 10             	add    esp,0x10
c000d13f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d143:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d147:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d14b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d14f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d153:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d157:	e8 c7 92 01 00       	call   c0026423 <__adddf3>
c000d15c:	83 c4 10             	add    esp,0x10
c000d15f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d163:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d167:	83 ec 0c             	sub    esp,0xc
c000d16a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d16d:	e8 91 9f 01 00       	call   c0027103 <__floatsidf>
c000d172:	83 c4 10             	add    esp,0x10
c000d175:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d179:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d17d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d181:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d185:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d189:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d18d:	e8 dd a1 01 00       	call   c002736f <__ltdf2>
c000d192:	83 c4 10             	add    esp,0x10
c000d195:	85 c0                	test   eax,eax
c000d197:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d19b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d19f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d1a3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d1a7:	78 10                	js     c000d1b9 <sinc_stereo_vari_process+0x512>
c000d1a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d1ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d1b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1b5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1c9:	e8 d2 98 01 00       	call   c0026aa0 <__muldf3>
c000d1ce:	59                   	pop    ecx
c000d1cf:	5f                   	pop    edi
c000d1d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d1d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d1d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1e0:	e8 d3 e4 ff ff       	call   c000b6b8 <double_to_fp>
c000d1e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1e9:	89 c7                	mov    edi,eax
c000d1eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1f7:	e8 a4 98 01 00       	call   c0026aa0 <__muldf3>
c000d1fc:	83 c4 18             	add    esp,0x18
c000d1ff:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d203:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d207:	52                   	push   edx
c000d208:	50                   	push   eax
c000d209:	e8 aa e4 ff ff       	call   c000b6b8 <double_to_fp>
c000d20e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d211:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d215:	83 c4 0c             	add    esp,0xc
c000d218:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d21b:	8d 04 90             	lea    eax,[eax+edx*4]
c000d21e:	50                   	push   eax
c000d21f:	50                   	push   eax
c000d220:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d223:	e8 db 9e 01 00       	call   c0027103 <__floatsidf>
c000d228:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d22c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d230:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d234:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d238:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d23c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d240:	e8 3f 9b 01 00       	call   c0026d84 <__divdf3>
c000d245:	83 c4 18             	add    esp,0x18
c000d248:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d24c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d250:	52                   	push   edx
c000d251:	89 fa                	mov    edx,edi
c000d253:	50                   	push   eax
c000d254:	89 d8                	mov    eax,ebx
c000d256:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d25a:	e8 02 c7 ff ff       	call   c0009961 <calc_output_stereo>
c000d25f:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d263:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d267:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d26b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d26f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d273:	e8 0c 9b 01 00       	call   c0026d84 <__divdf3>
c000d278:	83 c4 10             	add    esp,0x10
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d287:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d28b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d28f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d293:	e8 8b 91 01 00       	call   c0026423 <__adddf3>
c000d298:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d29c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d2a0:	83 c4 18             	add    esp,0x18
c000d2a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ab:	e8 70 a2 01 00       	call   c0027520 <lrint>
c000d2b0:	83 ec 0c             	sub    esp,0xc
c000d2b3:	50                   	push   eax
c000d2b4:	e8 4a 9e 01 00       	call   c0027103 <__floatsidf>
c000d2b9:	83 c4 10             	add    esp,0x10
c000d2bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d2c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d2c4:	52                   	push   edx
c000d2c5:	50                   	push   eax
c000d2c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2ce:	e8 a1 97 01 00       	call   c0026a74 <__subdf3>
c000d2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2db:	83 c4 20             	add    esp,0x20
c000d2de:	6a 00                	push   0x0
c000d2e0:	6a 00                	push   0x0
c000d2e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ea:	e8 80 a0 01 00       	call   c002736f <__ltdf2>
c000d2ef:	83 c4 10             	add    esp,0x10
c000d2f2:	85 c0                	test   eax,eax
c000d2f4:	79 20                	jns    c000d316 <sinc_stereo_vari_process+0x66f>
c000d2f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d302:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d306:	e8 18 91 01 00       	call   c0026423 <__adddf3>
c000d30b:	83 c4 10             	add    esp,0x10
c000d30e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d312:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d316:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d319:	83 ec 10             	sub    esp,0x10
c000d31c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d320:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d323:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d327:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d32b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d32f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d333:	e8 3c 97 01 00       	call   c0026a74 <__subdf3>
c000d338:	83 c4 18             	add    esp,0x18
c000d33b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d33f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d343:	52                   	push   edx
c000d344:	50                   	push   eax
c000d345:	e8 d6 a1 01 00       	call   c0027520 <lrint>
c000d34a:	0f af f8             	imul   edi,eax
c000d34d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d351:	83 c4 10             	add    esp,0x10
c000d354:	01 f8                	add    eax,edi
c000d356:	99                   	cdq    
c000d357:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d35a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d35d:	e9 fd fb ff ff       	jmp    c000cf5f <sinc_stereo_vari_process+0x2b8>
c000d362:	83 c4 4c             	add    esp,0x4c
c000d365:	89 d0                	mov    eax,edx
c000d367:	5b                   	pop    ebx
c000d368:	5e                   	pop    esi
c000d369:	5f                   	pop    edi
c000d36a:	5d                   	pop    ebp
c000d36b:	c3                   	ret    

c000d36c <sinc_mono_vari_process>:
c000d36c:	55                   	push   ebp
c000d36d:	ba 05 00 00 00       	mov    edx,0x5
c000d372:	57                   	push   edi
c000d373:	56                   	push   esi
c000d374:	53                   	push   ebx
c000d375:	83 ec 4c             	sub    esp,0x4c
c000d378:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d37c:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d380:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d383:	85 db                	test   ebx,ebx
c000d385:	0f 84 c1 06 00 00    	je     c000da4c <sinc_mono_vari_process+0x6e0>
c000d38b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d38e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d391:	0f af c7             	imul   eax,edi
c000d394:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d397:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d39a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d3a1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d3a8:	0f af c7             	imul   eax,edi
c000d3ab:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d3ae:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d3b2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d3b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000d3b7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d3bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d3bf:	68 00 00 70 3f       	push   0x3f700000
c000d3c4:	6a 00                	push   0x0
c000d3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ce:	e8 9c 9f 01 00       	call   c002736f <__ltdf2>
c000d3d3:	83 c4 10             	add    esp,0x10
c000d3d6:	ba 16 00 00 00       	mov    edx,0x16
c000d3db:	85 c0                	test   eax,eax
c000d3dd:	0f 88 69 06 00 00    	js     c000da4c <sinc_mono_vari_process+0x6e0>
c000d3e3:	68 00 00 70 40       	push   0x40700000
c000d3e8:	6a 00                	push   0x0
c000d3ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3f2:	e8 5a 9f 01 00       	call   c0027351 <__gtdf2>
c000d3f7:	83 c4 10             	add    esp,0x10
c000d3fa:	ba 16 00 00 00       	mov    edx,0x16
c000d3ff:	85 c0                	test   eax,eax
c000d401:	0f 8f 45 06 00 00    	jg     c000da4c <sinc_mono_vari_process+0x6e0>
c000d407:	83 ec 0c             	sub    esp,0xc
c000d40a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d40d:	e8 f1 9c 01 00       	call   c0027103 <__floatsidf>
c000d412:	83 c4 10             	add    esp,0x10
c000d415:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d419:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d41d:	68 00 00 00 40       	push   0x40000000
c000d422:	6a 00                	push   0x0
c000d424:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d428:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d42c:	e8 f2 8f 01 00       	call   c0026423 <__adddf3>
c000d431:	59                   	pop    ecx
c000d432:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d436:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d43a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43d:	e8 c1 9c 01 00       	call   c0027103 <__floatsidf>
c000d442:	83 c4 10             	add    esp,0x10
c000d445:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d449:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d44d:	52                   	push   edx
c000d44e:	50                   	push   eax
c000d44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d453:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d457:	e8 28 99 01 00       	call   c0026d84 <__divdf3>
c000d45c:	83 c4 10             	add    esp,0x10
c000d45f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d463:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d467:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d46a:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d46d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d471:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d47d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d481:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d485:	e8 c7 9e 01 00       	call   c0027351 <__gtdf2>
c000d48a:	83 c4 10             	add    esp,0x10
c000d48d:	85 c0                	test   eax,eax
c000d48f:	7e 2d                	jle    c000d4be <sinc_mono_vari_process+0x152>
c000d491:	68 00 00 f0 3f       	push   0x3ff00000
c000d496:	6a 00                	push   0x0
c000d498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a0:	e8 ca 9e 01 00       	call   c002736f <__ltdf2>
c000d4a5:	83 c4 10             	add    esp,0x10
c000d4a8:	85 c0                	test   eax,eax
c000d4aa:	79 4d                	jns    c000d4f9 <sinc_mono_vari_process+0x18d>
c000d4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d4b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4bc:	eb 1b                	jmp    c000d4d9 <sinc_mono_vari_process+0x16d>
c000d4be:	68 00 00 f0 3f       	push   0x3ff00000
c000d4c3:	6a 00                	push   0x0
c000d4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4cd:	e8 9d 9e 01 00       	call   c002736f <__ltdf2>
c000d4d2:	83 c4 10             	add    esp,0x10
c000d4d5:	85 c0                	test   eax,eax
c000d4d7:	79 20                	jns    c000d4f9 <sinc_mono_vari_process+0x18d>
c000d4d9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4dd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e9:	e8 96 98 01 00       	call   c0026d84 <__divdf3>
c000d4ee:	83 c4 10             	add    esp,0x10
c000d4f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4f9:	50                   	push   eax
c000d4fa:	50                   	push   eax
c000d4fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d503:	e8 18 a0 01 00       	call   c0027520 <lrint>
c000d508:	40                   	inc    eax
c000d509:	0f af c7             	imul   eax,edi
c000d50c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d510:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d514:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d517:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d51a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d522:	58                   	pop    eax
c000d523:	5a                   	pop    edx
c000d524:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d528:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d52c:	e8 ef 9f 01 00       	call   c0027520 <lrint>
c000d531:	83 ec 0c             	sub    esp,0xc
c000d534:	50                   	push   eax
c000d535:	e8 c9 9b 01 00       	call   c0027103 <__floatsidf>
c000d53a:	83 c4 10             	add    esp,0x10
c000d53d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d541:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d545:	52                   	push   edx
c000d546:	50                   	push   eax
c000d547:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d54b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d54f:	e8 20 95 01 00       	call   c0026a74 <__subdf3>
c000d554:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d558:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d55c:	83 c4 20             	add    esp,0x20
c000d55f:	6a 00                	push   0x0
c000d561:	6a 00                	push   0x0
c000d563:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d567:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d56b:	e8 ff 9d 01 00       	call   c002736f <__ltdf2>
c000d570:	83 c4 10             	add    esp,0x10
c000d573:	85 c0                	test   eax,eax
c000d575:	79 1f                	jns    c000d596 <sinc_mono_vari_process+0x22a>
c000d577:	68 00 00 f0 3f       	push   0x3ff00000
c000d57c:	6a 00                	push   0x0
c000d57e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d582:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d586:	e8 98 8e 01 00       	call   c0026423 <__adddf3>
c000d58b:	83 c4 10             	add    esp,0x10
c000d58e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d592:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d596:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d599:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d59c:	83 ec 10             	sub    esp,0x10
c000d59f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5af:	e8 c0 94 01 00       	call   c0026a74 <__subdf3>
c000d5b4:	83 c4 18             	add    esp,0x18
c000d5b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d5bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d5bf:	52                   	push   edx
c000d5c0:	50                   	push   eax
c000d5c1:	e8 5a 9f 01 00       	call   c0027520 <lrint>
c000d5c6:	0f af f8             	imul   edi,eax
c000d5c9:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d5cc:	31 ff                	xor    edi,edi
c000d5ce:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d5d3:	99                   	cdq    
c000d5d4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d5d7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5e2:	55                   	push   ebp
c000d5e3:	57                   	push   edi
c000d5e4:	e8 9b 97 01 00       	call   c0026d84 <__divdf3>
c000d5e9:	83 c4 10             	add    esp,0x10
c000d5ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5f4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5f9:	68 23 42 92 0c       	push   0xc924223
c000d5fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d602:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d606:	e8 18 8e 01 00       	call   c0026423 <__adddf3>
c000d60b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d60f:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d613:	83 c4 20             	add    esp,0x20
c000d616:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d61a:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d61e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d621:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d624:	7d 54                	jge    c000d67a <sinc_mono_vari_process+0x30e>
c000d626:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d629:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d62c:	01 c8                	add    eax,ecx
c000d62e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d631:	99                   	cdq    
c000d632:	f7 f9                	idiv   ecx
c000d634:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d638:	7d 0c                	jge    c000d646 <sinc_mono_vari_process+0x2da>
c000d63a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d63d:	85 ff                	test   edi,edi
c000d63f:	79 73                	jns    c000d6b4 <sinc_mono_vari_process+0x348>
c000d641:	e9 ee 00 00 00       	jmp    c000d734 <sinc_mono_vari_process+0x3c8>
c000d646:	50                   	push   eax
c000d647:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d64b:	56                   	push   esi
c000d64c:	53                   	push   ebx
c000d64d:	e8 8d e0 ff ff       	call   c000b6df <prepare_data>
c000d652:	89 c2                	mov    edx,eax
c000d654:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d658:	83 c4 10             	add    esp,0x10
c000d65b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d65e:	85 d2                	test   edx,edx
c000d660:	0f 85 e6 03 00 00    	jne    c000da4c <sinc_mono_vari_process+0x6e0>
c000d666:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d669:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d66c:	01 c8                	add    eax,ecx
c000d66e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d671:	99                   	cdq    
c000d672:	f7 f9                	idiv   ecx
c000d674:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d678:	7c c0                	jl     c000d63a <sinc_mono_vari_process+0x2ce>
c000d67a:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d67e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d682:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d686:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d689:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d68c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d690:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d694:	89 01                	mov    DWORD PTR [ecx],eax
c000d696:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d699:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d69c:	99                   	cdq    
c000d69d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d6a0:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d6a3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d6a6:	99                   	cdq    
c000d6a7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d6aa:	31 d2                	xor    edx,edx
c000d6ac:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d6af:	e9 98 03 00 00       	jmp    c000da4c <sinc_mono_vari_process+0x6e0>
c000d6b4:	83 ec 0c             	sub    esp,0xc
c000d6b7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d6ba:	e8 44 9a 01 00       	call   c0027103 <__floatsidf>
c000d6bf:	83 c4 10             	add    esp,0x10
c000d6c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6da:	e8 44 8d 01 00       	call   c0026423 <__adddf3>
c000d6df:	83 c4 10             	add    esp,0x10
c000d6e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6ee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6fa:	e8 24 8d 01 00       	call   c0026423 <__adddf3>
c000d6ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d702:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d706:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d70a:	e8 f4 99 01 00       	call   c0027103 <__floatsidf>
c000d70f:	83 c4 10             	add    esp,0x10
c000d712:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d716:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d71a:	52                   	push   edx
c000d71b:	50                   	push   eax
c000d71c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d720:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d724:	e8 28 9c 01 00       	call   c0027351 <__gtdf2>
c000d729:	83 c4 10             	add    esp,0x10
c000d72c:	85 c0                	test   eax,eax
c000d72e:	0f 8f 46 ff ff ff    	jg     c000d67a <sinc_mono_vari_process+0x30e>
c000d734:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d738:	0f 8e f5 00 00 00    	jle    c000d833 <sinc_mono_vari_process+0x4c7>
c000d73e:	83 ec 10             	sub    esp,0x10
c000d741:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d744:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d747:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d74b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d74e:	ff 30                	push   DWORD PTR [eax]
c000d750:	e8 1f 93 01 00       	call   c0026a74 <__subdf3>
c000d755:	83 c4 18             	add    esp,0x18
c000d758:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d75c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d760:	52                   	push   edx
c000d761:	50                   	push   eax
c000d762:	e8 99 9d 01 00       	call   c0027500 <fabs>
c000d767:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d76b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d76f:	83 c4 10             	add    esp,0x10
c000d772:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d777:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d77c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d780:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d784:	e8 c8 9b 01 00       	call   c0027351 <__gtdf2>
c000d789:	83 c4 10             	add    esp,0x10
c000d78c:	85 c0                	test   eax,eax
c000d78e:	0f 8e 9f 00 00 00    	jle    c000d833 <sinc_mono_vari_process+0x4c7>
c000d794:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d798:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d79b:	8b 00                	mov    eax,DWORD PTR [eax]
c000d79d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7a5:	52                   	push   edx
c000d7a6:	50                   	push   eax
c000d7a7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d7aa:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d7ad:	e8 c2 92 01 00       	call   c0026a74 <__subdf3>
c000d7b2:	5f                   	pop    edi
c000d7b3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7b7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7bb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d7be:	e8 40 99 01 00       	call   c0027103 <__floatsidf>
c000d7c3:	83 c4 10             	add    esp,0x10
c000d7c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7ce:	52                   	push   edx
c000d7cf:	50                   	push   eax
c000d7d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d8:	e8 c3 92 01 00       	call   c0026aa0 <__muldf3>
c000d7dd:	5d                   	pop    ebp
c000d7de:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7e2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7e6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7e9:	e8 15 99 01 00       	call   c0027103 <__floatsidf>
c000d7ee:	83 c4 10             	add    esp,0x10
c000d7f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7f9:	52                   	push   edx
c000d7fa:	50                   	push   eax
c000d7fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d803:	e8 7c 95 01 00       	call   c0026d84 <__divdf3>
c000d808:	83 c4 10             	add    esp,0x10
c000d80b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d80f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d813:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d817:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d81b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d823:	e8 fb 8b 01 00       	call   c0026423 <__adddf3>
c000d828:	83 c4 10             	add    esp,0x10
c000d82b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d82f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d833:	83 ec 0c             	sub    esp,0xc
c000d836:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d839:	e8 c5 98 01 00       	call   c0027103 <__floatsidf>
c000d83e:	83 c4 10             	add    esp,0x10
c000d841:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d845:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d849:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d84d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d851:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d855:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d859:	e8 11 9b 01 00       	call   c002736f <__ltdf2>
c000d85e:	83 c4 10             	add    esp,0x10
c000d861:	85 c0                	test   eax,eax
c000d863:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d867:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d86b:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d86f:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d873:	78 10                	js     c000d885 <sinc_mono_vari_process+0x519>
c000d875:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d879:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d87d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d881:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d885:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d889:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d88d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d891:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d895:	e8 06 92 01 00       	call   c0026aa0 <__muldf3>
c000d89a:	59                   	pop    ecx
c000d89b:	5f                   	pop    edi
c000d89c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ac:	e8 07 de ff ff       	call   c000b6b8 <double_to_fp>
c000d8b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8b5:	89 c7                	mov    edi,eax
c000d8b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8c3:	e8 d8 91 01 00       	call   c0026aa0 <__muldf3>
c000d8c8:	83 c4 18             	add    esp,0x18
c000d8cb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8d3:	52                   	push   edx
c000d8d4:	50                   	push   eax
c000d8d5:	e8 de dd ff ff       	call   c000b6b8 <double_to_fp>
c000d8da:	83 ec 0c             	sub    esp,0xc
c000d8dd:	89 c5                	mov    ebp,eax
c000d8df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8e2:	e8 1c 98 01 00       	call   c0027103 <__floatsidf>
c000d8e7:	83 c4 10             	add    esp,0x10
c000d8ea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8ee:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8f2:	52                   	push   edx
c000d8f3:	50                   	push   eax
c000d8f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8fc:	e8 83 94 01 00       	call   c0026d84 <__divdf3>
c000d901:	83 c4 10             	add    esp,0x10
c000d904:	89 e9                	mov    ecx,ebp
c000d906:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d90a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d90e:	89 d8                	mov    eax,ebx
c000d910:	89 fa                	mov    edx,edi
c000d912:	e8 ee bd ff ff       	call   c0009705 <calc_output_single>
c000d917:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d91a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d91d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d921:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d925:	52                   	push   edx
c000d926:	50                   	push   eax
c000d927:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d92b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d92f:	e8 6c 91 01 00       	call   c0026aa0 <__muldf3>
c000d934:	59                   	pop    ecx
c000d935:	59                   	pop    ecx
c000d936:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d93a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d93e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d942:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d946:	e8 28 9a 01 00       	call   c0027373 <__truncdfsf2>
c000d94b:	83 c4 10             	add    esp,0x10
c000d94e:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d951:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d954:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d958:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d95c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d960:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d964:	e8 1b 94 01 00       	call   c0026d84 <__divdf3>
c000d969:	83 c4 10             	add    esp,0x10
c000d96c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d970:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d97c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d980:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d984:	e8 9a 8a 01 00       	call   c0026423 <__adddf3>
c000d989:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d98d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d991:	83 c4 18             	add    esp,0x18
c000d994:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d998:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99c:	e8 7f 9b 01 00       	call   c0027520 <lrint>
c000d9a1:	83 ec 0c             	sub    esp,0xc
c000d9a4:	50                   	push   eax
c000d9a5:	e8 59 97 01 00       	call   c0027103 <__floatsidf>
c000d9aa:	83 c4 10             	add    esp,0x10
c000d9ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9b1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9b5:	52                   	push   edx
c000d9b6:	50                   	push   eax
c000d9b7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9bf:	e8 b0 90 01 00       	call   c0026a74 <__subdf3>
c000d9c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9cc:	83 c4 20             	add    esp,0x20
c000d9cf:	6a 00                	push   0x0
c000d9d1:	6a 00                	push   0x0
c000d9d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9db:	e8 8f 99 01 00       	call   c002736f <__ltdf2>
c000d9e0:	83 c4 10             	add    esp,0x10
c000d9e3:	85 c0                	test   eax,eax
c000d9e5:	79 20                	jns    c000da07 <sinc_mono_vari_process+0x69b>
c000d9e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f7:	e8 27 8a 01 00       	call   c0026423 <__adddf3>
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da03:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da07:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000da0a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000da0d:	83 ec 10             	sub    esp,0x10
c000da10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000da1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000da20:	e8 4f 90 01 00       	call   c0026a74 <__subdf3>
c000da25:	83 c4 18             	add    esp,0x18
c000da28:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da2c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da30:	52                   	push   edx
c000da31:	50                   	push   eax
c000da32:	e8 e9 9a 01 00       	call   c0027520 <lrint>
c000da37:	83 c4 10             	add    esp,0x10
c000da3a:	0f af f8             	imul   edi,eax
c000da3d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da40:	99                   	cdq    
c000da41:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da44:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da47:	e9 d2 fb ff ff       	jmp    c000d61e <sinc_mono_vari_process+0x2b2>
c000da4c:	83 c4 4c             	add    esp,0x4c
c000da4f:	89 d0                	mov    eax,edx
c000da51:	5b                   	pop    ebx
c000da52:	5e                   	pop    esi
c000da53:	5f                   	pop    edi
c000da54:	5d                   	pop    ebp
c000da55:	c3                   	ret    

c000da56 <sinc_get_name>:
c000da56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da5a:	31 c0                	xor    eax,eax
c000da5c:	83 fa 02             	cmp    edx,0x2
c000da5f:	77 07                	ja     c000da68 <sinc_get_name+0x12>
c000da61:	8b 04 95 c4 8c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd733c]
c000da68:	c3                   	ret    

c000da69 <sinc_get_description>:
c000da69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da6d:	31 c0                	xor    eax,eax
c000da6f:	83 fa 02             	cmp    edx,0x2
c000da72:	77 07                	ja     c000da7b <sinc_get_description+0x12>
c000da74:	8b 04 95 b8 8c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7348]
c000da7b:	c3                   	ret    

c000da7c <sinc_set_converter>:
c000da7c:	53                   	push   ebx
c000da7d:	81 ec 58 08 00 00    	sub    esp,0x858
c000da83:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da8a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da8d:	85 c0                	test   eax,eax
c000da8f:	74 13                	je     c000daa4 <sinc_set_converter+0x28>
c000da91:	83 ec 0c             	sub    esp,0xc
c000da94:	50                   	push   eax
c000da95:	e8 d0 1b 00 00       	call   c000f66a <free>
c000da9a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000daa1:	83 c4 10             	add    esp,0x10
c000daa4:	50                   	push   eax
c000daa5:	68 44 08 00 00       	push   0x844
c000daaa:	6a 00                	push   0x0
c000daac:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dab0:	50                   	push   eax
c000dab1:	e8 0e 2c ff ff       	call   c00006c4 <memset>
c000dab6:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dab9:	83 c4 10             	add    esp,0x10
c000dabc:	b8 0b 00 00 00       	mov    eax,0xb
c000dac1:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dac7:	7f 6e                	jg     c000db37 <sinc_set_converter+0xbb>
c000dac9:	83 fa 01             	cmp    edx,0x1
c000dacc:	75 10                	jne    c000dade <sinc_set_converter+0x62>
c000dace:	c7 43 24 6c d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d36c
c000dad5:	c7 43 20 6c d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d36c
c000dadc:	eb 4d                	jmp    c000db2b <sinc_set_converter+0xaf>
c000dade:	83 fa 02             	cmp    edx,0x2
c000dae1:	75 10                	jne    c000daf3 <sinc_set_converter+0x77>
c000dae3:	c7 43 24 a7 cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cca7
c000daea:	c7 43 20 a7 cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cca7
c000daf1:	eb 38                	jmp    c000db2b <sinc_set_converter+0xaf>
c000daf3:	83 fa 04             	cmp    edx,0x4
c000daf6:	75 10                	jne    c000db08 <sinc_set_converter+0x8c>
c000daf8:	c7 43 24 e2 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5e2
c000daff:	c7 43 20 e2 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5e2
c000db06:	eb 23                	jmp    c000db2b <sinc_set_converter+0xaf>
c000db08:	83 fa 06             	cmp    edx,0x6
c000db0b:	75 10                	jne    c000db1d <sinc_set_converter+0xa1>
c000db0d:	c7 43 24 1d bf 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bf1d
c000db14:	c7 43 20 1d bf 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bf1d
c000db1b:	eb 0e                	jmp    c000db2b <sinc_set_converter+0xaf>
c000db1d:	c7 43 24 59 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b859
c000db24:	c7 43 20 59 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b859
c000db2b:	c7 43 28 0c ab 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ab0c
c000db32:	b8 0a 00 00 00       	mov    eax,0xa
c000db37:	81 c4 58 08 00 00    	add    esp,0x858
c000db3d:	5b                   	pop    ebx
c000db3e:	c3                   	ret    

c000db3f <zoh_vari_process>:
c000db3f:	55                   	push   ebp
c000db40:	31 d2                	xor    edx,edx
c000db42:	57                   	push   edi
c000db43:	56                   	push   esi
c000db44:	53                   	push   ebx
c000db45:	83 ec 3c             	sub    esp,0x3c
c000db48:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db4c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db50:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db54:	0f 8e 80 06 00 00    	jle    c000e1da <zoh_vari_process+0x69b>
c000db5a:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db5d:	ba 05 00 00 00       	mov    edx,0x5
c000db62:	85 db                	test   ebx,ebx
c000db64:	0f 84 70 06 00 00    	je     c000e1da <zoh_vari_process+0x69b>
c000db6a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db6d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db71:	74 19                	je     c000db8c <zoh_vari_process+0x4d>
c000db73:	31 d2                	xor    edx,edx
c000db75:	39 c2                	cmp    edx,eax
c000db77:	7d 0c                	jge    c000db85 <zoh_vari_process+0x46>
c000db79:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db7b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db7e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db82:	42                   	inc    edx
c000db83:	eb f0                	jmp    c000db75 <zoh_vari_process+0x36>
c000db85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db8c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db8f:	0f af d0             	imul   edx,eax
c000db92:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db95:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db99:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dba0:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dba3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dbaa:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dbad:	8b 07                	mov    eax,DWORD PTR [edi]
c000dbaf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbb7:	68 00 00 70 3f       	push   0x3f700000
c000dbbc:	6a 00                	push   0x0
c000dbbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbc6:	e8 a4 97 01 00       	call   c002736f <__ltdf2>
c000dbcb:	83 c4 10             	add    esp,0x10
c000dbce:	ba 16 00 00 00       	mov    edx,0x16
c000dbd3:	85 c0                	test   eax,eax
c000dbd5:	0f 88 ff 05 00 00    	js     c000e1da <zoh_vari_process+0x69b>
c000dbdb:	68 00 00 70 40       	push   0x40700000
c000dbe0:	6a 00                	push   0x0
c000dbe2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbea:	e8 62 97 01 00       	call   c0027351 <__gtdf2>
c000dbef:	83 c4 10             	add    esp,0x10
c000dbf2:	ba 16 00 00 00       	mov    edx,0x16
c000dbf7:	85 c0                	test   eax,eax
c000dbf9:	0f 8f db 05 00 00    	jg     c000e1da <zoh_vari_process+0x69b>
c000dbff:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dc02:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dc05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc09:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dc0d:	68 00 00 f0 3f       	push   0x3ff00000
c000dc12:	6a 00                	push   0x0
c000dc14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc1c:	e8 4e 97 01 00       	call   c002736f <__ltdf2>
c000dc21:	83 c4 10             	add    esp,0x10
c000dc24:	85 c0                	test   eax,eax
c000dc26:	0f 89 da 01 00 00    	jns    c000de06 <zoh_vari_process+0x2c7>
c000dc2c:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dc2f:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dc32:	0f 8d ce 01 00 00    	jge    c000de06 <zoh_vari_process+0x2c7>
c000dc38:	83 ec 0c             	sub    esp,0xc
c000dc3b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc3e:	e8 c0 94 01 00       	call   c0027103 <__floatsidf>
c000dc43:	83 c4 10             	add    esp,0x10
c000dc46:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc49:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc55:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc59:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc5d:	e8 3e 8e 01 00       	call   c0026aa0 <__muldf3>
c000dc62:	59                   	pop    ecx
c000dc63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc67:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc6b:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc6e:	e8 90 94 01 00       	call   c0027103 <__floatsidf>
c000dc73:	83 c4 10             	add    esp,0x10
c000dc76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc7a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc7e:	52                   	push   edx
c000dc7f:	50                   	push   eax
c000dc80:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc84:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc88:	e8 96 87 01 00       	call   c0026423 <__adddf3>
c000dc8d:	59                   	pop    ecx
c000dc8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc92:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc96:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc99:	e8 65 94 01 00       	call   c0027103 <__floatsidf>
c000dc9e:	83 c4 10             	add    esp,0x10
c000dca1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dca5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dca9:	52                   	push   edx
c000dcaa:	50                   	push   eax
c000dcab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcb3:	e8 b5 96 01 00       	call   c002736d <__gedf2>
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	85 c0                	test   eax,eax
c000dcbd:	0f 89 43 01 00 00    	jns    c000de06 <zoh_vari_process+0x2c7>
c000dcc3:	85 ed                	test   ebp,ebp
c000dcc5:	0f 8e ec 00 00 00    	jle    c000ddb7 <zoh_vari_process+0x278>
c000dccb:	83 ec 10             	sub    esp,0x10
c000dcce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcd1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcd4:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dcd7:	ff 37                	push   DWORD PTR [edi]
c000dcd9:	e8 96 8d 01 00       	call   c0026a74 <__subdf3>
c000dcde:	83 c4 18             	add    esp,0x18
c000dce1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dce5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dce9:	52                   	push   edx
c000dcea:	50                   	push   eax
c000dceb:	e8 10 98 01 00       	call   c0027500 <fabs>
c000dcf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcf4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcf8:	83 c4 10             	add    esp,0x10
c000dcfb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dd00:	68 23 42 92 0c       	push   0xc924223
c000dd05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd0d:	e8 3f 96 01 00       	call   c0027351 <__gtdf2>
c000dd12:	83 c4 10             	add    esp,0x10
c000dd15:	85 c0                	test   eax,eax
c000dd17:	0f 8e 9a 00 00 00    	jle    c000ddb7 <zoh_vari_process+0x278>
c000dd1d:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd1f:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd22:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd25:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dd29:	52                   	push   edx
c000dd2a:	50                   	push   eax
c000dd2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dd2e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dd31:	e8 3e 8d 01 00       	call   c0026a74 <__subdf3>
c000dd36:	59                   	pop    ecx
c000dd37:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd3b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd3f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd42:	e8 bc 93 01 00       	call   c0027103 <__floatsidf>
c000dd47:	83 c4 10             	add    esp,0x10
c000dd4a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd52:	52                   	push   edx
c000dd53:	50                   	push   eax
c000dd54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd5c:	e8 3f 8d 01 00       	call   c0026aa0 <__muldf3>
c000dd61:	5d                   	pop    ebp
c000dd62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd66:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd6a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd6d:	e8 91 93 01 00       	call   c0027103 <__floatsidf>
c000dd72:	83 c4 10             	add    esp,0x10
c000dd75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd79:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd7d:	52                   	push   edx
c000dd7e:	50                   	push   eax
c000dd7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd87:	e8 f8 8f 01 00       	call   c0026d84 <__divdf3>
c000dd8c:	83 c4 10             	add    esp,0x10
c000dd8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd97:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd9b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda7:	e8 77 86 01 00       	call   c0026423 <__adddf3>
c000ddac:	83 c4 10             	add    esp,0x10
c000ddaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddb3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddb7:	31 c0                	xor    eax,eax
c000ddb9:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ddbc:	7e 13                	jle    c000ddd1 <zoh_vari_process+0x292>
c000ddbe:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000ddc2:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ddc5:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ddc8:	40                   	inc    eax
c000ddc9:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000ddcc:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ddcf:	eb e8                	jmp    c000ddb9 <zoh_vari_process+0x27a>
c000ddd1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ddd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ddd9:	68 00 00 f0 3f       	push   0x3ff00000
c000ddde:	6a 00                	push   0x0
c000dde0:	e8 9f 8f 01 00       	call   c0026d84 <__divdf3>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddeb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddef:	52                   	push   edx
c000ddf0:	50                   	push   eax
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 25 86 01 00       	call   c0026423 <__adddf3>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	e9 ff fd ff ff       	jmp    c000dc05 <zoh_vari_process+0xc6>
c000de06:	55                   	push   ebp
c000de07:	55                   	push   ebp
c000de08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de10:	e8 0b 97 01 00       	call   c0027520 <lrint>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	50                   	push   eax
c000de19:	e8 e5 92 01 00       	call   c0027103 <__floatsidf>
c000de1e:	83 c4 10             	add    esp,0x10
c000de21:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de29:	52                   	push   edx
c000de2a:	50                   	push   eax
c000de2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de33:	e8 3c 8c 01 00       	call   c0026a74 <__subdf3>
c000de38:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de3c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de40:	83 c4 20             	add    esp,0x20
c000de43:	6a 00                	push   0x0
c000de45:	6a 00                	push   0x0
c000de47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de4f:	e8 1b 95 01 00       	call   c002736f <__ltdf2>
c000de54:	83 c4 10             	add    esp,0x10
c000de57:	85 c0                	test   eax,eax
c000de59:	79 1e                	jns    c000de79 <zoh_vari_process+0x33a>
c000de5b:	68 00 00 f0 3f       	push   0x3ff00000
c000de60:	6a 00                	push   0x0
c000de62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de66:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de6a:	e8 b4 85 01 00       	call   c0026423 <__adddf3>
c000de6f:	83 c4 10             	add    esp,0x10
c000de72:	89 04 24             	mov    DWORD PTR [esp],eax
c000de75:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de79:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de7c:	83 ec 10             	sub    esp,0x10
c000de7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de8f:	e8 e0 8b 01 00       	call   c0026a74 <__subdf3>
c000de94:	83 c4 18             	add    esp,0x18
c000de97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de9f:	52                   	push   edx
c000dea0:	50                   	push   eax
c000dea1:	e8 7a 96 01 00       	call   c0027520 <lrint>
c000dea6:	83 c4 10             	add    esp,0x10
c000dea9:	0f af e8             	imul   ebp,eax
c000deac:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000deaf:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000deb2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000deb6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000deb9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000debc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dec0:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000dec3:	0f 8d 7a 02 00 00    	jge    c000e143 <zoh_vari_process+0x604>
c000dec9:	83 ec 0c             	sub    esp,0xc
c000decc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000decf:	e8 2f 92 01 00       	call   c0027103 <__floatsidf>
c000ded4:	83 c4 10             	add    esp,0x10
c000ded7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dedb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dedf:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dee3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dee7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deeb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deef:	e8 ac 8b 01 00       	call   c0026aa0 <__muldf3>
c000def4:	59                   	pop    ecx
c000def5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000def9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000defd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df01:	e8 fd 91 01 00       	call   c0027103 <__floatsidf>
c000df06:	83 c4 10             	add    esp,0x10
c000df09:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df0d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df11:	52                   	push   edx
c000df12:	50                   	push   eax
c000df13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df1b:	e8 03 85 01 00       	call   c0026423 <__adddf3>
c000df20:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000df23:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000df27:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000df2b:	e8 d3 91 01 00       	call   c0027103 <__floatsidf>
c000df30:	83 c4 10             	add    esp,0x10
c000df33:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df37:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df3b:	52                   	push   edx
c000df3c:	50                   	push   eax
c000df3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df45:	e8 27 94 01 00       	call   c0027371 <__ledf2>
c000df4a:	83 c4 10             	add    esp,0x10
c000df4d:	85 c0                	test   eax,eax
c000df4f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df53:	0f 8f ea 01 00 00    	jg     c000e143 <zoh_vari_process+0x604>
c000df59:	85 c9                	test   ecx,ecx
c000df5b:	0f 8e ed 00 00 00    	jle    c000e04e <zoh_vari_process+0x50f>
c000df61:	83 ec 10             	sub    esp,0x10
c000df64:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df67:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df6a:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df6d:	ff 37                	push   DWORD PTR [edi]
c000df6f:	e8 00 8b 01 00       	call   c0026a74 <__subdf3>
c000df74:	83 c4 18             	add    esp,0x18
c000df77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df7b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df7f:	52                   	push   edx
c000df80:	50                   	push   eax
c000df81:	e8 7a 95 01 00       	call   c0027500 <fabs>
c000df86:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df8a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df8e:	83 c4 10             	add    esp,0x10
c000df91:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df96:	68 23 42 92 0c       	push   0xc924223
c000df9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa3:	e8 a9 93 01 00       	call   c0027351 <__gtdf2>
c000dfa8:	83 c4 10             	add    esp,0x10
c000dfab:	85 c0                	test   eax,eax
c000dfad:	0f 8e 9b 00 00 00    	jle    c000e04e <zoh_vari_process+0x50f>
c000dfb3:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfb5:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dfb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfbc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfc0:	52                   	push   edx
c000dfc1:	50                   	push   eax
c000dfc2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dfc5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dfc8:	e8 a7 8a 01 00       	call   c0026a74 <__subdf3>
c000dfcd:	5d                   	pop    ebp
c000dfce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfd6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfd9:	e8 25 91 01 00       	call   c0027103 <__floatsidf>
c000dfde:	83 c4 10             	add    esp,0x10
c000dfe1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfe5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfe9:	52                   	push   edx
c000dfea:	50                   	push   eax
c000dfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff3:	e8 a8 8a 01 00       	call   c0026aa0 <__muldf3>
c000dff8:	59                   	pop    ecx
c000dff9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dffd:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e001:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e004:	e8 fa 90 01 00       	call   c0027103 <__floatsidf>
c000e009:	83 c4 10             	add    esp,0x10
c000e00c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e010:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e014:	52                   	push   edx
c000e015:	50                   	push   eax
c000e016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e01a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e01e:	e8 61 8d 01 00       	call   c0026d84 <__divdf3>
c000e023:	83 c4 10             	add    esp,0x10
c000e026:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e02a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e02e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e032:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e03a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e03e:	e8 e0 83 01 00       	call   c0026423 <__adddf3>
c000e043:	83 c4 10             	add    esp,0x10
c000e046:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e04a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e04e:	31 d2                	xor    edx,edx
c000e050:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e053:	39 d0                	cmp    eax,edx
c000e055:	7e 1d                	jle    c000e074 <zoh_vari_process+0x535>
c000e057:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e05a:	29 c1                	sub    ecx,eax
c000e05c:	89 c8                	mov    eax,ecx
c000e05e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e060:	01 d0                	add    eax,edx
c000e062:	42                   	inc    edx
c000e063:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e066:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e069:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e06c:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e06f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e072:	eb dc                	jmp    c000e050 <zoh_vari_process+0x511>
c000e074:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e078:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07c:	68 00 00 f0 3f       	push   0x3ff00000
c000e081:	6a 00                	push   0x0
c000e083:	e8 fc 8c 01 00       	call   c0026d84 <__divdf3>
c000e088:	83 c4 10             	add    esp,0x10
c000e08b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e08f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e093:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e097:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e09b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0a3:	e8 7b 83 01 00       	call   c0026423 <__adddf3>
c000e0a8:	5d                   	pop    ebp
c000e0a9:	59                   	pop    ecx
c000e0aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0ba:	e8 61 94 01 00       	call   c0027520 <lrint>
c000e0bf:	83 ec 0c             	sub    esp,0xc
c000e0c2:	50                   	push   eax
c000e0c3:	e8 3b 90 01 00       	call   c0027103 <__floatsidf>
c000e0c8:	83 c4 10             	add    esp,0x10
c000e0cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e0d3:	52                   	push   edx
c000e0d4:	50                   	push   eax
c000e0d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0dd:	e8 92 89 01 00       	call   c0026a74 <__subdf3>
c000e0e2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0e6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ea:	83 c4 20             	add    esp,0x20
c000e0ed:	6a 00                	push   0x0
c000e0ef:	6a 00                	push   0x0
c000e0f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0f9:	e8 71 92 01 00       	call   c002736f <__ltdf2>
c000e0fe:	83 c4 10             	add    esp,0x10
c000e101:	85 c0                	test   eax,eax
c000e103:	79 1e                	jns    c000e123 <zoh_vari_process+0x5e4>
c000e105:	68 00 00 f0 3f       	push   0x3ff00000
c000e10a:	6a 00                	push   0x0
c000e10c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e114:	e8 0a 83 01 00       	call   c0026423 <__adddf3>
c000e119:	83 c4 10             	add    esp,0x10
c000e11c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e11f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e123:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e126:	83 ec 10             	sub    esp,0x10
c000e129:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e12d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e131:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e135:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e139:	e8 36 89 01 00       	call   c0026a74 <__subdf3>
c000e13e:	e9 51 fd ff ff       	jmp    c000de94 <zoh_vari_process+0x355>
c000e143:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e147:	7d 3a                	jge    c000e183 <zoh_vari_process+0x644>
c000e149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e14d:	83 ec 0c             	sub    esp,0xc
c000e150:	29 e8                	sub    eax,ebp
c000e152:	99                   	cdq    
c000e153:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e156:	50                   	push   eax
c000e157:	e8 a7 8f 01 00       	call   c0027103 <__floatsidf>
c000e15c:	83 c4 10             	add    esp,0x10
c000e15f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e163:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e167:	52                   	push   edx
c000e168:	50                   	push   eax
c000e169:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e16d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e171:	e8 ad 82 01 00       	call   c0026423 <__adddf3>
c000e176:	83 c4 10             	add    esp,0x10
c000e179:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e17c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e17f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e183:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e186:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e18a:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e18d:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e190:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e193:	85 c0                	test   eax,eax
c000e195:	7f 25                	jg     c000e1bc <zoh_vari_process+0x67d>
c000e197:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e19b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e19f:	89 07                	mov    DWORD PTR [edi],eax
c000e1a1:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e1a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e1a7:	99                   	cdq    
c000e1a8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e1ab:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e1ae:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e1b1:	99                   	cdq    
c000e1b2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e1b5:	31 d2                	xor    edx,edx
c000e1b7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e1ba:	eb 1e                	jmp    c000e1da <zoh_vari_process+0x69b>
c000e1bc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e1bf:	31 d2                	xor    edx,edx
c000e1c1:	29 c8                	sub    eax,ecx
c000e1c3:	c1 e0 02             	shl    eax,0x2
c000e1c6:	39 d1                	cmp    ecx,edx
c000e1c8:	7e cd                	jle    c000e197 <zoh_vari_process+0x658>
c000e1ca:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e1cc:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e1d0:	83 c0 04             	add    eax,0x4
c000e1d3:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e1d7:	42                   	inc    edx
c000e1d8:	eb ec                	jmp    c000e1c6 <zoh_vari_process+0x687>
c000e1da:	83 c4 3c             	add    esp,0x3c
c000e1dd:	89 d0                	mov    eax,edx
c000e1df:	5b                   	pop    ebx
c000e1e0:	5e                   	pop    esi
c000e1e1:	5f                   	pop    edi
c000e1e2:	5d                   	pop    ebp
c000e1e3:	c3                   	ret    

c000e1e4 <zoh_reset>:
c000e1e4:	83 ec 0c             	sub    esp,0xc
c000e1e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1eb:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1ee:	85 c0                	test   eax,eax
c000e1f0:	74 20                	je     c000e212 <zoh_reset+0x2e>
c000e1f2:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1f5:	83 c0 1c             	add    eax,0x1c
c000e1f8:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1fb:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e202:	c1 e2 02             	shl    edx,0x2
c000e205:	51                   	push   ecx
c000e206:	52                   	push   edx
c000e207:	6a 00                	push   0x0
c000e209:	50                   	push   eax
c000e20a:	e8 b5 24 ff ff       	call   c00006c4 <memset>
c000e20f:	83 c4 10             	add    esp,0x10
c000e212:	83 c4 0c             	add    esp,0xc
c000e215:	c3                   	ret    

c000e216 <zoh_get_name>:
c000e216:	31 c0                	xor    eax,eax
c000e218:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e21d:	75 05                	jne    c000e224 <zoh_get_name+0xe>
c000e21f:	b8 de 8d 02 c0       	mov    eax,0xc0028dde
c000e224:	c3                   	ret    

c000e225 <zoh_get_description>:
c000e225:	31 c0                	xor    eax,eax
c000e227:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e22c:	75 05                	jne    c000e233 <zoh_get_description+0xe>
c000e22e:	b8 ef 8d 02 c0       	mov    eax,0xc0028def
c000e233:	c3                   	ret    

c000e234 <zoh_set_converter>:
c000e234:	53                   	push   ebx
c000e235:	b8 0a 00 00 00       	mov    eax,0xa
c000e23a:	83 ec 08             	sub    esp,0x8
c000e23d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e241:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e246:	75 6e                	jne    c000e2b6 <zoh_set_converter+0x82>
c000e248:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e24b:	85 c0                	test   eax,eax
c000e24d:	74 13                	je     c000e262 <zoh_set_converter+0x2e>
c000e24f:	83 ec 0c             	sub    esp,0xc
c000e252:	50                   	push   eax
c000e253:	e8 12 14 00 00       	call   c000f66a <free>
c000e258:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e25f:	83 c4 10             	add    esp,0x10
c000e262:	50                   	push   eax
c000e263:	50                   	push   eax
c000e264:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e267:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e26e:	50                   	push   eax
c000e26f:	6a 01                	push   0x1
c000e271:	e8 14 14 00 00       	call   c000f68a <calloc>
c000e276:	83 c4 10             	add    esp,0x10
c000e279:	89 c2                	mov    edx,eax
c000e27b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e27e:	85 d2                	test   edx,edx
c000e280:	b8 01 00 00 00       	mov    eax,0x1
c000e285:	74 2f                	je     c000e2b6 <zoh_set_converter+0x82>
c000e287:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e28a:	83 ec 0c             	sub    esp,0xc
c000e28d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e290:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e296:	c7 43 24 3f db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db3f
c000e29d:	c7 43 20 3f db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db3f
c000e2a4:	c7 43 28 e4 e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1e4
c000e2ab:	53                   	push   ebx
c000e2ac:	e8 33 ff ff ff       	call   c000e1e4 <zoh_reset>
c000e2b1:	83 c4 10             	add    esp,0x10
c000e2b4:	31 c0                	xor    eax,eax
c000e2b6:	83 c4 08             	add    esp,0x8
c000e2b9:	5b                   	pop    ebx
c000e2ba:	c3                   	ret    

c000e2bb <CPU::current()>:
c000e2bb:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c000e2c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e2c6:	90                   	nop
c000e2c7:	c3                   	ret    

c000e2c8 <operator new(unsigned long)>:
c000e2c8:	83 ec 0c             	sub    esp,0xc
c000e2cb:	83 ec 0c             	sub    esp,0xc
c000e2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d2:	e8 83 13 00 00       	call   c000f65a <malloc>
c000e2d7:	83 c4 10             	add    esp,0x10
c000e2da:	83 c4 0c             	add    esp,0xc
c000e2dd:	c3                   	ret    

c000e2de <Krnl::resolveCompatibilitySymbol(char*)>:
c000e2de:	83 ec 0c             	sub    esp,0xc
c000e2e1:	83 ec 08             	sub    esp,0x8
c000e2e4:	68 26 8e 02 c0       	push   0xc0028e26
c000e2e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ed:	e8 c2 24 ff ff       	call   c00007b4 <strcmp>
c000e2f2:	83 c4 10             	add    esp,0x10
c000e2f5:	85 c0                	test   eax,eax
c000e2f7:	0f 94 c0             	sete   al
c000e2fa:	84 c0                	test   al,al
c000e2fc:	74 0a                	je     c000e308 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e2fe:	b8 e8 d0 02 c0       	mov    eax,0xc002d0e8
c000e303:	e9 e3 00 00 00       	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e308:	83 ec 08             	sub    esp,0x8
c000e30b:	68 2f 8e 02 c0       	push   0xc0028e2f
c000e310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e314:	e8 9b 24 ff ff       	call   c00007b4 <strcmp>
c000e319:	83 c4 10             	add    esp,0x10
c000e31c:	85 c0                	test   eax,eax
c000e31e:	0f 94 c0             	sete   al
c000e321:	84 c0                	test   al,al
c000e323:	74 0a                	je     c000e32f <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e325:	b8 9c 58 02 c0       	mov    eax,0xc002589c
c000e32a:	e9 bc 00 00 00       	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e32f:	83 ec 08             	sub    esp,0x8
c000e332:	68 39 8e 02 c0       	push   0xc0028e39
c000e337:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e33b:	e8 74 24 ff ff       	call   c00007b4 <strcmp>
c000e340:	83 c4 10             	add    esp,0x10
c000e343:	85 c0                	test   eax,eax
c000e345:	0f 94 c0             	sete   al
c000e348:	84 c0                	test   al,al
c000e34a:	74 0a                	je     c000e356 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e34c:	b8 d0 55 02 c0       	mov    eax,0xc00255d0
c000e351:	e9 95 00 00 00       	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e356:	83 ec 08             	sub    esp,0x8
c000e359:	68 42 8e 02 c0       	push   0xc0028e42
c000e35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e362:	e8 4d 24 ff ff       	call   c00007b4 <strcmp>
c000e367:	83 c4 10             	add    esp,0x10
c000e36a:	85 c0                	test   eax,eax
c000e36c:	0f 94 c0             	sete   al
c000e36f:	84 c0                	test   al,al
c000e371:	74 07                	je     c000e37a <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e373:	b8 9c 59 02 c0       	mov    eax,0xc002599c
c000e378:	eb 71                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e37a:	83 ec 08             	sub    esp,0x8
c000e37d:	68 4c 8e 02 c0       	push   0xc0028e4c
c000e382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e386:	e8 29 24 ff ff       	call   c00007b4 <strcmp>
c000e38b:	83 c4 10             	add    esp,0x10
c000e38e:	85 c0                	test   eax,eax
c000e390:	0f 94 c0             	sete   al
c000e393:	84 c0                	test   al,al
c000e395:	74 07                	je     c000e39e <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e397:	b8 1c 57 02 c0       	mov    eax,0xc002571c
c000e39c:	eb 4d                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e39e:	83 ec 08             	sub    esp,0x8
c000e3a1:	68 55 8e 02 c0       	push   0xc0028e55
c000e3a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3aa:	e8 05 24 ff ff       	call   c00007b4 <strcmp>
c000e3af:	83 c4 10             	add    esp,0x10
c000e3b2:	85 c0                	test   eax,eax
c000e3b4:	0f 94 c0             	sete   al
c000e3b7:	84 c0                	test   al,al
c000e3b9:	74 07                	je     c000e3c2 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e3bb:	b8 ec d0 02 c0       	mov    eax,0xc002d0ec
c000e3c0:	eb 29                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e3c2:	83 ec 08             	sub    esp,0x8
c000e3c5:	68 62 8e 02 c0       	push   0xc0028e62
c000e3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ce:	e8 e1 23 ff ff       	call   c00007b4 <strcmp>
c000e3d3:	83 c4 10             	add    esp,0x10
c000e3d6:	85 c0                	test   eax,eax
c000e3d8:	0f 94 c0             	sete   al
c000e3db:	84 c0                	test   al,al
c000e3dd:	74 07                	je     c000e3e6 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e3df:	b8 ed d0 02 c0       	mov    eax,0xc002d0ed
c000e3e4:	eb 05                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e3e6:	b8 00 00 00 00       	mov    eax,0x0
c000e3eb:	83 c4 0c             	add    esp,0xc
c000e3ee:	c3                   	ret    
c000e3ef:	90                   	nop

c000e3f0 <Computer::close(int, int, void*)>:
c000e3f0:	57                   	push   edi
c000e3f1:	56                   	push   esi
c000e3f2:	53                   	push   ebx
c000e3f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e3f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e3fb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e3ff:	83 ec 0c             	sub    esp,0xc
c000e402:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e408:	e8 b9 5a 00 00       	call   c0013ec6 <Device::closeAll()>
c000e40d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e413:	83 c4 10             	add    esp,0x10
c000e416:	8b 10                	mov    edx,DWORD PTR [eax]
c000e418:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e41c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e424:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e428:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e42c:	5b                   	pop    ebx
c000e42d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e430:	5e                   	pop    esi
c000e431:	5f                   	pop    edi
c000e432:	ff e0                	jmp    eax

c000e434 <Krnl::firstTask()>:
c000e434:	53                   	push   ebx
c000e435:	83 ec 14             	sub    esp,0x14
c000e438:	fb                   	sti    
c000e439:	68 3f 07 00 00       	push   0x73f
c000e43e:	e8 17 12 00 00       	call   c000f65a <malloc>
c000e443:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e44a:	89 c3                	mov    ebx,eax
c000e44c:	ff 35 34 e6 02 c0    	push   DWORD PTR ds:0xc002e634
c000e452:	68 6f 8e 02 c0       	push   0xc0028e6f
c000e457:	6a 01                	push   0x1
c000e459:	50                   	push   eax
c000e45a:	e8 03 ec 00 00       	call   c001d062 <Process::Process(bool, char const*, Process*, char**)>
c000e45f:	83 c4 20             	add    esp,0x20
c000e462:	68 ff 00 00 00       	push   0xff
c000e467:	6a 00                	push   0x0
c000e469:	68 ef ef 00 c0       	push   0xc000efef
c000e46e:	53                   	push   ebx
c000e46f:	e8 ec ee 00 00       	call   c001d360 <Process::createThread(void (*)(void*), void*, int)>
c000e474:	6a 7a                	push   0x7a
c000e476:	6a 00                	push   0x0
c000e478:	68 be db 01 c0       	push   0xc001dbbe
c000e47d:	ff 35 34 e6 02 c0    	push   DWORD PTR ds:0xc002e634
c000e483:	e8 d8 ee 00 00       	call   c001d360 <Process::createThread(void (*)(void*), void*, int)>
c000e488:	83 c4 20             	add    esp,0x20
c000e48b:	a3 e8 e5 02 c0       	mov    ds:0xc002e5e8,eax
c000e490:	c6 05 ed d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ed,0x1
c000e497:	e8 a3 fa 00 00       	call   c001df3f <Vm::initialise8086()>
c000e49c:	e8 0d 48 00 00       	call   c0012cae <Fs::initVFS()>
c000e4a1:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c000e4a6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e4ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4ae:	6a 00                	push   0x0
c000e4b0:	6a 00                	push   0x0
c000e4b2:	6a 00                	push   0x0
c000e4b4:	50                   	push   eax
c000e4b5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4b8:	e8 9f d5 00 00       	call   c001ba5c <Sys::loadSyscalls()>
c000e4bd:	e8 84 b6 00 00       	call   c0019b46 <Krnl::loadSystemEnv()>
c000e4c2:	83 c4 0c             	add    esp,0xc
c000e4c5:	6a 3a                	push   0x3a
c000e4c7:	68 7c 8e 02 c0       	push   0xc0028e7c
c000e4cc:	68 85 8e 02 c0       	push   0xc0028e85
c000e4d1:	e8 2c c3 00 00       	call   c001a802 <Reg::readIntWithDefault(char*, char*, int)>
c000e4d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4d9:	e8 b8 52 00 00       	call   c0013796 <User::loadClockSettings(int)>
c000e4de:	58                   	pop    eax
c000e4df:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c000e4e4:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e4ea:	e8 ab 59 00 00       	call   c0013e9a <Device::loadDriversForAll()>
c000e4ef:	5a                   	pop    edx
c000e4f0:	8b 1d e8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0e8
c000e4f6:	59                   	pop    ecx
c000e4f7:	6a 01                	push   0x1
c000e4f9:	68 8d 8e 02 c0       	push   0xc0028e8d
c000e4fe:	e8 b8 e6 00 00       	call   c001cbbb <Thr::loadDLL(char const*, bool)>
c000e503:	5a                   	pop    edx
c000e504:	59                   	pop    ecx
c000e505:	53                   	push   ebx
c000e506:	50                   	push   eax
c000e507:	e8 be e8 00 00       	call   c001cdca <Thr::executeDLL(unsigned long, void*)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	83 ec 0c             	sub    esp,0xc
c000e512:	6a 02                	push   0x2
c000e514:	e8 ab f1 00 00       	call   c001d6c4 <blockTask(TaskState)>
c000e519:	83 c4 10             	add    esp,0x10
c000e51c:	eb f1                	jmp    c000e50f <Krnl::firstTask()+0xdb>

c000e51e <Computer::Computer()>:
c000e51e:	83 ec 0c             	sub    esp,0xc
c000e521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e525:	83 ec 08             	sub    esp,0x8
c000e528:	68 a9 8e 02 c0       	push   0xc0028ea9
c000e52d:	50                   	push   eax
c000e52e:	e8 0d 5a 00 00       	call   c0013f40 <Device::Device(char const*)>
c000e533:	83 c4 10             	add    esp,0x10
c000e536:	ba cc 90 02 c0       	mov    edx,0xc00290cc
c000e53b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e53f:	89 10                	mov    DWORD PTR [eax],edx
c000e541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e545:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e54f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e553:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e55d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e561:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e567:	83 ca 04             	or     edx,0x4
c000e56a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e574:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e57a:	0f b6 d0             	movzx  edx,al
c000e57d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e581:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e58c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e592:	0f b6 d0             	movzx  edx,al
c000e595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e599:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e59e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5a2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5a8:	8d 50 01             	lea    edx,[eax+0x1]
c000e5ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e5af:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e5b5:	0f b6 d0             	movzx  edx,al
c000e5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5bc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e5c0:	83 e1 3f             	and    ecx,0x3f
c000e5c3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e5c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5cb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5d1:	0f b6 d0             	movzx  edx,al
c000e5d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5d8:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e5df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5e3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5e9:	0f b6 d0             	movzx  edx,al
c000e5ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5f0:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e5f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5f9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5ff:	8d 50 01             	lea    edx,[eax+0x1]
c000e602:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e606:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e60c:	0f b6 d0             	movzx  edx,al
c000e60f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e613:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e617:	83 e1 3f             	and    ecx,0x3f
c000e61a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e61e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e622:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e628:	0f b6 d0             	movzx  edx,al
c000e62b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e62f:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e63a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e640:	0f b6 d0             	movzx  edx,al
c000e643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e647:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e64c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e650:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e656:	8d 50 01             	lea    edx,[eax+0x1]
c000e659:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e65d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e663:	0f b6 d0             	movzx  edx,al
c000e666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e66a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e66e:	83 e1 3f             	and    ecx,0x3f
c000e671:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e675:	90                   	nop
c000e676:	83 c4 0c             	add    esp,0xc
c000e679:	c3                   	ret    

c000e67a <Computer::setBootMessage(char const*)>:
c000e67a:	c3                   	ret    
c000e67b:	90                   	nop

c000e67c <Computer::detectFeatures()>:
c000e67c:	55                   	push   ebp
c000e67d:	57                   	push   edi
c000e67e:	56                   	push   esi
c000e67f:	53                   	push   ebx
c000e680:	83 ec 1c             	sub    esp,0x1c
c000e683:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e687:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e691:	e8 4e 1c ff ff       	call   c00002e4 <detectCPUID>
c000e696:	85 c0                	test   eax,eax
c000e698:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e69e:	0f 95 c2             	setne  dl
c000e6a1:	83 e0 fd             	and    eax,0xfffffffd
c000e6a4:	d1 e2                	shl    edx,1
c000e6a6:	09 d0                	or     eax,edx
c000e6a8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6ae:	a8 02                	test   al,0x2
c000e6b0:	75 46                	jne    c000e6f8 <Computer::detectFeatures()+0x7c>
c000e6b2:	f6 05 01 d1 02 c0 04 	test   BYTE PTR ds:0xc002d101,0x4
c000e6b9:	74 07                	je     c000e6c2 <Computer::detectFeatures()+0x46>
c000e6bb:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e6c2:	e8 9f 6e 01 00       	call   c0025566 <x87Detect>
c000e6c7:	83 e0 01             	and    eax,0x1
c000e6ca:	c1 e0 04             	shl    eax,0x4
c000e6cd:	88 c2                	mov    dl,al
c000e6cf:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6d5:	83 e0 ef             	and    eax,0xffffffef
c000e6d8:	09 d0                	or     eax,edx
c000e6da:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6e0:	a8 10                	test   al,0x10
c000e6e2:	0f 85 2a 01 00 00    	jne    c000e812 <Computer::detectFeatures()+0x196>
c000e6e8:	84 c0                	test   al,al
c000e6ea:	0f 88 45 01 00 00    	js     c000e835 <Computer::detectFeatures()+0x1b9>
c000e6f0:	83 c4 1c             	add    esp,0x1c
c000e6f3:	5b                   	pop    ebx
c000e6f4:	5e                   	pop    esi
c000e6f5:	5f                   	pop    edi
c000e6f6:	5d                   	pop    ebp
c000e6f7:	c3                   	ret    
c000e6f8:	83 ec 0c             	sub    esp,0xc
c000e6fb:	6a 20                	push   0x20
c000e6fd:	e8 06 9e 00 00       	call   c0018508 <CPU::cpuidCheckEDX(unsigned int)>
c000e702:	83 e0 01             	and    eax,0x1
c000e705:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e70c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e712:	83 e0 f7             	and    eax,0xfffffff7
c000e715:	09 d0                	or     eax,edx
c000e717:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e71d:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e724:	e8 df 9d 00 00       	call   c0018508 <CPU::cpuidCheckEDX(unsigned int)>
c000e729:	83 e0 01             	and    eax,0x1
c000e72c:	88 c2                	mov    dl,al
c000e72e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e734:	83 e0 fe             	and    eax,0xfffffffe
c000e737:	09 d0                	or     eax,edx
c000e739:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e73f:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e746:	e8 bd 9d 00 00       	call   c0018508 <CPU::cpuidCheckEDX(unsigned int)>
c000e74b:	c1 e0 07             	shl    eax,0x7
c000e74e:	88 c2                	mov    dl,al
c000e750:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e756:	83 e0 7f             	and    eax,0x7f
c000e759:	09 d0                	or     eax,edx
c000e75b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e761:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e768:	e8 9b 9d 00 00       	call   c0018508 <CPU::cpuidCheckEDX(unsigned int)>
c000e76d:	83 c4 10             	add    esp,0x10
c000e770:	83 e0 01             	and    eax,0x1
c000e773:	c1 e0 05             	shl    eax,0x5
c000e776:	88 c2                	mov    dl,al
c000e778:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e77e:	83 e0 df             	and    eax,0xffffffdf
c000e781:	09 d0                	or     eax,edx
c000e783:	f7 05 00 d1 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002d100,0x401
c000e78d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e793:	0f 84 c2 00 00 00    	je     c000e85b <Computer::detectFeatures()+0x1df>
c000e799:	83 e0 fe             	and    eax,0xfffffffe
c000e79c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e7a2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e7a8:	88 c2                	mov    dl,al
c000e7aa:	83 e2 09             	and    edx,0x9
c000e7ad:	fe ca                	dec    dl
c000e7af:	75 09                	jne    c000e7ba <Computer::detectFeatures()+0x13e>
c000e7b1:	83 e0 fe             	and    eax,0xfffffffe
c000e7b4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e7ba:	83 ec 0c             	sub    esp,0xc
c000e7bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e7c1:	50                   	push   eax
c000e7c2:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e7c6:	55                   	push   ebp
c000e7c7:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e7cb:	57                   	push   edi
c000e7cc:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e7d0:	56                   	push   esi
c000e7d1:	68 00 00 00 80       	push   0x80000000
c000e7d6:	e8 a9 9c 00 00       	call   c0018484 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e7db:	83 c4 20             	add    esp,0x20
c000e7de:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e7e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e7e9:	0f 86 c3 fe ff ff    	jbe    c000e6b2 <Computer::detectFeatures()+0x36>
c000e7ef:	83 ec 0c             	sub    esp,0xc
c000e7f2:	50                   	push   eax
c000e7f3:	55                   	push   ebp
c000e7f4:	57                   	push   edi
c000e7f5:	56                   	push   esi
c000e7f6:	68 01 00 00 80       	push   0x80000001
c000e7fb:	e8 84 9c 00 00       	call   c0018484 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e800:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e80a:	83 c4 20             	add    esp,0x20
c000e80d:	e9 a0 fe ff ff       	jmp    c000e6b2 <Computer::detectFeatures()+0x36>
c000e812:	e8 09 6d 01 00       	call   c0025520 <absolutelyNoChanceInHell>
c000e817:	88 c2                	mov    dl,al
c000e819:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e81f:	c1 e2 07             	shl    edx,0x7
c000e822:	83 e0 7f             	and    eax,0x7f
c000e825:	09 d0                	or     eax,edx
c000e827:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e82d:	84 c0                	test   al,al
c000e82f:	0f 89 bb fe ff ff    	jns    c000e6f0 <Computer::detectFeatures()+0x74>
c000e835:	e8 c6 6c 01 00       	call   c0025500 <avxDetect>
c000e83a:	83 e0 01             	and    eax,0x1
c000e83d:	c1 e0 05             	shl    eax,0x5
c000e840:	88 c2                	mov    dl,al
c000e842:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e848:	83 e0 df             	and    eax,0xffffffdf
c000e84b:	09 d0                	or     eax,edx
c000e84d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e853:	83 c4 1c             	add    esp,0x1c
c000e856:	5b                   	pop    ebx
c000e857:	5e                   	pop    esi
c000e858:	5f                   	pop    edi
c000e859:	5d                   	pop    ebp
c000e85a:	c3                   	ret    
c000e85b:	83 ec 0c             	sub    esp,0xc
c000e85e:	68 00 02 00 00       	push   0x200
c000e863:	e8 a0 9c 00 00       	call   c0018508 <CPU::cpuidCheckEDX(unsigned int)>
c000e868:	83 c4 10             	add    esp,0x10
c000e86b:	83 e0 01             	and    eax,0x1
c000e86e:	88 c2                	mov    dl,al
c000e870:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e876:	83 e0 fe             	and    eax,0xfffffffe
c000e879:	09 d0                	or     eax,edx
c000e87b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e881:	e9 1c ff ff ff       	jmp    c000e7a2 <Computer::detectFeatures()+0x126>

c000e886 <Computer::displayFeatures()>:
c000e886:	53                   	push   ebx
c000e887:	83 ec 14             	sub    esp,0x14
c000e88a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e88e:	68 b9 8e 02 c0       	push   0xc0028eb9
c000e893:	e8 91 40 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000e898:	83 c4 10             	add    esp,0x10
c000e89b:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e8a2:	0f 85 73 02 00 00    	jne    c000eb1b <Computer::displayFeatures()+0x295>
c000e8a8:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c000e8ad:	83 ec 08             	sub    esp,0x8
c000e8b0:	50                   	push   eax
c000e8b1:	68 cc 8e 02 c0       	push   0xc0028ecc
c000e8b6:	e8 6e 40 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000e8bb:	83 c4 10             	add    esp,0x10
c000e8be:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e8c5:	0f 85 8c 02 00 00    	jne    c000eb57 <Computer::displayFeatures()+0x2d1>
c000e8cb:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c000e8d0:	83 ec 08             	sub    esp,0x8
c000e8d3:	50                   	push   eax
c000e8d4:	68 dd 8e 02 c0       	push   0xc0028edd
c000e8d9:	e8 4b 40 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000e8de:	83 c4 10             	add    esp,0x10
c000e8e1:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e8e8:	0f 85 5f 02 00 00    	jne    c000eb4d <Computer::displayFeatures()+0x2c7>
c000e8ee:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c000e8f3:	83 ec 08             	sub    esp,0x8
c000e8f6:	50                   	push   eax
c000e8f7:	68 ee 8e 02 c0       	push   0xc0028eee
c000e8fc:	e8 28 40 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000e901:	83 c4 10             	add    esp,0x10
c000e904:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e90b:	0f 85 32 02 00 00    	jne    c000eb43 <Computer::displayFeatures()+0x2bd>
c000e911:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c000e916:	83 ec 08             	sub    esp,0x8
c000e919:	50                   	push   eax
c000e91a:	68 ff 8e 02 c0       	push   0xc0028eff
c000e91f:	e8 05 40 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000e924:	83 c4 10             	add    esp,0x10
c000e927:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e92e:	0f 85 05 02 00 00    	jne    c000eb39 <Computer::displayFeatures()+0x2b3>
c000e934:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c000e939:	83 ec 08             	sub    esp,0x8
c000e93c:	50                   	push   eax
c000e93d:	68 10 8f 02 c0       	push   0xc0028f10
c000e942:	e8 e2 3f 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000e947:	83 c4 10             	add    esp,0x10
c000e94a:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e951:	0f 85 d8 01 00 00    	jne    c000eb2f <Computer::displayFeatures()+0x2a9>
c000e957:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c000e95c:	83 ec 08             	sub    esp,0x8
c000e95f:	50                   	push   eax
c000e960:	68 21 8f 02 c0       	push   0xc0028f21
c000e965:	e8 bf 3f 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000e96a:	83 c4 10             	add    esp,0x10
c000e96d:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e974:	0f 85 ab 01 00 00    	jne    c000eb25 <Computer::displayFeatures()+0x29f>
c000e97a:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c000e97f:	83 ec 08             	sub    esp,0x8
c000e982:	50                   	push   eax
c000e983:	68 32 8f 02 c0       	push   0xc0028f32
c000e988:	e8 9c 3f 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000e98d:	83 c4 10             	add    esp,0x10
c000e990:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e997:	0f 88 1b 02 00 00    	js     c000ebb8 <Computer::displayFeatures()+0x332>
c000e99d:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c000e9a2:	83 ec 08             	sub    esp,0x8
c000e9a5:	50                   	push   eax
c000e9a6:	68 43 8f 02 c0       	push   0xc0028f43
c000e9ab:	e8 79 3f 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000e9b0:	83 c4 10             	add    esp,0x10
c000e9b3:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e9ba:	0f 85 a1 01 00 00    	jne    c000eb61 <Computer::displayFeatures()+0x2db>
c000e9c0:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c000e9c5:	83 ec 08             	sub    esp,0x8
c000e9c8:	50                   	push   eax
c000e9c9:	68 54 8f 02 c0       	push   0xc0028f54
c000e9ce:	e8 56 3f 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e9dd:	0f 85 cb 01 00 00    	jne    c000ebae <Computer::displayFeatures()+0x328>
c000e9e3:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c000e9e8:	83 ec 08             	sub    esp,0x8
c000e9eb:	50                   	push   eax
c000e9ec:	68 65 8f 02 c0       	push   0xc0028f65
c000e9f1:	e8 33 3f 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000e9f6:	83 c4 10             	add    esp,0x10
c000e9f9:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ea00:	0f 85 9e 01 00 00    	jne    c000eba4 <Computer::displayFeatures()+0x31e>
c000ea06:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c000ea0b:	83 ec 08             	sub    esp,0x8
c000ea0e:	50                   	push   eax
c000ea0f:	68 76 8f 02 c0       	push   0xc0028f76
c000ea14:	e8 10 3f 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000ea19:	83 c4 10             	add    esp,0x10
c000ea1c:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ea23:	0f 85 71 01 00 00    	jne    c000eb9a <Computer::displayFeatures()+0x314>
c000ea29:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c000ea2e:	83 ec 08             	sub    esp,0x8
c000ea31:	50                   	push   eax
c000ea32:	68 87 8f 02 c0       	push   0xc0028f87
c000ea37:	e8 ed 3e 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000ea3c:	83 c4 10             	add    esp,0x10
c000ea3f:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ea46:	0f 85 44 01 00 00    	jne    c000eb90 <Computer::displayFeatures()+0x30a>
c000ea4c:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c000ea51:	83 ec 08             	sub    esp,0x8
c000ea54:	50                   	push   eax
c000ea55:	68 98 8f 02 c0       	push   0xc0028f98
c000ea5a:	e8 ca 3e 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000ea5f:	83 c4 10             	add    esp,0x10
c000ea62:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ea69:	0f 85 17 01 00 00    	jne    c000eb86 <Computer::displayFeatures()+0x300>
c000ea6f:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c000ea74:	83 ec 08             	sub    esp,0x8
c000ea77:	50                   	push   eax
c000ea78:	68 a9 8f 02 c0       	push   0xc0028fa9
c000ea7d:	e8 a7 3e 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000ea82:	83 c4 10             	add    esp,0x10
c000ea85:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ea8c:	0f 85 ea 00 00 00    	jne    c000eb7c <Computer::displayFeatures()+0x2f6>
c000ea92:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c000ea97:	83 ec 08             	sub    esp,0x8
c000ea9a:	50                   	push   eax
c000ea9b:	68 ba 8f 02 c0       	push   0xc0028fba
c000eaa0:	e8 84 3e 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000eaa5:	83 c4 10             	add    esp,0x10
c000eaa8:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eaaf:	0f 88 0d 01 00 00    	js     c000ebc2 <Computer::displayFeatures()+0x33c>
c000eab5:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c000eaba:	83 ec 08             	sub    esp,0x8
c000eabd:	50                   	push   eax
c000eabe:	68 cb 8f 02 c0       	push   0xc0028fcb
c000eac3:	e8 61 3e 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000eac8:	83 c4 10             	add    esp,0x10
c000eacb:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ead2:	0f 85 9a 00 00 00    	jne    c000eb72 <Computer::displayFeatures()+0x2ec>
c000ead8:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c000eadd:	83 ec 08             	sub    esp,0x8
c000eae0:	50                   	push   eax
c000eae1:	68 dc 8f 02 c0       	push   0xc0028fdc
c000eae6:	e8 3e 3e 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000eaeb:	83 c4 10             	add    esp,0x10
c000eaee:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000eaf5:	75 74                	jne    c000eb6b <Computer::displayFeatures()+0x2e5>
c000eaf7:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c000eafc:	83 ec 08             	sub    esp,0x8
c000eaff:	50                   	push   eax
c000eb00:	68 ed 8f 02 c0       	push   0xc0028fed
c000eb05:	e8 1f 3e 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000eb0a:	c7 44 24 20 67 a9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a967
c000eb12:	83 c4 18             	add    esp,0x18
c000eb15:	5b                   	pop    ebx
c000eb16:	e9 0e 3e 00 00       	jmp    c0012929 <Dbg::kprintf(char const*, ...)>
c000eb1b:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c000eb20:	e9 88 fd ff ff       	jmp    c000e8ad <Computer::displayFeatures()+0x27>
c000eb25:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c000eb2a:	e9 50 fe ff ff       	jmp    c000e97f <Computer::displayFeatures()+0xf9>
c000eb2f:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c000eb34:	e9 23 fe ff ff       	jmp    c000e95c <Computer::displayFeatures()+0xd6>
c000eb39:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c000eb3e:	e9 f6 fd ff ff       	jmp    c000e939 <Computer::displayFeatures()+0xb3>
c000eb43:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c000eb48:	e9 c9 fd ff ff       	jmp    c000e916 <Computer::displayFeatures()+0x90>
c000eb4d:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c000eb52:	e9 9c fd ff ff       	jmp    c000e8f3 <Computer::displayFeatures()+0x6d>
c000eb57:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c000eb5c:	e9 6f fd ff ff       	jmp    c000e8d0 <Computer::displayFeatures()+0x4a>
c000eb61:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c000eb66:	e9 5a fe ff ff       	jmp    c000e9c5 <Computer::displayFeatures()+0x13f>
c000eb6b:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c000eb70:	eb 8a                	jmp    c000eafc <Computer::displayFeatures()+0x276>
c000eb72:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c000eb77:	e9 61 ff ff ff       	jmp    c000eadd <Computer::displayFeatures()+0x257>
c000eb7c:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c000eb81:	e9 11 ff ff ff       	jmp    c000ea97 <Computer::displayFeatures()+0x211>
c000eb86:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c000eb8b:	e9 e4 fe ff ff       	jmp    c000ea74 <Computer::displayFeatures()+0x1ee>
c000eb90:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c000eb95:	e9 b7 fe ff ff       	jmp    c000ea51 <Computer::displayFeatures()+0x1cb>
c000eb9a:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c000eb9f:	e9 8a fe ff ff       	jmp    c000ea2e <Computer::displayFeatures()+0x1a8>
c000eba4:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c000eba9:	e9 5d fe ff ff       	jmp    c000ea0b <Computer::displayFeatures()+0x185>
c000ebae:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c000ebb3:	e9 30 fe ff ff       	jmp    c000e9e8 <Computer::displayFeatures()+0x162>
c000ebb8:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c000ebbd:	e9 e0 fd ff ff       	jmp    c000e9a2 <Computer::displayFeatures()+0x11c>
c000ebc2:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c000ebc7:	e9 ee fe ff ff       	jmp    c000eaba <Computer::displayFeatures()+0x234>

c000ebcc <Computer::rdmsr(unsigned int)>:
c000ebcc:	83 ec 0c             	sub    esp,0xc
c000ebcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebd3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ebda:	74 0a                	je     c000ebe6 <Computer::rdmsr(unsigned int)+0x1a>
c000ebdc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ebe0:	0f 32                	rdmsr  
c000ebe2:	83 c4 0c             	add    esp,0xc
c000ebe5:	c3                   	ret    
c000ebe6:	83 ec 0c             	sub    esp,0xc
c000ebe9:	68 fe 8f 02 c0       	push   0xc0028ffe
c000ebee:	e8 8c b0 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	eb e4                	jmp    c000ebdc <Computer::rdmsr(unsigned int)+0x10>

c000ebf8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ebf8:	57                   	push   edi
c000ebf9:	56                   	push   esi
c000ebfa:	52                   	push   edx
c000ebfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ec03:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ec07:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ec0e:	74 0e                	je     c000ec1e <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ec10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ec14:	89 f0                	mov    eax,esi
c000ec16:	89 fa                	mov    edx,edi
c000ec18:	0f 30                	wrmsr  
c000ec1a:	58                   	pop    eax
c000ec1b:	5e                   	pop    esi
c000ec1c:	5f                   	pop    edi
c000ec1d:	c3                   	ret    
c000ec1e:	83 ec 0c             	sub    esp,0xc
c000ec21:	68 04 90 02 c0       	push   0xc0029004
c000ec26:	e8 54 b0 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c000ec2b:	83 c4 10             	add    esp,0x10
c000ec2e:	eb e0                	jmp    c000ec10 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ec30 <Computer::nmiEnabled()>:
c000ec30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec34:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ec3a:	c3                   	ret    
c000ec3b:	90                   	nop

c000ec3c <Computer::readCMOS(unsigned char)>:
c000ec3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec40:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec47:	19 c0                	sbb    eax,eax
c000ec49:	83 e0 80             	and    eax,0xffffff80
c000ec4c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec50:	e6 70                	out    0x70,al
c000ec52:	e4 71                	in     al,0x71
c000ec54:	c3                   	ret    
c000ec55:	90                   	nop

c000ec56 <Computer::enableNMI(bool)>:
c000ec56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec5e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ec64:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ec6c:	eb ce                	jmp    c000ec3c <Computer::readCMOS(unsigned char)>

c000ec6e <Computer::open(int, int, void*)>:
c000ec6e:	56                   	push   esi
c000ec6f:	53                   	push   ebx
c000ec70:	83 ec 10             	sub    esp,0x10
c000ec73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ec77:	f6 05 00 d1 02 c0 04 	test   BYTE PTR ds:0xc002d100,0x4
c000ec7e:	68 68 12 00 00       	push   0x1268
c000ec83:	0f 94 05 24 c0 02 c0 	sete   BYTE PTR ds:0xc002c024
c000ec8a:	e8 cb 09 00 00       	call   c000f65a <malloc>
c000ec8f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec92:	89 c6                	mov    esi,eax
c000ec94:	e8 77 8c 00 00       	call   c0017910 <ACPI::ACPI()>
c000ec99:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec9f:	58                   	pop    eax
c000eca0:	5a                   	pop    edx
c000eca1:	53                   	push   ebx
c000eca2:	68 0a 90 02 c0       	push   0xc002900a
c000eca7:	e8 7d 3c 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000ecac:	59                   	pop    ecx
c000ecad:	5e                   	pop    esi
c000ecae:	ff 35 e8 d0 02 c0    	push   DWORD PTR ds:0xc002d0e8
c000ecb4:	68 58 90 02 c0       	push   0xc0029058
c000ecb9:	e8 6b 3c 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000ecbe:	58                   	pop    eax
c000ecbf:	5a                   	pop    edx
c000ecc0:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ecc6:	68 90 90 02 c0       	push   0xc0029090
c000eccb:	e8 59 3c 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000ecd0:	59                   	pop    ecx
c000ecd1:	5e                   	pop    esi
c000ecd2:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ecd8:	53                   	push   ebx
c000ecd9:	e8 72 50 00 00       	call   c0013d50 <Device::addChild(Device*)>
c000ecde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ece1:	e8 96 f9 ff ff       	call   c000e67c <Computer::detectFeatures()>
c000ece6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ece9:	e8 98 fb ff ff       	call   c000e886 <Computer::displayFeatures()>
c000ecee:	58                   	pop    eax
c000ecef:	5a                   	pop    edx
c000ecf0:	6a 01                	push   0x1
c000ecf2:	53                   	push   ebx
c000ecf3:	e8 5e ff ff ff       	call   c000ec56 <Computer::enableNMI(bool)>
c000ecf8:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ecff:	e8 56 09 00 00       	call   c000f65a <malloc>
c000ed04:	89 04 24             	mov    DWORD PTR [esp],eax
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e8 b2 98 00 00       	call   c00185c0 <CPU::CPU()>
c000ed0e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ed14:	59                   	pop    ecx
c000ed15:	58                   	pop    eax
c000ed16:	56                   	push   esi
c000ed17:	53                   	push   ebx
c000ed18:	e8 33 50 00 00       	call   c0013d50 <Device::addChild(Device*)>
c000ed1d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ed23:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ed29:	6a 00                	push   0x0
c000ed2b:	6a 00                	push   0x0
c000ed2d:	50                   	push   eax
c000ed2e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ed31:	83 c4 20             	add    esp,0x20
c000ed34:	e8 89 55 00 00       	call   c00142c2 <setupFPU()>
c000ed39:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ed3f:	85 c0                	test   eax,eax
c000ed41:	74 1f                	je     c000ed62 <Computer::open(int, int, void*)+0xf4>
c000ed43:	83 ec 08             	sub    esp,0x8
c000ed46:	50                   	push   eax
c000ed47:	53                   	push   ebx
c000ed48:	e8 03 50 00 00       	call   c0013d50 <Device::addChild(Device*)>
c000ed4d:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ed53:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed55:	6a 00                	push   0x0
c000ed57:	6a 00                	push   0x0
c000ed59:	6a 00                	push   0x0
c000ed5b:	50                   	push   eax
c000ed5c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ed5f:	83 c4 20             	add    esp,0x20
c000ed62:	83 ec 0c             	sub    esp,0xc
c000ed65:	68 34 e4 00 c0       	push   0xc000e434
c000ed6a:	e8 f1 e6 00 00       	call   c001d460 <setupMultitasking(void (*)())>
c000ed6f:	83 c4 14             	add    esp,0x14
c000ed72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ed77:	5b                   	pop    ebx
c000ed78:	5e                   	pop    esi
c000ed79:	c3                   	ret    

c000ed7a <Computer::disableNMI()>:
c000ed7a:	6a 00                	push   0x0
c000ed7c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ed80:	e8 d1 fe ff ff       	call   c000ec56 <Computer::enableNMI(bool)>
c000ed85:	58                   	pop    eax
c000ed86:	5a                   	pop    edx
c000ed87:	c3                   	ret    

c000ed88 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ed88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed8c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ed93:	19 c0                	sbb    eax,eax
c000ed95:	83 e0 80             	and    eax,0xffffff80
c000ed98:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ed9c:	e6 70                	out    0x70,al
c000ed9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eda2:	e6 71                	out    0x71,al
c000eda4:	c3                   	ret    
c000eda5:	90                   	nop

c000eda6 <Computer::handleNMI()>:
c000eda6:	56                   	push   esi
c000eda7:	53                   	push   ebx
c000eda8:	83 ec 10             	sub    esp,0x10
c000edab:	e4 92                	in     al,0x92
c000edad:	89 c6                	mov    esi,eax
c000edaf:	e4 61                	in     al,0x61
c000edb1:	68 22 90 02 c0       	push   0xc0029022
c000edb6:	88 c3                	mov    bl,al
c000edb8:	e8 6c 3b 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000edbd:	83 c4 10             	add    esp,0x10
c000edc0:	83 e6 10             	and    esi,0x10
c000edc3:	75 0d                	jne    c000edd2 <Computer::handleNMI()+0x2c>
c000edc5:	f6 c3 40             	test   bl,0x40
c000edc8:	75 1d                	jne    c000ede7 <Computer::handleNMI()+0x41>
c000edca:	84 db                	test   bl,bl
c000edcc:	78 2d                	js     c000edfb <Computer::handleNMI()+0x55>
c000edce:	58                   	pop    eax
c000edcf:	5b                   	pop    ebx
c000edd0:	5e                   	pop    esi
c000edd1:	c3                   	ret    
c000edd2:	83 ec 0c             	sub    esp,0xc
c000edd5:	68 33 90 02 c0       	push   0xc0029033
c000edda:	e8 a0 ae 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c000eddf:	83 c4 10             	add    esp,0x10
c000ede2:	f6 c3 40             	test   bl,0x40
c000ede5:	74 e3                	je     c000edca <Computer::handleNMI()+0x24>
c000ede7:	83 ec 0c             	sub    esp,0xc
c000edea:	68 40 90 02 c0       	push   0xc0029040
c000edef:	e8 8b ae 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c000edf4:	83 c4 10             	add    esp,0x10
c000edf7:	84 db                	test   bl,bl
c000edf9:	79 d3                	jns    c000edce <Computer::handleNMI()+0x28>
c000edfb:	c7 44 24 10 4a 90 02 c0 	mov    DWORD PTR [esp+0x10],0xc002904a
c000ee03:	5a                   	pop    edx
c000ee04:	5b                   	pop    ebx
c000ee05:	5e                   	pop    esi
c000ee06:	e9 74 ae 00 00       	jmp    c0019c7f <Krnl::panic(char const*)>
c000ee0b:	90                   	nop

c000ee0c <Computer::setDiskActivityLight(int, bool)>:
c000ee0c:	56                   	push   esi
c000ee0d:	53                   	push   ebx
c000ee0e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ee12:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ee17:	77 1b                	ja     c000ee34 <Computer::setDiskActivityLight(int, bool)+0x28>
c000ee19:	e4 92                	in     al,0x92
c000ee1b:	bb 40 00 00 00       	mov    ebx,0x40
c000ee20:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ee24:	89 da                	mov    edx,ebx
c000ee26:	d3 e2                	shl    edx,cl
c000ee28:	89 f1                	mov    ecx,esi
c000ee2a:	f7 d2                	not    edx
c000ee2c:	d3 e3                	shl    ebx,cl
c000ee2e:	21 d0                	and    eax,edx
c000ee30:	09 d8                	or     eax,ebx
c000ee32:	e6 92                	out    0x92,al
c000ee34:	5b                   	pop    ebx
c000ee35:	5e                   	pop    esi
c000ee36:	c3                   	ret    
c000ee37:	90                   	nop

c000ee38 <GDTEntry::setBase(unsigned int)>:
c000ee38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ee40:	89 c1                	mov    ecx,eax
c000ee42:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ee46:	c1 e9 10             	shr    ecx,0x10
c000ee49:	c1 e8 18             	shr    eax,0x18
c000ee4c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ee4f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ee52:	c3                   	ret    
c000ee53:	90                   	nop

c000ee54 <GDTEntry::setLimit(unsigned int)>:
c000ee54:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee5c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ee5f:	66 89 01             	mov    WORD PTR [ecx],ax
c000ee62:	83 e2 f0             	and    edx,0xfffffff0
c000ee65:	c1 e8 10             	shr    eax,0x10
c000ee68:	83 e0 0f             	and    eax,0xf
c000ee6b:	09 d0                	or     eax,edx
c000ee6d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <GDT::GDT()>:
c000ee72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee76:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee80:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee86:	90                   	nop
c000ee87:	c3                   	ret    

c000ee88 <GDT::addEntry(GDTEntry)>:
c000ee88:	53                   	push   ebx
c000ee89:	83 ec 0c             	sub    esp,0xc
c000ee8c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ee90:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ee92:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ee99:	52                   	push   edx
c000ee9a:	50                   	push   eax
c000ee9b:	68 f0 90 02 c0       	push   0xc00290f0
c000eea0:	e8 84 3a 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000eea5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000eea7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000eeab:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000eeaf:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000eeb3:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000eeb7:	8d 50 01             	lea    edx,[eax+0x1]
c000eeba:	c1 e0 03             	shl    eax,0x3
c000eebd:	89 13                	mov    DWORD PTR [ebx],edx
c000eebf:	83 c4 18             	add    esp,0x18
c000eec2:	5b                   	pop    ebx
c000eec3:	c3                   	ret    

c000eec4 <GDT::getNumberOfEntries()>:
c000eec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eec8:	8b 00                	mov    eax,DWORD PTR [eax]
c000eeca:	c3                   	ret    
c000eecb:	90                   	nop

c000eecc <GDT::flush()>:
c000eecc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eed0:	8b 10                	mov    edx,DWORD PTR [eax]
c000eed2:	83 c0 04             	add    eax,0x4
c000eed5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000eedc:	a3 f2 d0 02 c0       	mov    ds:0xc002d0f2,eax
c000eee1:	66 89 15 f0 d0 02 c0 	mov    WORD PTR ds:0xc002d0f0,dx
c000eee8:	e9 5b 15 ff ff       	jmp    c0000448 <loadGDT>
c000eeed:	90                   	nop

c000eeee <GDT::setup()>:
c000eeee:	55                   	push   ebp
c000eeef:	57                   	push   edi
c000eef0:	56                   	push   esi
c000eef1:	53                   	push   ebx
c000eef2:	83 ec 3c             	sub    esp,0x3c
c000eef5:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000eef9:	6a 00                	push   0x0
c000eefb:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000eeff:	53                   	push   ebx
c000ef00:	e8 33 ff ff ff       	call   c000ee38 <GDTEntry::setBase(unsigned int)>
c000ef05:	6a 00                	push   0x0
c000ef07:	53                   	push   ebx
c000ef08:	e8 47 ff ff ff       	call   c000ee54 <GDTEntry::setLimit(unsigned int)>
c000ef0d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ef15:	6a 00                	push   0x0
c000ef17:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ef1b:	53                   	push   ebx
c000ef1c:	e8 17 ff ff ff       	call   c000ee38 <GDTEntry::setBase(unsigned int)>
c000ef21:	68 ff ff ff 00       	push   0xffffff
c000ef26:	53                   	push   ebx
c000ef27:	e8 28 ff ff ff       	call   c000ee54 <GDTEntry::setLimit(unsigned int)>
c000ef2c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ef30:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ef35:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ef3a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef3e:	83 c4 20             	add    esp,0x20
c000ef41:	6a 00                	push   0x0
c000ef43:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ef47:	53                   	push   ebx
c000ef48:	e8 eb fe ff ff       	call   c000ee38 <GDTEntry::setBase(unsigned int)>
c000ef4d:	68 ff ff ff 00       	push   0xffffff
c000ef52:	53                   	push   ebx
c000ef53:	e8 fc fe ff ff       	call   c000ee54 <GDTEntry::setLimit(unsigned int)>
c000ef58:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ef5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ef60:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ef64:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ef68:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ef6c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ef71:	0d 00 92 c0 00       	or     eax,0xc09200
c000ef76:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ef7a:	89 d8                	mov    eax,ebx
c000ef7c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ef80:	80 cc 60             	or     ah,0x60
c000ef83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef87:	83 c4 0c             	add    esp,0xc
c000ef8a:	89 f8                	mov    eax,edi
c000ef8c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef90:	80 cc 60             	or     ah,0x60
c000ef93:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef97:	89 c7                	mov    edi,eax
c000ef99:	55                   	push   ebp
c000ef9a:	e8 e9 fe ff ff       	call   c000ee88 <GDT::addEntry(GDTEntry)>
c000ef9f:	83 c4 0c             	add    esp,0xc
c000efa2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000efa6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000efaa:	55                   	push   ebp
c000efab:	e8 d8 fe ff ff       	call   c000ee88 <GDT::addEntry(GDTEntry)>
c000efb0:	83 c4 0c             	add    esp,0xc
c000efb3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000efb7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000efbb:	55                   	push   ebp
c000efbc:	e8 c7 fe ff ff       	call   c000ee88 <GDT::addEntry(GDTEntry)>
c000efc1:	83 c4 0c             	add    esp,0xc
c000efc4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000efc8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000efcc:	53                   	push   ebx
c000efcd:	51                   	push   ecx
c000efce:	55                   	push   ebp
c000efcf:	e8 b4 fe ff ff       	call   c000ee88 <GDT::addEntry(GDTEntry)>
c000efd4:	83 c4 0c             	add    esp,0xc
c000efd7:	57                   	push   edi
c000efd8:	56                   	push   esi
c000efd9:	55                   	push   ebp
c000efda:	e8 a9 fe ff ff       	call   c000ee88 <GDT::addEntry(GDTEntry)>
c000efdf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000efe2:	e8 e5 fe ff ff       	call   c000eecc <GDT::flush()>
c000efe7:	83 c4 4c             	add    esp,0x4c
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	5f                   	pop    edi
c000efed:	5d                   	pop    ebp
c000efee:	c3                   	ret    

c000efef <idleFunction(void*)>:
c000efef:	53                   	push   ebx
c000eff0:	83 ec 08             	sub    esp,0x8
c000eff3:	e8 38 e2 00 00       	call   c001d230 <unlockScheduler()>
c000eff8:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c000effd:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f003:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f00a:	74 3c                	je     c000f048 <idleFunction(void*)+0x59>
c000f00c:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f013:	74 33                	je     c000f048 <idleFunction(void*)+0x59>
c000f015:	31 db                	xor    ebx,ebx
c000f017:	52                   	push   edx
c000f018:	52                   	push   edx
c000f019:	68 e1 00 00 00       	push   0xe1
c000f01e:	50                   	push   eax
c000f01f:	e8 a8 fb ff ff       	call   c000ebcc <Computer::rdmsr(unsigned int)>
c000f024:	53                   	push   ebx
c000f025:	83 e0 02             	and    eax,0x2
c000f028:	50                   	push   eax
c000f029:	68 e1 00 00 00       	push   0xe1
c000f02e:	ff 35 e8 d0 02 c0    	push   DWORD PTR ds:0xc002d0e8
c000f034:	e8 bf fb ff ff       	call   c000ebf8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f039:	83 c4 20             	add    esp,0x20
c000f03c:	e8 3e 12 ff ff       	call   c000027f <doTPAUSE>
c000f041:	e8 5a 85 01 00       	call   c00275a0 <idleCommon()>
c000f046:	eb f4                	jmp    c000f03c <idleFunction(void*)+0x4d>
c000f048:	fb                   	sti    
c000f049:	f4                   	hlt    
c000f04a:	e8 51 85 01 00       	call   c00275a0 <idleCommon()>
c000f04f:	eb f7                	jmp    c000f048 <idleFunction(void*)+0x59>
c000f051:	90                   	nop

c000f052 <IDTEntry::IDTEntry(bool)>:
c000f052:	83 ec 04             	sub    esp,0x4
c000f055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f059:	88 04 24             	mov    BYTE PTR [esp],al
c000f05c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f060:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f066:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f06a:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f06e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f072:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f075:	83 e2 f0             	and    edx,0xfffffff0
c000f078:	83 ca 0e             	or     edx,0xe
c000f07b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f07e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f082:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f085:	83 e2 ef             	and    edx,0xffffffef
c000f088:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f08b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f08f:	74 04                	je     c000f095 <IDTEntry::IDTEntry(bool)+0x43>
c000f091:	b2 03                	mov    dl,0x3
c000f093:	eb 02                	jmp    c000f097 <IDTEntry::IDTEntry(bool)+0x45>
c000f095:	b2 00                	mov    dl,0x0
c000f097:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f09b:	83 e2 03             	and    edx,0x3
c000f09e:	88 d1                	mov    cl,dl
c000f0a0:	c1 e1 05             	shl    ecx,0x5
c000f0a3:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f0a6:	83 e2 9f             	and    edx,0xffffff9f
c000f0a9:	09 ca                	or     edx,ecx
c000f0ab:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f0ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0b2:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f0b5:	83 ca 80             	or     edx,0xffffff80
c000f0b8:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f0bb:	90                   	nop
c000f0bc:	83 c4 04             	add    esp,0x4
c000f0bf:	c3                   	ret    

c000f0c0 <IDTEntry::setOffset(unsigned int)>:
c000f0c0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f0c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0c8:	66 89 02             	mov    WORD PTR [edx],ax
c000f0cb:	c1 e8 10             	shr    eax,0x10
c000f0ce:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f0d2:	c3                   	ret    
c000f0d3:	90                   	nop

c000f0d4 <IDT::IDT()>:
c000f0d4:	90                   	nop
c000f0d5:	c3                   	ret    

c000f0d6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f0d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0da:	83 c0 30             	add    eax,0x30
c000f0dd:	c3                   	ret    

c000f0de <IDT::addEntry(IDTEntry, int)>:
c000f0de:	53                   	push   ebx
c000f0df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f0e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f0ef:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f0f2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f0f6:	5b                   	pop    ebx
c000f0f7:	c3                   	ret    

c000f0f8 <IDT::addEntry(int, void (*)(), bool)>:
c000f0f8:	53                   	push   ebx
c000f0f9:	83 ec 10             	sub    esp,0x10
c000f0fc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f101:	50                   	push   eax
c000f102:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f106:	53                   	push   ebx
c000f107:	e8 46 ff ff ff       	call   c000f052 <IDTEntry::IDTEntry(bool)>
c000f10c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f110:	53                   	push   ebx
c000f111:	e8 aa ff ff ff       	call   c000f0c0 <IDTEntry::setOffset(unsigned int)>
c000f116:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f11a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f11e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f122:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f126:	e8 b3 ff ff ff       	call   c000f0de <IDT::addEntry(IDTEntry, int)>
c000f12b:	83 c4 30             	add    esp,0x30
c000f12e:	5b                   	pop    ebx
c000f12f:	c3                   	ret    

c000f130 <IDT::flush()>:
c000f130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f134:	66 c7 05 f8 d0 02 c0 ff 07 	mov    WORD PTR ds:0xc002d0f8,0x7ff
c000f13d:	a3 fa d0 02 c0       	mov    ds:0xc002d0fa,eax
c000f142:	0f 01 1d f8 d0 02 c0 	lidtd  ds:0xc002d0f8
c000f149:	c3                   	ret    

c000f14a <IDT::setup()>:
c000f14a:	57                   	push   edi
c000f14b:	56                   	push   esi
c000f14c:	53                   	push   ebx
c000f14d:	83 ec 10             	sub    esp,0x10
c000f150:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f154:	6a 00                	push   0x0
c000f156:	68 68 04 00 c0       	push   0xc0000468
c000f15b:	6a 00                	push   0x0
c000f15d:	53                   	push   ebx
c000f15e:	e8 95 ff ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f163:	6a 00                	push   0x0
c000f165:	68 78 04 00 c0       	push   0xc0000478
c000f16a:	6a 01                	push   0x1
c000f16c:	53                   	push   ebx
c000f16d:	e8 86 ff ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f172:	83 c4 20             	add    esp,0x20
c000f175:	6a 00                	push   0x0
c000f177:	68 82 04 00 c0       	push   0xc0000482
c000f17c:	6a 02                	push   0x2
c000f17e:	53                   	push   ebx
c000f17f:	e8 74 ff ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f184:	6a 00                	push   0x0
c000f186:	68 8c 04 00 c0       	push   0xc000048c
c000f18b:	6a 03                	push   0x3
c000f18d:	53                   	push   ebx
c000f18e:	e8 65 ff ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f193:	83 c4 20             	add    esp,0x20
c000f196:	6a 00                	push   0x0
c000f198:	68 96 04 00 c0       	push   0xc0000496
c000f19d:	6a 04                	push   0x4
c000f19f:	53                   	push   ebx
c000f1a0:	e8 53 ff ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f1a5:	6a 00                	push   0x0
c000f1a7:	68 a0 04 00 c0       	push   0xc00004a0
c000f1ac:	6a 05                	push   0x5
c000f1ae:	53                   	push   ebx
c000f1af:	e8 44 ff ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f1b4:	83 c4 20             	add    esp,0x20
c000f1b7:	6a 00                	push   0x0
c000f1b9:	68 aa 04 00 c0       	push   0xc00004aa
c000f1be:	6a 06                	push   0x6
c000f1c0:	53                   	push   ebx
c000f1c1:	e8 32 ff ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f1c6:	6a 00                	push   0x0
c000f1c8:	68 b4 04 00 c0       	push   0xc00004b4
c000f1cd:	6a 07                	push   0x7
c000f1cf:	53                   	push   ebx
c000f1d0:	e8 23 ff ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f1d5:	83 c4 20             	add    esp,0x20
c000f1d8:	6a 00                	push   0x0
c000f1da:	68 be 04 00 c0       	push   0xc00004be
c000f1df:	6a 08                	push   0x8
c000f1e1:	53                   	push   ebx
c000f1e2:	e8 11 ff ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f1e7:	6a 00                	push   0x0
c000f1e9:	68 c6 04 00 c0       	push   0xc00004c6
c000f1ee:	6a 09                	push   0x9
c000f1f0:	53                   	push   ebx
c000f1f1:	e8 02 ff ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f1f6:	83 c4 20             	add    esp,0x20
c000f1f9:	6a 00                	push   0x0
c000f1fb:	68 d0 04 00 c0       	push   0xc00004d0
c000f200:	6a 0a                	push   0xa
c000f202:	53                   	push   ebx
c000f203:	e8 f0 fe ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f208:	6a 00                	push   0x0
c000f20a:	68 d8 04 00 c0       	push   0xc00004d8
c000f20f:	6a 0b                	push   0xb
c000f211:	53                   	push   ebx
c000f212:	e8 e1 fe ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f217:	83 c4 20             	add    esp,0x20
c000f21a:	6a 00                	push   0x0
c000f21c:	68 e0 04 00 c0       	push   0xc00004e0
c000f221:	6a 0c                	push   0xc
c000f223:	53                   	push   ebx
c000f224:	e8 cf fe ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f229:	6a 00                	push   0x0
c000f22b:	68 e8 04 00 c0       	push   0xc00004e8
c000f230:	6a 0d                	push   0xd
c000f232:	53                   	push   ebx
c000f233:	e8 c0 fe ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f238:	83 c4 20             	add    esp,0x20
c000f23b:	6a 00                	push   0x0
c000f23d:	68 f0 04 00 c0       	push   0xc00004f0
c000f242:	6a 0e                	push   0xe
c000f244:	53                   	push   ebx
c000f245:	e8 ae fe ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f24a:	6a 00                	push   0x0
c000f24c:	68 f8 04 00 c0       	push   0xc00004f8
c000f251:	6a 0f                	push   0xf
c000f253:	53                   	push   ebx
c000f254:	e8 9f fe ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f259:	83 c4 20             	add    esp,0x20
c000f25c:	6a 00                	push   0x0
c000f25e:	68 02 05 00 c0       	push   0xc0000502
c000f263:	6a 10                	push   0x10
c000f265:	53                   	push   ebx
c000f266:	e8 8d fe ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f26b:	6a 00                	push   0x0
c000f26d:	68 0c 05 00 c0       	push   0xc000050c
c000f272:	6a 11                	push   0x11
c000f274:	53                   	push   ebx
c000f275:	e8 7e fe ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f27a:	83 c4 20             	add    esp,0x20
c000f27d:	6a 00                	push   0x0
c000f27f:	68 16 05 00 c0       	push   0xc0000516
c000f284:	6a 12                	push   0x12
c000f286:	53                   	push   ebx
c000f287:	e8 6c fe ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f28c:	6a 01                	push   0x1
c000f28e:	68 b0 05 00 c0       	push   0xc00005b0
c000f293:	6a 60                	push   0x60
c000f295:	53                   	push   ebx
c000f296:	e8 5d fe ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f29b:	83 c4 20             	add    esp,0x20
c000f29e:	6a 00                	push   0x0
c000f2a0:	68 b7 05 00 c0       	push   0xc00005b7
c000f2a5:	6a 20                	push   0x20
c000f2a7:	53                   	push   ebx
c000f2a8:	e8 4b fe ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f2ad:	6a 00                	push   0x0
c000f2af:	68 a2 05 00 c0       	push   0xc00005a2
c000f2b4:	6a 21                	push   0x21
c000f2b6:	53                   	push   ebx
c000f2b7:	e8 3c fe ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f2bc:	83 c4 20             	add    esp,0x20
c000f2bf:	6a 00                	push   0x0
c000f2c1:	68 a9 05 00 c0       	push   0xc00005a9
c000f2c6:	6a 22                	push   0x22
c000f2c8:	53                   	push   ebx
c000f2c9:	e8 2a fe ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f2ce:	6a 00                	push   0x0
c000f2d0:	68 20 05 00 c0       	push   0xc0000520
c000f2d5:	6a 23                	push   0x23
c000f2d7:	53                   	push   ebx
c000f2d8:	e8 1b fe ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f2dd:	83 c4 20             	add    esp,0x20
c000f2e0:	6a 00                	push   0x0
c000f2e2:	68 2a 05 00 c0       	push   0xc000052a
c000f2e7:	6a 24                	push   0x24
c000f2e9:	53                   	push   ebx
c000f2ea:	e8 09 fe ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f2ef:	6a 00                	push   0x0
c000f2f1:	68 34 05 00 c0       	push   0xc0000534
c000f2f6:	6a 25                	push   0x25
c000f2f8:	53                   	push   ebx
c000f2f9:	e8 fa fd ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f2fe:	83 c4 20             	add    esp,0x20
c000f301:	6a 00                	push   0x0
c000f303:	68 3e 05 00 c0       	push   0xc000053e
c000f308:	6a 26                	push   0x26
c000f30a:	53                   	push   ebx
c000f30b:	e8 e8 fd ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f310:	6a 00                	push   0x0
c000f312:	68 48 05 00 c0       	push   0xc0000548
c000f317:	6a 27                	push   0x27
c000f319:	53                   	push   ebx
c000f31a:	e8 d9 fd ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f31f:	83 c4 20             	add    esp,0x20
c000f322:	6a 00                	push   0x0
c000f324:	68 52 05 00 c0       	push   0xc0000552
c000f329:	6a 28                	push   0x28
c000f32b:	53                   	push   ebx
c000f32c:	e8 c7 fd ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f331:	6a 00                	push   0x0
c000f333:	68 5c 05 00 c0       	push   0xc000055c
c000f338:	6a 29                	push   0x29
c000f33a:	53                   	push   ebx
c000f33b:	e8 b8 fd ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f340:	83 c4 20             	add    esp,0x20
c000f343:	6a 00                	push   0x0
c000f345:	68 66 05 00 c0       	push   0xc0000566
c000f34a:	6a 2a                	push   0x2a
c000f34c:	53                   	push   ebx
c000f34d:	e8 a6 fd ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f352:	6a 00                	push   0x0
c000f354:	68 70 05 00 c0       	push   0xc0000570
c000f359:	6a 2b                	push   0x2b
c000f35b:	53                   	push   ebx
c000f35c:	e8 97 fd ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f361:	83 c4 20             	add    esp,0x20
c000f364:	6a 00                	push   0x0
c000f366:	68 7a 05 00 c0       	push   0xc000057a
c000f36b:	6a 2c                	push   0x2c
c000f36d:	53                   	push   ebx
c000f36e:	e8 85 fd ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f373:	6a 00                	push   0x0
c000f375:	68 84 05 00 c0       	push   0xc0000584
c000f37a:	6a 2d                	push   0x2d
c000f37c:	53                   	push   ebx
c000f37d:	e8 76 fd ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f382:	83 c4 20             	add    esp,0x20
c000f385:	6a 00                	push   0x0
c000f387:	68 8e 05 00 c0       	push   0xc000058e
c000f38c:	6a 2e                	push   0x2e
c000f38e:	53                   	push   ebx
c000f38f:	e8 64 fd ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f394:	6a 00                	push   0x0
c000f396:	68 98 05 00 c0       	push   0xc0000598
c000f39b:	6a 2f                	push   0x2f
c000f39d:	53                   	push   ebx
c000f39e:	e8 55 fd ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f3a3:	83 c4 20             	add    esp,0x20
c000f3a6:	6a 00                	push   0x0
c000f3a8:	68 ed 05 00 c0       	push   0xc00005ed
c000f3ad:	6a 30                	push   0x30
c000f3af:	53                   	push   ebx
c000f3b0:	e8 43 fd ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f3b5:	6a 00                	push   0x0
c000f3b7:	68 f7 05 00 c0       	push   0xc00005f7
c000f3bc:	6a 31                	push   0x31
c000f3be:	53                   	push   ebx
c000f3bf:	e8 34 fd ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f3c4:	83 c4 20             	add    esp,0x20
c000f3c7:	6a 00                	push   0x0
c000f3c9:	68 01 06 00 c0       	push   0xc0000601
c000f3ce:	6a 32                	push   0x32
c000f3d0:	53                   	push   ebx
c000f3d1:	e8 22 fd ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f3d6:	6a 00                	push   0x0
c000f3d8:	68 0b 06 00 c0       	push   0xc000060b
c000f3dd:	6a 33                	push   0x33
c000f3df:	53                   	push   ebx
c000f3e0:	e8 13 fd ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f3e5:	83 c4 20             	add    esp,0x20
c000f3e8:	6a 00                	push   0x0
c000f3ea:	68 15 06 00 c0       	push   0xc0000615
c000f3ef:	6a 34                	push   0x34
c000f3f1:	53                   	push   ebx
c000f3f2:	e8 01 fd ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f3f7:	6a 00                	push   0x0
c000f3f9:	68 1f 06 00 c0       	push   0xc000061f
c000f3fe:	6a 35                	push   0x35
c000f400:	53                   	push   ebx
c000f401:	e8 f2 fc ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f406:	83 c4 20             	add    esp,0x20
c000f409:	6a 00                	push   0x0
c000f40b:	68 29 06 00 c0       	push   0xc0000629
c000f410:	6a 36                	push   0x36
c000f412:	53                   	push   ebx
c000f413:	e8 e0 fc ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f418:	6a 00                	push   0x0
c000f41a:	68 33 06 00 c0       	push   0xc0000633
c000f41f:	6a 37                	push   0x37
c000f421:	53                   	push   ebx
c000f422:	e8 d1 fc ff ff       	call   c000f0f8 <IDT::addEntry(int, void (*)(), bool)>
c000f427:	83 c4 20             	add    esp,0x20
c000f42a:	e8 9a 26 00 00       	call   c0011ac9 <Virt::getAKernelVAS()>
c000f42f:	52                   	push   edx
c000f430:	6a 03                	push   0x3
c000f432:	6a 02                	push   0x2
c000f434:	50                   	push   eax
c000f435:	e8 ca 2c 00 00       	call   c0012104 <VAS::allocatePages(int, int)>
c000f43a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f441:	89 c6                	mov    esi,eax
c000f443:	e8 12 02 00 00       	call   c000f65a <malloc>
c000f448:	81 c6 00 20 00 00    	add    esi,0x2000
c000f44e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f451:	89 c7                	mov    edi,eax
c000f453:	e8 12 1e 00 00       	call   c001126a <TSS::TSS()>
c000f458:	83 c4 0c             	add    esp,0xc
c000f45b:	68 be 04 00 c0       	push   0xc00004be
c000f460:	56                   	push   esi
c000f461:	57                   	push   edi
c000f462:	e8 43 1e 00 00       	call   c00112aa <TSS::setup(unsigned long, unsigned long)>
c000f467:	59                   	pop    ecx
c000f468:	89 c6                	mov    esi,eax
c000f46a:	5f                   	pop    edi
c000f46b:	6a 00                	push   0x0
c000f46d:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f471:	50                   	push   eax
c000f472:	e8 db fb ff ff       	call   c000f052 <IDTEntry::IDTEntry(bool)>
c000f477:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f47b:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f480:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f487:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f48d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f491:	80 ce 05             	or     dh,0x5
c000f494:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f497:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f49b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f49f:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f4a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f4a5:	e8 86 fc ff ff       	call   c000f130 <IDT::flush()>
c000f4aa:	83 c4 20             	add    esp,0x20
c000f4ad:	5b                   	pop    ebx
c000f4ae:	5e                   	pop    esi
c000f4af:	5f                   	pop    edi
c000f4b0:	c3                   	ret    

c000f4b1 <sbrk>:
c000f4b1:	55                   	push   ebp
c000f4b2:	57                   	push   edi
c000f4b3:	56                   	push   esi
c000f4b4:	53                   	push   ebx
c000f4b5:	83 ec 1c             	sub    esp,0x1c
c000f4b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f4bc:	85 c0                	test   eax,eax
c000f4be:	74 3e                	je     c000f4fe <sbrk+0x4d>
c000f4c0:	78 43                	js     c000f505 <sbrk+0x54>
c000f4c2:	8b 15 e8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0e8
c000f4c8:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f4ce:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f4d4:	83 e2 01             	and    edx,0x1
c000f4d7:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f4db:	8b 0d 10 c0 02 c0    	mov    ecx,DWORD PTR ds:0xc002c010
c000f4e1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f4e5:	05 ff 0f 00 00       	add    eax,0xfff
c000f4ea:	89 c2                	mov    edx,eax
c000f4ec:	78 2f                	js     c000f51d <sbrk+0x6c>
c000f4ee:	c1 fa 0c             	sar    edx,0xc
c000f4f1:	89 d7                	mov    edi,edx
c000f4f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f4f7:	be 00 00 00 00       	mov    esi,0x0
c000f4fc:	eb 36                	jmp    c000f534 <sbrk+0x83>
c000f4fe:	a1 10 c0 02 c0       	mov    eax,ds:0xc002c010
c000f503:	eb 74                	jmp    c000f579 <sbrk+0xc8>
c000f505:	83 ec 08             	sub    esp,0x8
c000f508:	50                   	push   eax
c000f509:	68 0c 91 02 c0       	push   0xc002910c
c000f50e:	e8 16 34 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000f513:	83 c4 10             	add    esp,0x10
c000f516:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f51b:	eb 5c                	jmp    c000f579 <sbrk+0xc8>
c000f51d:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f523:	eb c9                	jmp    c000f4ee <sbrk+0x3d>
c000f525:	81 05 10 c0 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c010,0x1000
c000f52f:	46                   	inc    esi
c000f530:	39 f7                	cmp    edi,esi
c000f532:	74 34                	je     c000f568 <sbrk+0xb7>
c000f534:	e8 90 25 00 00       	call   c0011ac9 <Virt::getAKernelVAS()>
c000f539:	89 c3                	mov    ebx,eax
c000f53b:	8b 2d 10 c0 02 c0    	mov    ebp,DWORD PTR ds:0xc002c010
c000f541:	e8 b1 07 00 00       	call   c000fcf7 <Phys::allocatePage()>
c000f546:	68 01 04 00 00       	push   0x401
c000f54b:	55                   	push   ebp
c000f54c:	50                   	push   eax
c000f54d:	53                   	push   ebx
c000f54e:	e8 b1 2a 00 00       	call   c0012004 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f553:	83 c4 10             	add    esp,0x10
c000f556:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f55b:	74 c8                	je     c000f525 <sbrk+0x74>
c000f55d:	8b 1d 10 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c010
c000f563:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f566:	eb bd                	jmp    c000f525 <sbrk+0x74>
c000f568:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f56d:	75 12                	jne    c000f581 <sbrk+0xd0>
c000f56f:	0f 20 d8             	mov    eax,cr3
c000f572:	0f 22 d8             	mov    cr3,eax
c000f575:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f579:	83 c4 1c             	add    esp,0x1c
c000f57c:	5b                   	pop    ebx
c000f57d:	5e                   	pop    esi
c000f57e:	5f                   	pop    edi
c000f57f:	5d                   	pop    ebp
c000f580:	c3                   	ret    
c000f581:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f585:	89 cb                	mov    ebx,ecx
c000f587:	c1 eb 0a             	shr    ebx,0xa
c000f58a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f590:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f596:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f59a:	c1 e0 0c             	shl    eax,0xc
c000f59d:	01 c8                	add    eax,ecx
c000f59f:	c1 e8 0a             	shr    eax,0xa
c000f5a2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f5a7:	2d 00 00 40 00       	sub    eax,0x400000
c000f5ac:	39 c3                	cmp    ebx,eax
c000f5ae:	77 c5                	ja     c000f575 <sbrk+0xc4>
c000f5b0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f5b3:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f5b9:	39 d8                	cmp    eax,ebx
c000f5bb:	73 f3                	jae    c000f5b0 <sbrk+0xff>
c000f5bd:	eb b6                	jmp    c000f575 <sbrk+0xc4>

c000f5bf <mmap>:
c000f5bf:	83 ec 18             	sub    esp,0x18
c000f5c2:	68 3c 91 02 c0       	push   0xc002913c
c000f5c7:	e8 b3 a6 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c000f5cc:	b8 00 00 00 00       	mov    eax,0x0
c000f5d1:	83 c4 1c             	add    esp,0x1c
c000f5d4:	c3                   	ret    

c000f5d5 <munmap>:
c000f5d5:	83 ec 18             	sub    esp,0x18
c000f5d8:	68 41 91 02 c0       	push   0xc0029141
c000f5dd:	e8 9d a6 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c000f5e2:	b8 00 00 00 00       	mov    eax,0x0
c000f5e7:	83 c4 1c             	add    esp,0x1c
c000f5ea:	c3                   	ret    

c000f5eb <liballoc_lock()>:
c000f5eb:	83 ec 0c             	sub    esp,0xc
c000f5ee:	e8 3b dc 00 00       	call   c001d22e <lockScheduler()>
c000f5f3:	b8 00 00 00 00       	mov    eax,0x0
c000f5f8:	83 c4 0c             	add    esp,0xc
c000f5fb:	c3                   	ret    

c000f5fc <liballoc_unlock()>:
c000f5fc:	83 ec 0c             	sub    esp,0xc
c000f5ff:	e8 2c dc 00 00       	call   c001d230 <unlockScheduler()>
c000f604:	b8 00 00 00 00       	mov    eax,0x0
c000f609:	83 c4 0c             	add    esp,0xc
c000f60c:	c3                   	ret    

c000f60d <liballoc_alloc(int)>:
c000f60d:	83 ec 0c             	sub    esp,0xc
c000f610:	e8 b4 24 00 00       	call   c0011ac9 <Virt::getAKernelVAS()>
c000f615:	83 ec 04             	sub    esp,0x4
c000f618:	6a 01                	push   0x1
c000f61a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f61e:	50                   	push   eax
c000f61f:	e8 e0 2a 00 00       	call   c0012104 <VAS::allocatePages(int, int)>
c000f624:	83 c4 1c             	add    esp,0x1c
c000f627:	c3                   	ret    

c000f628 <liballoc_free(void*, int)>:
c000f628:	83 ec 0c             	sub    esp,0xc
c000f62b:	e8 99 24 00 00       	call   c0011ac9 <Virt::getAKernelVAS()>
c000f630:	83 ec 08             	sub    esp,0x8
c000f633:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f637:	50                   	push   eax
c000f638:	e8 83 27 00 00       	call   c0011dc0 <VAS::freeAllocatedPages(unsigned long)>
c000f63d:	b8 00 00 00 00       	mov    eax,0x0
c000f642:	83 c4 1c             	add    esp,0x1c
c000f645:	c3                   	ret    

c000f646 <realloc>:
c000f646:	83 ec 14             	sub    esp,0x14
c000f649:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f64d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f651:	e8 e7 1d ff ff       	call   c000143d <dlrealloc>
c000f656:	83 c4 1c             	add    esp,0x1c
c000f659:	c3                   	ret    

c000f65a <malloc>:
c000f65a:	83 ec 18             	sub    esp,0x18
c000f65d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f661:	e8 9a 18 ff ff       	call   c0000f00 <dlmalloc>
c000f666:	83 c4 1c             	add    esp,0x1c
c000f669:	c3                   	ret    

c000f66a <free>:
c000f66a:	83 ec 18             	sub    esp,0x18
c000f66d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f671:	e8 2f 15 ff ff       	call   c0000ba5 <dlfree>
c000f676:	83 c4 1c             	add    esp,0x1c
c000f679:	c3                   	ret    

c000f67a <rfree>:
c000f67a:	83 ec 18             	sub    esp,0x18
c000f67d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f681:	e8 1f 15 ff ff       	call   c0000ba5 <dlfree>
c000f686:	83 c4 1c             	add    esp,0x1c
c000f689:	c3                   	ret    

c000f68a <calloc>:
c000f68a:	56                   	push   esi
c000f68b:	53                   	push   ebx
c000f68c:	83 ec 10             	sub    esp,0x10
c000f68f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f693:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f698:	53                   	push   ebx
c000f699:	e8 bc ff ff ff       	call   c000f65a <malloc>
c000f69e:	89 c6                	mov    esi,eax
c000f6a0:	83 c4 0c             	add    esp,0xc
c000f6a3:	53                   	push   ebx
c000f6a4:	6a 00                	push   0x0
c000f6a6:	50                   	push   eax
c000f6a7:	e8 18 10 ff ff       	call   c00006c4 <memset>
c000f6ac:	89 f0                	mov    eax,esi
c000f6ae:	83 c4 14             	add    esp,0x14
c000f6b1:	5b                   	pop    ebx
c000f6b2:	5e                   	pop    esi
c000f6b3:	c3                   	ret    

c000f6b4 <hwTextMode_loadInData(VgaText*)>:
c000f6b4:	55                   	push   ebp
c000f6b5:	a1 20 c0 02 c0       	mov    eax,ds:0xc002c020
c000f6ba:	57                   	push   edi
c000f6bb:	56                   	push   esi
c000f6bc:	53                   	push   ebx
c000f6bd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f6c1:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f6c7:	85 d2                	test   edx,edx
c000f6c9:	7e 2f                	jle    c000f6fa <hwTextMode_loadInData(VgaText*)+0x46>
c000f6cb:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f6d1:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f6d4:	31 f6                	xor    esi,esi
c000f6d6:	29 fd                	sub    ebp,edi
c000f6d8:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f6db:	31 c0                	xor    eax,eax
c000f6dd:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f6e1:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f6e5:	40                   	inc    eax
c000f6e6:	83 f8 50             	cmp    eax,0x50
c000f6e9:	75 f2                	jne    c000f6dd <hwTextMode_loadInData(VgaText*)+0x29>
c000f6eb:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f6f1:	46                   	inc    esi
c000f6f2:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f6f8:	7f de                	jg     c000f6d8 <hwTextMode_loadInData(VgaText*)+0x24>
c000f6fa:	5b                   	pop    ebx
c000f6fb:	5e                   	pop    esi
c000f6fc:	5f                   	pop    edi
c000f6fd:	5d                   	pop    ebp
c000f6fe:	c3                   	ret    

c000f6ff <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f6ff:	55                   	push   ebp
c000f700:	80 3d 80 d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d180,0x0
c000f707:	57                   	push   edi
c000f708:	56                   	push   esi
c000f709:	53                   	push   ebx
c000f70a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f70e:	75 50                	jne    c000f760 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f710:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f716:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f71c:	8b 15 20 c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c020
c000f722:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f726:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f72c:	eb 0e                	jmp    c000f73c <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f72e:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f734:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f73a:	89 da                	mov    edx,ebx
c000f73c:	83 e5 0f             	and    ebp,0xf
c000f73f:	c1 e0 04             	shl    eax,0x4
c000f742:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f745:	0f b6 c0             	movzx  eax,al
c000f748:	41                   	inc    ecx
c000f749:	09 e8                	or     eax,ebp
c000f74b:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f74f:	c1 e0 08             	shl    eax,0x8
c000f752:	09 e8                	or     eax,ebp
c000f754:	39 fb                	cmp    ebx,edi
c000f756:	66 89 02             	mov    WORD PTR [edx],ax
c000f759:	75 d3                	jne    c000f72e <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f75b:	5b                   	pop    ebx
c000f75c:	5e                   	pop    esi
c000f75d:	5f                   	pop    edi
c000f75e:	5d                   	pop    ebp
c000f75f:	c3                   	ret    
c000f760:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f76a:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f774:	31 c0                	xor    eax,eax
c000f776:	bd 02 00 00 00       	mov    ebp,0x2
c000f77b:	eb 9f                	jmp    c000f71c <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f77d <hwTextMode_showCursor(VgaText*, bool)>:
c000f77d:	56                   	push   esi
c000f77e:	80 3d 80 d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d180,0x0
c000f785:	53                   	push   ebx
c000f786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f78a:	75 39                	jne    c000f7c5 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f78c:	84 c0                	test   al,al
c000f78e:	74 38                	je     c000f7c8 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f790:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f795:	b0 0a                	mov    al,0xa
c000f797:	89 da                	mov    edx,ebx
c000f799:	ee                   	out    dx,al
c000f79a:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f79f:	89 ca                	mov    edx,ecx
c000f7a1:	ec                   	in     al,dx
c000f7a2:	b2 0f                	mov    dl,0xf
c000f7a4:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f7a8:	83 e0 c0             	and    eax,0xffffffc0
c000f7ab:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f7b1:	09 d0                	or     eax,edx
c000f7b3:	89 ca                	mov    edx,ecx
c000f7b5:	ee                   	out    dx,al
c000f7b6:	b0 0b                	mov    al,0xb
c000f7b8:	89 da                	mov    edx,ebx
c000f7ba:	ee                   	out    dx,al
c000f7bb:	89 ca                	mov    edx,ecx
c000f7bd:	ec                   	in     al,dx
c000f7be:	83 e0 e0             	and    eax,0xffffffe0
c000f7c1:	83 c8 0f             	or     eax,0xf
c000f7c4:	ee                   	out    dx,al
c000f7c5:	5b                   	pop    ebx
c000f7c6:	5e                   	pop    esi
c000f7c7:	c3                   	ret    
c000f7c8:	b0 0a                	mov    al,0xa
c000f7ca:	ba d4 03 00 00       	mov    edx,0x3d4
c000f7cf:	ee                   	out    dx,al
c000f7d0:	b0 20                	mov    al,0x20
c000f7d2:	ba d5 03 00 00       	mov    edx,0x3d5
c000f7d7:	ee                   	out    dx,al
c000f7d8:	5b                   	pop    ebx
c000f7d9:	5e                   	pop    esi
c000f7da:	c3                   	ret    

c000f7db <hwTextMode_update(VgaText*)>:
c000f7db:	c3                   	ret    

c000f7dc <hwTextMode_updateCursor(VgaText*)>:
c000f7dc:	56                   	push   esi
c000f7dd:	80 3d 80 d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d180,0x0
c000f7e4:	53                   	push   ebx
c000f7e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7e9:	75 3f                	jne    c000f82a <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f7eb:	be d4 03 00 00       	mov    esi,0x3d4
c000f7f0:	b9 19 00 00 00       	mov    ecx,0x19
c000f7f5:	89 f2                	mov    edx,esi
c000f7f7:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f7fd:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f803:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f806:	c1 e1 04             	shl    ecx,0x4
c000f809:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f80f:	b0 0f                	mov    al,0xf
c000f811:	ee                   	out    dx,al
c000f812:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f817:	88 c8                	mov    al,cl
c000f819:	89 da                	mov    edx,ebx
c000f81b:	ee                   	out    dx,al
c000f81c:	b0 0e                	mov    al,0xe
c000f81e:	89 f2                	mov    edx,esi
c000f820:	ee                   	out    dx,al
c000f821:	89 c8                	mov    eax,ecx
c000f823:	89 da                	mov    edx,ebx
c000f825:	66 c1 e8 08          	shr    ax,0x8
c000f829:	ee                   	out    dx,al
c000f82a:	5b                   	pop    ebx
c000f82b:	5e                   	pop    esi
c000f82c:	c3                   	ret    

c000f82d <hwTextMode_disableBlink(VgaText*, bool)>:
c000f82d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f831:	80 3d 80 d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d180,0x0
c000f838:	75 38                	jne    c000f872 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000f83a:	ba da 03 00 00       	mov    edx,0x3da
c000f83f:	84 c0                	test   al,al
c000f841:	75 18                	jne    c000f85b <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000f843:	ec                   	in     al,dx
c000f844:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f849:	b0 30                	mov    al,0x30
c000f84b:	89 ca                	mov    edx,ecx
c000f84d:	ee                   	out    dx,al
c000f84e:	ba c1 03 00 00       	mov    edx,0x3c1
c000f853:	ec                   	in     al,dx
c000f854:	83 c8 08             	or     eax,0x8
c000f857:	89 ca                	mov    edx,ecx
c000f859:	ee                   	out    dx,al
c000f85a:	c3                   	ret    
c000f85b:	ec                   	in     al,dx
c000f85c:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f861:	b0 30                	mov    al,0x30
c000f863:	89 ca                	mov    edx,ecx
c000f865:	ee                   	out    dx,al
c000f866:	ba c1 03 00 00       	mov    edx,0x3c1
c000f86b:	ec                   	in     al,dx
c000f86c:	83 e0 f7             	and    eax,0xfffffff7
c000f86f:	89 ca                	mov    edx,ecx
c000f871:	ee                   	out    dx,al
c000f872:	c3                   	ret    

c000f873 <hwTextMode_scrollScreen(VgaText*)>:
c000f873:	55                   	push   ebp
c000f874:	57                   	push   edi
c000f875:	56                   	push   esi
c000f876:	53                   	push   ebx
c000f877:	83 ec 1c             	sub    esp,0x1c
c000f87a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f87e:	80 3d 80 d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d180,0x0
c000f885:	74 14                	je     c000f89b <hwTextMode_scrollScreen(VgaText*)+0x28>
c000f887:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000f891:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000f89b:	a1 20 c0 02 c0       	mov    eax,ds:0xc002c020
c000f8a0:	bd 02 00 00 00       	mov    ebp,0x2
c000f8a5:	05 a0 00 00 00       	add    eax,0xa0
c000f8aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f8ae:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f8b2:	31 c0                	xor    eax,eax
c000f8b4:	eb 0b                	jmp    c000f8c1 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000f8b6:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f8bc:	74 57                	je     c000f915 <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000f8be:	43                   	inc    ebx
c000f8bf:	89 f0                	mov    eax,esi
c000f8c1:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f8c7:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f8cd:	88 13                	mov    BYTE PTR [ebx],dl
c000f8cf:	8d 70 01             	lea    esi,[eax+0x1]
c000f8d2:	83 fd 18             	cmp    ebp,0x18
c000f8d5:	75 df                	jne    c000f8b6 <hwTextMode_scrollScreen(VgaText*)+0x43>
c000f8d7:	a8 01                	test   al,0x1
c000f8d9:	75 13                	jne    c000f8ee <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f8db:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f8de:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f8e4:	75 d8                	jne    c000f8be <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000f8e6:	83 c4 1c             	add    esp,0x1c
c000f8e9:	5b                   	pop    ebx
c000f8ea:	5e                   	pop    esi
c000f8eb:	5f                   	pop    edi
c000f8ec:	5d                   	pop    ebp
c000f8ed:	c3                   	ret    
c000f8ee:	83 ec 08             	sub    esp,0x8
c000f8f1:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000f8f8:	50                   	push   eax
c000f8f9:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000f8fd:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000f904:	50                   	push   eax
c000f905:	e8 32 0c 00 00       	call   c001053c <VgaText::combineColours(unsigned char, unsigned char)>
c000f90a:	83 c4 10             	add    esp,0x10
c000f90d:	88 07                	mov    BYTE PTR [edi],al
c000f90f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f913:	eb c9                	jmp    c000f8de <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000f915:	45                   	inc    ebp
c000f916:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f91e:	eb 8e                	jmp    c000f8ae <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000f920 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f920:	57                   	push   edi
c000f921:	80 3d 80 d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d180,0x0
c000f928:	56                   	push   esi
c000f929:	53                   	push   ebx
c000f92a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f92e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000f932:	75 65                	jne    c000f999 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000f934:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000f939:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000f93e:	83 ec 08             	sub    esp,0x8
c000f941:	52                   	push   edx
c000f942:	50                   	push   eax
c000f943:	e8 f4 0b 00 00       	call   c001053c <VgaText::combineColours(unsigned char, unsigned char)>
c000f948:	5a                   	pop    edx
c000f949:	0f b6 c0             	movzx  eax,al
c000f94c:	59                   	pop    ecx
c000f94d:	50                   	push   eax
c000f94e:	0f be c3             	movsx  eax,bl
c000f951:	50                   	push   eax
c000f952:	e8 8b 0c 00 00       	call   c00105e2 <VgaText::combineCharAndColour(char, unsigned char)>
c000f957:	83 c4 10             	add    esp,0x10
c000f95a:	8b 35 20 c0 02 c0    	mov    esi,DWORD PTR ds:0xc002c020
c000f960:	80 3d 80 d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d180,0x0
c000f967:	74 07                	je     c000f970 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000f969:	66 0f be c3          	movsx  ax,bl
c000f96d:	80 cc 02             	or     ah,0x2
c000f970:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f974:	ba 19 00 00 00       	mov    edx,0x19
c000f979:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f97f:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000f982:	8d 14 92             	lea    edx,[edx+edx*4]
c000f985:	c1 e1 04             	shl    ecx,0x4
c000f988:	c1 e2 04             	shl    edx,0x4
c000f98b:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000f98f:	01 ca                	add    edx,ecx
c000f991:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000f995:	5b                   	pop    ebx
c000f996:	5e                   	pop    esi
c000f997:	5f                   	pop    edi
c000f998:	c3                   	ret    
c000f999:	b8 02 00 00 00       	mov    eax,0x2
c000f99e:	31 d2                	xor    edx,edx
c000f9a0:	eb 9c                	jmp    c000f93e <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000f9a2 <setupTextMode()>:
c000f9a2:	a1 10 04 00 00       	mov    eax,ds:0x410
c000f9a7:	83 e0 30             	and    eax,0x30
c000f9aa:	66 83 f8 30          	cmp    ax,0x30
c000f9ae:	75 11                	jne    c000f9c1 <setupTextMode()+0x1f>
c000f9b0:	81 2d 20 c0 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002c020,0x8000
c000f9ba:	c6 05 80 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d180,0x1
c000f9c1:	c7 05 b8 d1 02 c0 2d f8 00 c0 	mov    DWORD PTR ds:0xc002d1b8,0xc000f82d
c000f9cb:	c7 05 a4 d1 02 c0 b4 f6 00 c0 	mov    DWORD PTR ds:0xc002d1a4,0xc000f6b4
c000f9d5:	c7 05 a0 d1 02 c0 ff f6 00 c0 	mov    DWORD PTR ds:0xc002d1a0,0xc000f6ff
c000f9df:	c7 05 ac d1 02 c0 73 f8 00 c0 	mov    DWORD PTR ds:0xc002d1ac,0xc000f873
c000f9e9:	c7 05 b4 d1 02 c0 7d f7 00 c0 	mov    DWORD PTR ds:0xc002d1b4,0xc000f77d
c000f9f3:	c7 05 a8 d1 02 c0 db f7 00 c0 	mov    DWORD PTR ds:0xc002d1a8,0xc000f7db
c000f9fd:	c7 05 b0 d1 02 c0 dc f7 00 c0 	mov    DWORD PTR ds:0xc002d1b0,0xc000f7dc
c000fa07:	c7 05 bc d1 02 c0 20 f9 00 c0 	mov    DWORD PTR ds:0xc002d1bc,0xc000f920
c000fa11:	c3                   	ret    

c000fa12 <kernel_main>:
c000fa12:	57                   	push   edi
c000fa13:	bf f9 03 00 00       	mov    edi,0x3f9
c000fa18:	56                   	push   esi
c000fa19:	31 f6                	xor    esi,esi
c000fa1b:	53                   	push   ebx
c000fa1c:	83 ec 10             	sub    esp,0x10
c000fa1f:	e8 72 09 00 00       	call   c0010396 <installVgaTextImplementation()>
c000fa24:	e8 79 ff ff ff       	call   c000f9a2 <setupTextMode()>
c000fa29:	89 f0                	mov    eax,esi
c000fa2b:	89 fa                	mov    edx,edi
c000fa2d:	ee                   	out    dx,al
c000fa2e:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fa33:	b0 80                	mov    al,0x80
c000fa35:	89 da                	mov    edx,ebx
c000fa37:	ee                   	out    dx,al
c000fa38:	b1 03                	mov    cl,0x3
c000fa3a:	ba f8 03 00 00       	mov    edx,0x3f8
c000fa3f:	88 c8                	mov    al,cl
c000fa41:	ee                   	out    dx,al
c000fa42:	89 f0                	mov    eax,esi
c000fa44:	89 fa                	mov    edx,edi
c000fa46:	ee                   	out    dx,al
c000fa47:	88 c8                	mov    al,cl
c000fa49:	89 da                	mov    edx,ebx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	b0 c7                	mov    al,0xc7
c000fa4e:	ba fa 03 00 00       	mov    edx,0x3fa
c000fa53:	ee                   	out    dx,al
c000fa54:	b0 0b                	mov    al,0xb
c000fa56:	ba fc 03 00 00       	mov    edx,0x3fc
c000fa5b:	ee                   	out    dx,al
c000fa5c:	83 ec 0c             	sub    esp,0xc
c000fa5f:	68 48 91 02 c0       	push   0xc0029148
c000fa64:	e8 c0 2e 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000fa69:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fa6e:	05 ff 0f 00 00       	add    eax,0xfff
c000fa73:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fa78:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa7b:	e8 d1 03 00 00       	call   c000fe51 <Phys::physicalMemorySetup(unsigned int)>
c000fa80:	e8 c5 1f 00 00       	call   c0011a4a <Virt::virtualMemorySetup()>
c000fa85:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fa8b:	83 c4 10             	add    esp,0x10
c000fa8e:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fa94:	75 0e                	jne    c000faa4 <kernel_main+0x92>
c000fa96:	89 d8                	mov    eax,ebx
c000fa98:	25 48 03 00 00       	and    eax,0x348
c000fa9d:	3d 00 03 00 00       	cmp    eax,0x300
c000faa2:	74 10                	je     c000fab4 <kernel_main+0xa2>
c000faa4:	83 ec 0c             	sub    esp,0xc
c000faa7:	68 68 a9 02 c0       	push   0xc002a968
c000faac:	e8 ce a1 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c000fab1:	83 c4 10             	add    esp,0x10
c000fab4:	83 ec 0c             	sub    esp,0xc
c000fab7:	89 1d 00 d1 02 c0    	mov    DWORD PTR ds:0xc002d100,ebx
c000fabd:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fac1:	53                   	push   ebx
c000fac2:	e8 37 21 00 00       	call   c0011bfe <VAS::VAS()>
c000fac7:	89 1d 64 d2 02 c0    	mov    DWORD PTR ds:0xc002d264,ebx
c000facd:	e8 4e 05 ff ff       	call   c0000020 <callGlobalConstructors>
c000fad2:	c7 04 24 5f 91 02 c0 	mov    DWORD PTR [esp],0xc002915f
c000fad9:	e8 4b 2e 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000fade:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fae5:	e8 70 fb ff ff       	call   c000f65a <malloc>
c000faea:	89 04 24             	mov    DWORD PTR [esp],eax
c000faed:	89 c6                	mov    esi,eax
c000faef:	e8 2a ea ff ff       	call   c000e51e <Computer::Computer()>
c000faf4:	58                   	pop    eax
c000faf5:	89 35 e8 d0 02 c0    	mov    DWORD PTR ds:0xc002d0e8,esi
c000fafb:	5a                   	pop    edx
c000fafc:	56                   	push   esi
c000fafd:	68 7c 91 02 c0       	push   0xc002917c
c000fb02:	e8 22 2e 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000fb07:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c000fb0c:	8b 10                	mov    edx,DWORD PTR [eax]
c000fb0e:	6a 00                	push   0x0
c000fb10:	6a 00                	push   0x0
c000fb12:	6a 00                	push   0x0
c000fb14:	50                   	push   eax
c000fb15:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fb18:	83 c4 14             	add    esp,0x14
c000fb1b:	53                   	push   ebx
c000fb1c:	e8 77 23 00 00       	call   c0011e98 <VAS::~VAS()>
c000fb21:	c7 04 24 8f 91 02 c0 	mov    DWORD PTR [esp],0xc002918f
c000fb28:	e8 52 a1 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c000fb2d:	83 c4 20             	add    esp,0x20
c000fb30:	5b                   	pop    ebx
c000fb31:	5e                   	pop    esi
c000fb32:	5f                   	pop    edi
c000fb33:	c3                   	ret    

c000fb34 <Phys::allocateDMA(unsigned long)>:
c000fb34:	55                   	push   ebp
c000fb35:	31 d2                	xor    edx,edx
c000fb37:	57                   	push   edi
c000fb38:	31 ed                	xor    ebp,ebp
c000fb3a:	56                   	push   esi
c000fb3b:	31 c9                	xor    ecx,ecx
c000fb3d:	53                   	push   ebx
c000fb3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb42:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fb48:	31 c0                	xor    eax,eax
c000fb4a:	c1 ee 0c             	shr    esi,0xc
c000fb4d:	eb 17                	jmp    c000fb66 <Phys::allocateDMA(unsigned long)+0x32>
c000fb4f:	85 c9                	test   ecx,ecx
c000fb51:	75 04                	jne    c000fb57 <Phys::allocateDMA(unsigned long)+0x23>
c000fb53:	89 d5                	mov    ebp,edx
c000fb55:	89 d0                	mov    eax,edx
c000fb57:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fb5a:	39 de                	cmp    esi,ebx
c000fb5c:	74 20                	je     c000fb7e <Phys::allocateDMA(unsigned long)+0x4a>
c000fb5e:	42                   	inc    edx
c000fb5f:	89 d9                	mov    ecx,ebx
c000fb61:	83 fa 2f             	cmp    edx,0x2f
c000fb64:	7f 11                	jg     c000fb77 <Phys::allocateDMA(unsigned long)+0x43>
c000fb66:	80 ba 40 d1 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd2ec0],0x0
c000fb6d:	74 e0                	je     c000fb4f <Phys::allocateDMA(unsigned long)+0x1b>
c000fb6f:	31 c9                	xor    ecx,ecx
c000fb71:	42                   	inc    edx
c000fb72:	83 fa 2f             	cmp    edx,0x2f
c000fb75:	7e ef                	jle    c000fb66 <Phys::allocateDMA(unsigned long)+0x32>
c000fb77:	5b                   	pop    ebx
c000fb78:	31 c0                	xor    eax,eax
c000fb7a:	5e                   	pop    esi
c000fb7b:	5f                   	pop    edi
c000fb7c:	5d                   	pop    ebp
c000fb7d:	c3                   	ret    
c000fb7e:	8d 14 30             	lea    edx,[eax+esi*1]
c000fb81:	89 d7                	mov    edi,edx
c000fb83:	4f                   	dec    edi
c000fb84:	79 03                	jns    c000fb89 <Phys::allocateDMA(unsigned long)+0x55>
c000fb86:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fb89:	c1 ff 04             	sar    edi,0x4
c000fb8c:	89 c2                	mov    edx,eax
c000fb8e:	c1 fa 04             	sar    edx,0x4
c000fb91:	39 fa                	cmp    edx,edi
c000fb93:	75 2f                	jne    c000fbc4 <Phys::allocateDMA(unsigned long)+0x90>
c000fb95:	85 db                	test   ebx,ebx
c000fb97:	74 1a                	je     c000fbb3 <Phys::allocateDMA(unsigned long)+0x7f>
c000fb99:	be 40 d1 02 c0       	mov    esi,0xc002d140
c000fb9e:	8d 90 40 d1 02 c0    	lea    edx,[eax-0x3ffd2ec0]
c000fba4:	f7 d6                	not    esi
c000fba6:	29 c6                	sub    esi,eax
c000fba8:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fbab:	42                   	inc    edx
c000fbac:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fbaf:	39 d9                	cmp    ecx,ebx
c000fbb1:	7f f5                	jg     c000fba8 <Phys::allocateDMA(unsigned long)+0x74>
c000fbb3:	85 ff                	test   edi,edi
c000fbb5:	74 13                	je     c000fbca <Phys::allocateDMA(unsigned long)+0x96>
c000fbb7:	5b                   	pop    ebx
c000fbb8:	05 50 20 0c 00       	add    eax,0xc2050
c000fbbd:	5e                   	pop    esi
c000fbbe:	c1 e0 0c             	shl    eax,0xc
c000fbc1:	5f                   	pop    edi
c000fbc2:	5d                   	pop    ebp
c000fbc3:	c3                   	ret    
c000fbc4:	89 ea                	mov    edx,ebp
c000fbc6:	31 c9                	xor    ecx,ecx
c000fbc8:	eb a7                	jmp    c000fb71 <Phys::allocateDMA(unsigned long)+0x3d>
c000fbca:	5b                   	pop    ebx
c000fbcb:	c1 e0 0c             	shl    eax,0xc
c000fbce:	5e                   	pop    esi
c000fbcf:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fbd4:	5f                   	pop    edi
c000fbd5:	5d                   	pop    ebp
c000fbd6:	c3                   	ret    

c000fbd7 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fbd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fbdb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fbdf:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fbe5:	c1 e9 0c             	shr    ecx,0xc
c000fbe8:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fbed:	76 25                	jbe    c000fc14 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fbef:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fbf4:	c1 e8 0c             	shr    eax,0xc
c000fbf7:	8d 50 10             	lea    edx,[eax+0x10]
c000fbfa:	85 c9                	test   ecx,ecx
c000fbfc:	74 15                	je     c000fc13 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fbfe:	8d 82 40 d1 02 c0    	lea    eax,[edx-0x3ffd2ec0]
c000fc04:	8d 94 11 40 d1 02 c0 	lea    edx,[ecx+edx*1-0x3ffd2ec0]
c000fc0b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fc0e:	40                   	inc    eax
c000fc0f:	39 d0                	cmp    eax,edx
c000fc11:	75 f8                	jne    c000fc0b <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fc13:	c3                   	ret    
c000fc14:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fc1a:	c1 ea 0c             	shr    edx,0xc
c000fc1d:	eb db                	jmp    c000fbfa <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fc1f <Phys::setPageState(unsigned long, bool)>:
c000fc1f:	56                   	push   esi
c000fc20:	ba 01 00 00 00       	mov    edx,0x1
c000fc25:	53                   	push   ebx
c000fc26:	8b 35 14 c0 02 c0    	mov    esi,DWORD PTR ds:0xc002c014
c000fc2c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fc34:	89 c8                	mov    eax,ecx
c000fc36:	83 e1 07             	and    ecx,0x7
c000fc39:	c1 e8 03             	shr    eax,0x3
c000fc3c:	d3 e3                	shl    ebx,cl
c000fc3e:	01 c6                	add    esi,eax
c000fc40:	d3 e2                	shl    edx,cl
c000fc42:	f7 d2                	not    edx
c000fc44:	20 16                	and    BYTE PTR [esi],dl
c000fc46:	03 05 14 c0 02 c0    	add    eax,DWORD PTR ds:0xc002c014
c000fc4c:	08 18                	or     BYTE PTR [eax],bl
c000fc4e:	5b                   	pop    ebx
c000fc4f:	5e                   	pop    esi
c000fc50:	c3                   	ret    

c000fc51 <Phys::getPageState(unsigned long)>:
c000fc51:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fc55:	8b 15 14 c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c014
c000fc5b:	89 c8                	mov    eax,ecx
c000fc5d:	83 e1 07             	and    ecx,0x7
c000fc60:	c1 e8 03             	shr    eax,0x3
c000fc63:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fc67:	d3 f8                	sar    eax,cl
c000fc69:	83 e0 01             	and    eax,0x1
c000fc6c:	c3                   	ret    

c000fc6d <Phys::freePage(unsigned long)>:
c000fc6d:	53                   	push   ebx
c000fc6e:	83 ec 08             	sub    esp,0x8
c000fc71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc75:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fc7b:	76 57                	jbe    c000fcd4 <Phys::freePage(unsigned long)+0x67>
c000fc7d:	c1 eb 0c             	shr    ebx,0xc
c000fc80:	53                   	push   ebx
c000fc81:	e8 cb ff ff ff       	call   c000fc51 <Phys::getPageState(unsigned long)>
c000fc86:	5a                   	pop    edx
c000fc87:	84 c0                	test   al,al
c000fc89:	74 5b                	je     c000fce6 <Phys::freePage(unsigned long)+0x79>
c000fc8b:	a1 2c d1 02 c0       	mov    eax,ds:0xc002d12c
c000fc90:	48                   	dec    eax
c000fc91:	a3 2c d1 02 c0       	mov    ds:0xc002d12c,eax
c000fc96:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc99:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc9c:	c1 e0 02             	shl    eax,0x2
c000fc9f:	99                   	cdq    
c000fca0:	f7 3d 30 d1 02 c0    	idiv   DWORD PTR ds:0xc002d130
c000fca6:	39 05 28 d1 02 c0    	cmp    DWORD PTR ds:0xc002d128,eax
c000fcac:	75 13                	jne    c000fcc1 <Phys::freePage(unsigned long)+0x54>
c000fcae:	83 ec 08             	sub    esp,0x8
c000fcb1:	6a 00                	push   0x0
c000fcb3:	53                   	push   ebx
c000fcb4:	e8 66 ff ff ff       	call   c000fc1f <Phys::setPageState(unsigned long, bool)>
c000fcb9:	83 c4 10             	add    esp,0x10
c000fcbc:	83 c4 08             	add    esp,0x8
c000fcbf:	5b                   	pop    ebx
c000fcc0:	c3                   	ret    
c000fcc1:	83 ec 0c             	sub    esp,0xc
c000fcc4:	a3 28 d1 02 c0       	mov    ds:0xc002d128,eax
c000fcc9:	50                   	push   eax
c000fcca:	e8 5b 0a 00 00       	call   c001072a <VgaText::updateRAMUsageDisplay(int)>
c000fccf:	83 c4 10             	add    esp,0x10
c000fcd2:	eb da                	jmp    c000fcae <Phys::freePage(unsigned long)+0x41>
c000fcd4:	68 00 10 00 00       	push   0x1000
c000fcd9:	53                   	push   ebx
c000fcda:	e8 f8 fe ff ff       	call   c000fbd7 <Phys::freeDMA(unsigned long, unsigned long)>
c000fcdf:	59                   	pop    ecx
c000fce0:	5b                   	pop    ebx
c000fce1:	83 c4 08             	add    esp,0x8
c000fce4:	5b                   	pop    ebx
c000fce5:	c3                   	ret    
c000fce6:	c7 44 24 10 aa 91 02 c0 	mov    DWORD PTR [esp+0x10],0xc00291aa
c000fcee:	83 c4 08             	add    esp,0x8
c000fcf1:	5b                   	pop    ebx
c000fcf2:	e9 88 9f 00 00       	jmp    c0019c7f <Krnl::panic(char const*)>

c000fcf7 <Phys::allocatePage()>:
c000fcf7:	56                   	push   esi
c000fcf8:	53                   	push   ebx
c000fcf9:	51                   	push   ecx
c000fcfa:	8b 35 20 d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d120
c000fd00:	89 f3                	mov    ebx,esi
c000fd02:	eb 0a                	jmp    c000fd0e <Phys::allocatePage()+0x17>
c000fd04:	89 1d 20 d1 02 c0    	mov    DWORD PTR ds:0xc002d120,ebx
c000fd0a:	39 de                	cmp    esi,ebx
c000fd0c:	74 24                	je     c000fd32 <Phys::allocatePage()+0x3b>
c000fd0e:	53                   	push   ebx
c000fd0f:	e8 3d ff ff ff       	call   c000fc51 <Phys::getPageState(unsigned long)>
c000fd14:	5a                   	pop    edx
c000fd15:	84 c0                	test   al,al
c000fd17:	74 5a                	je     c000fd73 <Phys::allocatePage()+0x7c>
c000fd19:	43                   	inc    ebx
c000fd1a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fd20:	75 e2                	jne    c000fd04 <Phys::allocatePage()+0xd>
c000fd22:	31 db                	xor    ebx,ebx
c000fd24:	c7 05 20 d1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d120,0x0
c000fd2e:	39 de                	cmp    esi,ebx
c000fd30:	75 dc                	jne    c000fd0e <Phys::allocatePage()+0x17>
c000fd32:	83 ec 0c             	sub    esp,0xc
c000fd35:	68 c0 91 02 c0       	push   0xc00291c0
c000fd3a:	e8 ea 2b 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000fd3f:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fd46:	e8 e9 fd ff ff       	call   c000fb34 <Phys::allocateDMA(unsigned long)>
c000fd4b:	83 c4 10             	add    esp,0x10
c000fd4e:	85 c0                	test   eax,eax
c000fd50:	75 56                	jne    c000fda8 <Phys::allocatePage()+0xb1>
c000fd52:	83 ec 0c             	sub    esp,0xc
c000fd55:	68 d1 91 02 c0       	push   0xc00291d1
c000fd5a:	e8 20 9f 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c000fd5f:	83 c4 10             	add    esp,0x10
c000fd62:	8b 1d 20 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d120
c000fd68:	53                   	push   ebx
c000fd69:	e8 e3 fe ff ff       	call   c000fc51 <Phys::getPageState(unsigned long)>
c000fd6e:	5a                   	pop    edx
c000fd6f:	84 c0                	test   al,al
c000fd71:	75 a6                	jne    c000fd19 <Phys::allocatePage()+0x22>
c000fd73:	6a 01                	push   0x1
c000fd75:	53                   	push   ebx
c000fd76:	e8 a4 fe ff ff       	call   c000fc1f <Phys::setPageState(unsigned long, bool)>
c000fd7b:	a1 2c d1 02 c0       	mov    eax,ds:0xc002d12c
c000fd80:	59                   	pop    ecx
c000fd81:	40                   	inc    eax
c000fd82:	5b                   	pop    ebx
c000fd83:	a3 2c d1 02 c0       	mov    ds:0xc002d12c,eax
c000fd88:	8d 04 80             	lea    eax,[eax+eax*4]
c000fd8b:	8d 04 80             	lea    eax,[eax+eax*4]
c000fd8e:	c1 e0 02             	shl    eax,0x2
c000fd91:	99                   	cdq    
c000fd92:	f7 3d 30 d1 02 c0    	idiv   DWORD PTR ds:0xc002d130
c000fd98:	39 05 28 d1 02 c0    	cmp    DWORD PTR ds:0xc002d128,eax
c000fd9e:	75 0c                	jne    c000fdac <Phys::allocatePage()+0xb5>
c000fda0:	a1 20 d1 02 c0       	mov    eax,ds:0xc002d120
c000fda5:	c1 e0 0c             	shl    eax,0xc
c000fda8:	5a                   	pop    edx
c000fda9:	5b                   	pop    ebx
c000fdaa:	5e                   	pop    esi
c000fdab:	c3                   	ret    
c000fdac:	83 ec 0c             	sub    esp,0xc
c000fdaf:	a3 28 d1 02 c0       	mov    ds:0xc002d128,eax
c000fdb4:	50                   	push   eax
c000fdb5:	e8 70 09 00 00       	call   c001072a <VgaText::updateRAMUsageDisplay(int)>
c000fdba:	83 c4 10             	add    esp,0x10
c000fdbd:	eb e1                	jmp    c000fda0 <Phys::allocatePage()+0xa9>

c000fdbf <Phys::allocateContiguousPages(int)>:
c000fdbf:	57                   	push   edi
c000fdc0:	56                   	push   esi
c000fdc1:	53                   	push   ebx
c000fdc2:	31 db                	xor    ebx,ebx
c000fdc4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fdc8:	e8 61 d4 00 00       	call   c001d22e <lockScheduler()>
c000fdcd:	85 db                	test   ebx,ebx
c000fdcf:	75 11                	jne    c000fde2 <Phys::allocateContiguousPages(int)+0x23>
c000fdd1:	e8 21 ff ff ff       	call   c000fcf7 <Phys::allocatePage()>
c000fdd6:	83 ff 01             	cmp    edi,0x1
c000fdd9:	89 c6                	mov    esi,eax
c000fddb:	74 21                	je     c000fdfe <Phys::allocateContiguousPages(int)+0x3f>
c000fddd:	bb 01 00 00 00       	mov    ebx,0x1
c000fde2:	e8 10 ff ff ff       	call   c000fcf7 <Phys::allocatePage()>
c000fde7:	89 da                	mov    edx,ebx
c000fde9:	c1 e2 0c             	shl    edx,0xc
c000fdec:	01 f2                	add    edx,esi
c000fdee:	39 c2                	cmp    edx,eax
c000fdf0:	74 17                	je     c000fe09 <Phys::allocateContiguousPages(int)+0x4a>
c000fdf2:	bb 01 00 00 00       	mov    ebx,0x1
c000fdf7:	89 c6                	mov    esi,eax
c000fdf9:	83 ff 01             	cmp    edi,0x1
c000fdfc:	75 e4                	jne    c000fde2 <Phys::allocateContiguousPages(int)+0x23>
c000fdfe:	e8 2d d4 00 00       	call   c001d230 <unlockScheduler()>
c000fe03:	89 f0                	mov    eax,esi
c000fe05:	5b                   	pop    ebx
c000fe06:	5e                   	pop    esi
c000fe07:	5f                   	pop    edi
c000fe08:	c3                   	ret    
c000fe09:	43                   	inc    ebx
c000fe0a:	39 fb                	cmp    ebx,edi
c000fe0c:	75 bf                	jne    c000fdcd <Phys::allocateContiguousPages(int)+0xe>
c000fe0e:	e8 1d d4 00 00       	call   c001d230 <unlockScheduler()>
c000fe13:	89 f0                	mov    eax,esi
c000fe15:	5b                   	pop    ebx
c000fe16:	5e                   	pop    esi
c000fe17:	5f                   	pop    edi
c000fe18:	c3                   	ret    

c000fe19 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fe19:	56                   	push   esi
c000fe1a:	53                   	push   ebx
c000fe1b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1f:	39 1d 24 d1 02 c0    	cmp    DWORD PTR ds:0xc002d124,ebx
c000fe25:	73 06                	jae    c000fe2d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fe27:	89 1d 24 d1 02 c0    	mov    DWORD PTR ds:0xc002d124,ebx
c000fe2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe31:	c1 eb 0c             	shr    ebx,0xc
c000fe34:	c1 e8 0c             	shr    eax,0xc
c000fe37:	39 d8                	cmp    eax,ebx
c000fe39:	73 13                	jae    c000fe4e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fe3b:	6a 00                	push   0x0
c000fe3d:	8d 70 01             	lea    esi,[eax+0x1]
c000fe40:	50                   	push   eax
c000fe41:	e8 d9 fd ff ff       	call   c000fc1f <Phys::setPageState(unsigned long, bool)>
c000fe46:	5a                   	pop    edx
c000fe47:	89 f0                	mov    eax,esi
c000fe49:	59                   	pop    ecx
c000fe4a:	39 f3                	cmp    ebx,esi
c000fe4c:	75 ed                	jne    c000fe3b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fe4e:	5b                   	pop    ebx
c000fe4f:	5e                   	pop    esi
c000fe50:	c3                   	ret    

c000fe51 <Phys::physicalMemorySetup(unsigned int)>:
c000fe51:	55                   	push   ebp
c000fe52:	57                   	push   edi
c000fe53:	56                   	push   esi
c000fe54:	53                   	push   ebx
c000fe55:	31 db                	xor    ebx,ebx
c000fe57:	83 ec 40             	sub    esp,0x40
c000fe5a:	6a 30                	push   0x30
c000fe5c:	6a 00                	push   0x0
c000fe5e:	68 40 d1 02 c0       	push   0xc002d140
c000fe63:	e8 5c 08 ff ff       	call   c00006c4 <memset>
c000fe68:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fe6c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fe71:	05 00 10 00 00       	add    eax,0x1000
c000fe76:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fe7a:	83 c4 10             	add    esp,0x10
c000fe7d:	83 ec 08             	sub    esp,0x8
c000fe80:	6a 01                	push   0x1
c000fe82:	53                   	push   ebx
c000fe83:	43                   	inc    ebx
c000fe84:	e8 96 fd ff ff       	call   c000fc1f <Phys::setPageState(unsigned long, bool)>
c000fe89:	83 c4 10             	add    esp,0x10
c000fe8c:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fe92:	75 e9                	jne    c000fe7d <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fe94:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fe9b:	66 85 c0             	test   ax,ax
c000fe9e:	0f 84 8e 01 00 00    	je     c0010032 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fea4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fea8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000feb0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000feb4:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000feb9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000febd:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fec5:	eb 15                	jmp    c000fedc <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fec7:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fecb:	83 c3 18             	add    ebx,0x18
c000fece:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fed2:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fed6:	0f 84 66 01 00 00    	je     c0010042 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fedc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fedf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fee2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fee5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fee9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000feed:	8b 33                	mov    esi,DWORD PTR [ebx]
c000feef:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fef2:	01 f0                	add    eax,esi
c000fef4:	55                   	push   ebp
c000fef5:	11 fa                	adc    edx,edi
c000fef7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fefb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000feff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ff03:	56                   	push   esi
c000ff04:	68 0c 92 02 c0       	push   0xc002920c
c000ff09:	e8 1b 2a 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000ff0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff12:	83 c4 10             	add    esp,0x10
c000ff15:	09 f8                	or     eax,edi
c000ff17:	0f 85 25 01 00 00    	jne    c0010042 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000ff1d:	4d                   	dec    ebp
c000ff1e:	75 a7                	jne    c000fec7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff20:	ba 00 00 08 00       	mov    edx,0x80000
c000ff25:	89 c1                	mov    ecx,eax
c000ff27:	39 f2                	cmp    edx,esi
c000ff29:	19 f9                	sbb    ecx,edi
c000ff2b:	0f 82 a7 00 00 00    	jb     c000ffd8 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000ff31:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000ff35:	89 c1                	mov    ecx,eax
c000ff37:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000ff3b:	0f 83 97 00 00 00    	jae    c000ffd8 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000ff41:	ba 00 00 0a 00       	mov    edx,0xa0000
c000ff46:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ff4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000ff4e:	39 fa                	cmp    edx,edi
c000ff50:	19 e8                	sbb    eax,ebp
c000ff52:	0f 82 14 01 00 00    	jb     c001006c <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000ff58:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ff5c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000ff60:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000ff66:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ff6b:	83 d5 ff             	adc    ebp,0xffffffff
c000ff6e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000ff72:	31 c0                	xor    eax,eax
c000ff74:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000ff78:	39 fa                	cmp    edx,edi
c000ff7a:	89 c1                	mov    ecx,eax
c000ff7c:	19 e9                	sbb    ecx,ebp
c000ff7e:	0f 83 43 ff ff ff    	jae    c000fec7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff84:	be 00 00 08 00       	mov    esi,0x80000
c000ff89:	50                   	push   eax
c000ff8a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ff8e:	57                   	push   edi
c000ff8f:	56                   	push   esi
c000ff90:	68 30 92 02 c0       	push   0xc0029230
c000ff95:	e8 8f 29 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000ff9a:	5a                   	pop    edx
c000ff9b:	59                   	pop    ecx
c000ff9c:	57                   	push   edi
c000ff9d:	56                   	push   esi
c000ff9e:	e8 76 fe ff ff       	call   c000fe19 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000ffa3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ffa7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ffab:	83 c4 0c             	add    esp,0xc
c000ffae:	0f ac d0 0c          	shrd   eax,edx,0xc
c000ffb2:	03 05 30 d1 02 c0    	add    eax,DWORD PTR ds:0xc002d130
c000ffb8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ffbf:	a3 30 d1 02 c0       	mov    ds:0xc002d130,eax
c000ffc4:	52                   	push   edx
c000ffc5:	50                   	push   eax
c000ffc6:	68 ed 91 02 c0       	push   0xc00291ed
c000ffcb:	e8 59 29 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c000ffd0:	83 c4 10             	add    esp,0x10
c000ffd3:	e9 ef fe ff ff       	jmp    c000fec7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ffd8:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000ffdc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ffe0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ffe4:	39 ea                	cmp    edx,ebp
c000ffe6:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000ffea:	0f 82 d7 fe ff ff    	jb     c000fec7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fff0:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fff5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fff9:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fffd:	0f 83 c4 fe ff ff    	jae    c000fec7 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010003:	39 ee                	cmp    esi,ebp
c0010005:	89 f8                	mov    eax,edi
c0010007:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001000b:	0f 83 78 ff ff ff    	jae    c000ff89 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010011:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010015:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010019:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001001d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010021:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010025:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010029:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001002d:	e9 57 ff ff ff       	jmp    c000ff89 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010032:	83 ec 0c             	sub    esp,0xc
c0010035:	68 df 91 02 c0       	push   0xc00291df
c001003a:	e8 40 9c 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c001003f:	83 c4 10             	add    esp,0x10
c0010042:	bb 40 01 00 00       	mov    ebx,0x140
c0010047:	83 ec 08             	sub    esp,0x8
c001004a:	6a 00                	push   0x0
c001004c:	53                   	push   ebx
c001004d:	43                   	inc    ebx
c001004e:	e8 cc fb ff ff       	call   c000fc1f <Phys::setPageState(unsigned long, bool)>
c0010053:	ff 05 30 d1 02 c0    	inc    DWORD PTR ds:0xc002d130
c0010059:	83 c4 10             	add    esp,0x10
c001005c:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010062:	75 e3                	jne    c0010047 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010064:	83 c4 3c             	add    esp,0x3c
c0010067:	5b                   	pop    ebx
c0010068:	5e                   	pop    esi
c0010069:	5f                   	pop    edi
c001006a:	5d                   	pop    ebp
c001006b:	c3                   	ret    
c001006c:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010074:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001007c:	e9 d7 fe ff ff       	jmp    c000ff58 <Phys::physicalMemorySetup(unsigned int)+0x107>
c0010081:	90                   	nop

c0010082 <Pipe::isAtty()>:
c0010082:	31 c0                	xor    eax,eax
c0010084:	c3                   	ret    
c0010085:	90                   	nop

c0010086 <Pipe::~Pipe()>:
c0010086:	83 ec 0c             	sub    esp,0xc
c0010089:	ba 9c 92 02 c0       	mov    edx,0xc002929c
c001008e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010092:	89 10                	mov    DWORD PTR [eax],edx
c0010094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010098:	83 ec 0c             	sub    esp,0xc
c001009b:	50                   	push   eax
c001009c:	e8 37 16 00 00       	call   c00116d8 <UnixFile::~UnixFile()>
c00100a1:	83 c4 10             	add    esp,0x10
c00100a4:	90                   	nop
c00100a5:	83 c4 0c             	add    esp,0xc
c00100a8:	c3                   	ret    
c00100a9:	90                   	nop

c00100aa <Pipe::~Pipe()>:
c00100aa:	83 ec 0c             	sub    esp,0xc
c00100ad:	83 ec 0c             	sub    esp,0xc
c00100b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100b4:	e8 cd ff ff ff       	call   c0010086 <Pipe::~Pipe()>
c00100b9:	83 c4 10             	add    esp,0x10
c00100bc:	83 ec 08             	sub    esp,0x8
c00100bf:	6a 20                	push   0x20
c00100c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100c5:	e8 7f 27 00 00       	call   c0012849 <operator delete(void*, unsigned long)>
c00100ca:	83 c4 10             	add    esp,0x10
c00100cd:	83 c4 0c             	add    esp,0xc
c00100d0:	c3                   	ret    
c00100d1:	90                   	nop

c00100d2 <Pipe::read(unsigned long long, void*, int*)>:
c00100d2:	55                   	push   ebp
c00100d3:	57                   	push   edi
c00100d4:	56                   	push   esi
c00100d5:	53                   	push   ebx
c00100d6:	83 ec 1c             	sub    esp,0x1c
c00100d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00100dd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00100e1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00100e5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00100e8:	89 c8                	mov    eax,ecx
c00100ea:	99                   	cdq    
c00100eb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00100ef:	74 19                	je     c001010a <Pipe::read(unsigned long long, void*, int*)+0x38>
c00100f1:	39 f9                	cmp    ecx,edi
c00100f3:	89 d1                	mov    ecx,edx
c00100f5:	19 f1                	sbb    ecx,esi
c00100f7:	73 11                	jae    c001010a <Pipe::read(unsigned long long, void*, int*)+0x38>
c00100f9:	e8 30 d1 00 00       	call   c001d22e <lockScheduler()>
c00100fe:	e8 67 d4 00 00       	call   c001d56a <schedule()>
c0010103:	e8 28 d1 00 00       	call   c001d230 <unlockScheduler()>
c0010108:	eb db                	jmp    c00100e5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c001010a:	39 f8                	cmp    eax,edi
c001010c:	89 d1                	mov    ecx,edx
c001010e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010112:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010116:	19 f1                	sbb    ecx,esi
c0010118:	73 08                	jae    c0010122 <Pipe::read(unsigned long long, void*, int*)+0x50>
c001011a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001011e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010122:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010125:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010128:	29 c6                	sub    esi,eax
c001012a:	89 f1                	mov    ecx,esi
c001012c:	c1 f9 1f             	sar    ecx,0x1f
c001012f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010133:	89 ca                	mov    edx,ecx
c0010135:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010139:	19 d1                	sbb    ecx,edx
c001013b:	73 04                	jae    c0010141 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c001013d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010141:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010145:	89 fd                	mov    ebp,edi
c0010147:	29 f5                	sub    ebp,esi
c0010149:	85 f6                	test   esi,esi
c001014b:	74 12                	je     c001015f <Pipe::read(unsigned long long, void*, int*)+0x8d>
c001014d:	52                   	push   edx
c001014e:	56                   	push   esi
c001014f:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010152:	50                   	push   eax
c0010153:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010157:	e8 44 05 ff ff       	call   c00006a0 <memcpy>
c001015c:	83 c4 10             	add    esp,0x10
c001015f:	85 ed                	test   ebp,ebp
c0010161:	74 12                	je     c0010175 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c0010163:	50                   	push   eax
c0010164:	55                   	push   ebp
c0010165:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010168:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c001016c:	56                   	push   esi
c001016d:	e8 2e 05 ff ff       	call   c00006a0 <memcpy>
c0010172:	83 c4 10             	add    esp,0x10
c0010175:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010178:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001017b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001017e:	99                   	cdq    
c001017f:	89 f7                	mov    edi,esi
c0010181:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010185:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010189:	c1 ff 1f             	sar    edi,0x1f
c001018c:	57                   	push   edi
c001018d:	56                   	push   esi
c001018e:	52                   	push   edx
c001018f:	50                   	push   eax
c0010190:	e8 07 58 01 00       	call   c002599c <__umoddi3>
c0010195:	83 c4 10             	add    esp,0x10
c0010198:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001019b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00101a0:	75 10                	jne    c00101b2 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00101a2:	83 ec 0c             	sub    esp,0xc
c00101a5:	68 59 92 02 c0       	push   0xc0029259
c00101aa:	e8 d0 9a 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c00101af:	83 c4 10             	add    esp,0x10
c00101b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00101b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101ba:	89 10                	mov    DWORD PTR [eax],edx
c00101bc:	83 c4 1c             	add    esp,0x1c
c00101bf:	31 c0                	xor    eax,eax
c00101c1:	5b                   	pop    ebx
c00101c2:	5e                   	pop    esi
c00101c3:	5f                   	pop    edi
c00101c4:	5d                   	pop    ebp
c00101c5:	c3                   	ret    

c00101c6 <Pipe::write(unsigned long long, void*, int*)>:
c00101c6:	55                   	push   ebp
c00101c7:	57                   	push   edi
c00101c8:	56                   	push   esi
c00101c9:	53                   	push   ebx
c00101ca:	83 ec 1c             	sub    esp,0x1c
c00101cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00101d1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00101d5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00101d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00101dc:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00101df:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00101e2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00101e6:	89 de                	mov    esi,ebx
c00101e8:	89 df                	mov    edi,ebx
c00101ea:	c1 ff 1f             	sar    edi,0x1f
c00101ed:	01 c6                	add    esi,eax
c00101ef:	89 c8                	mov    eax,ecx
c00101f1:	11 d7                	adc    edi,edx
c00101f3:	99                   	cdq    
c00101f4:	39 f1                	cmp    ecx,esi
c00101f6:	89 d0                	mov    eax,edx
c00101f8:	19 f8                	sbb    eax,edi
c00101fa:	b8 01 00 00 00       	mov    eax,0x1
c00101ff:	0f 82 80 00 00 00    	jb     c0010285 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010205:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010208:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001020b:	01 d8                	add    eax,ebx
c001020d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010211:	99                   	cdq    
c0010212:	f7 f9                	idiv   ecx
c0010214:	29 d1                	sub    ecx,edx
c0010216:	89 d7                	mov    edi,edx
c0010218:	89 c8                	mov    eax,ecx
c001021a:	99                   	cdq    
c001021b:	39 ce                	cmp    esi,ecx
c001021d:	19 d3                	sbb    ebx,edx
c001021f:	bb 00 00 00 00       	mov    ebx,0x0
c0010224:	72 04                	jb     c001022a <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010226:	89 f3                	mov    ebx,esi
c0010228:	29 cb                	sub    ebx,ecx
c001022a:	89 f1                	mov    ecx,esi
c001022c:	29 d9                	sub    ecx,ebx
c001022e:	74 1a                	je     c001024a <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010230:	52                   	push   edx
c0010231:	51                   	push   ecx
c0010232:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010236:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001023a:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001023d:	57                   	push   edi
c001023e:	e8 5d 04 ff ff       	call   c00006a0 <memcpy>
c0010243:	83 c4 10             	add    esp,0x10
c0010246:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001024a:	85 db                	test   ebx,ebx
c001024c:	74 12                	je     c0010260 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c001024e:	50                   	push   eax
c001024f:	53                   	push   ebx
c0010250:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010254:	51                   	push   ecx
c0010255:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010258:	e8 43 04 ff ff       	call   c00006a0 <memcpy>
c001025d:	83 c4 10             	add    esp,0x10
c0010260:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010263:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010268:	75 10                	jne    c001027a <Pipe::write(unsigned long long, void*, int*)+0xb4>
c001026a:	83 ec 0c             	sub    esp,0xc
c001026d:	68 75 92 02 c0       	push   0xc0029275
c0010272:	e8 08 9a 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c0010277:	83 c4 10             	add    esp,0x10
c001027a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001027e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010281:	89 38                	mov    DWORD PTR [eax],edi
c0010283:	31 c0                	xor    eax,eax
c0010285:	83 c4 1c             	add    esp,0x1c
c0010288:	5b                   	pop    ebx
c0010289:	5e                   	pop    esi
c001028a:	5f                   	pop    edi
c001028b:	5d                   	pop    ebp
c001028c:	c3                   	ret    
c001028d:	90                   	nop

c001028e <Pipe::Pipe(int)>:
c001028e:	83 ec 0c             	sub    esp,0xc
c0010291:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010295:	83 ec 08             	sub    esp,0x8
c0010298:	6a 00                	push   0x0
c001029a:	50                   	push   eax
c001029b:	e8 56 12 00 00       	call   c00114f6 <UnixFile::UnixFile(int)>
c00102a0:	83 c4 10             	add    esp,0x10
c00102a3:	ba 9c 92 02 c0       	mov    edx,0xc002929c
c00102a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ac:	89 10                	mov    DWORD PTR [eax],edx
c00102ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00102b6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00102b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102bd:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00102c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102c8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00102cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102d3:	83 ec 0c             	sub    esp,0xc
c00102d6:	50                   	push   eax
c00102d7:	e8 7e f3 ff ff       	call   c000f65a <malloc>
c00102dc:	83 c4 10             	add    esp,0x10
c00102df:	89 c2                	mov    edx,eax
c00102e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102e5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00102e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ec:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00102f0:	90                   	nop
c00102f1:	83 c4 0c             	add    esp,0xc
c00102f4:	c3                   	ret    
c00102f5:	90                   	nop

c00102f6 <VgaText::isAtty()>:
c00102f6:	b0 01                	mov    al,0x1
c00102f8:	c3                   	ret    
c00102f9:	90                   	nop

c00102fa <VgaText::~VgaText()>:
c00102fa:	83 ec 0c             	sub    esp,0xc
c00102fd:	ba 58 93 02 c0       	mov    edx,0xc0029358
c0010302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010306:	89 10                	mov    DWORD PTR [eax],edx
c0010308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001030c:	83 ec 0c             	sub    esp,0xc
c001030f:	50                   	push   eax
c0010310:	e8 c3 13 00 00       	call   c00116d8 <UnixFile::~UnixFile()>
c0010315:	83 c4 10             	add    esp,0x10
c0010318:	90                   	nop
c0010319:	83 c4 0c             	add    esp,0xc
c001031c:	c3                   	ret    
c001031d:	90                   	nop

c001031e <VgaText::~VgaText()>:
c001031e:	83 ec 0c             	sub    esp,0xc
c0010321:	83 ec 0c             	sub    esp,0xc
c0010324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010328:	e8 cd ff ff ff       	call   c00102fa <VgaText::~VgaText()>
c001032d:	83 c4 10             	add    esp,0x10
c0010330:	83 ec 08             	sub    esp,0x8
c0010333:	68 60 12 00 00       	push   0x1260
c0010338:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001033c:	e8 08 25 00 00       	call   c0012849 <operator delete(void*, unsigned long)>
c0010341:	83 c4 10             	add    esp,0x10
c0010344:	83 c4 0c             	add    esp,0xc
c0010347:	c3                   	ret    

c0010348 <VgaText::read(unsigned long long, void*, int*)>:
c0010348:	83 ec 10             	sub    esp,0x10
c001034b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001034f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010357:	e8 39 58 00 00       	call   c0015b95 <readKeyboard(VgaText*, char*, unsigned long)>
c001035c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010360:	89 02                	mov    DWORD PTR [edx],eax
c0010362:	31 c0                	xor    eax,eax
c0010364:	83 c4 1c             	add    esp,0x1c
c0010367:	c3                   	ret    

c0010368 <setTerminalScrollLock(bool)>:
c0010368:	c3                   	ret    

c0010369 <addToTerminalCycle(VgaText*)>:
c0010369:	8b 15 c0 d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d1c0
c001036f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010373:	85 d2                	test   edx,edx
c0010375:	75 0c                	jne    c0010383 <addToTerminalCycle(VgaText*)+0x1a>
c0010377:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c001037d:	a3 c0 d1 02 c0       	mov    ds:0xc002d1c0,eax
c0010382:	c3                   	ret    
c0010383:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010389:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c001038f:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010395:	c3                   	ret    

c0010396 <installVgaTextImplementation()>:
c0010396:	83 ec 10             	sub    esp,0x10
c0010399:	6a 20                	push   0x20
c001039b:	6a 00                	push   0x0
c001039d:	68 a0 d1 02 c0       	push   0xc002d1a0
c00103a2:	e8 1d 03 ff ff       	call   c00006c4 <memset>
c00103a7:	83 c4 1c             	add    esp,0x1c
c00103aa:	c3                   	ret    

c00103ab <scrollTerminalScrollLock(int)>:
c00103ab:	c3                   	ret    

c00103ac <VgaText::load()>:
c00103ac:	53                   	push   ebx
c00103ad:	31 c0                	xor    eax,eax
c00103af:	83 ec 58             	sub    esp,0x58
c00103b2:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00103b6:	89 e2                	mov    edx,esp
c00103b8:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00103bc:	40                   	inc    eax
c00103bd:	83 f8 50             	cmp    eax,0x50
c00103c0:	75 f6                	jne    c00103b8 <VgaText::load()+0xc>
c00103c2:	31 c0                	xor    eax,eax
c00103c4:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00103cb:	84 c9                	test   cl,cl
c00103cd:	74 06                	je     c00103d5 <VgaText::load()+0x29>
c00103cf:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00103d2:	40                   	inc    eax
c00103d3:	eb ef                	jmp    c00103c4 <VgaText::load()+0x18>
c00103d5:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00103db:	85 c0                	test   eax,eax
c00103dd:	74 09                	je     c00103e8 <VgaText::load()+0x3c>
c00103df:	51                   	push   ecx
c00103e0:	51                   	push   ecx
c00103e1:	52                   	push   edx
c00103e2:	53                   	push   ebx
c00103e3:	ff d0                	call   eax
c00103e5:	83 c4 10             	add    esp,0x10
c00103e8:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00103ee:	85 c0                	test   eax,eax
c00103f0:	74 09                	je     c00103fb <VgaText::load()+0x4f>
c00103f2:	83 ec 0c             	sub    esp,0xc
c00103f5:	53                   	push   ebx
c00103f6:	ff d0                	call   eax
c00103f8:	83 c4 10             	add    esp,0x10
c00103fb:	83 c4 58             	add    esp,0x58
c00103fe:	5b                   	pop    ebx
c00103ff:	c3                   	ret    

c0010400 <VgaText::updateCursor()>:
c0010400:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010404:	39 05 c4 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1c4,eax
c001040a:	75 0c                	jne    c0010418 <VgaText::updateCursor()+0x18>
c001040c:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010412:	85 c0                	test   eax,eax
c0010414:	74 02                	je     c0010418 <VgaText::updateCursor()+0x18>
c0010416:	ff e0                	jmp    eax
c0010418:	c3                   	ret    
c0010419:	90                   	nop

c001041a <VgaText::showCursor(bool)>:
c001041a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001041e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010422:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010428:	c3                   	ret    
c0010429:	90                   	nop

c001042a <VgaText::disableBlink(bool)>:
c001042a:	56                   	push   esi
c001042b:	53                   	push   ebx
c001042c:	51                   	push   ecx
c001042d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010431:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010435:	39 1d c4 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1c4,ebx
c001043b:	75 18                	jne    c0010455 <VgaText::disableBlink(bool)+0x2b>
c001043d:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010443:	85 c0                	test   eax,eax
c0010445:	74 0e                	je     c0010455 <VgaText::disableBlink(bool)+0x2b>
c0010447:	89 f1                	mov    ecx,esi
c0010449:	52                   	push   edx
c001044a:	52                   	push   edx
c001044b:	0f b6 d1             	movzx  edx,cl
c001044e:	52                   	push   edx
c001044f:	53                   	push   ebx
c0010450:	ff d0                	call   eax
c0010452:	83 c4 10             	add    esp,0x10
c0010455:	89 f0                	mov    eax,esi
c0010457:	83 f0 01             	xor    eax,0x1
c001045a:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010460:	58                   	pop    eax
c0010461:	5b                   	pop    ebx
c0010462:	5e                   	pop    esi
c0010463:	c3                   	ret    

c0010464 <VgaText::doANSI_SGR(int)>:
c0010464:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001046c:	85 d2                	test   edx,edx
c001046e:	75 14                	jne    c0010484 <VgaText::doANSI_SGR(int)+0x20>
c0010470:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010476:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001047c:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010482:	eb 65                	jmp    c00104e9 <VgaText::doANSI_SGR(int)+0x85>
c0010484:	83 fa 07             	cmp    edx,0x7
c0010487:	75 14                	jne    c001049d <VgaText::doANSI_SGR(int)+0x39>
c0010489:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c001048f:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010495:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c001049b:	eb 4c                	jmp    c00104e9 <VgaText::doANSI_SGR(int)+0x85>
c001049d:	83 fa 1b             	cmp    edx,0x1b
c00104a0:	74 ce                	je     c0010470 <VgaText::doANSI_SGR(int)+0xc>
c00104a2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00104a5:	83 f9 07             	cmp    ecx,0x7
c00104a8:	77 09                	ja     c00104b3 <VgaText::doANSI_SGR(int)+0x4f>
c00104aa:	8b 14 8d 40 c0 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3fc0]
c00104b1:	eb 20                	jmp    c00104d3 <VgaText::doANSI_SGR(int)+0x6f>
c00104b3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00104b6:	83 f9 07             	cmp    ecx,0x7
c00104b9:	77 09                	ja     c00104c4 <VgaText::doANSI_SGR(int)+0x60>
c00104bb:	8b 14 8d 40 c0 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3fc0]
c00104c2:	eb 25                	jmp    c00104e9 <VgaText::doANSI_SGR(int)+0x85>
c00104c4:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00104c7:	83 f9 07             	cmp    ecx,0x7
c00104ca:	77 0e                	ja     c00104da <VgaText::doANSI_SGR(int)+0x76>
c00104cc:	8b 14 95 f8 be 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4108]
c00104d3:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00104d9:	c3                   	ret    
c00104da:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00104dd:	83 f9 07             	cmp    ecx,0x7
c00104e0:	77 0d                	ja     c00104ef <VgaText::doANSI_SGR(int)+0x8b>
c00104e2:	8b 14 95 d0 be 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4130]
c00104e9:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00104ef:	c3                   	ret    

c00104f0 <VgaText::setDefaultBgColour(VgaColour)>:
c00104f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104f8:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00104fe:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010504:	c3                   	ret    
c0010505:	90                   	nop

c0010506 <VgaText::setDefaultFgColour(VgaColour)>:
c0010506:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001050a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001050e:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010514:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001051a:	c3                   	ret    
c001051b:	90                   	nop

c001051c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001051c:	53                   	push   ebx
c001051d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010521:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010525:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010529:	51                   	push   ecx
c001052a:	e8 c1 ff ff ff       	call   c00104f0 <VgaText::setDefaultBgColour(VgaColour)>
c001052f:	58                   	pop    eax
c0010530:	5a                   	pop    edx
c0010531:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010535:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010539:	5b                   	pop    ebx
c001053a:	eb ca                	jmp    c0010506 <VgaText::setDefaultFgColour(VgaColour)>

c001053c <VgaText::combineColours(unsigned char, unsigned char)>:
c001053c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010540:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010545:	83 e0 0f             	and    eax,0xf
c0010548:	c1 e2 04             	shl    edx,0x4
c001054b:	09 d0                	or     eax,edx
c001054d:	c3                   	ret    

c001054e <VgaText::scrollScreen()>:
c001054e:	57                   	push   edi
c001054f:	56                   	push   esi
c0010550:	be 01 00 00 00       	mov    esi,0x1
c0010555:	53                   	push   ebx
c0010556:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001055a:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010560:	31 ff                	xor    edi,edi
c0010562:	01 d9                	add    ecx,ebx
c0010564:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010567:	83 fe 17             	cmp    esi,0x17
c001056a:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010570:	75 28                	jne    c001059a <VgaText::scrollScreen()+0x4c>
c0010572:	f7 c7 01 00 00 00    	test   edi,0x1
c0010578:	74 1c                	je     c0010596 <VgaText::scrollScreen()+0x48>
c001057a:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010581:	50                   	push   eax
c0010582:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010589:	50                   	push   eax
c001058a:	e8 ad ff ff ff       	call   c001053c <VgaText::combineColours(unsigned char, unsigned char)>
c001058f:	5a                   	pop    edx
c0010590:	5a                   	pop    edx
c0010591:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010594:	eb 04                	jmp    c001059a <VgaText::scrollScreen()+0x4c>
c0010596:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c001059a:	47                   	inc    edi
c001059b:	41                   	inc    ecx
c001059c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00105a2:	75 c0                	jne    c0010564 <VgaText::scrollScreen()+0x16>
c00105a4:	46                   	inc    esi
c00105a5:	83 fe 18             	cmp    esi,0x18
c00105a8:	75 b0                	jne    c001055a <VgaText::scrollScreen()+0xc>
c00105aa:	39 1d c4 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1c4,ebx
c00105b0:	75 24                	jne    c00105d6 <VgaText::scrollScreen()+0x88>
c00105b2:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00105b9:	74 08                	je     c00105c3 <VgaText::scrollScreen()+0x75>
c00105bb:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00105c1:	eb 13                	jmp    c00105d6 <VgaText::scrollScreen()+0x88>
c00105c3:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00105c9:	85 c0                	test   eax,eax
c00105cb:	74 09                	je     c00105d6 <VgaText::scrollScreen()+0x88>
c00105cd:	83 ec 0c             	sub    esp,0xc
c00105d0:	53                   	push   ebx
c00105d1:	ff d0                	call   eax
c00105d3:	83 c4 10             	add    esp,0x10
c00105d6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00105da:	5b                   	pop    ebx
c00105db:	5e                   	pop    esi
c00105dc:	5f                   	pop    edi
c00105dd:	e9 1e fe ff ff       	jmp    c0010400 <VgaText::updateCursor()>

c00105e2 <VgaText::combineCharAndColour(char, unsigned char)>:
c00105e2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00105e7:	c1 e0 08             	shl    eax,0x8
c00105ea:	89 c2                	mov    edx,eax
c00105ec:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00105f1:	09 d0                	or     eax,edx
c00105f3:	c3                   	ret    

c00105f4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00105f4:	53                   	push   ebx
c00105f5:	83 ec 08             	sub    esp,0x8
c00105f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00105fc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010601:	50                   	push   eax
c0010602:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010607:	50                   	push   eax
c0010608:	e8 2f ff ff ff       	call   c001053c <VgaText::combineColours(unsigned char, unsigned char)>
c001060d:	5a                   	pop    edx
c001060e:	0f b6 c0             	movzx  eax,al
c0010611:	5b                   	pop    ebx
c0010612:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010617:	50                   	push   eax
c0010618:	53                   	push   ebx
c0010619:	e8 c4 ff ff ff       	call   c00105e2 <VgaText::combineCharAndColour(char, unsigned char)>
c001061e:	5a                   	pop    edx
c001061f:	5a                   	pop    edx
c0010620:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010626:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001062a:	0f b7 d2             	movzx  edx,dx
c001062d:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010632:	39 0d c4 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1c4,ecx
c0010638:	75 14                	jne    c001064e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001063a:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010640:	85 c0                	test   eax,eax
c0010642:	74 0a                	je     c001064e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010644:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010648:	83 c4 08             	add    esp,0x8
c001064b:	5b                   	pop    ebx
c001064c:	ff e0                	jmp    eax
c001064e:	83 c4 08             	add    esp,0x8
c0010651:	5b                   	pop    ebx
c0010652:	c3                   	ret    
c0010653:	90                   	nop

c0010654 <VgaText::getCursorX()>:
c0010654:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010658:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c001065e:	c3                   	ret    
c001065f:	90                   	nop

c0010660 <VgaText::getCursorY()>:
c0010660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010664:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c001066a:	c3                   	ret    
c001066b:	90                   	nop

c001066c <VgaText::setCursor(int, int)>:
c001066c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010670:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010674:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c001067a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001067e:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010684:	e9 77 fd ff ff       	jmp    c0010400 <VgaText::updateCursor()>
c0010689:	90                   	nop

c001068a <VgaText::setCursorX(int)>:
c001068a:	83 ec 10             	sub    esp,0x10
c001068d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010691:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010697:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001069b:	50                   	push   eax
c001069c:	e8 cb ff ff ff       	call   c001066c <VgaText::setCursor(int, int)>
c00106a1:	83 c4 1c             	add    esp,0x1c
c00106a4:	c3                   	ret    
c00106a5:	90                   	nop

c00106a6 <VgaText::setCursorY(int)>:
c00106a6:	83 ec 10             	sub    esp,0x10
c00106a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00106ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00106b1:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00106b7:	50                   	push   eax
c00106b8:	e8 af ff ff ff       	call   c001066c <VgaText::setCursor(int, int)>
c00106bd:	83 c4 1c             	add    esp,0x1c
c00106c0:	c3                   	ret    
c00106c1:	90                   	nop

c00106c2 <VgaText::incrementCursor(bool)>:
c00106c2:	56                   	push   esi
c00106c3:	53                   	push   ebx
c00106c4:	51                   	push   ecx
c00106c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106c9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00106cd:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00106d3:	40                   	inc    eax
c00106d4:	83 f8 50             	cmp    eax,0x50
c00106d7:	74 08                	je     c00106e1 <VgaText::incrementCursor(bool)+0x1f>
c00106d9:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00106df:	eb 33                	jmp    c0010714 <VgaText::incrementCursor(bool)+0x52>
c00106e1:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00106e7:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00106f1:	8d 50 01             	lea    edx,[eax+0x1]
c00106f4:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00106fa:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010700:	75 12                	jne    c0010714 <VgaText::incrementCursor(bool)+0x52>
c0010702:	83 ec 0c             	sub    esp,0xc
c0010705:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001070b:	53                   	push   ebx
c001070c:	e8 3d fe ff ff       	call   c001054e <VgaText::scrollScreen()>
c0010711:	83 c4 10             	add    esp,0x10
c0010714:	89 f0                	mov    eax,esi
c0010716:	84 c0                	test   al,al
c0010718:	74 0c                	je     c0010726 <VgaText::incrementCursor(bool)+0x64>
c001071a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001071e:	5a                   	pop    edx
c001071f:	5b                   	pop    ebx
c0010720:	5e                   	pop    esi
c0010721:	e9 da fc ff ff       	jmp    c0010400 <VgaText::updateCursor()>
c0010726:	58                   	pop    eax
c0010727:	5b                   	pop    ebx
c0010728:	5e                   	pop    esi
c0010729:	c3                   	ret    

c001072a <VgaText::updateRAMUsageDisplay(int)>:
c001072a:	56                   	push   esi
c001072b:	8b 35 20 c0 02 c0    	mov    esi,DWORD PTR ds:0xc002c020
c0010731:	53                   	push   ebx
c0010732:	bb 0a 00 00 00       	mov    ebx,0xa
c0010737:	6a 0f                	push   0xf
c0010739:	6a 00                	push   0x0
c001073b:	e8 fc fd ff ff       	call   c001053c <VgaText::combineColours(unsigned char, unsigned char)>
c0010740:	5a                   	pop    edx
c0010741:	59                   	pop    ecx
c0010742:	0f b6 c8             	movzx  ecx,al
c0010745:	51                   	push   ecx
c0010746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001074a:	99                   	cdq    
c001074b:	f7 fb                	idiv   ebx
c001074d:	89 d3                	mov    ebx,edx
c001074f:	83 c0 30             	add    eax,0x30
c0010752:	83 c3 30             	add    ebx,0x30
c0010755:	0f be c0             	movsx  eax,al
c0010758:	0f b6 db             	movzx  ebx,bl
c001075b:	50                   	push   eax
c001075c:	e8 81 fe ff ff       	call   c00105e2 <VgaText::combineCharAndColour(char, unsigned char)>
c0010761:	5a                   	pop    edx
c0010762:	5a                   	pop    edx
c0010763:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c001076a:	51                   	push   ecx
c001076b:	53                   	push   ebx
c001076c:	e8 71 fe ff ff       	call   c00105e2 <VgaText::combineCharAndColour(char, unsigned char)>
c0010771:	5b                   	pop    ebx
c0010772:	5a                   	pop    edx
c0010773:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c001077a:	51                   	push   ecx
c001077b:	6a 25                	push   0x25
c001077d:	e8 60 fe ff ff       	call   c00105e2 <VgaText::combineCharAndColour(char, unsigned char)>
c0010782:	59                   	pop    ecx
c0010783:	5b                   	pop    ebx
c0010784:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c001078b:	5b                   	pop    ebx
c001078c:	5e                   	pop    esi
c001078d:	c3                   	ret    

c001078e <VgaText::updateDiskUsage()>:
c001078e:	55                   	push   ebp
c001078f:	bd 10 27 00 00       	mov    ebp,0x2710
c0010794:	57                   	push   edi
c0010795:	8b 3d 20 c0 02 c0    	mov    edi,DWORD PTR ds:0xc002c020
c001079b:	56                   	push   esi
c001079c:	53                   	push   ebx
c001079d:	6a 0f                	push   0xf
c001079f:	6a 00                	push   0x0
c00107a1:	e8 96 fd ff ff       	call   c001053c <VgaText::combineColours(unsigned char, unsigned char)>
c00107a6:	5a                   	pop    edx
c00107a7:	0f b6 d8             	movzx  ebx,al
c00107aa:	59                   	pop    ecx
c00107ab:	8b 35 28 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f428
c00107b1:	53                   	push   ebx
c00107b2:	b9 0a 00 00 00       	mov    ecx,0xa
c00107b7:	89 f0                	mov    eax,esi
c00107b9:	99                   	cdq    
c00107ba:	f7 fd                	idiv   ebp
c00107bc:	99                   	cdq    
c00107bd:	f7 f9                	idiv   ecx
c00107bf:	8d 42 30             	lea    eax,[edx+0x30]
c00107c2:	0f b6 c0             	movzx  eax,al
c00107c5:	50                   	push   eax
c00107c6:	e8 17 fe ff ff       	call   c00105e2 <VgaText::combineCharAndColour(char, unsigned char)>
c00107cb:	5d                   	pop    ebp
c00107cc:	bd e8 03 00 00       	mov    ebp,0x3e8
c00107d1:	5a                   	pop    edx
c00107d2:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00107d6:	53                   	push   ebx
c00107d7:	89 f0                	mov    eax,esi
c00107d9:	99                   	cdq    
c00107da:	f7 fd                	idiv   ebp
c00107dc:	99                   	cdq    
c00107dd:	f7 f9                	idiv   ecx
c00107df:	8d 42 30             	lea    eax,[edx+0x30]
c00107e2:	0f b6 c0             	movzx  eax,al
c00107e5:	50                   	push   eax
c00107e6:	e8 f7 fd ff ff       	call   c00105e2 <VgaText::combineCharAndColour(char, unsigned char)>
c00107eb:	5d                   	pop    ebp
c00107ec:	bd 64 00 00 00       	mov    ebp,0x64
c00107f1:	5a                   	pop    edx
c00107f2:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00107f9:	53                   	push   ebx
c00107fa:	89 f0                	mov    eax,esi
c00107fc:	99                   	cdq    
c00107fd:	f7 fd                	idiv   ebp
c00107ff:	99                   	cdq    
c0010800:	f7 f9                	idiv   ecx
c0010802:	8d 42 30             	lea    eax,[edx+0x30]
c0010805:	0f b6 c0             	movzx  eax,al
c0010808:	50                   	push   eax
c0010809:	e8 d4 fd ff ff       	call   c00105e2 <VgaText::combineCharAndColour(char, unsigned char)>
c001080e:	5d                   	pop    ebp
c001080f:	5a                   	pop    edx
c0010810:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010817:	53                   	push   ebx
c0010818:	89 f0                	mov    eax,esi
c001081a:	99                   	cdq    
c001081b:	f7 f9                	idiv   ecx
c001081d:	89 d6                	mov    esi,edx
c001081f:	99                   	cdq    
c0010820:	f7 f9                	idiv   ecx
c0010822:	8d 42 30             	lea    eax,[edx+0x30]
c0010825:	0f b6 c0             	movzx  eax,al
c0010828:	50                   	push   eax
c0010829:	e8 b4 fd ff ff       	call   c00105e2 <VgaText::combineCharAndColour(char, unsigned char)>
c001082e:	5d                   	pop    ebp
c001082f:	5a                   	pop    edx
c0010830:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010837:	53                   	push   ebx
c0010838:	8d 46 30             	lea    eax,[esi+0x30]
c001083b:	0f b6 f0             	movzx  esi,al
c001083e:	56                   	push   esi
c001083f:	e8 9e fd ff ff       	call   c00105e2 <VgaText::combineCharAndColour(char, unsigned char)>
c0010844:	5e                   	pop    esi
c0010845:	8b 35 24 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f424
c001084b:	5d                   	pop    ebp
c001084c:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010853:	bd 10 27 00 00       	mov    ebp,0x2710
c0010858:	53                   	push   ebx
c0010859:	89 f0                	mov    eax,esi
c001085b:	99                   	cdq    
c001085c:	f7 fd                	idiv   ebp
c001085e:	99                   	cdq    
c001085f:	f7 f9                	idiv   ecx
c0010861:	8d 42 30             	lea    eax,[edx+0x30]
c0010864:	0f b6 c0             	movzx  eax,al
c0010867:	50                   	push   eax
c0010868:	e8 75 fd ff ff       	call   c00105e2 <VgaText::combineCharAndColour(char, unsigned char)>
c001086d:	5a                   	pop    edx
c001086e:	5d                   	pop    ebp
c001086f:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010876:	bd e8 03 00 00       	mov    ebp,0x3e8
c001087b:	53                   	push   ebx
c001087c:	89 f0                	mov    eax,esi
c001087e:	99                   	cdq    
c001087f:	f7 fd                	idiv   ebp
c0010881:	99                   	cdq    
c0010882:	f7 f9                	idiv   ecx
c0010884:	8d 42 30             	lea    eax,[edx+0x30]
c0010887:	0f b6 c0             	movzx  eax,al
c001088a:	50                   	push   eax
c001088b:	e8 52 fd ff ff       	call   c00105e2 <VgaText::combineCharAndColour(char, unsigned char)>
c0010890:	5a                   	pop    edx
c0010891:	5d                   	pop    ebp
c0010892:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010899:	bd 64 00 00 00       	mov    ebp,0x64
c001089e:	53                   	push   ebx
c001089f:	89 f0                	mov    eax,esi
c00108a1:	99                   	cdq    
c00108a2:	f7 fd                	idiv   ebp
c00108a4:	99                   	cdq    
c00108a5:	f7 f9                	idiv   ecx
c00108a7:	83 c2 30             	add    edx,0x30
c00108aa:	0f b6 d2             	movzx  edx,dl
c00108ad:	52                   	push   edx
c00108ae:	e8 2f fd ff ff       	call   c00105e2 <VgaText::combineCharAndColour(char, unsigned char)>
c00108b3:	5a                   	pop    edx
c00108b4:	5d                   	pop    ebp
c00108b5:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c00108bc:	53                   	push   ebx
c00108bd:	89 f0                	mov    eax,esi
c00108bf:	99                   	cdq    
c00108c0:	f7 f9                	idiv   ecx
c00108c2:	89 d6                	mov    esi,edx
c00108c4:	99                   	cdq    
c00108c5:	f7 f9                	idiv   ecx
c00108c7:	8d 42 30             	lea    eax,[edx+0x30]
c00108ca:	0f b6 c0             	movzx  eax,al
c00108cd:	50                   	push   eax
c00108ce:	e8 0f fd ff ff       	call   c00105e2 <VgaText::combineCharAndColour(char, unsigned char)>
c00108d3:	5a                   	pop    edx
c00108d4:	59                   	pop    ecx
c00108d5:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c00108dc:	53                   	push   ebx
c00108dd:	8d 46 30             	lea    eax,[esi+0x30]
c00108e0:	0f b6 f0             	movzx  esi,al
c00108e3:	56                   	push   esi
c00108e4:	e8 f9 fc ff ff       	call   c00105e2 <VgaText::combineCharAndColour(char, unsigned char)>
c00108e9:	5b                   	pop    ebx
c00108ea:	5e                   	pop    esi
c00108eb:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c00108f2:	5b                   	pop    ebx
c00108f3:	5e                   	pop    esi
c00108f4:	5f                   	pop    edi
c00108f5:	5d                   	pop    ebp
c00108f6:	c3                   	ret    
c00108f7:	90                   	nop

c00108f8 <VgaText::updateTitle()>:
c00108f8:	53                   	push   ebx
c00108f9:	31 c0                	xor    eax,eax
c00108fb:	83 ec 58             	sub    esp,0x58
c00108fe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010902:	89 e1                	mov    ecx,esp
c0010904:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010908:	40                   	inc    eax
c0010909:	83 f8 50             	cmp    eax,0x50
c001090c:	75 f6                	jne    c0010904 <VgaText::updateTitle()+0xc>
c001090e:	31 c0                	xor    eax,eax
c0010910:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010917:	84 db                	test   bl,bl
c0010919:	74 06                	je     c0010921 <VgaText::updateTitle()+0x29>
c001091b:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c001091e:	40                   	inc    eax
c001091f:	eb ef                	jmp    c0010910 <VgaText::updateTitle()+0x18>
c0010921:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010927:	85 c0                	test   eax,eax
c0010929:	74 09                	je     c0010934 <VgaText::updateTitle()+0x3c>
c001092b:	53                   	push   ebx
c001092c:	53                   	push   ebx
c001092d:	51                   	push   ecx
c001092e:	52                   	push   edx
c001092f:	ff d0                	call   eax
c0010931:	83 c4 10             	add    esp,0x10
c0010934:	e8 55 fe ff ff       	call   c001078e <VgaText::updateDiskUsage()>
c0010939:	83 c4 58             	add    esp,0x58
c001093c:	5b                   	pop    ebx
c001093d:	c3                   	ret    

c001093e <VgaText::setTitleTextColour(VgaColour)>:
c001093e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010942:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010946:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c001094c:	eb aa                	jmp    c00108f8 <VgaText::updateTitle()>

c001094e <VgaText::setTitleColour(VgaColour)>:
c001094e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010952:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010956:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c001095c:	eb 9a                	jmp    c00108f8 <VgaText::updateTitle()>

c001095e <VgaText::setTitle(char*)>:
c001095e:	53                   	push   ebx
c001095f:	83 ec 10             	sub    esp,0x10
c0010962:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001096a:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010970:	50                   	push   eax
c0010971:	e8 ed fd fe ff       	call   c0000763 <strcpy>
c0010976:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001097a:	83 c4 18             	add    esp,0x18
c001097d:	5b                   	pop    ebx
c001097e:	e9 75 ff ff ff       	jmp    c00108f8 <VgaText::updateTitle()>
c0010983:	90                   	nop

c0010984 <VgaText::decrementCursor(bool)>:
c0010984:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010988:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001098c:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010992:	85 c0                	test   eax,eax
c0010994:	74 07                	je     c001099d <VgaText::decrementCursor(bool)+0x19>
c0010996:	48                   	dec    eax
c0010997:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c001099d:	84 c9                	test   cl,cl
c001099f:	74 09                	je     c00109aa <VgaText::decrementCursor(bool)+0x26>
c00109a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00109a5:	e9 56 fa ff ff       	jmp    c0010400 <VgaText::updateCursor()>
c00109aa:	c3                   	ret    
c00109ab:	90                   	nop

c00109ac <VgaText::putchar(char, VgaColour, VgaColour)>:
c00109ac:	53                   	push   ebx
c00109ad:	83 ec 08             	sub    esp,0x8
c00109b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00109b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00109bc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00109c0:	3c 07                	cmp    al,0x7
c00109c2:	75 2a                	jne    c00109ee <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c00109c4:	a1 6c d2 02 c0       	mov    eax,ds:0xc002d26c
c00109c9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00109d1:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00109d9:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00109e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00109e5:	83 c4 08             	add    esp,0x8
c00109e8:	5b                   	pop    ebx
c00109e9:	e9 3a 2d 00 00       	jmp    c0013728 <Buzzer::beep(int, int, bool)>
c00109ee:	3c 0d                	cmp    al,0xd
c00109f0:	75 0c                	jne    c00109fe <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c00109f2:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00109fc:	eb 3b                	jmp    c0010a39 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c00109fe:	3c 0a                	cmp    al,0xa
c0010a00:	75 40                	jne    c0010a42 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010a02:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010a08:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010a12:	8d 50 01             	lea    edx,[eax+0x1]
c0010a15:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010a1b:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010a21:	75 12                	jne    c0010a35 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010a23:	83 ec 0c             	sub    esp,0xc
c0010a26:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010a2c:	53                   	push   ebx
c0010a2d:	e8 1c fb ff ff       	call   c001054e <VgaText::scrollScreen()>
c0010a32:	83 c4 10             	add    esp,0x10
c0010a35:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010a39:	83 c4 08             	add    esp,0x8
c0010a3c:	5b                   	pop    ebx
c0010a3d:	e9 be f9 ff ff       	jmp    c0010400 <VgaText::updateCursor()>
c0010a42:	3c 08                	cmp    al,0x8
c0010a44:	75 31                	jne    c0010a77 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010a46:	50                   	push   eax
c0010a47:	50                   	push   eax
c0010a48:	6a 01                	push   0x1
c0010a4a:	53                   	push   ebx
c0010a4b:	e8 34 ff ff ff       	call   c0010984 <VgaText::decrementCursor(bool)>
c0010a50:	5a                   	pop    edx
c0010a51:	59                   	pop    ecx
c0010a52:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010a58:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010a5e:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010a64:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010a6a:	6a 20                	push   0x20
c0010a6c:	53                   	push   ebx
c0010a6d:	e8 82 fb ff ff       	call   c00105f4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a72:	83 c4 28             	add    esp,0x28
c0010a75:	5b                   	pop    ebx
c0010a76:	c3                   	ret    
c0010a77:	83 ec 08             	sub    esp,0x8
c0010a7a:	0f be c0             	movsx  eax,al
c0010a7d:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010a83:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010a89:	51                   	push   ecx
c0010a8a:	52                   	push   edx
c0010a8b:	50                   	push   eax
c0010a8c:	53                   	push   ebx
c0010a8d:	e8 62 fb ff ff       	call   c00105f4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a92:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010a96:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010a9e:	83 c4 28             	add    esp,0x28
c0010aa1:	5b                   	pop    ebx
c0010aa2:	e9 1b fc ff ff       	jmp    c00106c2 <VgaText::incrementCursor(bool)>
c0010aa7:	90                   	nop

c0010aa8 <VgaText::isShowingCursor()>:
c0010aa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aac:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010ab2:	c3                   	ret    
c0010ab3:	90                   	nop

c0010ab4 <VgaText::isBlinkDisabled()>:
c0010ab4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ab8:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010abe:	83 f0 01             	xor    eax,0x1
c0010ac1:	c3                   	ret    

c0010ac2 <VgaText::setCursorHeight(int)>:
c0010ac2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ac6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010aca:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010ad0:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010ad7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010adb:	e9 3a f9 ff ff       	jmp    c001041a <VgaText::showCursor(bool)>

c0010ae0 <VgaText::getCursorHeight()>:
c0010ae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ae4:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010aea:	c3                   	ret    

c0010aeb <setActiveTerminal(VgaText*)>:
c0010aeb:	53                   	push   ebx
c0010aec:	83 ec 08             	sub    esp,0x8
c0010aef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010af3:	85 db                	test   ebx,ebx
c0010af5:	75 11                	jne    c0010b08 <setActiveTerminal(VgaText*)+0x1d>
c0010af7:	c7 44 24 10 b0 92 02 c0 	mov    DWORD PTR [esp+0x10],0xc00292b0
c0010aff:	83 c4 08             	add    esp,0x8
c0010b02:	5b                   	pop    ebx
c0010b03:	e9 77 91 00 00       	jmp    c0019c7f <Krnl::panic(char const*)>
c0010b08:	50                   	push   eax
c0010b09:	50                   	push   eax
c0010b0a:	53                   	push   ebx
c0010b0b:	68 be 92 02 c0       	push   0xc00292be
c0010b10:	e8 14 1e 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0010b15:	a1 c4 d1 02 c0       	mov    eax,ds:0xc002d1c4
c0010b1a:	83 c4 10             	add    esp,0x10
c0010b1d:	85 c0                	test   eax,eax
c0010b1f:	74 0c                	je     c0010b2d <setActiveTerminal(VgaText*)+0x42>
c0010b21:	83 ec 0c             	sub    esp,0xc
c0010b24:	50                   	push   eax
c0010b25:	e8 d6 f8 ff ff       	call   c0010400 <VgaText::updateCursor()>
c0010b2a:	83 c4 10             	add    esp,0x10
c0010b2d:	89 1d c4 d1 02 c0    	mov    DWORD PTR ds:0xc002d1c4,ebx
c0010b33:	51                   	push   ecx
c0010b34:	51                   	push   ecx
c0010b35:	53                   	push   ebx
c0010b36:	68 d6 92 02 c0       	push   0xc00292d6
c0010b3b:	e8 e9 1d 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0010b40:	83 c4 0c             	add    esp,0xc
c0010b43:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010b49:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010b4f:	53                   	push   ebx
c0010b50:	e8 17 fb ff ff       	call   c001066c <VgaText::setCursor(int, int)>
c0010b55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b58:	e8 57 ff ff ff       	call   c0010ab4 <VgaText::isBlinkDisabled()>
c0010b5d:	5a                   	pop    edx
c0010b5e:	0f b6 c0             	movzx  eax,al
c0010b61:	59                   	pop    ecx
c0010b62:	50                   	push   eax
c0010b63:	53                   	push   ebx
c0010b64:	e8 c1 f8 ff ff       	call   c001042a <VgaText::disableBlink(bool)>
c0010b69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b6c:	e8 6f ff ff ff       	call   c0010ae0 <VgaText::getCursorHeight()>
c0010b71:	5a                   	pop    edx
c0010b72:	59                   	pop    ecx
c0010b73:	50                   	push   eax
c0010b74:	53                   	push   ebx
c0010b75:	e8 48 ff ff ff       	call   c0010ac2 <VgaText::setCursorHeight(int)>
c0010b7a:	83 c4 10             	add    esp,0x10
c0010b7d:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010b84:	75 0a                	jne    c0010b90 <setActiveTerminal(VgaText*)+0xa5>
c0010b86:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010b90:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010b94:	83 c4 08             	add    esp,0x8
c0010b97:	5b                   	pop    ebx
c0010b98:	e9 0f f8 ff ff       	jmp    c00103ac <VgaText::load()>

c0010b9d <doTerminalCycle()>:
c0010b9d:	83 ec 18             	sub    esp,0x18
c0010ba0:	a1 c0 d1 02 c0       	mov    eax,ds:0xc002d1c0
c0010ba5:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010bab:	50                   	push   eax
c0010bac:	a3 c0 d1 02 c0       	mov    ds:0xc002d1c0,eax
c0010bb1:	e8 35 ff ff ff       	call   c0010aeb <setActiveTerminal(VgaText*)>
c0010bb6:	83 c4 1c             	add    esp,0x1c
c0010bb9:	c3                   	ret    

c0010bba <VgaText::doUpdate()>:
c0010bba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bbe:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010bc4:	85 c0                	test   eax,eax
c0010bc6:	74 02                	je     c0010bca <VgaText::doUpdate()+0x10>
c0010bc8:	ff e0                	jmp    eax
c0010bca:	c3                   	ret    
c0010bcb:	90                   	nop

c0010bcc <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010bcc:	55                   	push   ebp
c0010bcd:	57                   	push   edi
c0010bce:	56                   	push   esi
c0010bcf:	53                   	push   ebx
c0010bd0:	83 ec 1c             	sub    esp,0x1c
c0010bd3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010bd7:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010bdc:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010be3:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010be6:	50                   	push   eax
c0010be7:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010bec:	50                   	push   eax
c0010bed:	e8 4a f9 ff ff       	call   c001053c <VgaText::combineColours(unsigned char, unsigned char)>
c0010bf2:	59                   	pop    ecx
c0010bf3:	0f b6 c0             	movzx  eax,al
c0010bf6:	5b                   	pop    ebx
c0010bf7:	31 c9                	xor    ecx,ecx
c0010bf9:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010c01:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010c05:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010c0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c0f:	0f b7 db             	movzx  ebx,bx
c0010c12:	01 db                	add    ebx,ebx
c0010c14:	01 fb                	add    ebx,edi
c0010c16:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010c19:	84 c0                	test   al,al
c0010c1b:	0f 84 38 01 00 00    	je     c0010d59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010c21:	3c 0d                	cmp    al,0xd
c0010c23:	75 0f                	jne    c0010c34 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010c25:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010c2f:	e9 1f 01 00 00       	jmp    c0010d53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010c34:	3c 0a                	cmp    al,0xa
c0010c36:	75 5b                	jne    c0010c93 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010c38:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010c3e:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010c48:	8d 48 01             	lea    ecx,[eax+0x1]
c0010c4b:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010c51:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010c57:	75 12                	jne    c0010c6b <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010c59:	83 ec 0c             	sub    esp,0xc
c0010c5c:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010c62:	55                   	push   ebp
c0010c63:	e8 e6 f8 ff ff       	call   c001054e <VgaText::scrollScreen()>
c0010c68:	83 c4 10             	add    esp,0x10
c0010c6b:	83 ec 0c             	sub    esp,0xc
c0010c6e:	55                   	push   ebp
c0010c6f:	e8 8c f7 ff ff       	call   c0010400 <VgaText::updateCursor()>
c0010c74:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010c7c:	83 c4 10             	add    esp,0x10
c0010c7f:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010c85:	31 c9                	xor    ecx,ecx
c0010c87:	0f b7 db             	movzx  ebx,bx
c0010c8a:	01 db                	add    ebx,ebx
c0010c8c:	01 fb                	add    ebx,edi
c0010c8e:	e9 c0 00 00 00       	jmp    c0010d53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010c93:	3c 08                	cmp    al,0x8
c0010c95:	75 4e                	jne    c0010ce5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010c97:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010c9b:	53                   	push   ebx
c0010c9c:	53                   	push   ebx
c0010c9d:	6a 01                	push   0x1
c0010c9f:	55                   	push   ebp
c0010ca0:	e8 df fc ff ff       	call   c0010984 <VgaText::decrementCursor(bool)>
c0010ca5:	58                   	pop    eax
c0010ca6:	5a                   	pop    edx
c0010ca7:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010cad:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010cb3:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010cb9:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010cbf:	6a 20                	push   0x20
c0010cc1:	55                   	push   ebp
c0010cc2:	e8 2d f9 ff ff       	call   c00105f4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cc7:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ccf:	83 c4 20             	add    esp,0x20
c0010cd2:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010cd8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010cdc:	0f b7 db             	movzx  ebx,bx
c0010cdf:	01 db                	add    ebx,ebx
c0010ce1:	01 fb                	add    ebx,edi
c0010ce3:	eb 6e                	jmp    c0010d53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ce5:	51                   	push   ecx
c0010ce6:	51                   	push   ecx
c0010ce7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ceb:	50                   	push   eax
c0010cec:	e8 f1 f8 ff ff       	call   c00105e2 <VgaText::combineCharAndColour(char, unsigned char)>
c0010cf1:	83 c4 10             	add    esp,0x10
c0010cf4:	66 89 03             	mov    WORD PTR [ebx],ax
c0010cf7:	39 2d c4 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1c4,ebp
c0010cfd:	75 2a                	jne    c0010d29 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010cff:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010d05:	85 c0                	test   eax,eax
c0010d07:	74 20                	je     c0010d29 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010d09:	52                   	push   edx
c0010d0a:	52                   	push   edx
c0010d0b:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010d11:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010d17:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010d1b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010d1f:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010d22:	51                   	push   ecx
c0010d23:	55                   	push   ebp
c0010d24:	ff d0                	call   eax
c0010d26:	83 c4 20             	add    esp,0x20
c0010d29:	83 c3 02             	add    ebx,0x2
c0010d2c:	50                   	push   eax
c0010d2d:	50                   	push   eax
c0010d2e:	6a 00                	push   0x0
c0010d30:	55                   	push   ebp
c0010d31:	e8 8c f9 ff ff       	call   c00106c2 <VgaText::incrementCursor(bool)>
c0010d36:	83 c4 10             	add    esp,0x10
c0010d39:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010d40:	75 0f                	jne    c0010d51 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010d42:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010d4a:	0f b7 db             	movzx  ebx,bx
c0010d4d:	01 db                	add    ebx,ebx
c0010d4f:	01 fb                	add    ebx,edi
c0010d51:	b1 01                	mov    cl,0x1
c0010d53:	46                   	inc    esi
c0010d54:	e9 bd fe ff ff       	jmp    c0010c16 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010d59:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010d5d:	83 ec 0c             	sub    esp,0xc
c0010d60:	55                   	push   ebp
c0010d61:	e8 9a f6 ff ff       	call   c0010400 <VgaText::updateCursor()>
c0010d66:	83 c4 10             	add    esp,0x10
c0010d69:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010d6d:	84 c9                	test   cl,cl
c0010d6f:	74 0c                	je     c0010d7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010d71:	83 ec 0c             	sub    esp,0xc
c0010d74:	55                   	push   ebp
c0010d75:	e8 40 fe ff ff       	call   c0010bba <VgaText::doUpdate()>
c0010d7a:	83 c4 10             	add    esp,0x10
c0010d7d:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010d84:	83 c4 1c             	add    esp,0x1c
c0010d87:	5b                   	pop    ebx
c0010d88:	5e                   	pop    esi
c0010d89:	5f                   	pop    edi
c0010d8a:	5d                   	pop    ebp
c0010d8b:	c3                   	ret    

c0010d8c <VgaText::clearScreen()>:
c0010d8c:	57                   	push   edi
c0010d8d:	56                   	push   esi
c0010d8e:	31 f6                	xor    esi,esi
c0010d90:	53                   	push   ebx
c0010d91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d95:	52                   	push   edx
c0010d96:	6a 00                	push   0x0
c0010d98:	6a 00                	push   0x0
c0010d9a:	53                   	push   ebx
c0010d9b:	e8 cc f8 ff ff       	call   c001066c <VgaText::setCursor(int, int)>
c0010da0:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010da7:	83 c4 10             	add    esp,0x10
c0010daa:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010db0:	7e 26                	jle    c0010dd8 <VgaText::clearScreen()+0x4c>
c0010db2:	31 ff                	xor    edi,edi
c0010db4:	50                   	push   eax
c0010db5:	50                   	push   eax
c0010db6:	56                   	push   esi
c0010db7:	57                   	push   edi
c0010db8:	47                   	inc    edi
c0010db9:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010dbf:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010dc5:	6a 20                	push   0x20
c0010dc7:	53                   	push   ebx
c0010dc8:	e8 27 f8 ff ff       	call   c00105f4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010dcd:	83 c4 20             	add    esp,0x20
c0010dd0:	83 ff 50             	cmp    edi,0x50
c0010dd3:	75 df                	jne    c0010db4 <VgaText::clearScreen()+0x28>
c0010dd5:	46                   	inc    esi
c0010dd6:	eb d2                	jmp    c0010daa <VgaText::clearScreen()+0x1e>
c0010dd8:	83 ec 0c             	sub    esp,0xc
c0010ddb:	53                   	push   ebx
c0010ddc:	e8 d9 fd ff ff       	call   c0010bba <VgaText::doUpdate()>
c0010de1:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010de8:	83 c4 10             	add    esp,0x10
c0010deb:	5b                   	pop    ebx
c0010dec:	5e                   	pop    esi
c0010ded:	5f                   	pop    edi
c0010dee:	c3                   	ret    
c0010def:	90                   	nop

c0010df0 <VgaText::putchar(char)>:
c0010df0:	56                   	push   esi
c0010df1:	53                   	push   ebx
c0010df2:	83 ec 14             	sub    esp,0x14
c0010df5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010df9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010dfd:	3c 5b                	cmp    al,0x5b
c0010dff:	75 21                	jne    c0010e22 <VgaText::putchar(char)+0x32>
c0010e01:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010e08:	74 28                	je     c0010e32 <VgaText::putchar(char)+0x42>
c0010e0a:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010e13:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010e1d:	e9 e2 00 00 00       	jmp    c0010f04 <VgaText::putchar(char)+0x114>
c0010e22:	3c 1b                	cmp    al,0x1b
c0010e24:	75 0c                	jne    c0010e32 <VgaText::putchar(char)+0x42>
c0010e26:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010e2d:	e9 d2 00 00 00       	jmp    c0010f04 <VgaText::putchar(char)+0x114>
c0010e32:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010e38:	84 c9                	test   cl,cl
c0010e3a:	0f 84 ab 00 00 00    	je     c0010eeb <VgaText::putchar(char)+0xfb>
c0010e40:	8d 50 c0             	lea    edx,[eax-0x40]
c0010e43:	80 fa 3e             	cmp    dl,0x3e
c0010e46:	0f 87 82 00 00 00    	ja     c0010ece <VgaText::putchar(char)+0xde>
c0010e4c:	3c 6d                	cmp    al,0x6d
c0010e4e:	75 4d                	jne    c0010e9d <VgaText::putchar(char)+0xad>
c0010e50:	31 f6                	xor    esi,esi
c0010e52:	31 d2                	xor    edx,edx
c0010e54:	31 c0                	xor    eax,eax
c0010e56:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010e5c:	7e 30                	jle    c0010e8e <VgaText::putchar(char)+0x9e>
c0010e5e:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010e66:	80 fa 3b             	cmp    dl,0x3b
c0010e69:	75 17                	jne    c0010e82 <VgaText::putchar(char)+0x92>
c0010e6b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010e6f:	50                   	push   eax
c0010e70:	53                   	push   ebx
c0010e71:	e8 ee f5 ff ff       	call   c0010464 <VgaText::doANSI_SGR(int)>
c0010e76:	59                   	pop    ecx
c0010e77:	31 d2                	xor    edx,edx
c0010e79:	58                   	pop    eax
c0010e7a:	31 c0                	xor    eax,eax
c0010e7c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010e80:	eb 09                	jmp    c0010e8b <VgaText::putchar(char)+0x9b>
c0010e82:	6b c0 0a             	imul   eax,eax,0xa
c0010e85:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010e89:	88 ca                	mov    dl,cl
c0010e8b:	46                   	inc    esi
c0010e8c:	eb c8                	jmp    c0010e56 <VgaText::putchar(char)+0x66>
c0010e8e:	84 d2                	test   dl,dl
c0010e90:	74 31                	je     c0010ec3 <VgaText::putchar(char)+0xd3>
c0010e92:	50                   	push   eax
c0010e93:	53                   	push   ebx
c0010e94:	e8 cb f5 ff ff       	call   c0010464 <VgaText::doANSI_SGR(int)>
c0010e99:	58                   	pop    eax
c0010e9a:	5a                   	pop    edx
c0010e9b:	eb 26                	jmp    c0010ec3 <VgaText::putchar(char)+0xd3>
c0010e9d:	3c 4a                	cmp    al,0x4a
c0010e9f:	75 22                	jne    c0010ec3 <VgaText::putchar(char)+0xd3>
c0010ea1:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010ea8:	75 19                	jne    c0010ec3 <VgaText::putchar(char)+0xd3>
c0010eaa:	83 ec 0c             	sub    esp,0xc
c0010ead:	53                   	push   ebx
c0010eae:	e8 d9 fe ff ff       	call   c0010d8c <VgaText::clearScreen()>
c0010eb3:	83 c4 0c             	add    esp,0xc
c0010eb6:	6a 00                	push   0x0
c0010eb8:	6a 00                	push   0x0
c0010eba:	53                   	push   ebx
c0010ebb:	e8 ac f7 ff ff       	call   c001066c <VgaText::setCursor(int, int)>
c0010ec0:	83 c4 10             	add    esp,0x10
c0010ec3:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010ecc:	eb 36                	jmp    c0010f04 <VgaText::putchar(char)+0x114>
c0010ece:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010ed4:	83 fa 0e             	cmp    edx,0xe
c0010ed7:	7f 2b                	jg     c0010f04 <VgaText::putchar(char)+0x114>
c0010ed9:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010edc:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010ee2:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010ee9:	eb 19                	jmp    c0010f04 <VgaText::putchar(char)+0x114>
c0010eeb:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010ef1:	0f be c0             	movsx  eax,al
c0010ef4:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010efa:	50                   	push   eax
c0010efb:	53                   	push   ebx
c0010efc:	e8 ab fa ff ff       	call   c00109ac <VgaText::putchar(char, VgaColour, VgaColour)>
c0010f01:	83 c4 10             	add    esp,0x10
c0010f04:	83 c4 14             	add    esp,0x14
c0010f07:	5b                   	pop    ebx
c0010f08:	5e                   	pop    esi
c0010f09:	c3                   	ret    

c0010f0a <VgaText::puts(char const*)>:
c0010f0a:	53                   	push   ebx
c0010f0b:	83 ec 08             	sub    esp,0x8
c0010f0e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010f12:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010f15:	84 c0                	test   al,al
c0010f17:	74 12                	je     c0010f2b <VgaText::puts(char const*)+0x21>
c0010f19:	43                   	inc    ebx
c0010f1a:	51                   	push   ecx
c0010f1b:	51                   	push   ecx
c0010f1c:	50                   	push   eax
c0010f1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f21:	e8 ca fe ff ff       	call   c0010df0 <VgaText::putchar(char)>
c0010f26:	83 c4 10             	add    esp,0x10
c0010f29:	eb e7                	jmp    c0010f12 <VgaText::puts(char const*)+0x8>
c0010f2b:	83 c4 08             	add    esp,0x8
c0010f2e:	5b                   	pop    ebx
c0010f2f:	c3                   	ret    

c0010f30 <VgaText::putx(unsigned int)>:
c0010f30:	57                   	push   edi
c0010f31:	b9 11 00 00 00       	mov    ecx,0x11
c0010f36:	56                   	push   esi
c0010f37:	be f2 92 02 c0       	mov    esi,0xc00292f2
c0010f3c:	53                   	push   ebx
c0010f3d:	83 ec 20             	sub    esp,0x20
c0010f40:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010f44:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010f48:	fc                   	cld    
c0010f49:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f4b:	be 08 00 00 00       	mov    esi,0x8
c0010f50:	50                   	push   eax
c0010f51:	50                   	push   eax
c0010f52:	89 d8                	mov    eax,ebx
c0010f54:	c1 e3 04             	shl    ebx,0x4
c0010f57:	c1 e8 1c             	shr    eax,0x1c
c0010f5a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010f5f:	50                   	push   eax
c0010f60:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010f64:	e8 87 fe ff ff       	call   c0010df0 <VgaText::putchar(char)>
c0010f69:	83 c4 10             	add    esp,0x10
c0010f6c:	4e                   	dec    esi
c0010f6d:	75 e1                	jne    c0010f50 <VgaText::putx(unsigned int)+0x20>
c0010f6f:	83 c4 20             	add    esp,0x20
c0010f72:	5b                   	pop    ebx
c0010f73:	5e                   	pop    esi
c0010f74:	5f                   	pop    edi
c0010f75:	c3                   	ret    

c0010f76 <VgaText::VgaText(char const*)>:
c0010f76:	57                   	push   edi
c0010f77:	56                   	push   esi
c0010f78:	53                   	push   ebx
c0010f79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f7d:	83 ec 08             	sub    esp,0x8
c0010f80:	6a 00                	push   0x0
c0010f82:	50                   	push   eax
c0010f83:	e8 6e 05 00 00       	call   c00114f6 <UnixFile::UnixFile(int)>
c0010f88:	83 c4 10             	add    esp,0x10
c0010f8b:	ba 58 93 02 c0       	mov    edx,0xc0029358
c0010f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f94:	89 10                	mov    DWORD PTR [eax],edx
c0010f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f9a:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa8:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb6:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010fbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fc1:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010fc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fcc:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010fd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fda:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010fe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe8:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010fef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ff3:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010ffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ffe:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011004:	bb a0 d1 02 c0       	mov    ebx,0xc002d1a0
c0011009:	b8 08 00 00 00       	mov    eax,0x8
c001100e:	fc                   	cld    
c001100f:	89 d7                	mov    edi,edx
c0011011:	89 de                	mov    esi,ebx
c0011013:	89 c1                	mov    ecx,eax
c0011015:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001101b:	05 1e 10 00 00       	add    eax,0x101e
c0011020:	83 ec 08             	sub    esp,0x8
c0011023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011027:	50                   	push   eax
c0011028:	e8 36 f7 fe ff       	call   c0000763 <strcpy>
c001102d:	83 c4 10             	add    esp,0x10
c0011030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011034:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c001103e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011042:	83 c0 0c             	add    eax,0xc
c0011045:	83 ec 04             	sub    esp,0x4
c0011048:	68 00 0f 00 00       	push   0xf00
c001104d:	6a 00                	push   0x0
c001104f:	50                   	push   eax
c0011050:	e8 6f f6 fe ff       	call   c00006c4 <memset>
c0011055:	83 c4 10             	add    esp,0x10
c0011058:	83 ec 04             	sub    esp,0x4
c001105b:	6a 00                	push   0x0
c001105d:	6a 07                	push   0x7
c001105f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011063:	e8 b4 f4 ff ff       	call   c001051c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011068:	83 c4 10             	add    esp,0x10
c001106b:	83 ec 08             	sub    esp,0x8
c001106e:	6a 02                	push   0x2
c0011070:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011074:	e8 49 fa ff ff       	call   c0010ac2 <VgaText::setCursorHeight(int)>
c0011079:	83 c4 10             	add    esp,0x10
c001107c:	83 ec 04             	sub    esp,0x4
c001107f:	6a 00                	push   0x0
c0011081:	6a 00                	push   0x0
c0011083:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011087:	e8 e0 f5 ff ff       	call   c001066c <VgaText::setCursor(int, int)>
c001108c:	83 c4 10             	add    esp,0x10
c001108f:	83 ec 08             	sub    esp,0x8
c0011092:	6a 01                	push   0x1
c0011094:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011098:	e8 7d f3 ff ff       	call   c001041a <VgaText::showCursor(bool)>
c001109d:	83 c4 10             	add    esp,0x10
c00110a0:	83 ec 08             	sub    esp,0x8
c00110a3:	6a 01                	push   0x1
c00110a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110a9:	e8 7c f3 ff ff       	call   c001042a <VgaText::disableBlink(bool)>
c00110ae:	83 c4 10             	add    esp,0x10
c00110b1:	83 ec 0c             	sub    esp,0xc
c00110b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110b8:	e8 cf fc ff ff       	call   c0010d8c <VgaText::clearScreen()>
c00110bd:	83 c4 10             	add    esp,0x10
c00110c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c4:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00110cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110cf:	05 9e 10 00 00       	add    eax,0x109e
c00110d4:	83 ec 04             	sub    esp,0x4
c00110d7:	68 96 00 00 00       	push   0x96
c00110dc:	6a 00                	push   0x0
c00110de:	50                   	push   eax
c00110df:	e8 e0 f5 fe ff       	call   c00006c4 <memset>
c00110e4:	83 c4 10             	add    esp,0x10
c00110e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110eb:	05 34 11 00 00       	add    eax,0x1134
c00110f0:	83 ec 04             	sub    esp,0x4
c00110f3:	68 2c 01 00 00       	push   0x12c
c00110f8:	6a 00                	push   0x0
c00110fa:	50                   	push   eax
c00110fb:	e8 c4 f5 fe ff       	call   c00006c4 <memset>
c0011100:	83 c4 10             	add    esp,0x10
c0011103:	90                   	nop
c0011104:	5b                   	pop    ebx
c0011105:	5e                   	pop    esi
c0011106:	5f                   	pop    edi
c0011107:	c3                   	ret    

c0011108 <VgaText::receiveKey(unsigned char)>:
c0011108:	55                   	push   ebp
c0011109:	57                   	push   edi
c001110a:	56                   	push   esi
c001110b:	53                   	push   ebx
c001110c:	83 ec 1c             	sub    esp,0x1c
c001110f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011113:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011117:	84 db                	test   bl,bl
c0011119:	0f 84 c9 00 00 00    	je     c00111e8 <VgaText::receiveKey(unsigned char)+0xe0>
c001111f:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011125:	80 fb 08             	cmp    bl,0x8
c0011128:	75 2c                	jne    c0011156 <VgaText::receiveKey(unsigned char)+0x4e>
c001112a:	83 ec 0c             	sub    esp,0xc
c001112d:	57                   	push   edi
c001112e:	e8 ae f5 fe ff       	call   c00006e1 <strlen>
c0011133:	83 c4 10             	add    esp,0x10
c0011136:	85 c0                	test   eax,eax
c0011138:	74 41                	je     c001117b <VgaText::receiveKey(unsigned char)+0x73>
c001113a:	50                   	push   eax
c001113b:	50                   	push   eax
c001113c:	6a 08                	push   0x8
c001113e:	56                   	push   esi
c001113f:	e8 ac fc ff ff       	call   c0010df0 <VgaText::putchar(char)>
c0011144:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011147:	e8 95 f5 fe ff       	call   c00006e1 <strlen>
c001114c:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011154:	eb 22                	jmp    c0011178 <VgaText::receiveKey(unsigned char)+0x70>
c0011156:	0f be c3             	movsx  eax,bl
c0011159:	52                   	push   edx
c001115a:	52                   	push   edx
c001115b:	50                   	push   eax
c001115c:	56                   	push   esi
c001115d:	e8 8e fc ff ff       	call   c0010df0 <VgaText::putchar(char)>
c0011162:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011166:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001116b:	59                   	pop    ecx
c001116c:	5d                   	pop    ebp
c001116d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011171:	50                   	push   eax
c0011172:	57                   	push   edi
c0011173:	e8 a2 f6 fe ff       	call   c000081a <strcat>
c0011178:	83 c4 10             	add    esp,0x10
c001117b:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0011182:	75 05                	jne    c0011189 <VgaText::receiveKey(unsigned char)+0x81>
c0011184:	80 fb 0a             	cmp    bl,0xa
c0011187:	75 53                	jne    c00111dc <VgaText::receiveKey(unsigned char)+0xd4>
c0011189:	83 ec 0c             	sub    esp,0xc
c001118c:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0011192:	53                   	push   ebx
c0011193:	e8 49 f5 fe ff       	call   c00006e1 <strlen>
c0011198:	89 3c 24             	mov    DWORD PTR [esp],edi
c001119b:	89 c5                	mov    ebp,eax
c001119d:	e8 3f f5 fe ff       	call   c00006e1 <strlen>
c00111a2:	83 c4 10             	add    esp,0x10
c00111a5:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00111a9:	3d 2c 01 00 00       	cmp    eax,0x12c
c00111ae:	76 10                	jbe    c00111c0 <VgaText::receiveKey(unsigned char)+0xb8>
c00111b0:	83 ec 0c             	sub    esp,0xc
c00111b3:	68 03 93 02 c0       	push   0xc0029303
c00111b8:	e8 c2 8a 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c00111bd:	83 c4 10             	add    esp,0x10
c00111c0:	50                   	push   eax
c00111c1:	50                   	push   eax
c00111c2:	57                   	push   edi
c00111c3:	53                   	push   ebx
c00111c4:	e8 51 f6 fe ff       	call   c000081a <strcat>
c00111c9:	83 c4 0c             	add    esp,0xc
c00111cc:	68 96 00 00 00       	push   0x96
c00111d1:	6a 00                	push   0x0
c00111d3:	57                   	push   edi
c00111d4:	e8 eb f4 fe ff       	call   c00006c4 <memset>
c00111d9:	83 c4 10             	add    esp,0x10
c00111dc:	83 ec 0c             	sub    esp,0xc
c00111df:	56                   	push   esi
c00111e0:	e8 d5 f9 ff ff       	call   c0010bba <VgaText::doUpdate()>
c00111e5:	83 c4 10             	add    esp,0x10
c00111e8:	83 c4 1c             	add    esp,0x1c
c00111eb:	5b                   	pop    ebx
c00111ec:	5e                   	pop    esi
c00111ed:	5f                   	pop    edi
c00111ee:	5d                   	pop    ebp
c00111ef:	c3                   	ret    

c00111f0 <VgaText::write(unsigned long long, void*, int*)>:
c00111f0:	55                   	push   ebp
c00111f1:	57                   	push   edi
c00111f2:	56                   	push   esi
c00111f3:	53                   	push   ebx
c00111f4:	83 ec 0c             	sub    esp,0xc
c00111f7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00111fb:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00111ff:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011203:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c001120a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001120d:	39 eb                	cmp    ebx,ebp
c001120f:	74 13                	je     c0011224 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011211:	43                   	inc    ebx
c0011212:	50                   	push   eax
c0011213:	50                   	push   eax
c0011214:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011218:	50                   	push   eax
c0011219:	56                   	push   esi
c001121a:	e8 d1 fb ff ff       	call   c0010df0 <VgaText::putchar(char)>
c001121f:	83 c4 10             	add    esp,0x10
c0011222:	eb e9                	jmp    c001120d <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011224:	83 ec 0c             	sub    esp,0xc
c0011227:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c001122e:	56                   	push   esi
c001122f:	e8 86 f9 ff ff       	call   c0010bba <VgaText::doUpdate()>
c0011234:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011238:	89 38                	mov    DWORD PTR [eax],edi
c001123a:	83 c4 1c             	add    esp,0x1c
c001123d:	31 c0                	xor    eax,eax
c001123f:	5b                   	pop    ebx
c0011240:	5e                   	pop    esi
c0011241:	5f                   	pop    edi
c0011242:	5d                   	pop    ebp
c0011243:	c3                   	ret    

c0011244 <newTerminal(char*)>:
c0011244:	83 ec 28             	sub    esp,0x28
c0011247:	68 60 12 00 00       	push   0x1260
c001124c:	e8 09 e4 ff ff       	call   c000f65a <malloc>
c0011251:	5a                   	pop    edx
c0011252:	59                   	pop    ecx
c0011253:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011257:	50                   	push   eax
c0011258:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001125c:	e8 15 fd ff ff       	call   c0010f76 <VgaText::VgaText(char const*)>
c0011261:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011265:	83 c4 2c             	add    esp,0x2c
c0011268:	c3                   	ret    
c0011269:	90                   	nop

c001126a <TSS::TSS()>:
c001126a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001126e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011275:	90                   	nop
c0011276:	c3                   	ret    
c0011277:	90                   	nop

c0011278 <TSS::setESP(unsigned long)>:
c0011278:	55                   	push   ebp
c0011279:	89 e5                	mov    ebp,esp
c001127b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001127e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011281:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011284:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011287:	90                   	nop
c0011288:	5d                   	pop    ebp
c0011289:	c3                   	ret    

c001128a <TSS::flush()>:
c001128a:	55                   	push   ebp
c001128b:	89 e5                	mov    ebp,esp
c001128d:	83 ec 10             	sub    esp,0x10
c0011290:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011293:	8b 00                	mov    eax,DWORD PTR [eax]
c0011295:	83 c8 03             	or     eax,0x3
c0011298:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001129c:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00112a0:	66 89 d0             	mov    ax,dx
c00112a3:	0f 00 d8             	ltr    ax
c00112a6:	90                   	nop
c00112a7:	c9                   	leave  
c00112a8:	c3                   	ret    
c00112a9:	90                   	nop

c00112aa <TSS::setup(unsigned long, unsigned long)>:
c00112aa:	55                   	push   ebp
c00112ab:	89 e5                	mov    ebp,esp
c00112ad:	83 ec 18             	sub    esp,0x18
c00112b0:	83 ec 0c             	sub    esp,0xc
c00112b3:	6a 68                	push   0x68
c00112b5:	e8 a0 e3 ff ff       	call   c000f65a <malloc>
c00112ba:	83 c4 10             	add    esp,0x10
c00112bd:	89 c2                	mov    edx,eax
c00112bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112c2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00112c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112cb:	83 ec 04             	sub    esp,0x4
c00112ce:	6a 68                	push   0x68
c00112d0:	6a 00                	push   0x0
c00112d2:	50                   	push   eax
c00112d3:	e8 ec f3 fe ff       	call   c00006c4 <memset>
c00112d8:	83 c4 10             	add    esp,0x10
c00112db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112e1:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00112e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112ed:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00112f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112f9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00112fc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00112ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011302:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011305:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001130b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001130e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011311:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011317:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001131a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001131d:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011326:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011329:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001132f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011332:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011335:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001133b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001133e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011341:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011347:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001134a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001134d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011350:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011353:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011356:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011359:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001135c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001135f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011362:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011365:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001136c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001136f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011372:	0f 20 da             	mov    edx,cr3
c0011375:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011378:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001137b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001137e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011381:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011384:	83 ec 08             	sub    esp,0x8
c0011387:	50                   	push   eax
c0011388:	8d 45 ec             	lea    eax,[ebp-0x14]
c001138b:	50                   	push   eax
c001138c:	e8 a7 da ff ff       	call   c000ee38 <GDTEntry::setBase(unsigned int)>
c0011391:	83 c4 10             	add    esp,0x10
c0011394:	83 ec 08             	sub    esp,0x8
c0011397:	6a 68                	push   0x68
c0011399:	8d 45 ec             	lea    eax,[ebp-0x14]
c001139c:	50                   	push   eax
c001139d:	e8 b2 da ff ff       	call   c000ee54 <GDTEntry::setLimit(unsigned int)>
c00113a2:	83 c4 10             	add    esp,0x10
c00113a5:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00113a9:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00113ac:	83 e0 0f             	and    eax,0xf
c00113af:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00113b2:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00113b5:	83 c8 40             	or     eax,0x40
c00113b8:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00113bb:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c00113c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00113c6:	05 78 01 00 00       	add    eax,0x178
c00113cb:	83 ec 04             	sub    esp,0x4
c00113ce:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00113d1:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00113d4:	50                   	push   eax
c00113d5:	e8 ae da ff ff       	call   c000ee88 <GDT::addEntry(GDTEntry)>
c00113da:	83 c4 10             	add    esp,0x10
c00113dd:	89 c2                	mov    edx,eax
c00113df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113e2:	89 10                	mov    DWORD PTR [eax],edx
c00113e4:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c00113e9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00113ef:	05 78 01 00 00       	add    eax,0x178
c00113f4:	83 ec 0c             	sub    esp,0xc
c00113f7:	50                   	push   eax
c00113f8:	e8 cf da ff ff       	call   c000eecc <GDT::flush()>
c00113fd:	83 c4 10             	add    esp,0x10
c0011400:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011403:	8b 00                	mov    eax,DWORD PTR [eax]
c0011405:	83 ec 08             	sub    esp,0x8
c0011408:	50                   	push   eax
c0011409:	68 6c 93 02 c0       	push   0xc002936c
c001140e:	e8 16 15 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0011413:	83 c4 10             	add    esp,0x10
c0011416:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011419:	8b 00                	mov    eax,DWORD PTR [eax]
c001141b:	c9                   	leave  
c001141c:	c3                   	ret    
c001141d:	90                   	nop

c001141e <ReservedFilename::read(unsigned long long, void*, int*)>:
c001141e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011422:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011426:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011429:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001142e:	75 08                	jne    c0011438 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011430:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011436:	eb 38                	jmp    c0011470 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011438:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001143d:	75 17                	jne    c0011456 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001143f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011444:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011447:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001144d:	8b 10                	mov    edx,DWORD PTR [eax]
c001144f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011453:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011456:	89 c1                	mov    ecx,eax
c0011458:	83 e1 fd             	and    ecx,0xfffffffd
c001145b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011461:	74 cd                	je     c0011430 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011463:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011468:	83 e0 ef             	and    eax,0xffffffef
c001146b:	83 f8 08             	cmp    eax,0x8
c001146e:	76 c0                	jbe    c0011430 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011470:	31 c0                	xor    eax,eax
c0011472:	c3                   	ret    
c0011473:	90                   	nop

c0011474 <ReservedFilename::isAtty()>:
c0011474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011478:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001147b:	31 c0                	xor    eax,eax
c001147d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011483:	74 09                	je     c001148e <ReservedFilename::isAtty()+0x1a>
c0011485:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001148b:	0f 94 c0             	sete   al
c001148e:	c3                   	ret    
c001148f:	90                   	nop

c0011490 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011494:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011498:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001149b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001149f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00114a4:	75 08                	jne    c00114ae <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00114a6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00114ac:	eb 3d                	jmp    c00114eb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00114ae:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00114b3:	75 17                	jne    c00114cc <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00114b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00114bd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00114c3:	8b 10                	mov    edx,DWORD PTR [eax]
c00114c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00114c9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00114cc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00114d1:	75 04                	jne    c00114d7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00114d3:	89 0a                	mov    DWORD PTR [edx],ecx
c00114d5:	eb 14                	jmp    c00114eb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00114d7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00114dc:	74 c8                	je     c00114a6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00114de:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00114e3:	83 e0 ef             	and    eax,0xffffffef
c00114e6:	83 f8 08             	cmp    eax,0x8
c00114e9:	76 bb                	jbe    c00114a6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00114eb:	31 c0                	xor    eax,eax
c00114ed:	c3                   	ret    

c00114ee <UnixFile::getFileDescriptor()>:
c00114ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114f5:	c3                   	ret    

c00114f6 <UnixFile::UnixFile(int)>:
c00114f6:	53                   	push   ebx
c00114f7:	83 ec 28             	sub    esp,0x28
c00114fa:	ba 58 94 02 c0       	mov    edx,0xc0029458
c00114ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011503:	89 10                	mov    DWORD PTR [eax],edx
c0011505:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001150d:	0f 8f 8c 01 00 00    	jg     c001169f <UnixFile::UnixFile(int)+0x1a9>
c0011513:	a1 80 c0 02 c0       	mov    eax,ds:0xc002c080
c0011518:	8d 50 01             	lea    edx,[eax+0x1]
c001151b:	89 15 80 c0 02 c0    	mov    DWORD PTR ds:0xc002c080,edx
c0011521:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011525:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011528:	83 ec 08             	sub    esp,0x8
c001152b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001152f:	68 58 d2 02 c0       	push   0xc002d258
c0011534:	e8 d7 60 01 00       	call   c0027610 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011539:	83 c4 10             	add    esp,0x10
c001153c:	a0 54 d2 02 c0       	mov    al,ds:0xc002d254
c0011541:	83 f0 01             	xor    eax,0x1
c0011544:	84 c0                	test   al,al
c0011546:	0f 84 54 01 00 00    	je     c00116a0 <UnixFile::UnixFile(int)+0x1aa>
c001154c:	c6 05 54 d2 02 c0 01 	mov    BYTE PTR ds:0xc002d254,0x1
c0011553:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001155b:	83 ec 0c             	sub    esp,0xc
c001155e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011562:	e8 f3 e0 ff ff       	call   c000f65a <malloc>
c0011567:	83 c4 10             	add    esp,0x10
c001156a:	89 c3                	mov    ebx,eax
c001156c:	83 ec 08             	sub    esp,0x8
c001156f:	68 03 ff ff 0f       	push   0xfffff03
c0011574:	53                   	push   ebx
c0011575:	e8 2c 01 00 00       	call   c00116a6 <ReservedFilename::ReservedFilename(int)>
c001157a:	83 c4 10             	add    esp,0x10
c001157d:	89 1d 4c d2 02 c0    	mov    DWORD PTR ds:0xc002d24c,ebx
c0011583:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001158b:	83 ec 0c             	sub    esp,0xc
c001158e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011592:	e8 c3 e0 ff ff       	call   c000f65a <malloc>
c0011597:	83 c4 10             	add    esp,0x10
c001159a:	89 c3                	mov    ebx,eax
c001159c:	83 ec 08             	sub    esp,0x8
c001159f:	68 01 ff ff 0f       	push   0xfffff01
c00115a4:	53                   	push   ebx
c00115a5:	e8 fc 00 00 00       	call   c00116a6 <ReservedFilename::ReservedFilename(int)>
c00115aa:	83 c4 10             	add    esp,0x10
c00115ad:	89 1d 50 d2 02 c0    	mov    DWORD PTR ds:0xc002d250,ebx
c00115b3:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00115bb:	83 ec 0c             	sub    esp,0xc
c00115be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00115c2:	e8 93 e0 ff ff       	call   c000f65a <malloc>
c00115c7:	83 c4 10             	add    esp,0x10
c00115ca:	89 c3                	mov    ebx,eax
c00115cc:	83 ec 08             	sub    esp,0x8
c00115cf:	68 00 ff ff 0f       	push   0xfffff00
c00115d4:	53                   	push   ebx
c00115d5:	e8 cc 00 00 00       	call   c00116a6 <ReservedFilename::ReservedFilename(int)>
c00115da:	83 c4 10             	add    esp,0x10
c00115dd:	89 1d 44 d2 02 c0    	mov    DWORD PTR ds:0xc002d244,ebx
c00115e3:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00115eb:	83 ec 0c             	sub    esp,0xc
c00115ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00115f2:	e8 63 e0 ff ff       	call   c000f65a <malloc>
c00115f7:	83 c4 10             	add    esp,0x10
c00115fa:	89 c3                	mov    ebx,eax
c00115fc:	83 ec 08             	sub    esp,0x8
c00115ff:	68 02 ff ff 0f       	push   0xfffff02
c0011604:	53                   	push   ebx
c0011605:	e8 9c 00 00 00       	call   c00116a6 <ReservedFilename::ReservedFilename(int)>
c001160a:	83 c4 10             	add    esp,0x10
c001160d:	89 1d 48 d2 02 c0    	mov    DWORD PTR ds:0xc002d248,ebx
c0011613:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001161b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011620:	7f 7e                	jg     c00116a0 <UnixFile::UnixFile(int)+0x1aa>
c0011622:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001162a:	83 ec 0c             	sub    esp,0xc
c001162d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011631:	e8 24 e0 ff ff       	call   c000f65a <malloc>
c0011636:	83 c4 10             	add    esp,0x10
c0011639:	89 c3                	mov    ebx,eax
c001163b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001163f:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011644:	83 ec 08             	sub    esp,0x8
c0011647:	50                   	push   eax
c0011648:	53                   	push   ebx
c0011649:	e8 58 00 00 00       	call   c00116a6 <ReservedFilename::ReservedFilename(int)>
c001164e:	83 c4 10             	add    esp,0x10
c0011651:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011655:	89 1c 85 20 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2de0],ebx
c001165c:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011664:	83 ec 0c             	sub    esp,0xc
c0011667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001166b:	e8 ea df ff ff       	call   c000f65a <malloc>
c0011670:	83 c4 10             	add    esp,0x10
c0011673:	89 c3                	mov    ebx,eax
c0011675:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011679:	05 20 ff ff 0f       	add    eax,0xfffff20
c001167e:	83 ec 08             	sub    esp,0x8
c0011681:	50                   	push   eax
c0011682:	53                   	push   ebx
c0011683:	e8 1e 00 00 00       	call   c00116a6 <ReservedFilename::ReservedFilename(int)>
c0011688:	83 c4 10             	add    esp,0x10
c001168b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001168f:	89 1c 85 e0 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2e20],ebx
c0011696:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001169a:	e9 7c ff ff ff       	jmp    c001161b <UnixFile::UnixFile(int)+0x125>
c001169f:	90                   	nop
c00116a0:	83 c4 28             	add    esp,0x28
c00116a3:	5b                   	pop    ebx
c00116a4:	c3                   	ret    
c00116a5:	90                   	nop

c00116a6 <ReservedFilename::ReservedFilename(int)>:
c00116a6:	83 ec 0c             	sub    esp,0xc
c00116a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116ad:	83 ec 08             	sub    esp,0x8
c00116b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116b4:	50                   	push   eax
c00116b5:	e8 3c fe ff ff       	call   c00114f6 <UnixFile::UnixFile(int)>
c00116ba:	83 c4 10             	add    esp,0x10
c00116bd:	ba 74 94 02 c0       	mov    edx,0xc0029474
c00116c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116c6:	89 10                	mov    DWORD PTR [eax],edx
c00116c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116d0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00116d3:	90                   	nop
c00116d4:	83 c4 0c             	add    esp,0xc
c00116d7:	c3                   	ret    

c00116d8 <UnixFile::~UnixFile()>:
c00116d8:	83 ec 1c             	sub    esp,0x1c
c00116db:	ba 58 94 02 c0       	mov    edx,0xc0029458
c00116e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116e4:	89 10                	mov    DWORD PTR [eax],edx
c00116e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00116ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116ed:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00116f2:	7f 73                	jg     c0011767 <UnixFile::~UnixFile()+0x8f>
c00116f4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00116fc:	83 ec 0c             	sub    esp,0xc
c00116ff:	68 58 d2 02 c0       	push   0xc002d258
c0011704:	e8 db 5f 01 00       	call   c00276e4 <LinkedList<UnixFile>::getFirstElement()>
c0011709:	83 c4 10             	add    esp,0x10
c001170c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011710:	83 ec 0c             	sub    esp,0xc
c0011713:	68 58 d2 02 c0       	push   0xc002d258
c0011718:	e8 cf 5f 01 00       	call   c00276ec <LinkedList<UnixFile>::removeFirst()>
c001171d:	83 c4 10             	add    esp,0x10
c0011720:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011724:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011728:	74 40                	je     c001176a <UnixFile::~UnixFile()+0x92>
c001172a:	83 ec 08             	sub    esp,0x8
c001172d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011731:	68 58 d2 02 c0       	push   0xc002d258
c0011736:	e8 d5 5e 01 00       	call   c0027610 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001173b:	83 c4 10             	add    esp,0x10
c001173e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011742:	8d 50 01             	lea    edx,[eax+0x1]
c0011745:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011749:	3d 88 13 00 00       	cmp    eax,0x1388
c001174e:	0f 94 c0             	sete   al
c0011751:	84 c0                	test   al,al
c0011753:	74 a7                	je     c00116fc <UnixFile::~UnixFile()+0x24>
c0011755:	83 ec 0c             	sub    esp,0xc
c0011758:	68 30 94 02 c0       	push   0xc0029430
c001175d:	e8 1d 85 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c0011762:	83 c4 10             	add    esp,0x10
c0011765:	eb 95                	jmp    c00116fc <UnixFile::~UnixFile()+0x24>
c0011767:	90                   	nop
c0011768:	eb 01                	jmp    c001176b <UnixFile::~UnixFile()+0x93>
c001176a:	90                   	nop
c001176b:	90                   	nop
c001176c:	83 c4 1c             	add    esp,0x1c
c001176f:	c3                   	ret    

c0011770 <UnixFile::~UnixFile()>:
c0011770:	83 ec 0c             	sub    esp,0xc
c0011773:	83 ec 0c             	sub    esp,0xc
c0011776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001177a:	e8 59 ff ff ff       	call   c00116d8 <UnixFile::~UnixFile()>
c001177f:	83 c4 10             	add    esp,0x10
c0011782:	83 ec 08             	sub    esp,0x8
c0011785:	6a 0c                	push   0xc
c0011787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001178b:	e8 b9 10 00 00       	call   c0012849 <operator delete(void*, unsigned long)>
c0011790:	83 c4 10             	add    esp,0x10
c0011793:	83 c4 0c             	add    esp,0xc
c0011796:	c3                   	ret    
c0011797:	90                   	nop

c0011798 <ReservedFilename::~ReservedFilename()>:
c0011798:	83 ec 0c             	sub    esp,0xc
c001179b:	ba 74 94 02 c0       	mov    edx,0xc0029474
c00117a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117a4:	89 10                	mov    DWORD PTR [eax],edx
c00117a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117aa:	83 ec 0c             	sub    esp,0xc
c00117ad:	50                   	push   eax
c00117ae:	e8 25 ff ff ff       	call   c00116d8 <UnixFile::~UnixFile()>
c00117b3:	83 c4 10             	add    esp,0x10
c00117b6:	90                   	nop
c00117b7:	83 c4 0c             	add    esp,0xc
c00117ba:	c3                   	ret    
c00117bb:	90                   	nop

c00117bc <ReservedFilename::~ReservedFilename()>:
c00117bc:	83 ec 0c             	sub    esp,0xc
c00117bf:	83 ec 0c             	sub    esp,0xc
c00117c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117c6:	e8 cd ff ff ff       	call   c0011798 <ReservedFilename::~ReservedFilename()>
c00117cb:	83 c4 10             	add    esp,0x10
c00117ce:	83 ec 08             	sub    esp,0x8
c00117d1:	6a 0c                	push   0xc
c00117d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117d7:	e8 6d 10 00 00       	call   c0012849 <operator delete(void*, unsigned long)>
c00117dc:	83 c4 10             	add    esp,0x10
c00117df:	83 c4 0c             	add    esp,0xc
c00117e2:	c3                   	ret    

c00117e3 <getFromFileDescriptor(int)>:
c00117e3:	53                   	push   ebx
c00117e4:	83 ec 08             	sub    esp,0x8
c00117e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117eb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00117f1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00117f7:	7f 2c                	jg     c0011825 <getFromFileDescriptor(int)+0x42>
c00117f9:	83 ec 0c             	sub    esp,0xc
c00117fc:	68 58 d2 02 c0       	push   0xc002d258
c0011801:	e8 de 5e 01 00       	call   c00276e4 <LinkedList<UnixFile>::getFirstElement()>
c0011806:	83 c4 10             	add    esp,0x10
c0011809:	85 c0                	test   eax,eax
c001180b:	75 04                	jne    c0011811 <getFromFileDescriptor(int)+0x2e>
c001180d:	31 c0                	xor    eax,eax
c001180f:	eb 6e                	jmp    c001187f <getFromFileDescriptor(int)+0x9c>
c0011811:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011814:	74 69                	je     c001187f <getFromFileDescriptor(int)+0x9c>
c0011816:	52                   	push   edx
c0011817:	52                   	push   edx
c0011818:	50                   	push   eax
c0011819:	68 58 d2 02 c0       	push   0xc002d258
c001181e:	e8 6b 5f 01 00       	call   c002778e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011823:	eb e1                	jmp    c0011806 <getFromFileDescriptor(int)+0x23>
c0011825:	a1 4c d2 02 c0       	mov    eax,ds:0xc002d24c
c001182a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011830:	74 4d                	je     c001187f <getFromFileDescriptor(int)+0x9c>
c0011832:	a1 50 d2 02 c0       	mov    eax,ds:0xc002d250
c0011837:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001183d:	74 40                	je     c001187f <getFromFileDescriptor(int)+0x9c>
c001183f:	a1 48 d2 02 c0       	mov    eax,ds:0xc002d248
c0011844:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001184a:	74 33                	je     c001187f <getFromFileDescriptor(int)+0x9c>
c001184c:	a1 44 d2 02 c0       	mov    eax,ds:0xc002d244
c0011851:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011857:	74 26                	je     c001187f <getFromFileDescriptor(int)+0x9c>
c0011859:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001185f:	83 f8 08             	cmp    eax,0x8
c0011862:	77 09                	ja     c001186d <getFromFileDescriptor(int)+0x8a>
c0011864:	8b 04 85 20 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2de0]
c001186b:	eb 12                	jmp    c001187f <getFromFileDescriptor(int)+0x9c>
c001186d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011873:	83 fb 08             	cmp    ebx,0x8
c0011876:	77 95                	ja     c001180d <getFromFileDescriptor(int)+0x2a>
c0011878:	8b 04 9d e0 d1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2e20]
c001187f:	83 c4 08             	add    esp,0x8
c0011882:	5b                   	pop    ebx
c0011883:	c3                   	ret    

c0011884 <__static_initialization_and_destruction_0(int, int)>:
c0011884:	83 ec 0c             	sub    esp,0xc
c0011887:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001188c:	75 34                	jne    c00118c2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001188e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011896:	75 2a                	jne    c00118c2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011898:	83 ec 0c             	sub    esp,0xc
c001189b:	68 58 d2 02 c0       	push   0xc002d258
c00118a0:	e8 13 5d 01 00       	call   c00275b8 <LinkedList<UnixFile>::LinkedList()>
c00118a5:	83 c4 10             	add    esp,0x10
c00118a8:	83 ec 04             	sub    esp,0x4
c00118ab:	68 0c c0 02 c0       	push   0xc002c00c
c00118b0:	68 58 d2 02 c0       	push   0xc002d258
c00118b5:	68 b6 75 02 c0       	push   0xc00275b6
c00118ba:	e8 04 0f 00 00       	call   c00127c3 <__cxa_atexit>
c00118bf:	83 c4 10             	add    esp,0x10
c00118c2:	90                   	nop
c00118c3:	83 c4 0c             	add    esp,0xc
c00118c6:	c3                   	ret    

c00118c7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00118c7:	83 ec 0c             	sub    esp,0xc
c00118ca:	83 ec 08             	sub    esp,0x8
c00118cd:	68 ff ff 00 00       	push   0xffff
c00118d2:	6a 01                	push   0x1
c00118d4:	e8 ab ff ff ff       	call   c0011884 <__static_initialization_and_destruction_0(int, int)>
c00118d9:	83 c4 10             	add    esp,0x10
c00118dc:	83 c4 0c             	add    esp,0xc
c00118df:	c3                   	ret    

c00118e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00118e0:	53                   	push   ebx
c00118e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00118e9:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00118ef:	89 c8                	mov    eax,ecx
c00118f1:	d1 e8                	shr    eax,1
c00118f3:	03 05 88 c0 02 c0    	add    eax,DWORD PTR ds:0xc002c088
c00118f9:	83 e1 01             	and    ecx,0x1
c00118fc:	8a 10                	mov    dl,BYTE PTR [eax]
c00118fe:	75 09                	jne    c0011909 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011900:	83 e2 f0             	and    edx,0xfffffff0
c0011903:	09 da                	or     edx,ebx
c0011905:	88 10                	mov    BYTE PTR [eax],dl
c0011907:	5b                   	pop    ebx
c0011908:	c3                   	ret    
c0011909:	c1 e3 04             	shl    ebx,0x4
c001190c:	83 e2 0f             	and    edx,0xf
c001190f:	09 da                	or     edx,ebx
c0011911:	88 10                	mov    BYTE PTR [eax],dl
c0011913:	5b                   	pop    ebx
c0011914:	c3                   	ret    

c0011915 <Virt::getPageState(unsigned long)>:
c0011915:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011919:	8b 0d 88 c0 02 c0    	mov    ecx,DWORD PTR ds:0xc002c088
c001191f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011925:	89 d0                	mov    eax,edx
c0011927:	d1 e8                	shr    eax,1
c0011929:	83 e2 01             	and    edx,0x1
c001192c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001192f:	75 04                	jne    c0011935 <Virt::getPageState(unsigned long)+0x20>
c0011931:	83 e0 0f             	and    eax,0xf
c0011934:	c3                   	ret    
c0011935:	c0 e8 04             	shr    al,0x4
c0011938:	c3                   	ret    

c0011939 <Virt::allocateKernelVirtualPages(int)>:
c0011939:	55                   	push   ebp
c001193a:	31 ed                	xor    ebp,ebp
c001193c:	57                   	push   edi
c001193d:	56                   	push   esi
c001193e:	53                   	push   ebx
c001193f:	31 db                	xor    ebx,ebx
c0011941:	83 ec 1c             	sub    esp,0x1c
c0011944:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011948:	8b 3d 84 c0 02 c0    	mov    edi,DWORD PTR ds:0xc002c084
c001194e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011953:	57                   	push   edi
c0011954:	e8 bc ff ff ff       	call   c0011915 <Virt::getPageState(unsigned long)>
c0011959:	5a                   	pop    edx
c001195a:	84 c0                	test   al,al
c001195c:	75 3a                	jne    c0011998 <Virt::allocateKernelVirtualPages(int)+0x5f>
c001195e:	85 db                	test   ebx,ebx
c0011960:	75 02                	jne    c0011964 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011962:	89 fd                	mov    ebp,edi
c0011964:	43                   	inc    ebx
c0011965:	39 f3                	cmp    ebx,esi
c0011967:	74 5a                	je     c00119c3 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011969:	47                   	inc    edi
c001196a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011970:	76 31                	jbe    c00119a3 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011972:	c7 05 84 c0 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c084,0xc8000
c001197c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011981:	75 28                	jne    c00119ab <Virt::allocateKernelVirtualPages(int)+0x72>
c0011983:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011988:	bf 00 80 0c 00       	mov    edi,0xc8000
c001198d:	57                   	push   edi
c001198e:	e8 82 ff ff ff       	call   c0011915 <Virt::getPageState(unsigned long)>
c0011993:	5a                   	pop    edx
c0011994:	84 c0                	test   al,al
c0011996:	74 c6                	je     c001195e <Virt::allocateKernelVirtualPages(int)+0x25>
c0011998:	31 db                	xor    ebx,ebx
c001199a:	47                   	inc    edi
c001199b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00119a1:	77 cf                	ja     c0011972 <Virt::allocateKernelVirtualPages(int)+0x39>
c00119a3:	89 3d 84 c0 02 c0    	mov    DWORD PTR ds:0xc002c084,edi
c00119a9:	eb a8                	jmp    c0011953 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00119ab:	83 ec 0c             	sub    esp,0xc
c00119ae:	68 88 94 02 c0       	push   0xc0029488
c00119b3:	e8 c7 82 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c00119b8:	8b 3d 84 c0 02 c0    	mov    edi,DWORD PTR ds:0xc002c084
c00119be:	83 c4 10             	add    esp,0x10
c00119c1:	eb 90                	jmp    c0011953 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00119c3:	89 2d 84 c0 02 c0    	mov    DWORD PTR ds:0xc002c084,ebp
c00119c9:	4b                   	dec    ebx
c00119ca:	74 5f                	je     c0011a2b <Virt::allocateKernelVirtualPages(int)+0xf2>
c00119cc:	85 f6                	test   esi,esi
c00119ce:	74 3d                	je     c0011a0d <Virt::allocateKernelVirtualPages(int)+0xd4>
c00119d0:	89 e8                	mov    eax,ebp
c00119d2:	31 db                	xor    ebx,ebx
c00119d4:	8d 7e ff             	lea    edi,[esi-0x1]
c00119d7:	eb 14                	jmp    c00119ed <Virt::allocateKernelVirtualPages(int)+0xb4>
c00119d9:	6a 01                	push   0x1
c00119db:	43                   	inc    ebx
c00119dc:	50                   	push   eax
c00119dd:	e8 fe fe ff ff       	call   c00118e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119e2:	58                   	pop    eax
c00119e3:	39 f3                	cmp    ebx,esi
c00119e5:	5a                   	pop    edx
c00119e6:	74 25                	je     c0011a0d <Virt::allocateKernelVirtualPages(int)+0xd4>
c00119e8:	a1 84 c0 02 c0       	mov    eax,ds:0xc002c084
c00119ed:	8d 50 01             	lea    edx,[eax+0x1]
c00119f0:	85 db                	test   ebx,ebx
c00119f2:	89 15 84 c0 02 c0    	mov    DWORD PTR ds:0xc002c084,edx
c00119f8:	74 20                	je     c0011a1a <Virt::allocateKernelVirtualPages(int)+0xe1>
c00119fa:	39 df                	cmp    edi,ebx
c00119fc:	75 db                	jne    c00119d9 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00119fe:	6a 03                	push   0x3
c0011a00:	43                   	inc    ebx
c0011a01:	50                   	push   eax
c0011a02:	e8 d9 fe ff ff       	call   c00118e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a07:	59                   	pop    ecx
c0011a08:	39 f3                	cmp    ebx,esi
c0011a0a:	58                   	pop    eax
c0011a0b:	75 db                	jne    c00119e8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011a0d:	83 c4 1c             	add    esp,0x1c
c0011a10:	89 e8                	mov    eax,ebp
c0011a12:	5b                   	pop    ebx
c0011a13:	c1 e0 0c             	shl    eax,0xc
c0011a16:	5e                   	pop    esi
c0011a17:	5f                   	pop    edi
c0011a18:	5d                   	pop    ebp
c0011a19:	c3                   	ret    
c0011a1a:	6a 02                	push   0x2
c0011a1c:	bb 01 00 00 00       	mov    ebx,0x1
c0011a21:	50                   	push   eax
c0011a22:	e8 b9 fe ff ff       	call   c00118e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a27:	58                   	pop    eax
c0011a28:	5a                   	pop    edx
c0011a29:	eb bd                	jmp    c00119e8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011a2b:	6a 04                	push   0x4
c0011a2d:	8d 45 01             	lea    eax,[ebp+0x1]
c0011a30:	55                   	push   ebp
c0011a31:	a3 84 c0 02 c0       	mov    ds:0xc002c084,eax
c0011a36:	e8 a5 fe ff ff       	call   c00118e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a3b:	59                   	pop    ecx
c0011a3c:	89 e8                	mov    eax,ebp
c0011a3e:	5b                   	pop    ebx
c0011a3f:	c1 e0 0c             	shl    eax,0xc
c0011a42:	83 c4 1c             	add    esp,0x1c
c0011a45:	5b                   	pop    ebx
c0011a46:	5e                   	pop    esi
c0011a47:	5f                   	pop    edi
c0011a48:	5d                   	pop    ebp
c0011a49:	c3                   	ret    

c0011a4a <Virt::virtualMemorySetup()>:
c0011a4a:	53                   	push   ebx
c0011a4b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011a50:	83 ec 08             	sub    esp,0x8
c0011a53:	6a 0f                	push   0xf
c0011a55:	53                   	push   ebx
c0011a56:	43                   	inc    ebx
c0011a57:	e8 84 fe ff ff       	call   c00118e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a5c:	59                   	pop    ecx
c0011a5d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011a63:	58                   	pop    eax
c0011a64:	75 ed                	jne    c0011a53 <Virt::virtualMemorySetup()+0x9>
c0011a66:	83 ec 08             	sub    esp,0x8
c0011a69:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011a6e:	68 00 00 00 c8       	push   0xc8000000
c0011a73:	68 0f 96 02 c0       	push   0xc002960f
c0011a78:	e8 ac 0e 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0011a7d:	58                   	pop    eax
c0011a7e:	5a                   	pop    edx
c0011a7f:	68 00 f0 ff ef       	push   0xeffff000
c0011a84:	68 23 96 02 c0       	push   0xc0029623
c0011a89:	e8 9b 0e 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0011a8e:	83 c4 10             	add    esp,0x10
c0011a91:	83 ec 08             	sub    esp,0x8
c0011a94:	6a 00                	push   0x0
c0011a96:	53                   	push   ebx
c0011a97:	43                   	inc    ebx
c0011a98:	e8 43 fe ff ff       	call   c00118e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a9d:	83 c4 10             	add    esp,0x10
c0011aa0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011aa6:	75 e9                	jne    c0011a91 <Virt::virtualMemorySetup()+0x47>
c0011aa8:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011aad:	83 ec 08             	sub    esp,0x8
c0011ab0:	6a 0f                	push   0xf
c0011ab2:	53                   	push   ebx
c0011ab3:	43                   	inc    ebx
c0011ab4:	e8 27 fe ff ff       	call   c00118e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ab9:	83 c4 10             	add    esp,0x10
c0011abc:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011ac2:	75 e9                	jne    c0011aad <Virt::virtualMemorySetup()+0x63>
c0011ac4:	83 c4 08             	add    esp,0x8
c0011ac7:	5b                   	pop    ebx
c0011ac8:	c3                   	ret    

c0011ac9 <Virt::getAKernelVAS()>:
c0011ac9:	a1 64 d2 02 c0       	mov    eax,ds:0xc002d264
c0011ace:	c3                   	ret    

c0011acf <Virt::setupPageSwapping(int)>:
c0011acf:	57                   	push   edi
c0011ad0:	56                   	push   esi
c0011ad1:	53                   	push   ebx
c0011ad2:	83 ec 1c             	sub    esp,0x1c
c0011ad5:	68 14 01 00 00       	push   0x114
c0011ada:	e8 7b db ff ff       	call   c000f65a <malloc>
c0011adf:	83 c4 0c             	add    esp,0xc
c0011ae2:	89 c6                	mov    esi,eax
c0011ae4:	ff 35 34 e6 02 c0    	push   DWORD PTR ds:0xc002e634
c0011aea:	68 37 96 02 c0       	push   0xc0029637
c0011aef:	50                   	push   eax
c0011af0:	e8 8d 13 00 00       	call   c0012e82 <File::File(char const*, Process*)>
c0011af5:	89 34 24             	mov    DWORD PTR [esp],esi
c0011af8:	e8 61 15 00 00       	call   c001305e <File::unlink()>
c0011afd:	58                   	pop    eax
c0011afe:	5a                   	pop    edx
c0011aff:	6a 12                	push   0x12
c0011b01:	56                   	push   esi
c0011b02:	e8 df 13 00 00       	call   c0012ee6 <File::open(FileOpenMode)>
c0011b07:	83 c4 10             	add    esp,0x10
c0011b0a:	85 c0                	test   eax,eax
c0011b0c:	0f 85 ca 00 00 00    	jne    c0011bdc <Virt::setupPageSwapping(int)+0x10d>
c0011b12:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011b1e:	c1 e3 08             	shl    ebx,0x8
c0011b21:	83 ec 0c             	sub    esp,0xc
c0011b24:	68 00 00 01 00       	push   0x10000
c0011b29:	e8 2c db ff ff       	call   c000f65a <malloc>
c0011b2e:	83 c4 0c             	add    esp,0xc
c0011b31:	89 c7                	mov    edi,eax
c0011b33:	68 00 00 01 00       	push   0x10000
c0011b38:	6a 00                	push   0x0
c0011b3a:	50                   	push   eax
c0011b3b:	e8 84 eb fe ff       	call   c00006c4 <memset>
c0011b40:	83 c4 10             	add    esp,0x10
c0011b43:	85 db                	test   ebx,ebx
c0011b45:	79 03                	jns    c0011b4a <Virt::setupPageSwapping(int)+0x7b>
c0011b47:	83 c3 0f             	add    ebx,0xf
c0011b4a:	c1 fb 04             	sar    ebx,0x4
c0011b4d:	4b                   	dec    ebx
c0011b4e:	83 fb ff             	cmp    ebx,0xffffffff
c0011b51:	74 4b                	je     c0011b9e <Virt::setupPageSwapping(int)+0xcf>
c0011b53:	83 ec 0c             	sub    esp,0xc
c0011b56:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b58:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011b5c:	52                   	push   edx
c0011b5d:	57                   	push   edi
c0011b5e:	6a 00                	push   0x0
c0011b60:	68 00 00 01 00       	push   0x10000
c0011b65:	56                   	push   esi
c0011b66:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011b69:	83 c4 20             	add    esp,0x20
c0011b6c:	85 c0                	test   eax,eax
c0011b6e:	75 59                	jne    c0011bc9 <Virt::setupPageSwapping(int)+0xfa>
c0011b70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b74:	3d 00 00 01 00       	cmp    eax,0x10000
c0011b79:	74 d2                	je     c0011b4d <Virt::setupPageSwapping(int)+0x7e>
c0011b7b:	83 ec 08             	sub    esp,0x8
c0011b7e:	4b                   	dec    ebx
c0011b7f:	50                   	push   eax
c0011b80:	68 8a 96 02 c0       	push   0xc002968a
c0011b85:	e8 9f 0d 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0011b8a:	c7 04 24 93 96 02 c0 	mov    DWORD PTR [esp],0xc0029693
c0011b91:	e8 e9 80 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c0011b96:	83 c4 10             	add    esp,0x10
c0011b99:	83 fb ff             	cmp    ebx,0xffffffff
c0011b9c:	75 b5                	jne    c0011b53 <Virt::setupPageSwapping(int)+0x84>
c0011b9e:	83 ec 0c             	sub    esp,0xc
c0011ba1:	56                   	push   esi
c0011ba2:	e8 9d 13 00 00       	call   c0012f44 <File::close()>
c0011ba7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011baa:	e8 cb da ff ff       	call   c000f67a <rfree>
c0011baf:	83 c4 10             	add    esp,0x10
c0011bb2:	85 f6                	test   esi,esi
c0011bb4:	74 0c                	je     c0011bc2 <Virt::setupPageSwapping(int)+0xf3>
c0011bb6:	83 ec 0c             	sub    esp,0xc
c0011bb9:	8b 06                	mov    eax,DWORD PTR [esi]
c0011bbb:	56                   	push   esi
c0011bbc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011bbf:	83 c4 10             	add    esp,0x10
c0011bc2:	83 c4 10             	add    esp,0x10
c0011bc5:	5b                   	pop    ebx
c0011bc6:	5e                   	pop    esi
c0011bc7:	5f                   	pop    edi
c0011bc8:	c3                   	ret    
c0011bc9:	83 ec 08             	sub    esp,0x8
c0011bcc:	50                   	push   eax
c0011bcd:	68 72 96 02 c0       	push   0xc0029672
c0011bd2:	e8 52 0d 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0011bd7:	83 c4 10             	add    esp,0x10
c0011bda:	eb 94                	jmp    c0011b70 <Virt::setupPageSwapping(int)+0xa1>
c0011bdc:	83 ec 08             	sub    esp,0x8
c0011bdf:	50                   	push   eax
c0011be0:	68 4e 96 02 c0       	push   0xc002964e
c0011be5:	e8 3f 0d 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0011bea:	c7 04 24 57 96 02 c0 	mov    DWORD PTR [esp],0xc0029657
c0011bf1:	e8 89 80 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c0011bf6:	83 c4 10             	add    esp,0x10
c0011bf9:	e9 14 ff ff ff       	jmp    c0011b12 <Virt::setupPageSwapping(int)+0x43>

c0011bfe <VAS::VAS()>:
c0011bfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c02:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c0d:	a3 64 d2 02 c0       	mov    ds:0xc002d264,eax
c0011c12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c16:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c1e:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011c21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c25:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011c2c:	90                   	nop
c0011c2d:	c3                   	ret    

c0011c2e <VAS::VAS(VAS*)>:
c0011c2e:	83 ec 0c             	sub    esp,0xc
c0011c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c35:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c3c:	83 ec 0c             	sub    esp,0xc
c0011c3f:	68 a8 94 02 c0       	push   0xc00294a8
c0011c44:	e8 36 80 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c0011c49:	83 c4 10             	add    esp,0x10
c0011c4c:	90                   	nop
c0011c4d:	83 c4 0c             	add    esp,0xc
c0011c50:	c3                   	ret    
c0011c51:	90                   	nop

c0011c52 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011c52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c56:	89 c2                	mov    edx,eax
c0011c58:	c1 e8 0a             	shr    eax,0xa
c0011c5b:	c1 ea 16             	shr    edx,0x16
c0011c5e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011c63:	19 c9                	sbb    ecx,ecx
c0011c65:	c1 e2 0c             	shl    edx,0xc
c0011c68:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011c6e:	25 fc 0f 00 00       	and    eax,0xffc
c0011c73:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011c7a:	01 d0                	add    eax,edx
c0011c7c:	c3                   	ret    
c0011c7d:	90                   	nop

c0011c7e <VAS::getPageTableEntry(unsigned long)>:
c0011c7e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c82:	89 ca                	mov    edx,ecx
c0011c84:	c1 e9 0a             	shr    ecx,0xa
c0011c87:	c1 ea 16             	shr    edx,0x16
c0011c8a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011c90:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011c96:	c1 e0 0c             	shl    eax,0xc
c0011c99:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011c9c:	c3                   	ret    

c0011c9d <Virt::freeKernelVirtualPages(unsigned long)>:
c0011c9d:	57                   	push   edi
c0011c9e:	56                   	push   esi
c0011c9f:	be 01 00 00 00       	mov    esi,0x1
c0011ca4:	53                   	push   ebx
c0011ca5:	83 ec 10             	sub    esp,0x10
c0011ca8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011cac:	c1 eb 0c             	shr    ebx,0xc
c0011caf:	eb 3f                	jmp    c0011cf0 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011cb1:	e8 13 fe ff ff       	call   c0011ac9 <Virt::getAKernelVAS()>
c0011cb6:	83 ec 08             	sub    esp,0x8
c0011cb9:	57                   	push   edi
c0011cba:	50                   	push   eax
c0011cbb:	e8 be ff ff ff       	call   c0011c7e <VAS::getPageTableEntry(unsigned long)>
c0011cc0:	83 c4 10             	add    esp,0x10
c0011cc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011cc9:	f6 c4 04             	test   ah,0x4
c0011ccc:	75 5f                	jne    c0011d2d <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011cce:	80 fa 04             	cmp    dl,0x4
c0011cd1:	74 78                	je     c0011d4b <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011cd3:	80 fa 02             	cmp    dl,0x2
c0011cd6:	0f 84 88 00 00 00    	je     c0011d64 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011cdc:	80 fa 03             	cmp    dl,0x3
c0011cdf:	0f 84 ad 00 00 00    	je     c0011d92 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011ce5:	fe ca                	dec    dl
c0011ce7:	0f 84 92 00 00 00    	je     c0011d7f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011ced:	43                   	inc    ebx
c0011cee:	31 f6                	xor    esi,esi
c0011cf0:	53                   	push   ebx
c0011cf1:	e8 1f fc ff ff       	call   c0011915 <Virt::getPageState(unsigned long)>
c0011cf6:	5f                   	pop    edi
c0011cf7:	89 df                	mov    edi,ebx
c0011cf9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011cfd:	c1 e7 0c             	shl    edi,0xc
c0011d00:	84 c0                	test   al,al
c0011d02:	75 ad                	jne    c0011cb1 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011d04:	83 ec 0c             	sub    esp,0xc
c0011d07:	68 99 96 02 c0       	push   0xc0029699
c0011d0c:	e8 6e 7f 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c0011d11:	e8 b3 fd ff ff       	call   c0011ac9 <Virt::getAKernelVAS()>
c0011d16:	5a                   	pop    edx
c0011d17:	59                   	pop    ecx
c0011d18:	57                   	push   edi
c0011d19:	50                   	push   eax
c0011d1a:	e8 5f ff ff ff       	call   c0011c7e <VAS::getPageTableEntry(unsigned long)>
c0011d1f:	83 c4 10             	add    esp,0x10
c0011d22:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d24:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011d28:	f6 c4 04             	test   ah,0x4
c0011d2b:	74 c0                	je     c0011ced <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011d2d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011d31:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d36:	83 ec 0c             	sub    esp,0xc
c0011d39:	50                   	push   eax
c0011d3a:	e8 2e df ff ff       	call   c000fc6d <Phys::freePage(unsigned long)>
c0011d3f:	83 c4 10             	add    esp,0x10
c0011d42:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011d46:	80 fa 04             	cmp    dl,0x4
c0011d49:	75 88                	jne    c0011cd3 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011d4b:	89 f0                	mov    eax,esi
c0011d4d:	84 c0                	test   al,al
c0011d4f:	75 47                	jne    c0011d98 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011d51:	c7 44 24 20 cc 94 02 c0 	mov    DWORD PTR [esp+0x20],0xc00294cc
c0011d59:	83 c4 10             	add    esp,0x10
c0011d5c:	5b                   	pop    ebx
c0011d5d:	5e                   	pop    esi
c0011d5e:	5f                   	pop    edi
c0011d5f:	e9 1b 7f 00 00       	jmp    c0019c7f <Krnl::panic(char const*)>
c0011d64:	89 f0                	mov    eax,esi
c0011d66:	84 c0                	test   al,al
c0011d68:	75 15                	jne    c0011d7f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011d6a:	83 ec 0c             	sub    esp,0xc
c0011d6d:	68 b5 96 02 c0       	push   0xc00296b5
c0011d72:	e8 08 7f 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c0011d77:	83 c4 10             	add    esp,0x10
c0011d7a:	e9 6e ff ff ff       	jmp    c0011ced <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011d7f:	83 ec 08             	sub    esp,0x8
c0011d82:	6a 00                	push   0x0
c0011d84:	53                   	push   ebx
c0011d85:	e8 56 fb ff ff       	call   c00118e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d8a:	83 c4 10             	add    esp,0x10
c0011d8d:	e9 5b ff ff ff       	jmp    c0011ced <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011d92:	89 f0                	mov    eax,esi
c0011d94:	84 c0                	test   al,al
c0011d96:	75 15                	jne    c0011dad <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011d98:	83 ec 08             	sub    esp,0x8
c0011d9b:	6a 00                	push   0x0
c0011d9d:	53                   	push   ebx
c0011d9e:	e8 3d fb ff ff       	call   c00118e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011da3:	83 c4 10             	add    esp,0x10
c0011da6:	83 c4 10             	add    esp,0x10
c0011da9:	5b                   	pop    ebx
c0011daa:	5e                   	pop    esi
c0011dab:	5f                   	pop    edi
c0011dac:	c3                   	ret    
c0011dad:	c7 44 24 20 d1 96 02 c0 	mov    DWORD PTR [esp+0x20],0xc00296d1
c0011db5:	83 c4 10             	add    esp,0x10
c0011db8:	5b                   	pop    ebx
c0011db9:	5e                   	pop    esi
c0011dba:	5f                   	pop    edi
c0011dbb:	e9 bf 7e 00 00       	jmp    c0019c7f <Krnl::panic(char const*)>

c0011dc0 <VAS::freeAllocatedPages(unsigned long)>:
c0011dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011dc8:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011dcc:	74 09                	je     c0011dd7 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011dce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011dd2:	e9 c6 fe ff ff       	jmp    c0011c9d <Virt::freeKernelVirtualPages(unsigned long)>
c0011dd7:	c7 44 24 04 f0 94 02 c0 	mov    DWORD PTR [esp+0x4],0xc00294f0
c0011ddf:	e9 45 0b 00 00       	jmp    c0012929 <Dbg::kprintf(char const*, ...)>

c0011de4 <VAS::virtualToPhysical(unsigned long)>:
c0011de4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011de8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011dec:	e8 8d fe ff ff       	call   c0011c7e <VAS::getPageTableEntry(unsigned long)>
c0011df1:	5a                   	pop    edx
c0011df2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011df4:	59                   	pop    ecx
c0011df5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011dfa:	c3                   	ret    
c0011dfb:	90                   	nop

c0011dfc <VAS::reflagRange(unsigned long, int, int, int)>:
c0011dfc:	55                   	push   ebp
c0011dfd:	57                   	push   edi
c0011dfe:	56                   	push   esi
c0011dff:	53                   	push   ebx
c0011e00:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011e04:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011e08:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011e0c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011e10:	85 db                	test   ebx,ebx
c0011e12:	7e 22                	jle    c0011e36 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011e14:	c1 e3 0c             	shl    ebx,0xc
c0011e17:	01 f3                	add    ebx,esi
c0011e19:	56                   	push   esi
c0011e1a:	81 c6 00 10 00 00    	add    esi,0x1000
c0011e20:	55                   	push   ebp
c0011e21:	e8 58 fe ff ff       	call   c0011c7e <VAS::getPageTableEntry(unsigned long)>
c0011e26:	5a                   	pop    edx
c0011e27:	59                   	pop    ecx
c0011e28:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011e2a:	21 f9                	and    ecx,edi
c0011e2c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011e30:	39 f3                	cmp    ebx,esi
c0011e32:	89 08                	mov    DWORD PTR [eax],ecx
c0011e34:	75 e3                	jne    c0011e19 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011e36:	5b                   	pop    ebx
c0011e37:	5e                   	pop    esi
c0011e38:	5f                   	pop    edi
c0011e39:	5d                   	pop    ebp
c0011e3a:	c3                   	ret    
c0011e3b:	90                   	nop

c0011e3c <VAS::setToWriteCombining(unsigned long, int)>:
c0011e3c:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c0011e41:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e47:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011e4e:	75 01                	jne    c0011e51 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011e50:	c3                   	ret    
c0011e51:	68 80 00 00 00       	push   0x80
c0011e56:	6a ff                	push   0xffffffff
c0011e58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e64:	e8 93 ff ff ff       	call   c0011dfc <VAS::reflagRange(unsigned long, int, int, int)>
c0011e69:	83 c4 14             	add    esp,0x14
c0011e6c:	c3                   	ret    
c0011e6d:	90                   	nop

c0011e6e <VAS::mapOtherVASIn(bool, VAS*)>:
c0011e6e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e77:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011e7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e7e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011e81:	19 c0                	sbb    eax,eax
c0011e83:	83 ca 03             	or     edx,0x3
c0011e86:	83 e0 fc             	and    eax,0xfffffffc
c0011e89:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011e90:	0f 20 d8             	mov    eax,cr3
c0011e93:	0f 22 d8             	mov    cr3,eax
c0011e96:	c3                   	ret    
c0011e97:	90                   	nop

c0011e98 <VAS::~VAS()>:
c0011e98:	83 ec 2c             	sub    esp,0x2c
c0011e9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011ea3:	e8 86 b3 00 00       	call   c001d22e <lockScheduler()>
c0011ea8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011ead:	8b 00                	mov    eax,DWORD PTR [eax]
c0011eaf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011eb2:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011eb8:	83 ec 04             	sub    esp,0x4
c0011ebb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011ebf:	6a 01                	push   0x1
c0011ec1:	50                   	push   eax
c0011ec2:	e8 a7 ff ff ff       	call   c0011e6e <VAS::mapOtherVASIn(bool, VAS*)>
c0011ec7:	83 c4 10             	add    esp,0x10
c0011eca:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011ed2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011eda:	0f 8f d7 00 00 00    	jg     c0011fb7 <VAS::~VAS()+0x11f>
c0011ee0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ee4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011ee7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011eeb:	c1 e2 02             	shl    edx,0x2
c0011eee:	01 d0                	add    eax,edx
c0011ef0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011efa:	83 e0 01             	and    eax,0x1
c0011efd:	0f 84 ab 00 00 00    	je     c0011fae <VAS::~VAS()+0x116>
c0011f03:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011f0b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011f13:	7f 75                	jg     c0011f8a <VAS::~VAS()+0xf2>
c0011f15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f19:	c1 e0 0a             	shl    eax,0xa
c0011f1c:	89 c2                	mov    edx,eax
c0011f1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f22:	01 d0                	add    eax,edx
c0011f24:	c1 e0 0c             	shl    eax,0xc
c0011f27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011f2b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011f30:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f32:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011f35:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011f3b:	83 ec 04             	sub    esp,0x4
c0011f3e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011f42:	6a 01                	push   0x1
c0011f44:	50                   	push   eax
c0011f45:	e8 08 fd ff ff       	call   c0011c52 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011f4a:	83 c4 10             	add    esp,0x10
c0011f4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011f51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f55:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011f5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f5f:	25 01 04 00 00       	and    eax,0x401
c0011f64:	3d 01 04 00 00       	cmp    eax,0x401
c0011f69:	75 19                	jne    c0011f84 <VAS::~VAS()+0xec>
c0011f6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f6f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f74:	83 ec 0c             	sub    esp,0xc
c0011f77:	50                   	push   eax
c0011f78:	e8 f0 dc ff ff       	call   c000fc6d <Phys::freePage(unsigned long)>
c0011f7d:	83 c4 10             	add    esp,0x10
c0011f80:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f84:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011f88:	eb 81                	jmp    c0011f0b <VAS::~VAS()+0x73>
c0011f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f8e:	25 00 04 00 00       	and    eax,0x400
c0011f93:	74 19                	je     c0011fae <VAS::~VAS()+0x116>
c0011f95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f99:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f9e:	83 ec 0c             	sub    esp,0xc
c0011fa1:	50                   	push   eax
c0011fa2:	e8 c6 dc ff ff       	call   c000fc6d <Phys::freePage(unsigned long)>
c0011fa7:	83 c4 10             	add    esp,0x10
c0011faa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011fae:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011fb2:	e9 1b ff ff ff       	jmp    c0011ed2 <VAS::~VAS()+0x3a>
c0011fb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fbb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011fbe:	83 ec 0c             	sub    esp,0xc
c0011fc1:	50                   	push   eax
c0011fc2:	e8 d6 fc ff ff       	call   c0011c9d <Virt::freeKernelVirtualPages(unsigned long)>
c0011fc7:	83 c4 10             	add    esp,0x10
c0011fca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fce:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fd1:	83 ec 0c             	sub    esp,0xc
c0011fd4:	50                   	push   eax
c0011fd5:	e8 93 dc ff ff       	call   c000fc6d <Phys::freePage(unsigned long)>
c0011fda:	83 c4 10             	add    esp,0x10
c0011fdd:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fe5:	c1 e0 02             	shl    eax,0x2
c0011fe8:	83 ec 08             	sub    esp,0x8
c0011feb:	50                   	push   eax
c0011fec:	68 14 95 02 c0       	push   0xc0029514
c0011ff1:	e8 33 09 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0011ff6:	83 c4 10             	add    esp,0x10
c0011ff9:	e8 32 b2 00 00       	call   c001d230 <unlockScheduler()>
c0011ffe:	90                   	nop
c0011fff:	83 c4 2c             	add    esp,0x2c
c0012002:	c3                   	ret    
c0012003:	90                   	nop

c0012004 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012004:	55                   	push   ebp
c0012005:	57                   	push   edi
c0012006:	56                   	push   esi
c0012007:	53                   	push   ebx
c0012008:	83 ec 1c             	sub    esp,0x1c
c001200b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001200f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012013:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012019:	77 08                	ja     c0012023 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001201b:	0f 20 d8             	mov    eax,cr3
c001201e:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012021:	75 47                	jne    c001206a <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012023:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012027:	09 d8                	or     eax,ebx
c0012029:	a9 ff 0f 00 00       	test   eax,0xfff
c001202e:	75 57                	jne    c0012087 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012030:	89 de                	mov    esi,ebx
c0012032:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012035:	c1 ee 16             	shr    esi,0x16
c0012038:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001203f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012043:	74 54                	je     c0012099 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012045:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012049:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001204f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012053:	c1 e6 0c             	shl    esi,0xc
c0012056:	c1 eb 0a             	shr    ebx,0xa
c0012059:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001205f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012062:	83 c4 1c             	add    esp,0x1c
c0012065:	5b                   	pop    ebx
c0012066:	5e                   	pop    esi
c0012067:	5f                   	pop    edi
c0012068:	5d                   	pop    ebp
c0012069:	c3                   	ret    
c001206a:	83 ec 0c             	sub    esp,0xc
c001206d:	68 34 95 02 c0       	push   0xc0029534
c0012072:	e8 b2 08 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0012077:	83 c4 10             	add    esp,0x10
c001207a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001207e:	09 d8                	or     eax,ebx
c0012080:	a9 ff 0f 00 00       	test   eax,0xfff
c0012085:	74 a9                	je     c0012030 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012087:	83 ec 0c             	sub    esp,0xc
c001208a:	68 9c 95 02 c0       	push   0xc002959c
c001208f:	e8 eb 7b 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c0012094:	83 c4 10             	add    esp,0x10
c0012097:	eb 97                	jmp    c0012030 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012099:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001209d:	e8 55 dc ff ff       	call   c000fcf7 <Phys::allocatePage()>
c00120a2:	89 c5                	mov    ebp,eax
c00120a4:	e8 20 fa ff ff       	call   c0011ac9 <Virt::getAKernelVAS()>
c00120a9:	83 ec 0c             	sub    esp,0xc
c00120ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00120b0:	6a 01                	push   0x1
c00120b2:	e8 82 f8 ff ff       	call   c0011939 <Virt::allocateKernelVirtualPages(int)>
c00120b7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00120be:	6a 01                	push   0x1
c00120c0:	50                   	push   eax
c00120c1:	55                   	push   ebp
c00120c2:	81 cd 07 04 00 00    	or     ebp,0x407
c00120c8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00120cc:	51                   	push   ecx
c00120cd:	e8 26 02 00 00       	call   c00122f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00120d2:	83 c4 1c             	add    esp,0x1c
c00120d5:	68 00 10 00 00       	push   0x1000
c00120da:	6a 00                	push   0x0
c00120dc:	50                   	push   eax
c00120dd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00120e1:	e8 de e5 fe ff       	call   c00006c4 <memset>
c00120e6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00120ea:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00120ed:	e8 ab fb ff ff       	call   c0011c9d <Virt::freeKernelVirtualPages(unsigned long)>
c00120f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00120f6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00120f9:	83 c4 10             	add    esp,0x10
c00120fc:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00120ff:	e9 41 ff ff ff       	jmp    c0012045 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012104 <VAS::allocatePages(int, int)>:
c0012104:	55                   	push   ebp
c0012105:	57                   	push   edi
c0012106:	56                   	push   esi
c0012107:	53                   	push   ebx
c0012108:	83 ec 1c             	sub    esp,0x1c
c001210b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001210f:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c0012114:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001211a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012120:	83 e0 01             	and    eax,0x1
c0012123:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012127:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001212b:	0f 85 cc 00 00 00    	jne    c00121fd <VAS::allocatePages(int, int)+0xf9>
c0012131:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012134:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012138:	85 c0                	test   eax,eax
c001213a:	0f 84 a1 00 00 00    	je     c00121e1 <VAS::allocatePages(int, int)+0xdd>
c0012140:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012144:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012148:	c1 e6 0c             	shl    esi,0xc
c001214b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001214f:	85 c0                	test   eax,eax
c0012151:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012154:	7e 33                	jle    c0012189 <VAS::allocatePages(int, int)+0x85>
c0012156:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001215a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001215e:	81 cd 00 04 00 00    	or     ebp,0x400
c0012164:	e8 8e db ff ff       	call   c000fcf7 <Phys::allocatePage()>
c0012169:	55                   	push   ebp
c001216a:	53                   	push   ebx
c001216b:	50                   	push   eax
c001216c:	57                   	push   edi
c001216d:	e8 92 fe ff ff       	call   c0012004 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012172:	83 c4 10             	add    esp,0x10
c0012175:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001217a:	74 03                	je     c001217f <VAS::allocatePages(int, int)+0x7b>
c001217c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001217f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012185:	39 de                	cmp    esi,ebx
c0012187:	75 db                	jne    c0012164 <VAS::allocatePages(int, int)+0x60>
c0012189:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001218e:	75 12                	jne    c00121a2 <VAS::allocatePages(int, int)+0x9e>
c0012190:	0f 20 d8             	mov    eax,cr3
c0012193:	0f 22 d8             	mov    cr3,eax
c0012196:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001219a:	83 c4 1c             	add    esp,0x1c
c001219d:	5b                   	pop    ebx
c001219e:	5e                   	pop    esi
c001219f:	5f                   	pop    edi
c00121a0:	5d                   	pop    ebp
c00121a1:	c3                   	ret    
c00121a2:	c1 ee 0a             	shr    esi,0xa
c00121a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00121a9:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00121af:	c1 eb 0a             	shr    ebx,0xa
c00121b2:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00121b8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00121be:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00121c4:	39 c3                	cmp    ebx,eax
c00121c6:	77 ce                	ja     c0012196 <VAS::allocatePages(int, int)+0x92>
c00121c8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00121cb:	81 c3 00 10 00 00    	add    ebx,0x1000
c00121d1:	39 d8                	cmp    eax,ebx
c00121d3:	73 f3                	jae    c00121c8 <VAS::allocatePages(int, int)+0xc4>
c00121d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121d9:	83 c4 1c             	add    esp,0x1c
c00121dc:	5b                   	pop    ebx
c00121dd:	5e                   	pop    esi
c00121de:	5f                   	pop    edi
c00121df:	5d                   	pop    ebp
c00121e0:	c3                   	ret    
c00121e1:	83 ec 0c             	sub    esp,0xc
c00121e4:	68 c0 95 02 c0       	push   0xc00295c0
c00121e9:	e8 91 7a 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c00121ee:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00121f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121f5:	83 c4 10             	add    esp,0x10
c00121f8:	e9 43 ff ff ff       	jmp    c0012140 <VAS::allocatePages(int, int)+0x3c>
c00121fd:	83 ec 0c             	sub    esp,0xc
c0012200:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012204:	e8 30 f7 ff ff       	call   c0011939 <Virt::allocateKernelVirtualPages(int)>
c0012209:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001220d:	83 c4 10             	add    esp,0x10
c0012210:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012215:	0f 87 9b 00 00 00    	ja     c00122b6 <VAS::allocatePages(int, int)+0x1b2>
c001221b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001221f:	85 d2                	test   edx,edx
c0012221:	7e 3c                	jle    c001225f <VAS::allocatePages(int, int)+0x15b>
c0012223:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012227:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001222b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001222f:	c1 e5 0c             	shl    ebp,0xc
c0012232:	81 ce 00 04 00 00    	or     esi,0x400
c0012238:	01 dd                	add    ebp,ebx
c001223a:	e8 b8 da ff ff       	call   c000fcf7 <Phys::allocatePage()>
c001223f:	56                   	push   esi
c0012240:	53                   	push   ebx
c0012241:	50                   	push   eax
c0012242:	57                   	push   edi
c0012243:	e8 bc fd ff ff       	call   c0012004 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012248:	83 c4 10             	add    esp,0x10
c001224b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012250:	74 03                	je     c0012255 <VAS::allocatePages(int, int)+0x151>
c0012252:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012255:	81 c3 00 10 00 00    	add    ebx,0x1000
c001225b:	39 dd                	cmp    ebp,ebx
c001225d:	75 db                	jne    c001223a <VAS::allocatePages(int, int)+0x136>
c001225f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012264:	0f 84 26 ff ff ff    	je     c0012190 <VAS::allocatePages(int, int)+0x8c>
c001226a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001226e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012272:	89 d3                	mov    ebx,edx
c0012274:	c1 e0 0c             	shl    eax,0xc
c0012277:	c1 eb 0a             	shr    ebx,0xa
c001227a:	01 d0                	add    eax,edx
c001227c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012282:	c1 e8 0a             	shr    eax,0xa
c0012285:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001228b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012290:	2d 00 00 40 00       	sub    eax,0x400000
c0012295:	39 c3                	cmp    ebx,eax
c0012297:	0f 87 f9 fe ff ff    	ja     c0012196 <VAS::allocatePages(int, int)+0x92>
c001229d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00122a0:	81 c3 00 10 00 00    	add    ebx,0x1000
c00122a6:	39 d8                	cmp    eax,ebx
c00122a8:	73 f3                	jae    c001229d <VAS::allocatePages(int, int)+0x199>
c00122aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00122ae:	83 c4 1c             	add    esp,0x1c
c00122b1:	5b                   	pop    ebx
c00122b2:	5e                   	pop    esi
c00122b3:	5f                   	pop    edi
c00122b4:	5d                   	pop    ebp
c00122b5:	c3                   	ret    
c00122b6:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c00122bb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122c1:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00122c8:	0f 84 4d ff ff ff    	je     c001221b <VAS::allocatePages(int, int)+0x117>
c00122ce:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00122d6:	e9 40 ff ff ff       	jmp    c001221b <VAS::allocatePages(int, int)+0x117>
c00122db:	90                   	nop

c00122dc <VAS::setCPUSpecific(unsigned long)>:
c00122dc:	83 ec 0c             	sub    esp,0xc
c00122df:	6a 05                	push   0x5
c00122e1:	68 00 00 40 c2       	push   0xc2400000
c00122e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122ee:	e8 11 fd ff ff       	call   c0012004 <VAS::mapPage(unsigned long, unsigned long, int)>
c00122f3:	83 c4 1c             	add    esp,0x1c
c00122f6:	c3                   	ret    
c00122f7:	90                   	nop

c00122f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00122f8:	55                   	push   ebp
c00122f9:	57                   	push   edi
c00122fa:	56                   	push   esi
c00122fb:	53                   	push   ebx
c00122fc:	83 ec 1c             	sub    esp,0x1c
c00122ff:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c0012304:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012308:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001230e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012312:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012318:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001231c:	83 e0 01             	and    eax,0x1
c001231f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012323:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012327:	85 c0                	test   eax,eax
c0012329:	7e 39                	jle    c0012364 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001232b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001232f:	89 f3                	mov    ebx,esi
c0012331:	c1 e0 0c             	shl    eax,0xc
c0012334:	01 f0                	add    eax,esi
c0012336:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001233a:	55                   	push   ebp
c001233b:	53                   	push   ebx
c001233c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012340:	29 f0                	sub    eax,esi
c0012342:	01 d8                	add    eax,ebx
c0012344:	50                   	push   eax
c0012345:	57                   	push   edi
c0012346:	e8 b9 fc ff ff       	call   c0012004 <VAS::mapPage(unsigned long, unsigned long, int)>
c001234b:	83 c4 10             	add    esp,0x10
c001234e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012353:	74 03                	je     c0012358 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012355:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012358:	81 c3 00 10 00 00    	add    ebx,0x1000
c001235e:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012362:	75 d6                	jne    c001233a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012364:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012369:	75 10                	jne    c001237b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c001236b:	0f 20 d8             	mov    eax,cr3
c001236e:	0f 22 d8             	mov    cr3,eax
c0012371:	83 c4 1c             	add    esp,0x1c
c0012374:	89 f0                	mov    eax,esi
c0012376:	5b                   	pop    ebx
c0012377:	5e                   	pop    esi
c0012378:	5f                   	pop    edi
c0012379:	5d                   	pop    ebp
c001237a:	c3                   	ret    
c001237b:	89 f3                	mov    ebx,esi
c001237d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012381:	c1 eb 0a             	shr    ebx,0xa
c0012384:	c1 e0 0c             	shl    eax,0xc
c0012387:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001238d:	01 f0                	add    eax,esi
c001238f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012395:	c1 e8 0a             	shr    eax,0xa
c0012398:	25 00 f0 ff ff       	and    eax,0xfffff000
c001239d:	2d 00 00 40 00       	sub    eax,0x400000
c00123a2:	39 c3                	cmp    ebx,eax
c00123a4:	77 cb                	ja     c0012371 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00123a6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123a9:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123af:	39 d8                	cmp    eax,ebx
c00123b1:	73 f3                	jae    c00123a6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00123b3:	83 c4 1c             	add    esp,0x1c
c00123b6:	89 f0                	mov    eax,esi
c00123b8:	5b                   	pop    ebx
c00123b9:	5e                   	pop    esi
c00123ba:	5f                   	pop    edi
c00123bb:	5d                   	pop    ebp
c00123bc:	c3                   	ret    
c00123bd:	90                   	nop

c00123be <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00123be:	55                   	push   ebp
c00123bf:	57                   	push   edi
c00123c0:	56                   	push   esi
c00123c1:	53                   	push   ebx
c00123c2:	83 ec 1c             	sub    esp,0x1c
c00123c5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00123c9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00123cd:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00123d1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00123d5:	a9 ff 0f 00 00       	test   eax,0xfff
c00123da:	75 4a                	jne    c0012426 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00123dc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00123e0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00123e3:	c1 eb 16             	shr    ebx,0x16
c00123e6:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00123ed:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00123f1:	74 4d                	je     c0012440 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00123f3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00123f7:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00123fb:	c1 e8 0a             	shr    eax,0xa
c00123fe:	80 fa 01             	cmp    dl,0x1
c0012401:	19 d2                	sbb    edx,edx
c0012403:	c1 e3 0c             	shl    ebx,0xc
c0012406:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001240a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012410:	25 fc 0f 00 00       	and    eax,0xffc
c0012415:	01 d8                	add    eax,ebx
c0012417:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001241e:	83 c4 1c             	add    esp,0x1c
c0012421:	5b                   	pop    ebx
c0012422:	5e                   	pop    esi
c0012423:	5f                   	pop    edi
c0012424:	5d                   	pop    ebp
c0012425:	c3                   	ret    
c0012426:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001242a:	83 ec 0c             	sub    esp,0xc
c001242d:	68 ec 95 02 c0       	push   0xc00295ec
c0012432:	e8 48 78 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c0012437:	83 c4 10             	add    esp,0x10
c001243a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001243e:	eb 9c                	jmp    c00123dc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012440:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012444:	e8 ae d8 ff ff       	call   c000fcf7 <Phys::allocatePage()>
c0012449:	89 c5                	mov    ebp,eax
c001244b:	e8 79 f6 ff ff       	call   c0011ac9 <Virt::getAKernelVAS()>
c0012450:	83 ec 0c             	sub    esp,0xc
c0012453:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012457:	6a 01                	push   0x1
c0012459:	e8 db f4 ff ff       	call   c0011939 <Virt::allocateKernelVirtualPages(int)>
c001245e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012465:	6a 01                	push   0x1
c0012467:	50                   	push   eax
c0012468:	55                   	push   ebp
c0012469:	81 cd 07 04 00 00    	or     ebp,0x407
c001246f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012473:	51                   	push   ecx
c0012474:	e8 7f fe ff ff       	call   c00122f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012479:	83 c4 1c             	add    esp,0x1c
c001247c:	68 00 10 00 00       	push   0x1000
c0012481:	6a 00                	push   0x0
c0012483:	50                   	push   eax
c0012484:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012488:	e8 37 e2 fe ff       	call   c00006c4 <memset>
c001248d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012491:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012494:	e8 04 f8 ff ff       	call   c0011c9d <Virt::freeKernelVirtualPages(unsigned long)>
c0012499:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001249c:	83 c4 10             	add    esp,0x10
c001249f:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00124a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124a6:	e9 48 ff ff ff       	jmp    c00123f3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00124ab:	90                   	nop

c00124ac <VAS::VAS(bool)>:
c00124ac:	53                   	push   ebx
c00124ad:	83 ec 28             	sub    esp,0x28
c00124b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124b4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00124b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00124c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124c7:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00124cb:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00124ce:	e8 24 d8 ff ff       	call   c000fcf7 <Phys::allocatePage()>
c00124d3:	89 c2                	mov    edx,eax
c00124d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124d9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00124dc:	e8 e8 f5 ff ff       	call   c0011ac9 <Virt::getAKernelVAS()>
c00124e1:	89 c3                	mov    ebx,eax
c00124e3:	83 ec 0c             	sub    esp,0xc
c00124e6:	6a 01                	push   0x1
c00124e8:	e8 4c f4 ff ff       	call   c0011939 <Virt::allocateKernelVirtualPages(int)>
c00124ed:	83 c4 10             	add    esp,0x10
c00124f0:	89 c2                	mov    edx,eax
c00124f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124f6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00124f9:	83 ec 0c             	sub    esp,0xc
c00124fc:	6a 03                	push   0x3
c00124fe:	6a 01                	push   0x1
c0012500:	52                   	push   edx
c0012501:	50                   	push   eax
c0012502:	53                   	push   ebx
c0012503:	e8 f0 fd ff ff       	call   c00122f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012508:	83 c4 20             	add    esp,0x20
c001250b:	89 c2                	mov    edx,eax
c001250d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012511:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012514:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001251c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012524:	7f 1c                	jg     c0012542 <VAS::VAS(bool)+0x96>
c0012526:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001252a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001252d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012531:	c1 e2 02             	shl    edx,0x2
c0012534:	01 d0                	add    eax,edx
c0012536:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001253c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012540:	eb da                	jmp    c001251c <VAS::VAS(bool)+0x70>
c0012542:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001254a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012552:	7f 7a                	jg     c00125ce <VAS::VAS(bool)+0x122>
c0012554:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012558:	2d 00 02 00 00       	sub    eax,0x200
c001255d:	c1 e0 0c             	shl    eax,0xc
c0012560:	83 c8 03             	or     eax,0x3
c0012563:	89 c2                	mov    edx,eax
c0012565:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c001256a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012570:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012576:	83 e0 10             	and    eax,0x10
c0012579:	84 c0                	test   al,al
c001257b:	74 07                	je     c0012584 <VAS::VAS(bool)+0xd8>
c001257d:	b8 00 01 00 00       	mov    eax,0x100
c0012582:	eb 05                	jmp    c0012589 <VAS::VAS(bool)+0xdd>
c0012584:	b8 00 00 00 00       	mov    eax,0x0
c0012589:	09 d0                	or     eax,edx
c001258b:	89 c1                	mov    ecx,eax
c001258d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012591:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012594:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012598:	c1 e2 02             	shl    edx,0x2
c001259b:	01 d0                	add    eax,edx
c001259d:	89 ca                	mov    edx,ecx
c001259f:	89 10                	mov    DWORD PTR [eax],edx
c00125a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00125a5:	2d 40 03 00 00       	sub    eax,0x340
c00125aa:	83 f8 7f             	cmp    eax,0x7f
c00125ad:	77 16                	ja     c00125c5 <VAS::VAS(bool)+0x119>
c00125af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125b3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00125b6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00125ba:	c1 e2 02             	shl    edx,0x2
c00125bd:	01 d0                	add    eax,edx
c00125bf:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00125c5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00125c9:	e9 7c ff ff ff       	jmp    c001254a <VAS::VAS(bool)+0x9e>
c00125ce:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c00125d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125d9:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00125df:	83 e0 10             	and    eax,0x10
c00125e2:	84 c0                	test   al,al
c00125e4:	74 07                	je     c00125ed <VAS::VAS(bool)+0x141>
c00125e6:	b8 03 41 00 00       	mov    eax,0x4103
c00125eb:	eb 05                	jmp    c00125f2 <VAS::VAS(bool)+0x146>
c00125ed:	b8 03 40 00 00       	mov    eax,0x4003
c00125f2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00125f6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00125f9:	81 c2 20 0c 00 00    	add    edx,0xc20
c00125ff:	89 02                	mov    DWORD PTR [edx],eax
c0012601:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c0012606:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001260c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012612:	83 ec 08             	sub    esp,0x8
c0012615:	50                   	push   eax
c0012616:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001261a:	e8 bd fc ff ff       	call   c00122dc <VAS::setCPUSpecific(unsigned long)>
c001261f:	83 c4 10             	add    esp,0x10
c0012622:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012626:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012629:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c001262e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012634:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001263a:	83 e0 10             	and    eax,0x10
c001263d:	84 c0                	test   al,al
c001263f:	74 07                	je     c0012648 <VAS::VAS(bool)+0x19c>
c0012641:	b8 00 01 00 00       	mov    eax,0x100
c0012646:	eb 05                	jmp    c001264d <VAS::VAS(bool)+0x1a1>
c0012648:	b8 00 00 00 00       	mov    eax,0x0
c001264d:	09 c2                	or     edx,eax
c001264f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012653:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012656:	05 fc 0f 00 00       	add    eax,0xffc
c001265b:	83 ca 03             	or     edx,0x3
c001265e:	89 10                	mov    DWORD PTR [eax],edx
c0012660:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c0012665:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001266b:	83 ec 0c             	sub    esp,0xc
c001266e:	50                   	push   eax
c001266f:	e8 c8 19 00 00       	call   c001403c <Device::getName()>
c0012674:	83 c4 10             	add    esp,0x10
c0012677:	83 ec 08             	sub    esp,0x8
c001267a:	68 eb 96 02 c0       	push   0xc00296eb
c001267f:	50                   	push   eax
c0012680:	e8 2f e1 fe ff       	call   c00007b4 <strcmp>
c0012685:	83 c4 10             	add    esp,0x10
c0012688:	85 c0                	test   eax,eax
c001268a:	0f 94 c0             	sete   al
c001268d:	84 c0                	test   al,al
c001268f:	74 70                	je     c0012701 <VAS::VAS(bool)+0x255>
c0012691:	e8 7b ab 00 00       	call   c001d211 <disableIRQs()>
c0012696:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c001269b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00126a1:	05 7c 09 00 00       	add    eax,0x97c
c00126a6:	83 ec 0c             	sub    esp,0xc
c00126a9:	50                   	push   eax
c00126aa:	e8 27 ca ff ff       	call   c000f0d6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00126af:	83 c4 10             	add    esp,0x10
c00126b2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126b7:	89 c3                	mov    ebx,eax
c00126b9:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c00126be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00126c4:	05 7c 09 00 00       	add    eax,0x97c
c00126c9:	83 ec 0c             	sub    esp,0xc
c00126cc:	50                   	push   eax
c00126cd:	e8 04 ca ff ff       	call   c000f0d6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00126d2:	83 c4 10             	add    esp,0x10
c00126d5:	83 ec 08             	sub    esp,0x8
c00126d8:	50                   	push   eax
c00126d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00126dd:	e8 9c f5 ff ff       	call   c0011c7e <VAS::getPageTableEntry(unsigned long)>
c00126e2:	83 c4 10             	add    esp,0x10
c00126e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00126e7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126ec:	6a 11                	push   0x11
c00126ee:	53                   	push   ebx
c00126ef:	50                   	push   eax
c00126f0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00126f4:	e8 0b f9 ff ff       	call   c0012004 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126f9:	83 c4 10             	add    esp,0x10
c00126fc:	e8 1e ab 00 00       	call   c001d21f <enableIRQs()>
c0012701:	90                   	nop
c0012702:	83 c4 28             	add    esp,0x28
c0012705:	5b                   	pop    ebx
c0012706:	c3                   	ret    

c0012707 <mapVASFirstTime>:
c0012707:	55                   	push   ebp
c0012708:	57                   	push   edi
c0012709:	56                   	push   esi
c001270a:	53                   	push   ebx
c001270b:	83 ec 0c             	sub    esp,0xc
c001270e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012713:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012716:	4a                   	dec    edx
c0012717:	0f 84 8e 00 00 00    	je     c00127ab <mapVASFirstTime+0xa4>
c001271d:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012720:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012723:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012728:	c1 e5 15             	shl    ebp,0x15
c001272b:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012730:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012736:	29 eb                	sub    ebx,ebp
c0012738:	29 ee                	sub    esi,ebp
c001273a:	e8 b8 d5 ff ff       	call   c000fcf7 <Phys::allocatePage()>
c001273f:	83 ec 0c             	sub    esp,0xc
c0012742:	68 03 04 00 00       	push   0x403
c0012747:	6a 01                	push   0x1
c0012749:	53                   	push   ebx
c001274a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012750:	50                   	push   eax
c0012751:	57                   	push   edi
c0012752:	e8 a1 fb ff ff       	call   c00122f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012757:	83 c4 20             	add    esp,0x20
c001275a:	39 f3                	cmp    ebx,esi
c001275c:	75 dc                	jne    c001273a <mapVASFirstTime+0x33>
c001275e:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012763:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012768:	29 ee                	sub    esi,ebp
c001276a:	29 e8                	sub    eax,ebp
c001276c:	89 c5                	mov    ebp,eax
c001276e:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012772:	19 db                	sbb    ebx,ebx
c0012774:	e8 7e d5 ff ff       	call   c000fcf7 <Phys::allocatePage()>
c0012779:	83 e3 04             	and    ebx,0x4
c001277c:	83 ec 0c             	sub    esp,0xc
c001277f:	81 c3 03 04 00 00    	add    ebx,0x403
c0012785:	53                   	push   ebx
c0012786:	6a 01                	push   0x1
c0012788:	56                   	push   esi
c0012789:	81 ee 00 10 00 00    	sub    esi,0x1000
c001278f:	50                   	push   eax
c0012790:	57                   	push   edi
c0012791:	e8 62 fb ff ff       	call   c00122f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012796:	83 c4 20             	add    esp,0x20
c0012799:	39 f5                	cmp    ebp,esi
c001279b:	75 d1                	jne    c001276e <mapVASFirstTime+0x67>
c001279d:	0f 20 d8             	mov    eax,cr3
c00127a0:	0f 22 d8             	mov    cr3,eax
c00127a3:	83 c4 0c             	add    esp,0xc
c00127a6:	5b                   	pop    ebx
c00127a7:	5e                   	pop    esi
c00127a8:	5f                   	pop    edi
c00127a9:	5d                   	pop    ebp
c00127aa:	c3                   	ret    
c00127ab:	83 ec 0c             	sub    esp,0xc
c00127ae:	68 f9 96 02 c0       	push   0xc00296f9
c00127b3:	e8 71 01 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00127b8:	83 c4 10             	add    esp,0x10
c00127bb:	83 c4 0c             	add    esp,0xc
c00127be:	5b                   	pop    ebx
c00127bf:	5e                   	pop    esi
c00127c0:	5f                   	pop    edi
c00127c1:	5d                   	pop    ebp
c00127c2:	c3                   	ret    

c00127c3 <__cxa_atexit>:
c00127c3:	31 c0                	xor    eax,eax
c00127c5:	c3                   	ret    

c00127c6 <__cxa_finalize>:
c00127c6:	c3                   	ret    

c00127c7 <__stack_chk_fail>:
c00127c7:	55                   	push   ebp
c00127c8:	89 e5                	mov    ebp,esp
c00127ca:	83 ec 14             	sub    esp,0x14
c00127cd:	68 12 97 02 c0       	push   0xc0029712
c00127d2:	e8 52 01 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00127d7:	58                   	pop    eax
c00127d8:	5a                   	pop    edx
c00127d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00127dc:	68 62 97 02 c0       	push   0xc0029762
c00127e1:	e8 43 01 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00127e6:	59                   	pop    ecx
c00127e7:	58                   	pop    eax
c00127e8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127eb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127ee:	68 62 97 02 c0       	push   0xc0029762
c00127f3:	e8 31 01 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00127f8:	5a                   	pop    edx
c00127f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127fc:	59                   	pop    ecx
c00127fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00127ff:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012802:	68 62 97 02 c0       	push   0xc0029762
c0012807:	e8 1d 01 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001280c:	5a                   	pop    edx
c001280d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012810:	59                   	pop    ecx
c0012811:	8b 00                	mov    eax,DWORD PTR [eax]
c0012813:	8b 00                	mov    eax,DWORD PTR [eax]
c0012815:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012818:	68 62 97 02 c0       	push   0xc0029762
c001281d:	e8 07 01 00 00       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0012822:	c7 04 24 6a 97 02 c0 	mov    DWORD PTR [esp],0xc002976a
c0012829:	e8 51 74 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c001282e:	83 c4 10             	add    esp,0x10
c0012831:	c9                   	leave  
c0012832:	c3                   	ret    

c0012833 <__cxa_pure_virtual>:
c0012833:	83 ec 18             	sub    esp,0x18
c0012836:	68 82 97 02 c0       	push   0xc0029782
c001283b:	e8 3f 74 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c0012840:	83 c4 1c             	add    esp,0x1c
c0012843:	c3                   	ret    

c0012844 <operator new[](unsigned long)>:
c0012844:	e9 11 ce ff ff       	jmp    c000f65a <malloc>

c0012849 <operator delete(void*, unsigned long)>:
c0012849:	e9 2c ce ff ff       	jmp    c000f67a <rfree>

c001284e <operator delete[](void*)>:
c001284e:	e9 27 ce ff ff       	jmp    c000f67a <rfree>

c0012853 <operator delete[](void*, unsigned long)>:
c0012853:	e9 22 ce ff ff       	jmp    c000f67a <rfree>

c0012858 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012858:	57                   	push   edi
c0012859:	b9 3f 00 00 00       	mov    ecx,0x3f
c001285e:	56                   	push   esi
c001285f:	be 98 97 02 c0       	mov    esi,0xc0029798
c0012864:	53                   	push   ebx
c0012865:	83 ec 40             	sub    esp,0x40
c0012868:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001286c:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012870:	fc                   	cld    
c0012871:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012873:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012877:	83 f9 3e             	cmp    ecx,0x3e
c001287a:	7e 05                	jle    c0012881 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c001287c:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012881:	89 df                	mov    edi,ebx
c0012883:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012887:	eb 02                	jmp    c001288b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012889:	89 c7                	mov    edi,eax
c001288b:	31 d2                	xor    edx,edx
c001288d:	46                   	inc    esi
c001288e:	89 f8                	mov    eax,edi
c0012890:	f7 f1                	div    ecx
c0012892:	39 cf                	cmp    edi,ecx
c0012894:	73 f3                	jae    c0012889 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012896:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012899:	eb 02                	jmp    c001289d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c001289b:	89 c3                	mov    ebx,eax
c001289d:	31 d2                	xor    edx,edx
c001289f:	4e                   	dec    esi
c00128a0:	89 d8                	mov    eax,ebx
c00128a2:	f7 f1                	div    ecx
c00128a4:	39 cb                	cmp    ebx,ecx
c00128a6:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00128aa:	88 16                	mov    BYTE PTR [esi],dl
c00128ac:	73 ed                	jae    c001289b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c00128ae:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00128b2:	83 c4 40             	add    esp,0x40
c00128b5:	5b                   	pop    ebx
c00128b6:	5e                   	pop    esi
c00128b7:	5f                   	pop    edi
c00128b8:	c3                   	ret    

c00128b9 <Dbg::logc(char)>:
c00128b9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00128bd:	ba fd 03 00 00       	mov    edx,0x3fd
c00128c2:	ec                   	in     al,dx
c00128c3:	a8 20                	test   al,0x20
c00128c5:	74 fb                	je     c00128c2 <Dbg::logc(char)+0x9>
c00128c7:	ba f8 03 00 00       	mov    edx,0x3f8
c00128cc:	88 c8                	mov    al,cl
c00128ce:	ee                   	out    dx,al
c00128cf:	c3                   	ret    

c00128d0 <Dbg::logs(char*)>:
c00128d0:	53                   	push   ebx
c00128d1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00128d5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00128d8:	84 c0                	test   al,al
c00128da:	74 0f                	je     c00128eb <Dbg::logs(char*)+0x1b>
c00128dc:	50                   	push   eax
c00128dd:	43                   	inc    ebx
c00128de:	e8 d6 ff ff ff       	call   c00128b9 <Dbg::logc(char)>
c00128e3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00128e6:	5a                   	pop    edx
c00128e7:	84 c0                	test   al,al
c00128e9:	75 f1                	jne    c00128dc <Dbg::logs(char*)+0xc>
c00128eb:	5b                   	pop    ebx
c00128ec:	c3                   	ret    

c00128ed <Dbg::logWriteInt(unsigned int)>:
c00128ed:	83 ec 10             	sub    esp,0x10
c00128f0:	6a 0a                	push   0xa
c00128f2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128f6:	50                   	push   eax
c00128f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128fb:	e8 58 ff ff ff       	call   c0012858 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012900:	50                   	push   eax
c0012901:	e8 ca ff ff ff       	call   c00128d0 <Dbg::logs(char*)>
c0012906:	83 c4 20             	add    esp,0x20
c0012909:	c3                   	ret    

c001290a <Dbg::logWriteIntBase(unsigned int, int)>:
c001290a:	83 ec 10             	sub    esp,0x10
c001290d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012911:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012915:	50                   	push   eax
c0012916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001291a:	e8 39 ff ff ff       	call   c0012858 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001291f:	50                   	push   eax
c0012920:	e8 ab ff ff ff       	call   c00128d0 <Dbg::logs(char*)>
c0012925:	83 c4 20             	add    esp,0x20
c0012928:	c3                   	ret    

c0012929 <Dbg::kprintf(char const*, ...)>:
c0012929:	55                   	push   ebp
c001292a:	57                   	push   edi
c001292b:	56                   	push   esi
c001292c:	53                   	push   ebx
c001292d:	83 ec 0c             	sub    esp,0xc
c0012930:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012934:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012938:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001293c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001293f:	84 c0                	test   al,al
c0012941:	74 4a                	je     c001298d <Dbg::kprintf(char const*, ...)+0x64>
c0012943:	31 db                	xor    ebx,ebx
c0012945:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012948:	3c 25                	cmp    al,0x25
c001294a:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001294d:	0f 85 e4 00 00 00    	jne    c0012a37 <Dbg::kprintf(char const*, ...)+0x10e>
c0012953:	83 c3 02             	add    ebx,0x2
c0012956:	8a 07                	mov    al,BYTE PTR [edi]
c0012958:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c001295b:	83 e8 25             	sub    eax,0x25
c001295e:	3c 53                	cmp    al,0x53
c0012960:	0f 87 ba 00 00 00    	ja     c0012a20 <Dbg::kprintf(char const*, ...)+0xf7>
c0012966:	0f b6 c0             	movzx  eax,al
c0012969:	ff 24 85 d8 97 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6828]
c0012970:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012974:	89 c8                	mov    eax,ecx
c0012976:	83 c1 04             	add    ecx,0x4
c0012979:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001297d:	ff 30                	push   DWORD PTR [eax]
c001297f:	e8 4c ff ff ff       	call   c00128d0 <Dbg::logs(char*)>
c0012984:	58                   	pop    eax
c0012985:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012989:	84 c0                	test   al,al
c001298b:	75 b8                	jne    c0012945 <Dbg::kprintf(char const*, ...)+0x1c>
c001298d:	83 c4 0c             	add    esp,0xc
c0012990:	5b                   	pop    ebx
c0012991:	5e                   	pop    esi
c0012992:	5f                   	pop    edi
c0012993:	5d                   	pop    ebp
c0012994:	c3                   	ret    
c0012995:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012999:	89 d0                	mov    eax,edx
c001299b:	83 c2 04             	add    edx,0x4
c001299e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00129a2:	ff 30                	push   DWORD PTR [eax]
c00129a4:	e8 44 ff ff ff       	call   c00128ed <Dbg::logWriteInt(unsigned int)>
c00129a9:	58                   	pop    eax
c00129aa:	eb d9                	jmp    c0012985 <Dbg::kprintf(char const*, ...)+0x5c>
c00129ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00129b0:	89 d0                	mov    eax,edx
c00129b2:	83 c2 04             	add    edx,0x4
c00129b5:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00129b8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00129bc:	50                   	push   eax
c00129bd:	e8 f7 fe ff ff       	call   c00128b9 <Dbg::logc(char)>
c00129c2:	58                   	pop    eax
c00129c3:	eb c0                	jmp    c0012985 <Dbg::kprintf(char const*, ...)+0x5c>
c00129c5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00129c9:	89 c8                	mov    eax,ecx
c00129cb:	83 c1 04             	add    ecx,0x4
c00129ce:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00129d2:	ff 30                	push   DWORD PTR [eax]
c00129d4:	e8 14 ff ff ff       	call   c00128ed <Dbg::logWriteInt(unsigned int)>
c00129d9:	5f                   	pop    edi
c00129da:	eb a9                	jmp    c0012985 <Dbg::kprintf(char const*, ...)+0x5c>
c00129dc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00129e0:	89 c8                	mov    eax,ecx
c00129e2:	83 c1 04             	add    ecx,0x4
c00129e5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00129e9:	6a 10                	push   0x10
c00129eb:	ff 30                	push   DWORD PTR [eax]
c00129ed:	e8 18 ff ff ff       	call   c001290a <Dbg::logWriteIntBase(unsigned int, int)>
c00129f2:	59                   	pop    ecx
c00129f3:	5f                   	pop    edi
c00129f4:	eb 8f                	jmp    c0012985 <Dbg::kprintf(char const*, ...)+0x5c>
c00129f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00129fa:	89 d0                	mov    eax,edx
c00129fc:	83 c2 08             	add    edx,0x8
c00129ff:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012a03:	6a 10                	push   0x10
c0012a05:	ff 30                	push   DWORD PTR [eax]
c0012a07:	e8 fe fe ff ff       	call   c001290a <Dbg::logWriteIntBase(unsigned int, int)>
c0012a0c:	58                   	pop    eax
c0012a0d:	5a                   	pop    edx
c0012a0e:	e9 72 ff ff ff       	jmp    c0012985 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a13:	6a 25                	push   0x25
c0012a15:	e8 9f fe ff ff       	call   c00128b9 <Dbg::logc(char)>
c0012a1a:	58                   	pop    eax
c0012a1b:	e9 65 ff ff ff       	jmp    c0012985 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a20:	6a 25                	push   0x25
c0012a22:	e8 92 fe ff ff       	call   c00128b9 <Dbg::logc(char)>
c0012a27:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012a2a:	50                   	push   eax
c0012a2b:	e8 89 fe ff ff       	call   c00128b9 <Dbg::logc(char)>
c0012a30:	5a                   	pop    edx
c0012a31:	59                   	pop    ecx
c0012a32:	e9 4e ff ff ff       	jmp    c0012985 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a37:	50                   	push   eax
c0012a38:	89 eb                	mov    ebx,ebp
c0012a3a:	e8 7a fe ff ff       	call   c00128b9 <Dbg::logc(char)>
c0012a3f:	89 fd                	mov    ebp,edi
c0012a41:	58                   	pop    eax
c0012a42:	e9 3e ff ff ff       	jmp    c0012985 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a47:	90                   	nop

c0012a48 <File::read(unsigned long long, void*, int*)>:
c0012a48:	53                   	push   ebx
c0012a49:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a4d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a51:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a58:	3c 19                	cmp    al,0x19
c0012a5a:	77 35                	ja     c0012a91 <File::read(unsigned long long, void*, int*)+0x49>
c0012a5c:	8b 04 85 00 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2900]
c0012a63:	85 c0                	test   eax,eax
c0012a65:	74 2a                	je     c0012a91 <File::read(unsigned long long, void*, int*)+0x49>
c0012a67:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a6d:	85 c0                	test   eax,eax
c0012a6f:	74 20                	je     c0012a91 <File::read(unsigned long long, void*, int*)+0x49>
c0012a71:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a75:	74 21                	je     c0012a98 <File::read(unsigned long long, void*, int*)+0x50>
c0012a77:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a79:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a7d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a8b:	5b                   	pop    ebx
c0012a8c:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012a8f:	ff e0                	jmp    eax
c0012a91:	b8 0b 00 00 00       	mov    eax,0xb
c0012a96:	eb 05                	jmp    c0012a9d <File::read(unsigned long long, void*, int*)+0x55>
c0012a98:	b8 05 00 00 00       	mov    eax,0x5
c0012a9d:	5b                   	pop    ebx
c0012a9e:	c3                   	ret    
c0012a9f:	90                   	nop

c0012aa0 <File::write(unsigned long long, void*, int*)>:
c0012aa0:	53                   	push   ebx
c0012aa1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012aa5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012aa9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ab0:	3c 19                	cmp    al,0x19
c0012ab2:	77 35                	ja     c0012ae9 <File::write(unsigned long long, void*, int*)+0x49>
c0012ab4:	8b 04 85 00 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2900]
c0012abb:	85 c0                	test   eax,eax
c0012abd:	74 2a                	je     c0012ae9 <File::write(unsigned long long, void*, int*)+0x49>
c0012abf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012ac5:	85 c0                	test   eax,eax
c0012ac7:	74 20                	je     c0012ae9 <File::write(unsigned long long, void*, int*)+0x49>
c0012ac9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012acd:	74 21                	je     c0012af0 <File::write(unsigned long long, void*, int*)+0x50>
c0012acf:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012ad1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012ad5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012adb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012adf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ae3:	5b                   	pop    ebx
c0012ae4:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012ae7:	ff e0                	jmp    eax
c0012ae9:	b8 0b 00 00 00       	mov    eax,0xb
c0012aee:	eb 05                	jmp    c0012af5 <File::write(unsigned long long, void*, int*)+0x55>
c0012af0:	b8 05 00 00 00       	mov    eax,0x5
c0012af5:	5b                   	pop    ebx
c0012af6:	c3                   	ret    
c0012af7:	90                   	nop

c0012af8 <Directory::read(unsigned long long, void*, int*)>:
c0012af8:	53                   	push   ebx
c0012af9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012afd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012b01:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012b08:	3c 19                	cmp    al,0x19
c0012b0a:	77 35                	ja     c0012b41 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012b0c:	8b 04 85 00 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2900]
c0012b13:	85 c0                	test   eax,eax
c0012b15:	74 2a                	je     c0012b41 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012b17:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012b1d:	85 c0                	test   eax,eax
c0012b1f:	74 20                	je     c0012b41 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012b21:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012b25:	74 21                	je     c0012b48 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012b27:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012b29:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012b2d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012b33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b3b:	5b                   	pop    ebx
c0012b3c:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012b3f:	ff e0                	jmp    eax
c0012b41:	b8 0b 00 00 00       	mov    eax,0xb
c0012b46:	eb 05                	jmp    c0012b4d <Directory::read(unsigned long long, void*, int*)+0x55>
c0012b48:	b8 05 00 00 00       	mov    eax,0x5
c0012b4d:	5b                   	pop    ebx
c0012b4e:	c3                   	ret    
c0012b4f:	90                   	nop

c0012b50 <Directory::write(unsigned long long, void*, int*)>:
c0012b50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b54:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012b5b:	b8 0b 00 00 00       	mov    eax,0xb
c0012b60:	80 fa 19             	cmp    dl,0x19
c0012b63:	77 18                	ja     c0012b7d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b65:	8b 14 95 00 d7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2900]
c0012b6c:	85 d2                	test   edx,edx
c0012b6e:	74 0d                	je     c0012b7d <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b70:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012b77:	19 c0                	sbb    eax,eax
c0012b79:	83 e0 0a             	and    eax,0xa
c0012b7c:	40                   	inc    eax
c0012b7d:	c3                   	ret    

c0012b7e <File::isAtty()>:
c0012b7e:	31 c0                	xor    eax,eax
c0012b80:	c3                   	ret    
c0012b81:	90                   	nop

c0012b82 <Directory::isAtty()>:
c0012b82:	31 c0                	xor    eax,eax
c0012b84:	c3                   	ret    
c0012b85:	90                   	nop

c0012b86 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012b86:	b8 0a 00 00 00       	mov    eax,0xa
c0012b8b:	c3                   	ret    

c0012b8c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012b8c:	b8 0a 00 00 00       	mov    eax,0xa
c0012b91:	c3                   	ret    

c0012b92 <File::~File()>:
c0012b92:	83 ec 0c             	sub    esp,0xc
c0012b95:	ba 94 99 02 c0       	mov    edx,0xc0029994
c0012b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b9e:	89 10                	mov    DWORD PTR [eax],edx
c0012ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ba4:	83 ec 0c             	sub    esp,0xc
c0012ba7:	50                   	push   eax
c0012ba8:	e8 2b eb ff ff       	call   c00116d8 <UnixFile::~UnixFile()>
c0012bad:	83 c4 10             	add    esp,0x10
c0012bb0:	90                   	nop
c0012bb1:	83 c4 0c             	add    esp,0xc
c0012bb4:	c3                   	ret    
c0012bb5:	90                   	nop

c0012bb6 <File::~File()>:
c0012bb6:	83 ec 0c             	sub    esp,0xc
c0012bb9:	83 ec 0c             	sub    esp,0xc
c0012bbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bc0:	e8 cd ff ff ff       	call   c0012b92 <File::~File()>
c0012bc5:	83 c4 10             	add    esp,0x10
c0012bc8:	83 ec 08             	sub    esp,0x8
c0012bcb:	68 14 01 00 00       	push   0x114
c0012bd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bd4:	e8 70 fc ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0012bd9:	83 c4 10             	add    esp,0x10
c0012bdc:	83 c4 0c             	add    esp,0xc
c0012bdf:	c3                   	ret    

c0012be0 <Directory::~Directory()>:
c0012be0:	83 ec 0c             	sub    esp,0xc
c0012be3:	ba b0 99 02 c0       	mov    edx,0xc00299b0
c0012be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bec:	89 10                	mov    DWORD PTR [eax],edx
c0012bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bf2:	83 ec 0c             	sub    esp,0xc
c0012bf5:	50                   	push   eax
c0012bf6:	e8 dd ea ff ff       	call   c00116d8 <UnixFile::~UnixFile()>
c0012bfb:	83 c4 10             	add    esp,0x10
c0012bfe:	90                   	nop
c0012bff:	83 c4 0c             	add    esp,0xc
c0012c02:	c3                   	ret    
c0012c03:	90                   	nop

c0012c04 <Directory::~Directory()>:
c0012c04:	83 ec 0c             	sub    esp,0xc
c0012c07:	83 ec 0c             	sub    esp,0xc
c0012c0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c0e:	e8 cd ff ff ff       	call   c0012be0 <Directory::~Directory()>
c0012c13:	83 c4 10             	add    esp,0x10
c0012c16:	83 ec 08             	sub    esp,0x8
c0012c19:	68 14 01 00 00       	push   0x114
c0012c1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c22:	e8 22 fc ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0012c27:	83 c4 10             	add    esp,0x10
c0012c2a:	83 c4 0c             	add    esp,0xc
c0012c2d:	c3                   	ret    

c0012c2e <Filesystem::Filesystem()>:
c0012c2e:	ba 30 99 02 c0       	mov    edx,0xc0029930
c0012c33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c37:	89 10                	mov    DWORD PTR [eax],edx
c0012c39:	8b 15 68 d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d268
c0012c3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c43:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012c46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c4a:	a3 68 d2 02 c0       	mov    ds:0xc002d268,eax
c0012c4f:	90                   	nop
c0012c50:	c3                   	ret    
c0012c51:	90                   	nop

c0012c52 <Filesystem::~Filesystem()>:
c0012c52:	ba 30 99 02 c0       	mov    edx,0xc0029930
c0012c57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c5b:	89 10                	mov    DWORD PTR [eax],edx
c0012c5d:	90                   	nop
c0012c5e:	c3                   	ret    
c0012c5f:	90                   	nop

c0012c60 <Filesystem::~Filesystem()>:
c0012c60:	83 ec 0c             	sub    esp,0xc
c0012c63:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c67:	e8 e6 ff ff ff       	call   c0012c52 <Filesystem::~Filesystem()>
c0012c6c:	83 c4 04             	add    esp,0x4
c0012c6f:	83 ec 08             	sub    esp,0x8
c0012c72:	6a 08                	push   0x8
c0012c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c78:	e8 cc fb ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0012c7d:	83 c4 10             	add    esp,0x10
c0012c80:	83 c4 0c             	add    esp,0xc
c0012c83:	c3                   	ret    

c0012c84 <Fs::getcwd(Process*, char*, int)>:
c0012c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c88:	31 c0                	xor    eax,eax
c0012c8a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c8d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012c91:	7d 15                	jge    c0012ca8 <Fs::getcwd(Process*, char*, int)+0x24>
c0012c93:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c97:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012c9e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012ca1:	84 c9                	test   cl,cl
c0012ca3:	74 06                	je     c0012cab <Fs::getcwd(Process*, char*, int)+0x27>
c0012ca5:	40                   	inc    eax
c0012ca6:	eb e2                	jmp    c0012c8a <Fs::getcwd(Process*, char*, int)+0x6>
c0012ca8:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012cab:	31 c0                	xor    eax,eax
c0012cad:	c3                   	ret    

c0012cae <Fs::initVFS()>:
c0012cae:	83 ec 18             	sub    esp,0x18
c0012cb1:	6a 08                	push   0x8
c0012cb3:	e8 a2 c9 ff ff       	call   c000f65a <malloc>
c0012cb8:	89 04 24             	mov    DWORD PTR [esp],eax
c0012cbb:	e8 e2 d6 00 00       	call   c00203a2 <FAT::FAT()>
c0012cc0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012cc7:	e8 8e c9 ff ff       	call   c000f65a <malloc>
c0012ccc:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ccf:	e8 26 e9 00 00       	call   c00215fa <ISO9660::ISO9660()>
c0012cd4:	83 c4 1c             	add    esp,0x1c
c0012cd7:	c3                   	ret    

c0012cd8 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012cd8:	55                   	push   ebp
c0012cd9:	57                   	push   edi
c0012cda:	56                   	push   esi
c0012cdb:	53                   	push   ebx
c0012cdc:	81 ec 10 04 00 00    	sub    esp,0x410
c0012ce2:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012ce9:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012cf0:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012cf7:	68 00 04 00 00       	push   0x400
c0012cfc:	6a 00                	push   0x0
c0012cfe:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012d02:	56                   	push   esi
c0012d03:	e8 bc d9 fe ff       	call   c00006c4 <memset>
c0012d08:	83 c4 10             	add    esp,0x10
c0012d0b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012d0f:	75 0b                	jne    c0012d1c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012d11:	50                   	push   eax
c0012d12:	50                   	push   eax
c0012d13:	57                   	push   edi
c0012d14:	56                   	push   esi
c0012d15:	e8 49 da fe ff       	call   c0000763 <strcpy>
c0012d1a:	eb 41                	jmp    c0012d5d <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012d1c:	8a 07                	mov    al,BYTE PTR [edi]
c0012d1e:	3c 5c                	cmp    al,0x5c
c0012d20:	74 04                	je     c0012d26 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012d22:	3c 2f                	cmp    al,0x2f
c0012d24:	75 18                	jne    c0012d3e <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012d26:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012d29:	3c 60                	cmp    al,0x60
c0012d2b:	7e 03                	jle    c0012d30 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012d2d:	83 e8 20             	sub    eax,0x20
c0012d30:	88 04 24             	mov    BYTE PTR [esp],al
c0012d33:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d3a:	50                   	push   eax
c0012d3b:	50                   	push   eax
c0012d3c:	eb 18                	jmp    c0012d56 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012d3e:	50                   	push   eax
c0012d3f:	50                   	push   eax
c0012d40:	55                   	push   ebp
c0012d41:	56                   	push   esi
c0012d42:	e8 1c da fe ff       	call   c0000763 <strcpy>
c0012d47:	5a                   	pop    edx
c0012d48:	59                   	pop    ecx
c0012d49:	68 18 af 02 c0       	push   0xc002af18
c0012d4e:	56                   	push   esi
c0012d4f:	e8 c6 da fe ff       	call   c000081a <strcat>
c0012d54:	5d                   	pop    ebp
c0012d55:	58                   	pop    eax
c0012d56:	57                   	push   edi
c0012d57:	56                   	push   esi
c0012d58:	e8 bd da fe ff       	call   c000081a <strcat>
c0012d5d:	83 c4 10             	add    esp,0x10
c0012d60:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012d63:	3c 60                	cmp    al,0x60
c0012d65:	7e 03                	jle    c0012d6a <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012d67:	83 e8 20             	sub    eax,0x20
c0012d6a:	88 04 24             	mov    BYTE PTR [esp],al
c0012d6d:	88 03                	mov    BYTE PTR [ebx],al
c0012d6f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d76:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012d7c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012d80:	bf 03 00 00 00       	mov    edi,0x3
c0012d85:	b8 03 00 00 00       	mov    eax,0x3
c0012d8a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012d8d:	84 d2                	test   dl,dl
c0012d8f:	0f 84 91 00 00 00    	je     c0012e26 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012d95:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012d98:	80 fa 5c             	cmp    dl,0x5c
c0012d9b:	74 05                	je     c0012da2 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012d9d:	80 fa 2f             	cmp    dl,0x2f
c0012da0:	75 12                	jne    c0012db4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012da2:	89 c5                	mov    ebp,eax
c0012da4:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012da9:	74 09                	je     c0012db4 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012dab:	40                   	inc    eax
c0012dac:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012db0:	89 cf                	mov    edi,ecx
c0012db2:	eb d6                	jmp    c0012d8a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012db4:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012db9:	75 5b                	jne    c0012e16 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012dbb:	80 fa 2e             	cmp    dl,0x2e
c0012dbe:	75 56                	jne    c0012e16 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012dc0:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012dc4:	74 19                	je     c0012ddf <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012dc6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012dcb:	74 53                	je     c0012e20 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012dcd:	89 f9                	mov    ecx,edi
c0012dcf:	41                   	inc    ecx
c0012dd0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012dd3:	80 fa 2f             	cmp    dl,0x2f
c0012dd6:	74 f7                	je     c0012dcf <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012dd8:	80 fa 5c             	cmp    dl,0x5c
c0012ddb:	74 f2                	je     c0012dcf <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012ddd:	eb d1                	jmp    c0012db0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ddf:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012de4:	74 3a                	je     c0012e20 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012de6:	83 f8 03             	cmp    eax,0x3
c0012de9:	74 c5                	je     c0012db0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012deb:	41                   	inc    ecx
c0012dec:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012def:	80 fa 2f             	cmp    dl,0x2f
c0012df2:	74 f7                	je     c0012deb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012df4:	80 fa 5c             	cmp    dl,0x5c
c0012df7:	74 f2                	je     c0012deb <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012df9:	48                   	dec    eax
c0012dfa:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012dfe:	75 06                	jne    c0012e06 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012e00:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012e04:	eb f3                	jmp    c0012df9 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012e06:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012e0a:	74 07                	je     c0012e13 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012e0c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012e10:	48                   	dec    eax
c0012e11:	eb f3                	jmp    c0012e06 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012e13:	40                   	inc    eax
c0012e14:	eb 9a                	jmp    c0012db0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012e16:	80 fa 2f             	cmp    dl,0x2f
c0012e19:	74 95                	je     c0012db0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012e1b:	80 fa 5c             	cmp    dl,0x5c
c0012e1e:	74 90                	je     c0012db0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012e20:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012e23:	40                   	inc    eax
c0012e24:	eb 8a                	jmp    c0012db0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012e26:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012e2a:	83 ec 0c             	sub    esp,0xc
c0012e2d:	53                   	push   ebx
c0012e2e:	e8 ae d8 fe ff       	call   c00006e1 <strlen>
c0012e33:	83 c4 10             	add    esp,0x10
c0012e36:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012e3b:	75 26                	jne    c0012e63 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012e3d:	83 ec 0c             	sub    esp,0xc
c0012e40:	53                   	push   ebx
c0012e41:	e8 9b d8 fe ff       	call   c00006e1 <strlen>
c0012e46:	83 c4 10             	add    esp,0x10
c0012e49:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012e4e:	74 26                	je     c0012e76 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012e50:	83 ec 0c             	sub    esp,0xc
c0012e53:	53                   	push   ebx
c0012e54:	e8 88 d8 fe ff       	call   c00006e1 <strlen>
c0012e59:	83 c4 10             	add    esp,0x10
c0012e5c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e61:	eb c7                	jmp    c0012e2a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012e63:	83 ec 0c             	sub    esp,0xc
c0012e66:	53                   	push   ebx
c0012e67:	e8 75 d8 fe ff       	call   c00006e1 <strlen>
c0012e6c:	83 c4 10             	add    esp,0x10
c0012e6f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012e74:	74 c7                	je     c0012e3d <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012e76:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012e7c:	5b                   	pop    ebx
c0012e7d:	5e                   	pop    esi
c0012e7e:	5f                   	pop    edi
c0012e7f:	5d                   	pop    ebp
c0012e80:	c3                   	ret    
c0012e81:	90                   	nop

c0012e82 <File::File(char const*, Process*)>:
c0012e82:	83 ec 0c             	sub    esp,0xc
c0012e85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e89:	83 ec 08             	sub    esp,0x8
c0012e8c:	6a 00                	push   0x0
c0012e8e:	50                   	push   eax
c0012e8f:	e8 62 e6 ff ff       	call   c00114f6 <UnixFile::UnixFile(int)>
c0012e94:	83 c4 10             	add    esp,0x10
c0012e97:	ba 94 99 02 c0       	mov    edx,0xc0029994
c0012e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ea0:	89 10                	mov    DWORD PTR [eax],edx
c0012ea2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ea6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012eac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012eb0:	83 c0 0d             	add    eax,0xd
c0012eb3:	83 ec 04             	sub    esp,0x4
c0012eb6:	52                   	push   edx
c0012eb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ebb:	50                   	push   eax
c0012ebc:	e8 17 fe ff ff       	call   c0012cd8 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012ec1:	83 c4 10             	add    esp,0x10
c0012ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ec8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012ecb:	8d 50 bf             	lea    edx,[eax-0x41]
c0012ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ed2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012ed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012edc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012ee0:	90                   	nop
c0012ee1:	83 c4 0c             	add    esp,0xc
c0012ee4:	c3                   	ret    
c0012ee5:	90                   	nop

c0012ee6 <File::open(FileOpenMode)>:
c0012ee6:	53                   	push   ebx
c0012ee7:	b8 0b 00 00 00       	mov    eax,0xb
c0012eec:	83 ec 08             	sub    esp,0x8
c0012eef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ef3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012efa:	80 fa 19             	cmp    dl,0x19
c0012efd:	77 40                	ja     c0012f3f <File::open(FileOpenMode)+0x59>
c0012eff:	8b 14 95 00 d7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2900]
c0012f06:	85 d2                	test   edx,edx
c0012f08:	74 35                	je     c0012f3f <File::open(FileOpenMode)+0x59>
c0012f0a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f10:	85 d2                	test   edx,edx
c0012f12:	74 2b                	je     c0012f3f <File::open(FileOpenMode)+0x59>
c0012f14:	b8 06 00 00 00       	mov    eax,0x6
c0012f19:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012f1d:	75 20                	jne    c0012f3f <File::open(FileOpenMode)+0x59>
c0012f1f:	8b 02                	mov    eax,DWORD PTR [edx]
c0012f21:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012f27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f2b:	51                   	push   ecx
c0012f2c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012f2f:	51                   	push   ecx
c0012f30:	52                   	push   edx
c0012f31:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012f34:	83 c4 10             	add    esp,0x10
c0012f37:	85 c0                	test   eax,eax
c0012f39:	75 04                	jne    c0012f3f <File::open(FileOpenMode)+0x59>
c0012f3b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012f3f:	83 c4 08             	add    esp,0x8
c0012f42:	5b                   	pop    ebx
c0012f43:	c3                   	ret    

c0012f44 <File::close()>:
c0012f44:	53                   	push   ebx
c0012f45:	b8 0b 00 00 00       	mov    eax,0xb
c0012f4a:	83 ec 08             	sub    esp,0x8
c0012f4d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f51:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f58:	80 fa 19             	cmp    dl,0x19
c0012f5b:	77 41                	ja     c0012f9e <File::close()+0x5a>
c0012f5d:	8b 1c 95 00 d7 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2900]
c0012f64:	85 db                	test   ebx,ebx
c0012f66:	74 36                	je     c0012f9e <File::close()+0x5a>
c0012f68:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012f6f:	74 2d                	je     c0012f9e <File::close()+0x5a>
c0012f71:	b8 05 00 00 00       	mov    eax,0x5
c0012f76:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f7a:	74 22                	je     c0012f9e <File::close()+0x5a>
c0012f7c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012f80:	8b 04 95 00 d7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2900]
c0012f87:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f8d:	53                   	push   ebx
c0012f8e:	53                   	push   ebx
c0012f8f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f91:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012f97:	50                   	push   eax
c0012f98:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012f9b:	83 c4 10             	add    esp,0x10
c0012f9e:	83 c4 08             	add    esp,0x8
c0012fa1:	5b                   	pop    ebx
c0012fa2:	c3                   	ret    
c0012fa3:	90                   	nop

c0012fa4 <File::seek(unsigned long long)>:
c0012fa4:	56                   	push   esi
c0012fa5:	53                   	push   ebx
c0012fa6:	b8 0b 00 00 00       	mov    eax,0xb
c0012fab:	51                   	push   ecx
c0012fac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012fb0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012fb4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012fbb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012fbf:	80 fa 19             	cmp    dl,0x19
c0012fc2:	77 31                	ja     c0012ff5 <File::seek(unsigned long long)+0x51>
c0012fc4:	8b 14 95 00 d7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2900]
c0012fcb:	85 d2                	test   edx,edx
c0012fcd:	74 26                	je     c0012ff5 <File::seek(unsigned long long)+0x51>
c0012fcf:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012fd5:	85 d2                	test   edx,edx
c0012fd7:	74 1c                	je     c0012ff5 <File::seek(unsigned long long)+0x51>
c0012fd9:	b8 05 00 00 00       	mov    eax,0x5
c0012fde:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012fe2:	74 11                	je     c0012ff5 <File::seek(unsigned long long)+0x51>
c0012fe4:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fe6:	53                   	push   ebx
c0012fe7:	51                   	push   ecx
c0012fe8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012fee:	52                   	push   edx
c0012fef:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012ff2:	83 c4 10             	add    esp,0x10
c0012ff5:	5a                   	pop    edx
c0012ff6:	5b                   	pop    ebx
c0012ff7:	5e                   	pop    esi
c0012ff8:	c3                   	ret    
c0012ff9:	90                   	nop

c0012ffa <File::tell(unsigned long long*)>:
c0012ffa:	83 ec 0c             	sub    esp,0xc
c0012ffd:	b8 0b 00 00 00       	mov    eax,0xb
c0013002:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013006:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001300d:	80 fa 19             	cmp    dl,0x19
c0013010:	77 34                	ja     c0013046 <File::tell(unsigned long long*)+0x4c>
c0013012:	8b 14 95 00 d7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2900]
c0013019:	85 d2                	test   edx,edx
c001301b:	74 29                	je     c0013046 <File::tell(unsigned long long*)+0x4c>
c001301d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013023:	85 d2                	test   edx,edx
c0013025:	74 1f                	je     c0013046 <File::tell(unsigned long long*)+0x4c>
c0013027:	b8 05 00 00 00       	mov    eax,0x5
c001302c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013030:	74 14                	je     c0013046 <File::tell(unsigned long long*)+0x4c>
c0013032:	50                   	push   eax
c0013033:	8b 02                	mov    eax,DWORD PTR [edx]
c0013035:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013039:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001303f:	52                   	push   edx
c0013040:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013043:	83 c4 10             	add    esp,0x10
c0013046:	83 c4 0c             	add    esp,0xc
c0013049:	c3                   	ret    

c001304a <File::rewind()>:
c001304a:	83 ec 10             	sub    esp,0x10
c001304d:	6a 00                	push   0x0
c001304f:	6a 00                	push   0x0
c0013051:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013055:	e8 4a ff ff ff       	call   c0012fa4 <File::seek(unsigned long long)>
c001305a:	83 c4 1c             	add    esp,0x1c
c001305d:	c3                   	ret    

c001305e <File::unlink()>:
c001305e:	83 ec 0c             	sub    esp,0xc
c0013061:	b8 0b 00 00 00       	mov    eax,0xb
c0013066:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001306a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013071:	80 f9 19             	cmp    cl,0x19
c0013074:	77 2f                	ja     c00130a5 <File::unlink()+0x47>
c0013076:	8b 0c 8d 00 d7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2900]
c001307d:	85 c9                	test   ecx,ecx
c001307f:	74 24                	je     c00130a5 <File::unlink()+0x47>
c0013081:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013087:	85 c9                	test   ecx,ecx
c0013089:	74 1a                	je     c00130a5 <File::unlink()+0x47>
c001308b:	b8 06 00 00 00       	mov    eax,0x6
c0013090:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013094:	75 0f                	jne    c00130a5 <File::unlink()+0x47>
c0013096:	83 c2 0d             	add    edx,0xd
c0013099:	50                   	push   eax
c001309a:	50                   	push   eax
c001309b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001309d:	52                   	push   edx
c001309e:	51                   	push   ecx
c001309f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00130a2:	83 c4 10             	add    esp,0x10
c00130a5:	83 c4 0c             	add    esp,0xc
c00130a8:	c3                   	ret    
c00130a9:	90                   	nop

c00130aa <File::rename(char const*)>:
c00130aa:	83 ec 0c             	sub    esp,0xc
c00130ad:	b8 0b 00 00 00       	mov    eax,0xb
c00130b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130b6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130bd:	80 f9 19             	cmp    cl,0x19
c00130c0:	77 32                	ja     c00130f4 <File::rename(char const*)+0x4a>
c00130c2:	8b 0c 8d 00 d7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2900]
c00130c9:	85 c9                	test   ecx,ecx
c00130cb:	74 27                	je     c00130f4 <File::rename(char const*)+0x4a>
c00130cd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130d3:	85 c9                	test   ecx,ecx
c00130d5:	74 1d                	je     c00130f4 <File::rename(char const*)+0x4a>
c00130d7:	b8 06 00 00 00       	mov    eax,0x6
c00130dc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130e0:	75 12                	jne    c00130f4 <File::rename(char const*)+0x4a>
c00130e2:	83 c2 0d             	add    edx,0xd
c00130e5:	50                   	push   eax
c00130e6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00130ec:	52                   	push   edx
c00130ed:	51                   	push   ecx
c00130ee:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00130f1:	83 c4 10             	add    esp,0x10
c00130f4:	83 c4 0c             	add    esp,0xc
c00130f7:	c3                   	ret    

c00130f8 <File::chfatattr(unsigned char, unsigned char)>:
c00130f8:	57                   	push   edi
c00130f9:	b8 0b 00 00 00       	mov    eax,0xb
c00130fe:	56                   	push   esi
c00130ff:	53                   	push   ebx
c0013100:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013104:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013108:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001310f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013113:	80 f9 19             	cmp    cl,0x19
c0013116:	77 37                	ja     c001314f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013118:	8b 0c 8d 00 d7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2900]
c001311f:	85 c9                	test   ecx,ecx
c0013121:	74 2c                	je     c001314f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013123:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013129:	85 c9                	test   ecx,ecx
c001312b:	74 22                	je     c001314f <File::chfatattr(unsigned char, unsigned char)+0x57>
c001312d:	b8 06 00 00 00       	mov    eax,0x6
c0013132:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013136:	75 17                	jne    c001314f <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013138:	8b 39                	mov    edi,DWORD PTR [ecx]
c001313a:	89 f0                	mov    eax,esi
c001313c:	83 c2 0d             	add    edx,0xd
c001313f:	0f b6 f0             	movzx  esi,al
c0013142:	0f b6 db             	movzx  ebx,bl
c0013145:	56                   	push   esi
c0013146:	53                   	push   ebx
c0013147:	52                   	push   edx
c0013148:	51                   	push   ecx
c0013149:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001314c:	83 c4 10             	add    esp,0x10
c001314f:	5b                   	pop    ebx
c0013150:	5e                   	pop    esi
c0013151:	5f                   	pop    edi
c0013152:	c3                   	ret    
c0013153:	90                   	nop

c0013154 <File::exists()>:
c0013154:	83 ec 0c             	sub    esp,0xc
c0013157:	31 c0                	xor    eax,eax
c0013159:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001315d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013164:	80 f9 19             	cmp    cl,0x19
c0013167:	77 24                	ja     c001318d <File::exists()+0x39>
c0013169:	8b 0c 8d 00 d7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2900]
c0013170:	85 c9                	test   ecx,ecx
c0013172:	74 19                	je     c001318d <File::exists()+0x39>
c0013174:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001317a:	85 c9                	test   ecx,ecx
c001317c:	74 0f                	je     c001318d <File::exists()+0x39>
c001317e:	83 c2 0d             	add    edx,0xd
c0013181:	50                   	push   eax
c0013182:	50                   	push   eax
c0013183:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013185:	52                   	push   edx
c0013186:	51                   	push   ecx
c0013187:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001318a:	83 c4 10             	add    esp,0x10
c001318d:	83 c4 0c             	add    esp,0xc
c0013190:	c3                   	ret    
c0013191:	90                   	nop

c0013192 <File::stat(unsigned long long*, bool*)>:
c0013192:	56                   	push   esi
c0013193:	53                   	push   ebx
c0013194:	50                   	push   eax
c0013195:	b8 0b 00 00 00       	mov    eax,0xb
c001319a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001319e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00131a2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131a9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00131ad:	80 f9 19             	cmp    cl,0x19
c00131b0:	77 3d                	ja     c00131ef <File::stat(unsigned long long*, bool*)+0x5d>
c00131b2:	8b 0c 8d 00 d7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2900]
c00131b9:	85 c9                	test   ecx,ecx
c00131bb:	74 32                	je     c00131ef <File::stat(unsigned long long*, bool*)+0x5d>
c00131bd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131c3:	85 c9                	test   ecx,ecx
c00131c5:	74 28                	je     c00131ef <File::stat(unsigned long long*, bool*)+0x5d>
c00131c7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131c9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131cd:	74 13                	je     c00131e2 <File::stat(unsigned long long*, bool*)+0x50>
c00131cf:	83 ec 04             	sub    esp,0x4
c00131d2:	56                   	push   esi
c00131d3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00131d9:	51                   	push   ecx
c00131da:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00131dd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00131e0:	eb 0a                	jmp    c00131ec <File::stat(unsigned long long*, bool*)+0x5a>
c00131e2:	53                   	push   ebx
c00131e3:	83 c2 0d             	add    edx,0xd
c00131e6:	56                   	push   esi
c00131e7:	52                   	push   edx
c00131e8:	51                   	push   ecx
c00131e9:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00131ec:	83 c4 10             	add    esp,0x10
c00131ef:	5a                   	pop    edx
c00131f0:	5b                   	pop    ebx
c00131f1:	5e                   	pop    esi
c00131f2:	c3                   	ret    

c00131f3 <Fs::setcwd(Process*, char*)>:
c00131f3:	55                   	push   ebp
c00131f4:	57                   	push   edi
c00131f5:	56                   	push   esi
c00131f6:	53                   	push   ebx
c00131f7:	81 ec 20 02 00 00    	sub    esp,0x220
c00131fd:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013204:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001320a:	57                   	push   edi
c001320b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013212:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013216:	56                   	push   esi
c0013217:	e8 bc fa ff ff       	call   c0012cd8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001321c:	89 34 24             	mov    DWORD PTR [esp],esi
c001321f:	e8 bd d4 fe ff       	call   c00006e1 <strlen>
c0013224:	83 c4 10             	add    esp,0x10
c0013227:	83 f8 02             	cmp    eax,0x2
c001322a:	77 17                	ja     c0013243 <Fs::setcwd(Process*, char*)+0x50>
c001322c:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013231:	83 e8 41             	sub    eax,0x41
c0013234:	83 f8 19             	cmp    eax,0x19
c0013237:	76 24                	jbe    c001325d <Fs::setcwd(Process*, char*)+0x6a>
c0013239:	b8 03 00 00 00       	mov    eax,0x3
c001323e:	e9 e0 00 00 00       	jmp    c0013323 <Fs::setcwd(Process*, char*)+0x130>
c0013243:	83 ec 0c             	sub    esp,0xc
c0013246:	56                   	push   esi
c0013247:	e8 95 d4 fe ff       	call   c00006e1 <strlen>
c001324c:	83 c4 10             	add    esp,0x10
c001324f:	83 f8 03             	cmp    eax,0x3
c0013252:	75 34                	jne    c0013288 <Fs::setcwd(Process*, char*)+0x95>
c0013254:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013259:	75 2d                	jne    c0013288 <Fs::setcwd(Process*, char*)+0x95>
c001325b:	eb cf                	jmp    c001322c <Fs::setcwd(Process*, char*)+0x39>
c001325d:	8b 14 85 00 d7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2900]
c0013264:	b8 05 00 00 00       	mov    eax,0x5
c0013269:	85 d2                	test   edx,edx
c001326b:	0f 84 b2 00 00 00    	je     c0013323 <Fs::setcwd(Process*, char*)+0x130>
c0013271:	b8 06 00 00 00       	mov    eax,0x6
c0013276:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001327d:	0f 85 92 00 00 00    	jne    c0013315 <Fs::setcwd(Process*, char*)+0x122>
c0013283:	e9 9b 00 00 00       	jmp    c0013323 <Fs::setcwd(Process*, char*)+0x130>
c0013288:	83 ec 0c             	sub    esp,0xc
c001328b:	68 14 01 00 00       	push   0x114
c0013290:	e8 c5 c3 ff ff       	call   c000f65a <malloc>
c0013295:	83 c4 0c             	add    esp,0xc
c0013298:	89 c3                	mov    ebx,eax
c001329a:	55                   	push   ebp
c001329b:	56                   	push   esi
c001329c:	50                   	push   eax
c001329d:	e8 e0 fb ff ff       	call   c0012e82 <File::File(char const*, Process*)>
c00132a2:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00132a7:	83 c4 0c             	add    esp,0xc
c00132aa:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00132ae:	50                   	push   eax
c00132af:	8d 44 24 10          	lea    eax,[esp+0x10]
c00132b3:	50                   	push   eax
c00132b4:	53                   	push   ebx
c00132b5:	e8 d8 fe ff ff       	call   c0013192 <File::stat(unsigned long long*, bool*)>
c00132ba:	83 c4 10             	add    esp,0x10
c00132bd:	83 f8 02             	cmp    eax,0x2
c00132c0:	74 04                	je     c00132c6 <Fs::setcwd(Process*, char*)+0xd3>
c00132c2:	85 c0                	test   eax,eax
c00132c4:	74 1c                	je     c00132e2 <Fs::setcwd(Process*, char*)+0xef>
c00132c6:	b8 01 00 00 00       	mov    eax,0x1
c00132cb:	85 db                	test   ebx,ebx
c00132cd:	74 54                	je     c0013323 <Fs::setcwd(Process*, char*)+0x130>
c00132cf:	83 ec 0c             	sub    esp,0xc
c00132d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132d4:	53                   	push   ebx
c00132d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132d8:	83 c4 10             	add    esp,0x10
c00132db:	b8 01 00 00 00       	mov    eax,0x1
c00132e0:	eb 41                	jmp    c0013323 <Fs::setcwd(Process*, char*)+0x130>
c00132e2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00132e7:	75 1c                	jne    c0013305 <Fs::setcwd(Process*, char*)+0x112>
c00132e9:	b8 02 00 00 00       	mov    eax,0x2
c00132ee:	85 db                	test   ebx,ebx
c00132f0:	74 31                	je     c0013323 <Fs::setcwd(Process*, char*)+0x130>
c00132f2:	83 ec 0c             	sub    esp,0xc
c00132f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132f7:	53                   	push   ebx
c00132f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132fb:	83 c4 10             	add    esp,0x10
c00132fe:	b8 02 00 00 00       	mov    eax,0x2
c0013303:	eb 1e                	jmp    c0013323 <Fs::setcwd(Process*, char*)+0x130>
c0013305:	85 db                	test   ebx,ebx
c0013307:	74 0c                	je     c0013315 <Fs::setcwd(Process*, char*)+0x122>
c0013309:	83 ec 0c             	sub    esp,0xc
c001330c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001330e:	53                   	push   ebx
c001330f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013312:	83 c4 10             	add    esp,0x10
c0013315:	50                   	push   eax
c0013316:	50                   	push   eax
c0013317:	56                   	push   esi
c0013318:	57                   	push   edi
c0013319:	e8 45 d4 fe ff       	call   c0000763 <strcpy>
c001331e:	83 c4 10             	add    esp,0x10
c0013321:	31 c0                	xor    eax,eax
c0013323:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013329:	5b                   	pop    ebx
c001332a:	5e                   	pop    esi
c001332b:	5f                   	pop    edi
c001332c:	5d                   	pop    ebp
c001332d:	c3                   	ret    

c001332e <Directory::Directory(char const*, Process*)>:
c001332e:	83 ec 0c             	sub    esp,0xc
c0013331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013335:	83 ec 08             	sub    esp,0x8
c0013338:	6a 00                	push   0x0
c001333a:	50                   	push   eax
c001333b:	e8 b6 e1 ff ff       	call   c00114f6 <UnixFile::UnixFile(int)>
c0013340:	83 c4 10             	add    esp,0x10
c0013343:	ba b0 99 02 c0       	mov    edx,0xc00299b0
c0013348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001334c:	89 10                	mov    DWORD PTR [eax],edx
c001334e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013352:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001335c:	83 c0 0d             	add    eax,0xd
c001335f:	83 ec 04             	sub    esp,0x4
c0013362:	52                   	push   edx
c0013363:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013367:	50                   	push   eax
c0013368:	e8 6b f9 ff ff       	call   c0012cd8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001336d:	83 c4 10             	add    esp,0x10
c0013370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013374:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013377:	8d 50 bf             	lea    edx,[eax-0x41]
c001337a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001337e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013388:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001338c:	90                   	nop
c001338d:	83 c4 0c             	add    esp,0xc
c0013390:	c3                   	ret    
c0013391:	90                   	nop

c0013392 <Directory::open()>:
c0013392:	53                   	push   ebx
c0013393:	b8 0b 00 00 00       	mov    eax,0xb
c0013398:	83 ec 08             	sub    esp,0x8
c001339b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001339f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00133a6:	80 fa 19             	cmp    dl,0x19
c00133a9:	77 3d                	ja     c00133e8 <Directory::open()+0x56>
c00133ab:	8b 14 95 00 d7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2900]
c00133b2:	85 d2                	test   edx,edx
c00133b4:	74 32                	je     c00133e8 <Directory::open()+0x56>
c00133b6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00133bc:	85 d2                	test   edx,edx
c00133be:	74 28                	je     c00133e8 <Directory::open()+0x56>
c00133c0:	b8 06 00 00 00       	mov    eax,0x6
c00133c5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00133c9:	75 1d                	jne    c00133e8 <Directory::open()+0x56>
c00133cb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00133d1:	50                   	push   eax
c00133d2:	8b 02                	mov    eax,DWORD PTR [edx]
c00133d4:	51                   	push   ecx
c00133d5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00133d8:	51                   	push   ecx
c00133d9:	52                   	push   edx
c00133da:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00133dd:	83 c4 10             	add    esp,0x10
c00133e0:	85 c0                	test   eax,eax
c00133e2:	75 04                	jne    c00133e8 <Directory::open()+0x56>
c00133e4:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00133e8:	83 c4 08             	add    esp,0x8
c00133eb:	5b                   	pop    ebx
c00133ec:	c3                   	ret    
c00133ed:	90                   	nop

c00133ee <Directory::close()>:
c00133ee:	53                   	push   ebx
c00133ef:	b8 0b 00 00 00       	mov    eax,0xb
c00133f4:	83 ec 08             	sub    esp,0x8
c00133f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133fb:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013402:	80 fa 19             	cmp    dl,0x19
c0013405:	77 41                	ja     c0013448 <Directory::close()+0x5a>
c0013407:	8b 1c 95 00 d7 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2900]
c001340e:	85 db                	test   ebx,ebx
c0013410:	74 36                	je     c0013448 <Directory::close()+0x5a>
c0013412:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013419:	74 2d                	je     c0013448 <Directory::close()+0x5a>
c001341b:	b8 05 00 00 00       	mov    eax,0x5
c0013420:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013424:	74 22                	je     c0013448 <Directory::close()+0x5a>
c0013426:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001342a:	8b 04 95 00 d7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2900]
c0013431:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013437:	53                   	push   ebx
c0013438:	53                   	push   ebx
c0013439:	8b 10                	mov    edx,DWORD PTR [eax]
c001343b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013441:	50                   	push   eax
c0013442:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013445:	83 c4 10             	add    esp,0x10
c0013448:	83 c4 08             	add    esp,0x8
c001344b:	5b                   	pop    ebx
c001344c:	c3                   	ret    
c001344d:	90                   	nop

c001344e <Directory::unlink()>:
c001344e:	83 ec 0c             	sub    esp,0xc
c0013451:	b8 0b 00 00 00       	mov    eax,0xb
c0013456:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001345a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013461:	80 f9 19             	cmp    cl,0x19
c0013464:	77 2f                	ja     c0013495 <Directory::unlink()+0x47>
c0013466:	8b 0c 8d 00 d7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2900]
c001346d:	85 c9                	test   ecx,ecx
c001346f:	74 24                	je     c0013495 <Directory::unlink()+0x47>
c0013471:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013477:	85 c9                	test   ecx,ecx
c0013479:	74 1a                	je     c0013495 <Directory::unlink()+0x47>
c001347b:	b8 06 00 00 00       	mov    eax,0x6
c0013480:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013484:	75 0f                	jne    c0013495 <Directory::unlink()+0x47>
c0013486:	83 c2 0d             	add    edx,0xd
c0013489:	50                   	push   eax
c001348a:	50                   	push   eax
c001348b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001348d:	52                   	push   edx
c001348e:	51                   	push   ecx
c001348f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013492:	83 c4 10             	add    esp,0x10
c0013495:	83 c4 0c             	add    esp,0xc
c0013498:	c3                   	ret    
c0013499:	90                   	nop

c001349a <Directory::rename(char const*)>:
c001349a:	83 ec 0c             	sub    esp,0xc
c001349d:	b8 0b 00 00 00       	mov    eax,0xb
c00134a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134a6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134ad:	80 f9 19             	cmp    cl,0x19
c00134b0:	77 32                	ja     c00134e4 <Directory::rename(char const*)+0x4a>
c00134b2:	8b 0c 8d 00 d7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2900]
c00134b9:	85 c9                	test   ecx,ecx
c00134bb:	74 27                	je     c00134e4 <Directory::rename(char const*)+0x4a>
c00134bd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134c3:	85 c9                	test   ecx,ecx
c00134c5:	74 1d                	je     c00134e4 <Directory::rename(char const*)+0x4a>
c00134c7:	b8 06 00 00 00       	mov    eax,0x6
c00134cc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00134d0:	75 12                	jne    c00134e4 <Directory::rename(char const*)+0x4a>
c00134d2:	83 c2 0d             	add    edx,0xd
c00134d5:	50                   	push   eax
c00134d6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134dc:	52                   	push   edx
c00134dd:	51                   	push   ecx
c00134de:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00134e1:	83 c4 10             	add    esp,0x10
c00134e4:	83 c4 0c             	add    esp,0xc
c00134e7:	c3                   	ret    

c00134e8 <Directory::exists()>:
c00134e8:	83 ec 0c             	sub    esp,0xc
c00134eb:	31 c0                	xor    eax,eax
c00134ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134f1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134f8:	80 f9 19             	cmp    cl,0x19
c00134fb:	77 24                	ja     c0013521 <Directory::exists()+0x39>
c00134fd:	8b 0c 8d 00 d7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2900]
c0013504:	85 c9                	test   ecx,ecx
c0013506:	74 19                	je     c0013521 <Directory::exists()+0x39>
c0013508:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001350e:	85 c9                	test   ecx,ecx
c0013510:	74 0f                	je     c0013521 <Directory::exists()+0x39>
c0013512:	83 c2 0d             	add    edx,0xd
c0013515:	50                   	push   eax
c0013516:	50                   	push   eax
c0013517:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013519:	52                   	push   edx
c001351a:	51                   	push   ecx
c001351b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001351e:	83 c4 10             	add    esp,0x10
c0013521:	83 c4 0c             	add    esp,0xc
c0013524:	c3                   	ret    
c0013525:	90                   	nop

c0013526 <Directory::read(dirent*)>:
c0013526:	83 ec 1c             	sub    esp,0x1c
c0013529:	b8 0b 00 00 00       	mov    eax,0xb
c001352e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013532:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013539:	80 fa 19             	cmp    dl,0x19
c001353c:	77 30                	ja     c001356e <Directory::read(dirent*)+0x48>
c001353e:	8b 14 95 00 d7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2900]
c0013545:	85 d2                	test   edx,edx
c0013547:	74 25                	je     c001356e <Directory::read(dirent*)+0x48>
c0013549:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013550:	74 1c                	je     c001356e <Directory::read(dirent*)+0x48>
c0013552:	83 ec 0c             	sub    esp,0xc
c0013555:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013557:	8d 54 24 18          	lea    edx,[esp+0x18]
c001355b:	52                   	push   edx
c001355c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013560:	6a 00                	push   0x0
c0013562:	68 10 01 00 00       	push   0x110
c0013567:	51                   	push   ecx
c0013568:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001356b:	83 c4 20             	add    esp,0x20
c001356e:	83 c4 1c             	add    esp,0x1c
c0013571:	c3                   	ret    

c0013572 <Directory::create()>:
c0013572:	83 ec 0c             	sub    esp,0xc
c0013575:	b8 0b 00 00 00       	mov    eax,0xb
c001357a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001357e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013585:	80 f9 19             	cmp    cl,0x19
c0013588:	77 2f                	ja     c00135b9 <Directory::create()+0x47>
c001358a:	8b 0c 8d 00 d7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2900]
c0013591:	85 c9                	test   ecx,ecx
c0013593:	74 24                	je     c00135b9 <Directory::create()+0x47>
c0013595:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001359b:	85 c9                	test   ecx,ecx
c001359d:	74 1a                	je     c00135b9 <Directory::create()+0x47>
c001359f:	b8 06 00 00 00       	mov    eax,0x6
c00135a4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135a8:	75 0f                	jne    c00135b9 <Directory::create()+0x47>
c00135aa:	83 c2 0d             	add    edx,0xd
c00135ad:	50                   	push   eax
c00135ae:	50                   	push   eax
c00135af:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135b1:	52                   	push   edx
c00135b2:	51                   	push   ecx
c00135b3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00135b6:	83 c4 10             	add    esp,0x10
c00135b9:	83 c4 0c             	add    esp,0xc
c00135bc:	c3                   	ret    
c00135bd:	90                   	nop

c00135be <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00135be:	b8 0a 00 00 00       	mov    eax,0xa
c00135c3:	c3                   	ret    

c00135c4 <Bus::Bus(char const*)>:
c00135c4:	83 ec 0c             	sub    esp,0xc
c00135c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135cb:	83 ec 08             	sub    esp,0x8
c00135ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135d2:	50                   	push   eax
c00135d3:	e8 68 09 00 00       	call   c0013f40 <Device::Device(char const*)>
c00135d8:	83 c4 10             	add    esp,0x10
c00135db:	ba cc 99 02 c0       	mov    edx,0xc00299cc
c00135e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135e4:	89 10                	mov    DWORD PTR [eax],edx
c00135e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135ea:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00135f4:	90                   	nop
c00135f5:	83 c4 0c             	add    esp,0xc
c00135f8:	c3                   	ret    
c00135f9:	90                   	nop

c00135fa <Bus::~Bus()>:
c00135fa:	83 ec 0c             	sub    esp,0xc
c00135fd:	ba cc 99 02 c0       	mov    edx,0xc00299cc
c0013602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013606:	89 10                	mov    DWORD PTR [eax],edx
c0013608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001360c:	83 ec 0c             	sub    esp,0xc
c001360f:	50                   	push   eax
c0013610:	e8 0d 06 00 00       	call   c0013c22 <Device::~Device()>
c0013615:	83 c4 10             	add    esp,0x10
c0013618:	90                   	nop
c0013619:	83 c4 0c             	add    esp,0xc
c001361c:	c3                   	ret    
c001361d:	90                   	nop

c001361e <Bus::~Bus()>:
c001361e:	83 ec 0c             	sub    esp,0xc
c0013621:	83 ec 0c             	sub    esp,0xc
c0013624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013628:	e8 cd ff ff ff       	call   c00135fa <Bus::~Bus()>
c001362d:	83 c4 10             	add    esp,0x10
c0013630:	83 ec 08             	sub    esp,0x8
c0013633:	68 58 01 00 00       	push   0x158
c0013638:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001363c:	e8 08 f2 ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0013641:	83 c4 10             	add    esp,0x10
c0013644:	83 c4 0c             	add    esp,0xc
c0013647:	c3                   	ret    

c0013648 <Buzzer::Buzzer(char const*)>:
c0013648:	83 ec 0c             	sub    esp,0xc
c001364b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001364f:	83 ec 08             	sub    esp,0x8
c0013652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013656:	50                   	push   eax
c0013657:	e8 e4 08 00 00       	call   c0013f40 <Device::Device(char const*)>
c001365c:	83 c4 10             	add    esp,0x10
c001365f:	ba f8 99 02 c0       	mov    edx,0xc00299f8
c0013664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013668:	89 10                	mov    DWORD PTR [eax],edx
c001366a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001366e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001367c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013686:	90                   	nop
c0013687:	83 c4 0c             	add    esp,0xc
c001368a:	c3                   	ret    
c001368b:	90                   	nop

c001368c <Buzzer::~Buzzer()>:
c001368c:	83 ec 0c             	sub    esp,0xc
c001368f:	ba f8 99 02 c0       	mov    edx,0xc00299f8
c0013694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013698:	89 10                	mov    DWORD PTR [eax],edx
c001369a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001369e:	83 ec 0c             	sub    esp,0xc
c00136a1:	50                   	push   eax
c00136a2:	e8 7b 05 00 00       	call   c0013c22 <Device::~Device()>
c00136a7:	83 c4 10             	add    esp,0x10
c00136aa:	90                   	nop
c00136ab:	83 c4 0c             	add    esp,0xc
c00136ae:	c3                   	ret    
c00136af:	90                   	nop

c00136b0 <Buzzer::~Buzzer()>:
c00136b0:	83 ec 0c             	sub    esp,0xc
c00136b3:	83 ec 0c             	sub    esp,0xc
c00136b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136ba:	e8 cd ff ff ff       	call   c001368c <Buzzer::~Buzzer()>
c00136bf:	83 c4 10             	add    esp,0x10
c00136c2:	83 ec 08             	sub    esp,0x8
c00136c5:	68 5c 01 00 00       	push   0x15c
c00136ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136ce:	e8 76 f1 ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c00136d3:	83 c4 10             	add    esp,0x10
c00136d6:	83 c4 0c             	add    esp,0xc
c00136d9:	c3                   	ret    

c00136da <Buzzer::stop()>:
c00136da:	83 ec 14             	sub    esp,0x14
c00136dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00136e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00136e3:	6a 00                	push   0x0
c00136e5:	50                   	push   eax
c00136e6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00136e9:	83 c4 1c             	add    esp,0x1c
c00136ec:	c3                   	ret    

c00136ed <beepThread(void*)>:
c00136ed:	53                   	push   ebx
c00136ee:	83 ec 08             	sub    esp,0x8
c00136f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136f5:	e8 36 9b 00 00       	call   c001d230 <unlockScheduler()>
c00136fa:	b8 40 42 0f 00       	mov    eax,0xf4240
c00136ff:	52                   	push   edx
c0013700:	52                   	push   edx
c0013701:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013707:	52                   	push   edx
c0013708:	50                   	push   eax
c0013709:	e8 70 a0 00 00       	call   c001d77e <nanoSleep(unsigned long long)>
c001370e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013711:	e8 c4 ff ff ff       	call   c00136da <Buzzer::stop()>
c0013716:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001371e:	83 c4 18             	add    esp,0x18
c0013721:	5b                   	pop    ebx
c0013722:	e9 9d 9f 00 00       	jmp    c001d6c4 <blockTask(TaskState)>
c0013727:	90                   	nop

c0013728 <Buzzer::beep(int, int, bool)>:
c0013728:	57                   	push   edi
c0013729:	56                   	push   esi
c001372a:	53                   	push   ebx
c001372b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001372f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013733:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013737:	52                   	push   edx
c0013738:	52                   	push   edx
c0013739:	8b 06                	mov    eax,DWORD PTR [esi]
c001373b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001373f:	56                   	push   esi
c0013740:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013743:	83 c4 10             	add    esp,0x10
c0013746:	89 f8                	mov    eax,edi
c0013748:	84 c0                	test   al,al
c001374a:	74 1f                	je     c001376b <Buzzer::beep(int, int, bool)+0x43>
c001374c:	50                   	push   eax
c001374d:	50                   	push   eax
c001374e:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013754:	99                   	cdq    
c0013755:	52                   	push   edx
c0013756:	50                   	push   eax
c0013757:	e8 22 a0 00 00       	call   c001d77e <nanoSleep(unsigned long long)>
c001375c:	83 c4 10             	add    esp,0x10
c001375f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013763:	5b                   	pop    ebx
c0013764:	5e                   	pop    esi
c0013765:	5f                   	pop    edi
c0013766:	e9 6f ff ff ff       	jmp    c00136da <Buzzer::stop()>
c001376b:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013771:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0013776:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001377e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013782:	c7 44 24 14 ed 36 01 c0 	mov    DWORD PTR [esp+0x14],0xc00136ed
c001378a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001378e:	5b                   	pop    ebx
c001378f:	5e                   	pop    esi
c0013790:	5f                   	pop    edi
c0013791:	e9 ca 9b 00 00       	jmp    c001d360 <Process::createThread(void (*)(void*), void*, int)>

c0013796 <User::loadClockSettings(int)>:
c0013796:	53                   	push   ebx
c0013797:	83 ec 14             	sub    esp,0x14
c001379a:	68 14 01 00 00       	push   0x114
c001379f:	e8 b6 be ff ff       	call   c000f65a <malloc>
c00137a4:	83 c4 0c             	add    esp,0xc
c00137a7:	89 c3                	mov    ebx,eax
c00137a9:	ff 35 34 e6 02 c0    	push   DWORD PTR ds:0xc002e634
c00137af:	68 20 9a 02 c0       	push   0xc0029a20
c00137b4:	50                   	push   eax
c00137b5:	e8 c8 f6 ff ff       	call   c0012e82 <File::File(char const*, Process*)>
c00137ba:	58                   	pop    eax
c00137bb:	5a                   	pop    edx
c00137bc:	6a 01                	push   0x1
c00137be:	53                   	push   ebx
c00137bf:	e8 22 f7 ff ff       	call   c0012ee6 <File::open(FileOpenMode)>
c00137c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137c7:	e8 78 f7 ff ff       	call   c0012f44 <File::close()>
c00137cc:	83 c4 10             	add    esp,0x10
c00137cf:	85 db                	test   ebx,ebx
c00137d1:	74 0f                	je     c00137e2 <User::loadClockSettings(int)+0x4c>
c00137d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137d5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00137d9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00137dc:	83 c4 08             	add    esp,0x8
c00137df:	5b                   	pop    ebx
c00137e0:	ff e0                	jmp    eax
c00137e2:	83 c4 08             	add    esp,0x8
c00137e5:	5b                   	pop    ebx
c00137e6:	c3                   	ret    
c00137e7:	90                   	nop

c00137e8 <Clock::Clock(char const*)>:
c00137e8:	83 ec 0c             	sub    esp,0xc
c00137eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ef:	83 ec 08             	sub    esp,0x8
c00137f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137f6:	50                   	push   eax
c00137f7:	e8 44 07 00 00       	call   c0013f40 <Device::Device(char const*)>
c00137fc:	83 c4 10             	add    esp,0x10
c00137ff:	ba 48 9a 02 c0       	mov    edx,0xc0029a48
c0013804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013808:	89 10                	mov    DWORD PTR [eax],edx
c001380a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001380e:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013818:	90                   	nop
c0013819:	83 c4 0c             	add    esp,0xc
c001381c:	c3                   	ret    
c001381d:	90                   	nop

c001381e <Clock::~Clock()>:
c001381e:	83 ec 0c             	sub    esp,0xc
c0013821:	ba 48 9a 02 c0       	mov    edx,0xc0029a48
c0013826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001382a:	89 10                	mov    DWORD PTR [eax],edx
c001382c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013830:	83 ec 0c             	sub    esp,0xc
c0013833:	50                   	push   eax
c0013834:	e8 e9 03 00 00       	call   c0013c22 <Device::~Device()>
c0013839:	83 c4 10             	add    esp,0x10
c001383c:	90                   	nop
c001383d:	83 c4 0c             	add    esp,0xc
c0013840:	c3                   	ret    
c0013841:	90                   	nop

c0013842 <Clock::~Clock()>:
c0013842:	83 ec 0c             	sub    esp,0xc
c0013845:	83 ec 0c             	sub    esp,0xc
c0013848:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001384c:	e8 cd ff ff ff       	call   c001381e <Clock::~Clock()>
c0013851:	83 c4 10             	add    esp,0x10
c0013854:	83 ec 08             	sub    esp,0x8
c0013857:	68 58 01 00 00       	push   0x158
c001385c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013860:	e8 e4 ef ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0013865:	83 c4 10             	add    esp,0x10
c0013868:	83 c4 0c             	add    esp,0xc
c001386b:	c3                   	ret    

c001386c <Clock::timeInSecondsLocal()>:
c001386c:	53                   	push   ebx
c001386d:	83 ec 14             	sub    esp,0x14
c0013870:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013874:	8b 10                	mov    edx,DWORD PTR [eax]
c0013876:	50                   	push   eax
c0013877:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001387a:	0f b6 0d 70 d2 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d270
c0013881:	03 0d 74 d2 02 c0    	add    ecx,DWORD PTR ds:0xc002d274
c0013887:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001388d:	89 cb                	mov    ebx,ecx
c001388f:	c1 fb 1f             	sar    ebx,0x1f
c0013892:	01 c8                	add    eax,ecx
c0013894:	11 da                	adc    edx,ebx
c0013896:	83 c4 10             	add    esp,0x10
c0013899:	31 c9                	xor    ecx,ecx
c001389b:	80 3d 71 d2 02 c0 00 	cmp    BYTE PTR ds:0xc002d271,0x0
c00138a2:	74 05                	je     c00138a9 <Clock::timeInSecondsLocal()+0x3d>
c00138a4:	b9 08 07 00 00       	mov    ecx,0x708
c00138a9:	31 db                	xor    ebx,ebx
c00138ab:	01 c8                	add    eax,ecx
c00138ad:	11 da                	adc    edx,ebx
c00138af:	83 c4 08             	add    esp,0x8
c00138b2:	5b                   	pop    ebx
c00138b3:	c3                   	ret    

c00138b4 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00138b4:	57                   	push   edi
c00138b5:	56                   	push   esi
c00138b6:	53                   	push   ebx
c00138b7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00138bb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00138bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c00138c1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00138c5:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00138c8:	0f b6 05 70 d2 02 c0 	movzx  eax,BYTE PTR ds:0xc002d270
c00138cf:	03 05 74 d2 02 c0    	add    eax,DWORD PTR ds:0xc002d274
c00138d5:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00138db:	99                   	cdq    
c00138dc:	29 c6                	sub    esi,eax
c00138de:	19 d7                	sbb    edi,edx
c00138e0:	89 f0                	mov    eax,esi
c00138e2:	89 fa                	mov    edx,edi
c00138e4:	31 f6                	xor    esi,esi
c00138e6:	80 3d 71 d2 02 c0 00 	cmp    BYTE PTR ds:0xc002d271,0x0
c00138ed:	74 05                	je     c00138f4 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00138ef:	be 08 07 00 00       	mov    esi,0x708
c00138f4:	31 ff                	xor    edi,edi
c00138f6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00138fa:	29 f0                	sub    eax,esi
c00138fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013900:	19 fa                	sbb    edx,edi
c0013902:	89 d8                	mov    eax,ebx
c0013904:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013908:	5b                   	pop    ebx
c0013909:	5e                   	pop    esi
c001390a:	5f                   	pop    edi
c001390b:	ff e0                	jmp    eax

c001390d <datetimeToSeconds(datetime_t)>:
c001390d:	55                   	push   ebp
c001390e:	57                   	push   edi
c001390f:	56                   	push   esi
c0013910:	53                   	push   ebx
c0013911:	83 ec 14             	sub    esp,0x14
c0013914:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013918:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001391c:	89 d3                	mov    ebx,edx
c001391e:	0f b6 c6             	movzx  eax,dh
c0013921:	c1 eb 10             	shr    ebx,0x10
c0013924:	48                   	dec    eax
c0013925:	66 81 eb 6c 07       	sub    bx,0x76c
c001392a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001392e:	0f b6 f5             	movzx  esi,ch
c0013931:	89 cf                	mov    edi,ecx
c0013933:	6b f6 3c             	imul   esi,esi,0x3c
c0013936:	c1 ef 10             	shr    edi,0x10
c0013939:	0f b6 c9             	movzx  ecx,cl
c001393c:	89 f8                	mov    eax,edi
c001393e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013944:	0f b6 f8             	movzx  edi,al
c0013947:	0f b6 d2             	movzx  edx,dl
c001394a:	01 fe                	add    esi,edi
c001394c:	01 f1                	add    ecx,esi
c001394e:	0f b7 f3             	movzx  esi,bx
c0013951:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013955:	c1 f9 1f             	sar    ecx,0x1f
c0013958:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001395d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013961:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013966:	8b 0c 8d 80 9a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6580]
c001396d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013971:	76 29                	jbe    c001399c <datetimeToSeconds(datetime_t)+0x8f>
c0013973:	f6 c3 03             	test   bl,0x3
c0013976:	75 24                	jne    c001399c <datetimeToSeconds(datetime_t)+0x8f>
c0013978:	31 d2                	xor    edx,edx
c001397a:	bf 64 00 00 00       	mov    edi,0x64
c001397f:	89 d8                	mov    eax,ebx
c0013981:	66 f7 f7             	div    di
c0013984:	66 85 d2             	test   dx,dx
c0013987:	75 12                	jne    c001399b <datetimeToSeconds(datetime_t)+0x8e>
c0013989:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001398f:	bf 90 01 00 00       	mov    edi,0x190
c0013994:	99                   	cdq    
c0013995:	f7 ff                	idiv   edi
c0013997:	85 d2                	test   edx,edx
c0013999:	75 01                	jne    c001399c <datetimeToSeconds(datetime_t)+0x8f>
c001399b:	41                   	inc    ecx
c001399c:	66 83 fb 46          	cmp    bx,0x46
c00139a0:	76 45                	jbe    c00139e7 <datetimeToSeconds(datetime_t)+0xda>
c00139a2:	bb 46 00 00 00       	mov    ebx,0x46
c00139a7:	bf 64 00 00 00       	mov    edi,0x64
c00139ac:	bd 90 01 00 00       	mov    ebp,0x190
c00139b1:	b8 6d 01 00 00       	mov    eax,0x16d
c00139b6:	f6 c3 03             	test   bl,0x3
c00139b9:	75 23                	jne    c00139de <datetimeToSeconds(datetime_t)+0xd1>
c00139bb:	89 d8                	mov    eax,ebx
c00139bd:	99                   	cdq    
c00139be:	f7 ff                	idiv   edi
c00139c0:	b8 6e 01 00 00       	mov    eax,0x16e
c00139c5:	85 d2                	test   edx,edx
c00139c7:	75 15                	jne    c00139de <datetimeToSeconds(datetime_t)+0xd1>
c00139c9:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00139cf:	99                   	cdq    
c00139d0:	f7 fd                	idiv   ebp
c00139d2:	83 fa 01             	cmp    edx,0x1
c00139d5:	19 c0                	sbb    eax,eax
c00139d7:	f7 d0                	not    eax
c00139d9:	05 6e 01 00 00       	add    eax,0x16e
c00139de:	01 c1                	add    ecx,eax
c00139e0:	43                   	inc    ebx
c00139e1:	39 f3                	cmp    ebx,esi
c00139e3:	7c cc                	jl     c00139b1 <datetimeToSeconds(datetime_t)+0xa4>
c00139e5:	eb 35                	jmp    c0013a1c <datetimeToSeconds(datetime_t)+0x10f>
c00139e7:	74 33                	je     c0013a1c <datetimeToSeconds(datetime_t)+0x10f>
c00139e9:	b8 45 00 00 00       	mov    eax,0x45
c00139ee:	89 c2                	mov    edx,eax
c00139f0:	83 e2 03             	and    edx,0x3
c00139f3:	39 f0                	cmp    eax,esi
c00139f5:	7e 0f                	jle    c0013a06 <datetimeToSeconds(datetime_t)+0xf9>
c00139f7:	83 fa 01             	cmp    edx,0x1
c00139fa:	19 d2                	sbb    edx,edx
c00139fc:	48                   	dec    eax
c00139fd:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013a04:	eb e8                	jmp    c00139ee <datetimeToSeconds(datetime_t)+0xe1>
c0013a06:	b8 6d 01 00 00       	mov    eax,0x16d
c0013a0b:	85 d2                	test   edx,edx
c0013a0d:	75 0b                	jne    c0013a1a <datetimeToSeconds(datetime_t)+0x10d>
c0013a0f:	66 83 fb 01          	cmp    bx,0x1
c0013a13:	19 c0                	sbb    eax,eax
c0013a15:	05 6e 01 00 00       	add    eax,0x16e
c0013a1a:	29 c1                	sub    ecx,eax
c0013a1c:	b8 80 51 01 00       	mov    eax,0x15180
c0013a21:	f7 e9                	imul   ecx
c0013a23:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013a27:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013a2b:	83 c4 14             	add    esp,0x14
c0013a2e:	5b                   	pop    ebx
c0013a2f:	5e                   	pop    esi
c0013a30:	5f                   	pop    edi
c0013a31:	5d                   	pop    ebp
c0013a32:	c3                   	ret    
c0013a33:	90                   	nop

c0013a34 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013a34:	57                   	push   edi
c0013a35:	56                   	push   esi
c0013a36:	53                   	push   ebx
c0013a37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0013a3d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013a40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a48:	e8 c0 fe ff ff       	call   c001390d <datetimeToSeconds(datetime_t)>
c0013a4d:	59                   	pop    ecx
c0013a4e:	0f b6 0d 70 d2 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d270
c0013a55:	5b                   	pop    ebx
c0013a56:	03 0d 74 d2 02 c0    	add    ecx,DWORD PTR ds:0xc002d274
c0013a5c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a62:	89 cb                	mov    ebx,ecx
c0013a64:	c1 fb 1f             	sar    ebx,0x1f
c0013a67:	29 c8                	sub    eax,ecx
c0013a69:	19 da                	sbb    edx,ebx
c0013a6b:	31 c9                	xor    ecx,ecx
c0013a6d:	80 3d 71 d2 02 c0 00 	cmp    BYTE PTR ds:0xc002d271,0x0
c0013a74:	74 05                	je     c0013a7b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013a76:	b9 08 07 00 00       	mov    ecx,0x708
c0013a7b:	31 db                	xor    ebx,ebx
c0013a7d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013a81:	29 c8                	sub    eax,ecx
c0013a83:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a87:	19 da                	sbb    edx,ebx
c0013a89:	89 f8                	mov    eax,edi
c0013a8b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013a8f:	5b                   	pop    ebx
c0013a90:	5e                   	pop    esi
c0013a91:	5f                   	pop    edi
c0013a92:	ff e0                	jmp    eax

c0013a94 <secondsToDatetime(unsigned long long)>:
c0013a94:	55                   	push   ebp
c0013a95:	57                   	push   edi
c0013a96:	56                   	push   esi
c0013a97:	53                   	push   ebx
c0013a98:	83 ec 1c             	sub    esp,0x1c
c0013a9b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a9f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013aa3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013aa7:	6a 00                	push   0x0
c0013aa9:	68 80 51 01 00       	push   0x15180
c0013aae:	55                   	push   ebp
c0013aaf:	57                   	push   edi
c0013ab0:	e8 e7 1d 01 00       	call   c002589c <__udivdi3>
c0013ab5:	83 c4 10             	add    esp,0x10
c0013ab8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013abe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013ac2:	6a 00                	push   0x0
c0013ac4:	68 80 51 01 00       	push   0x15180
c0013ac9:	55                   	push   ebp
c0013aca:	57                   	push   edi
c0013acb:	bf 10 0e 00 00       	mov    edi,0xe10
c0013ad0:	e8 c7 1e 01 00       	call   c002599c <__umoddi3>
c0013ad5:	83 c4 10             	add    esp,0x10
c0013ad8:	99                   	cdq    
c0013ad9:	f7 ff                	idiv   edi
c0013adb:	bf 3c 00 00 00       	mov    edi,0x3c
c0013ae0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013ae3:	89 d0                	mov    eax,edx
c0013ae5:	99                   	cdq    
c0013ae6:	f7 ff                	idiv   edi
c0013ae8:	85 db                	test   ebx,ebx
c0013aea:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013aed:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013af0:	79 11                	jns    c0013b03 <secondsToDatetime(unsigned long long)+0x6f>
c0013af2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013af6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013afc:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013b01:	eb 07                	jmp    c0013b0a <secondsToDatetime(unsigned long long)+0x76>
c0013b03:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013b08:	89 d8                	mov    eax,ebx
c0013b0a:	bf b4 05 00 00       	mov    edi,0x5b4
c0013b0f:	99                   	cdq    
c0013b10:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013b15:	f7 f9                	idiv   ecx
c0013b17:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013b1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b20:	31 d2                	xor    edx,edx
c0013b22:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013b2a:	01 c3                	add    ebx,eax
c0013b2c:	89 d8                	mov    eax,ebx
c0013b2e:	f7 f1                	div    ecx
c0013b30:	31 d2                	xor    edx,edx
c0013b32:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013b35:	89 d8                	mov    eax,ebx
c0013b37:	f7 f7                	div    edi
c0013b39:	31 d2                	xor    edx,edx
c0013b3b:	29 c1                	sub    ecx,eax
c0013b3d:	89 d8                	mov    eax,ebx
c0013b3f:	f7 f5                	div    ebp
c0013b41:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013b46:	29 c1                	sub    ecx,eax
c0013b48:	31 d2                	xor    edx,edx
c0013b4a:	89 c8                	mov    eax,ecx
c0013b4c:	f7 f5                	div    ebp
c0013b4e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013b53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b57:	31 d2                	xor    edx,edx
c0013b59:	89 c8                	mov    eax,ecx
c0013b5b:	f7 f5                	div    ebp
c0013b5d:	31 d2                	xor    edx,edx
c0013b5f:	01 c3                	add    ebx,eax
c0013b61:	89 c8                	mov    eax,ecx
c0013b63:	f7 f7                	div    edi
c0013b65:	bf 99 00 00 00       	mov    edi,0x99
c0013b6a:	29 c3                	sub    ebx,eax
c0013b6c:	31 d2                	xor    edx,edx
c0013b6e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013b76:	29 c3                	sub    ebx,eax
c0013b78:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013b7b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013b7e:	bb 05 00 00 00       	mov    ebx,0x5
c0013b83:	83 c1 02             	add    ecx,0x2
c0013b86:	89 c8                	mov    eax,ecx
c0013b88:	f7 f7                	div    edi
c0013b8a:	31 d2                	xor    edx,edx
c0013b8c:	89 c7                	mov    edi,eax
c0013b8e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013b94:	83 c0 02             	add    eax,0x2
c0013b97:	f7 f3                	div    ebx
c0013b99:	89 eb                	mov    ebx,ebp
c0013b9b:	29 c3                	sub    ebx,eax
c0013b9d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013ba3:	88 1e                	mov    BYTE PTR [esi],bl
c0013ba5:	19 c0                	sbb    eax,eax
c0013ba7:	31 d2                	xor    edx,edx
c0013ba9:	83 e0 0c             	and    eax,0xc
c0013bac:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013bb0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013bb8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013bbc:	83 f9 01             	cmp    ecx,0x1
c0013bbf:	0f 96 c2             	setbe  dl
c0013bc2:	41                   	inc    ecx
c0013bc3:	01 d0                	add    eax,edx
c0013bc5:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013bc8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013bcc:	83 c4 1c             	add    esp,0x1c
c0013bcf:	89 f0                	mov    eax,esi
c0013bd1:	5b                   	pop    ebx
c0013bd2:	5e                   	pop    esi
c0013bd3:	5f                   	pop    edi
c0013bd4:	5d                   	pop    ebp
c0013bd5:	c2 04 00             	ret    0x4

c0013bd8 <Clock::timeInDatetimeLocal()>:
c0013bd8:	53                   	push   ebx
c0013bd9:	83 ec 14             	sub    esp,0x14
c0013bdc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013be0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013be4:	e8 83 fc ff ff       	call   c001386c <Clock::timeInSecondsLocal()>
c0013be9:	83 c4 0c             	add    esp,0xc
c0013bec:	52                   	push   edx
c0013bed:	50                   	push   eax
c0013bee:	53                   	push   ebx
c0013bef:	e8 a0 fe ff ff       	call   c0013a94 <secondsToDatetime(unsigned long long)>
c0013bf4:	89 d8                	mov    eax,ebx
c0013bf6:	83 c4 14             	add    esp,0x14
c0013bf9:	5b                   	pop    ebx
c0013bfa:	c2 04 00             	ret    0x4
c0013bfd:	90                   	nop

c0013bfe <Device::hibernate()>:
c0013bfe:	c3                   	ret    
c0013bff:	90                   	nop

c0013c00 <Device::wake()>:
c0013c00:	c3                   	ret    
c0013c01:	90                   	nop

c0013c02 <Device::detect()>:
c0013c02:	c3                   	ret    
c0013c03:	90                   	nop

c0013c04 <Device::disableLegacy()>:
c0013c04:	c3                   	ret    
c0013c05:	90                   	nop

c0013c06 <Device::powerSaving(PowerSavingLevel)>:
c0013c06:	c3                   	ret    
c0013c07:	90                   	nop

c0013c08 <DriverlessDevice::close(int, int, void*)>:
c0013c08:	31 c0                	xor    eax,eax
c0013c0a:	c3                   	ret    
c0013c0b:	90                   	nop

c0013c0c <DriverlessDevice::detect()>:
c0013c0c:	c3                   	ret    
c0013c0d:	90                   	nop

c0013c0e <DriverlessDevice::open(int, int, void*)>:
c0013c0e:	83 ec 18             	sub    esp,0x18
c0013c11:	68 b0 9a 02 c0       	push   0xc0029ab0
c0013c16:	e8 64 60 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c0013c1b:	83 c8 ff             	or     eax,0xffffffff
c0013c1e:	83 c4 1c             	add    esp,0x1c
c0013c21:	c3                   	ret    

c0013c22 <Device::~Device()>:
c0013c22:	ba d8 9a 02 c0       	mov    edx,0xc0029ad8
c0013c27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c2b:	89 10                	mov    DWORD PTR [eax],edx
c0013c2d:	90                   	nop
c0013c2e:	c3                   	ret    
c0013c2f:	90                   	nop

c0013c30 <Device::~Device()>:
c0013c30:	83 ec 0c             	sub    esp,0xc
c0013c33:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013c37:	e8 e6 ff ff ff       	call   c0013c22 <Device::~Device()>
c0013c3c:	83 c4 04             	add    esp,0x4
c0013c3f:	83 ec 08             	sub    esp,0x8
c0013c42:	68 58 01 00 00       	push   0x158
c0013c47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c4b:	e8 f9 eb ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0013c50:	83 c4 10             	add    esp,0x10
c0013c53:	83 c4 0c             	add    esp,0xc
c0013c56:	c3                   	ret    
c0013c57:	90                   	nop

c0013c58 <Device::findAndLoadDriver()>:
c0013c58:	c3                   	ret    
c0013c59:	90                   	nop

c0013c5a <Device::preOpenPCI(PCIDeviceInfo)>:
c0013c5a:	57                   	push   edi
c0013c5b:	b9 09 00 00 00       	mov    ecx,0x9
c0013c60:	56                   	push   esi
c0013c61:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013c65:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013c69:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013c73:	81 c7 18 01 00 00    	add    edi,0x118
c0013c79:	fc                   	cld    
c0013c7a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013c7c:	5e                   	pop    esi
c0013c7d:	5f                   	pop    edi
c0013c7e:	c3                   	ret    
c0013c7f:	90                   	nop

c0013c80 <Device::preOpenACPI(void*, char*, char*)>:
c0013c80:	56                   	push   esi
c0013c81:	53                   	push   ebx
c0013c82:	83 ec 08             	sub    esp,0x8
c0013c85:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013c89:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013c8d:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013c97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c9b:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013ca1:	6a 1e                	push   0x1e
c0013ca3:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013ca9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013cad:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013cb3:	50                   	push   eax
c0013cb4:	e8 e7 c9 fe ff       	call   c00006a0 <memcpy>
c0013cb9:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013cbd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013cc1:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013cc9:	83 c4 14             	add    esp,0x14
c0013ccc:	5b                   	pop    ebx
c0013ccd:	5e                   	pop    esi
c0013cce:	e9 cd c9 fe ff       	jmp    c00006a0 <memcpy>
c0013cd3:	90                   	nop

c0013cd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013cd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cd8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013cdd:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013ce4:	75 0b                	jne    c0013cf1 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013ce6:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ce8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cec:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013cef:	eb 1e                	jmp    c0013d0f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013cf1:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c0013cf6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013cfc:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013d02:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013d04:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013d08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d0c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013d0f:	ff e0                	jmp    eax
c0013d11:	90                   	nop

c0013d12 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013d12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d16:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013d1b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013d22:	75 0b                	jne    c0013d2f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013d24:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d26:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013d2a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013d2d:	eb 1e                	jmp    c0013d4d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013d2f:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c0013d34:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013d3a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013d40:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013d42:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013d46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d4a:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013d4d:	ff e0                	jmp    eax
c0013d4f:	90                   	nop

c0013d50 <Device::addChild(Device*)>:
c0013d50:	53                   	push   ebx
c0013d51:	83 ec 08             	sub    esp,0x8
c0013d54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d5c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013d62:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013d68:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013d6a:	85 d2                	test   edx,edx
c0013d6c:	74 04                	je     c0013d72 <Device::addChild(Device*)+0x22>
c0013d6e:	89 d3                	mov    ebx,edx
c0013d70:	eb f6                	jmp    c0013d68 <Device::addChild(Device*)+0x18>
c0013d72:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013d75:	83 ec 0c             	sub    esp,0xc
c0013d78:	6a 08                	push   0x8
c0013d7a:	e8 db b8 ff ff       	call   c000f65a <malloc>
c0013d7f:	89 03                	mov    DWORD PTR [ebx],eax
c0013d81:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d87:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d8e:	83 c4 18             	add    esp,0x18
c0013d91:	5b                   	pop    ebx
c0013d92:	c3                   	ret    
c0013d93:	90                   	nop

c0013d94 <Device::removeAllChildren()>:
c0013d94:	56                   	push   esi
c0013d95:	53                   	push   ebx
c0013d96:	52                   	push   edx
c0013d97:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d9b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013da1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013da4:	74 17                	je     c0013dbd <Device::removeAllChildren()+0x29>
c0013da6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013da9:	85 c0                	test   eax,eax
c0013dab:	74 0c                	je     c0013db9 <Device::removeAllChildren()+0x25>
c0013dad:	83 ec 0c             	sub    esp,0xc
c0013db0:	8b 10                	mov    edx,DWORD PTR [eax]
c0013db2:	50                   	push   eax
c0013db3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013db6:	83 c4 10             	add    esp,0x10
c0013db9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dbb:	eb e4                	jmp    c0013da1 <Device::removeAllChildren()+0xd>
c0013dbd:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013dc3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013dc9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013dcf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013dd6:	58                   	pop    eax
c0013dd7:	5b                   	pop    ebx
c0013dd8:	5e                   	pop    esi
c0013dd9:	c3                   	ret    

c0013dda <Device::hibernateAll()>:
c0013dda:	53                   	push   ebx
c0013ddb:	83 ec 14             	sub    esp,0x14
c0013dde:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013de2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013de4:	53                   	push   ebx
c0013de5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013de8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dee:	83 c4 10             	add    esp,0x10
c0013df1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013df4:	74 0f                	je     c0013e05 <Device::hibernateAll()+0x2b>
c0013df6:	83 ec 0c             	sub    esp,0xc
c0013df9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dfc:	e8 d9 ff ff ff       	call   c0013dda <Device::hibernateAll()>
c0013e01:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e03:	eb e9                	jmp    c0013dee <Device::hibernateAll()+0x14>
c0013e05:	83 c4 08             	add    esp,0x8
c0013e08:	5b                   	pop    ebx
c0013e09:	c3                   	ret    

c0013e0a <Device::wakeAll()>:
c0013e0a:	53                   	push   ebx
c0013e0b:	83 ec 14             	sub    esp,0x14
c0013e0e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e12:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e14:	53                   	push   ebx
c0013e15:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013e18:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e1e:	83 c4 10             	add    esp,0x10
c0013e21:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e24:	74 0f                	je     c0013e35 <Device::wakeAll()+0x2b>
c0013e26:	83 ec 0c             	sub    esp,0xc
c0013e29:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e2c:	e8 d9 ff ff ff       	call   c0013e0a <Device::wakeAll()>
c0013e31:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e33:	eb e9                	jmp    c0013e1e <Device::wakeAll()+0x14>
c0013e35:	83 c4 08             	add    esp,0x8
c0013e38:	5b                   	pop    ebx
c0013e39:	c3                   	ret    

c0013e3a <Device::detectAll()>:
c0013e3a:	53                   	push   ebx
c0013e3b:	83 ec 14             	sub    esp,0x14
c0013e3e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e42:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e44:	53                   	push   ebx
c0013e45:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013e48:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e4e:	83 c4 10             	add    esp,0x10
c0013e51:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e54:	74 0f                	je     c0013e65 <Device::detectAll()+0x2b>
c0013e56:	83 ec 0c             	sub    esp,0xc
c0013e59:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e5c:	e8 d9 ff ff ff       	call   c0013e3a <Device::detectAll()>
c0013e61:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e63:	eb e9                	jmp    c0013e4e <Device::detectAll()+0x14>
c0013e65:	83 c4 08             	add    esp,0x8
c0013e68:	5b                   	pop    ebx
c0013e69:	c3                   	ret    

c0013e6a <Device::disableLegacyAll()>:
c0013e6a:	53                   	push   ebx
c0013e6b:	83 ec 14             	sub    esp,0x14
c0013e6e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e74:	53                   	push   ebx
c0013e75:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013e78:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e7e:	83 c4 10             	add    esp,0x10
c0013e81:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e84:	74 0f                	je     c0013e95 <Device::disableLegacyAll()+0x2b>
c0013e86:	83 ec 0c             	sub    esp,0xc
c0013e89:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e8c:	e8 d9 ff ff ff       	call   c0013e6a <Device::disableLegacyAll()>
c0013e91:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e93:	eb e9                	jmp    c0013e7e <Device::disableLegacyAll()+0x14>
c0013e95:	83 c4 08             	add    esp,0x8
c0013e98:	5b                   	pop    ebx
c0013e99:	c3                   	ret    

c0013e9a <Device::loadDriversForAll()>:
c0013e9a:	53                   	push   ebx
c0013e9b:	83 ec 08             	sub    esp,0x8
c0013e9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ea2:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013ea8:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013eaa:	85 db                	test   ebx,ebx
c0013eac:	74 12                	je     c0013ec0 <Device::loadDriversForAll()+0x26>
c0013eae:	83 ec 0c             	sub    esp,0xc
c0013eb1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013eb4:	e8 e1 ff ff ff       	call   c0013e9a <Device::loadDriversForAll()>
c0013eb9:	83 c4 10             	add    esp,0x10
c0013ebc:	89 d8                	mov    eax,ebx
c0013ebe:	eb e8                	jmp    c0013ea8 <Device::loadDriversForAll()+0xe>
c0013ec0:	83 c4 08             	add    esp,0x8
c0013ec3:	5b                   	pop    ebx
c0013ec4:	c3                   	ret    
c0013ec5:	90                   	nop

c0013ec6 <Device::closeAll()>:
c0013ec6:	53                   	push   ebx
c0013ec7:	83 ec 08             	sub    esp,0x8
c0013eca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ece:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ed0:	6a 00                	push   0x0
c0013ed2:	6a 00                	push   0x0
c0013ed4:	6a 00                	push   0x0
c0013ed6:	53                   	push   ebx
c0013ed7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013eda:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ee0:	83 c4 10             	add    esp,0x10
c0013ee3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ee6:	74 0f                	je     c0013ef7 <Device::closeAll()+0x31>
c0013ee8:	83 ec 0c             	sub    esp,0xc
c0013eeb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013eee:	e8 d3 ff ff ff       	call   c0013ec6 <Device::closeAll()>
c0013ef3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ef5:	eb e9                	jmp    c0013ee0 <Device::closeAll()+0x1a>
c0013ef7:	83 c4 08             	add    esp,0x8
c0013efa:	5b                   	pop    ebx
c0013efb:	c3                   	ret    

c0013efc <Device::powerSavingAll(PowerSavingLevel)>:
c0013efc:	56                   	push   esi
c0013efd:	53                   	push   ebx
c0013efe:	83 ec 0c             	sub    esp,0xc
c0013f01:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013f05:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013f09:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f0b:	56                   	push   esi
c0013f0c:	53                   	push   ebx
c0013f0d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013f10:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f16:	83 c4 10             	add    esp,0x10
c0013f19:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f1c:	74 0f                	je     c0013f2d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013f1e:	52                   	push   edx
c0013f1f:	52                   	push   edx
c0013f20:	56                   	push   esi
c0013f21:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f24:	e8 d3 ff ff ff       	call   c0013efc <Device::powerSavingAll(PowerSavingLevel)>
c0013f29:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f2b:	eb e9                	jmp    c0013f16 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013f2d:	58                   	pop    eax
c0013f2e:	5b                   	pop    ebx
c0013f2f:	5e                   	pop    esi
c0013f30:	c3                   	ret    
c0013f31:	90                   	nop

c0013f32 <Device::setName(char const*)>:
c0013f32:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013f3a:	e9 24 c8 fe ff       	jmp    c0000763 <strcpy>
c0013f3f:	90                   	nop

c0013f40 <Device::Device(char const*)>:
c0013f40:	83 ec 1c             	sub    esp,0x1c
c0013f43:	ba d8 9a 02 c0       	mov    edx,0xc0029ad8
c0013f48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f4c:	89 10                	mov    DWORD PTR [eax],edx
c0013f4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f52:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013f5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f60:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013f6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f6e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f7c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f86:	83 ec 08             	sub    esp,0x8
c0013f89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f91:	e8 9c ff ff ff       	call   c0013f32 <Device::setName(char const*)>
c0013f96:	83 c4 10             	add    esp,0x10
c0013f99:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013fa1:	83 ec 0c             	sub    esp,0xc
c0013fa4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fa8:	e8 ad b6 ff ff       	call   c000f65a <malloc>
c0013fad:	83 c4 10             	add    esp,0x10
c0013fb0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013fb6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fbd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013fc1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013fc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fcb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013fd1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fdb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013fe1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fe8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fec:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013ff3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ff7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013ffe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014002:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001400c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014010:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001401a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001401e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014028:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001402c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014036:	90                   	nop
c0014037:	83 c4 1c             	add    esp,0x1c
c001403a:	c3                   	ret    
c001403b:	90                   	nop

c001403c <Device::getName()>:
c001403c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014040:	05 d0 00 00 00       	add    eax,0xd0
c0014045:	c3                   	ret    

c0014046 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014046:	83 ec 0c             	sub    esp,0xc
c0014049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001404d:	83 ec 08             	sub    esp,0x8
c0014050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014054:	50                   	push   eax
c0014055:	e8 e6 fe ff ff       	call   c0013f40 <Device::Device(char const*)>
c001405a:	83 c4 10             	add    esp,0x10
c001405d:	ba 04 9b 02 c0       	mov    edx,0xc0029b04
c0014062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014066:	89 10                	mov    DWORD PTR [eax],edx
c0014068:	90                   	nop
c0014069:	83 c4 0c             	add    esp,0xc
c001406c:	c3                   	ret    
c001406d:	90                   	nop

c001406e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001406e:	57                   	push   edi
c001406f:	56                   	push   esi
c0014070:	53                   	push   ebx
c0014071:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014075:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014079:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001407d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014083:	75 0c                	jne    c0014091 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014085:	52                   	push   edx
c0014086:	52                   	push   edx
c0014087:	53                   	push   ebx
c0014088:	56                   	push   esi
c0014089:	e8 4c 37 01 00       	call   c00277da <LinkedList<Device>::addElement(Device*)>
c001408e:	83 c4 10             	add    esp,0x10
c0014091:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014097:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001409a:	74 12                	je     c00140ae <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001409c:	50                   	push   eax
c001409d:	57                   	push   edi
c001409e:	56                   	push   esi
c001409f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00140a2:	e8 c7 ff ff ff       	call   c001406e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00140a7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00140a9:	83 c4 10             	add    esp,0x10
c00140ac:	eb e9                	jmp    c0014097 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00140ae:	5b                   	pop    ebx
c00140af:	5e                   	pop    esi
c00140b0:	5f                   	pop    edi
c00140b1:	c3                   	ret    

c00140b2 <getDevicesOfType(DeviceType)>:
c00140b2:	53                   	push   ebx
c00140b3:	83 ec 14             	sub    esp,0x14
c00140b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00140ba:	53                   	push   ebx
c00140bb:	e8 f6 37 01 00       	call   c00278b6 <LinkedList<Device>::LinkedList()>
c00140c0:	83 c4 0c             	add    esp,0xc
c00140c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140c7:	53                   	push   ebx
c00140c8:	ff 35 e8 d0 02 c0    	push   DWORD PTR ds:0xc002d0e8
c00140ce:	e8 9b ff ff ff       	call   c001406e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00140d3:	89 d8                	mov    eax,ebx
c00140d5:	83 c4 18             	add    esp,0x18
c00140d8:	5b                   	pop    ebx
c00140d9:	c2 04 00             	ret    0x4

c00140dc <HardDiskController::HardDiskController(char const*)>:
c00140dc:	83 ec 0c             	sub    esp,0xc
c00140df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e3:	83 ec 08             	sub    esp,0x8
c00140e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140ea:	50                   	push   eax
c00140eb:	e8 50 fe ff ff       	call   c0013f40 <Device::Device(char const*)>
c00140f0:	83 c4 10             	add    esp,0x10
c00140f3:	ba 30 9b 02 c0       	mov    edx,0xc0029b30
c00140f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140fc:	89 10                	mov    DWORD PTR [eax],edx
c00140fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014102:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001410c:	90                   	nop
c001410d:	83 c4 0c             	add    esp,0xc
c0014110:	c3                   	ret    
c0014111:	90                   	nop

c0014112 <HardDiskController::~HardDiskController()>:
c0014112:	83 ec 0c             	sub    esp,0xc
c0014115:	ba 30 9b 02 c0       	mov    edx,0xc0029b30
c001411a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001411e:	89 10                	mov    DWORD PTR [eax],edx
c0014120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014124:	83 ec 0c             	sub    esp,0xc
c0014127:	50                   	push   eax
c0014128:	e8 f5 fa ff ff       	call   c0013c22 <Device::~Device()>
c001412d:	83 c4 10             	add    esp,0x10
c0014130:	90                   	nop
c0014131:	83 c4 0c             	add    esp,0xc
c0014134:	c3                   	ret    
c0014135:	90                   	nop

c0014136 <HardDiskController::~HardDiskController()>:
c0014136:	83 ec 0c             	sub    esp,0xc
c0014139:	83 ec 0c             	sub    esp,0xc
c001413c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014140:	e8 cd ff ff ff       	call   c0014112 <HardDiskController::~HardDiskController()>
c0014145:	83 c4 10             	add    esp,0x10
c0014148:	83 ec 08             	sub    esp,0x8
c001414b:	68 58 01 00 00       	push   0x158
c0014150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014154:	e8 f0 e6 ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0014159:	83 c4 10             	add    esp,0x10
c001415c:	83 c4 0c             	add    esp,0xc
c001415f:	c3                   	ret    

c0014160 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014160:	83 ec 0c             	sub    esp,0xc
c0014163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014167:	83 ec 08             	sub    esp,0x8
c001416a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001416e:	50                   	push   eax
c001416f:	e8 cc fd ff ff       	call   c0013f40 <Device::Device(char const*)>
c0014174:	83 c4 10             	add    esp,0x10
c0014177:	ba 5c 9b 02 c0       	mov    edx,0xc0029b5c
c001417c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014180:	89 10                	mov    DWORD PTR [eax],edx
c0014182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014186:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001418d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014191:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001419c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00141a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00141ae:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00141b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141b8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00141c2:	90                   	nop
c00141c3:	83 c4 0c             	add    esp,0xc
c00141c6:	c3                   	ret    
c00141c7:	90                   	nop

c00141c8 <PhysicalDisk::startCache()>:
c00141c8:	56                   	push   esi
c00141c9:	53                   	push   ebx
c00141ca:	83 ec 10             	sub    esp,0x10
c00141cd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141d1:	6a 30                	push   0x30
c00141d3:	e8 82 b4 ff ff       	call   c000f65a <malloc>
c00141d8:	89 c6                	mov    esi,eax
c00141da:	58                   	pop    eax
c00141db:	5a                   	pop    edx
c00141dc:	53                   	push   ebx
c00141dd:	56                   	push   esi
c00141de:	e8 dd 25 00 00       	call   c00167c0 <VCache::VCache(PhysicalDisk*)>
c00141e3:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00141e9:	83 c4 14             	add    esp,0x14
c00141ec:	5b                   	pop    ebx
c00141ed:	5e                   	pop    esi
c00141ee:	c3                   	ret    
c00141ef:	90                   	nop

c00141f0 <PhysicalDisk::~PhysicalDisk()>:
c00141f0:	83 ec 0c             	sub    esp,0xc
c00141f3:	ba 5c 9b 02 c0       	mov    edx,0xc0029b5c
c00141f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141fc:	89 10                	mov    DWORD PTR [eax],edx
c00141fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014202:	83 ec 0c             	sub    esp,0xc
c0014205:	50                   	push   eax
c0014206:	e8 17 fa ff ff       	call   c0013c22 <Device::~Device()>
c001420b:	83 c4 10             	add    esp,0x10
c001420e:	90                   	nop
c001420f:	83 c4 0c             	add    esp,0xc
c0014212:	c3                   	ret    
c0014213:	90                   	nop

c0014214 <PhysicalDisk::~PhysicalDisk()>:
c0014214:	83 ec 0c             	sub    esp,0xc
c0014217:	83 ec 0c             	sub    esp,0xc
c001421a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001421e:	e8 cd ff ff ff       	call   c00141f0 <PhysicalDisk::~PhysicalDisk()>
c0014223:	83 c4 10             	add    esp,0x10
c0014226:	83 ec 08             	sub    esp,0x8
c0014229:	68 6c 01 00 00       	push   0x16c
c001422e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014232:	e8 12 e6 ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0014237:	83 c4 10             	add    esp,0x10
c001423a:	83 c4 0c             	add    esp,0xc
c001423d:	c3                   	ret    

c001423e <FPU::FPU(char const*)>:
c001423e:	83 ec 0c             	sub    esp,0xc
c0014241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014245:	83 ec 08             	sub    esp,0x8
c0014248:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001424c:	50                   	push   eax
c001424d:	e8 ee fc ff ff       	call   c0013f40 <Device::Device(char const*)>
c0014252:	83 c4 10             	add    esp,0x10
c0014255:	ba 9c 9b 02 c0       	mov    edx,0xc0029b9c
c001425a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001425e:	89 10                	mov    DWORD PTR [eax],edx
c0014260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014264:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001426e:	90                   	nop
c001426f:	83 c4 0c             	add    esp,0xc
c0014272:	c3                   	ret    
c0014273:	90                   	nop

c0014274 <FPU::~FPU()>:
c0014274:	83 ec 0c             	sub    esp,0xc
c0014277:	ba 9c 9b 02 c0       	mov    edx,0xc0029b9c
c001427c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014280:	89 10                	mov    DWORD PTR [eax],edx
c0014282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014286:	83 ec 0c             	sub    esp,0xc
c0014289:	50                   	push   eax
c001428a:	e8 93 f9 ff ff       	call   c0013c22 <Device::~Device()>
c001428f:	83 c4 10             	add    esp,0x10
c0014292:	90                   	nop
c0014293:	83 c4 0c             	add    esp,0xc
c0014296:	c3                   	ret    
c0014297:	90                   	nop

c0014298 <FPU::~FPU()>:
c0014298:	83 ec 0c             	sub    esp,0xc
c001429b:	83 ec 0c             	sub    esp,0xc
c001429e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142a2:	e8 cd ff ff ff       	call   c0014274 <FPU::~FPU()>
c00142a7:	83 c4 10             	add    esp,0x10
c00142aa:	83 ec 08             	sub    esp,0x8
c00142ad:	68 58 01 00 00       	push   0x158
c00142b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142b6:	e8 8e e5 ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c00142bb:	83 c4 10             	add    esp,0x10
c00142be:	83 c4 0c             	add    esp,0xc
c00142c1:	c3                   	ret    

c00142c2 <setupFPU()>:
c00142c2:	53                   	push   ebx
c00142c3:	83 ec 08             	sub    esp,0x8
c00142c6:	8b 15 e8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0e8
c00142cc:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00142d3:	74 19                	je     c00142ee <setupFPU()+0x2c>
c00142d5:	83 ec 0c             	sub    esp,0xc
c00142d8:	68 58 01 00 00       	push   0x158
c00142dd:	e8 78 b3 ff ff       	call   c000f65a <malloc>
c00142e2:	89 c3                	mov    ebx,eax
c00142e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00142e7:	e8 36 01 01 00       	call   c0024422 <AVX::AVX()>
c00142ec:	eb 5b                	jmp    c0014349 <setupFPU()+0x87>
c00142ee:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00142f4:	84 c0                	test   al,al
c00142f6:	79 19                	jns    c0014311 <setupFPU()+0x4f>
c00142f8:	83 ec 0c             	sub    esp,0xc
c00142fb:	68 58 01 00 00       	push   0x158
c0014300:	e8 55 b3 ff ff       	call   c000f65a <malloc>
c0014305:	89 c3                	mov    ebx,eax
c0014307:	89 04 24             	mov    DWORD PTR [esp],eax
c001430a:	e8 39 02 01 00       	call   c0024548 <SSE::SSE()>
c001430f:	eb 38                	jmp    c0014349 <setupFPU()+0x87>
c0014311:	a8 20                	test   al,0x20
c0014313:	74 19                	je     c001432e <setupFPU()+0x6c>
c0014315:	83 ec 0c             	sub    esp,0xc
c0014318:	68 58 01 00 00       	push   0x158
c001431d:	e8 38 b3 ff ff       	call   c000f65a <malloc>
c0014322:	89 c3                	mov    ebx,eax
c0014324:	89 04 24             	mov    DWORD PTR [esp],eax
c0014327:	e8 86 01 01 00       	call   c00244b2 <MMX::MMX()>
c001432c:	eb 1b                	jmp    c0014349 <setupFPU()+0x87>
c001432e:	a8 10                	test   al,0x10
c0014330:	74 1c                	je     c001434e <setupFPU()+0x8c>
c0014332:	83 ec 0c             	sub    esp,0xc
c0014335:	68 58 01 00 00       	push   0x158
c001433a:	e8 1b b3 ff ff       	call   c000f65a <malloc>
c001433f:	89 c3                	mov    ebx,eax
c0014341:	89 04 24             	mov    DWORD PTR [esp],eax
c0014344:	e8 8d 02 01 00       	call   c00245d6 <x87::x87()>
c0014349:	83 c4 10             	add    esp,0x10
c001434c:	eb 24                	jmp    c0014372 <setupFPU()+0xb0>
c001434e:	83 e0 ef             	and    eax,0xffffffef
c0014351:	83 ec 0c             	sub    esp,0xc
c0014354:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001435a:	68 88 9b 02 c0       	push   0xc0029b88
c001435f:	e8 c5 e5 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0014364:	0f 20 c0             	mov    eax,cr0
c0014367:	83 c8 04             	or     eax,0x4
c001436a:	0f 22 c0             	mov    cr0,eax
c001436d:	31 db                	xor    ebx,ebx
c001436f:	83 c4 10             	add    esp,0x10
c0014372:	89 d8                	mov    eax,ebx
c0014374:	83 c4 08             	add    esp,0x8
c0014377:	5b                   	pop    ebx
c0014378:	c3                   	ret    
c0014379:	90                   	nop

c001437a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001437a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001437e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014382:	c1 e0 04             	shl    eax,0x4
c0014385:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014389:	8d 50 10             	lea    edx,[eax+0x10]
c001438c:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014392:	74 08                	je     c001439c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014394:	83 c0 04             	add    eax,0x4
c0014397:	39 d0                	cmp    eax,edx
c0014399:	75 f1                	jne    c001438c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001439b:	c3                   	ret    
c001439c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00143a6:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00143b0:	eb e2                	jmp    c0014394 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00143b2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00143b2:	57                   	push   edi
c00143b3:	31 c0                	xor    eax,eax
c00143b5:	56                   	push   esi
c00143b6:	53                   	push   ebx
c00143b7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00143bb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00143bf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00143c3:	89 da                	mov    edx,ebx
c00143c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00143c9:	c1 e2 04             	shl    edx,0x4
c00143cc:	01 ca                	add    edx,ecx
c00143ce:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00143d6:	74 16                	je     c00143ee <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00143d8:	40                   	inc    eax
c00143d9:	83 f8 04             	cmp    eax,0x4
c00143dc:	75 f0                	jne    c00143ce <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00143de:	c7 44 24 10 cc 9b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029bcc
c00143e6:	5b                   	pop    ebx
c00143e7:	5e                   	pop    esi
c00143e8:	5f                   	pop    edi
c00143e9:	e9 91 58 00 00       	jmp    c0019c7f <Krnl::panic(char const*)>
c00143ee:	8d 04 98             	lea    eax,[eax+ebx*4]
c00143f1:	8d 04 81             	lea    eax,[ecx+eax*4]
c00143f4:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00143fa:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014400:	5b                   	pop    ebx
c0014401:	5e                   	pop    esi
c0014402:	5f                   	pop    edi
c0014403:	c3                   	ret    

c0014404 <doubleFault(regs*, void*)>:
c0014404:	55                   	push   ebp
c0014405:	89 e5                	mov    ebp,esp
c0014407:	83 ec 08             	sub    esp,0x8
c001440a:	83 ec 0c             	sub    esp,0xc
c001440d:	68 07 9c 02 c0       	push   0xc0029c07
c0014412:	e8 68 58 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c0014417:	83 c4 10             	add    esp,0x10
c001441a:	90                   	nop
c001441b:	c9                   	leave  
c001441c:	c3                   	ret    
c001441d:	90                   	nop

c001441e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001441e:	56                   	push   esi
c001441f:	53                   	push   ebx
c0014420:	50                   	push   eax
c0014421:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014425:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014429:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001442e:	75 35                	jne    c0014465 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014430:	8d 43 20             	lea    eax,[ebx+0x20]
c0014433:	31 d2                	xor    edx,edx
c0014435:	89 c1                	mov    ecx,eax
c0014437:	c1 e1 04             	shl    ecx,0x4
c001443a:	01 f1                	add    ecx,esi
c001443c:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014444:	74 3e                	je     c0014484 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014446:	42                   	inc    edx
c0014447:	83 fa 04             	cmp    edx,0x4
c001444a:	75 f0                	jne    c001443c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001444c:	83 ec 0c             	sub    esp,0xc
c001444f:	68 4c 9c 02 c0       	push   0xc0029c4c
c0014454:	e8 26 58 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c0014459:	83 c4 10             	add    esp,0x10
c001445c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014461:	5a                   	pop    edx
c0014462:	5b                   	pop    ebx
c0014463:	5e                   	pop    esi
c0014464:	c3                   	ret    
c0014465:	83 ec 0c             	sub    esp,0xc
c0014468:	56                   	push   esi
c0014469:	e8 ce fb ff ff       	call   c001403c <Device::getName()>
c001446e:	83 c4 10             	add    esp,0x10
c0014471:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014474:	75 ba                	jne    c0014430 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014476:	83 fb 0f             	cmp    ebx,0xf
c0014479:	7f 29                	jg     c00144a4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001447b:	0f b6 9b 40 c3 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3cc0]
c0014482:	eb ac                	jmp    c0014430 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014484:	8d 04 82             	lea    eax,[edx+eax*4]
c0014487:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001448b:	8d 04 86             	lea    eax,[esi+eax*4]
c001448e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014494:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014498:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001449e:	89 d8                	mov    eax,ebx
c00144a0:	5a                   	pop    edx
c00144a1:	5b                   	pop    ebx
c00144a2:	5e                   	pop    esi
c00144a3:	c3                   	ret    
c00144a4:	83 ec 0c             	sub    esp,0xc
c00144a7:	68 14 9c 02 c0       	push   0xc0029c14
c00144ac:	e8 ce 57 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c00144b1:	83 c4 10             	add    esp,0x10
c00144b4:	e9 77 ff ff ff       	jmp    c0014430 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00144b9:	90                   	nop

c00144ba <InterruptController::clearAllHandlers(int, bool)>:
c00144ba:	56                   	push   esi
c00144bb:	53                   	push   ebx
c00144bc:	52                   	push   edx
c00144bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00144c5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00144ca:	75 61                	jne    c001452d <InterruptController::clearAllHandlers(int, bool)+0x73>
c00144cc:	8d 46 20             	lea    eax,[esi+0x20]
c00144cf:	c1 e6 04             	shl    esi,0x4
c00144d2:	c1 e0 04             	shl    eax,0x4
c00144d5:	01 de                	add    esi,ebx
c00144d7:	01 d8                	add    eax,ebx
c00144d9:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00144e3:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00144ed:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00144f7:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014501:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001450b:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014515:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c001451f:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014529:	58                   	pop    eax
c001452a:	5b                   	pop    ebx
c001452b:	5e                   	pop    esi
c001452c:	c3                   	ret    
c001452d:	83 ec 0c             	sub    esp,0xc
c0014530:	53                   	push   ebx
c0014531:	e8 06 fb ff ff       	call   c001403c <Device::getName()>
c0014536:	83 c4 10             	add    esp,0x10
c0014539:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001453c:	75 8e                	jne    c00144cc <InterruptController::clearAllHandlers(int, bool)+0x12>
c001453e:	83 fe 0f             	cmp    esi,0xf
c0014541:	7f 09                	jg     c001454c <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014543:	0f b6 b6 40 c3 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3cc0]
c001454a:	eb 80                	jmp    c00144cc <InterruptController::clearAllHandlers(int, bool)+0x12>
c001454c:	83 ec 0c             	sub    esp,0xc
c001454f:	68 88 9c 02 c0       	push   0xc0029c88
c0014554:	e8 26 57 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c0014559:	83 c4 10             	add    esp,0x10
c001455c:	e9 6b ff ff ff       	jmp    c00144cc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014561:	90                   	nop

c0014562 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014562:	56                   	push   esi
c0014563:	53                   	push   ebx
c0014564:	52                   	push   edx
c0014565:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014569:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001456d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014572:	75 3a                	jne    c00145ae <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014574:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014578:	8d 50 20             	lea    edx,[eax+0x20]
c001457b:	c1 e2 04             	shl    edx,0x4
c001457e:	8d 04 16             	lea    eax,[esi+edx*1]
c0014581:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014585:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001458b:	74 0b                	je     c0014598 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001458d:	83 c0 04             	add    eax,0x4
c0014590:	39 d0                	cmp    eax,edx
c0014592:	75 f1                	jne    c0014585 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014594:	58                   	pop    eax
c0014595:	5b                   	pop    ebx
c0014596:	5e                   	pop    esi
c0014597:	c3                   	ret    
c0014598:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00145a2:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00145ac:	eb df                	jmp    c001458d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00145ae:	83 ec 0c             	sub    esp,0xc
c00145b1:	56                   	push   esi
c00145b2:	e8 85 fa ff ff       	call   c001403c <Device::getName()>
c00145b7:	83 c4 10             	add    esp,0x10
c00145ba:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00145bd:	75 b5                	jne    c0014574 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00145bf:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00145c4:	7f 11                	jg     c00145d7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00145c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145ca:	0f b6 80 40 c3 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3cc0]
c00145d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145d5:	eb 9d                	jmp    c0014574 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00145d7:	83 ec 0c             	sub    esp,0xc
c00145da:	68 88 9c 02 c0       	push   0xc0029c88
c00145df:	e8 9b 56 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c00145e4:	83 c4 10             	add    esp,0x10
c00145e7:	eb 8b                	jmp    c0014574 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00145e9 <nmiHandler(regs*, void*)>:
c00145e9:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c00145ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00145f2:	e9 af a7 ff ff       	jmp    c000eda6 <Computer::handleNMI()>

c00145f7 <int_handler>:
c00145f7:	55                   	push   ebp
c00145f8:	57                   	push   edi
c00145f9:	56                   	push   esi
c00145fa:	53                   	push   ebx
c00145fb:	83 ec 0c             	sub    esp,0xc
c00145fe:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014602:	80 3d 20 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc20,0x0
c0014609:	74 0b                	je     c0014616 <int_handler+0x1f>
c001460b:	fa                   	cli    
c001460c:	f4                   	hlt    
c001460d:	80 3d 20 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc20,0x0
c0014614:	75 f5                	jne    c001460b <int_handler+0x14>
c0014616:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c001461b:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c001461e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014624:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c001462a:	8d 43 e0             	lea    eax,[ebx-0x20]
c001462d:	83 f8 17             	cmp    eax,0x17
c0014630:	77 13                	ja     c0014645 <int_handler+0x4e>
c0014632:	83 ec 08             	sub    esp,0x8
c0014635:	8b 17                	mov    edx,DWORD PTR [edi]
c0014637:	8d 43 e0             	lea    eax,[ebx-0x20]
c001463a:	0f b6 c0             	movzx  eax,al
c001463d:	50                   	push   eax
c001463e:	57                   	push   edi
c001463f:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014642:	83 c4 10             	add    esp,0x10
c0014645:	83 c3 15             	add    ebx,0x15
c0014648:	c1 e3 04             	shl    ebx,0x4
c001464b:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001464f:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014656:	31 db                	xor    ebx,ebx
c0014658:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001465c:	85 c0                	test   eax,eax
c001465e:	74 13                	je     c0014673 <int_handler+0x7c>
c0014660:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014663:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014667:	74 1c                	je     c0014685 <int_handler+0x8e>
c0014669:	83 ec 08             	sub    esp,0x8
c001466c:	52                   	push   edx
c001466d:	56                   	push   esi
c001466e:	ff d0                	call   eax
c0014670:	83 c4 10             	add    esp,0x10
c0014673:	43                   	inc    ebx
c0014674:	83 fb 04             	cmp    ebx,0x4
c0014677:	75 df                	jne    c0014658 <int_handler+0x61>
c0014679:	83 c4 0c             	add    esp,0xc
c001467c:	31 c0                	xor    eax,eax
c001467e:	5b                   	pop    ebx
c001467f:	31 d2                	xor    edx,edx
c0014681:	5e                   	pop    esi
c0014682:	5f                   	pop    edi
c0014683:	5d                   	pop    ebp
c0014684:	c3                   	ret    
c0014685:	83 ec 08             	sub    esp,0x8
c0014688:	52                   	push   edx
c0014689:	56                   	push   esi
c001468a:	ff d0                	call   eax
c001468c:	83 c4 10             	add    esp,0x10
c001468f:	83 c4 0c             	add    esp,0xc
c0014692:	5b                   	pop    ebx
c0014693:	5e                   	pop    esi
c0014694:	5f                   	pop    edi
c0014695:	5d                   	pop    ebp
c0014696:	c3                   	ret    
c0014697:	90                   	nop

c0014698 <InterruptController::InterruptController(char const*)>:
c0014698:	83 ec 1c             	sub    esp,0x1c
c001469b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001469f:	83 ec 08             	sub    esp,0x8
c00146a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00146a6:	50                   	push   eax
c00146a7:	e8 94 f8 ff ff       	call   c0013f40 <Device::Device(char const*)>
c00146ac:	83 c4 10             	add    esp,0x10
c00146af:	ba bc 9e 02 c0       	mov    edx,0xc0029ebc
c00146b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146b8:	89 10                	mov    DWORD PTR [eax],edx
c00146ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146be:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00146c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146d0:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00146d8:	7f 5e                	jg     c0014738 <InterruptController::InterruptController(char const*)+0xa0>
c00146da:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00146e2:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00146e7:	7f 49                	jg     c0014732 <InterruptController::InterruptController(char const*)+0x9a>
c00146e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146f1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146fc:	01 ca                	add    edx,ecx
c00146fe:	83 c2 54             	add    edx,0x54
c0014701:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014709:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001470d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014711:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014718:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001471c:	01 ca                	add    edx,ecx
c001471e:	81 c2 54 04 00 00    	add    edx,0x454
c0014724:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001472c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014730:	eb b0                	jmp    c00146e2 <InterruptController::InterruptController(char const*)+0x4a>
c0014732:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014736:	eb 98                	jmp    c00146d0 <InterruptController::InterruptController(char const*)+0x38>
c0014738:	90                   	nop
c0014739:	83 c4 1c             	add    esp,0x1c
c001473c:	c3                   	ret    
c001473d:	90                   	nop

c001473e <InterruptController::~InterruptController()>:
c001473e:	83 ec 0c             	sub    esp,0xc
c0014741:	ba bc 9e 02 c0       	mov    edx,0xc0029ebc
c0014746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001474a:	89 10                	mov    DWORD PTR [eax],edx
c001474c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014750:	83 ec 0c             	sub    esp,0xc
c0014753:	50                   	push   eax
c0014754:	e8 c9 f4 ff ff       	call   c0013c22 <Device::~Device()>
c0014759:	83 c4 10             	add    esp,0x10
c001475c:	90                   	nop
c001475d:	83 c4 0c             	add    esp,0xc
c0014760:	c3                   	ret    
c0014761:	90                   	nop

c0014762 <InterruptController::~InterruptController()>:
c0014762:	83 ec 0c             	sub    esp,0xc
c0014765:	83 ec 0c             	sub    esp,0xc
c0014768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001476c:	e8 cd ff ff ff       	call   c001473e <InterruptController::~InterruptController()>
c0014771:	83 c4 10             	add    esp,0x10
c0014774:	83 ec 08             	sub    esp,0x8
c0014777:	68 58 21 00 00       	push   0x2158
c001477c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014780:	e8 c4 e0 ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0014785:	83 c4 10             	add    esp,0x10
c0014788:	83 c4 0c             	add    esp,0xc
c001478b:	c3                   	ret    

c001478c <displayDebugInfo(regs*)>:
c001478c:	55                   	push   ebp
c001478d:	57                   	push   edi
c001478e:	56                   	push   esi
c001478f:	53                   	push   ebx
c0014790:	83 ec 24             	sub    esp,0x24
c0014793:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014797:	0f 20 c2             	mov    edx,cr0
c001479a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001479e:	0f 20 d7             	mov    edi,cr2
c00147a1:	0f 20 de             	mov    esi,cr3
c00147a4:	0f 20 e5             	mov    ebp,cr4
c00147a7:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00147aa:	68 c2 9c 02 c0       	push   0xc0029cc2
c00147af:	e8 75 e1 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00147b4:	58                   	pop    eax
c00147b5:	5a                   	pop    edx
c00147b6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00147b9:	68 cd 9c 02 c0       	push   0xc0029ccd
c00147be:	e8 66 e1 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00147c3:	59                   	pop    ecx
c00147c4:	58                   	pop    eax
c00147c5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00147c8:	68 d8 9c 02 c0       	push   0xc0029cd8
c00147cd:	e8 57 e1 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00147d2:	58                   	pop    eax
c00147d3:	5a                   	pop    edx
c00147d4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00147d7:	68 e3 9c 02 c0       	push   0xc0029ce3
c00147dc:	e8 48 e1 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00147e1:	59                   	pop    ecx
c00147e2:	58                   	pop    eax
c00147e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00147e6:	68 ee 9c 02 c0       	push   0xc0029cee
c00147eb:	e8 39 e1 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00147f0:	58                   	pop    eax
c00147f1:	5a                   	pop    edx
c00147f2:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00147f5:	68 f9 9c 02 c0       	push   0xc0029cf9
c00147fa:	e8 2a e1 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00147ff:	59                   	pop    ecx
c0014800:	58                   	pop    eax
c0014801:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014804:	68 04 9d 02 c0       	push   0xc0029d04
c0014809:	e8 1b e1 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001480e:	58                   	pop    eax
c001480f:	5a                   	pop    edx
c0014810:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014813:	68 0f 9d 02 c0       	push   0xc0029d0f
c0014818:	e8 0c e1 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001481d:	59                   	pop    ecx
c001481e:	58                   	pop    eax
c001481f:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014822:	68 1a 9d 02 c0       	push   0xc0029d1a
c0014827:	e8 fd e0 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001482c:	58                   	pop    eax
c001482d:	5a                   	pop    edx
c001482e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014831:	68 29 9d 02 c0       	push   0xc0029d29
c0014836:	e8 ee e0 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001483b:	59                   	pop    ecx
c001483c:	58                   	pop    eax
c001483d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014840:	68 34 9d 02 c0       	push   0xc0029d34
c0014845:	e8 df e0 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001484a:	58                   	pop    eax
c001484b:	5a                   	pop    edx
c001484c:	57                   	push   edi
c001484d:	68 3f 9d 02 c0       	push   0xc0029d3f
c0014852:	e8 d2 e0 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0014857:	59                   	pop    ecx
c0014858:	58                   	pop    eax
c0014859:	56                   	push   esi
c001485a:	68 4a 9d 02 c0       	push   0xc0029d4a
c001485f:	e8 c5 e0 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0014864:	58                   	pop    eax
c0014865:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c001486a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014870:	e8 76 c2 ff ff       	call   c0010aeb <setActiveTerminal(VgaText*)>
c0014875:	58                   	pop    eax
c0014876:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014879:	5a                   	pop    edx
c001487a:	c1 e0 05             	shl    eax,0x5
c001487d:	05 a0 c0 02 c0       	add    eax,0xc002c0a0
c0014882:	50                   	push   eax
c0014883:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014888:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001488e:	e8 77 c6 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0014893:	59                   	pop    ecx
c0014894:	58                   	pop    eax
c0014895:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c001489a:	68 55 9d 02 c0       	push   0xc0029d55
c001489f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a5:	e8 60 c6 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c00148aa:	58                   	pop    eax
c00148ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148b0:	5a                   	pop    edx
c00148b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00148b4:	83 c0 0c             	add    eax,0xc
c00148b7:	50                   	push   eax
c00148b8:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c00148bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c3:	e8 42 c6 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c00148c8:	59                   	pop    ecx
c00148c9:	58                   	pop    eax
c00148ca:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c00148cf:	68 5e 9d 02 c0       	push   0xc0029d5e
c00148d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148da:	e8 2b c6 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c00148df:	58                   	pop    eax
c00148e0:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c00148e5:	5a                   	pop    edx
c00148e6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00148e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ef:	e8 3c c6 ff ff       	call   c0010f30 <VgaText::putx(unsigned int)>
c00148f4:	59                   	pop    ecx
c00148f5:	58                   	pop    eax
c00148f6:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c00148fb:	68 66 9d 02 c0       	push   0xc0029d66
c0014900:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014906:	e8 ff c5 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c001490b:	58                   	pop    eax
c001490c:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014911:	5a                   	pop    edx
c0014912:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014915:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001491b:	e8 10 c6 ff ff       	call   c0010f30 <VgaText::putx(unsigned int)>
c0014920:	59                   	pop    ecx
c0014921:	58                   	pop    eax
c0014922:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014927:	68 6e 9d 02 c0       	push   0xc0029d6e
c001492c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014932:	e8 d3 c5 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0014937:	58                   	pop    eax
c0014938:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c001493d:	5a                   	pop    edx
c001493e:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014941:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014947:	e8 e4 c5 ff ff       	call   c0010f30 <VgaText::putx(unsigned int)>
c001494c:	59                   	pop    ecx
c001494d:	58                   	pop    eax
c001494e:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014953:	68 76 9d 02 c0       	push   0xc0029d76
c0014958:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001495e:	e8 a7 c5 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0014963:	58                   	pop    eax
c0014964:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014969:	5a                   	pop    edx
c001496a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001496d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014973:	e8 b8 c5 ff ff       	call   c0010f30 <VgaText::putx(unsigned int)>
c0014978:	59                   	pop    ecx
c0014979:	58                   	pop    eax
c001497a:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c001497f:	68 7e 9d 02 c0       	push   0xc0029d7e
c0014984:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001498a:	e8 7b c5 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c001498f:	58                   	pop    eax
c0014990:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014995:	5a                   	pop    edx
c0014996:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014999:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001499f:	e8 8c c5 ff ff       	call   c0010f30 <VgaText::putx(unsigned int)>
c00149a4:	59                   	pop    ecx
c00149a5:	58                   	pop    eax
c00149a6:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c00149ab:	68 86 9d 02 c0       	push   0xc0029d86
c00149b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149b6:	e8 4f c5 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c00149bb:	58                   	pop    eax
c00149bc:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c00149c1:	5a                   	pop    edx
c00149c2:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00149c5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149cb:	e8 60 c5 ff ff       	call   c0010f30 <VgaText::putx(unsigned int)>
c00149d0:	59                   	pop    ecx
c00149d1:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c00149d6:	5b                   	pop    ebx
c00149d7:	68 8e 9d 02 c0       	push   0xc0029d8e
c00149dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149e2:	e8 23 c5 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c00149e7:	58                   	pop    eax
c00149e8:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c00149ed:	5a                   	pop    edx
c00149ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00149f2:	52                   	push   edx
c00149f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149f9:	e8 32 c5 ff ff       	call   c0010f30 <VgaText::putx(unsigned int)>
c00149fe:	59                   	pop    ecx
c00149ff:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014a04:	5b                   	pop    ebx
c0014a05:	68 97 9d 02 c0       	push   0xc0029d97
c0014a0a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a10:	e8 f5 c4 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0014a15:	58                   	pop    eax
c0014a16:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014a1b:	5a                   	pop    edx
c0014a1c:	57                   	push   edi
c0014a1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a23:	e8 08 c5 ff ff       	call   c0010f30 <VgaText::putx(unsigned int)>
c0014a28:	59                   	pop    ecx
c0014a29:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014a2e:	5b                   	pop    ebx
c0014a2f:	68 9f 9d 02 c0       	push   0xc0029d9f
c0014a34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a3a:	e8 cb c4 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0014a3f:	5f                   	pop    edi
c0014a40:	58                   	pop    eax
c0014a41:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014a46:	56                   	push   esi
c0014a47:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a4d:	e8 de c4 ff ff       	call   c0010f30 <VgaText::putx(unsigned int)>
c0014a52:	58                   	pop    eax
c0014a53:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014a58:	5a                   	pop    edx
c0014a59:	68 a7 9d 02 c0       	push   0xc0029da7
c0014a5e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a64:	e8 a1 c4 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0014a69:	59                   	pop    ecx
c0014a6a:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014a6f:	5b                   	pop    ebx
c0014a70:	55                   	push   ebp
c0014a71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a77:	e8 b4 c4 ff ff       	call   c0010f30 <VgaText::putx(unsigned int)>
c0014a7c:	5e                   	pop    esi
c0014a7d:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014a82:	5f                   	pop    edi
c0014a83:	68 af 9d 02 c0       	push   0xc0029daf
c0014a88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a8e:	e8 77 c4 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0014a93:	0f 21 c0             	mov    eax,db0
c0014a96:	5d                   	pop    ebp
c0014a97:	5a                   	pop    edx
c0014a98:	50                   	push   eax
c0014a99:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014a9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aa4:	e8 87 c4 ff ff       	call   c0010f30 <VgaText::putx(unsigned int)>
c0014aa9:	59                   	pop    ecx
c0014aaa:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014aaf:	5b                   	pop    ebx
c0014ab0:	68 b8 9d 02 c0       	push   0xc0029db8
c0014ab5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014abb:	e8 4a c4 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0014ac0:	0f 21 c8             	mov    eax,db1
c0014ac3:	5e                   	pop    esi
c0014ac4:	5f                   	pop    edi
c0014ac5:	50                   	push   eax
c0014ac6:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014acb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad1:	e8 5a c4 ff ff       	call   c0010f30 <VgaText::putx(unsigned int)>
c0014ad6:	5d                   	pop    ebp
c0014ad7:	58                   	pop    eax
c0014ad8:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014add:	68 c0 9d 02 c0       	push   0xc0029dc0
c0014ae2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ae8:	e8 1d c4 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0014aed:	0f 21 d0             	mov    eax,db2
c0014af0:	5a                   	pop    edx
c0014af1:	59                   	pop    ecx
c0014af2:	50                   	push   eax
c0014af3:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014af8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014afe:	e8 2d c4 ff ff       	call   c0010f30 <VgaText::putx(unsigned int)>
c0014b03:	5b                   	pop    ebx
c0014b04:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014b09:	5e                   	pop    esi
c0014b0a:	68 c8 9d 02 c0       	push   0xc0029dc8
c0014b0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b15:	e8 f0 c3 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0014b1a:	0f 21 d8             	mov    eax,db3
c0014b1d:	5f                   	pop    edi
c0014b1e:	5d                   	pop    ebp
c0014b1f:	50                   	push   eax
c0014b20:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014b25:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b2b:	e8 00 c4 ff ff       	call   c0010f30 <VgaText::putx(unsigned int)>
c0014b30:	58                   	pop    eax
c0014b31:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014b36:	5a                   	pop    edx
c0014b37:	68 d0 9d 02 c0       	push   0xc0029dd0
c0014b3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b42:	e8 c3 c3 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0014b47:	0f 21 f0             	mov    eax,db6
c0014b4a:	59                   	pop    ecx
c0014b4b:	5b                   	pop    ebx
c0014b4c:	50                   	push   eax
c0014b4d:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014b52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b58:	e8 d3 c3 ff ff       	call   c0010f30 <VgaText::putx(unsigned int)>
c0014b5d:	5e                   	pop    esi
c0014b5e:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014b63:	5f                   	pop    edi
c0014b64:	68 d8 9d 02 c0       	push   0xc0029dd8
c0014b69:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b6f:	e8 96 c3 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0014b74:	0f 21 f8             	mov    eax,db7
c0014b77:	5d                   	pop    ebp
c0014b78:	5a                   	pop    edx
c0014b79:	50                   	push   eax
c0014b7a:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0014b7f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b85:	e8 a6 c3 ff ff       	call   c0010f30 <VgaText::putx(unsigned int)>
c0014b8a:	fa                   	cli    
c0014b8b:	f4                   	hlt    
c0014b8c:	83 c4 10             	add    esp,0x10
c0014b8f:	eb fe                	jmp    c0014b8f <displayDebugInfo(regs*)+0x403>

c0014b91 <x87EmulHandler(regs*, void*)>:
c0014b91:	53                   	push   ebx
c0014b92:	83 ec 14             	sub    esp,0x14
c0014b95:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014b99:	53                   	push   ebx
c0014b9a:	e8 23 a3 00 00       	call   c001eec2 <Vm::x87Handler(regs*)>
c0014b9f:	83 c4 10             	add    esp,0x10
c0014ba2:	84 c0                	test   al,al
c0014ba4:	74 05                	je     c0014bab <x87EmulHandler(regs*, void*)+0x1a>
c0014ba6:	83 c4 08             	add    esp,0x8
c0014ba9:	5b                   	pop    ebx
c0014baa:	c3                   	ret    
c0014bab:	83 ec 0c             	sub    esp,0xc
c0014bae:	68 e0 9d 02 c0       	push   0xc0029de0
c0014bb3:	e8 71 dd ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0014bb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bbb:	e8 cc fb ff ff       	call   c001478c <displayDebugInfo(regs*)>

c0014bc0 <gpFault(regs*, void*)>:
c0014bc0:	53                   	push   ebx
c0014bc1:	83 ec 14             	sub    esp,0x14
c0014bc4:	c7 05 90 d2 02 c0 3f e2 01 c0 	mov    DWORD PTR ds:0xc002d290,0xc001e23f
c0014bce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014bd2:	53                   	push   ebx
c0014bd3:	e8 67 96 00 00       	call   c001e23f <Vm::faultHandler(regs*)>
c0014bd8:	83 c4 10             	add    esp,0x10
c0014bdb:	84 c0                	test   al,al
c0014bdd:	74 05                	je     c0014be4 <gpFault(regs*, void*)+0x24>
c0014bdf:	83 c4 08             	add    esp,0x8
c0014be2:	5b                   	pop    ebx
c0014be3:	c3                   	ret    
c0014be4:	83 ec 0c             	sub    esp,0xc
c0014be7:	68 f6 9d 02 c0       	push   0xc0029df6
c0014bec:	e8 38 dd ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0014bf1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bf4:	e8 93 fb ff ff       	call   c001478c <displayDebugInfo(regs*)>

c0014bf9 <pgFault(regs*, void*)>:
c0014bf9:	83 ec 18             	sub    esp,0x18
c0014bfc:	68 11 9e 02 c0       	push   0xc0029e11
c0014c01:	e8 23 dd ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0014c06:	58                   	pop    eax
c0014c07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c0b:	e8 7c fb ff ff       	call   c001478c <displayDebugInfo(regs*)>

c0014c10 <otherISRHandler(regs*, void*)>:
c0014c10:	53                   	push   ebx
c0014c11:	83 ec 0c             	sub    esp,0xc
c0014c14:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014c18:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014c1b:	50                   	push   eax
c0014c1c:	50                   	push   eax
c0014c1d:	68 1e 9e 02 c0       	push   0xc0029e1e
c0014c22:	e8 02 dd ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0014c27:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c2a:	e8 5d fb ff ff       	call   c001478c <displayDebugInfo(regs*)>

c0014c2f <opcodeFault(regs*, void*)>:
c0014c2f:	55                   	push   ebp
c0014c30:	89 e5                	mov    ebp,esp
c0014c32:	56                   	push   esi
c0014c33:	53                   	push   ebx
c0014c34:	83 ec 40             	sub    esp,0x40
c0014c37:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c0014c3c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c42:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014c48:	84 c0                	test   al,al
c0014c4a:	74 24                	je     c0014c70 <opcodeFault(regs*, void*)+0x41>
c0014c4c:	83 ec 0c             	sub    esp,0xc
c0014c4f:	68 3c 9e 02 c0       	push   0xc0029e3c
c0014c54:	e8 d0 dc ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0014c59:	83 c4 10             	add    esp,0x10
c0014c5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c5f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c62:	8d 50 19             	lea    edx,[eax+0x19]
c0014c65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c68:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c6b:	e9 77 05 00 00       	jmp    c00151e7 <opcodeFault(regs*, void*)+0x5b8>
c0014c70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c73:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c76:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014c79:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014c7d:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014c81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c84:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c87:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014c8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c8d:	8a 00                	mov    al,BYTE PTR [eax]
c0014c8f:	3c f0                	cmp    al,0xf0
c0014c91:	75 17                	jne    c0014caa <opcodeFault(regs*, void*)+0x7b>
c0014c93:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c99:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c9c:	8d 50 01             	lea    edx,[eax+0x1]
c0014c9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ca5:	e9 da 00 00 00       	jmp    c0014d84 <opcodeFault(regs*, void*)+0x155>
c0014caa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cad:	8a 00                	mov    al,BYTE PTR [eax]
c0014caf:	3c f2                	cmp    al,0xf2
c0014cb1:	74 09                	je     c0014cbc <opcodeFault(regs*, void*)+0x8d>
c0014cb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cb6:	8a 00                	mov    al,BYTE PTR [eax]
c0014cb8:	3c f3                	cmp    al,0xf3
c0014cba:	75 1b                	jne    c0014cd7 <opcodeFault(regs*, void*)+0xa8>
c0014cbc:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014cc0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cc9:	8d 50 01             	lea    edx,[eax+0x1]
c0014ccc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ccf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cd2:	e9 ad 00 00 00       	jmp    c0014d84 <opcodeFault(regs*, void*)+0x155>
c0014cd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cda:	8a 00                	mov    al,BYTE PTR [eax]
c0014cdc:	3c 66                	cmp    al,0x66
c0014cde:	75 1f                	jne    c0014cff <opcodeFault(regs*, void*)+0xd0>
c0014ce0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ce4:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014ce8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ceb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cf1:	8d 50 01             	lea    edx,[eax+0x1]
c0014cf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cfa:	e9 85 00 00 00       	jmp    c0014d84 <opcodeFault(regs*, void*)+0x155>
c0014cff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d02:	8a 00                	mov    al,BYTE PTR [eax]
c0014d04:	3c 67                	cmp    al,0x67
c0014d06:	75 18                	jne    c0014d20 <opcodeFault(regs*, void*)+0xf1>
c0014d08:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d0c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d12:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d15:	8d 50 01             	lea    edx,[eax+0x1]
c0014d18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d1b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d1e:	eb 64                	jmp    c0014d84 <opcodeFault(regs*, void*)+0x155>
c0014d20:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d23:	8a 00                	mov    al,BYTE PTR [eax]
c0014d25:	3c 2e                	cmp    al,0x2e
c0014d27:	74 09                	je     c0014d32 <opcodeFault(regs*, void*)+0x103>
c0014d29:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d2c:	8a 00                	mov    al,BYTE PTR [eax]
c0014d2e:	3c 3e                	cmp    al,0x3e
c0014d30:	75 18                	jne    c0014d4a <opcodeFault(regs*, void*)+0x11b>
c0014d32:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d36:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d3c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d3f:	8d 50 01             	lea    edx,[eax+0x1]
c0014d42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d45:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d48:	eb 3a                	jmp    c0014d84 <opcodeFault(regs*, void*)+0x155>
c0014d4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d4d:	8a 00                	mov    al,BYTE PTR [eax]
c0014d4f:	3c 36                	cmp    al,0x36
c0014d51:	74 1b                	je     c0014d6e <opcodeFault(regs*, void*)+0x13f>
c0014d53:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d56:	8a 00                	mov    al,BYTE PTR [eax]
c0014d58:	3c 26                	cmp    al,0x26
c0014d5a:	74 12                	je     c0014d6e <opcodeFault(regs*, void*)+0x13f>
c0014d5c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d5f:	8a 00                	mov    al,BYTE PTR [eax]
c0014d61:	3c 64                	cmp    al,0x64
c0014d63:	74 09                	je     c0014d6e <opcodeFault(regs*, void*)+0x13f>
c0014d65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d68:	8a 00                	mov    al,BYTE PTR [eax]
c0014d6a:	3c 65                	cmp    al,0x65
c0014d6c:	75 16                	jne    c0014d84 <opcodeFault(regs*, void*)+0x155>
c0014d6e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d72:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d78:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d7b:	8d 50 01             	lea    edx,[eax+0x1]
c0014d7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d81:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d87:	8a 00                	mov    al,BYTE PTR [eax]
c0014d89:	3c 0f                	cmp    al,0xf
c0014d8b:	0f 85 ad 00 00 00    	jne    c0014e3e <opcodeFault(regs*, void*)+0x20f>
c0014d91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d94:	40                   	inc    eax
c0014d95:	8a 00                	mov    al,BYTE PTR [eax]
c0014d97:	3c c2                	cmp    al,0xc2
c0014d99:	74 0e                	je     c0014da9 <opcodeFault(regs*, void*)+0x17a>
c0014d9b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d9e:	40                   	inc    eax
c0014d9f:	8a 00                	mov    al,BYTE PTR [eax]
c0014da1:	3c c3                	cmp    al,0xc3
c0014da3:	0f 85 95 00 00 00    	jne    c0014e3e <opcodeFault(regs*, void*)+0x20f>
c0014da9:	83 ec 0c             	sub    esp,0xc
c0014dac:	68 5f 9e 02 c0       	push   0xc0029e5f
c0014db1:	e8 73 db ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0014db6:	83 c4 10             	add    esp,0x10
c0014db9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dbc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dbf:	8d 50 01             	lea    edx,[eax+0x1]
c0014dc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dc8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dcb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dce:	8a 00                	mov    al,BYTE PTR [eax]
c0014dd0:	8d 50 fe             	lea    edx,[eax-0x2]
c0014dd3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dd6:	88 10                	mov    BYTE PTR [eax],dl
c0014dd8:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014ddb:	50                   	push   eax
c0014ddc:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014ddf:	50                   	push   eax
c0014de0:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014de3:	50                   	push   eax
c0014de4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014de7:	e8 c4 46 00 00       	call   c00194b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014dec:	83 c4 10             	add    esp,0x10
c0014def:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014df5:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014df8:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014dfb:	01 d0                	add    eax,edx
c0014dfd:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014e00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e03:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e06:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e09:	48                   	dec    eax
c0014e0a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014e0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e10:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014e13:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e19:	83 ec 04             	sub    esp,0x4
c0014e1c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014e1f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014e22:	50                   	push   eax
c0014e23:	e8 8c b3 fe ff       	call   c00001b4 <voodooXADD>
c0014e28:	83 c4 10             	add    esp,0x10
c0014e2b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014e2e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014e31:	01 c2                	add    edx,eax
c0014e33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e36:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e39:	e9 a9 03 00 00       	jmp    c00151e7 <opcodeFault(regs*, void*)+0x5b8>
c0014e3e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e41:	8a 00                	mov    al,BYTE PTR [eax]
c0014e43:	3c 0f                	cmp    al,0xf
c0014e45:	0f 85 8b 01 00 00    	jne    c0014fd6 <opcodeFault(regs*, void*)+0x3a7>
c0014e4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e4e:	40                   	inc    eax
c0014e4f:	8a 00                	mov    al,BYTE PTR [eax]
c0014e51:	3c c7                	cmp    al,0xc7
c0014e53:	0f 86 7d 01 00 00    	jbe    c0014fd6 <opcodeFault(regs*, void*)+0x3a7>
c0014e59:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e5c:	40                   	inc    eax
c0014e5d:	8a 00                	mov    al,BYTE PTR [eax]
c0014e5f:	3c cf                	cmp    al,0xcf
c0014e61:	0f 87 6f 01 00 00    	ja     c0014fd6 <opcodeFault(regs*, void*)+0x3a7>
c0014e67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e6a:	40                   	inc    eax
c0014e6b:	8a 00                	mov    al,BYTE PTR [eax]
c0014e6d:	83 c0 38             	add    eax,0x38
c0014e70:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014e73:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014e77:	75 0b                	jne    c0014e84 <opcodeFault(regs*, void*)+0x255>
c0014e79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e7c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014e7f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e82:	eb 75                	jmp    c0014ef9 <opcodeFault(regs*, void*)+0x2ca>
c0014e84:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014e88:	75 0b                	jne    c0014e95 <opcodeFault(regs*, void*)+0x266>
c0014e8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e8d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014e90:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e93:	eb 64                	jmp    c0014ef9 <opcodeFault(regs*, void*)+0x2ca>
c0014e95:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014e99:	75 0b                	jne    c0014ea6 <opcodeFault(regs*, void*)+0x277>
c0014e9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014ea1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ea4:	eb 53                	jmp    c0014ef9 <opcodeFault(regs*, void*)+0x2ca>
c0014ea6:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014eaa:	75 0b                	jne    c0014eb7 <opcodeFault(regs*, void*)+0x288>
c0014eac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eaf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014eb2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014eb5:	eb 42                	jmp    c0014ef9 <opcodeFault(regs*, void*)+0x2ca>
c0014eb7:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014ebb:	75 0b                	jne    c0014ec8 <opcodeFault(regs*, void*)+0x299>
c0014ebd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec0:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014ec3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ec6:	eb 31                	jmp    c0014ef9 <opcodeFault(regs*, void*)+0x2ca>
c0014ec8:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014ecc:	75 0b                	jne    c0014ed9 <opcodeFault(regs*, void*)+0x2aa>
c0014ece:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014ed4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ed7:	eb 20                	jmp    c0014ef9 <opcodeFault(regs*, void*)+0x2ca>
c0014ed9:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014edd:	75 0b                	jne    c0014eea <opcodeFault(regs*, void*)+0x2bb>
c0014edf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014ee5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ee8:	eb 0f                	jmp    c0014ef9 <opcodeFault(regs*, void*)+0x2ca>
c0014eea:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014eee:	75 09                	jne    c0014ef9 <opcodeFault(regs*, void*)+0x2ca>
c0014ef0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014ef6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ef9:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014efd:	74 10                	je     c0014f0f <opcodeFault(regs*, void*)+0x2e0>
c0014eff:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014f06:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014f0d:	eb 2d                	jmp    c0014f3c <opcodeFault(regs*, void*)+0x30d>
c0014f0f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f12:	c1 e0 18             	shl    eax,0x18
c0014f15:	89 c2                	mov    edx,eax
c0014f17:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f1a:	c1 e0 08             	shl    eax,0x8
c0014f1d:	25 00 00 ff 00       	and    eax,0xff0000
c0014f22:	09 c2                	or     edx,eax
c0014f24:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f27:	c1 e8 08             	shr    eax,0x8
c0014f2a:	25 00 ff 00 00       	and    eax,0xff00
c0014f2f:	09 c2                	or     edx,eax
c0014f31:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f34:	c1 e8 18             	shr    eax,0x18
c0014f37:	09 d0                	or     eax,edx
c0014f39:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f3c:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014f40:	75 0b                	jne    c0014f4d <opcodeFault(regs*, void*)+0x31e>
c0014f42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f45:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f48:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014f4b:	eb 75                	jmp    c0014fc2 <opcodeFault(regs*, void*)+0x393>
c0014f4d:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014f51:	75 0b                	jne    c0014f5e <opcodeFault(regs*, void*)+0x32f>
c0014f53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f56:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f59:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014f5c:	eb 64                	jmp    c0014fc2 <opcodeFault(regs*, void*)+0x393>
c0014f5e:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014f62:	75 0b                	jne    c0014f6f <opcodeFault(regs*, void*)+0x340>
c0014f64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f67:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f6a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014f6d:	eb 53                	jmp    c0014fc2 <opcodeFault(regs*, void*)+0x393>
c0014f6f:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f73:	75 0b                	jne    c0014f80 <opcodeFault(regs*, void*)+0x351>
c0014f75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f78:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f7b:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014f7e:	eb 42                	jmp    c0014fc2 <opcodeFault(regs*, void*)+0x393>
c0014f80:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f84:	75 0b                	jne    c0014f91 <opcodeFault(regs*, void*)+0x362>
c0014f86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f89:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f8c:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014f8f:	eb 31                	jmp    c0014fc2 <opcodeFault(regs*, void*)+0x393>
c0014f91:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014f95:	75 0b                	jne    c0014fa2 <opcodeFault(regs*, void*)+0x373>
c0014f97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f9a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f9d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014fa0:	eb 20                	jmp    c0014fc2 <opcodeFault(regs*, void*)+0x393>
c0014fa2:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014fa6:	75 0b                	jne    c0014fb3 <opcodeFault(regs*, void*)+0x384>
c0014fa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fab:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fae:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014fb1:	eb 0f                	jmp    c0014fc2 <opcodeFault(regs*, void*)+0x393>
c0014fb3:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014fb7:	75 09                	jne    c0014fc2 <opcodeFault(regs*, void*)+0x393>
c0014fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fbc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fbf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014fc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fc8:	8d 50 02             	lea    edx,[eax+0x2]
c0014fcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fd1:	e9 11 02 00 00       	jmp    c00151e7 <opcodeFault(regs*, void*)+0x5b8>
c0014fd6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fd9:	8a 00                	mov    al,BYTE PTR [eax]
c0014fdb:	3c 0f                	cmp    al,0xf
c0014fdd:	0f 85 76 01 00 00    	jne    c0015159 <opcodeFault(regs*, void*)+0x52a>
c0014fe3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fe6:	40                   	inc    eax
c0014fe7:	8a 00                	mov    al,BYTE PTR [eax]
c0014fe9:	3c c7                	cmp    al,0xc7
c0014feb:	0f 85 68 01 00 00    	jne    c0015159 <opcodeFault(regs*, void*)+0x52a>
c0014ff1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ff4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ffa:	8d 50 01             	lea    edx,[eax+0x1]
c0014ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015000:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015003:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015006:	50                   	push   eax
c0015007:	8d 45 bb             	lea    eax,[ebp-0x45]
c001500a:	50                   	push   eax
c001500b:	8d 45 bc             	lea    eax,[ebp-0x44]
c001500e:	50                   	push   eax
c001500f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015012:	e8 99 44 00 00       	call   c00194b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015017:	83 c4 10             	add    esp,0x10
c001501a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001501d:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015020:	83 f0 01             	xor    eax,0x1
c0015023:	84 c0                	test   al,al
c0015025:	0f 84 2e 01 00 00    	je     c0015159 <opcodeFault(regs*, void*)+0x52a>
c001502b:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001502e:	3c 01                	cmp    al,0x1
c0015030:	0f 85 23 01 00 00    	jne    c0015159 <opcodeFault(regs*, void*)+0x52a>
c0015036:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015039:	83 f0 01             	xor    eax,0x1
c001503c:	84 c0                	test   al,al
c001503e:	0f 84 15 01 00 00    	je     c0015159 <opcodeFault(regs*, void*)+0x52a>
c0015044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015047:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001504a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001504d:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015054:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015057:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001505a:	89 c2                	mov    edx,eax
c001505c:	b8 00 00 00 00       	mov    eax,0x0
c0015061:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015064:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015067:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001506a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001506d:	ba 00 00 00 00       	mov    edx,0x0
c0015072:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015075:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015078:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001507b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001507e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015081:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015088:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001508b:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001508e:	89 c2                	mov    edx,eax
c0015090:	b8 00 00 00 00       	mov    eax,0x0
c0015095:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015098:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001509b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00150a1:	ba 00 00 00 00       	mov    edx,0x0
c00150a6:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00150a9:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00150ac:	e8 7d 81 00 00       	call   c001d22e <lockScheduler()>
c00150b1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00150b4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00150b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00150b9:	89 c1                	mov    ecx,eax
c00150bb:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00150be:	89 cb                	mov    ebx,ecx
c00150c0:	89 d0                	mov    eax,edx
c00150c2:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00150c5:	89 c6                	mov    esi,eax
c00150c7:	89 f0                	mov    eax,esi
c00150c9:	09 d8                	or     eax,ebx
c00150cb:	85 c0                	test   eax,eax
c00150cd:	75 21                	jne    c00150f0 <opcodeFault(regs*, void*)+0x4c1>
c00150cf:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00150d2:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00150d5:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00150d8:	89 01                	mov    DWORD PTR [ecx],eax
c00150da:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00150dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00150e3:	83 c8 40             	or     eax,0x40
c00150e6:	89 c2                	mov    edx,eax
c00150e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150eb:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00150ee:	eb 3e                	jmp    c001512e <opcodeFault(regs*, void*)+0x4ff>
c00150f0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00150f3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00150f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00150f8:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150fb:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00150fe:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015101:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015104:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015107:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001510a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001510d:	89 d0                	mov    eax,edx
c001510f:	31 d2                	xor    edx,edx
c0015111:	89 c3                	mov    ebx,eax
c0015113:	89 d6                	mov    esi,edx
c0015115:	89 da                	mov    edx,ebx
c0015117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001511a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001511d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015120:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015123:	83 e0 bf             	and    eax,0xffffffbf
c0015126:	89 c2                	mov    edx,eax
c0015128:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001512b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001512e:	e8 fd 80 00 00       	call   c001d230 <unlockScheduler()>
c0015133:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015136:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015139:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001513c:	01 c2                	add    edx,eax
c001513e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015141:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015144:	83 ec 0c             	sub    esp,0xc
c0015147:	68 6e 9e 02 c0       	push   0xc0029e6e
c001514c:	e8 d8 d7 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0015151:	83 c4 10             	add    esp,0x10
c0015154:	e9 8e 00 00 00       	jmp    c00151e7 <opcodeFault(regs*, void*)+0x5b8>
c0015159:	83 ec 0c             	sub    esp,0xc
c001515c:	68 81 9e 02 c0       	push   0xc0029e81
c0015161:	e8 c3 d7 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0015166:	83 c4 10             	add    esp,0x10
c0015169:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001516c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001516f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015172:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015175:	c1 e0 04             	shl    eax,0x4
c0015178:	01 d0                	add    eax,edx
c001517a:	83 c0 03             	add    eax,0x3
c001517d:	8a 00                	mov    al,BYTE PTR [eax]
c001517f:	0f b6 d8             	movzx  ebx,al
c0015182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015185:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015188:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001518b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001518e:	c1 e0 04             	shl    eax,0x4
c0015191:	01 d0                	add    eax,edx
c0015193:	83 c0 02             	add    eax,0x2
c0015196:	8a 00                	mov    al,BYTE PTR [eax]
c0015198:	0f b6 c8             	movzx  ecx,al
c001519b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001519e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00151a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151a7:	c1 e0 04             	shl    eax,0x4
c00151aa:	01 d0                	add    eax,edx
c00151ac:	40                   	inc    eax
c00151ad:	8a 00                	mov    al,BYTE PTR [eax]
c00151af:	0f b6 d0             	movzx  edx,al
c00151b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b5:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00151b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151bb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151be:	c1 e0 04             	shl    eax,0x4
c00151c1:	01 f0                	add    eax,esi
c00151c3:	8a 00                	mov    al,BYTE PTR [eax]
c00151c5:	0f b6 c0             	movzx  eax,al
c00151c8:	83 ec 0c             	sub    esp,0xc
c00151cb:	53                   	push   ebx
c00151cc:	51                   	push   ecx
c00151cd:	52                   	push   edx
c00151ce:	50                   	push   eax
c00151cf:	68 94 9e 02 c0       	push   0xc0029e94
c00151d4:	e8 50 d7 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00151d9:	83 c4 20             	add    esp,0x20
c00151dc:	83 ec 0c             	sub    esp,0xc
c00151df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00151e2:	e8 a5 f5 ff ff       	call   c001478c <displayDebugInfo(regs*)>
c00151e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00151ea:	5b                   	pop    ebx
c00151eb:	5e                   	pop    esi
c00151ec:	5d                   	pop    ebp
c00151ed:	c3                   	ret    

c00151ee <displayProgramFault(char const*)>:
c00151ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151f6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00151fc:	85 c0                	test   eax,eax
c00151fe:	74 15                	je     c0015215 <displayProgramFault(char const*)+0x27>
c0015200:	83 ec 0c             	sub    esp,0xc
c0015203:	6a 04                	push   0x4
c0015205:	6a 0f                	push   0xf
c0015207:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001520b:	50                   	push   eax
c001520c:	e8 bb b9 ff ff       	call   c0010bcc <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015211:	83 c4 1c             	add    esp,0x1c
c0015214:	c3                   	ret    
c0015215:	c3                   	ret    

c0015216 <setupInterruptController()>:
c0015216:	55                   	push   ebp
c0015217:	89 e5                	mov    ebp,esp
c0015219:	53                   	push   ebx
c001521a:	83 ec 24             	sub    esp,0x24
c001521d:	b8 00 00 00 00       	mov    eax,0x0
c0015222:	85 c0                	test   eax,eax
c0015224:	0f 95 c0             	setne  al
c0015227:	84 c0                	test   al,al
c0015229:	74 5b                	je     c0015286 <setupInterruptController()+0x70>
c001522b:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015232:	83 ec 0c             	sub    esp,0xc
c0015235:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015238:	e8 1d a4 ff ff       	call   c000f65a <malloc>
c001523d:	83 c4 10             	add    esp,0x10
c0015240:	89 c3                	mov    ebx,eax
c0015242:	83 ec 0c             	sub    esp,0xc
c0015245:	53                   	push   ebx
c0015246:	e8 c9 f5 00 00       	call   c0024814 <APIC::APIC()>
c001524b:	83 c4 10             	add    esp,0x10
c001524e:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015251:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015254:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015257:	8b 00                	mov    eax,DWORD PTR [eax]
c0015259:	83 c0 08             	add    eax,0x8
c001525c:	8b 00                	mov    eax,DWORD PTR [eax]
c001525e:	6a 00                	push   0x0
c0015260:	6a 00                	push   0x0
c0015262:	6a 00                	push   0x0
c0015264:	52                   	push   edx
c0015265:	ff d0                	call   eax
c0015267:	83 c4 10             	add    esp,0x10
c001526a:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c001526f:	83 ec 08             	sub    esp,0x8
c0015272:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015275:	50                   	push   eax
c0015276:	e8 d5 ea ff ff       	call   c0013d50 <Device::addChild(Device*)>
c001527b:	83 c4 10             	add    esp,0x10
c001527e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015281:	e9 52 03 00 00       	jmp    c00155d8 <setupInterruptController()+0x3c2>
c0015286:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c001528b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015291:	83 e0 01             	and    eax,0x1
c0015294:	84 c0                	test   al,al
c0015296:	0f 95 c0             	setne  al
c0015299:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001529c:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00152a3:	83 ec 0c             	sub    esp,0xc
c00152a6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00152a9:	e8 ac a3 ff ff       	call   c000f65a <malloc>
c00152ae:	83 c4 10             	add    esp,0x10
c00152b1:	89 c3                	mov    ebx,eax
c00152b3:	83 ec 0c             	sub    esp,0xc
c00152b6:	53                   	push   ebx
c00152b7:	e8 b0 fa 00 00       	call   c0024d6c <PIC::PIC()>
c00152bc:	83 c4 10             	add    esp,0x10
c00152bf:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00152c2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00152c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ca:	83 c0 08             	add    eax,0x8
c00152cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00152cf:	6a 00                	push   0x0
c00152d1:	6a 00                	push   0x0
c00152d3:	6a 00                	push   0x0
c00152d5:	52                   	push   edx
c00152d6:	ff d0                	call   eax
c00152d8:	83 c4 10             	add    esp,0x10
c00152db:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00152df:	74 73                	je     c0015354 <setupInterruptController()+0x13e>
c00152e1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00152e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e9:	83 c0 0c             	add    eax,0xc
c00152ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ee:	6a 00                	push   0x0
c00152f0:	6a 00                	push   0x0
c00152f2:	6a 00                	push   0x0
c00152f4:	52                   	push   edx
c00152f5:	ff d0                	call   eax
c00152f7:	83 c4 10             	add    esp,0x10
c00152fa:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00152fe:	74 15                	je     c0015315 <setupInterruptController()+0xff>
c0015300:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015303:	8b 00                	mov    eax,DWORD PTR [eax]
c0015305:	83 c0 04             	add    eax,0x4
c0015308:	8b 00                	mov    eax,DWORD PTR [eax]
c001530a:	83 ec 0c             	sub    esp,0xc
c001530d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015310:	ff d0                	call   eax
c0015312:	83 c4 10             	add    esp,0x10
c0015315:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001531c:	83 ec 0c             	sub    esp,0xc
c001531f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015322:	e8 33 a3 ff ff       	call   c000f65a <malloc>
c0015327:	83 c4 10             	add    esp,0x10
c001532a:	89 c3                	mov    ebx,eax
c001532c:	83 ec 0c             	sub    esp,0xc
c001532f:	53                   	push   ebx
c0015330:	e8 df f4 00 00       	call   c0024814 <APIC::APIC()>
c0015335:	83 c4 10             	add    esp,0x10
c0015338:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001533b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001533e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015341:	8b 00                	mov    eax,DWORD PTR [eax]
c0015343:	83 c0 08             	add    eax,0x8
c0015346:	8b 00                	mov    eax,DWORD PTR [eax]
c0015348:	6a 00                	push   0x0
c001534a:	6a 00                	push   0x0
c001534c:	6a 00                	push   0x0
c001534e:	52                   	push   edx
c001534f:	ff d0                	call   eax
c0015351:	83 c4 10             	add    esp,0x10
c0015354:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c0015359:	83 ec 08             	sub    esp,0x8
c001535c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001535f:	50                   	push   eax
c0015360:	e8 eb e9 ff ff       	call   c0013d50 <Device::addChild(Device*)>
c0015365:	83 c4 10             	add    esp,0x10
c0015368:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536b:	8b 00                	mov    eax,DWORD PTR [eax]
c001536d:	83 c0 24             	add    eax,0x24
c0015370:	8b 00                	mov    eax,DWORD PTR [eax]
c0015372:	6a 00                	push   0x0
c0015374:	68 10 4c 01 c0       	push   0xc0014c10
c0015379:	6a 00                	push   0x0
c001537b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001537e:	ff d0                	call   eax
c0015380:	83 c4 10             	add    esp,0x10
c0015383:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015386:	8b 00                	mov    eax,DWORD PTR [eax]
c0015388:	83 c0 24             	add    eax,0x24
c001538b:	8b 00                	mov    eax,DWORD PTR [eax]
c001538d:	6a 00                	push   0x0
c001538f:	68 10 4c 01 c0       	push   0xc0014c10
c0015394:	6a 01                	push   0x1
c0015396:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015399:	ff d0                	call   eax
c001539b:	83 c4 10             	add    esp,0x10
c001539e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a3:	83 c0 24             	add    eax,0x24
c00153a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a8:	6a 00                	push   0x0
c00153aa:	68 e9 45 01 c0       	push   0xc00145e9
c00153af:	6a 02                	push   0x2
c00153b1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153b4:	ff d0                	call   eax
c00153b6:	83 c4 10             	add    esp,0x10
c00153b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00153be:	83 c0 24             	add    eax,0x24
c00153c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c3:	6a 00                	push   0x0
c00153c5:	68 10 4c 01 c0       	push   0xc0014c10
c00153ca:	6a 03                	push   0x3
c00153cc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153cf:	ff d0                	call   eax
c00153d1:	83 c4 10             	add    esp,0x10
c00153d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00153d9:	83 c0 24             	add    eax,0x24
c00153dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00153de:	6a 00                	push   0x0
c00153e0:	68 10 4c 01 c0       	push   0xc0014c10
c00153e5:	6a 04                	push   0x4
c00153e7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153ea:	ff d0                	call   eax
c00153ec:	83 c4 10             	add    esp,0x10
c00153ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f4:	83 c0 24             	add    eax,0x24
c00153f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f9:	6a 00                	push   0x0
c00153fb:	68 10 4c 01 c0       	push   0xc0014c10
c0015400:	6a 05                	push   0x5
c0015402:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015405:	ff d0                	call   eax
c0015407:	83 c4 10             	add    esp,0x10
c001540a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540d:	8b 00                	mov    eax,DWORD PTR [eax]
c001540f:	83 c0 24             	add    eax,0x24
c0015412:	8b 00                	mov    eax,DWORD PTR [eax]
c0015414:	6a 00                	push   0x0
c0015416:	68 2f 4c 01 c0       	push   0xc0014c2f
c001541b:	6a 06                	push   0x6
c001541d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015420:	ff d0                	call   eax
c0015422:	83 c4 10             	add    esp,0x10
c0015425:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015428:	8b 00                	mov    eax,DWORD PTR [eax]
c001542a:	83 c0 24             	add    eax,0x24
c001542d:	8b 00                	mov    eax,DWORD PTR [eax]
c001542f:	6a 00                	push   0x0
c0015431:	68 91 4b 01 c0       	push   0xc0014b91
c0015436:	6a 07                	push   0x7
c0015438:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001543b:	ff d0                	call   eax
c001543d:	83 c4 10             	add    esp,0x10
c0015440:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015443:	8b 00                	mov    eax,DWORD PTR [eax]
c0015445:	83 c0 24             	add    eax,0x24
c0015448:	8b 00                	mov    eax,DWORD PTR [eax]
c001544a:	6a 00                	push   0x0
c001544c:	68 04 44 01 c0       	push   0xc0014404
c0015451:	6a 08                	push   0x8
c0015453:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015456:	ff d0                	call   eax
c0015458:	83 c4 10             	add    esp,0x10
c001545b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001545e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015460:	83 c0 24             	add    eax,0x24
c0015463:	8b 00                	mov    eax,DWORD PTR [eax]
c0015465:	6a 00                	push   0x0
c0015467:	68 10 4c 01 c0       	push   0xc0014c10
c001546c:	6a 09                	push   0x9
c001546e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015471:	ff d0                	call   eax
c0015473:	83 c4 10             	add    esp,0x10
c0015476:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015479:	8b 00                	mov    eax,DWORD PTR [eax]
c001547b:	83 c0 24             	add    eax,0x24
c001547e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015480:	6a 00                	push   0x0
c0015482:	68 10 4c 01 c0       	push   0xc0014c10
c0015487:	6a 0a                	push   0xa
c0015489:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001548c:	ff d0                	call   eax
c001548e:	83 c4 10             	add    esp,0x10
c0015491:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015494:	8b 00                	mov    eax,DWORD PTR [eax]
c0015496:	83 c0 24             	add    eax,0x24
c0015499:	8b 00                	mov    eax,DWORD PTR [eax]
c001549b:	6a 00                	push   0x0
c001549d:	68 10 4c 01 c0       	push   0xc0014c10
c00154a2:	6a 0b                	push   0xb
c00154a4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154a7:	ff d0                	call   eax
c00154a9:	83 c4 10             	add    esp,0x10
c00154ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154af:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b1:	83 c0 24             	add    eax,0x24
c00154b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b6:	6a 00                	push   0x0
c00154b8:	68 10 4c 01 c0       	push   0xc0014c10
c00154bd:	6a 0c                	push   0xc
c00154bf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154c2:	ff d0                	call   eax
c00154c4:	83 c4 10             	add    esp,0x10
c00154c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00154cc:	83 c0 24             	add    eax,0x24
c00154cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d1:	6a 00                	push   0x0
c00154d3:	68 c0 4b 01 c0       	push   0xc0014bc0
c00154d8:	6a 0d                	push   0xd
c00154da:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154dd:	ff d0                	call   eax
c00154df:	83 c4 10             	add    esp,0x10
c00154e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e7:	83 c0 24             	add    eax,0x24
c00154ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ec:	6a 00                	push   0x0
c00154ee:	68 f9 4b 01 c0       	push   0xc0014bf9
c00154f3:	6a 0e                	push   0xe
c00154f5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154f8:	ff d0                	call   eax
c00154fa:	83 c4 10             	add    esp,0x10
c00154fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015500:	8b 00                	mov    eax,DWORD PTR [eax]
c0015502:	83 c0 24             	add    eax,0x24
c0015505:	8b 00                	mov    eax,DWORD PTR [eax]
c0015507:	6a 00                	push   0x0
c0015509:	68 10 4c 01 c0       	push   0xc0014c10
c001550e:	6a 0f                	push   0xf
c0015510:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015513:	ff d0                	call   eax
c0015515:	83 c4 10             	add    esp,0x10
c0015518:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551b:	8b 00                	mov    eax,DWORD PTR [eax]
c001551d:	83 c0 24             	add    eax,0x24
c0015520:	8b 00                	mov    eax,DWORD PTR [eax]
c0015522:	6a 00                	push   0x0
c0015524:	68 10 4c 01 c0       	push   0xc0014c10
c0015529:	6a 10                	push   0x10
c001552b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001552e:	ff d0                	call   eax
c0015530:	83 c4 10             	add    esp,0x10
c0015533:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015536:	8b 00                	mov    eax,DWORD PTR [eax]
c0015538:	83 c0 24             	add    eax,0x24
c001553b:	8b 00                	mov    eax,DWORD PTR [eax]
c001553d:	6a 00                	push   0x0
c001553f:	68 10 4c 01 c0       	push   0xc0014c10
c0015544:	6a 11                	push   0x11
c0015546:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015549:	ff d0                	call   eax
c001554b:	83 c4 10             	add    esp,0x10
c001554e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015551:	8b 00                	mov    eax,DWORD PTR [eax]
c0015553:	83 c0 24             	add    eax,0x24
c0015556:	8b 00                	mov    eax,DWORD PTR [eax]
c0015558:	6a 00                	push   0x0
c001555a:	68 10 4c 01 c0       	push   0xc0014c10
c001555f:	6a 12                	push   0x12
c0015561:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015564:	ff d0                	call   eax
c0015566:	83 c4 10             	add    esp,0x10
c0015569:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001556c:	8b 00                	mov    eax,DWORD PTR [eax]
c001556e:	83 c0 24             	add    eax,0x24
c0015571:	8b 00                	mov    eax,DWORD PTR [eax]
c0015573:	6a 00                	push   0x0
c0015575:	68 10 4c 01 c0       	push   0xc0014c10
c001557a:	6a 13                	push   0x13
c001557c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001557f:	ff d0                	call   eax
c0015581:	83 c4 10             	add    esp,0x10
c0015584:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015587:	8b 00                	mov    eax,DWORD PTR [eax]
c0015589:	83 c0 24             	add    eax,0x24
c001558c:	8b 00                	mov    eax,DWORD PTR [eax]
c001558e:	6a 00                	push   0x0
c0015590:	68 10 4c 01 c0       	push   0xc0014c10
c0015595:	6a 14                	push   0x14
c0015597:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001559a:	ff d0                	call   eax
c001559c:	83 c4 10             	add    esp,0x10
c001559f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00155a4:	83 c0 24             	add    eax,0x24
c00155a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00155a9:	6a 00                	push   0x0
c00155ab:	68 10 4c 01 c0       	push   0xc0014c10
c00155b0:	6a 1e                	push   0x1e
c00155b2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155b5:	ff d0                	call   eax
c00155b7:	83 c4 10             	add    esp,0x10
c00155ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00155bf:	83 c0 24             	add    eax,0x24
c00155c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c4:	6a 00                	push   0x0
c00155c6:	68 29 bc 01 c0       	push   0xc001bc29
c00155cb:	6a 60                	push   0x60
c00155cd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155d0:	ff d0                	call   eax
c00155d2:	83 c4 10             	add    esp,0x10
c00155d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155d8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00155db:	c9                   	leave  
c00155dc:	c3                   	ret    
c00155dd:	90                   	nop

c00155de <InterruptController::convertLegacyIRQNumber(int)>:
c00155de:	55                   	push   ebp
c00155df:	89 e5                	mov    ebp,esp
c00155e1:	83 ec 08             	sub    esp,0x8
c00155e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e7:	83 ec 0c             	sub    esp,0xc
c00155ea:	50                   	push   eax
c00155eb:	e8 4c ea ff ff       	call   c001403c <Device::getName()>
c00155f0:	83 c4 10             	add    esp,0x10
c00155f3:	8a 00                	mov    al,BYTE PTR [eax]
c00155f5:	3c 41                	cmp    al,0x41
c00155f7:	0f 94 c0             	sete   al
c00155fa:	84 c0                	test   al,al
c00155fc:	74 28                	je     c0015626 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00155fe:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015602:	7f 12                	jg     c0015616 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015604:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015607:	05 40 c3 02 c0       	add    eax,0xc002c340
c001560c:	8a 00                	mov    al,BYTE PTR [eax]
c001560e:	0f b6 c0             	movzx  eax,al
c0015611:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015614:	eb 10                	jmp    c0015626 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015616:	83 ec 0c             	sub    esp,0xc
c0015619:	68 14 9c 02 c0       	push   0xc0029c14
c001561e:	e8 5c 46 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c0015623:	83 c4 10             	add    esp,0x10
c0015626:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015629:	c9                   	leave  
c001562a:	c3                   	ret    
c001562b:	90                   	nop

c001562c <startGUI(void*)>:
c001562c:	55                   	push   ebp
c001562d:	89 e5                	mov    ebp,esp
c001562f:	53                   	push   ebx
c0015630:	83 ec 04             	sub    esp,0x4
c0015633:	e8 f8 7b 00 00       	call   c001d230 <unlockScheduler()>
c0015638:	8b 1d e8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0e8
c001563e:	83 ec 08             	sub    esp,0x8
c0015641:	6a 01                	push   0x1
c0015643:	68 fc 9e 02 c0       	push   0xc0029efc
c0015648:	e8 6e 75 00 00       	call   c001cbbb <Thr::loadDLL(char const*, bool)>
c001564d:	83 c4 10             	add    esp,0x10
c0015650:	83 ec 08             	sub    esp,0x8
c0015653:	53                   	push   ebx
c0015654:	50                   	push   eax
c0015655:	e8 70 77 00 00       	call   c001cdca <Thr::executeDLL(unsigned long, void*)>
c001565a:	83 c4 10             	add    esp,0x10
c001565d:	8b 1d e8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0e8
c0015663:	83 ec 08             	sub    esp,0x8
c0015666:	6a 01                	push   0x1
c0015668:	68 16 9f 02 c0       	push   0xc0029f16
c001566d:	e8 49 75 00 00       	call   c001cbbb <Thr::loadDLL(char const*, bool)>
c0015672:	83 c4 10             	add    esp,0x10
c0015675:	83 ec 08             	sub    esp,0x8
c0015678:	53                   	push   ebx
c0015679:	50                   	push   eax
c001567a:	e8 4b 77 00 00       	call   c001cdca <Thr::executeDLL(unsigned long, void*)>
c001567f:	83 c4 10             	add    esp,0x10
c0015682:	90                   	nop
c0015683:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015686:	c9                   	leave  
c0015687:	c3                   	ret    

c0015688 <startGUIVESA(void*)>:
c0015688:	55                   	push   ebp
c0015689:	89 e5                	mov    ebp,esp
c001568b:	53                   	push   ebx
c001568c:	83 ec 04             	sub    esp,0x4
c001568f:	e8 9c 7b 00 00       	call   c001d230 <unlockScheduler()>
c0015694:	8b 1d e8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0e8
c001569a:	83 ec 08             	sub    esp,0x8
c001569d:	6a 01                	push   0x1
c001569f:	68 30 9f 02 c0       	push   0xc0029f30
c00156a4:	e8 12 75 00 00       	call   c001cbbb <Thr::loadDLL(char const*, bool)>
c00156a9:	83 c4 10             	add    esp,0x10
c00156ac:	83 ec 08             	sub    esp,0x8
c00156af:	53                   	push   ebx
c00156b0:	50                   	push   eax
c00156b1:	e8 14 77 00 00       	call   c001cdca <Thr::executeDLL(unsigned long, void*)>
c00156b6:	83 c4 10             	add    esp,0x10
c00156b9:	8b 1d e8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0e8
c00156bf:	83 ec 08             	sub    esp,0x8
c00156c2:	6a 01                	push   0x1
c00156c4:	68 16 9f 02 c0       	push   0xc0029f16
c00156c9:	e8 ed 74 00 00       	call   c001cbbb <Thr::loadDLL(char const*, bool)>
c00156ce:	83 c4 10             	add    esp,0x10
c00156d1:	83 ec 08             	sub    esp,0x8
c00156d4:	53                   	push   ebx
c00156d5:	50                   	push   eax
c00156d6:	e8 ef 76 00 00       	call   c001cdca <Thr::executeDLL(unsigned long, void*)>
c00156db:	83 c4 10             	add    esp,0x10
c00156de:	90                   	nop
c00156df:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00156e2:	c9                   	leave  
c00156e3:	c3                   	ret    

c00156e4 <sendKeyToTerminal(unsigned char)>:
c00156e4:	55                   	push   ebp
c00156e5:	89 e5                	mov    ebp,esp
c00156e7:	83 ec 28             	sub    esp,0x28
c00156ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ed:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00156f0:	a1 c4 d1 02 c0       	mov    eax,ds:0xc002d1c4
c00156f5:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00156f9:	83 ec 08             	sub    esp,0x8
c00156fc:	52                   	push   edx
c00156fd:	50                   	push   eax
c00156fe:	e8 05 ba ff ff       	call   c0011108 <VgaText::receiveKey(unsigned char)>
c0015703:	83 c4 10             	add    esp,0x10
c0015706:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c001570a:	75 41                	jne    c001574d <sendKeyToTerminal(unsigned char)+0x69>
c001570c:	e8 44 7b 00 00       	call   c001d255 <lockStuff()>
c0015711:	a1 a0 d2 02 c0       	mov    eax,ds:0xc002d2a0
c0015716:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015719:	c7 05 a0 d2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d2a0,0x0
c0015723:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015727:	74 1f                	je     c0015748 <sendKeyToTerminal(unsigned char)+0x64>
c0015729:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001572c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001572f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015732:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015735:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015738:	83 ec 0c             	sub    esp,0xc
c001573b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001573e:	e8 03 81 00 00       	call   c001d846 <unblockTask(ThreadControlBlock*)>
c0015743:	83 c4 10             	add    esp,0x10
c0015746:	eb db                	jmp    c0015723 <sendKeyToTerminal(unsigned char)+0x3f>
c0015748:	e8 a2 7e 00 00       	call   c001d5ef <unlockStuff()>
c001574d:	90                   	nop
c001574e:	c9                   	leave  
c001574f:	c3                   	ret    

c0015750 <sendKeyboardToken(KeyboardToken)>:
c0015750:	55                   	push   ebp
c0015751:	89 e5                	mov    ebp,esp
c0015753:	83 ec 18             	sub    esp,0x18
c0015756:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575c:	0f b7 c0             	movzx  eax,ax
c001575f:	83 f2 01             	xor    edx,0x1
c0015762:	88 90 c0 d2 02 c0    	mov    BYTE PTR [eax-0x3ffd2d40],dl
c0015768:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576b:	66 3d 03 02          	cmp    ax,0x203
c001576f:	75 07                	jne    c0015778 <sendKeyboardToken(KeyboardToken)+0x28>
c0015771:	a0 c0 d3 02 c0       	mov    al,ds:0xc002d3c0
c0015776:	84 c0                	test   al,al
c0015778:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001577c:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001577f:	a0 c8 d6 02 c0       	mov    al,ds:0xc002d6c8
c0015784:	38 c2                	cmp    dl,al
c0015786:	74 1c                	je     c00157a4 <sendKeyboardToken(KeyboardToken)+0x54>
c0015788:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001578b:	a2 c8 d6 02 c0       	mov    ds:0xc002d6c8,al
c0015790:	a0 c8 d6 02 c0       	mov    al,ds:0xc002d6c8
c0015795:	0f b6 c0             	movzx  eax,al
c0015798:	83 ec 0c             	sub    esp,0xc
c001579b:	50                   	push   eax
c001579c:	e8 c7 ab ff ff       	call   c0010368 <setTerminalScrollLock(bool)>
c00157a1:	83 c4 10             	add    esp,0x10
c00157a4:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00157a7:	84 c0                	test   al,al
c00157a9:	0f 84 ae 00 00 00    	je     c001585d <sendKeyboardToken(KeyboardToken)+0x10d>
c00157af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b2:	66 3d 10 03          	cmp    ax,0x310
c00157b6:	75 06                	jne    c00157be <sendKeyboardToken(KeyboardToken)+0x6e>
c00157b8:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00157be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c1:	66 3d 11 03          	cmp    ax,0x311
c00157c5:	75 06                	jne    c00157cd <sendKeyboardToken(KeyboardToken)+0x7d>
c00157c7:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00157cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d0:	66 3d 12 03          	cmp    ax,0x312
c00157d4:	75 06                	jne    c00157dc <sendKeyboardToken(KeyboardToken)+0x8c>
c00157d6:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00157dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157df:	66 3d 13 03          	cmp    ax,0x313
c00157e3:	75 06                	jne    c00157eb <sendKeyboardToken(KeyboardToken)+0x9b>
c00157e5:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00157eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ee:	66 3d 14 03          	cmp    ax,0x314
c00157f2:	75 06                	jne    c00157fa <sendKeyboardToken(KeyboardToken)+0xaa>
c00157f4:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00157fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fd:	66 3d 15 03          	cmp    ax,0x315
c0015801:	75 06                	jne    c0015809 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015803:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580c:	66 3d 16 03          	cmp    ax,0x316
c0015810:	75 06                	jne    c0015818 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015812:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015818:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581b:	66 3d 17 03          	cmp    ax,0x317
c001581f:	75 06                	jne    c0015827 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015821:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582a:	66 3d 18 03          	cmp    ax,0x318
c001582e:	75 06                	jne    c0015836 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015830:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015836:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015839:	66 3d 19 03          	cmp    ax,0x319
c001583d:	75 06                	jne    c0015845 <sendKeyboardToken(KeyboardToken)+0xf5>
c001583f:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015848:	66 3d 1a 03          	cmp    ax,0x31a
c001584c:	0f 85 c9 00 00 00    	jne    c001591b <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015852:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015858:	e9 be 00 00 00       	jmp    c001591b <sendKeyboardToken(KeyboardToken)+0x1cb>
c001585d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015860:	66 3d 10 03          	cmp    ax,0x310
c0015864:	75 0a                	jne    c0015870 <sendKeyboardToken(KeyboardToken)+0x120>
c0015866:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001586c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015870:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015873:	66 3d 11 03          	cmp    ax,0x311
c0015877:	75 0a                	jne    c0015883 <sendKeyboardToken(KeyboardToken)+0x133>
c0015879:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001587f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015883:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015886:	66 3d 12 03          	cmp    ax,0x312
c001588a:	75 0a                	jne    c0015896 <sendKeyboardToken(KeyboardToken)+0x146>
c001588c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015892:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015899:	66 3d 13 03          	cmp    ax,0x313
c001589d:	75 0a                	jne    c00158a9 <sendKeyboardToken(KeyboardToken)+0x159>
c001589f:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00158a5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ac:	66 3d 14 03          	cmp    ax,0x314
c00158b0:	75 0a                	jne    c00158bc <sendKeyboardToken(KeyboardToken)+0x16c>
c00158b2:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00158b8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158bf:	66 3d 15 03          	cmp    ax,0x315
c00158c3:	75 0a                	jne    c00158cf <sendKeyboardToken(KeyboardToken)+0x17f>
c00158c5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00158cb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d2:	66 3d 16 03          	cmp    ax,0x316
c00158d6:	75 0a                	jne    c00158e2 <sendKeyboardToken(KeyboardToken)+0x192>
c00158d8:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00158de:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e5:	66 3d 17 03          	cmp    ax,0x317
c00158e9:	75 0a                	jne    c00158f5 <sendKeyboardToken(KeyboardToken)+0x1a5>
c00158eb:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00158f1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f8:	66 3d 18 03          	cmp    ax,0x318
c00158fc:	75 0a                	jne    c0015908 <sendKeyboardToken(KeyboardToken)+0x1b8>
c00158fe:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015904:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015908:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001590b:	66 3d 19 03          	cmp    ax,0x319
c001590f:	75 0a                	jne    c001591b <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015911:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015917:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001591b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001591e:	66 3d 00 02          	cmp    ax,0x200
c0015922:	75 2c                	jne    c0015950 <sendKeyboardToken(KeyboardToken)+0x200>
c0015924:	a0 c0 d6 02 c0       	mov    al,ds:0xc002d6c0
c0015929:	83 f0 01             	xor    eax,0x1
c001592c:	84 c0                	test   al,al
c001592e:	74 20                	je     c0015950 <sendKeyboardToken(KeyboardToken)+0x200>
c0015930:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0015935:	6a 01                	push   0x1
c0015937:	6a 00                	push   0x0
c0015939:	68 2c 56 01 c0       	push   0xc001562c
c001593e:	50                   	push   eax
c001593f:	e8 1c 7a 00 00       	call   c001d360 <Process::createThread(void (*)(void*), void*, int)>
c0015944:	83 c4 10             	add    esp,0x10
c0015947:	c6 05 c0 d6 02 c0 01 	mov    BYTE PTR ds:0xc002d6c0,0x1
c001594e:	eb 33                	jmp    c0015983 <sendKeyboardToken(KeyboardToken)+0x233>
c0015950:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015953:	66 3d 01 02          	cmp    ax,0x201
c0015957:	75 2a                	jne    c0015983 <sendKeyboardToken(KeyboardToken)+0x233>
c0015959:	a0 c0 d6 02 c0       	mov    al,ds:0xc002d6c0
c001595e:	83 f0 01             	xor    eax,0x1
c0015961:	84 c0                	test   al,al
c0015963:	74 1e                	je     c0015983 <sendKeyboardToken(KeyboardToken)+0x233>
c0015965:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c001596a:	6a 01                	push   0x1
c001596c:	6a 00                	push   0x0
c001596e:	68 88 56 01 c0       	push   0xc0015688
c0015973:	50                   	push   eax
c0015974:	e8 e7 79 00 00       	call   c001d360 <Process::createThread(void (*)(void*), void*, int)>
c0015979:	83 c4 10             	add    esp,0x10
c001597c:	c6 05 c0 d6 02 c0 01 	mov    BYTE PTR ds:0xc002d6c0,0x1
c0015983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015986:	66 3d 1d 03          	cmp    ax,0x31d
c001598a:	75 06                	jne    c0015992 <sendKeyboardToken(KeyboardToken)+0x242>
c001598c:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015992:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015995:	66 3d 1c 03          	cmp    ax,0x31c
c0015999:	75 06                	jne    c00159a1 <sendKeyboardToken(KeyboardToken)+0x251>
c001599b:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00159a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a4:	66 3d 1b 03          	cmp    ax,0x31b
c00159a8:	75 06                	jne    c00159b0 <sendKeyboardToken(KeyboardToken)+0x260>
c00159aa:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00159b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b3:	66 3d 1e 03          	cmp    ax,0x31e
c00159b7:	75 06                	jne    c00159bf <sendKeyboardToken(KeyboardToken)+0x26f>
c00159b9:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00159bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c2:	66 3d 1f 03          	cmp    ax,0x31f
c00159c6:	75 06                	jne    c00159ce <sendKeyboardToken(KeyboardToken)+0x27e>
c00159c8:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00159ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159d1:	66 3d 1a 03          	cmp    ax,0x31a
c00159d5:	75 06                	jne    c00159dd <sendKeyboardToken(KeyboardToken)+0x28d>
c00159d7:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00159dd:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00159e1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00159e4:	83 f0 01             	xor    eax,0x1
c00159e7:	84 c0                	test   al,al
c00159e9:	74 77                	je     c0015a62 <sendKeyboardToken(KeyboardToken)+0x312>
c00159eb:	a0 c1 d3 02 c0       	mov    al,ds:0xc002d3c1
c00159f0:	84 c0                	test   al,al
c00159f2:	74 41                	je     c0015a35 <sendKeyboardToken(KeyboardToken)+0x2e5>
c00159f4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00159f8:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00159fc:	74 2b                	je     c0015a29 <sendKeyboardToken(KeyboardToken)+0x2d9>
c00159fe:	8b 15 c4 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6c4
c0015a04:	89 d0                	mov    eax,edx
c0015a06:	c1 e0 02             	shl    eax,0x2
c0015a09:	01 d0                	add    eax,edx
c0015a0b:	01 c0                	add    eax,eax
c0015a0d:	a3 c4 d6 02 c0       	mov    ds:0xc002d6c4,eax
c0015a12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a15:	0f b7 c0             	movzx  eax,ax
c0015a18:	8d 50 d0             	lea    edx,[eax-0x30]
c0015a1b:	a1 c4 d6 02 c0       	mov    eax,ds:0xc002d6c4
c0015a20:	01 d0                	add    eax,edx
c0015a22:	a3 c4 d6 02 c0       	mov    ds:0xc002d6c4,eax
c0015a27:	eb 6d                	jmp    c0015a96 <sendKeyboardToken(KeyboardToken)+0x346>
c0015a29:	c7 05 c4 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6c4,0x0
c0015a33:	eb 61                	jmp    c0015a96 <sendKeyboardToken(KeyboardToken)+0x346>
c0015a35:	a1 c4 d6 02 c0       	mov    eax,ds:0xc002d6c4
c0015a3a:	85 c0                	test   eax,eax
c0015a3c:	74 18                	je     c0015a56 <sendKeyboardToken(KeyboardToken)+0x306>
c0015a3e:	a1 c4 d6 02 c0       	mov    eax,ds:0xc002d6c4
c0015a43:	0f b6 c0             	movzx  eax,al
c0015a46:	83 ec 0c             	sub    esp,0xc
c0015a49:	50                   	push   eax
c0015a4a:	e8 95 fc ff ff       	call   c00156e4 <sendKeyToTerminal(unsigned char)>
c0015a4f:	83 c4 10             	add    esp,0x10
c0015a52:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a56:	c7 05 c4 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6c4,0x0
c0015a60:	eb 34                	jmp    c0015a96 <sendKeyboardToken(KeyboardToken)+0x346>
c0015a62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a65:	66 3d 01 01          	cmp    ax,0x101
c0015a69:	75 2b                	jne    c0015a96 <sendKeyboardToken(KeyboardToken)+0x346>
c0015a6b:	a1 c4 d6 02 c0       	mov    eax,ds:0xc002d6c4
c0015a70:	85 c0                	test   eax,eax
c0015a72:	74 18                	je     c0015a8c <sendKeyboardToken(KeyboardToken)+0x33c>
c0015a74:	a1 c4 d6 02 c0       	mov    eax,ds:0xc002d6c4
c0015a79:	0f b6 c0             	movzx  eax,al
c0015a7c:	83 ec 0c             	sub    esp,0xc
c0015a7f:	50                   	push   eax
c0015a80:	e8 5f fc ff ff       	call   c00156e4 <sendKeyToTerminal(unsigned char)>
c0015a85:	83 c4 10             	add    esp,0x10
c0015a88:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a8c:	c7 05 c4 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6c4,0x0
c0015a96:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015a99:	83 f0 01             	xor    eax,0x1
c0015a9c:	84 c0                	test   al,al
c0015a9e:	74 4c                	je     c0015aec <sendKeyboardToken(KeyboardToken)+0x39c>
c0015aa0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015aa3:	83 f0 01             	xor    eax,0x1
c0015aa6:	84 c0                	test   al,al
c0015aa8:	74 42                	je     c0015aec <sendKeyboardToken(KeyboardToken)+0x39c>
c0015aaa:	a0 c0 d3 02 c0       	mov    al,ds:0xc002d3c0
c0015aaf:	83 f0 01             	xor    eax,0x1
c0015ab2:	84 c0                	test   al,al
c0015ab4:	74 36                	je     c0015aec <sendKeyboardToken(KeyboardToken)+0x39c>
c0015ab6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab9:	66 83 f8 1f          	cmp    ax,0x1f
c0015abd:	76 09                	jbe    c0015ac8 <sendKeyboardToken(KeyboardToken)+0x378>
c0015abf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac2:	66 83 f8 7e          	cmp    ax,0x7e
c0015ac6:	76 12                	jbe    c0015ada <sendKeyboardToken(KeyboardToken)+0x38a>
c0015ac8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015acb:	66 83 f8 0a          	cmp    ax,0xa
c0015acf:	74 09                	je     c0015ada <sendKeyboardToken(KeyboardToken)+0x38a>
c0015ad1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ad4:	66 83 f8 08          	cmp    ax,0x8
c0015ad8:	75 12                	jne    c0015aec <sendKeyboardToken(KeyboardToken)+0x39c>
c0015ada:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015add:	0f b6 c0             	movzx  eax,al
c0015ae0:	83 ec 0c             	sub    esp,0xc
c0015ae3:	50                   	push   eax
c0015ae4:	e8 fb fb ff ff       	call   c00156e4 <sendKeyToTerminal(unsigned char)>
c0015ae9:	83 c4 10             	add    esp,0x10
c0015aec:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015aef:	83 f0 01             	xor    eax,0x1
c0015af2:	84 c0                	test   al,al
c0015af4:	74 4f                	je     c0015b45 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015af6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015af9:	83 f0 01             	xor    eax,0x1
c0015afc:	84 c0                	test   al,al
c0015afe:	74 45                	je     c0015b45 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015b00:	a0 c0 d3 02 c0       	mov    al,ds:0xc002d3c0
c0015b05:	84 c0                	test   al,al
c0015b07:	74 3c                	je     c0015b45 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015b09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b0c:	66 83 f8 3f          	cmp    ax,0x3f
c0015b10:	76 33                	jbe    c0015b45 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015b12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b15:	66 83 f8 7f          	cmp    ax,0x7f
c0015b19:	77 2a                	ja     c0015b45 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015b1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b1e:	88 c2                	mov    dl,al
c0015b20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b23:	66 83 f8 5f          	cmp    ax,0x5f
c0015b27:	76 04                	jbe    c0015b2d <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015b29:	b0 20                	mov    al,0x20
c0015b2b:	eb 02                	jmp    c0015b2f <sendKeyboardToken(KeyboardToken)+0x3df>
c0015b2d:	b0 00                	mov    al,0x0
c0015b2f:	29 c2                	sub    edx,eax
c0015b31:	88 d0                	mov    al,dl
c0015b33:	83 e8 40             	sub    eax,0x40
c0015b36:	0f b6 c0             	movzx  eax,al
c0015b39:	83 ec 0c             	sub    esp,0xc
c0015b3c:	50                   	push   eax
c0015b3d:	e8 a2 fb ff ff       	call   c00156e4 <sendKeyToTerminal(unsigned char)>
c0015b42:	83 c4 10             	add    esp,0x10
c0015b45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b48:	66 3d 00 03          	cmp    ax,0x300
c0015b4c:	75 0f                	jne    c0015b5d <sendKeyboardToken(KeyboardToken)+0x40d>
c0015b4e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b51:	83 f0 01             	xor    eax,0x1
c0015b54:	84 c0                	test   al,al
c0015b56:	74 05                	je     c0015b5d <sendKeyboardToken(KeyboardToken)+0x40d>
c0015b58:	e8 40 b0 ff ff       	call   c0010b9d <doTerminalCycle()>
c0015b5d:	90                   	nop
c0015b5e:	c9                   	leave  
c0015b5f:	c3                   	ret    

c0015b60 <clearInternalKeybuffer(VgaText*)>:
c0015b60:	55                   	push   ebp
c0015b61:	89 e5                	mov    ebp,esp
c0015b63:	83 ec 08             	sub    esp,0x8
c0015b66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b69:	05 34 11 00 00       	add    eax,0x1134
c0015b6e:	83 ec 0c             	sub    esp,0xc
c0015b71:	50                   	push   eax
c0015b72:	e8 6a ab fe ff       	call   c00006e1 <strlen>
c0015b77:	83 c4 10             	add    esp,0x10
c0015b7a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b7d:	81 c2 34 11 00 00    	add    edx,0x1134
c0015b83:	83 ec 04             	sub    esp,0x4
c0015b86:	50                   	push   eax
c0015b87:	6a 00                	push   0x0
c0015b89:	52                   	push   edx
c0015b8a:	e8 35 ab fe ff       	call   c00006c4 <memset>
c0015b8f:	83 c4 10             	add    esp,0x10
c0015b92:	90                   	nop
c0015b93:	c9                   	leave  
c0015b94:	c3                   	ret    

c0015b95 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015b95:	55                   	push   ebp
c0015b96:	89 e5                	mov    ebp,esp
c0015b98:	83 ec 18             	sub    esp,0x18
c0015b9b:	fb                   	sti    
c0015b9c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015ba3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015ba7:	0f 84 8a 00 00 00    	je     c0015c37 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015bad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bb0:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015bb6:	84 c0                	test   al,al
c0015bb8:	75 11                	jne    c0015bcb <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015bba:	e8 6f 76 00 00       	call   c001d22e <lockScheduler()>
c0015bbf:	e8 a6 79 00 00       	call   c001d56a <schedule()>
c0015bc4:	e8 67 76 00 00       	call   c001d230 <unlockScheduler()>
c0015bc9:	eb e2                	jmp    c0015bad <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015bcb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015bce:	8d 50 01             	lea    edx,[eax+0x1]
c0015bd1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015bd4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015bd7:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015bdd:	88 10                	mov    BYTE PTR [eax],dl
c0015bdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015be2:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015be8:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015beb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bee:	05 34 11 00 00       	add    eax,0x1134
c0015bf3:	83 ec 0c             	sub    esp,0xc
c0015bf6:	50                   	push   eax
c0015bf7:	e8 e5 aa fe ff       	call   c00006e1 <strlen>
c0015bfc:	83 c4 10             	add    esp,0x10
c0015bff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c02:	81 c2 34 11 00 00    	add    edx,0x1134
c0015c08:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015c0b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c0e:	81 c2 34 11 00 00    	add    edx,0x1134
c0015c14:	83 ec 04             	sub    esp,0x4
c0015c17:	50                   	push   eax
c0015c18:	51                   	push   ecx
c0015c19:	52                   	push   edx
c0015c1a:	e8 49 aa fe ff       	call   c0000668 <memmove>
c0015c1f:	83 c4 10             	add    esp,0x10
c0015c22:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015c25:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015c28:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015c2c:	0f 85 71 ff ff ff    	jne    c0015ba3 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015c32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c35:	eb 03                	jmp    c0015c3a <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015c37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c3a:	c9                   	leave  
c0015c3b:	c3                   	ret    

c0015c3c <Keyboard::Keyboard(char const*)>:
c0015c3c:	83 ec 0c             	sub    esp,0xc
c0015c3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c43:	83 ec 08             	sub    esp,0x8
c0015c46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c4a:	50                   	push   eax
c0015c4b:	e8 f0 e2 ff ff       	call   c0013f40 <Device::Device(char const*)>
c0015c50:	83 c4 10             	add    esp,0x10
c0015c53:	ba 54 9f 02 c0       	mov    edx,0xc0029f54
c0015c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c5c:	89 10                	mov    DWORD PTR [eax],edx
c0015c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c62:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015c6c:	c6 05 a4 d2 02 c0 01 	mov    BYTE PTR ds:0xc002d2a4,0x1
c0015c73:	90                   	nop
c0015c74:	83 c4 0c             	add    esp,0xc
c0015c77:	c3                   	ret    

c0015c78 <Keyboard::~Keyboard()>:
c0015c78:	83 ec 0c             	sub    esp,0xc
c0015c7b:	ba 54 9f 02 c0       	mov    edx,0xc0029f54
c0015c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c84:	89 10                	mov    DWORD PTR [eax],edx
c0015c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c8a:	83 ec 0c             	sub    esp,0xc
c0015c8d:	50                   	push   eax
c0015c8e:	e8 8f df ff ff       	call   c0013c22 <Device::~Device()>
c0015c93:	83 c4 10             	add    esp,0x10
c0015c96:	90                   	nop
c0015c97:	83 c4 0c             	add    esp,0xc
c0015c9a:	c3                   	ret    
c0015c9b:	90                   	nop

c0015c9c <Keyboard::~Keyboard()>:
c0015c9c:	83 ec 0c             	sub    esp,0xc
c0015c9f:	83 ec 0c             	sub    esp,0xc
c0015ca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ca6:	e8 cd ff ff ff       	call   c0015c78 <Keyboard::~Keyboard()>
c0015cab:	83 c4 10             	add    esp,0x10
c0015cae:	83 ec 08             	sub    esp,0x8
c0015cb1:	68 5c 01 00 00       	push   0x15c
c0015cb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cba:	e8 8a cb ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0015cbf:	83 c4 10             	add    esp,0x10
c0015cc2:	83 c4 0c             	add    esp,0xc
c0015cc5:	c3                   	ret    

c0015cc6 <LogicalDisk::close(int, int, void*)>:
c0015cc6:	83 c8 ff             	or     eax,0xffffffff
c0015cc9:	c3                   	ret    

c0015cca <LogicalDisk::~LogicalDisk()>:
c0015cca:	83 ec 0c             	sub    esp,0xc
c0015ccd:	ba 04 a0 02 c0       	mov    edx,0xc002a004
c0015cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cd6:	89 10                	mov    DWORD PTR [eax],edx
c0015cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cdc:	83 ec 0c             	sub    esp,0xc
c0015cdf:	50                   	push   eax
c0015ce0:	e8 3d df ff ff       	call   c0013c22 <Device::~Device()>
c0015ce5:	83 c4 10             	add    esp,0x10
c0015ce8:	90                   	nop
c0015ce9:	83 c4 0c             	add    esp,0xc
c0015cec:	c3                   	ret    
c0015ced:	90                   	nop

c0015cee <LogicalDisk::~LogicalDisk()>:
c0015cee:	83 ec 0c             	sub    esp,0xc
c0015cf1:	83 ec 0c             	sub    esp,0xc
c0015cf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cf8:	e8 cd ff ff ff       	call   c0015cca <LogicalDisk::~LogicalDisk()>
c0015cfd:	83 c4 10             	add    esp,0x10
c0015d00:	83 ec 08             	sub    esp,0x8
c0015d03:	68 74 01 00 00       	push   0x174
c0015d08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d0c:	e8 38 cb ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0015d11:	83 c4 10             	add    esp,0x10
c0015d14:	83 c4 0c             	add    esp,0xc
c0015d17:	c3                   	ret    

c0015d18 <LogicalDisk::open(int, int, void*)>:
c0015d18:	83 ec 18             	sub    esp,0x18
c0015d1b:	68 80 9f 02 c0       	push   0xc0029f80
c0015d20:	e8 5a 3f 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c0015d25:	83 c8 ff             	or     eax,0xffffffff
c0015d28:	83 c4 1c             	add    esp,0x1c
c0015d2b:	c3                   	ret    

c0015d2c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015d2c:	53                   	push   ebx
c0015d2d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015d31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d39:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015d3f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015d45:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015d4b:	77 10                	ja     c0015d5d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015d4d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015d53:	89 d3                	mov    ebx,edx
c0015d55:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015d5b:	72 05                	jb     c0015d62 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015d5d:	83 c8 ff             	or     eax,0xffffffff
c0015d60:	89 c2                	mov    edx,eax
c0015d62:	5b                   	pop    ebx
c0015d63:	c3                   	ret    

c0015d64 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015d64:	56                   	push   esi
c0015d65:	83 c8 ff             	or     eax,0xffffffff
c0015d68:	53                   	push   ebx
c0015d69:	89 c2                	mov    edx,eax
c0015d6b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015d6f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015d73:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015d77:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015d7d:	77 27                	ja     c0015da6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015d7f:	89 d8                	mov    eax,ebx
c0015d81:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015d87:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015d8d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d92:	89 c2                	mov    edx,eax
c0015d94:	73 10                	jae    c0015da6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015d96:	89 c8                	mov    eax,ecx
c0015d98:	89 da                	mov    edx,ebx
c0015d9a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015da0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015da6:	5b                   	pop    ebx
c0015da7:	5e                   	pop    esi
c0015da8:	c3                   	ret    
c0015da9:	90                   	nop

c0015daa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015daa:	83 ec 1c             	sub    esp,0x1c
c0015dad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015db1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015db5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015db9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015dbd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015dc1:	89 04 24             	mov    DWORD PTR [esp],eax
c0015dc4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015dc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015dcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015dd0:	83 ec 08             	sub    esp,0x8
c0015dd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015dd7:	50                   	push   eax
c0015dd8:	e8 63 e1 ff ff       	call   c0013f40 <Device::Device(char const*)>
c0015ddd:	83 c4 10             	add    esp,0x10
c0015de0:	ba 04 a0 02 c0       	mov    edx,0xc002a004
c0015de5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015de9:	89 10                	mov    DWORD PTR [eax],edx
c0015deb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015def:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015df6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015dfa:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e05:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015e0f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e1b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015e21:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015e27:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e2b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015e2e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e32:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015e38:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015e3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e42:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015e46:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015e4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e50:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015e5a:	90                   	nop
c0015e5b:	83 c4 1c             	add    esp,0x1c
c0015e5e:	c3                   	ret    
c0015e5f:	90                   	nop

c0015e60 <LogicalDisk::assignDriveLetter()>:
c0015e60:	55                   	push   ebp
c0015e61:	57                   	push   edi
c0015e62:	56                   	push   esi
c0015e63:	53                   	push   ebx
c0015e64:	83 ec 14             	sub    esp,0x14
c0015e67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015e6b:	8b 3d e0 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6e0
c0015e71:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015e77:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015e7b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015e81:	8b 3d e4 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6e4
c0015e87:	3c 01                	cmp    al,0x1
c0015e89:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015e8d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015e91:	19 c0                	sbb    eax,eax
c0015e93:	83 e0 02             	and    eax,0x2
c0015e96:	83 c0 41             	add    eax,0x41
c0015e99:	0f be e8             	movsx  ebp,al
c0015e9c:	3c 43                	cmp    al,0x43
c0015e9e:	75 10                	jne    c0015eb0 <LogicalDisk::assignDriveLetter()+0x50>
c0015ea0:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015ea7:	75 5d                	jne    c0015f06 <LogicalDisk::assignDriveLetter()+0xa6>
c0015ea9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015eae:	75 56                	jne    c0015f06 <LogicalDisk::assignDriveLetter()+0xa6>
c0015eb0:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015eb3:	ba 01 00 00 00       	mov    edx,0x1
c0015eb8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015ebc:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015ec0:	d3 e2                	shl    edx,cl
c0015ec2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015ec6:	89 d7                	mov    edi,edx
c0015ec8:	89 d6                	mov    esi,edx
c0015eca:	c1 ff 1f             	sar    edi,0x1f
c0015ecd:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015ed1:	21 f9                	and    ecx,edi
c0015ed3:	09 d1                	or     ecx,edx
c0015ed5:	75 2f                	jne    c0015f06 <LogicalDisk::assignDriveLetter()+0xa6>
c0015ed7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015edb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015edf:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015ee5:	09 f2                	or     edx,esi
c0015ee7:	89 15 e0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e0,edx
c0015eed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ef1:	09 fa                	or     edx,edi
c0015ef3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015ef7:	89 15 e4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e4,edx
c0015efd:	89 1c bd 00 d7 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2900],ebx
c0015f04:	eb 08                	jmp    c0015f0e <LogicalDisk::assignDriveLetter()+0xae>
c0015f06:	45                   	inc    ebp
c0015f07:	40                   	inc    eax
c0015f08:	3c 5b                	cmp    al,0x5b
c0015f0a:	75 90                	jne    c0015e9c <LogicalDisk::assignDriveLetter()+0x3c>
c0015f0c:	31 c0                	xor    eax,eax
c0015f0e:	83 c4 14             	add    esp,0x14
c0015f11:	5b                   	pop    ebx
c0015f12:	5e                   	pop    esi
c0015f13:	5f                   	pop    edi
c0015f14:	5d                   	pop    ebp
c0015f15:	c3                   	ret    

c0015f16 <LogicalDisk::mount()>:
c0015f16:	56                   	push   esi
c0015f17:	53                   	push   ebx
c0015f18:	51                   	push   ecx
c0015f19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f1d:	8b 1d 68 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d268
c0015f23:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015f2d:	85 db                	test   ebx,ebx
c0015f2f:	74 50                	je     c0015f81 <LogicalDisk::mount()+0x6b>
c0015f31:	e8 e3 72 00 00       	call   c001d219 <getIRQNestingLevel()>
c0015f36:	52                   	push   edx
c0015f37:	52                   	push   edx
c0015f38:	50                   	push   eax
c0015f39:	68 a4 9f 02 c0       	push   0xc0029fa4
c0015f3e:	e8 e6 c9 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0015f43:	83 c4 0c             	add    esp,0xc
c0015f46:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015f4d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015f4f:	83 e8 41             	sub    eax,0x41
c0015f52:	50                   	push   eax
c0015f53:	56                   	push   esi
c0015f54:	53                   	push   ebx
c0015f55:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015f58:	83 c4 10             	add    esp,0x10
c0015f5b:	84 c0                	test   al,al
c0015f5d:	74 08                	je     c0015f67 <LogicalDisk::mount()+0x51>
c0015f5f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015f65:	eb 1c                	jmp    c0015f83 <LogicalDisk::mount()+0x6d>
c0015f67:	e8 ad 72 00 00       	call   c001d219 <getIRQNestingLevel()>
c0015f6c:	51                   	push   ecx
c0015f6d:	51                   	push   ecx
c0015f6e:	50                   	push   eax
c0015f6f:	68 bf 9f 02 c0       	push   0xc0029fbf
c0015f74:	e8 b0 c9 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0015f79:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015f7c:	83 c4 10             	add    esp,0x10
c0015f7f:	eb ac                	jmp    c0015f2d <LogicalDisk::mount()+0x17>
c0015f81:	31 c0                	xor    eax,eax
c0015f83:	5a                   	pop    edx
c0015f84:	5b                   	pop    ebx
c0015f85:	5e                   	pop    esi
c0015f86:	c3                   	ret    
c0015f87:	90                   	nop

c0015f88 <LogicalDisk::unmount()>:
c0015f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f8c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015f96:	c3                   	ret    
c0015f97:	90                   	nop

c0015f98 <LogicalDisk::unassignDriveLetter()>:
c0015f98:	57                   	push   edi
c0015f99:	56                   	push   esi
c0015f9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f9e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015fa5:	84 c9                	test   cl,cl
c0015fa7:	75 0f                	jne    c0015fb8 <LogicalDisk::unassignDriveLetter()+0x20>
c0015fa9:	c7 44 24 0c da 9f 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029fda
c0015fb1:	5e                   	pop    esi
c0015fb2:	5f                   	pop    edi
c0015fb3:	e9 c7 3c 00 00       	jmp    c0019c7f <Krnl::panic(char const*)>
c0015fb8:	83 e9 41             	sub    ecx,0x41
c0015fbb:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015fc2:	b8 01 00 00 00       	mov    eax,0x1
c0015fc7:	c7 04 8d 00 d7 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2900],0x0
c0015fd2:	d3 e0                	shl    eax,cl
c0015fd4:	89 c7                	mov    edi,eax
c0015fd6:	f7 d0                	not    eax
c0015fd8:	c1 ff 1f             	sar    edi,0x1f
c0015fdb:	21 05 e0 d6 02 c0    	and    DWORD PTR ds:0xc002d6e0,eax
c0015fe1:	89 fe                	mov    esi,edi
c0015fe3:	f7 d6                	not    esi
c0015fe5:	21 35 e4 d6 02 c0    	and    DWORD PTR ds:0xc002d6e4,esi
c0015feb:	5e                   	pop    esi
c0015fec:	5f                   	pop    edi
c0015fed:	c3                   	ret    

c0015fee <LogicalDisk::read(unsigned long long, int, void*)>:
c0015fee:	57                   	push   edi
c0015fef:	56                   	push   esi
c0015ff0:	53                   	push   ebx
c0015ff1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015ff5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ff9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015ffd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016001:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016007:	77 41                	ja     c001604a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016009:	99                   	cdq    
c001600a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016010:	01 c8                	add    eax,ecx
c0016012:	11 da                	adc    edx,ebx
c0016014:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001601a:	19 d7                	sbb    edi,edx
c001601c:	72 33                	jb     c0016051 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001601e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016024:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001602a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001602e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016032:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016038:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001603e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016042:	5b                   	pop    ebx
c0016043:	5e                   	pop    esi
c0016044:	5f                   	pop    edi
c0016045:	e9 f8 09 00 00       	jmp    c0016a42 <VCache::read(unsigned long long, int, void*)>
c001604a:	b8 05 00 00 00       	mov    eax,0x5
c001604f:	eb 05                	jmp    c0016056 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016051:	b8 07 00 00 00       	mov    eax,0x7
c0016056:	5b                   	pop    ebx
c0016057:	5e                   	pop    esi
c0016058:	5f                   	pop    edi
c0016059:	c3                   	ret    

c001605a <LogicalDisk::write(unsigned long long, int, void*)>:
c001605a:	57                   	push   edi
c001605b:	56                   	push   esi
c001605c:	53                   	push   ebx
c001605d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016061:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016065:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016069:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001606d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016073:	77 41                	ja     c00160b6 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016075:	99                   	cdq    
c0016076:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001607c:	01 c8                	add    eax,ecx
c001607e:	11 da                	adc    edx,ebx
c0016080:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016086:	19 d7                	sbb    edi,edx
c0016088:	72 33                	jb     c00160bd <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001608a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016090:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016096:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001609a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001609e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00160a4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00160aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00160ae:	5b                   	pop    ebx
c00160af:	5e                   	pop    esi
c00160b0:	5f                   	pop    edi
c00160b1:	e9 a8 08 00 00       	jmp    c001695e <VCache::write(unsigned long long, int, void*)>
c00160b6:	b8 05 00 00 00       	mov    eax,0x5
c00160bb:	eb 05                	jmp    c00160c2 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00160bd:	b8 07 00 00 00       	mov    eax,0x7
c00160c2:	5b                   	pop    ebx
c00160c3:	5e                   	pop    esi
c00160c4:	5f                   	pop    edi
c00160c5:	c3                   	ret    

c00160c6 <Mouse::Mouse(char const*)>:
c00160c6:	83 ec 0c             	sub    esp,0xc
c00160c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160cd:	83 ec 08             	sub    esp,0x8
c00160d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160d4:	50                   	push   eax
c00160d5:	e8 66 de ff ff       	call   c0013f40 <Device::Device(char const*)>
c00160da:	83 c4 10             	add    esp,0x10
c00160dd:	ba 30 a0 02 c0       	mov    edx,0xc002a030
c00160e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160e6:	89 10                	mov    DWORD PTR [eax],edx
c00160e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160ec:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00160f6:	90                   	nop
c00160f7:	83 c4 0c             	add    esp,0xc
c00160fa:	c3                   	ret    
c00160fb:	90                   	nop

c00160fc <Mouse::~Mouse()>:
c00160fc:	83 ec 0c             	sub    esp,0xc
c00160ff:	ba 30 a0 02 c0       	mov    edx,0xc002a030
c0016104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016108:	89 10                	mov    DWORD PTR [eax],edx
c001610a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001610e:	83 ec 0c             	sub    esp,0xc
c0016111:	50                   	push   eax
c0016112:	e8 0b db ff ff       	call   c0013c22 <Device::~Device()>
c0016117:	83 c4 10             	add    esp,0x10
c001611a:	90                   	nop
c001611b:	83 c4 0c             	add    esp,0xc
c001611e:	c3                   	ret    
c001611f:	90                   	nop

c0016120 <Mouse::~Mouse()>:
c0016120:	83 ec 0c             	sub    esp,0xc
c0016123:	83 ec 0c             	sub    esp,0xc
c0016126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001612a:	e8 cd ff ff ff       	call   c00160fc <Mouse::~Mouse()>
c001612f:	83 c4 10             	add    esp,0x10
c0016132:	83 ec 08             	sub    esp,0x8
c0016135:	68 58 01 00 00       	push   0x158
c001613a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001613e:	e8 06 c7 ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0016143:	83 c4 10             	add    esp,0x10
c0016146:	83 c4 0c             	add    esp,0xc
c0016149:	c3                   	ret    

c001614a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001614a:	55                   	push   ebp
c001614b:	57                   	push   edi
c001614c:	56                   	push   esi
c001614d:	53                   	push   ebx
c001614e:	81 ec 28 01 00 00    	sub    esp,0x128
c0016154:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001615b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016162:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016169:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016170:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016174:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016178:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001617f:	e8 b8 de ff ff       	call   c001403c <Device::getName()>
c0016184:	5a                   	pop    edx
c0016185:	59                   	pop    ecx
c0016186:	50                   	push   eax
c0016187:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001618b:	55                   	push   ebp
c001618c:	e8 d2 a5 fe ff       	call   c0000763 <strcpy>
c0016191:	5b                   	pop    ebx
c0016192:	58                   	pop    eax
c0016193:	68 54 a0 02 c0       	push   0xc002a054
c0016198:	55                   	push   ebp
c0016199:	e8 7c a6 fe ff       	call   c000081a <strcat>
c001619e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00161a5:	e8 b0 94 ff ff       	call   c000f65a <malloc>
c00161aa:	83 c4 0c             	add    esp,0xc
c00161ad:	89 c3                	mov    ebx,eax
c00161af:	57                   	push   edi
c00161b0:	56                   	push   esi
c00161b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161b9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00161c0:	55                   	push   ebp
c00161c1:	50                   	push   eax
c00161c2:	e8 e3 fb ff ff       	call   c0015daa <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00161c7:	83 c4 14             	add    esp,0x14
c00161ca:	53                   	push   ebx
c00161cb:	e8 90 fc ff ff       	call   c0015e60 <LogicalDisk::assignDriveLetter()>
c00161d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161d3:	e8 3e fd ff ff       	call   c0015f16 <LogicalDisk::mount()>
c00161d8:	58                   	pop    eax
c00161d9:	5a                   	pop    edx
c00161da:	53                   	push   ebx
c00161db:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00161e2:	e8 69 db ff ff       	call   c0013d50 <Device::addChild(Device*)>
c00161e7:	81 c4 2c 01 00 00    	add    esp,0x12c
c00161ed:	5b                   	pop    ebx
c00161ee:	5e                   	pop    esi
c00161ef:	5f                   	pop    edi
c00161f0:	5d                   	pop    ebp
c00161f1:	c3                   	ret    

c00161f2 <createPartitionsForDisk(PhysicalDisk*)>:
c00161f2:	55                   	push   ebp
c00161f3:	57                   	push   edi
c00161f4:	56                   	push   esi
c00161f5:	53                   	push   ebx
c00161f6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00161fc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016203:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016209:	3d 00 02 00 00       	cmp    eax,0x200
c001620e:	74 27                	je     c0016237 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016210:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016216:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001621c:	83 ec 10             	sub    esp,0x10
c001621f:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016223:	99                   	cdq    
c0016224:	c1 e6 0a             	shl    esi,0xa
c0016227:	52                   	push   edx
c0016228:	89 fd                	mov    ebp,edi
c001622a:	50                   	push   eax
c001622b:	55                   	push   ebp
c001622c:	56                   	push   esi
c001622d:	e8 6a f6 00 00       	call   c002589c <__udivdi3>
c0016232:	e9 b1 00 00 00       	jmp    c00162e8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016237:	83 ec 0c             	sub    esp,0xc
c001623a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001623c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016240:	56                   	push   esi
c0016241:	6a 01                	push   0x1
c0016243:	6a 00                	push   0x0
c0016245:	6a 00                	push   0x0
c0016247:	53                   	push   ebx
c0016248:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001624b:	83 c4 20             	add    esp,0x20
c001624e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016256:	75 0a                	jne    c0016262 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016258:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016260:	74 2c                	je     c001628e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016262:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016268:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001626e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016274:	83 ec 10             	sub    esp,0x10
c0016277:	0f a4 c2 0a          	shld   edx,eax,0xa
c001627b:	89 f7                	mov    edi,esi
c001627d:	c1 e0 0a             	shl    eax,0xa
c0016280:	c1 ff 1f             	sar    edi,0x1f
c0016283:	57                   	push   edi
c0016284:	56                   	push   esi
c0016285:	52                   	push   edx
c0016286:	50                   	push   eax
c0016287:	e8 10 f6 00 00       	call   c002589c <__udivdi3>
c001628c:	eb 5a                	jmp    c00162e8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001628e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016295:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001629c:	83 e1 7f             	and    ecx,0x7f
c001629f:	83 e0 7f             	and    eax,0x7f
c00162a2:	01 c1                	add    ecx,eax
c00162a4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00162ab:	83 e0 7f             	and    eax,0x7f
c00162ae:	01 c1                	add    ecx,eax
c00162b0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00162b7:	83 e0 7f             	and    eax,0x7f
c00162ba:	00 c1                	add    cl,al
c00162bc:	74 41                	je     c00162ff <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00162be:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00162c4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00162ca:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00162d0:	83 ec 10             	sub    esp,0x10
c00162d3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00162d7:	89 f7                	mov    edi,esi
c00162d9:	c1 e0 0a             	shl    eax,0xa
c00162dc:	c1 ff 1f             	sar    edi,0x1f
c00162df:	57                   	push   edi
c00162e0:	56                   	push   esi
c00162e1:	52                   	push   edx
c00162e2:	50                   	push   eax
c00162e3:	e8 b4 f5 00 00       	call   c002589c <__udivdi3>
c00162e8:	83 c4 14             	add    esp,0x14
c00162eb:	52                   	push   edx
c00162ec:	50                   	push   eax
c00162ed:	6a 00                	push   0x0
c00162ef:	6a 00                	push   0x0
c00162f1:	53                   	push   ebx
c00162f2:	e8 53 fe ff ff       	call   c001614a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00162f7:	83 c4 20             	add    esp,0x20
c00162fa:	e9 79 01 00 00       	jmp    c0016478 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00162ff:	89 f0                	mov    eax,esi
c0016301:	31 f6                	xor    esi,esi
c0016303:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001630a:	75 02                	jne    c001630e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001630c:	89 f1                	mov    ecx,esi
c001630e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016315:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001631c:	c1 e2 08             	shl    edx,0x8
c001631f:	c1 e7 10             	shl    edi,0x10
c0016322:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001632a:	09 fa                	or     edx,edi
c001632c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016334:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001633b:	83 c0 10             	add    eax,0x10
c001633e:	09 fa                	or     edx,edi
c0016340:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016347:	c1 e7 18             	shl    edi,0x18
c001634a:	09 fa                	or     edx,edi
c001634c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016353:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016357:	c1 e7 10             	shl    edi,0x10
c001635a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016361:	c1 e2 08             	shl    edx,0x8
c0016364:	09 fa                	or     edx,edi
c0016366:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001636d:	09 fa                	or     edx,edi
c001636f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016376:	c1 e7 18             	shl    edi,0x18
c0016379:	09 fa                	or     edx,edi
c001637b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001637f:	46                   	inc    esi
c0016380:	83 fe 04             	cmp    esi,0x4
c0016383:	0f 85 7a ff ff ff    	jne    c0016303 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016389:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001638d:	83 f0 01             	xor    eax,0x1
c0016390:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016394:	75 57                	jne    c00163ed <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016396:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001639a:	83 f0 01             	xor    eax,0x1
c001639d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00163a1:	75 4a                	jne    c00163ed <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00163a3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00163a7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00163af:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00163b7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00163bd:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00163c3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00163c9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00163cd:	89 f7                	mov    edi,esi
c00163cf:	c1 e0 0a             	shl    eax,0xa
c00163d2:	c1 ff 1f             	sar    edi,0x1f
c00163d5:	57                   	push   edi
c00163d6:	56                   	push   esi
c00163d7:	52                   	push   edx
c00163d8:	50                   	push   eax
c00163d9:	e8 be f4 00 00       	call   c002589c <__udivdi3>
c00163de:	83 c4 10             	add    esp,0x10
c00163e1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00163e5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00163e9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00163ed:	84 c9                	test   cl,cl
c00163ef:	74 53                	je     c0016444 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00163f1:	0f b6 c9             	movzx  ecx,cl
c00163f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00163fc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016400:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016408:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001640c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016410:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016414:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016418:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001641c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016420:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016424:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016428:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001642c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016430:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016434:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016438:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001643c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016440:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016444:	31 ed                	xor    ebp,ebp
c0016446:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001644a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001644e:	89 f8                	mov    eax,edi
c0016450:	09 f0                	or     eax,esi
c0016452:	74 1e                	je     c0016472 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016454:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016458:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001645c:	89 d1                	mov    ecx,edx
c001645e:	09 c1                	or     ecx,eax
c0016460:	74 10                	je     c0016472 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016462:	83 ec 0c             	sub    esp,0xc
c0016465:	57                   	push   edi
c0016466:	56                   	push   esi
c0016467:	52                   	push   edx
c0016468:	50                   	push   eax
c0016469:	53                   	push   ebx
c001646a:	e8 db fc ff ff       	call   c001614a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001646f:	83 c4 20             	add    esp,0x20
c0016472:	45                   	inc    ebp
c0016473:	83 fd 04             	cmp    ebp,0x4
c0016476:	75 ce                	jne    c0016446 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016478:	81 c4 5c 02 00 00    	add    esp,0x25c
c001647e:	5b                   	pop    ebx
c001647f:	5e                   	pop    esi
c0016480:	5f                   	pop    edi
c0016481:	5d                   	pop    ebp
c0016482:	c3                   	ret    
c0016483:	90                   	nop

c0016484 <Serial::Serial(char const*)>:
c0016484:	83 ec 0c             	sub    esp,0xc
c0016487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001648b:	83 ec 08             	sub    esp,0x8
c001648e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016492:	50                   	push   eax
c0016493:	e8 a8 da ff ff       	call   c0013f40 <Device::Device(char const*)>
c0016498:	83 c4 10             	add    esp,0x10
c001649b:	ba 68 a0 02 c0       	mov    edx,0xc002a068
c00164a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164a4:	89 10                	mov    DWORD PTR [eax],edx
c00164a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164aa:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00164b4:	90                   	nop
c00164b5:	83 c4 0c             	add    esp,0xc
c00164b8:	c3                   	ret    
c00164b9:	90                   	nop

c00164ba <Serial::~Serial()>:
c00164ba:	83 ec 0c             	sub    esp,0xc
c00164bd:	ba 68 a0 02 c0       	mov    edx,0xc002a068
c00164c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164c6:	89 10                	mov    DWORD PTR [eax],edx
c00164c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164cc:	83 ec 0c             	sub    esp,0xc
c00164cf:	50                   	push   eax
c00164d0:	e8 4d d7 ff ff       	call   c0013c22 <Device::~Device()>
c00164d5:	83 c4 10             	add    esp,0x10
c00164d8:	90                   	nop
c00164d9:	83 c4 0c             	add    esp,0xc
c00164dc:	c3                   	ret    
c00164dd:	90                   	nop

c00164de <Serial::~Serial()>:
c00164de:	83 ec 0c             	sub    esp,0xc
c00164e1:	83 ec 0c             	sub    esp,0xc
c00164e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164e8:	e8 cd ff ff ff       	call   c00164ba <Serial::~Serial()>
c00164ed:	83 c4 10             	add    esp,0x10
c00164f0:	83 ec 08             	sub    esp,0x8
c00164f3:	68 58 01 00 00       	push   0x158
c00164f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164fc:	e8 48 c3 ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0016501:	83 c4 10             	add    esp,0x10
c0016504:	83 c4 0c             	add    esp,0xc
c0016507:	c3                   	ret    

c0016508 <Timer::Timer(char const*)>:
c0016508:	83 ec 0c             	sub    esp,0xc
c001650b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001650f:	83 ec 08             	sub    esp,0x8
c0016512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016516:	50                   	push   eax
c0016517:	e8 24 da ff ff       	call   c0013f40 <Device::Device(char const*)>
c001651c:	83 c4 10             	add    esp,0x10
c001651f:	ba ac a0 02 c0       	mov    edx,0xc002a0ac
c0016524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016528:	89 10                	mov    DWORD PTR [eax],edx
c001652a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001652e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016538:	90                   	nop
c0016539:	83 c4 0c             	add    esp,0xc
c001653c:	c3                   	ret    
c001653d:	90                   	nop

c001653e <Timer::~Timer()>:
c001653e:	83 ec 0c             	sub    esp,0xc
c0016541:	ba ac a0 02 c0       	mov    edx,0xc002a0ac
c0016546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001654a:	89 10                	mov    DWORD PTR [eax],edx
c001654c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016550:	83 ec 0c             	sub    esp,0xc
c0016553:	50                   	push   eax
c0016554:	e8 c9 d6 ff ff       	call   c0013c22 <Device::~Device()>
c0016559:	83 c4 10             	add    esp,0x10
c001655c:	90                   	nop
c001655d:	83 c4 0c             	add    esp,0xc
c0016560:	c3                   	ret    
c0016561:	90                   	nop

c0016562 <Timer::~Timer()>:
c0016562:	83 ec 0c             	sub    esp,0xc
c0016565:	83 ec 0c             	sub    esp,0xc
c0016568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001656c:	e8 cd ff ff ff       	call   c001653e <Timer::~Timer()>
c0016571:	83 c4 10             	add    esp,0x10
c0016574:	83 ec 08             	sub    esp,0x8
c0016577:	68 5c 01 00 00       	push   0x15c
c001657c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016580:	e8 c4 c2 ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0016585:	83 c4 10             	add    esp,0x10
c0016588:	83 c4 0c             	add    esp,0xc
c001658b:	c3                   	ret    

c001658c <Timer::read()>:
c001658c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016590:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016596:	c3                   	ret    

c0016597 <timerHandler(unsigned long long)>:
c0016597:	55                   	push   ebp
c0016598:	57                   	push   edi
c0016599:	56                   	push   esi
c001659a:	53                   	push   ebx
c001659b:	83 ec 0c             	sub    esp,0xc
c001659e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00165a2:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00165a6:	01 35 70 d7 02 c0    	add    DWORD PTR ds:0xc002d770,esi
c00165ac:	11 3d 74 d7 02 c0    	adc    DWORD PTR ds:0xc002d774,edi
c00165b2:	80 3d ed d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ed,0x0
c00165b9:	0f 84 07 01 00 00    	je     c00166c6 <timerHandler(unsigned long long)+0x12f>
c00165bf:	e8 91 6c 00 00       	call   c001d255 <lockStuff()>
c00165c4:	83 ec 0c             	sub    esp,0xc
c00165c7:	68 1c e6 02 c0       	push   0xc002e61c
c00165cc:	e8 3d 13 01 00       	call   c002790e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165d1:	c7 04 24 1c e6 02 c0 	mov    DWORD PTR [esp],0xc002e61c
c00165d8:	89 c3                	mov    ebx,eax
c00165da:	e8 37 13 01 00       	call   c0027916 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00165df:	83 c4 10             	add    esp,0x10
c00165e2:	84 c0                	test   al,al
c00165e4:	74 60                	je     c0016646 <timerHandler(unsigned long long)+0xaf>
c00165e6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00165ec:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00165ef:	85 c0                	test   eax,eax
c00165f1:	0f 85 91 00 00 00    	jne    c0016688 <timerHandler(unsigned long long)+0xf1>
c00165f7:	e9 be 00 00 00       	jmp    c00166ba <timerHandler(unsigned long long)+0x123>
c00165fc:	83 ec 0c             	sub    esp,0xc
c00165ff:	55                   	push   ebp
c0016600:	e8 41 72 00 00       	call   c001d846 <unblockTask(ThreadControlBlock*)>
c0016605:	83 c4 10             	add    esp,0x10
c0016608:	39 eb                	cmp    ebx,ebp
c001660a:	75 12                	jne    c001661e <timerHandler(unsigned long long)+0x87>
c001660c:	83 ec 0c             	sub    esp,0xc
c001660f:	68 1c e6 02 c0       	push   0xc002e61c
c0016614:	e8 f5 12 01 00       	call   c002790e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016619:	89 c3                	mov    ebx,eax
c001661b:	83 c4 10             	add    esp,0x10
c001661e:	83 ec 0c             	sub    esp,0xc
c0016621:	68 1c e6 02 c0       	push   0xc002e61c
c0016626:	e8 eb 12 01 00       	call   c0027916 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001662b:	83 c4 10             	add    esp,0x10
c001662e:	84 c0                	test   al,al
c0016630:	75 b4                	jne    c00165e6 <timerHandler(unsigned long long)+0x4f>
c0016632:	83 ec 0c             	sub    esp,0xc
c0016635:	68 1c e6 02 c0       	push   0xc002e61c
c001663a:	e8 cf 12 01 00       	call   c002790e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001663f:	83 c4 10             	add    esp,0x10
c0016642:	39 d8                	cmp    eax,ebx
c0016644:	74 a0                	je     c00165e6 <timerHandler(unsigned long long)+0x4f>
c0016646:	83 ec 0c             	sub    esp,0xc
c0016649:	68 1c e6 02 c0       	push   0xc002e61c
c001664e:	e8 bb 12 01 00       	call   c002790e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016653:	c7 04 24 1c e6 02 c0 	mov    DWORD PTR [esp],0xc002e61c
c001665a:	89 c5                	mov    ebp,eax
c001665c:	e8 d1 12 01 00       	call   c0027932 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016661:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016664:	83 c4 10             	add    esp,0x10
c0016667:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001666a:	39 15 70 d7 02 c0    	cmp    DWORD PTR ds:0xc002d770,edx
c0016670:	a1 74 d7 02 c0       	mov    eax,ds:0xc002d774
c0016675:	19 c8                	sbb    eax,ecx
c0016677:	73 83                	jae    c00165fc <timerHandler(unsigned long long)+0x65>
c0016679:	50                   	push   eax
c001667a:	50                   	push   eax
c001667b:	55                   	push   ebp
c001667c:	68 1c e6 02 c0       	push   0xc002e61c
c0016681:	e8 5a 13 01 00       	call   c00279e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016686:	eb 93                	jmp    c001661b <timerHandler(unsigned long long)+0x84>
c0016688:	80 3d ec d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ec,0x0
c001668f:	74 29                	je     c00166ba <timerHandler(unsigned long long)+0x123>
c0016691:	39 c6                	cmp    esi,eax
c0016693:	bb 00 00 00 00       	mov    ebx,0x0
c0016698:	19 df                	sbb    edi,ebx
c001669a:	72 19                	jb     c00166b5 <timerHandler(unsigned long long)+0x11e>
c001669c:	e8 8d 6b 00 00       	call   c001d22e <lockScheduler()>
c00166a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166a6:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00166a9:	e8 bc 6e 00 00       	call   c001d56a <schedule()>
c00166ae:	e8 7d 6b 00 00       	call   c001d230 <unlockScheduler()>
c00166b3:	eb 05                	jmp    c00166ba <timerHandler(unsigned long long)+0x123>
c00166b5:	29 f0                	sub    eax,esi
c00166b7:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00166ba:	83 c4 0c             	add    esp,0xc
c00166bd:	5b                   	pop    ebx
c00166be:	5e                   	pop    esi
c00166bf:	5f                   	pop    edi
c00166c0:	5d                   	pop    ebp
c00166c1:	e9 29 6f 00 00       	jmp    c001d5ef <unlockStuff()>
c00166c6:	83 c4 0c             	add    esp,0xc
c00166c9:	5b                   	pop    ebx
c00166ca:	5e                   	pop    esi
c00166cb:	5f                   	pop    edi
c00166cc:	5d                   	pop    ebp
c00166cd:	c3                   	ret    

c00166ce <setupTimer(int)>:
c00166ce:	57                   	push   edi
c00166cf:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c00166d4:	56                   	push   esi
c00166d5:	53                   	push   ebx
c00166d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00166e0:	83 ec 0c             	sub    esp,0xc
c00166e3:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00166e9:	e8 4e d9 ff ff       	call   c001403c <Device::getName()>
c00166ee:	83 c4 10             	add    esp,0x10
c00166f1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00166f4:	0f 85 8d 00 00 00    	jne    c0016787 <setupTimer(int)+0xb9>
c00166fa:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c00166ff:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016706:	74 7f                	je     c0016787 <setupTimer(int)+0xb9>
c0016708:	83 ec 0c             	sub    esp,0xc
c001670b:	68 5c 01 00 00       	push   0x15c
c0016710:	e8 45 8f ff ff       	call   c000f65a <malloc>
c0016715:	89 04 24             	mov    DWORD PTR [esp],eax
c0016718:	89 c3                	mov    ebx,eax
c001671a:	e8 57 ed 00 00       	call   c0025476 <PIT::PIT()>
c001671f:	59                   	pop    ecx
c0016720:	5f                   	pop    edi
c0016721:	53                   	push   ebx
c0016722:	ff 35 e8 d0 02 c0    	push   DWORD PTR ds:0xc002d0e8
c0016728:	e8 23 d6 ff ff       	call   c0013d50 <Device::addChild(Device*)>
c001672d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001672f:	6a 00                	push   0x0
c0016731:	6a 00                	push   0x0
c0016733:	56                   	push   esi
c0016734:	53                   	push   ebx
c0016735:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016738:	83 c4 14             	add    esp,0x14
c001673b:	68 60 01 00 00       	push   0x160
c0016740:	e8 15 8f ff ff       	call   c000f65a <malloc>
c0016745:	89 04 24             	mov    DWORD PTR [esp],eax
c0016748:	89 c7                	mov    edi,eax
c001674a:	e8 d7 eb 00 00       	call   c0025326 <APICTimer::APICTimer()>
c001674f:	6a 00                	push   0x0
c0016751:	6a 00                	push   0x0
c0016753:	56                   	push   esi
c0016754:	57                   	push   edi
c0016755:	e8 ce ea 00 00       	call   c0025228 <APICTimer::open(int, int, void*)>
c001675a:	83 c4 20             	add    esp,0x20
c001675d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001675f:	6a 00                	push   0x0
c0016761:	6a 00                	push   0x0
c0016763:	6a 00                	push   0x0
c0016765:	53                   	push   ebx
c0016766:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016769:	58                   	pop    eax
c001676a:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c001676f:	5a                   	pop    edx
c0016770:	57                   	push   edi
c0016771:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016777:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001677d:	e8 ce d5 ff ff       	call   c0013d50 <Device::addChild(Device*)>
c0016782:	83 c4 10             	add    esp,0x10
c0016785:	eb 33                	jmp    c00167ba <setupTimer(int)+0xec>
c0016787:	83 ec 0c             	sub    esp,0xc
c001678a:	68 5c 01 00 00       	push   0x15c
c001678f:	e8 c6 8e ff ff       	call   c000f65a <malloc>
c0016794:	89 04 24             	mov    DWORD PTR [esp],eax
c0016797:	89 c3                	mov    ebx,eax
c0016799:	e8 d8 ec 00 00       	call   c0025476 <PIT::PIT()>
c001679e:	58                   	pop    eax
c001679f:	5a                   	pop    edx
c00167a0:	53                   	push   ebx
c00167a1:	ff 35 e8 d0 02 c0    	push   DWORD PTR ds:0xc002d0e8
c00167a7:	e8 a4 d5 ff ff       	call   c0013d50 <Device::addChild(Device*)>
c00167ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167ae:	6a 00                	push   0x0
c00167b0:	6a 00                	push   0x0
c00167b2:	56                   	push   esi
c00167b3:	53                   	push   ebx
c00167b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167b7:	83 c4 20             	add    esp,0x20
c00167ba:	89 d8                	mov    eax,ebx
c00167bc:	5b                   	pop    ebx
c00167bd:	5e                   	pop    esi
c00167be:	5f                   	pop    edi
c00167bf:	c3                   	ret    

c00167c0 <VCache::VCache(PhysicalDisk*)>:
c00167c0:	53                   	push   ebx
c00167c1:	83 ec 18             	sub    esp,0x18
c00167c4:	ba dc a0 02 c0       	mov    edx,0xc002a0dc
c00167c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167cd:	89 10                	mov    DWORD PTR [eax],edx
c00167cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167d3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00167da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167de:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00167e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167e9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00167f0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00167f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167fb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016802:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016809:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001680d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016818:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001681c:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016824:	83 ec 0c             	sub    esp,0xc
c0016827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001682b:	e8 2a 8e ff ff       	call   c000f65a <malloc>
c0016830:	83 c4 10             	add    esp,0x10
c0016833:	89 c3                	mov    ebx,eax
c0016835:	83 ec 0c             	sub    esp,0xc
c0016838:	53                   	push   ebx
c0016839:	e8 10 6b 00 00       	call   c001d34e <Mutex::Mutex()>
c001683e:	83 c4 10             	add    esp,0x10
c0016841:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016845:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001684c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016850:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016853:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016857:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001685e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016862:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016868:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001686c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001686f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016873:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016879:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001687f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016883:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016886:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016889:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001688d:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016891:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016895:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001689b:	c1 e0 06             	shl    eax,0x6
c001689e:	83 ec 0c             	sub    esp,0xc
c00168a1:	50                   	push   eax
c00168a2:	e8 b3 8d ff ff       	call   c000f65a <malloc>
c00168a7:	83 c4 10             	add    esp,0x10
c00168aa:	89 c2                	mov    edx,eax
c00168ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168b0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00168b3:	90                   	nop
c00168b4:	83 c4 18             	add    esp,0x18
c00168b7:	5b                   	pop    ebx
c00168b8:	c3                   	ret    
c00168b9:	90                   	nop

c00168ba <VCache::writeWriteBuffer()>:
c00168ba:	53                   	push   ebx
c00168bb:	83 ec 14             	sub    esp,0x14
c00168be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00168c2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00168c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00168c7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00168ca:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00168cd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00168d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00168d3:	50                   	push   eax
c00168d4:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00168d7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00168de:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00168e5:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00168e9:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00168f0:	83 c4 28             	add    esp,0x28
c00168f3:	5b                   	pop    ebx
c00168f4:	c3                   	ret    
c00168f5:	90                   	nop

c00168f6 <VCache::~VCache()>:
c00168f6:	83 ec 0c             	sub    esp,0xc
c00168f9:	ba dc a0 02 c0       	mov    edx,0xc002a0dc
c00168fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016902:	89 10                	mov    DWORD PTR [eax],edx
c0016904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016908:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001690b:	84 c0                	test   al,al
c001690d:	74 0f                	je     c001691e <VCache::~VCache()+0x28>
c001690f:	83 ec 0c             	sub    esp,0xc
c0016912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016916:	e8 9f ff ff ff       	call   c00168ba <VCache::writeWriteBuffer()>
c001691b:	83 c4 10             	add    esp,0x10
c001691e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016922:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016925:	83 ec 0c             	sub    esp,0xc
c0016928:	50                   	push   eax
c0016929:	e8 3c 8d ff ff       	call   c000f66a <free>
c001692e:	83 c4 10             	add    esp,0x10
c0016931:	90                   	nop
c0016932:	83 c4 0c             	add    esp,0xc
c0016935:	c3                   	ret    

c0016936 <VCache::~VCache()>:
c0016936:	83 ec 0c             	sub    esp,0xc
c0016939:	83 ec 0c             	sub    esp,0xc
c001693c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016940:	e8 b1 ff ff ff       	call   c00168f6 <VCache::~VCache()>
c0016945:	83 c4 10             	add    esp,0x10
c0016948:	83 ec 08             	sub    esp,0x8
c001694b:	6a 30                	push   0x30
c001694d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016951:	e8 f3 be ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0016956:	83 c4 10             	add    esp,0x10
c0016959:	83 c4 0c             	add    esp,0xc
c001695c:	c3                   	ret    
c001695d:	90                   	nop

c001695e <VCache::write(unsigned long long, int, void*)>:
c001695e:	55                   	push   ebp
c001695f:	57                   	push   edi
c0016960:	56                   	push   esi
c0016961:	53                   	push   ebx
c0016962:	83 ec 28             	sub    esp,0x28
c0016965:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016969:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001696d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016971:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016975:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016978:	e8 33 6e 00 00       	call   c001d7b0 <Semaphore::acquire()>
c001697d:	83 c4 10             	add    esp,0x10
c0016980:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016984:	74 66                	je     c00169ec <VCache::write(unsigned long long, int, void*)+0x8e>
c0016986:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016989:	99                   	cdq    
c001698a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001698e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016991:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016994:	89 c1                	mov    ecx,eax
c0016996:	89 d0                	mov    eax,edx
c0016998:	31 f1                	xor    ecx,esi
c001699a:	31 f8                	xor    eax,edi
c001699c:	89 ca                	mov    edx,ecx
c001699e:	09 c2                	or     edx,eax
c00169a0:	75 3e                	jne    c00169e0 <VCache::write(unsigned long long, int, void*)+0x82>
c00169a2:	83 fd 01             	cmp    ebp,0x1
c00169a5:	75 39                	jne    c00169e0 <VCache::write(unsigned long long, int, void*)+0x82>
c00169a7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169aa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169b0:	51                   	push   ecx
c00169b1:	50                   	push   eax
c00169b2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00169b6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00169ba:	0f af c8             	imul   ecx,eax
c00169bd:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00169c0:	51                   	push   ecx
c00169c1:	e8 da 9c fe ff       	call   c00006a0 <memcpy>
c00169c6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00169c9:	83 c4 10             	add    esp,0x10
c00169cc:	40                   	inc    eax
c00169cd:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00169d0:	83 f8 40             	cmp    eax,0x40
c00169d3:	75 57                	jne    c0016a2c <VCache::write(unsigned long long, int, void*)+0xce>
c00169d5:	83 ec 0c             	sub    esp,0xc
c00169d8:	53                   	push   ebx
c00169d9:	e8 dc fe ff ff       	call   c00168ba <VCache::writeWriteBuffer()>
c00169de:	eb 34                	jmp    c0016a14 <VCache::write(unsigned long long, int, void*)+0xb6>
c00169e0:	83 ec 0c             	sub    esp,0xc
c00169e3:	53                   	push   ebx
c00169e4:	e8 d1 fe ff ff       	call   c00168ba <VCache::writeWriteBuffer()>
c00169e9:	83 c4 10             	add    esp,0x10
c00169ec:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169ef:	83 fd 3f             	cmp    ebp,0x3f
c00169f2:	7f 25                	jg     c0016a19 <VCache::write(unsigned long long, int, void*)+0xbb>
c00169f4:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00169f7:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00169fa:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00169fd:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016a01:	52                   	push   edx
c0016a02:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016a08:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016a0c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016a0f:	e8 8c 9c fe ff       	call   c00006a0 <memcpy>
c0016a14:	83 c4 10             	add    esp,0x10
c0016a17:	eb 13                	jmp    c0016a2c <VCache::write(unsigned long long, int, void*)+0xce>
c0016a19:	83 ec 0c             	sub    esp,0xc
c0016a1c:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a1e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016a22:	55                   	push   ebp
c0016a23:	57                   	push   edi
c0016a24:	56                   	push   esi
c0016a25:	50                   	push   eax
c0016a26:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016a29:	83 c4 20             	add    esp,0x20
c0016a2c:	83 ec 0c             	sub    esp,0xc
c0016a2f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a32:	e8 27 73 00 00       	call   c001dd5e <Semaphore::release()>
c0016a37:	83 c4 2c             	add    esp,0x2c
c0016a3a:	31 c0                	xor    eax,eax
c0016a3c:	5b                   	pop    ebx
c0016a3d:	5e                   	pop    esi
c0016a3e:	5f                   	pop    edi
c0016a3f:	5d                   	pop    ebp
c0016a40:	c3                   	ret    
c0016a41:	90                   	nop

c0016a42 <VCache::read(unsigned long long, int, void*)>:
c0016a42:	57                   	push   edi
c0016a43:	56                   	push   esi
c0016a44:	53                   	push   ebx
c0016a45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a49:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016a4d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016a51:	83 ec 0c             	sub    esp,0xc
c0016a54:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a57:	e8 54 6d 00 00       	call   c001d7b0 <Semaphore::acquire()>
c0016a5c:	83 c4 10             	add    esp,0x10
c0016a5f:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016a63:	74 0c                	je     c0016a71 <VCache::read(unsigned long long, int, void*)+0x2f>
c0016a65:	83 ec 0c             	sub    esp,0xc
c0016a68:	53                   	push   ebx
c0016a69:	e8 4c fe ff ff       	call   c00168ba <VCache::writeWriteBuffer()>
c0016a6e:	83 c4 10             	add    esp,0x10
c0016a71:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a74:	83 ec 0c             	sub    esp,0xc
c0016a77:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a81:	57                   	push   edi
c0016a82:	56                   	push   esi
c0016a83:	50                   	push   eax
c0016a84:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016a87:	83 c4 14             	add    esp,0x14
c0016a8a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a8d:	e8 cc 72 00 00       	call   c001dd5e <Semaphore::release()>
c0016a92:	83 c4 10             	add    esp,0x10
c0016a95:	31 c0                	xor    eax,eax
c0016a97:	5b                   	pop    ebx
c0016a98:	5e                   	pop    esi
c0016a99:	5f                   	pop    edi
c0016a9a:	c3                   	ret    
c0016a9b:	90                   	nop

c0016a9c <Video::putrect(int, int, int, int, unsigned int)>:
c0016a9c:	55                   	push   ebp
c0016a9d:	57                   	push   edi
c0016a9e:	56                   	push   esi
c0016a9f:	53                   	push   ebx
c0016aa0:	83 ec 1c             	sub    esp,0x1c
c0016aa3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016aa7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016aab:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016aaf:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016ab3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ab7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016abb:	01 df                	add    edi,ebx
c0016abd:	39 fb                	cmp    ebx,edi
c0016abf:	7d 1f                	jge    c0016ae0 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016ac1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016ac5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016ac9:	7d 12                	jge    c0016add <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016acb:	8b 16                	mov    edx,DWORD PTR [esi]
c0016acd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016ad1:	53                   	push   ebx
c0016ad2:	55                   	push   ebp
c0016ad3:	45                   	inc    ebp
c0016ad4:	56                   	push   esi
c0016ad5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016ad8:	83 c4 10             	add    esp,0x10
c0016adb:	eb e8                	jmp    c0016ac5 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016add:	43                   	inc    ebx
c0016ade:	eb dd                	jmp    c0016abd <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016ae0:	83 c4 1c             	add    esp,0x1c
c0016ae3:	5b                   	pop    ebx
c0016ae4:	5e                   	pop    esi
c0016ae5:	5f                   	pop    edi
c0016ae6:	5d                   	pop    ebp
c0016ae7:	c3                   	ret    

c0016ae8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016ae8:	55                   	push   ebp
c0016ae9:	57                   	push   edi
c0016aea:	31 ff                	xor    edi,edi
c0016aec:	56                   	push   esi
c0016aed:	53                   	push   ebx
c0016aee:	83 ec 1c             	sub    esp,0x1c
c0016af1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016af5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016af9:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016b00:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016b05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b09:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016b0d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016b11:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016b14:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016b18:	01 f9                	add    ecx,edi
c0016b1a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016b1e:	7d 2f                	jge    c0016b4f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016b20:	31 f6                	xor    esi,esi
c0016b22:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016b26:	01 f2                	add    edx,esi
c0016b28:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016b2c:	7d 1a                	jge    c0016b48 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016b2e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016b31:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016b34:	46                   	inc    esi
c0016b35:	51                   	push   ecx
c0016b36:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016b3a:	52                   	push   edx
c0016b3b:	55                   	push   ebp
c0016b3c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016b3f:	83 c4 10             	add    esp,0x10
c0016b42:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b46:	eb da                	jmp    c0016b22 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016b48:	47                   	inc    edi
c0016b49:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016b4d:	eb c5                	jmp    c0016b14 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016b4f:	83 c4 1c             	add    esp,0x1c
c0016b52:	5b                   	pop    ebx
c0016b53:	5e                   	pop    esi
c0016b54:	5f                   	pop    edi
c0016b55:	5d                   	pop    ebp
c0016b56:	c3                   	ret    
c0016b57:	90                   	nop

c0016b58 <Video::blit(unsigned int*, int, int, int, int)>:
c0016b58:	55                   	push   ebp
c0016b59:	57                   	push   edi
c0016b5a:	56                   	push   esi
c0016b5b:	53                   	push   ebx
c0016b5c:	83 ec 1c             	sub    esp,0x1c
c0016b5f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016b63:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b67:	85 c0                	test   eax,eax
c0016b69:	79 02                	jns    c0016b6d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016b6b:	31 c0                	xor    eax,eax
c0016b6d:	c1 e0 02             	shl    eax,0x2
c0016b70:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016b74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b78:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016b7c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016b80:	39 d8                	cmp    eax,ebx
c0016b82:	7e 49                	jle    c0016bcd <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016b84:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016b8a:	7c 41                	jl     c0016bcd <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016b8c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016b90:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016b94:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016b98:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016b9c:	39 f9                	cmp    ecx,edi
c0016b9e:	7e 22                	jle    c0016bc2 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016ba0:	83 c5 04             	add    ebp,0x4
c0016ba3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016ba9:	7c 14                	jl     c0016bbf <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016bab:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016bad:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016bb0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016bb4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016bb8:	56                   	push   esi
c0016bb9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016bbc:	83 c4 10             	add    esp,0x10
c0016bbf:	47                   	inc    edi
c0016bc0:	eb d2                	jmp    c0016b94 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016bc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016bc6:	43                   	inc    ebx
c0016bc7:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016bcb:	eb ab                	jmp    c0016b78 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016bcd:	83 c4 1c             	add    esp,0x1c
c0016bd0:	5b                   	pop    ebx
c0016bd1:	5e                   	pop    esi
c0016bd2:	5f                   	pop    edi
c0016bd3:	5d                   	pop    ebp
c0016bd4:	c3                   	ret    
c0016bd5:	90                   	nop

c0016bd6 <Video::clearScreen(unsigned int)>:
c0016bd6:	57                   	push   edi
c0016bd7:	56                   	push   esi
c0016bd8:	53                   	push   ebx
c0016bd9:	31 db                	xor    ebx,ebx
c0016bdb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016bdf:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016be5:	7e 1f                	jle    c0016c06 <Video::clearScreen(unsigned int)+0x30>
c0016be7:	31 ff                	xor    edi,edi
c0016be9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016bef:	7e 12                	jle    c0016c03 <Video::clearScreen(unsigned int)+0x2d>
c0016bf1:	8b 06                	mov    eax,DWORD PTR [esi]
c0016bf3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016bf7:	53                   	push   ebx
c0016bf8:	57                   	push   edi
c0016bf9:	47                   	inc    edi
c0016bfa:	56                   	push   esi
c0016bfb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016bfe:	83 c4 10             	add    esp,0x10
c0016c01:	eb e6                	jmp    c0016be9 <Video::clearScreen(unsigned int)+0x13>
c0016c03:	43                   	inc    ebx
c0016c04:	eb d9                	jmp    c0016bdf <Video::clearScreen(unsigned int)+0x9>
c0016c06:	5b                   	pop    ebx
c0016c07:	5e                   	pop    esi
c0016c08:	5f                   	pop    edi
c0016c09:	c3                   	ret    

c0016c0a <Video::putpixel(int, int, unsigned int)>:
c0016c0a:	c7 44 24 04 e4 a0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a0e4
c0016c12:	e9 68 30 00 00       	jmp    c0019c7f <Krnl::panic(char const*)>
c0016c17:	90                   	nop

c0016c18 <Video::Video(char const*)>:
c0016c18:	83 ec 0c             	sub    esp,0xc
c0016c1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c1f:	83 ec 08             	sub    esp,0x8
c0016c22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c26:	50                   	push   eax
c0016c27:	e8 14 d3 ff ff       	call   c0013f40 <Device::Device(char const*)>
c0016c2c:	83 c4 10             	add    esp,0x10
c0016c2f:	ba 68 a1 02 c0       	mov    edx,0xc002a168
c0016c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c38:	89 10                	mov    DWORD PTR [eax],edx
c0016c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c3e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016c48:	90                   	nop
c0016c49:	83 c4 0c             	add    esp,0xc
c0016c4c:	c3                   	ret    
c0016c4d:	90                   	nop

c0016c4e <Video::~Video()>:
c0016c4e:	83 ec 0c             	sub    esp,0xc
c0016c51:	ba 68 a1 02 c0       	mov    edx,0xc002a168
c0016c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c5a:	89 10                	mov    DWORD PTR [eax],edx
c0016c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c60:	83 ec 0c             	sub    esp,0xc
c0016c63:	50                   	push   eax
c0016c64:	e8 b9 cf ff ff       	call   c0013c22 <Device::~Device()>
c0016c69:	83 c4 10             	add    esp,0x10
c0016c6c:	90                   	nop
c0016c6d:	83 c4 0c             	add    esp,0xc
c0016c70:	c3                   	ret    
c0016c71:	90                   	nop

c0016c72 <Video::~Video()>:
c0016c72:	83 ec 0c             	sub    esp,0xc
c0016c75:	83 ec 0c             	sub    esp,0xc
c0016c78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c7c:	e8 cd ff ff ff       	call   c0016c4e <Video::~Video()>
c0016c81:	83 c4 10             	add    esp,0x10
c0016c84:	83 ec 08             	sub    esp,0x8
c0016c87:	68 64 01 00 00       	push   0x164
c0016c8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c90:	e8 b4 bb ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0016c95:	83 c4 10             	add    esp,0x10
c0016c98:	83 c4 0c             	add    esp,0xc
c0016c9b:	c3                   	ret    

c0016c9c <Video::isMonochrome()>:
c0016c9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ca0:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016ca6:	c3                   	ret    
c0016ca7:	90                   	nop

c0016ca8 <Video::getWidth()>:
c0016ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cac:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016cb2:	c3                   	ret    
c0016cb3:	90                   	nop

c0016cb4 <Video::getHeight()>:
c0016cb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cb8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016cbe:	c3                   	ret    
c0016cbf:	90                   	nop

c0016cc0 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016cc0:	55                   	push   ebp
c0016cc1:	57                   	push   edi
c0016cc2:	56                   	push   esi
c0016cc3:	53                   	push   ebx
c0016cc4:	83 ec 2c             	sub    esp,0x2c
c0016cc7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ccb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016ccf:	83 f8 01             	cmp    eax,0x1
c0016cd2:	19 c9                	sbb    ecx,ecx
c0016cd4:	31 db                	xor    ebx,ebx
c0016cd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016cda:	89 cd                	mov    ebp,ecx
c0016cdc:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016ce4:	f7 d5                	not    ebp
c0016ce6:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016cec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016cf0:	01 d8                	add    eax,ebx
c0016cf2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016cf6:	56                   	push   esi
c0016cf7:	e8 b8 ff ff ff       	call   c0016cb4 <Video::getHeight()>
c0016cfc:	59                   	pop    ecx
c0016cfd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016d01:	7e 70                	jle    c0016d73 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016d03:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016d07:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016d0b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016d0e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d12:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016d16:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016d1d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016d21:	89 f8                	mov    eax,edi
c0016d23:	83 c0 20             	add    eax,0x20
c0016d26:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016d2a:	56                   	push   esi
c0016d2b:	e8 78 ff ff ff       	call   c0016ca8 <Video::getWidth()>
c0016d30:	5a                   	pop    edx
c0016d31:	39 c7                	cmp    edi,eax
c0016d33:	7d 34                	jge    c0016d69 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016d35:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016d3a:	74 05                	je     c0016d41 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016d3c:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d3e:	55                   	push   ebp
c0016d3f:	eb 0d                	jmp    c0016d4e <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016d41:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016d46:	74 12                	je     c0016d5a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016d48:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d4e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016d52:	57                   	push   edi
c0016d53:	56                   	push   esi
c0016d54:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d57:	83 c4 10             	add    esp,0x10
c0016d5a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016d5e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016d62:	47                   	inc    edi
c0016d63:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016d67:	75 c1                	jne    c0016d2a <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016d69:	43                   	inc    ebx
c0016d6a:	83 fb 20             	cmp    ebx,0x20
c0016d6d:	0f 85 79 ff ff ff    	jne    c0016cec <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016d73:	83 c4 2c             	add    esp,0x2c
c0016d76:	5b                   	pop    ebx
c0016d77:	5e                   	pop    esi
c0016d78:	5f                   	pop    edi
c0016d79:	5d                   	pop    ebp
c0016d7a:	c3                   	ret    
c0016d7b:	90                   	nop

c0016d7c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016d7c:	55                   	push   ebp
c0016d7d:	57                   	push   edi
c0016d7e:	56                   	push   esi
c0016d7f:	53                   	push   ebx
c0016d80:	83 ec 28             	sub    esp,0x28
c0016d83:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016d87:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016d8b:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016d8f:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016d93:	c1 e7 08             	shl    edi,0x8
c0016d96:	01 c7                	add    edi,eax
c0016d98:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016d9c:	c1 e0 08             	shl    eax,0x8
c0016d9f:	01 d0                	add    eax,edx
c0016da1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016da5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016da9:	0f af c7             	imul   eax,edi
c0016dac:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016db3:	50                   	push   eax
c0016db4:	e8 a1 88 ff ff       	call   c000f65a <malloc>
c0016db9:	83 c4 10             	add    esp,0x10
c0016dbc:	89 c5                	mov    ebp,eax
c0016dbe:	85 c0                	test   eax,eax
c0016dc0:	75 15                	jne    c0016dd7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016dc2:	83 ec 0c             	sub    esp,0xc
c0016dc5:	68 05 a1 02 c0       	push   0xc002a105
c0016dca:	e8 5a bb ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0016dcf:	83 c4 10             	add    esp,0x10
c0016dd2:	e9 1c 01 00 00       	jmp    c0016ef3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016dd7:	be 12 00 00 00       	mov    esi,0x12
c0016ddc:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016de0:	74 11                	je     c0016df3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016de2:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016de6:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016dea:	c1 fe 03             	sar    esi,0x3
c0016ded:	0f af f0             	imul   esi,eax
c0016df0:	83 c6 12             	add    esi,0x12
c0016df3:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016df7:	74 04                	je     c0016dfd <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016df9:	85 ff                	test   edi,edi
c0016dfb:	75 12                	jne    c0016e0f <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016dfd:	83 ec 0c             	sub    esp,0xc
c0016e00:	68 1c a1 02 c0       	push   0xc002a11c
c0016e05:	e8 1f bb ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0016e0a:	e9 ce 00 00 00       	jmp    c0016edd <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016e0f:	52                   	push   edx
c0016e10:	52                   	push   edx
c0016e11:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016e15:	50                   	push   eax
c0016e16:	68 31 a1 02 c0       	push   0xc002a131
c0016e1b:	e8 09 bb ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0016e20:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016e24:	83 c4 10             	add    esp,0x10
c0016e27:	80 fa 02             	cmp    dl,0x2
c0016e2a:	0f 85 98 00 00 00    	jne    c0016ec8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016e30:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016e35:	75 10                	jne    c0016e47 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016e37:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016e3b:	75 0a                	jne    c0016e47 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016e3d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016e40:	83 e8 18             	sub    eax,0x18
c0016e43:	a8 f7                	test   al,0xf7
c0016e45:	74 0a                	je     c0016e51 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016e47:	83 ec 0c             	sub    esp,0xc
c0016e4a:	68 3e a1 02 c0       	push   0xc002a13e
c0016e4f:	eb 7f                	jmp    c0016ed0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016e51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016e59:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016e61:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016e65:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016e6d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016e71:	75 0c                	jne    c0016e7f <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016e73:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016e78:	c1 e0 18             	shl    eax,0x18
c0016e7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016e7f:	41                   	inc    ecx
c0016e80:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016e85:	c1 e2 10             	shl    edx,0x10
c0016e88:	89 d0                	mov    eax,edx
c0016e8a:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016e8f:	c1 e2 08             	shl    edx,0x8
c0016e92:	09 c2                	or     edx,eax
c0016e94:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016e98:	09 c2                	or     edx,eax
c0016e9a:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016e9e:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016ea2:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016ea6:	c1 f8 03             	sar    eax,0x3
c0016ea9:	01 c6                	add    esi,eax
c0016eab:	89 c8                	mov    eax,ecx
c0016ead:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016eb1:	39 c7                	cmp    edi,eax
c0016eb3:	7f b0                	jg     c0016e65 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016eb5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016eb9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016ebd:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016ec0:	7e 22                	jle    c0016ee4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016ec2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016ec6:	eb 99                	jmp    c0016e61 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016ec8:	50                   	push   eax
c0016ec9:	50                   	push   eax
c0016eca:	52                   	push   edx
c0016ecb:	68 4c a1 02 c0       	push   0xc002a14c
c0016ed0:	e8 54 ba ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0016ed5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016ed8:	e8 8d 87 ff ff       	call   c000f66a <free>
c0016edd:	83 c4 10             	add    esp,0x10
c0016ee0:	31 ed                	xor    ebp,ebp
c0016ee2:	eb 0f                	jmp    c0016ef3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016ee4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016ee8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016eeb:	89 38                	mov    DWORD PTR [eax],edi
c0016eed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016ef1:	89 08                	mov    DWORD PTR [eax],ecx
c0016ef3:	83 c4 1c             	add    esp,0x1c
c0016ef6:	89 e8                	mov    eax,ebp
c0016ef8:	5b                   	pop    ebx
c0016ef9:	5e                   	pop    esi
c0016efa:	5f                   	pop    edi
c0016efb:	5d                   	pop    ebp
c0016efc:	c3                   	ret    
c0016efd:	90                   	nop

c0016efe <Video::putTGA(int, int, unsigned char*, int)>:
c0016efe:	55                   	push   ebp
c0016eff:	57                   	push   edi
c0016f00:	56                   	push   esi
c0016f01:	53                   	push   ebx
c0016f02:	83 ec 28             	sub    esp,0x28
c0016f05:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016f09:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016f0d:	50                   	push   eax
c0016f0e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016f12:	50                   	push   eax
c0016f13:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016f17:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016f1b:	56                   	push   esi
c0016f1c:	e8 5b fe ff ff       	call   c0016d7c <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016f21:	83 c4 20             	add    esp,0x20
c0016f24:	85 c0                	test   eax,eax
c0016f26:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016f2a:	74 35                	je     c0016f61 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016f2c:	89 c7                	mov    edi,eax
c0016f2e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f32:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016f36:	39 d8                	cmp    eax,ebx
c0016f38:	7e 27                	jle    c0016f61 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016f3a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016f3e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f42:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016f46:	39 e8                	cmp    eax,ebp
c0016f48:	7e 14                	jle    c0016f5e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016f4a:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f4c:	83 c7 04             	add    edi,0x4
c0016f4f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016f52:	53                   	push   ebx
c0016f53:	55                   	push   ebp
c0016f54:	45                   	inc    ebp
c0016f55:	56                   	push   esi
c0016f56:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f59:	83 c4 10             	add    esp,0x10
c0016f5c:	eb e0                	jmp    c0016f3e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016f5e:	43                   	inc    ebx
c0016f5f:	eb cd                	jmp    c0016f2e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016f61:	83 c4 1c             	add    esp,0x1c
c0016f64:	5b                   	pop    ebx
c0016f65:	5e                   	pop    esi
c0016f66:	5f                   	pop    edi
c0016f67:	5d                   	pop    ebp
c0016f68:	c3                   	ret    
c0016f69:	90                   	nop

c0016f6a <ACPI::close(int, int, void*)>:
c0016f6a:	83 ec 1c             	sub    esp,0x1c
c0016f6d:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016f75:	74 0a                	je     c0016f81 <ACPI::close(int, int, void*)+0x17>
c0016f77:	b8 00 00 00 00       	mov    eax,0x0
c0016f7c:	e9 9a 00 00 00       	jmp    c001701b <ACPI::close(int, int, void*)+0xb1>
c0016f81:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f86:	75 37                	jne    c0016fbf <ACPI::close(int, int, void*)+0x55>
c0016f88:	83 ec 0c             	sub    esp,0xc
c0016f8b:	68 a8 a1 02 c0       	push   0xc002a1a8
c0016f90:	e8 94 b9 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0016f95:	83 c4 10             	add    esp,0x10
c0016f98:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0016f9d:	85 c0                	test   eax,eax
c0016f9f:	74 07                	je     c0016fa8 <ACPI::close(int, int, void*)+0x3e>
c0016fa1:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c0016fa6:	ff d0                	call   eax
c0016fa8:	83 ec 0c             	sub    esp,0xc
c0016fab:	68 d8 a2 02 c0       	push   0xc002a2d8
c0016fb0:	e8 ca 2c 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c0016fb5:	83 c4 10             	add    esp,0x10
c0016fb8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016fbd:	eb 5c                	jmp    c001701b <ACPI::close(int, int, void*)+0xb1>
c0016fbf:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016fc4:	75 50                	jne    c0017016 <ACPI::close(int, int, void*)+0xac>
c0016fc6:	a1 84 d7 02 c0       	mov    eax,ds:0xc002d784
c0016fcb:	85 c0                	test   eax,eax
c0016fcd:	74 07                	je     c0016fd6 <ACPI::close(int, int, void*)+0x6c>
c0016fcf:	a1 84 d7 02 c0       	mov    eax,ds:0xc002d784
c0016fd4:	ff d0                	call   eax
c0016fd6:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016fdb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016fe0:	83 e0 02             	and    eax,0x2
c0016fe3:	74 1c                	je     c0017001 <ACPI::close(int, int, void*)+0x97>
c0016fe5:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016fec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ff0:	89 c2                	mov    edx,eax
c0016ff2:	ec                   	in     al,dx
c0016ff3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016ff7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016ffb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016fff:	eb da                	jmp    c0016fdb <ACPI::close(int, int, void*)+0x71>
c0017001:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017008:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001700d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017011:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017015:	ee                   	out    dx,al
c0017016:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001701b:	83 c4 1c             	add    esp,0x1c
c001701e:	c3                   	ret    

c001701f <findRSDP()>:
c001701f:	83 ec 1c             	sub    esp,0x1c
c0017022:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c0017027:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001702d:	83 e0 04             	and    eax,0x4
c0017030:	84 c0                	test   al,al
c0017032:	75 07                	jne    c001703b <findRSDP()+0x1c>
c0017034:	b8 00 00 00 00       	mov    eax,0x0
c0017039:	eb 6a                	jmp    c00170a5 <findRSDP()+0x86>
c001703b:	a1 30 d1 02 c0       	mov    eax,ds:0xc002d130
c0017040:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017045:	7f 1b                	jg     c0017062 <findRSDP()+0x43>
c0017047:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c001704c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017052:	83 e2 fb             	and    edx,0xfffffffb
c0017055:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001705b:	b8 00 00 00 00       	mov    eax,0x0
c0017060:	eb 43                	jmp    c00170a5 <findRSDP()+0x86>
c0017062:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001706a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017072:	77 2c                	ja     c00170a0 <findRSDP()+0x81>
c0017074:	83 ec 04             	sub    esp,0x4
c0017077:	6a 08                	push   0x8
c0017079:	68 b5 a1 02 c0       	push   0xc002a1b5
c001707e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017082:	e8 b6 95 fe ff       	call   c000063d <memcmp>
c0017087:	83 c4 10             	add    esp,0x10
c001708a:	85 c0                	test   eax,eax
c001708c:	0f 94 c0             	sete   al
c001708f:	84 c0                	test   al,al
c0017091:	74 06                	je     c0017099 <findRSDP()+0x7a>
c0017093:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017097:	eb 0c                	jmp    c00170a5 <findRSDP()+0x86>
c0017099:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001709e:	eb ca                	jmp    c001706a <findRSDP()+0x4b>
c00170a0:	b8 00 00 00 00       	mov    eax,0x0
c00170a5:	83 c4 1c             	add    esp,0x1c
c00170a8:	c3                   	ret    

c00170a9 <loadACPITables(unsigned char*)>:
c00170a9:	56                   	push   esi
c00170aa:	53                   	push   ebx
c00170ab:	83 ec 44             	sub    esp,0x44
c00170ae:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c00170b3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00170b9:	83 e0 04             	and    eax,0x4
c00170bc:	84 c0                	test   al,al
c00170be:	0f 84 05 02 00 00    	je     c00172c9 <loadACPITables(unsigned char*)+0x220>
c00170c4:	a0 a0 d9 02 c0       	mov    al,ds:0xc002d9a0
c00170c9:	84 c0                	test   al,al
c00170cb:	74 75                	je     c0017142 <loadACPITables(unsigned char*)+0x99>
c00170cd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00170d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00170d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00170d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00170dc:	83 e8 24             	sub    eax,0x24
c00170df:	c1 e8 03             	shr    eax,0x3
c00170e2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00170e6:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00170ee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00170f2:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00170f6:	0f 8d b2 00 00 00    	jge    c00171ae <loadACPITables(unsigned char*)+0x105>
c00170fc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017100:	83 c0 24             	add    eax,0x24
c0017103:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017107:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001710b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001710f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017113:	c1 e0 03             	shl    eax,0x3
c0017116:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c001711a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001711e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017121:	8b 00                	mov    eax,DWORD PTR [eax]
c0017123:	89 c1                	mov    ecx,eax
c0017125:	a1 8c d7 02 c0       	mov    eax,ds:0xc002d78c
c001712a:	8d 50 01             	lea    edx,[eax+0x1]
c001712d:	89 15 8c d7 02 c0    	mov    DWORD PTR ds:0xc002d78c,edx
c0017133:	89 ca                	mov    edx,ecx
c0017135:	89 14 c5 a4 d7 02 c0 	mov    DWORD PTR [eax*8-0x3ffd285c],edx
c001713c:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017140:	eb ac                	jmp    c00170ee <loadACPITables(unsigned char*)+0x45>
c0017142:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017146:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001714a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001714e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017151:	83 e8 24             	sub    eax,0x24
c0017154:	c1 e8 02             	shr    eax,0x2
c0017157:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001715b:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017163:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017167:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c001716b:	7d 41                	jge    c00171ae <loadACPITables(unsigned char*)+0x105>
c001716d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017171:	83 c0 24             	add    eax,0x24
c0017174:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017178:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001717c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017180:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017184:	c1 e0 02             	shl    eax,0x2
c0017187:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c001718b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001718f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017191:	a1 8c d7 02 c0       	mov    eax,ds:0xc002d78c
c0017196:	8d 50 01             	lea    edx,[eax+0x1]
c0017199:	89 15 8c d7 02 c0    	mov    DWORD PTR ds:0xc002d78c,edx
c001719f:	89 ca                	mov    edx,ecx
c00171a1:	89 14 c5 a4 d7 02 c0 	mov    DWORD PTR [eax*8-0x3ffd285c],edx
c00171a8:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00171ac:	eb b5                	jmp    c0017163 <loadACPITables(unsigned char*)+0xba>
c00171ae:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00171b6:	a1 8c d7 02 c0       	mov    eax,ds:0xc002d78c
c00171bb:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c00171bf:	0f 8d 05 01 00 00    	jge    c00172ca <loadACPITables(unsigned char*)+0x221>
c00171c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171c9:	8b 04 c5 a4 d7 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd285c]
c00171d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00171d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171e0:	25 ff 0f 00 00       	and    eax,0xfff
c00171e5:	89 c6                	mov    esi,eax
c00171e7:	e8 dd a8 ff ff       	call   c0011ac9 <Virt::getAKernelVAS()>
c00171ec:	89 c3                	mov    ebx,eax
c00171ee:	83 ec 0c             	sub    esp,0xc
c00171f1:	6a 01                	push   0x1
c00171f3:	e8 41 a7 ff ff       	call   c0011939 <Virt::allocateKernelVirtualPages(int)>
c00171f8:	83 c4 10             	add    esp,0x10
c00171fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00171ff:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017205:	83 ec 0c             	sub    esp,0xc
c0017208:	6a 01                	push   0x1
c001720a:	6a 01                	push   0x1
c001720c:	50                   	push   eax
c001720d:	52                   	push   edx
c001720e:	53                   	push   ebx
c001720f:	e8 e4 b0 ff ff       	call   c00122f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017214:	83 c4 20             	add    esp,0x20
c0017217:	09 f0                	or     eax,esi
c0017219:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001721d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017221:	c1 e0 03             	shl    eax,0x3
c0017224:	05 a0 d7 02 c0       	add    eax,0xc002d7a0
c0017229:	83 ec 04             	sub    esp,0x4
c001722c:	6a 04                	push   0x4
c001722e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017232:	50                   	push   eax
c0017233:	e8 68 94 fe ff       	call   c00006a0 <memcpy>
c0017238:	83 c4 10             	add    esp,0x10
c001723b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001723f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017242:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017246:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001724a:	05 00 10 00 00       	add    eax,0x1000
c001724f:	c1 e8 0c             	shr    eax,0xc
c0017252:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001725a:	89 04 24             	mov    DWORD PTR [esp],eax
c001725d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017261:	25 ff 0f 00 00       	and    eax,0xfff
c0017266:	89 c6                	mov    esi,eax
c0017268:	e8 5c a8 ff ff       	call   c0011ac9 <Virt::getAKernelVAS()>
c001726d:	89 c3                	mov    ebx,eax
c001726f:	83 ec 0c             	sub    esp,0xc
c0017272:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017276:	e8 be a6 ff ff       	call   c0011939 <Virt::allocateKernelVirtualPages(int)>
c001727b:	83 c4 10             	add    esp,0x10
c001727e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017282:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017288:	83 ec 0c             	sub    esp,0xc
c001728b:	6a 01                	push   0x1
c001728d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017291:	50                   	push   eax
c0017292:	52                   	push   edx
c0017293:	53                   	push   ebx
c0017294:	e8 5f b0 ff ff       	call   c00122f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017299:	83 c4 20             	add    esp,0x20
c001729c:	09 f0                	or     eax,esi
c001729e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00172a2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00172a5:	83 ec 0c             	sub    esp,0xc
c00172a8:	50                   	push   eax
c00172a9:	e8 ef a9 ff ff       	call   c0011c9d <Virt::freeKernelVirtualPages(unsigned long)>
c00172ae:	83 c4 10             	add    esp,0x10
c00172b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00172b9:	89 14 c5 a4 d7 02 c0 	mov    DWORD PTR [eax*8-0x3ffd285c],edx
c00172c0:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00172c4:	e9 ed fe ff ff       	jmp    c00171b6 <loadACPITables(unsigned char*)+0x10d>
c00172c9:	90                   	nop
c00172ca:	83 c4 44             	add    esp,0x44
c00172cd:	5b                   	pop    ebx
c00172ce:	5e                   	pop    esi
c00172cf:	c3                   	ret    

c00172d0 <findRSDT(unsigned char*)>:
c00172d0:	56                   	push   esi
c00172d1:	53                   	push   ebx
c00172d2:	83 ec 44             	sub    esp,0x44
c00172d5:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c00172da:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00172e0:	83 e0 04             	and    eax,0x4
c00172e3:	84 c0                	test   al,al
c00172e5:	75 0a                	jne    c00172f1 <findRSDT(unsigned char*)+0x21>
c00172e7:	b8 00 00 00 00       	mov    eax,0x0
c00172ec:	e9 f7 00 00 00       	jmp    c00173e8 <findRSDT(unsigned char*)+0x118>
c00172f1:	83 ec 04             	sub    esp,0x4
c00172f4:	6a 24                	push   0x24
c00172f6:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00172fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172fe:	50                   	push   eax
c00172ff:	e8 9c 93 fe ff       	call   c00006a0 <memcpy>
c0017304:	83 c4 10             	add    esp,0x10
c0017307:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001730b:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001730f:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017317:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001731b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001731f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017323:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017327:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001732b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001732f:	25 ff 0f 00 00       	and    eax,0xfff
c0017334:	89 c6                	mov    esi,eax
c0017336:	e8 8e a7 ff ff       	call   c0011ac9 <Virt::getAKernelVAS()>
c001733b:	89 c3                	mov    ebx,eax
c001733d:	83 ec 0c             	sub    esp,0xc
c0017340:	6a 02                	push   0x2
c0017342:	e8 f2 a5 ff ff       	call   c0011939 <Virt::allocateKernelVirtualPages(int)>
c0017347:	83 c4 10             	add    esp,0x10
c001734a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001734e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017354:	83 ec 0c             	sub    esp,0xc
c0017357:	6a 01                	push   0x1
c0017359:	6a 02                	push   0x2
c001735b:	50                   	push   eax
c001735c:	52                   	push   edx
c001735d:	53                   	push   ebx
c001735e:	e8 95 af ff ff       	call   c00122f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017363:	83 c4 20             	add    esp,0x20
c0017366:	09 f0                	or     eax,esi
c0017368:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001736c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017370:	25 ff 0f 00 00       	and    eax,0xfff
c0017375:	89 c6                	mov    esi,eax
c0017377:	e8 4d a7 ff ff       	call   c0011ac9 <Virt::getAKernelVAS()>
c001737c:	89 c3                	mov    ebx,eax
c001737e:	83 ec 0c             	sub    esp,0xc
c0017381:	6a 02                	push   0x2
c0017383:	e8 b1 a5 ff ff       	call   c0011939 <Virt::allocateKernelVirtualPages(int)>
c0017388:	83 c4 10             	add    esp,0x10
c001738b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001738f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017395:	83 ec 0c             	sub    esp,0xc
c0017398:	6a 01                	push   0x1
c001739a:	6a 02                	push   0x2
c001739c:	50                   	push   eax
c001739d:	52                   	push   edx
c001739e:	53                   	push   ebx
c001739f:	e8 54 af ff ff       	call   c00122f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00173a4:	83 c4 20             	add    esp,0x20
c00173a7:	09 f0                	or     eax,esi
c00173a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00173ad:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00173b2:	75 11                	jne    c00173c5 <findRSDT(unsigned char*)+0xf5>
c00173b4:	c6 05 a0 d9 02 c0 00 	mov    BYTE PTR ds:0xc002d9a0,0x0
c00173bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173bf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00173c3:	eb 1f                	jmp    c00173e4 <findRSDT(unsigned char*)+0x114>
c00173c5:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00173ca:	75 11                	jne    c00173dd <findRSDT(unsigned char*)+0x10d>
c00173cc:	c6 05 a0 d9 02 c0 01 	mov    BYTE PTR ds:0xc002d9a0,0x1
c00173d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173d7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00173db:	eb 07                	jmp    c00173e4 <findRSDT(unsigned char*)+0x114>
c00173dd:	b8 00 00 00 00       	mov    eax,0x0
c00173e2:	eb 04                	jmp    c00173e8 <findRSDT(unsigned char*)+0x118>
c00173e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173e8:	83 c4 44             	add    esp,0x44
c00173eb:	5b                   	pop    ebx
c00173ec:	5e                   	pop    esi
c00173ed:	c3                   	ret    

c00173ee <findDataTable(unsigned char*, char*)>:
c00173ee:	83 ec 1c             	sub    esp,0x1c
c00173f1:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c00173f6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00173fc:	83 e0 04             	and    eax,0x4
c00173ff:	84 c0                	test   al,al
c0017401:	75 07                	jne    c001740a <findDataTable(unsigned char*, char*)+0x1c>
c0017403:	b8 00 00 00 00       	mov    eax,0x0
c0017408:	eb 7c                	jmp    c0017486 <findDataTable(unsigned char*, char*)+0x98>
c001740a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017412:	a1 8c d7 02 c0       	mov    eax,ds:0xc002d78c
c0017417:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001741b:	7d 3a                	jge    c0017457 <findDataTable(unsigned char*, char*)+0x69>
c001741d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017421:	c1 e0 03             	shl    eax,0x3
c0017424:	05 a0 d7 02 c0       	add    eax,0xc002d7a0
c0017429:	83 ec 04             	sub    esp,0x4
c001742c:	6a 04                	push   0x4
c001742e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017432:	50                   	push   eax
c0017433:	e8 05 92 fe ff       	call   c000063d <memcmp>
c0017438:	83 c4 10             	add    esp,0x10
c001743b:	85 c0                	test   eax,eax
c001743d:	0f 94 c0             	sete   al
c0017440:	84 c0                	test   al,al
c0017442:	74 0d                	je     c0017451 <findDataTable(unsigned char*, char*)+0x63>
c0017444:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017448:	8b 04 c5 a4 d7 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd285c]
c001744f:	eb 35                	jmp    c0017486 <findDataTable(unsigned char*, char*)+0x98>
c0017451:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017455:	eb bb                	jmp    c0017412 <findDataTable(unsigned char*, char*)+0x24>
c0017457:	a0 a0 d9 02 c0       	mov    al,ds:0xc002d9a0
c001745c:	84 c0                	test   al,al
c001745e:	74 07                	je     c0017467 <findDataTable(unsigned char*, char*)+0x79>
c0017460:	b8 58 00 00 00       	mov    eax,0x58
c0017465:	eb 05                	jmp    c001746c <findDataTable(unsigned char*, char*)+0x7e>
c0017467:	b8 52 00 00 00       	mov    eax,0x52
c001746c:	83 ec 04             	sub    esp,0x4
c001746f:	50                   	push   eax
c0017470:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017474:	68 fc a2 02 c0       	push   0xc002a2fc
c0017479:	e8 ab b4 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001747e:	83 c4 10             	add    esp,0x10
c0017481:	b8 00 00 00 00       	mov    eax,0x0
c0017486:	83 c4 1c             	add    esp,0x1c
c0017489:	c3                   	ret    

c001748a <scanMADT()>:
c001748a:	53                   	push   ebx
c001748b:	83 ec 38             	sub    esp,0x38
c001748e:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c0017493:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017499:	83 e0 04             	and    eax,0x4
c001749c:	84 c0                	test   al,al
c001749e:	0f 84 63 04 00 00    	je     c0017907 <scanMADT()+0x47d>
c00174a4:	e8 76 fb ff ff       	call   c001701f <findRSDP()>
c00174a9:	a3 ac d9 02 c0       	mov    ds:0xc002d9ac,eax
c00174ae:	a1 ac d9 02 c0       	mov    eax,ds:0xc002d9ac
c00174b3:	85 c0                	test   eax,eax
c00174b5:	75 19                	jne    c00174d0 <scanMADT()+0x46>
c00174b7:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c00174bc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00174c2:	83 e2 fb             	and    edx,0xfffffffb
c00174c5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00174cb:	e9 3b 04 00 00       	jmp    c001790b <scanMADT()+0x481>
c00174d0:	a1 ac d9 02 c0       	mov    eax,ds:0xc002d9ac
c00174d5:	83 ec 0c             	sub    esp,0xc
c00174d8:	50                   	push   eax
c00174d9:	e8 f2 fd ff ff       	call   c00172d0 <findRSDT(unsigned char*)>
c00174de:	83 c4 10             	add    esp,0x10
c00174e1:	a3 a8 d9 02 c0       	mov    ds:0xc002d9a8,eax
c00174e6:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c00174eb:	85 c0                	test   eax,eax
c00174ed:	75 19                	jne    c0017508 <scanMADT()+0x7e>
c00174ef:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c00174f4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00174fa:	83 e2 fb             	and    edx,0xfffffffb
c00174fd:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017503:	e9 03 04 00 00       	jmp    c001790b <scanMADT()+0x481>
c0017508:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c001750d:	83 ec 0c             	sub    esp,0xc
c0017510:	50                   	push   eax
c0017511:	e8 93 fb ff ff       	call   c00170a9 <loadACPITables(unsigned char*)>
c0017516:	83 c4 10             	add    esp,0x10
c0017519:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c001751e:	83 ec 08             	sub    esp,0x8
c0017521:	68 be a1 02 c0       	push   0xc002a1be
c0017526:	50                   	push   eax
c0017527:	e8 c2 fe ff ff       	call   c00173ee <findDataTable(unsigned char*, char*)>
c001752c:	83 c4 10             	add    esp,0x10
c001752f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017533:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017538:	75 19                	jne    c0017553 <scanMADT()+0xc9>
c001753a:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c001753f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017545:	83 e2 fe             	and    edx,0xfffffffe
c0017548:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001754e:	e9 b8 03 00 00       	jmp    c001790b <scanMADT()+0x481>
c0017553:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001755b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001755f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017562:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017566:	0f 87 9f 03 00 00    	ja     c001790b <scanMADT()+0x481>
c001756c:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017574:	0f 87 91 03 00 00    	ja     c001790b <scanMADT()+0x481>
c001757a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001757e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017582:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017586:	8d 50 01             	lea    edx,[eax+0x1]
c0017589:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001758d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017591:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017595:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017599:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001759d:	8d 50 01             	lea    edx,[eax+0x1]
c00175a0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175a8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00175ac:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00175b0:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00175b5:	0f 86 4f 03 00 00    	jbe    c001790a <scanMADT()+0x480>
c00175bb:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00175c0:	75 57                	jne    c0017619 <scanMADT()+0x18f>
c00175c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175c6:	8d 50 01             	lea    edx,[eax+0x1]
c00175c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175cd:	8a 15 a0 db 02 c0    	mov    dl,BYTE PTR ds:0xc002dba0
c00175d3:	0f b6 d2             	movzx  edx,dl
c00175d6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00175da:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00175de:	88 82 e0 db 02 c0    	mov    BYTE PTR [edx-0x3ffd2420],al
c00175e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175e8:	8d 50 01             	lea    edx,[eax+0x1]
c00175eb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175ef:	8a 15 a0 db 02 c0    	mov    dl,BYTE PTR ds:0xc002dba0
c00175f5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00175f8:	88 0d a0 db 02 c0    	mov    BYTE PTR ds:0xc002dba0,cl
c00175fe:	0f b6 d2             	movzx  edx,dl
c0017601:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017605:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017609:	88 82 c0 db 02 c0    	mov    BYTE PTR [edx-0x3ffd2440],al
c001760f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017614:	e9 da 02 00 00       	jmp    c00178f3 <scanMADT()+0x469>
c0017619:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c001761e:	0f 85 14 01 00 00    	jne    c0017738 <scanMADT()+0x2ae>
c0017624:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017628:	8d 50 01             	lea    edx,[eax+0x1]
c001762b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001762f:	8a 15 60 da 02 c0    	mov    dl,BYTE PTR ds:0xc002da60
c0017635:	0f b6 d2             	movzx  edx,dl
c0017638:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001763c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017640:	88 82 80 da 02 c0    	mov    BYTE PTR [edx-0x3ffd2580],al
c0017646:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001764a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001764e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017652:	01 d0                	add    eax,edx
c0017654:	83 c0 2c             	add    eax,0x2c
c0017657:	8a 00                	mov    al,BYTE PTR [eax]
c0017659:	0f b6 d0             	movzx  edx,al
c001765c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017660:	8d 48 01             	lea    ecx,[eax+0x1]
c0017663:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017667:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001766b:	0f b6 c0             	movzx  eax,al
c001766e:	c1 e0 08             	shl    eax,0x8
c0017671:	89 d1                	mov    ecx,edx
c0017673:	09 c1                	or     ecx,eax
c0017675:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017679:	8d 50 02             	lea    edx,[eax+0x2]
c001767c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017680:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017684:	0f b6 c0             	movzx  eax,al
c0017687:	c1 e0 10             	shl    eax,0x10
c001768a:	09 c1                	or     ecx,eax
c001768c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017690:	8d 50 03             	lea    edx,[eax+0x3]
c0017693:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017697:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001769b:	0f b6 c0             	movzx  eax,al
c001769e:	c1 e0 18             	shl    eax,0x18
c00176a1:	09 c1                	or     ecx,eax
c00176a3:	89 ca                	mov    edx,ecx
c00176a5:	a0 60 da 02 c0       	mov    al,ds:0xc002da60
c00176aa:	0f b6 c0             	movzx  eax,al
c00176ad:	89 14 85 a0 da 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2560],edx
c00176b4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00176b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176c1:	01 d0                	add    eax,edx
c00176c3:	83 c0 2c             	add    eax,0x2c
c00176c6:	8a 00                	mov    al,BYTE PTR [eax]
c00176c8:	0f b6 d0             	movzx  edx,al
c00176cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176cf:	8d 48 01             	lea    ecx,[eax+0x1]
c00176d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176d6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00176da:	0f b6 c0             	movzx  eax,al
c00176dd:	c1 e0 08             	shl    eax,0x8
c00176e0:	89 d1                	mov    ecx,edx
c00176e2:	09 c1                	or     ecx,eax
c00176e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176e8:	8d 50 02             	lea    edx,[eax+0x2]
c00176eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176ef:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00176f3:	0f b6 c0             	movzx  eax,al
c00176f6:	c1 e0 10             	shl    eax,0x10
c00176f9:	09 c1                	or     ecx,eax
c00176fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176ff:	8d 50 03             	lea    edx,[eax+0x3]
c0017702:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017706:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001770a:	0f b6 c0             	movzx  eax,al
c001770d:	c1 e0 18             	shl    eax,0x18
c0017710:	09 c1                	or     ecx,eax
c0017712:	89 ca                	mov    edx,ecx
c0017714:	a0 60 da 02 c0       	mov    al,ds:0xc002da60
c0017719:	0f b6 c0             	movzx  eax,al
c001771c:	89 14 85 20 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd24e0],edx
c0017723:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017728:	a0 60 da 02 c0       	mov    al,ds:0xc002da60
c001772d:	40                   	inc    eax
c001772e:	a2 60 da 02 c0       	mov    ds:0xc002da60,al
c0017733:	e9 bb 01 00 00       	jmp    c00178f3 <scanMADT()+0x469>
c0017738:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001773d:	0f 85 e9 00 00 00    	jne    c001782c <scanMADT()+0x3a2>
c0017743:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017747:	8d 50 01             	lea    edx,[eax+0x1]
c001774a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001774e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017752:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017756:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001775a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001775e:	8d 50 01             	lea    edx,[eax+0x1]
c0017761:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017765:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017769:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001776d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017771:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017775:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017779:	01 d0                	add    eax,edx
c001777b:	83 c0 2c             	add    eax,0x2c
c001777e:	8a 00                	mov    al,BYTE PTR [eax]
c0017780:	0f b6 d0             	movzx  edx,al
c0017783:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017787:	8d 48 01             	lea    ecx,[eax+0x1]
c001778a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001778e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017792:	0f b6 c0             	movzx  eax,al
c0017795:	c1 e0 08             	shl    eax,0x8
c0017798:	89 d1                	mov    ecx,edx
c001779a:	09 c1                	or     ecx,eax
c001779c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177a0:	8d 50 02             	lea    edx,[eax+0x2]
c00177a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177a7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00177ab:	0f b6 c0             	movzx  eax,al
c00177ae:	c1 e0 10             	shl    eax,0x10
c00177b1:	09 c1                	or     ecx,eax
c00177b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177b7:	8d 50 03             	lea    edx,[eax+0x3]
c00177ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177be:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00177c2:	0f b6 c0             	movzx  eax,al
c00177c5:	c1 e0 18             	shl    eax,0x18
c00177c8:	09 c8                	or     eax,ecx
c00177ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00177ce:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00177d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177db:	01 d0                	add    eax,edx
c00177dd:	83 c0 2c             	add    eax,0x2c
c00177e0:	8a 00                	mov    al,BYTE PTR [eax]
c00177e2:	0f b6 c0             	movzx  eax,al
c00177e5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00177e9:	8d 4a 01             	lea    ecx,[edx+0x1]
c00177ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177f0:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00177f4:	0f b6 d2             	movzx  edx,dl
c00177f7:	c1 e2 08             	shl    edx,0x8
c00177fa:	09 d0                	or     eax,edx
c00177fc:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017801:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017806:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001780b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001780f:	88 90 40 c3 02 c0    	mov    BYTE PTR [eax-0x3ffd3cc0],dl
c0017815:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001781a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001781f:	66 89 84 12 40 da 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd25c0],ax
c0017827:	e9 c7 00 00 00       	jmp    c00178f3 <scanMADT()+0x469>
c001782c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017831:	0f 85 b0 00 00 00    	jne    c00178e7 <scanMADT()+0x45d>
c0017837:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001783b:	8d 50 01             	lea    edx,[eax+0x1]
c001783e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017842:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017846:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001784a:	0f b6 c0             	movzx  eax,al
c001784d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017851:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017855:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017859:	01 d0                	add    eax,edx
c001785b:	83 c0 2c             	add    eax,0x2c
c001785e:	8a 00                	mov    al,BYTE PTR [eax]
c0017860:	0f b6 d0             	movzx  edx,al
c0017863:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017867:	8d 48 01             	lea    ecx,[eax+0x1]
c001786a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001786e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017872:	0f b6 c0             	movzx  eax,al
c0017875:	c1 e0 08             	shl    eax,0x8
c0017878:	09 d0                	or     eax,edx
c001787a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001787e:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017883:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017887:	8d 50 01             	lea    edx,[eax+0x1]
c001788a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001788e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017892:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017896:	0f b6 c0             	movzx  eax,al
c0017899:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001789d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178a1:	c1 e0 08             	shl    eax,0x8
c00178a4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00178a8:	89 c1                	mov    ecx,eax
c00178aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178ae:	c1 e0 18             	shl    eax,0x18
c00178b1:	89 c3                	mov    ebx,eax
c00178b3:	a1 b0 d9 02 c0       	mov    eax,ds:0xc002d9b0
c00178b8:	8d 50 01             	lea    edx,[eax+0x1]
c00178bb:	89 15 b0 d9 02 c0    	mov    DWORD PTR ds:0xc002d9b0,edx
c00178c1:	09 d9                	or     ecx,ebx
c00178c3:	89 ca                	mov    edx,ecx
c00178c5:	89 14 85 c0 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2640],edx
c00178cc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00178d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00178d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178d8:	68 2c a3 02 c0       	push   0xc002a32c
c00178dd:	e8 47 b0 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00178e2:	83 c4 10             	add    esp,0x10
c00178e5:	eb 0c                	jmp    c00178f3 <scanMADT()+0x469>
c00178e7:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00178ec:	75 05                	jne    c00178f3 <scanMADT()+0x469>
c00178ee:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00178f3:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00178f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00178fc:	01 d0                	add    eax,edx
c00178fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017902:	e9 54 fc ff ff       	jmp    c001755b <scanMADT()+0xd1>
c0017907:	90                   	nop
c0017908:	eb 01                	jmp    c001790b <scanMADT()+0x481>
c001790a:	90                   	nop
c001790b:	83 c4 38             	add    esp,0x38
c001790e:	5b                   	pop    ebx
c001790f:	c3                   	ret    

c0017910 <ACPI::ACPI()>:
c0017910:	83 ec 0c             	sub    esp,0xc
c0017913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017917:	83 ec 08             	sub    esp,0x8
c001791a:	68 c3 a1 02 c0       	push   0xc002a1c3
c001791f:	50                   	push   eax
c0017920:	e8 1b c6 ff ff       	call   c0013f40 <Device::Device(char const*)>
c0017925:	83 c4 10             	add    esp,0x10
c0017928:	ba 74 a4 02 c0       	mov    edx,0xc002a474
c001792d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017931:	89 10                	mov    DWORD PTR [eax],edx
c0017933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017937:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001793e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017942:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001794c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017950:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001795a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001795e:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017969:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017970:	e8 15 fb ff ff       	call   c001748a <scanMADT()>
c0017975:	90                   	nop
c0017976:	83 c4 0c             	add    esp,0xc
c0017979:	c3                   	ret    

c001797a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001797a:	83 ec 2c             	sub    esp,0x2c
c001797d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017981:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017985:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017989:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001798d:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017992:	88 d0                	mov    al,dl
c0017994:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017998:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001799d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00179a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179a9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00179af:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00179b3:	0f 8d 97 00 00 00    	jge    c0017a50 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00179b9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00179c1:	83 c2 2a             	add    edx,0x2a
c00179c4:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00179c8:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00179cd:	75 78                	jne    c0017a47 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00179cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00179d7:	83 c2 2a             	add    edx,0x2a
c00179da:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00179de:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00179e2:	75 63                	jne    c0017a47 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00179e4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00179e9:	74 3a                	je     c0017a25 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00179eb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00179f3:	83 c2 2a             	add    edx,0x2a
c00179f6:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00179fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a01:	39 c2                	cmp    edx,eax
c0017a03:	74 10                	je     c0017a15 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017a05:	83 ec 0c             	sub    esp,0xc
c0017a08:	68 68 a3 02 c0       	push   0xc002a368
c0017a0d:	e8 6d 22 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c0017a12:	83 c4 10             	add    esp,0x10
c0017a15:	83 ec 0c             	sub    esp,0xc
c0017a18:	68 c8 a1 02 c0       	push   0xc002a1c8
c0017a1d:	e8 5d 22 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c0017a22:	83 c4 10             	add    esp,0x10
c0017a25:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017a29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a2d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a31:	83 c2 2a             	add    edx,0x2a
c0017a34:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017a38:	8b 02                	mov    eax,DWORD PTR [edx]
c0017a3a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017a3d:	89 01                	mov    DWORD PTR [ecx],eax
c0017a3f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017a42:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017a47:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017a4b:	e9 55 ff ff ff       	jmp    c00179a5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017a50:	90                   	nop
c0017a51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a55:	83 c4 2c             	add    esp,0x2c
c0017a58:	c2 04 00             	ret    0x4
c0017a5b:	90                   	nop

c0017a5c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017a5c:	83 ec 1c             	sub    esp,0x1c
c0017a5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a63:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017a67:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017a6b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017a70:	88 c8                	mov    al,cl
c0017a72:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017a76:	88 d0                	mov    al,dl
c0017a78:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017a7c:	83 ec 08             	sub    esp,0x8
c0017a7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017a83:	68 d7 a1 02 c0       	push   0xc002a1d7
c0017a88:	e8 9c ae ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0017a8d:	83 c4 10             	add    esp,0x10
c0017a90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a94:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017a9a:	83 c0 2a             	add    eax,0x2a
c0017a9d:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017aa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aa8:	01 d0                	add    eax,edx
c0017aaa:	8d 50 0c             	lea    edx,[eax+0xc]
c0017aad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ab1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017ab7:	83 ec 04             	sub    esp,0x4
c0017aba:	52                   	push   edx
c0017abb:	50                   	push   eax
c0017abc:	68 98 a3 02 c0       	push   0xc002a398
c0017ac1:	e8 63 ae ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0017ac6:	83 c4 10             	add    esp,0x10
c0017ac9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017acd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017ad3:	83 c0 2a             	add    eax,0x2a
c0017ad6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017add:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ae1:	01 d0                	add    eax,edx
c0017ae3:	8d 50 0f             	lea    edx,[eax+0xf]
c0017ae6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aea:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017af0:	83 ec 04             	sub    esp,0x4
c0017af3:	52                   	push   edx
c0017af4:	50                   	push   eax
c0017af5:	68 bc a3 02 c0       	push   0xc002a3bc
c0017afa:	e8 2a ae ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0017aff:	83 c4 10             	add    esp,0x10
c0017b02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b06:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b0c:	83 c0 2a             	add    eax,0x2a
c0017b0f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017b16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b1a:	01 d0                	add    eax,edx
c0017b1c:	8d 50 0c             	lea    edx,[eax+0xc]
c0017b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b23:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b29:	83 ec 04             	sub    esp,0x4
c0017b2c:	52                   	push   edx
c0017b2d:	50                   	push   eax
c0017b2e:	68 e8 a3 02 c0       	push   0xc002a3e8
c0017b33:	e8 f1 ad ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0017b38:	83 c4 10             	add    esp,0x10
c0017b3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b3f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b45:	83 c0 2a             	add    eax,0x2a
c0017b48:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017b4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b53:	01 d0                	add    eax,edx
c0017b55:	8d 50 0e             	lea    edx,[eax+0xe]
c0017b58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b5c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b62:	83 ec 04             	sub    esp,0x4
c0017b65:	52                   	push   edx
c0017b66:	50                   	push   eax
c0017b67:	68 14 a4 02 c0       	push   0xc002a414
c0017b6c:	e8 b8 ad ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0017b71:	83 c4 10             	add    esp,0x10
c0017b74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b78:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b7e:	83 c0 2a             	add    eax,0x2a
c0017b81:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017b88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b8c:	01 d0                	add    eax,edx
c0017b8e:	8d 50 10             	lea    edx,[eax+0x10]
c0017b91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b95:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b9b:	83 ec 04             	sub    esp,0x4
c0017b9e:	52                   	push   edx
c0017b9f:	50                   	push   eax
c0017ba0:	68 40 a4 02 c0       	push   0xc002a440
c0017ba5:	e8 7f ad ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0017baa:	83 c4 10             	add    esp,0x10
c0017bad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bb1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017bb7:	8d 50 01             	lea    edx,[eax+0x1]
c0017bba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bbe:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017bc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bc8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017bce:	3d 00 02 00 00       	cmp    eax,0x200
c0017bd3:	75 10                	jne    c0017be5 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0x189>
c0017bd5:	83 ec 0c             	sub    esp,0xc
c0017bd8:	68 e4 a1 02 c0       	push   0xc002a1e4
c0017bdd:	e8 9d 20 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c0017be2:	83 c4 10             	add    esp,0x10
c0017be5:	90                   	nop
c0017be6:	83 c4 1c             	add    esp,0x1c
c0017be9:	c3                   	ret    

c0017bea <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017bea:	b8 00 00 00 00       	mov    eax,0x0
c0017bef:	c3                   	ret    

c0017bf0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017bf0:	83 ec 1c             	sub    esp,0x1c
c0017bf3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bf7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017bfa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017bfe:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c0017c03:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017c08:	83 ec 08             	sub    esp,0x8
c0017c0b:	52                   	push   edx
c0017c0c:	50                   	push   eax
c0017c0d:	e8 2a 70 ff ff       	call   c000ec3c <Computer::readCMOS(unsigned char)>
c0017c12:	83 c4 10             	add    esp,0x10
c0017c15:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017c19:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c0017c1e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017c23:	83 ec 04             	sub    esp,0x4
c0017c26:	6a 01                	push   0x1
c0017c28:	52                   	push   edx
c0017c29:	50                   	push   eax
c0017c2a:	e8 59 71 ff ff       	call   c000ed88 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017c2f:	83 c4 10             	add    esp,0x10
c0017c32:	90                   	nop
c0017c33:	83 c4 1c             	add    esp,0x1c
c0017c36:	c3                   	ret    
c0017c37:	90                   	nop

c0017c38 <ACPI::open(int, int, void*)>:
c0017c38:	53                   	push   ebx
c0017c39:	83 ec 28             	sub    esp,0x28
c0017c3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c40:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017c47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c4b:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017c52:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c0017c57:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c5d:	83 e0 04             	and    eax,0x4
c0017c60:	84 c0                	test   al,al
c0017c62:	74 47                	je     c0017cab <ACPI::open(int, int, void*)+0x73>
c0017c64:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0017c69:	83 ec 08             	sub    esp,0x8
c0017c6c:	68 01 a2 02 c0       	push   0xc002a201
c0017c71:	50                   	push   eax
c0017c72:	e8 77 f7 ff ff       	call   c00173ee <findDataTable(unsigned char*, char*)>
c0017c77:	83 c4 10             	add    esp,0x10
c0017c7a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017c7e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017c83:	74 26                	je     c0017cab <ACPI::open(int, int, void*)+0x73>
c0017c85:	83 ec 0c             	sub    esp,0xc
c0017c88:	68 06 a2 02 c0       	push   0xc002a206
c0017c8d:	e8 97 ac ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0017c92:	83 c4 10             	add    esp,0x10
c0017c95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c99:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017ca0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ca4:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0017cab:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0017cb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017cb7:	8a 00                	mov    al,BYTE PTR [eax]
c0017cb9:	3c 01                	cmp    al,0x1
c0017cbb:	75 28                	jne    c0017ce5 <ACPI::open(int, int, void*)+0xad>
c0017cbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cc1:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017cc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ccc:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0017cd3:	83 ec 0c             	sub    esp,0xc
c0017cd6:	68 17 a2 02 c0       	push   0xc002a217
c0017cdb:	e8 49 ac ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0017ce0:	83 c4 10             	add    esp,0x10
c0017ce3:	eb 25                	jmp    c0017d0a <ACPI::open(int, int, void*)+0xd2>
c0017ce5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ce9:	8a 00                	mov    al,BYTE PTR [eax]
c0017ceb:	3c 02                	cmp    al,0x2
c0017ced:	75 1b                	jne    c0017d0a <ACPI::open(int, int, void*)+0xd2>
c0017cef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cf3:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017cfa:	83 ec 0c             	sub    esp,0xc
c0017cfd:	68 1f a2 02 c0       	push   0xc002a21f
c0017d02:	e8 22 ac ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0017d07:	83 c4 10             	add    esp,0x10
c0017d0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d0e:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0017d14:	83 f0 01             	xor    eax,0x1
c0017d17:	84 c0                	test   al,al
c0017d19:	74 6a                	je     c0017d85 <ACPI::open(int, int, void*)+0x14d>
c0017d1b:	83 ec 0c             	sub    esp,0xc
c0017d1e:	68 27 a2 02 c0       	push   0xc002a227
c0017d23:	e8 01 ac ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0017d28:	83 c4 10             	add    esp,0x10
c0017d2b:	e8 20 84 fe ff       	call   c0000150 <manualPCIProbe>
c0017d30:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d34:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0017d39:	75 28                	jne    c0017d63 <ACPI::open(int, int, void*)+0x12b>
c0017d3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d3f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017d46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d4a:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0017d51:	83 ec 0c             	sub    esp,0xc
c0017d54:	68 35 a2 02 c0       	push   0xc002a235
c0017d59:	e8 cb ab ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0017d5e:	83 c4 10             	add    esp,0x10
c0017d61:	eb 22                	jmp    c0017d85 <ACPI::open(int, int, void*)+0x14d>
c0017d63:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0017d68:	75 1b                	jne    c0017d85 <ACPI::open(int, int, void*)+0x14d>
c0017d6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d6e:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0017d75:	83 ec 0c             	sub    esp,0xc
c0017d78:	68 3f a2 02 c0       	push   0xc002a23f
c0017d7d:	e8 a7 ab ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0017d82:	83 c4 10             	add    esp,0x10
c0017d85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d89:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0017d8f:	84 c0                	test   al,al
c0017d91:	74 13                	je     c0017da6 <ACPI::open(int, int, void*)+0x16e>
c0017d93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d97:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0017d9d:	83 f0 01             	xor    eax,0x1
c0017da0:	0f b6 c0             	movzx  eax,al
c0017da3:	40                   	inc    eax
c0017da4:	eb 05                	jmp    c0017dab <ACPI::open(int, int, void*)+0x173>
c0017da6:	b8 00 00 00 00       	mov    eax,0x0
c0017dab:	83 ec 08             	sub    esp,0x8
c0017dae:	50                   	push   eax
c0017daf:	68 49 a2 02 c0       	push   0xc002a249
c0017db4:	e8 70 ab ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0017db9:	83 c4 10             	add    esp,0x10
c0017dbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017dc0:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0017dc6:	84 c0                	test   al,al
c0017dc8:	74 67                	je     c0017e31 <ACPI::open(int, int, void*)+0x1f9>
c0017dca:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0017dd2:	83 ec 0c             	sub    esp,0xc
c0017dd5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017dd9:	e8 7c 78 ff ff       	call   c000f65a <malloc>
c0017dde:	83 c4 10             	add    esp,0x10
c0017de1:	89 c3                	mov    ebx,eax
c0017de3:	83 ec 0c             	sub    esp,0xc
c0017de6:	53                   	push   ebx
c0017de7:	e8 46 9f 00 00       	call   c0021d32 <PCI::PCI()>
c0017dec:	83 c4 10             	add    esp,0x10
c0017def:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017df3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017df7:	83 ec 08             	sub    esp,0x8
c0017dfa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017dfe:	50                   	push   eax
c0017dff:	e8 4c bf ff ff       	call   c0013d50 <Device::addChild(Device*)>
c0017e04:	83 c4 10             	add    esp,0x10
c0017e07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e0d:	83 c0 08             	add    eax,0x8
c0017e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e12:	6a 00                	push   0x0
c0017e14:	6a 00                	push   0x0
c0017e16:	6a 00                	push   0x0
c0017e18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e1c:	ff d0                	call   eax
c0017e1e:	83 c4 10             	add    esp,0x10
c0017e21:	83 ec 0c             	sub    esp,0xc
c0017e24:	68 52 a2 02 c0       	push   0xc002a252
c0017e29:	e8 fb aa ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0017e2e:	83 c4 10             	add    esp,0x10
c0017e31:	83 ec 0c             	sub    esp,0xc
c0017e34:	68 5d a2 02 c0       	push   0xc002a25d
c0017e39:	e8 22 43 00 00       	call   c001c160 <Thr::loadKernelSymbolTable(char const*)>
c0017e3e:	83 c4 10             	add    esp,0x10
c0017e41:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c0017e46:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e4c:	83 e0 04             	and    eax,0x4
c0017e4f:	84 c0                	test   al,al
c0017e51:	0f 84 d2 00 00 00    	je     c0017f29 <ACPI::open(int, int, void*)+0x2f1>
c0017e57:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017e5e:	83 ec 0c             	sub    esp,0xc
c0017e61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017e65:	e8 f0 77 ff ff       	call   c000f65a <malloc>
c0017e6a:	83 c4 10             	add    esp,0x10
c0017e6d:	89 c3                	mov    ebx,eax
c0017e6f:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0017e74:	83 ec 04             	sub    esp,0x4
c0017e77:	50                   	push   eax
c0017e78:	68 7b a2 02 c0       	push   0xc002a27b
c0017e7d:	53                   	push   ebx
c0017e7e:	e8 ff af ff ff       	call   c0012e82 <File::File(char const*, Process*)>
c0017e83:	83 c4 10             	add    esp,0x10
c0017e86:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017e8a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e8f:	74 17                	je     c0017ea8 <ACPI::open(int, int, void*)+0x270>
c0017e91:	83 ec 0c             	sub    esp,0xc
c0017e94:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e98:	e8 b7 b2 ff ff       	call   c0013154 <File::exists()>
c0017e9d:	83 c4 10             	add    esp,0x10
c0017ea0:	84 c0                	test   al,al
c0017ea2:	74 04                	je     c0017ea8 <ACPI::open(int, int, void*)+0x270>
c0017ea4:	b0 01                	mov    al,0x1
c0017ea6:	eb 02                	jmp    c0017eaa <ACPI::open(int, int, void*)+0x272>
c0017ea8:	b0 00                	mov    al,0x0
c0017eaa:	84 c0                	test   al,al
c0017eac:	74 22                	je     c0017ed0 <ACPI::open(int, int, void*)+0x298>
c0017eae:	83 ec 08             	sub    esp,0x8
c0017eb1:	6a 01                	push   0x1
c0017eb3:	68 7b a2 02 c0       	push   0xc002a27b
c0017eb8:	e8 fe 4c 00 00       	call   c001cbbb <Thr::loadDLL(char const*, bool)>
c0017ebd:	83 c4 10             	add    esp,0x10
c0017ec0:	83 ec 08             	sub    esp,0x8
c0017ec3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017ec7:	50                   	push   eax
c0017ec8:	e8 fd 4e 00 00       	call   c001cdca <Thr::executeDLL(unsigned long, void*)>
c0017ecd:	83 c4 10             	add    esp,0x10
c0017ed0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017ed5:	74 1e                	je     c0017ef5 <ACPI::open(int, int, void*)+0x2bd>
c0017ed7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017edc:	74 17                	je     c0017ef5 <ACPI::open(int, int, void*)+0x2bd>
c0017ede:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ee2:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ee4:	83 c0 08             	add    eax,0x8
c0017ee7:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ee9:	83 ec 0c             	sub    esp,0xc
c0017eec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ef0:	ff d0                	call   eax
c0017ef2:	83 c4 10             	add    esp,0x10
c0017ef5:	a1 a8 d9 02 c0       	mov    eax,ds:0xc002d9a8
c0017efa:	83 ec 08             	sub    esp,0x8
c0017efd:	68 98 a2 02 c0       	push   0xc002a298
c0017f02:	50                   	push   eax
c0017f03:	e8 e6 f4 ff ff       	call   c00173ee <findDataTable(unsigned char*, char*)>
c0017f08:	83 c4 10             	add    esp,0x10
c0017f0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017f0f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017f14:	74 13                	je     c0017f29 <ACPI::open(int, int, void*)+0x2f1>
c0017f16:	83 ec 08             	sub    esp,0x8
c0017f19:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017f1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017f21:	e8 ca fc ff ff       	call   c0017bf0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017f26:	83 c4 10             	add    esp,0x10
c0017f29:	8b 1d e8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0e8
c0017f2f:	83 ec 08             	sub    esp,0x8
c0017f32:	6a 01                	push   0x1
c0017f34:	68 9d a2 02 c0       	push   0xc002a29d
c0017f39:	e8 7d 4c 00 00       	call   c001cbbb <Thr::loadDLL(char const*, bool)>
c0017f3e:	83 c4 10             	add    esp,0x10
c0017f41:	83 ec 08             	sub    esp,0x8
c0017f44:	53                   	push   ebx
c0017f45:	50                   	push   eax
c0017f46:	e8 7f 4e 00 00       	call   c001cdca <Thr::executeDLL(unsigned long, void*)>
c0017f4b:	83 c4 10             	add    esp,0x10
c0017f4e:	8b 1d e8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0e8
c0017f54:	83 ec 08             	sub    esp,0x8
c0017f57:	6a 01                	push   0x1
c0017f59:	68 ba a2 02 c0       	push   0xc002a2ba
c0017f5e:	e8 58 4c 00 00       	call   c001cbbb <Thr::loadDLL(char const*, bool)>
c0017f63:	83 c4 10             	add    esp,0x10
c0017f66:	83 ec 08             	sub    esp,0x8
c0017f69:	53                   	push   ebx
c0017f6a:	50                   	push   eax
c0017f6b:	e8 5a 4e 00 00       	call   c001cdca <Thr::executeDLL(unsigned long, void*)>
c0017f70:	83 c4 10             	add    esp,0x10
c0017f73:	b8 00 00 00 00       	mov    eax,0x0
c0017f78:	83 c4 28             	add    esp,0x28
c0017f7b:	5b                   	pop    ebx
c0017f7c:	c3                   	ret    
c0017f7d:	90                   	nop

c0017f7e <ACPI::sleep()>:
c0017f7e:	83 ec 0c             	sub    esp,0xc
c0017f81:	a1 80 d7 02 c0       	mov    eax,ds:0xc002d780
c0017f86:	85 c0                	test   eax,eax
c0017f88:	74 07                	je     c0017f91 <ACPI::sleep()+0x13>
c0017f8a:	a1 80 d7 02 c0       	mov    eax,ds:0xc002d780
c0017f8f:	ff d0                	call   eax
c0017f91:	90                   	nop
c0017f92:	83 c4 0c             	add    esp,0xc
c0017f95:	c3                   	ret    

c0017f96 <CPU::close(int, int, void*)>:
c0017f96:	31 c0                	xor    eax,eax
c0017f98:	c3                   	ret    
c0017f99:	90                   	nop

c0017f9a <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017f9a:	55                   	push   ebp
c0017f9b:	57                   	push   edi
c0017f9c:	56                   	push   esi
c0017f9d:	53                   	push   ebx
c0017f9e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017fa2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017fa6:	89 ce                	mov    esi,ecx
c0017fa8:	89 d5                	mov    ebp,edx
c0017faa:	80 f9 04             	cmp    cl,0x4
c0017fad:	75 28                	jne    c0017fd7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017faf:	8d 42 f9             	lea    eax,[edx-0x7]
c0017fb2:	3c 03                	cmp    al,0x3
c0017fb4:	0f 86 63 01 00 00    	jbe    c001811d <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017fba:	80 fa 03             	cmp    dl,0x3
c0017fbd:	0f 84 5a 01 00 00    	je     c001811d <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017fc3:	8d 7a f2             	lea    edi,[edx-0xe]
c0017fc6:	b8 10 c5 02 c0       	mov    eax,0xc002c510
c0017fcb:	89 fb                	mov    ebx,edi
c0017fcd:	80 fb 01             	cmp    bl,0x1
c0017fd0:	77 4e                	ja     c0018020 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017fd2:	e9 52 01 00 00       	jmp    c0018129 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017fd7:	80 f9 05             	cmp    cl,0x5
c0017fda:	75 4d                	jne    c0018029 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017fdc:	b8 20 c5 02 c0       	mov    eax,0xc002c520
c0017fe1:	80 fa 03             	cmp    dl,0x3
c0017fe4:	0f 86 3f 01 00 00    	jbe    c0018129 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017fea:	8d 7a fa             	lea    edi,[edx-0x6]
c0017fed:	b8 30 c5 02 c0       	mov    eax,0xc002c530
c0017ff2:	89 fb                	mov    ebx,edi
c0017ff4:	80 fb 01             	cmp    bl,0x1
c0017ff7:	0f 86 2c 01 00 00    	jbe    c0018129 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ffd:	b8 40 c5 02 c0       	mov    eax,0xc002c540
c0018002:	80 fa 08             	cmp    dl,0x8
c0018005:	0f 84 1e 01 00 00    	je     c0018129 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001800b:	89 d7                	mov    edi,edx
c001800d:	b8 50 c5 02 c0       	mov    eax,0xc002c550
c0018012:	83 e7 fb             	and    edi,0xfffffffb
c0018015:	89 fb                	mov    ebx,edi
c0018017:	80 fb 09             	cmp    bl,0x9
c001801a:	0f 84 09 01 00 00    	je     c0018129 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018020:	31 c0                	xor    eax,eax
c0018022:	89 eb                	mov    ebx,ebp
c0018024:	0f b6 fb             	movzx  edi,bl
c0018027:	eb 30                	jmp    c0018059 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018029:	31 c0                	xor    eax,eax
c001802b:	80 f9 06             	cmp    cl,0x6
c001802e:	75 f2                	jne    c0018022 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018030:	80 fa 0a             	cmp    dl,0xa
c0018033:	77 ed                	ja     c0018022 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018035:	bf de 05 00 00       	mov    edi,0x5de
c001803a:	0f a3 d7             	bt     edi,edx
c001803d:	73 e3                	jae    c0018022 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001803f:	b8 60 c5 02 c0       	mov    eax,0xc002c560
c0018044:	e9 e0 00 00 00       	jmp    c0018129 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018049:	39 c7                	cmp    edi,eax
c001804b:	0f 84 d3 00 00 00    	je     c0018124 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018051:	40                   	inc    eax
c0018052:	3d d0 00 00 00       	cmp    eax,0xd0
c0018057:	74 09                	je     c0018062 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018059:	89 f3                	mov    ebx,esi
c001805b:	80 fb 0f             	cmp    bl,0xf
c001805e:	75 f1                	jne    c0018051 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018060:	eb e7                	jmp    c0018049 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018062:	80 f9 10             	cmp    cl,0x10
c0018065:	75 14                	jne    c001807b <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018067:	8d 42 fc             	lea    eax,[edx-0x4]
c001806a:	83 e0 fb             	and    eax,0xfffffffb
c001806d:	3c 02                	cmp    al,0x2
c001806f:	76 34                	jbe    c00180a5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018071:	b8 8a a7 02 c0       	mov    eax,0xc002a78a
c0018076:	80 fa 02             	cmp    dl,0x2
c0018079:	eb 24                	jmp    c001809f <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001807b:	80 f9 11             	cmp    cl,0x11
c001807e:	75 13                	jne    c0018093 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018080:	b8 8a a7 02 c0       	mov    eax,0xc002a78a
c0018085:	80 fa 03             	cmp    dl,0x3
c0018088:	0f 85 9b 00 00 00    	jne    c0018129 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001808e:	e9 91 00 00 00       	jmp    c0018124 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018093:	80 f9 12             	cmp    cl,0x12
c0018096:	75 14                	jne    c00180ac <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018098:	b8 8a a7 02 c0       	mov    eax,0xc002a78a
c001809d:	fe ca                	dec    dl
c001809f:	0f 85 84 00 00 00    	jne    c0018129 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180a5:	b8 80 c5 02 c0       	mov    eax,0xc002c580
c00180aa:	eb 7d                	jmp    c0018129 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180ac:	80 f9 14             	cmp    cl,0x14
c00180af:	75 12                	jne    c00180c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00180b1:	4a                   	dec    edx
c00180b2:	b8 8a a7 02 c0       	mov    eax,0xc002a78a
c00180b7:	80 fa 01             	cmp    dl,0x1
c00180ba:	77 6d                	ja     c0018129 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180bc:	b8 90 c5 02 c0       	mov    eax,0xc002c590
c00180c1:	eb 66                	jmp    c0018129 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180c3:	80 f9 15             	cmp    cl,0x15
c00180c6:	75 31                	jne    c00180f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00180c8:	b8 a0 c5 02 c0       	mov    eax,0xc002c5a0
c00180cd:	80 fa 01             	cmp    dl,0x1
c00180d0:	74 57                	je     c0018129 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180d2:	b8 8a a7 02 c0       	mov    eax,0xc002a78a
c00180d7:	80 fa 13             	cmp    dl,0x13
c00180da:	76 0c                	jbe    c00180e8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00180dc:	80 fa 30             	cmp    dl,0x30
c00180df:	75 48                	jne    c0018129 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180e1:	b8 c0 c5 02 c0       	mov    eax,0xc002c5c0
c00180e6:	eb 41                	jmp    c0018129 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180e8:	b9 04 00 09 00       	mov    ecx,0x90004
c00180ed:	0f a3 d1             	bt     ecx,edx
c00180f0:	73 37                	jae    c0018129 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180f2:	b8 b0 c5 02 c0       	mov    eax,0xc002c5b0
c00180f7:	eb 30                	jmp    c0018129 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00180f9:	b8 8a a7 02 c0       	mov    eax,0xc002a78a
c00180fe:	80 f9 16             	cmp    cl,0x16
c0018101:	75 26                	jne    c0018129 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018103:	b8 d0 c5 02 c0       	mov    eax,0xc002c5d0
c0018108:	84 d2                	test   dl,dl
c001810a:	74 1d                	je     c0018129 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001810c:	b8 8a a7 02 c0       	mov    eax,0xc002a78a
c0018111:	80 fa 30             	cmp    dl,0x30
c0018114:	75 13                	jne    c0018129 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018116:	b8 e0 c5 02 c0       	mov    eax,0xc002c5e0
c001811b:	eb 0c                	jmp    c0018129 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001811d:	b8 00 c5 02 c0       	mov    eax,0xc002c500
c0018122:	eb 05                	jmp    c0018129 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018124:	b8 70 c5 02 c0       	mov    eax,0xc002c570
c0018129:	5b                   	pop    ebx
c001812a:	5e                   	pop    esi
c001812b:	5f                   	pop    edi
c001812c:	5d                   	pop    ebp
c001812d:	c3                   	ret    

c001812e <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001812e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018132:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018136:	80 f9 04             	cmp    cl,0x4
c0018139:	75 6b                	jne    c00181a6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001813b:	b8 60 c3 02 c0       	mov    eax,0xc002c360
c0018140:	80 fa 01             	cmp    dl,0x1
c0018143:	0f 86 92 02 00 00    	jbe    c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018149:	b8 70 c3 02 c0       	mov    eax,0xc002c370
c001814e:	80 fa 02             	cmp    dl,0x2
c0018151:	0f 84 84 02 00 00    	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018157:	b8 80 c3 02 c0       	mov    eax,0xc002c380
c001815c:	80 fa 03             	cmp    dl,0x3
c001815f:	0f 84 76 02 00 00    	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018165:	b8 90 c3 02 c0       	mov    eax,0xc002c390
c001816a:	80 fa 04             	cmp    dl,0x4
c001816d:	0f 84 68 02 00 00    	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018173:	b8 a0 c3 02 c0       	mov    eax,0xc002c3a0
c0018178:	80 fa 05             	cmp    dl,0x5
c001817b:	0f 84 5a 02 00 00    	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018181:	b8 80 c3 02 c0       	mov    eax,0xc002c380
c0018186:	80 fa 07             	cmp    dl,0x7
c0018189:	0f 84 4c 02 00 00    	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001818f:	83 ea 08             	sub    edx,0x8
c0018192:	b8 8a a7 02 c0       	mov    eax,0xc002a78a
c0018197:	80 fa 01             	cmp    dl,0x1
c001819a:	0f 87 3b 02 00 00    	ja     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181a0:	b8 b0 c3 02 c0       	mov    eax,0xc002c3b0
c00181a5:	c3                   	ret    
c00181a6:	80 f9 05             	cmp    cl,0x5
c00181a9:	75 45                	jne    c00181f0 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00181ab:	8d 4a ff             	lea    ecx,[edx-0x1]
c00181ae:	b8 c0 c3 02 c0       	mov    eax,0xc002c3c0
c00181b3:	80 f9 02             	cmp    cl,0x2
c00181b6:	0f 86 1f 02 00 00    	jbe    c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181bc:	80 fa 04             	cmp    dl,0x4
c00181bf:	0f 84 f3 01 00 00    	je     c00183b8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00181c5:	80 fa 07             	cmp    dl,0x7
c00181c8:	0f 84 0d 02 00 00    	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181ce:	b8 d0 c3 02 c0       	mov    eax,0xc002c3d0
c00181d3:	80 fa 08             	cmp    dl,0x8
c00181d6:	0f 84 ff 01 00 00    	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181dc:	b8 8a a7 02 c0       	mov    eax,0xc002a78a
c00181e1:	80 fa 09             	cmp    dl,0x9
c00181e4:	0f 85 f1 01 00 00    	jne    c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181ea:	b8 e0 c3 02 c0       	mov    eax,0xc002c3e0
c00181ef:	c3                   	ret    
c00181f0:	80 f9 06             	cmp    cl,0x6
c00181f3:	0f 85 85 01 00 00    	jne    c001837e <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00181f9:	b8 f0 c3 02 c0       	mov    eax,0xc002c3f0
c00181fe:	80 fa 01             	cmp    dl,0x1
c0018201:	0f 84 d4 01 00 00    	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018207:	8d 42 fb             	lea    eax,[edx-0x5]
c001820a:	3c 01                	cmp    al,0x1
c001820c:	0f 86 ac 01 00 00    	jbe    c00183be <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018212:	80 fa 03             	cmp    dl,0x3
c0018215:	0f 84 a3 01 00 00    	je     c00183be <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001821b:	8d 4a f9             	lea    ecx,[edx-0x7]
c001821e:	b8 10 c4 02 c0       	mov    eax,0xc002c410
c0018223:	80 f9 01             	cmp    cl,0x1
c0018226:	0f 86 af 01 00 00    	jbe    c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001822c:	80 fa 09             	cmp    dl,0x9
c001822f:	0f 84 8f 01 00 00    	je     c00183c4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018235:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018238:	80 f9 01             	cmp    cl,0x1
c001823b:	0f 86 9a 01 00 00    	jbe    c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018241:	b8 20 c4 02 c0       	mov    eax,0xc002c420
c0018246:	80 fa 0d             	cmp    dl,0xd
c0018249:	0f 84 8c 01 00 00    	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001824f:	b8 30 c4 02 c0       	mov    eax,0xc002c430
c0018254:	80 fa 0e             	cmp    dl,0xe
c0018257:	0f 84 7e 01 00 00    	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001825d:	b8 40 c4 02 c0       	mov    eax,0xc002c440
c0018262:	80 fa 0f             	cmp    dl,0xf
c0018265:	0f 84 70 01 00 00    	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001826b:	b8 20 c4 02 c0       	mov    eax,0xc002c420
c0018270:	80 fa 15             	cmp    dl,0x15
c0018273:	0f 84 62 01 00 00    	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018279:	8d 4a ea             	lea    ecx,[edx-0x16]
c001827c:	b8 40 c4 02 c0       	mov    eax,0xc002c440
c0018281:	80 f9 01             	cmp    cl,0x1
c0018284:	0f 86 51 01 00 00    	jbe    c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001828a:	80 fa 1a             	cmp    dl,0x1a
c001828d:	0f 84 37 01 00 00    	je     c00183ca <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018293:	80 fa 1c             	cmp    dl,0x1c
c0018296:	0f 84 34 01 00 00    	je     c00183d0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001829c:	80 fa 1d             	cmp    dl,0x1d
c001829f:	0f 84 36 01 00 00    	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182a5:	b8 70 c4 02 c0       	mov    eax,0xc002c470
c00182aa:	80 fa 25             	cmp    dl,0x25
c00182ad:	0f 84 28 01 00 00    	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182b3:	8d 4a da             	lea    ecx,[edx-0x26]
c00182b6:	b8 60 c4 02 c0       	mov    eax,0xc002c460
c00182bb:	80 f9 01             	cmp    cl,0x1
c00182be:	0f 86 17 01 00 00    	jbe    c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182c4:	b8 80 c4 02 c0       	mov    eax,0xc002c480
c00182c9:	80 fa 2a             	cmp    dl,0x2a
c00182cc:	0f 84 09 01 00 00    	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182d2:	b8 70 c4 02 c0       	mov    eax,0xc002c470
c00182d7:	80 fa 2c             	cmp    dl,0x2c
c00182da:	0f 84 fb 00 00 00    	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182e0:	b8 80 c4 02 c0       	mov    eax,0xc002c480
c00182e5:	80 fa 2d             	cmp    dl,0x2d
c00182e8:	0f 84 ed 00 00 00    	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182ee:	b8 50 c4 02 c0       	mov    eax,0xc002c450
c00182f3:	80 fa 2e             	cmp    dl,0x2e
c00182f6:	0f 84 df 00 00 00    	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182fc:	b8 70 c4 02 c0       	mov    eax,0xc002c470
c0018301:	80 fa 2f             	cmp    dl,0x2f
c0018304:	0f 84 d1 00 00 00    	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001830a:	8d 4a cb             	lea    ecx,[edx-0x35]
c001830d:	b8 60 c4 02 c0       	mov    eax,0xc002c460
c0018312:	80 f9 01             	cmp    cl,0x1
c0018315:	0f 86 c0 00 00 00    	jbe    c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001831b:	b8 90 c4 02 c0       	mov    eax,0xc002c490
c0018320:	80 fa 37             	cmp    dl,0x37
c0018323:	0f 84 b2 00 00 00    	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018329:	b8 a0 c4 02 c0       	mov    eax,0xc002c4a0
c001832e:	80 fa 3a             	cmp    dl,0x3a
c0018331:	0f 84 a4 00 00 00    	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018337:	b8 b0 c4 02 c0       	mov    eax,0xc002c4b0
c001833c:	80 fa 3c             	cmp    dl,0x3c
c001833f:	0f 84 96 00 00 00    	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018345:	b8 c0 c4 02 c0       	mov    eax,0xc002c4c0
c001834a:	80 fa 3d             	cmp    dl,0x3d
c001834d:	0f 84 88 00 00 00    	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018353:	b8 a0 c4 02 c0       	mov    eax,0xc002c4a0
c0018358:	80 fa 3e             	cmp    dl,0x3e
c001835b:	74 7e                	je     c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001835d:	8d 42 bb             	lea    eax,[edx-0x45]
c0018360:	3c 01                	cmp    al,0x1
c0018362:	76 72                	jbe    c00183d6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018364:	80 fa 3f             	cmp    dl,0x3f
c0018367:	74 6d                	je     c00183d6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018369:	80 fa 4a             	cmp    dl,0x4a
c001836c:	74 0a                	je     c0018378 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001836e:	b8 8a a7 02 c0       	mov    eax,0xc002a78a
c0018373:	80 fa 4d             	cmp    dl,0x4d
c0018376:	75 63                	jne    c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018378:	b8 90 c4 02 c0       	mov    eax,0xc002c490
c001837d:	c3                   	ret    
c001837e:	b8 8a a7 02 c0       	mov    eax,0xc002a78a
c0018383:	80 f9 0b             	cmp    cl,0xb
c0018386:	75 0a                	jne    c0018392 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018388:	fe ca                	dec    dl
c001838a:	75 4f                	jne    c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001838c:	b8 d0 c4 02 c0       	mov    eax,0xc002c4d0
c0018391:	c3                   	ret    
c0018392:	80 f9 0f             	cmp    cl,0xf
c0018395:	75 44                	jne    c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018397:	b8 e0 c4 02 c0       	mov    eax,0xc002c4e0
c001839c:	80 fa 02             	cmp    dl,0x2
c001839f:	76 3a                	jbe    c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183a1:	8d 42 fd             	lea    eax,[edx-0x3]
c00183a4:	3c 01                	cmp    al,0x1
c00183a6:	76 0a                	jbe    c00183b2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00183a8:	b8 8a a7 02 c0       	mov    eax,0xc002a78a
c00183ad:	80 fa 06             	cmp    dl,0x6
c00183b0:	75 29                	jne    c00183db <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183b2:	b8 f0 c4 02 c0       	mov    eax,0xc002c4f0
c00183b7:	c3                   	ret    
c00183b8:	b8 d0 c3 02 c0       	mov    eax,0xc002c3d0
c00183bd:	c3                   	ret    
c00183be:	b8 00 c4 02 c0       	mov    eax,0xc002c400
c00183c3:	c3                   	ret    
c00183c4:	b8 20 c4 02 c0       	mov    eax,0xc002c420
c00183c9:	c3                   	ret    
c00183ca:	b8 50 c4 02 c0       	mov    eax,0xc002c450
c00183cf:	c3                   	ret    
c00183d0:	b8 60 c4 02 c0       	mov    eax,0xc002c460
c00183d5:	c3                   	ret    
c00183d6:	b8 b0 c4 02 c0       	mov    eax,0xc002c4b0
c00183db:	c3                   	ret    

c00183dc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00183dc:	60                   	pusha  
c00183dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00183e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00183e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00183e9:	9c                   	pushf  
c00183ea:	fa                   	cli    
c00183eb:	0f 09                	wbinvd 
c00183ed:	0f 30                	wrmsr  
c00183ef:	9d                   	popf   
c00183f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00183f4:	89 02                	mov    DWORD PTR [edx],eax
c00183f6:	61                   	popa   
c00183f7:	c3                   	ret    

c00183f8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00183f8:	60                   	pusha  
c00183f9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00183fd:	9c                   	pushf  
c00183fe:	fa                   	cli    
c00183ff:	0f 09                	wbinvd 
c0018401:	31 c0                	xor    eax,eax
c0018403:	31 d2                	xor    edx,edx
c0018405:	0f 32                	rdmsr  
c0018407:	9d                   	popf   
c0018408:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001840c:	89 02                	mov    DWORD PTR [edx],eax
c001840e:	61                   	popa   
c001840f:	c3                   	ret    

c0018410 <CPU::AMD_K6_writeback(int, int, int)>:
c0018410:	56                   	push   esi
c0018411:	53                   	push   ebx
c0018412:	83 ec 10             	sub    esp,0x10
c0018415:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018419:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001841e:	75 5d                	jne    c001847d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018420:	83 f8 08             	cmp    eax,0x8
c0018423:	75 09                	jne    c001842e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018425:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001842a:	7e 13                	jle    c001843f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001842c:	eb 30                	jmp    c001845e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001842e:	83 f8 06             	cmp    eax,0x6
c0018431:	7c 4a                	jl     c001847d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018433:	83 f8 07             	cmp    eax,0x7
c0018436:	7e 07                	jle    c001843f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018438:	83 f8 09             	cmp    eax,0x9
c001843b:	74 21                	je     c001845e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001843d:	eb 3e                	jmp    c001847d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001843f:	89 e6                	mov    esi,esp
c0018441:	8b 1d 24 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d124
c0018447:	56                   	push   esi
c0018448:	c1 eb 15             	shr    ebx,0x15
c001844b:	68 82 00 00 c0       	push   0xc0000082
c0018450:	83 e3 7e             	and    ebx,0x7e
c0018453:	e8 a0 ff ff ff       	call   c00183f8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018458:	56                   	push   esi
c0018459:	6a 00                	push   0x0
c001845b:	53                   	push   ebx
c001845c:	eb 12                	jmp    c0018470 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001845e:	89 e3                	mov    ebx,esp
c0018460:	53                   	push   ebx
c0018461:	68 82 00 00 c0       	push   0xc0000082
c0018466:	e8 8d ff ff ff       	call   c00183f8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001846b:	53                   	push   ebx
c001846c:	6a 00                	push   0x0
c001846e:	6a 00                	push   0x0
c0018470:	68 82 00 00 c0       	push   0xc0000082
c0018475:	e8 62 ff ff ff       	call   c00183dc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001847a:	83 c4 18             	add    esp,0x18
c001847d:	83 c4 10             	add    esp,0x10
c0018480:	5b                   	pop    ebx
c0018481:	5e                   	pop    esi
c0018482:	c3                   	ret    
c0018483:	90                   	nop

c0018484 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018484:	55                   	push   ebp
c0018485:	57                   	push   edi
c0018486:	56                   	push   esi
c0018487:	53                   	push   ebx
c0018488:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001848c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018490:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018494:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018498:	39 05 00 c6 02 c0    	cmp    DWORD PTR ds:0xc002c600,eax
c001849e:	75 23                	jne    c00184c3 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00184a0:	a1 0c dc 02 c0       	mov    eax,ds:0xc002dc0c
c00184a5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00184a9:	89 06                	mov    DWORD PTR [esi],eax
c00184ab:	a1 08 dc 02 c0       	mov    eax,ds:0xc002dc08
c00184b0:	89 07                	mov    DWORD PTR [edi],eax
c00184b2:	a1 04 dc 02 c0       	mov    eax,ds:0xc002dc04
c00184b7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00184ba:	a1 00 dc 02 c0       	mov    eax,ds:0xc002dc00
c00184bf:	89 02                	mov    DWORD PTR [edx],eax
c00184c1:	eb 3f                	jmp    c0018502 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00184c3:	31 c9                	xor    ecx,ecx
c00184c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00184c9:	0f a2                	cpuid  
c00184cb:	89 06                	mov    DWORD PTR [esi],eax
c00184cd:	89 1f                	mov    DWORD PTR [edi],ebx
c00184cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00184d3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00184d6:	89 10                	mov    DWORD PTR [eax],edx
c00184d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00184dc:	a3 00 c6 02 c0       	mov    ds:0xc002c600,eax
c00184e1:	8b 06                	mov    eax,DWORD PTR [esi]
c00184e3:	a3 0c dc 02 c0       	mov    ds:0xc002dc0c,eax
c00184e8:	8b 07                	mov    eax,DWORD PTR [edi]
c00184ea:	a3 08 dc 02 c0       	mov    ds:0xc002dc08,eax
c00184ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00184f2:	a3 04 dc 02 c0       	mov    ds:0xc002dc04,eax
c00184f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00184fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00184fd:	a3 00 dc 02 c0       	mov    ds:0xc002dc00,eax
c0018502:	5b                   	pop    ebx
c0018503:	5e                   	pop    esi
c0018504:	5f                   	pop    edi
c0018505:	5d                   	pop    ebp
c0018506:	c3                   	ret    
c0018507:	90                   	nop

c0018508 <CPU::cpuidCheckEDX(unsigned int)>:
c0018508:	83 ec 10             	sub    esp,0x10
c001850b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001850f:	50                   	push   eax
c0018510:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018514:	50                   	push   eax
c0018515:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018519:	50                   	push   eax
c001851a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001851e:	50                   	push   eax
c001851f:	6a 01                	push   0x1
c0018521:	e8 5e ff ff ff       	call   c0018484 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018526:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001852a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001852e:	0f 95 c0             	setne  al
c0018531:	83 c4 24             	add    esp,0x24
c0018534:	c3                   	ret    
c0018535:	90                   	nop

c0018536 <CPU::cpuidCheckECX(unsigned int)>:
c0018536:	83 ec 10             	sub    esp,0x10
c0018539:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001853d:	50                   	push   eax
c001853e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018542:	50                   	push   eax
c0018543:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018547:	50                   	push   eax
c0018548:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001854c:	50                   	push   eax
c001854d:	6a 01                	push   0x1
c001854f:	e8 30 ff ff ff       	call   c0018484 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018554:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018558:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001855c:	0f 95 c0             	setne  al
c001855f:	83 c4 24             	add    esp,0x24
c0018562:	c3                   	ret    
c0018563:	90                   	nop

c0018564 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018564:	83 ec 10             	sub    esp,0x10
c0018567:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001856b:	50                   	push   eax
c001856c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018570:	50                   	push   eax
c0018571:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018575:	50                   	push   eax
c0018576:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001857a:	50                   	push   eax
c001857b:	6a 07                	push   0x7
c001857d:	e8 02 ff ff ff       	call   c0018484 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018582:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018586:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001858a:	0f 95 c0             	setne  al
c001858d:	83 c4 24             	add    esp,0x24
c0018590:	c3                   	ret    
c0018591:	90                   	nop

c0018592 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018592:	83 ec 10             	sub    esp,0x10
c0018595:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018599:	50                   	push   eax
c001859a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001859e:	50                   	push   eax
c001859f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00185a3:	50                   	push   eax
c00185a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00185a8:	50                   	push   eax
c00185a9:	6a 07                	push   0x7
c00185ab:	e8 d4 fe ff ff       	call   c0018484 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00185b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00185b4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00185b8:	0f 95 c0             	setne  al
c00185bb:	83 c4 24             	add    esp,0x24
c00185be:	c3                   	ret    
c00185bf:	90                   	nop

c00185c0 <CPU::CPU()>:
c00185c0:	83 ec 0c             	sub    esp,0xc
c00185c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185c7:	83 ec 08             	sub    esp,0x8
c00185ca:	68 8a a7 02 c0       	push   0xc002a78a
c00185cf:	50                   	push   eax
c00185d0:	e8 6b b9 ff ff       	call   c0013f40 <Device::Device(char const*)>
c00185d5:	83 c4 10             	add    esp,0x10
c00185d8:	ba 64 a8 02 c0       	mov    edx,0xc002a864
c00185dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185e1:	89 10                	mov    DWORD PTR [eax],edx
c00185e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185e7:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00185f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185f5:	05 78 01 00 00       	add    eax,0x178
c00185fa:	83 ec 0c             	sub    esp,0xc
c00185fd:	50                   	push   eax
c00185fe:	e8 6f 68 ff ff       	call   c000ee72 <GDT::GDT()>
c0018603:	83 c4 10             	add    esp,0x10
c0018606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001860a:	05 7c 09 00 00       	add    eax,0x97c
c001860f:	83 ec 0c             	sub    esp,0xc
c0018612:	50                   	push   eax
c0018613:	e8 bc 6a ff ff       	call   c000f0d4 <IDT::IDT()>
c0018618:	83 c4 10             	add    esp,0x10
c001861b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001861f:	05 7c 11 00 00       	add    eax,0x117c
c0018624:	83 ec 0c             	sub    esp,0xc
c0018627:	50                   	push   eax
c0018628:	e8 3d 8c ff ff       	call   c001126a <TSS::TSS()>
c001862d:	83 c4 10             	add    esp,0x10
c0018630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018634:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001863b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001863f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018649:	90                   	nop
c001864a:	83 c4 0c             	add    esp,0xc
c001864d:	c3                   	ret    

c001864e <CPU::displayFeatures()>:
c001864e:	53                   	push   ebx
c001864f:	83 ec 10             	sub    esp,0x10
c0018652:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018656:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001865c:	68 98 a4 02 c0       	push   0xc002a498
c0018661:	e8 c3 a2 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0018666:	59                   	pop    ecx
c0018667:	58                   	pop    eax
c0018668:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001866e:	50                   	push   eax
c001866f:	68 a9 a4 02 c0       	push   0xc002a4a9
c0018674:	e8 b0 a2 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0018679:	58                   	pop    eax
c001867a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018680:	5a                   	pop    edx
c0018681:	c1 e8 0e             	shr    eax,0xe
c0018684:	0f b6 c0             	movzx  eax,al
c0018687:	50                   	push   eax
c0018688:	68 ba a4 02 c0       	push   0xc002a4ba
c001868d:	e8 97 a2 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0018692:	59                   	pop    ecx
c0018693:	58                   	pop    eax
c0018694:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001869a:	66 c1 e8 06          	shr    ax,0x6
c001869e:	0f b6 c0             	movzx  eax,al
c00186a1:	50                   	push   eax
c00186a2:	68 cb a4 02 c0       	push   0xc002a4cb
c00186a7:	e8 7d a2 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00186ac:	c7 04 24 67 a9 02 c0 	mov    DWORD PTR [esp],0xc002a967
c00186b3:	e8 71 a2 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00186b8:	83 c4 10             	add    esp,0x10
c00186bb:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c00186c0:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00186c7:	74 05                	je     c00186ce <CPU::displayFeatures()+0x80>
c00186c9:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c00186ce:	52                   	push   edx
c00186cf:	52                   	push   edx
c00186d0:	50                   	push   eax
c00186d1:	68 dc a4 02 c0       	push   0xc002a4dc
c00186d6:	e8 4e a2 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00186db:	83 c4 10             	add    esp,0x10
c00186de:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c00186e3:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00186ea:	78 05                	js     c00186f1 <CPU::displayFeatures()+0xa3>
c00186ec:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c00186f1:	51                   	push   ecx
c00186f2:	51                   	push   ecx
c00186f3:	50                   	push   eax
c00186f4:	68 f3 a4 02 c0       	push   0xc002a4f3
c00186f9:	e8 2b a2 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00186fe:	83 c4 10             	add    esp,0x10
c0018701:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c0018706:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001870d:	75 05                	jne    c0018714 <CPU::displayFeatures()+0xc6>
c001870f:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c0018714:	52                   	push   edx
c0018715:	52                   	push   edx
c0018716:	50                   	push   eax
c0018717:	68 0a a5 02 c0       	push   0xc002a50a
c001871c:	e8 08 a2 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0018721:	83 c4 10             	add    esp,0x10
c0018724:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c0018729:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018730:	75 05                	jne    c0018737 <CPU::displayFeatures()+0xe9>
c0018732:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c0018737:	51                   	push   ecx
c0018738:	51                   	push   ecx
c0018739:	50                   	push   eax
c001873a:	68 21 a5 02 c0       	push   0xc002a521
c001873f:	e8 e5 a1 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0018744:	83 c4 10             	add    esp,0x10
c0018747:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c001874c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018753:	75 05                	jne    c001875a <CPU::displayFeatures()+0x10c>
c0018755:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c001875a:	52                   	push   edx
c001875b:	52                   	push   edx
c001875c:	50                   	push   eax
c001875d:	68 38 a5 02 c0       	push   0xc002a538
c0018762:	e8 c2 a1 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0018767:	83 c4 10             	add    esp,0x10
c001876a:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c001876f:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018776:	75 05                	jne    c001877d <CPU::displayFeatures()+0x12f>
c0018778:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c001877d:	51                   	push   ecx
c001877e:	51                   	push   ecx
c001877f:	50                   	push   eax
c0018780:	68 4f a5 02 c0       	push   0xc002a54f
c0018785:	e8 9f a1 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001878a:	83 c4 10             	add    esp,0x10
c001878d:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c0018792:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018799:	75 05                	jne    c00187a0 <CPU::displayFeatures()+0x152>
c001879b:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c00187a0:	52                   	push   edx
c00187a1:	52                   	push   edx
c00187a2:	50                   	push   eax
c00187a3:	68 66 a5 02 c0       	push   0xc002a566
c00187a8:	e8 7c a1 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00187ad:	83 c4 10             	add    esp,0x10
c00187b0:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c00187b5:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00187bc:	75 05                	jne    c00187c3 <CPU::displayFeatures()+0x175>
c00187be:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c00187c3:	51                   	push   ecx
c00187c4:	51                   	push   ecx
c00187c5:	50                   	push   eax
c00187c6:	68 7d a5 02 c0       	push   0xc002a57d
c00187cb:	e8 59 a1 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00187d0:	83 c4 10             	add    esp,0x10
c00187d3:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c00187d8:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00187df:	75 05                	jne    c00187e6 <CPU::displayFeatures()+0x198>
c00187e1:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c00187e6:	52                   	push   edx
c00187e7:	52                   	push   edx
c00187e8:	50                   	push   eax
c00187e9:	68 94 a5 02 c0       	push   0xc002a594
c00187ee:	e8 36 a1 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00187f3:	83 c4 10             	add    esp,0x10
c00187f6:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c00187fb:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018802:	75 05                	jne    c0018809 <CPU::displayFeatures()+0x1bb>
c0018804:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c0018809:	51                   	push   ecx
c001880a:	51                   	push   ecx
c001880b:	50                   	push   eax
c001880c:	68 ab a5 02 c0       	push   0xc002a5ab
c0018811:	e8 13 a1 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0018816:	83 c4 10             	add    esp,0x10
c0018819:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c001881e:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018825:	75 05                	jne    c001882c <CPU::displayFeatures()+0x1de>
c0018827:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c001882c:	52                   	push   edx
c001882d:	52                   	push   edx
c001882e:	50                   	push   eax
c001882f:	68 c2 a5 02 c0       	push   0xc002a5c2
c0018834:	e8 f0 a0 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0018839:	83 c4 10             	add    esp,0x10
c001883c:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c0018841:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018848:	75 05                	jne    c001884f <CPU::displayFeatures()+0x201>
c001884a:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c001884f:	51                   	push   ecx
c0018850:	51                   	push   ecx
c0018851:	50                   	push   eax
c0018852:	68 d9 a5 02 c0       	push   0xc002a5d9
c0018857:	e8 cd a0 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001885c:	83 c4 10             	add    esp,0x10
c001885f:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c0018864:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001886b:	75 05                	jne    c0018872 <CPU::displayFeatures()+0x224>
c001886d:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c0018872:	52                   	push   edx
c0018873:	52                   	push   edx
c0018874:	50                   	push   eax
c0018875:	68 f0 a5 02 c0       	push   0xc002a5f0
c001887a:	e8 aa a0 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001887f:	83 c4 10             	add    esp,0x10
c0018882:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c0018887:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c001888e:	78 05                	js     c0018895 <CPU::displayFeatures()+0x247>
c0018890:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c0018895:	51                   	push   ecx
c0018896:	51                   	push   ecx
c0018897:	50                   	push   eax
c0018898:	68 07 a6 02 c0       	push   0xc002a607
c001889d:	e8 87 a0 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00188a2:	83 c4 10             	add    esp,0x10
c00188a5:	b8 b2 8e 02 c0       	mov    eax,0xc0028eb2
c00188aa:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00188b1:	75 05                	jne    c00188b8 <CPU::displayFeatures()+0x26a>
c00188b3:	b8 b6 8e 02 c0       	mov    eax,0xc0028eb6
c00188b8:	52                   	push   edx
c00188b9:	52                   	push   edx
c00188ba:	50                   	push   eax
c00188bb:	68 1e a6 02 c0       	push   0xc002a61e
c00188c0:	e8 64 a0 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00188c5:	83 c4 18             	add    esp,0x18
c00188c8:	5b                   	pop    ebx
c00188c9:	c3                   	ret    

c00188ca <CPU::detectFeatures()>:
c00188ca:	55                   	push   ebp
c00188cb:	57                   	push   edi
c00188cc:	56                   	push   esi
c00188cd:	53                   	push   ebx
c00188ce:	83 ec 50             	sub    esp,0x50
c00188d1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00188d5:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00188df:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00188e6:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00188ec:	6a 0d                	push   0xd
c00188ee:	6a 00                	push   0x0
c00188f0:	57                   	push   edi
c00188f1:	e8 ce 7d fe ff       	call   c00006c4 <memset>
c00188f6:	83 c4 10             	add    esp,0x10
c00188f9:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c00188fe:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018905:	0f 84 20 09 00 00    	je     c001922b <CPU::detectFeatures()+0x961>
c001890b:	83 ec 0c             	sub    esp,0xc
c001890e:	6a 10                	push   0x10
c0018910:	e8 f3 fb ff ff       	call   c0018508 <CPU::cpuidCheckEDX(unsigned int)>
c0018915:	83 e0 01             	and    eax,0x1
c0018918:	8d 14 00             	lea    edx,[eax+eax*1]
c001891b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018921:	83 e0 fd             	and    eax,0xfffffffd
c0018924:	09 d0                	or     eax,edx
c0018926:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001892c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018933:	e8 d0 fb ff ff       	call   c0018508 <CPU::cpuidCheckEDX(unsigned int)>
c0018938:	83 e0 01             	and    eax,0x1
c001893b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018942:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018948:	83 e0 fb             	and    eax,0xfffffffb
c001894b:	09 d0                	or     eax,edx
c001894d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018953:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001895a:	e8 a9 fb ff ff       	call   c0018508 <CPU::cpuidCheckEDX(unsigned int)>
c001895f:	83 e0 01             	and    eax,0x1
c0018962:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018969:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001896f:	83 e0 f7             	and    eax,0xfffffff7
c0018972:	09 d0                	or     eax,edx
c0018974:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001897a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018981:	e8 82 fb ff ff       	call   c0018508 <CPU::cpuidCheckEDX(unsigned int)>
c0018986:	83 e0 01             	and    eax,0x1
c0018989:	c1 e0 04             	shl    eax,0x4
c001898c:	88 c2                	mov    dl,al
c001898e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018994:	83 e0 ef             	and    eax,0xffffffef
c0018997:	09 d0                	or     eax,edx
c0018999:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001899f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00189a6:	e8 5d fb ff ff       	call   c0018508 <CPU::cpuidCheckEDX(unsigned int)>
c00189ab:	83 e0 01             	and    eax,0x1
c00189ae:	c1 e0 05             	shl    eax,0x5
c00189b1:	88 c2                	mov    dl,al
c00189b3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00189b9:	83 e0 df             	and    eax,0xffffffdf
c00189bc:	09 d0                	or     eax,edx
c00189be:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00189c4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00189cb:	e8 38 fb ff ff       	call   c0018508 <CPU::cpuidCheckEDX(unsigned int)>
c00189d0:	83 e0 01             	and    eax,0x1
c00189d3:	8d 14 00             	lea    edx,[eax+eax*1]
c00189d6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00189dc:	83 e0 fd             	and    eax,0xfffffffd
c00189df:	09 d0                	or     eax,edx
c00189e1:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00189e7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00189ee:	e8 15 fb ff ff       	call   c0018508 <CPU::cpuidCheckEDX(unsigned int)>
c00189f3:	83 e0 01             	and    eax,0x1
c00189f6:	c1 e0 06             	shl    eax,0x6
c00189f9:	88 c2                	mov    dl,al
c00189fb:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018a01:	83 e0 bf             	and    eax,0xffffffbf
c0018a04:	09 d0                	or     eax,edx
c0018a06:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018a0c:	58                   	pop    eax
c0018a0d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018a11:	56                   	push   esi
c0018a12:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018a16:	55                   	push   ebp
c0018a17:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a1b:	50                   	push   eax
c0018a1c:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018a20:	52                   	push   edx
c0018a21:	6a 00                	push   0x0
c0018a23:	e8 5c fa ff ff       	call   c0018484 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a28:	83 c4 1c             	add    esp,0x1c
c0018a2b:	6a 04                	push   0x4
c0018a2d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018a31:	50                   	push   eax
c0018a32:	57                   	push   edi
c0018a33:	e8 68 7c fe ff       	call   c00006a0 <memcpy>
c0018a38:	83 c4 0c             	add    esp,0xc
c0018a3b:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018a41:	6a 04                	push   0x4
c0018a43:	56                   	push   esi
c0018a44:	50                   	push   eax
c0018a45:	e8 56 7c fe ff       	call   c00006a0 <memcpy>
c0018a4a:	83 c4 0c             	add    esp,0xc
c0018a4d:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0018a53:	6a 04                	push   0x4
c0018a55:	55                   	push   ebp
c0018a56:	50                   	push   eax
c0018a57:	e8 44 7c fe ff       	call   c00006a0 <memcpy>
c0018a5c:	58                   	pop    eax
c0018a5d:	5a                   	pop    edx
c0018a5e:	68 35 a6 02 c0       	push   0xc002a635
c0018a63:	57                   	push   edi
c0018a64:	e8 4b 7d fe ff       	call   c00007b4 <strcmp>
c0018a69:	83 c4 10             	add    esp,0x10
c0018a6c:	85 c0                	test   eax,eax
c0018a6e:	75 0f                	jne    c0018a7f <CPU::detectFeatures()+0x1b5>
c0018a70:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018a7a:	e9 22 02 00 00       	jmp    c0018ca1 <CPU::detectFeatures()+0x3d7>
c0018a7f:	50                   	push   eax
c0018a80:	50                   	push   eax
c0018a81:	68 42 a6 02 c0       	push   0xc002a642
c0018a86:	57                   	push   edi
c0018a87:	e8 28 7d fe ff       	call   c00007b4 <strcmp>
c0018a8c:	83 c4 10             	add    esp,0x10
c0018a8f:	85 c0                	test   eax,eax
c0018a91:	74 dd                	je     c0018a70 <CPU::detectFeatures()+0x1a6>
c0018a93:	51                   	push   ecx
c0018a94:	51                   	push   ecx
c0018a95:	68 4f a6 02 c0       	push   0xc002a64f
c0018a9a:	57                   	push   edi
c0018a9b:	e8 14 7d fe ff       	call   c00007b4 <strcmp>
c0018aa0:	83 c4 10             	add    esp,0x10
c0018aa3:	85 c0                	test   eax,eax
c0018aa5:	74 2a                	je     c0018ad1 <CPU::detectFeatures()+0x207>
c0018aa7:	52                   	push   edx
c0018aa8:	52                   	push   edx
c0018aa9:	68 5c a6 02 c0       	push   0xc002a65c
c0018aae:	57                   	push   edi
c0018aaf:	e8 00 7d fe ff       	call   c00007b4 <strcmp>
c0018ab4:	83 c4 10             	add    esp,0x10
c0018ab7:	85 c0                	test   eax,eax
c0018ab9:	74 16                	je     c0018ad1 <CPU::detectFeatures()+0x207>
c0018abb:	50                   	push   eax
c0018abc:	50                   	push   eax
c0018abd:	68 69 a6 02 c0       	push   0xc002a669
c0018ac2:	57                   	push   edi
c0018ac3:	e8 ec 7c fe ff       	call   c00007b4 <strcmp>
c0018ac8:	83 c4 10             	add    esp,0x10
c0018acb:	85 c0                	test   eax,eax
c0018acd:	74 48                	je     c0018b17 <CPU::detectFeatures()+0x24d>
c0018acf:	eb 0f                	jmp    c0018ae0 <CPU::detectFeatures()+0x216>
c0018ad1:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018adb:	e9 c1 01 00 00       	jmp    c0018ca1 <CPU::detectFeatures()+0x3d7>
c0018ae0:	50                   	push   eax
c0018ae1:	50                   	push   eax
c0018ae2:	68 76 a6 02 c0       	push   0xc002a676
c0018ae7:	57                   	push   edi
c0018ae8:	e8 c7 7c fe ff       	call   c00007b4 <strcmp>
c0018aed:	83 c4 10             	add    esp,0x10
c0018af0:	85 c0                	test   eax,eax
c0018af2:	74 23                	je     c0018b17 <CPU::detectFeatures()+0x24d>
c0018af4:	50                   	push   eax
c0018af5:	50                   	push   eax
c0018af6:	68 83 a6 02 c0       	push   0xc002a683
c0018afb:	57                   	push   edi
c0018afc:	e8 b3 7c fe ff       	call   c00007b4 <strcmp>
c0018b01:	83 c4 10             	add    esp,0x10
c0018b04:	85 c0                	test   eax,eax
c0018b06:	75 1e                	jne    c0018b26 <CPU::detectFeatures()+0x25c>
c0018b08:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018b12:	e9 8a 01 00 00       	jmp    c0018ca1 <CPU::detectFeatures()+0x3d7>
c0018b17:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018b21:	e9 7b 01 00 00       	jmp    c0018ca1 <CPU::detectFeatures()+0x3d7>
c0018b26:	50                   	push   eax
c0018b27:	50                   	push   eax
c0018b28:	68 90 a6 02 c0       	push   0xc002a690
c0018b2d:	57                   	push   edi
c0018b2e:	e8 81 7c fe ff       	call   c00007b4 <strcmp>
c0018b33:	83 c4 10             	add    esp,0x10
c0018b36:	85 c0                	test   eax,eax
c0018b38:	75 0f                	jne    c0018b49 <CPU::detectFeatures()+0x27f>
c0018b3a:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018b44:	e9 58 01 00 00       	jmp    c0018ca1 <CPU::detectFeatures()+0x3d7>
c0018b49:	50                   	push   eax
c0018b4a:	50                   	push   eax
c0018b4b:	68 4f a6 02 c0       	push   0xc002a64f
c0018b50:	57                   	push   edi
c0018b51:	e8 5e 7c fe ff       	call   c00007b4 <strcmp>
c0018b56:	83 c4 10             	add    esp,0x10
c0018b59:	85 c0                	test   eax,eax
c0018b5b:	75 0f                	jne    c0018b6c <CPU::detectFeatures()+0x2a2>
c0018b5d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018b67:	e9 35 01 00 00       	jmp    c0018ca1 <CPU::detectFeatures()+0x3d7>
c0018b6c:	50                   	push   eax
c0018b6d:	50                   	push   eax
c0018b6e:	68 9d a6 02 c0       	push   0xc002a69d
c0018b73:	57                   	push   edi
c0018b74:	e8 3b 7c fe ff       	call   c00007b4 <strcmp>
c0018b79:	83 c4 10             	add    esp,0x10
c0018b7c:	85 c0                	test   eax,eax
c0018b7e:	75 0f                	jne    c0018b8f <CPU::detectFeatures()+0x2c5>
c0018b80:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018b8a:	e9 12 01 00 00       	jmp    c0018ca1 <CPU::detectFeatures()+0x3d7>
c0018b8f:	51                   	push   ecx
c0018b90:	51                   	push   ecx
c0018b91:	68 aa a6 02 c0       	push   0xc002a6aa
c0018b96:	57                   	push   edi
c0018b97:	e8 18 7c fe ff       	call   c00007b4 <strcmp>
c0018b9c:	83 c4 10             	add    esp,0x10
c0018b9f:	85 c0                	test   eax,eax
c0018ba1:	75 0f                	jne    c0018bb2 <CPU::detectFeatures()+0x2e8>
c0018ba3:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018bad:	e9 ef 00 00 00       	jmp    c0018ca1 <CPU::detectFeatures()+0x3d7>
c0018bb2:	52                   	push   edx
c0018bb3:	52                   	push   edx
c0018bb4:	68 b7 a6 02 c0       	push   0xc002a6b7
c0018bb9:	57                   	push   edi
c0018bba:	e8 f5 7b fe ff       	call   c00007b4 <strcmp>
c0018bbf:	83 c4 10             	add    esp,0x10
c0018bc2:	85 c0                	test   eax,eax
c0018bc4:	75 0f                	jne    c0018bd5 <CPU::detectFeatures()+0x30b>
c0018bc6:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018bd0:	e9 cc 00 00 00       	jmp    c0018ca1 <CPU::detectFeatures()+0x3d7>
c0018bd5:	50                   	push   eax
c0018bd6:	50                   	push   eax
c0018bd7:	68 c4 a6 02 c0       	push   0xc002a6c4
c0018bdc:	57                   	push   edi
c0018bdd:	e8 d2 7b fe ff       	call   c00007b4 <strcmp>
c0018be2:	83 c4 10             	add    esp,0x10
c0018be5:	85 c0                	test   eax,eax
c0018be7:	75 0f                	jne    c0018bf8 <CPU::detectFeatures()+0x32e>
c0018be9:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018bf3:	e9 a9 00 00 00       	jmp    c0018ca1 <CPU::detectFeatures()+0x3d7>
c0018bf8:	50                   	push   eax
c0018bf9:	50                   	push   eax
c0018bfa:	68 d1 a6 02 c0       	push   0xc002a6d1
c0018bff:	57                   	push   edi
c0018c00:	e8 af 7b fe ff       	call   c00007b4 <strcmp>
c0018c05:	83 c4 10             	add    esp,0x10
c0018c08:	85 c0                	test   eax,eax
c0018c0a:	75 0f                	jne    c0018c1b <CPU::detectFeatures()+0x351>
c0018c0c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018c16:	e9 86 00 00 00       	jmp    c0018ca1 <CPU::detectFeatures()+0x3d7>
c0018c1b:	50                   	push   eax
c0018c1c:	50                   	push   eax
c0018c1d:	68 de a6 02 c0       	push   0xc002a6de
c0018c22:	57                   	push   edi
c0018c23:	e8 8c 7b fe ff       	call   c00007b4 <strcmp>
c0018c28:	83 c4 10             	add    esp,0x10
c0018c2b:	85 c0                	test   eax,eax
c0018c2d:	75 0c                	jne    c0018c3b <CPU::detectFeatures()+0x371>
c0018c2f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018c39:	eb 66                	jmp    c0018ca1 <CPU::detectFeatures()+0x3d7>
c0018c3b:	50                   	push   eax
c0018c3c:	50                   	push   eax
c0018c3d:	68 eb a6 02 c0       	push   0xc002a6eb
c0018c42:	57                   	push   edi
c0018c43:	e8 6c 7b fe ff       	call   c00007b4 <strcmp>
c0018c48:	83 c4 10             	add    esp,0x10
c0018c4b:	85 c0                	test   eax,eax
c0018c4d:	75 0c                	jne    c0018c5b <CPU::detectFeatures()+0x391>
c0018c4f:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018c59:	eb 46                	jmp    c0018ca1 <CPU::detectFeatures()+0x3d7>
c0018c5b:	50                   	push   eax
c0018c5c:	50                   	push   eax
c0018c5d:	68 f8 a6 02 c0       	push   0xc002a6f8
c0018c62:	57                   	push   edi
c0018c63:	e8 4c 7b fe ff       	call   c00007b4 <strcmp>
c0018c68:	83 c4 10             	add    esp,0x10
c0018c6b:	85 c0                	test   eax,eax
c0018c6d:	74 e0                	je     c0018c4f <CPU::detectFeatures()+0x385>
c0018c6f:	50                   	push   eax
c0018c70:	50                   	push   eax
c0018c71:	68 05 a7 02 c0       	push   0xc002a705
c0018c76:	57                   	push   edi
c0018c77:	e8 38 7b fe ff       	call   c00007b4 <strcmp>
c0018c7c:	83 c4 10             	add    esp,0x10
c0018c7f:	85 c0                	test   eax,eax
c0018c81:	74 cc                	je     c0018c4f <CPU::detectFeatures()+0x385>
c0018c83:	51                   	push   ecx
c0018c84:	51                   	push   ecx
c0018c85:	68 12 a7 02 c0       	push   0xc002a712
c0018c8a:	57                   	push   edi
c0018c8b:	e8 24 7b fe ff       	call   c00007b4 <strcmp>
c0018c90:	83 c4 10             	add    esp,0x10
c0018c93:	85 c0                	test   eax,eax
c0018c95:	74 b8                	je     c0018c4f <CPU::detectFeatures()+0x385>
c0018c97:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018ca1:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018ca6:	0f 86 be 00 00 00    	jbe    c0018d6a <CPU::detectFeatures()+0x4a0>
c0018cac:	83 ec 0c             	sub    esp,0xc
c0018caf:	68 80 00 00 00       	push   0x80
c0018cb4:	e8 ab f8 ff ff       	call   c0018564 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018cb9:	83 e0 01             	and    eax,0x1
c0018cbc:	c1 e0 06             	shl    eax,0x6
c0018cbf:	88 c2                	mov    dl,al
c0018cc1:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018cc7:	83 e0 bf             	and    eax,0xffffffbf
c0018cca:	09 d0                	or     eax,edx
c0018ccc:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018cd2:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018cd9:	e8 86 f8 ff ff       	call   c0018564 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018cde:	83 e0 01             	and    eax,0x1
c0018ce1:	c1 e0 04             	shl    eax,0x4
c0018ce4:	88 c2                	mov    dl,al
c0018ce6:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018cec:	83 e0 ef             	and    eax,0xffffffef
c0018cef:	09 d0                	or     eax,edx
c0018cf1:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018cf7:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018cfe:	e8 61 f8 ff ff       	call   c0018564 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d03:	c1 e0 07             	shl    eax,0x7
c0018d06:	88 c2                	mov    dl,al
c0018d08:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d0e:	83 e0 7f             	and    eax,0x7f
c0018d11:	09 d0                	or     eax,edx
c0018d13:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d19:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018d20:	e8 6d f8 ff ff       	call   c0018592 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018d25:	83 e0 01             	and    eax,0x1
c0018d28:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018d2f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018d35:	83 e0 f7             	and    eax,0xfffffff7
c0018d38:	09 d0                	or     eax,edx
c0018d3a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018d40:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018d47:	e8 46 f8 ff ff       	call   c0018592 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018d4c:	83 c4 10             	add    esp,0x10
c0018d4f:	83 e0 01             	and    eax,0x1
c0018d52:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018d59:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018d5f:	83 e0 fb             	and    eax,0xfffffffb
c0018d62:	09 d0                	or     eax,edx
c0018d64:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018d6a:	83 ec 0c             	sub    esp,0xc
c0018d6d:	56                   	push   esi
c0018d6e:	55                   	push   ebp
c0018d6f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018d73:	57                   	push   edi
c0018d74:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d78:	50                   	push   eax
c0018d79:	6a 01                	push   0x1
c0018d7b:	e8 04 f7 ff ff       	call   c0018484 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018d80:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018d84:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018d8a:	88 ca                	mov    dl,cl
c0018d8c:	83 e0 f0             	and    eax,0xfffffff0
c0018d8f:	83 e2 0f             	and    edx,0xf
c0018d92:	09 d0                	or     eax,edx
c0018d94:	88 ca                	mov    dl,cl
c0018d96:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018d9c:	c0 ea 04             	shr    dl,0x4
c0018d9f:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018da3:	0f b6 c2             	movzx  eax,dl
c0018da6:	83 c4 20             	add    esp,0x20
c0018da9:	c1 e0 06             	shl    eax,0x6
c0018dac:	89 c5                	mov    ebp,eax
c0018dae:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018db4:	66 25 3f c0          	and    ax,0xc03f
c0018db8:	09 e8                	or     eax,ebp
c0018dba:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018dc1:	89 c8                	mov    eax,ecx
c0018dc3:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018dc9:	c1 e8 08             	shr    eax,0x8
c0018dcc:	83 e2 3f             	and    edx,0x3f
c0018dcf:	83 e0 0f             	and    eax,0xf
c0018dd2:	89 c5                	mov    ebp,eax
c0018dd4:	c1 e5 06             	shl    ebp,0x6
c0018dd7:	09 d5                	or     ebp,edx
c0018dd9:	89 ea                	mov    edx,ebp
c0018ddb:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018de1:	88 c2                	mov    dl,al
c0018de3:	c0 ea 02             	shr    dl,0x2
c0018de6:	89 d5                	mov    ebp,edx
c0018de8:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018dee:	83 e2 c0             	and    edx,0xffffffc0
c0018df1:	09 d5                	or     ebp,edx
c0018df3:	89 ea                	mov    edx,ebp
c0018df5:	89 cd                	mov    ebp,ecx
c0018df7:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018dfd:	c1 ed 0c             	shr    ebp,0xc
c0018e00:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018e06:	83 e5 03             	and    ebp,0x3
c0018e09:	83 e2 cf             	and    edx,0xffffffcf
c0018e0c:	c1 e5 04             	shl    ebp,0x4
c0018e0f:	09 d5                	or     ebp,edx
c0018e11:	3c 06                	cmp    al,0x6
c0018e13:	89 ea                	mov    edx,ebp
c0018e15:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018e1b:	74 04                	je     c0018e21 <CPU::detectFeatures()+0x557>
c0018e1d:	3c 0f                	cmp    al,0xf
c0018e1f:	75 5c                	jne    c0018e7d <CPU::detectFeatures()+0x5b3>
c0018e21:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018e25:	89 cd                	mov    ebp,ecx
c0018e27:	c1 ed 10             	shr    ebp,0x10
c0018e2a:	c1 e5 04             	shl    ebp,0x4
c0018e2d:	09 ea                	or     edx,ebp
c0018e2f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018e35:	0f b6 d2             	movzx  edx,dl
c0018e38:	66 81 e5 3f c0       	and    bp,0xc03f
c0018e3d:	c1 e2 06             	shl    edx,0x6
c0018e40:	09 ea                	or     edx,ebp
c0018e42:	3c 0f                	cmp    al,0xf
c0018e44:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018e4b:	75 30                	jne    c0018e7d <CPU::detectFeatures()+0x5b3>
c0018e4d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018e53:	c1 e9 14             	shr    ecx,0x14
c0018e56:	83 e0 3f             	and    eax,0x3f
c0018e59:	83 c1 0f             	add    ecx,0xf
c0018e5c:	88 ca                	mov    dl,cl
c0018e5e:	c0 e9 02             	shr    cl,0x2
c0018e61:	c1 e2 06             	shl    edx,0x6
c0018e64:	09 d0                	or     eax,edx
c0018e66:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018e6c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018e72:	83 e0 c0             	and    eax,0xffffffc0
c0018e75:	09 c1                	or     ecx,eax
c0018e77:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018e7d:	83 ec 0c             	sub    esp,0xc
c0018e80:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018e87:	56                   	push   esi
c0018e88:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e8c:	50                   	push   eax
c0018e8d:	57                   	push   edi
c0018e8e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018e92:	55                   	push   ebp
c0018e93:	68 00 00 00 80       	push   0x80000000
c0018e98:	e8 e7 f5 ff ff       	call   c0018484 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e9d:	83 c4 20             	add    esp,0x20
c0018ea0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018ea8:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018eac:	76 1e                	jbe    c0018ecc <CPU::detectFeatures()+0x602>
c0018eae:	83 ec 0c             	sub    esp,0xc
c0018eb1:	56                   	push   esi
c0018eb2:	50                   	push   eax
c0018eb3:	57                   	push   edi
c0018eb4:	55                   	push   ebp
c0018eb5:	68 01 00 00 80       	push   0x80000001
c0018eba:	e8 c5 f5 ff ff       	call   c0018484 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ebf:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018ec9:	83 c4 20             	add    esp,0x20
c0018ecc:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018ed2:	83 f8 01             	cmp    eax,0x1
c0018ed5:	75 6f                	jne    c0018f46 <CPU::detectFeatures()+0x67c>
c0018ed7:	51                   	push   ecx
c0018ed8:	51                   	push   ecx
c0018ed9:	68 1e a7 02 c0       	push   0xc002a71e
c0018ede:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018ee2:	56                   	push   esi
c0018ee3:	e8 7b 78 fe ff       	call   c0000763 <strcpy>
c0018ee8:	5f                   	pop    edi
c0018ee9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018eef:	5d                   	pop    ebp
c0018ef0:	66 c1 e8 06          	shr    ax,0x6
c0018ef4:	0f b6 c0             	movzx  eax,al
c0018ef7:	50                   	push   eax
c0018ef8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018efe:	c1 e8 0e             	shr    eax,0xe
c0018f01:	0f b6 c0             	movzx  eax,al
c0018f04:	50                   	push   eax
c0018f05:	e8 24 f2 ff ff       	call   c001812e <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018f0a:	5a                   	pop    edx
c0018f0b:	59                   	pop    ecx
c0018f0c:	50                   	push   eax
c0018f0d:	56                   	push   esi
c0018f0e:	e8 07 79 fe ff       	call   c000081a <strcat>
c0018f13:	5f                   	pop    edi
c0018f14:	5d                   	pop    ebp
c0018f15:	56                   	push   esi
c0018f16:	53                   	push   ebx
c0018f17:	e8 16 b0 ff ff       	call   c0013f32 <Device::setName(char const*)>
c0018f1c:	58                   	pop    eax
c0018f1d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018f23:	5a                   	pop    edx
c0018f24:	68 25 a7 02 c0       	push   0xc002a725
c0018f29:	50                   	push   eax
c0018f2a:	e8 85 78 fe ff       	call   c00007b4 <strcmp>
c0018f2f:	83 c4 10             	add    esp,0x10
c0018f32:	85 c0                	test   eax,eax
c0018f34:	0f 85 71 03 00 00    	jne    c00192ab <CPU::detectFeatures()+0x9e1>
c0018f3a:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018f41:	e9 65 03 00 00       	jmp    c00192ab <CPU::detectFeatures()+0x9e1>
c0018f46:	83 f8 02             	cmp    eax,0x2
c0018f49:	0f 85 b5 00 00 00    	jne    c0019004 <CPU::detectFeatures()+0x73a>
c0018f4f:	57                   	push   edi
c0018f50:	57                   	push   edi
c0018f51:	68 37 a7 02 c0       	push   0xc002a737
c0018f56:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018f5a:	56                   	push   esi
c0018f5b:	e8 03 78 fe ff       	call   c0000763 <strcpy>
c0018f60:	5d                   	pop    ebp
c0018f61:	58                   	pop    eax
c0018f62:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f68:	66 c1 e8 06          	shr    ax,0x6
c0018f6c:	0f b6 c0             	movzx  eax,al
c0018f6f:	50                   	push   eax
c0018f70:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f76:	c1 e8 0e             	shr    eax,0xe
c0018f79:	0f b6 c0             	movzx  eax,al
c0018f7c:	50                   	push   eax
c0018f7d:	e8 18 f0 ff ff       	call   c0017f9a <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018f82:	5a                   	pop    edx
c0018f83:	59                   	pop    ecx
c0018f84:	50                   	push   eax
c0018f85:	56                   	push   esi
c0018f86:	e8 8f 78 fe ff       	call   c000081a <strcat>
c0018f8b:	5f                   	pop    edi
c0018f8c:	5d                   	pop    ebp
c0018f8d:	56                   	push   esi
c0018f8e:	53                   	push   ebx
c0018f8f:	e8 9e af ff ff       	call   c0013f32 <Device::setName(char const*)>
c0018f94:	58                   	pop    eax
c0018f95:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018f9b:	5a                   	pop    edx
c0018f9c:	68 3c a7 02 c0       	push   0xc002a73c
c0018fa1:	50                   	push   eax
c0018fa2:	e8 0d 78 fe ff       	call   c00007b4 <strcmp>
c0018fa7:	83 c4 10             	add    esp,0x10
c0018faa:	85 c0                	test   eax,eax
c0018fac:	75 20                	jne    c0018fce <CPU::detectFeatures()+0x704>
c0018fae:	8b 15 e8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0e8
c0018fb4:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018fba:	a8 01                	test   al,0x1
c0018fbc:	74 10                	je     c0018fce <CPU::detectFeatures()+0x704>
c0018fbe:	83 e0 fe             	and    eax,0xfffffffe
c0018fc1:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018fc7:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018fce:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018fd4:	c1 e8 0e             	shr    eax,0xe
c0018fd7:	3c 05                	cmp    al,0x5
c0018fd9:	0f 85 cc 02 00 00    	jne    c00192ab <CPU::detectFeatures()+0x9e1>
c0018fdf:	56                   	push   esi
c0018fe0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018fe6:	83 e0 0f             	and    eax,0xf
c0018fe9:	50                   	push   eax
c0018fea:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ff0:	66 c1 e8 06          	shr    ax,0x6
c0018ff4:	0f b6 c0             	movzx  eax,al
c0018ff7:	50                   	push   eax
c0018ff8:	6a 05                	push   0x5
c0018ffa:	e8 11 f4 ff ff       	call   c0018410 <CPU::AMD_K6_writeback(int, int, int)>
c0018fff:	e9 1f 02 00 00       	jmp    c0019223 <CPU::detectFeatures()+0x959>
c0019004:	8d 50 fd             	lea    edx,[eax-0x3]
c0019007:	83 fa 01             	cmp    edx,0x1
c001900a:	76 09                	jbe    c0019015 <CPU::detectFeatures()+0x74b>
c001900c:	83 f8 06             	cmp    eax,0x6
c001900f:	0f 85 91 01 00 00    	jne    c00191a6 <CPU::detectFeatures()+0x8dc>
c0019015:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001901b:	c1 ea 0e             	shr    edx,0xe
c001901e:	80 fa 05             	cmp    dl,0x5
c0019021:	75 7b                	jne    c001909e <CPU::detectFeatures()+0x7d4>
c0019023:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019029:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001902e:	66 81 fa 00 01       	cmp    dx,0x100
c0019033:	75 0c                	jne    c0019041 <CPU::detectFeatures()+0x777>
c0019035:	51                   	push   ecx
c0019036:	51                   	push   ecx
c0019037:	68 43 a7 02 c0       	push   0xc002a743
c001903c:	e9 dc 01 00 00       	jmp    c001921d <CPU::detectFeatures()+0x953>
c0019041:	66 81 fa 00 02       	cmp    dx,0x200
c0019046:	75 0c                	jne    c0019054 <CPU::detectFeatures()+0x78a>
c0019048:	52                   	push   edx
c0019049:	52                   	push   edx
c001904a:	68 56 a7 02 c0       	push   0xc002a756
c001904f:	e9 c9 01 00 00       	jmp    c001921d <CPU::detectFeatures()+0x953>
c0019054:	66 81 fa 40 02       	cmp    dx,0x240
c0019059:	75 0c                	jne    c0019067 <CPU::detectFeatures()+0x79d>
c001905b:	50                   	push   eax
c001905c:	50                   	push   eax
c001905d:	68 68 a7 02 c0       	push   0xc002a768
c0019062:	e9 b6 01 00 00       	jmp    c001921d <CPU::detectFeatures()+0x953>
c0019067:	83 f8 06             	cmp    eax,0x6
c001906a:	75 0c                	jne    c0019078 <CPU::detectFeatures()+0x7ae>
c001906c:	50                   	push   eax
c001906d:	50                   	push   eax
c001906e:	68 7a a7 02 c0       	push   0xc002a77a
c0019073:	e9 a5 01 00 00       	jmp    c001921d <CPU::detectFeatures()+0x953>
c0019078:	83 f8 04             	cmp    eax,0x4
c001907b:	75 0c                	jne    c0019089 <CPU::detectFeatures()+0x7bf>
c001907d:	50                   	push   eax
c001907e:	50                   	push   eax
c001907f:	68 86 a7 02 c0       	push   0xc002a786
c0019084:	e9 94 01 00 00       	jmp    c001921d <CPU::detectFeatures()+0x953>
c0019089:	83 f8 03             	cmp    eax,0x3
c001908c:	0f 85 19 02 00 00    	jne    c00192ab <CPU::detectFeatures()+0x9e1>
c0019092:	50                   	push   eax
c0019093:	50                   	push   eax
c0019094:	68 8e a7 02 c0       	push   0xc002a78e
c0019099:	e9 7f 01 00 00       	jmp    c001921d <CPU::detectFeatures()+0x953>
c001909e:	80 fa 06             	cmp    dl,0x6
c00190a1:	0f 85 db 00 00 00    	jne    c0019182 <CPU::detectFeatures()+0x8b8>
c00190a7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00190ad:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00190b2:	66 81 fa 80 01       	cmp    dx,0x180
c00190b7:	75 0c                	jne    c00190c5 <CPU::detectFeatures()+0x7fb>
c00190b9:	50                   	push   eax
c00190ba:	50                   	push   eax
c00190bb:	68 99 a7 02 c0       	push   0xc002a799
c00190c0:	e9 58 01 00 00       	jmp    c001921d <CPU::detectFeatures()+0x953>
c00190c5:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00190cb:	66 f7 c1 80 ff       	test   cx,0xff80
c00190d0:	75 0c                	jne    c00190de <CPU::detectFeatures()+0x814>
c00190d2:	50                   	push   eax
c00190d3:	50                   	push   eax
c00190d4:	68 a9 a7 02 c0       	push   0xc002a7a9
c00190d9:	e9 3f 01 00 00       	jmp    c001921d <CPU::detectFeatures()+0x953>
c00190de:	66 81 fa 40 02       	cmp    dx,0x240
c00190e3:	75 0c                	jne    c00190f1 <CPU::detectFeatures()+0x827>
c00190e5:	55                   	push   ebp
c00190e6:	55                   	push   ebp
c00190e7:	68 b0 a7 02 c0       	push   0xc002a7b0
c00190ec:	e9 2c 01 00 00       	jmp    c001921d <CPU::detectFeatures()+0x953>
c00190f1:	66 81 fa 80 02       	cmp    dx,0x280
c00190f6:	75 0c                	jne    c0019104 <CPU::detectFeatures()+0x83a>
c00190f8:	57                   	push   edi
c00190f9:	57                   	push   edi
c00190fa:	68 b9 a7 02 c0       	push   0xc002a7b9
c00190ff:	e9 19 01 00 00       	jmp    c001921d <CPU::detectFeatures()+0x953>
c0019104:	66 81 fa 40 03       	cmp    dx,0x340
c0019109:	74 ed                	je     c00190f8 <CPU::detectFeatures()+0x82e>
c001910b:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019110:	75 0c                	jne    c001911e <CPU::detectFeatures()+0x854>
c0019112:	56                   	push   esi
c0019113:	56                   	push   esi
c0019114:	68 c0 a7 02 c0       	push   0xc002a7c0
c0019119:	e9 ff 00 00 00       	jmp    c001921d <CPU::detectFeatures()+0x953>
c001911e:	83 f8 06             	cmp    eax,0x6
c0019121:	0f 84 45 ff ff ff    	je     c001906c <CPU::detectFeatures()+0x7a2>
c0019127:	83 f8 04             	cmp    eax,0x4
c001912a:	0f 84 4d ff ff ff    	je     c001907d <CPU::detectFeatures()+0x7b3>
c0019130:	83 f8 03             	cmp    eax,0x3
c0019133:	0f 85 72 01 00 00    	jne    c00192ab <CPU::detectFeatures()+0x9e1>
c0019139:	51                   	push   ecx
c001913a:	51                   	push   ecx
c001913b:	68 c9 a7 02 c0       	push   0xc002a7c9
c0019140:	53                   	push   ebx
c0019141:	e8 ec ad ff ff       	call   c0013f32 <Device::setName(char const*)>
c0019146:	b1 c1                	mov    cl,0xc1
c0019148:	88 c8                	mov    al,cl
c001914a:	e6 22                	out    0x22,al
c001914c:	e4 23                	in     al,0x23
c001914e:	88 c2                	mov    dl,al
c0019150:	88 c8                	mov    al,cl
c0019152:	e6 22                	out    0x22,al
c0019154:	88 d0                	mov    al,dl
c0019156:	83 c8 10             	or     eax,0x10
c0019159:	e6 23                	out    0x23,al
c001915b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019162:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019165:	89 d0                	mov    eax,edx
c0019167:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001916d:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019171:	40                   	inc    eax
c0019172:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019178:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001917d:	e9 a1 00 00 00       	jmp    c0019223 <CPU::detectFeatures()+0x959>
c0019182:	83 f8 06             	cmp    eax,0x6
c0019185:	0f 84 e1 fe ff ff    	je     c001906c <CPU::detectFeatures()+0x7a2>
c001918b:	83 f8 04             	cmp    eax,0x4
c001918e:	0f 84 e9 fe ff ff    	je     c001907d <CPU::detectFeatures()+0x7b3>
c0019194:	83 f8 03             	cmp    eax,0x3
c0019197:	0f 85 0e 01 00 00    	jne    c00192ab <CPU::detectFeatures()+0x9e1>
c001919d:	52                   	push   edx
c001919e:	52                   	push   edx
c001919f:	68 d4 a7 02 c0       	push   0xc002a7d4
c00191a4:	eb 77                	jmp    c001921d <CPU::detectFeatures()+0x953>
c00191a6:	83 f8 07             	cmp    eax,0x7
c00191a9:	75 09                	jne    c00191b4 <CPU::detectFeatures()+0x8ea>
c00191ab:	50                   	push   eax
c00191ac:	50                   	push   eax
c00191ad:	68 de a7 02 c0       	push   0xc002a7de
c00191b2:	eb 69                	jmp    c001921d <CPU::detectFeatures()+0x953>
c00191b4:	83 f8 0a             	cmp    eax,0xa
c00191b7:	75 09                	jne    c00191c2 <CPU::detectFeatures()+0x8f8>
c00191b9:	50                   	push   eax
c00191ba:	50                   	push   eax
c00191bb:	68 e9 a7 02 c0       	push   0xc002a7e9
c00191c0:	eb 5b                	jmp    c001921d <CPU::detectFeatures()+0x953>
c00191c2:	83 f8 0b             	cmp    eax,0xb
c00191c5:	75 09                	jne    c00191d0 <CPU::detectFeatures()+0x906>
c00191c7:	50                   	push   eax
c00191c8:	50                   	push   eax
c00191c9:	68 f1 a7 02 c0       	push   0xc002a7f1
c00191ce:	eb 4d                	jmp    c001921d <CPU::detectFeatures()+0x953>
c00191d0:	83 f8 08             	cmp    eax,0x8
c00191d3:	75 09                	jne    c00191de <CPU::detectFeatures()+0x914>
c00191d5:	50                   	push   eax
c00191d6:	50                   	push   eax
c00191d7:	68 fa a7 02 c0       	push   0xc002a7fa
c00191dc:	eb 3f                	jmp    c001921d <CPU::detectFeatures()+0x953>
c00191de:	83 f8 09             	cmp    eax,0x9
c00191e1:	75 09                	jne    c00191ec <CPU::detectFeatures()+0x922>
c00191e3:	50                   	push   eax
c00191e4:	50                   	push   eax
c00191e5:	68 02 a8 02 c0       	push   0xc002a802
c00191ea:	eb 31                	jmp    c001921d <CPU::detectFeatures()+0x953>
c00191ec:	83 f8 05             	cmp    eax,0x5
c00191ef:	75 09                	jne    c00191fa <CPU::detectFeatures()+0x930>
c00191f1:	50                   	push   eax
c00191f2:	50                   	push   eax
c00191f3:	68 0a a8 02 c0       	push   0xc002a80a
c00191f8:	eb 23                	jmp    c001921d <CPU::detectFeatures()+0x953>
c00191fa:	83 f8 0c             	cmp    eax,0xc
c00191fd:	75 09                	jne    c0019208 <CPU::detectFeatures()+0x93e>
c00191ff:	55                   	push   ebp
c0019200:	55                   	push   ebp
c0019201:	68 18 a8 02 c0       	push   0xc002a818
c0019206:	eb 15                	jmp    c001921d <CPU::detectFeatures()+0x953>
c0019208:	83 f8 0d             	cmp    eax,0xd
c001920b:	75 09                	jne    c0019216 <CPU::detectFeatures()+0x94c>
c001920d:	57                   	push   edi
c001920e:	57                   	push   edi
c001920f:	68 23 a8 02 c0       	push   0xc002a823
c0019214:	eb 07                	jmp    c001921d <CPU::detectFeatures()+0x953>
c0019216:	56                   	push   esi
c0019217:	56                   	push   esi
c0019218:	68 37 a8 02 c0       	push   0xc002a837
c001921d:	53                   	push   ebx
c001921e:	e8 0f ad ff ff       	call   c0013f32 <Device::setName(char const*)>
c0019223:	83 c4 10             	add    esp,0x10
c0019226:	e9 80 00 00 00       	jmp    c00192ab <CPU::detectFeatures()+0x9e1>
c001922b:	51                   	push   ecx
c001922c:	51                   	push   ecx
c001922d:	68 83 a6 02 c0       	push   0xc002a683
c0019232:	57                   	push   edi
c0019233:	e8 2b 75 fe ff       	call   c0000763 <strcpy>
c0019238:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019242:	e8 67 70 fe ff       	call   c00002ae <is486>
c0019247:	83 c4 10             	add    esp,0x10
c001924a:	85 c0                	test   eax,eax
c001924c:	74 2b                	je     c0019279 <CPU::detectFeatures()+0x9af>
c001924e:	52                   	push   edx
c001924f:	52                   	push   edx
c0019250:	68 43 a8 02 c0       	push   0xc002a843
c0019255:	53                   	push   ebx
c0019256:	e8 d7 ac ff ff       	call   c0013f32 <Device::setName(char const*)>
c001925b:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019262:	0f 20 c0             	mov    eax,cr0
c0019265:	83 e0 14             	and    eax,0x14
c0019268:	83 c4 10             	add    esp,0x10
c001926b:	83 f8 04             	cmp    eax,0x4
c001926e:	75 1f                	jne    c001928f <CPU::detectFeatures()+0x9c5>
c0019270:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019277:	eb 32                	jmp    c00192ab <CPU::detectFeatures()+0x9e1>
c0019279:	50                   	push   eax
c001927a:	50                   	push   eax
c001927b:	68 4e a8 02 c0       	push   0xc002a84e
c0019280:	53                   	push   ebx
c0019281:	e8 ac ac ff ff       	call   c0013f32 <Device::setName(char const*)>
c0019286:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001928d:	eb d3                	jmp    c0019262 <CPU::detectFeatures()+0x998>
c001928f:	e8 f5 6f fe ff       	call   c0000289 <hasLegacyFPU>
c0019294:	83 e0 01             	and    eax,0x1
c0019297:	8d 14 00             	lea    edx,[eax+eax*1]
c001929a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00192a0:	83 e0 fd             	and    eax,0xfffffffd
c00192a3:	09 d0                	or     eax,edx
c00192a5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00192ab:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00192b2:	83 c4 4c             	add    esp,0x4c
c00192b5:	5b                   	pop    ebx
c00192b6:	5e                   	pop    esi
c00192b7:	5f                   	pop    edi
c00192b8:	5d                   	pop    ebp
c00192b9:	c3                   	ret    

c00192ba <CPU::setupSMEP()>:
c00192ba:	0f 20 e0             	mov    eax,cr4
c00192bd:	0d 00 00 10 00       	or     eax,0x100000
c00192c2:	0f 22 e0             	mov    cr4,eax
c00192c5:	c3                   	ret    

c00192c6 <CPU::setupUMIP()>:
c00192c6:	0f 20 e0             	mov    eax,cr4
c00192c9:	80 cc 08             	or     ah,0x8
c00192cc:	0f 22 e0             	mov    cr4,eax
c00192cf:	c3                   	ret    

c00192d0 <CPU::setupTSC()>:
c00192d0:	0f 20 e0             	mov    eax,cr4
c00192d3:	83 c8 04             	or     eax,0x4
c00192d6:	0f 22 e0             	mov    cr4,eax
c00192d9:	c3                   	ret    

c00192da <CPU::setupLargePages()>:
c00192da:	0f 20 e0             	mov    eax,cr4
c00192dd:	83 c8 10             	or     eax,0x10
c00192e0:	0f 22 e0             	mov    cr4,eax
c00192e3:	c3                   	ret    

c00192e4 <CPU::setupPAT()>:
c00192e4:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c00192e9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00192f0:	74 2c                	je     c001931e <CPU::setupPAT()+0x3a>
c00192f2:	53                   	push   ebx
c00192f3:	83 ec 10             	sub    esp,0x10
c00192f6:	68 77 02 00 00       	push   0x277
c00192fb:	50                   	push   eax
c00192fc:	e8 cb 58 ff ff       	call   c000ebcc <Computer::rdmsr(unsigned int)>
c0019301:	83 e2 f8             	and    edx,0xfffffff8
c0019304:	83 ca 01             	or     edx,0x1
c0019307:	52                   	push   edx
c0019308:	50                   	push   eax
c0019309:	68 77 02 00 00       	push   0x277
c001930e:	ff 35 e8 d0 02 c0    	push   DWORD PTR ds:0xc002d0e8
c0019314:	e8 df 58 ff ff       	call   c000ebf8 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019319:	83 c4 28             	add    esp,0x28
c001931c:	5b                   	pop    ebx
c001931d:	c3                   	ret    
c001931e:	c3                   	ret    
c001931f:	90                   	nop

c0019320 <CPU::setupMTRR()>:
c0019320:	c3                   	ret    
c0019321:	90                   	nop

c0019322 <CPU::setupGlobalPages()>:
c0019322:	0f 20 e0             	mov    eax,cr4
c0019325:	0c 80                	or     al,0x80
c0019327:	0f 22 e0             	mov    cr4,eax
c001932a:	c3                   	ret    
c001932b:	90                   	nop

c001932c <CPU::allowUsermodeDataAccess()>:
c001932c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019330:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019337:	74 03                	je     c001933c <CPU::allowUsermodeDataAccess()+0x10>
c0019339:	0f 01 cb             	stac   
c001933c:	c3                   	ret    
c001933d:	90                   	nop

c001933e <CPU::prohibitUsermodeDataAccess()>:
c001933e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019342:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019349:	74 03                	je     c001934e <CPU::prohibitUsermodeDataAccess()+0x10>
c001934b:	0f 01 ca             	clac   
c001934e:	c3                   	ret    
c001934f:	90                   	nop

c0019350 <CPU::setupSMAP()>:
c0019350:	0f 20 e0             	mov    eax,cr4
c0019353:	0d 00 00 20 00       	or     eax,0x200000
c0019358:	0f 22 e0             	mov    cr4,eax
c001935b:	eb e1                	jmp    c001933e <CPU::prohibitUsermodeDataAccess()>
c001935d:	90                   	nop

c001935e <CPU::setupFeatures()>:
c001935e:	83 ec 0c             	sub    esp,0xc
c0019361:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019365:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c001936c:	74 07                	je     c0019375 <CPU::setupFeatures()+0x17>
c001936e:	52                   	push   edx
c001936f:	e8 46 ff ff ff       	call   c00192ba <CPU::setupSMEP()>
c0019374:	58                   	pop    eax
c0019375:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c001937c:	74 07                	je     c0019385 <CPU::setupFeatures()+0x27>
c001937e:	52                   	push   edx
c001937f:	e8 cc ff ff ff       	call   c0019350 <CPU::setupSMAP()>
c0019384:	58                   	pop    eax
c0019385:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c001938c:	74 07                	je     c0019395 <CPU::setupFeatures()+0x37>
c001938e:	52                   	push   edx
c001938f:	e8 32 ff ff ff       	call   c00192c6 <CPU::setupUMIP()>
c0019394:	58                   	pop    eax
c0019395:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c001939c:	74 07                	je     c00193a5 <CPU::setupFeatures()+0x47>
c001939e:	52                   	push   edx
c001939f:	e8 2c ff ff ff       	call   c00192d0 <CPU::setupTSC()>
c00193a4:	58                   	pop    eax
c00193a5:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00193ac:	74 07                	je     c00193b5 <CPU::setupFeatures()+0x57>
c00193ae:	52                   	push   edx
c00193af:	e8 26 ff ff ff       	call   c00192da <CPU::setupLargePages()>
c00193b4:	59                   	pop    ecx
c00193b5:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00193bc:	74 07                	je     c00193c5 <CPU::setupFeatures()+0x67>
c00193be:	52                   	push   edx
c00193bf:	e8 5e ff ff ff       	call   c0019322 <CPU::setupGlobalPages()>
c00193c4:	58                   	pop    eax
c00193c5:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00193cc:	74 0c                	je     c00193da <CPU::setupFeatures()+0x7c>
c00193ce:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00193d2:	83 c4 0c             	add    esp,0xc
c00193d5:	e9 0a ff ff ff       	jmp    c00192e4 <CPU::setupPAT()>
c00193da:	83 c4 0c             	add    esp,0xc
c00193dd:	c3                   	ret    

c00193de <CPU::open(int, int, void*)>:
c00193de:	57                   	push   edi
c00193df:	56                   	push   esi
c00193e0:	53                   	push   ebx
c00193e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00193e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00193e9:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00193ef:	83 ec 0c             	sub    esp,0xc
c00193f2:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00193f8:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00193fe:	50                   	push   eax
c00193ff:	e8 ea 5a ff ff       	call   c000eeee <GDT::setup()>
c0019404:	83 c4 0c             	add    esp,0xc
c0019407:	6a 00                	push   0x0
c0019409:	68 ef be ad de       	push   0xdeadbeef
c001940e:	57                   	push   edi
c001940f:	e8 96 7e ff ff       	call   c00112aa <TSS::setup(unsigned long, unsigned long)>
c0019414:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019417:	e8 6e 7e ff ff       	call   c001128a <TSS::flush()>
c001941c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019422:	89 04 24             	mov    DWORD PTR [esp],eax
c0019425:	e8 20 5d ff ff       	call   c000f14a <IDT::setup()>
c001942a:	b8 00 04 00 00       	mov    eax,0x400
c001942f:	0f 23 f8             	mov    db7,eax
c0019432:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001943c:	e8 b6 68 ff ff       	call   c000fcf7 <Phys::allocatePage()>
c0019441:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019447:	89 30                	mov    DWORD PTR [eax],esi
c0019449:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001944f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019452:	58                   	pop    eax
c0019453:	5a                   	pop    edx
c0019454:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001945a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001945e:	e8 79 8e ff ff       	call   c00122dc <VAS::setCPUSpecific(unsigned long)>
c0019463:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019466:	e8 5f f4 ff ff       	call   c00188ca <CPU::detectFeatures()>
c001946b:	e8 a6 bd ff ff       	call   c0015216 <setupInterruptController()>
c0019470:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019476:	a1 00 d1 02 c0       	mov    eax,ds:0xc002d100
c001947b:	83 e0 10             	and    eax,0x10
c001947e:	83 f8 01             	cmp    eax,0x1
c0019481:	19 c0                	sbb    eax,eax
c0019483:	83 e0 46             	and    eax,0x46
c0019486:	83 c0 1e             	add    eax,0x1e
c0019489:	89 04 24             	mov    DWORD PTR [esp],eax
c001948c:	e8 3d d2 ff ff       	call   c00166ce <setupTimer(int)>
c0019491:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019497:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001949a:	e8 bf fe ff ff       	call   c001935e <CPU::setupFeatures()>
c001949f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00194a2:	e8 a7 f1 ff ff       	call   c001864e <CPU::displayFeatures()>
c00194a7:	83 c4 10             	add    esp,0x10
c00194aa:	31 c0                	xor    eax,eax
c00194ac:	5b                   	pop    ebx
c00194ad:	5e                   	pop    esi
c00194ae:	5f                   	pop    edi
c00194af:	c3                   	ret    

c00194b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00194b0:	57                   	push   edi
c00194b1:	56                   	push   esi
c00194b2:	53                   	push   ebx
c00194b3:	51                   	push   ecx
c00194b4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00194b8:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00194bb:	0f 02 c0             	lar    eax,ax
c00194be:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00194c1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00194c5:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00194c8:	88 ca                	mov    dl,cl
c00194ca:	c0 ea 06             	shr    dl,0x6
c00194cd:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00194d1:	89 ca                	mov    edx,ecx
c00194d3:	66 c1 ea 03          	shr    dx,0x3
c00194d7:	83 e2 07             	and    edx,0x7
c00194da:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00194df:	88 17                	mov    BYTE PTR [edi],dl
c00194e1:	0f 84 a6 01 00 00    	je     c001968d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00194e7:	83 e1 07             	and    ecx,0x7
c00194ea:	80 f9 04             	cmp    cl,0x4
c00194ed:	0f 84 98 00 00 00    	je     c001958b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00194f3:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00194f8:	0f 95 c0             	setne  al
c00194fb:	80 f9 05             	cmp    cl,0x5
c00194fe:	0f 95 c2             	setne  dl
c0019501:	08 c2                	or     dl,al
c0019503:	74 79                	je     c001957e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019505:	84 c9                	test   cl,cl
c0019507:	75 05                	jne    c001950e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019509:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001950c:	eb 3c                	jmp    c001954a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001950e:	80 f9 01             	cmp    cl,0x1
c0019511:	75 05                	jne    c0019518 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019513:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019516:	eb 32                	jmp    c001954a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019518:	80 f9 02             	cmp    cl,0x2
c001951b:	75 05                	jne    c0019522 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001951d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019520:	eb 28                	jmp    c001954a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019522:	31 c0                	xor    eax,eax
c0019524:	80 f9 03             	cmp    cl,0x3
c0019527:	75 05                	jne    c001952e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019529:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001952c:	eb 1c                	jmp    c001954a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001952e:	80 f9 05             	cmp    cl,0x5
c0019531:	75 05                	jne    c0019538 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019533:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019536:	eb 12                	jmp    c001954a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019538:	80 f9 06             	cmp    cl,0x6
c001953b:	75 05                	jne    c0019542 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001953d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019540:	eb 08                	jmp    c001954a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019542:	80 f9 07             	cmp    cl,0x7
c0019545:	75 03                	jne    c001954a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019547:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001954a:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001954f:	75 10                	jne    c0019561 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019551:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019555:	b9 03 00 00 00       	mov    ecx,0x3
c001955a:	01 d0                	add    eax,edx
c001955c:	e9 37 01 00 00       	jmp    c0019698 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019561:	b9 02 00 00 00       	mov    ecx,0x2
c0019566:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001956b:	0f 85 27 01 00 00    	jne    c0019698 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019571:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019574:	b9 06 00 00 00       	mov    ecx,0x6
c0019579:	e9 1a 01 00 00       	jmp    c0019698 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001957e:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019581:	b9 06 00 00 00       	mov    ecx,0x6
c0019586:	e9 0f 01 00 00       	jmp    c001969a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001958b:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001958e:	88 ca                	mov    dl,cl
c0019590:	c0 ea 06             	shr    dl,0x6
c0019593:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019597:	89 ca                	mov    edx,ecx
c0019599:	66 c1 ea 03          	shr    dx,0x3
c001959d:	83 e2 07             	and    edx,0x7
c00195a0:	80 e1 07             	and    cl,0x7
c00195a3:	75 05                	jne    c00195aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00195a5:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00195a8:	eb 4c                	jmp    c00195f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00195aa:	80 f9 01             	cmp    cl,0x1
c00195ad:	75 05                	jne    c00195b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00195af:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00195b2:	eb 42                	jmp    c00195f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00195b4:	80 f9 02             	cmp    cl,0x2
c00195b7:	75 05                	jne    c00195be <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00195b9:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00195bc:	eb 38                	jmp    c00195f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00195be:	80 f9 03             	cmp    cl,0x3
c00195c1:	75 05                	jne    c00195c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00195c3:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00195c6:	eb 2e                	jmp    c00195f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00195c8:	80 f9 04             	cmp    cl,0x4
c00195cb:	75 12                	jne    c00195df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00195cd:	f6 c4 60             	test   ah,0x60
c00195d0:	75 08                	jne    c00195da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00195d2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00195d5:	8d 78 14             	lea    edi,[eax+0x14]
c00195d8:	eb 1c                	jmp    c00195f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00195da:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00195dd:	eb 17                	jmp    c00195f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00195df:	80 f9 05             	cmp    cl,0x5
c00195e2:	75 05                	jne    c00195e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00195e4:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00195e7:	eb 0d                	jmp    c00195f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00195e9:	80 f9 06             	cmp    cl,0x6
c00195ec:	75 05                	jne    c00195f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00195ee:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00195f1:	eb 03                	jmp    c00195f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00195f3:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00195f6:	84 d2                	test   dl,dl
c00195f8:	75 05                	jne    c00195ff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00195fa:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00195fd:	eb 3c                	jmp    c001963b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00195ff:	80 fa 01             	cmp    dl,0x1
c0019602:	75 05                	jne    c0019609 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019604:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019607:	eb 32                	jmp    c001963b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019609:	80 fa 02             	cmp    dl,0x2
c001960c:	75 05                	jne    c0019613 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001960e:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019611:	eb 28                	jmp    c001963b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019613:	80 fa 03             	cmp    dl,0x3
c0019616:	75 05                	jne    c001961d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019618:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001961b:	eb 1e                	jmp    c001963b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001961d:	31 c0                	xor    eax,eax
c001961f:	80 fa 04             	cmp    dl,0x4
c0019622:	74 17                	je     c001963b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019624:	80 fa 05             	cmp    dl,0x5
c0019627:	75 05                	jne    c001962e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019629:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001962c:	eb 0d                	jmp    c001963b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001962e:	80 fa 06             	cmp    dl,0x6
c0019631:	75 05                	jne    c0019638 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019633:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019636:	eb 03                	jmp    c001963b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019638:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001963b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019640:	0f 94 c2             	sete   dl
c0019643:	80 f9 05             	cmp    cl,0x5
c0019646:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001964a:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001964f:	d3 e0                	shl    eax,cl
c0019651:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019655:	74 0a                	je     c0019661 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019657:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001965a:	b9 07 00 00 00       	mov    ecx,0x7
c001965f:	eb 37                	jmp    c0019698 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019661:	01 f8                	add    eax,edi
c0019663:	b9 03 00 00 00       	mov    ecx,0x3
c0019668:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001966d:	74 2b                	je     c001969a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001966f:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019674:	75 0d                	jne    c0019683 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019676:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001967a:	01 c8                	add    eax,ecx
c001967c:	b9 04 00 00 00       	mov    ecx,0x4
c0019681:	eb 17                	jmp    c001969a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019683:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019686:	b9 07 00 00 00       	mov    ecx,0x7
c001968b:	eb 0d                	jmp    c001969a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001968d:	b9 02 00 00 00       	mov    ecx,0x2
c0019692:	b2 01                	mov    dl,0x1
c0019694:	31 c0                	xor    eax,eax
c0019696:	eb 02                	jmp    c001969a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019698:	31 d2                	xor    edx,edx
c001969a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001969e:	89 0b                	mov    DWORD PTR [ebx],ecx
c00196a0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00196a4:	88 11                	mov    BYTE PTR [ecx],dl
c00196a6:	5a                   	pop    edx
c00196a7:	5b                   	pop    ebx
c00196a8:	5e                   	pop    esi
c00196a9:	5f                   	pop    edi
c00196aa:	c3                   	ret    
c00196ab:	90                   	nop

c00196ac <EnvVarContainer::getEnv(char const*)>:
c00196ac:	57                   	push   edi
c00196ad:	56                   	push   esi
c00196ae:	53                   	push   ebx
c00196af:	31 db                	xor    ebx,ebx
c00196b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00196b5:	39 1e                	cmp    DWORD PTR [esi],ebx
c00196b7:	7e 2b                	jle    c00196e4 <EnvVarContainer::getEnv(char const*)+0x38>
c00196b9:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00196c0:	50                   	push   eax
c00196c1:	50                   	push   eax
c00196c2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00196c5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00196c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00196cc:	e8 e3 70 fe ff       	call   c00007b4 <strcmp>
c00196d1:	83 c4 10             	add    esp,0x10
c00196d4:	85 c0                	test   eax,eax
c00196d6:	75 09                	jne    c00196e1 <EnvVarContainer::getEnv(char const*)+0x35>
c00196d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00196db:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00196df:	eb 05                	jmp    c00196e6 <EnvVarContainer::getEnv(char const*)+0x3a>
c00196e1:	43                   	inc    ebx
c00196e2:	eb d1                	jmp    c00196b5 <EnvVarContainer::getEnv(char const*)+0x9>
c00196e4:	31 c0                	xor    eax,eax
c00196e6:	5b                   	pop    ebx
c00196e7:	5e                   	pop    esi
c00196e8:	5f                   	pop    edi
c00196e9:	c3                   	ret    

c00196ea <EnvVarContainer::setEnv(char const*, char const*)>:
c00196ea:	57                   	push   edi
c00196eb:	56                   	push   esi
c00196ec:	53                   	push   ebx
c00196ed:	83 ec 1c             	sub    esp,0x1c
c00196f0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00196f4:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00196f8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00196fc:	57                   	push   edi
c00196fd:	e8 df 6f fe ff       	call   c00006e1 <strlen>
c0019702:	40                   	inc    eax
c0019703:	89 04 24             	mov    DWORD PTR [esp],eax
c0019706:	e8 4f 5f ff ff       	call   c000f65a <malloc>
c001970b:	89 34 24             	mov    DWORD PTR [esp],esi
c001970e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019712:	e8 ca 6f fe ff       	call   c00006e1 <strlen>
c0019717:	40                   	inc    eax
c0019718:	89 04 24             	mov    DWORD PTR [esp],eax
c001971b:	e8 3a 5f ff ff       	call   c000f65a <malloc>
c0019720:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019723:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019727:	e8 b5 6f fe ff       	call   c00006e1 <strlen>
c001972c:	83 c4 0c             	add    esp,0xc
c001972f:	40                   	inc    eax
c0019730:	50                   	push   eax
c0019731:	6a 00                	push   0x0
c0019733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019737:	e8 88 6f fe ff       	call   c00006c4 <memset>
c001973c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001973f:	e8 9d 6f fe ff       	call   c00006e1 <strlen>
c0019744:	83 c4 0c             	add    esp,0xc
c0019747:	40                   	inc    eax
c0019748:	50                   	push   eax
c0019749:	57                   	push   edi
c001974a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001974e:	e8 4d 6f fe ff       	call   c00006a0 <memcpy>
c0019753:	89 34 24             	mov    DWORD PTR [esp],esi
c0019756:	e8 86 6f fe ff       	call   c00006e1 <strlen>
c001975b:	83 c4 0c             	add    esp,0xc
c001975e:	40                   	inc    eax
c001975f:	50                   	push   eax
c0019760:	6a 00                	push   0x0
c0019762:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019766:	e8 59 6f fe ff       	call   c00006c4 <memset>
c001976b:	89 34 24             	mov    DWORD PTR [esp],esi
c001976e:	e8 6e 6f fe ff       	call   c00006e1 <strlen>
c0019773:	83 c4 0c             	add    esp,0xc
c0019776:	40                   	inc    eax
c0019777:	50                   	push   eax
c0019778:	56                   	push   esi
c0019779:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001977d:	e8 1e 6f fe ff       	call   c00006a0 <memcpy>
c0019782:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019784:	40                   	inc    eax
c0019785:	89 03                	mov    DWORD PTR [ebx],eax
c0019787:	c1 e0 03             	shl    eax,0x3
c001978a:	5a                   	pop    edx
c001978b:	59                   	pop    ecx
c001978c:	50                   	push   eax
c001978d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0019790:	e8 b1 5e ff ff       	call   c000f646 <realloc>
c0019795:	83 c4 0c             	add    esp,0xc
c0019798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001979b:	6a 08                	push   0x8
c001979d:	8d 54 24 10          	lea    edx,[esp+0x10]
c00197a1:	52                   	push   edx
c00197a2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00197a4:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c00197a8:	50                   	push   eax
c00197a9:	e8 f2 6e fe ff       	call   c00006a0 <memcpy>
c00197ae:	83 c4 20             	add    esp,0x20
c00197b1:	5b                   	pop    ebx
c00197b2:	5e                   	pop    esi
c00197b3:	5f                   	pop    edi
c00197b4:	c3                   	ret    
c00197b5:	90                   	nop

c00197b6 <EnvVarContainer::deleteEnv(char const*)>:
c00197b6:	c3                   	ret    
c00197b7:	90                   	nop

c00197b8 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00197b8:	55                   	push   ebp
c00197b9:	57                   	push   edi
c00197ba:	56                   	push   esi
c00197bb:	53                   	push   ebx
c00197bc:	81 ec 38 01 00 00    	sub    esp,0x138
c00197c2:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c00197c9:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c00197d0:	68 14 01 00 00       	push   0x114
c00197d5:	e8 80 5e ff ff       	call   c000f65a <malloc>
c00197da:	83 c4 0c             	add    esp,0xc
c00197dd:	89 c7                	mov    edi,eax
c00197df:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00197e2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00197e9:	50                   	push   eax
c00197ea:	e8 93 96 ff ff       	call   c0012e82 <File::File(char const*, Process*)>
c00197ef:	89 3c 24             	mov    DWORD PTR [esp],edi
c00197f2:	e8 5d 99 ff ff       	call   c0013154 <File::exists()>
c00197f7:	83 c4 10             	add    esp,0x10
c00197fa:	84 c0                	test   al,al
c00197fc:	75 31                	jne    c001982f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00197fe:	51                   	push   ecx
c00197ff:	51                   	push   ecx
c0019800:	6a 12                	push   0x12
c0019802:	57                   	push   edi
c0019803:	e8 de 96 ff ff       	call   c0012ee6 <File::open(FileOpenMode)>
c0019808:	8b 07                	mov    eax,DWORD PTR [edi]
c001980a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001980d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019810:	e8 cc 6e fe ff       	call   c00006e1 <strlen>
c0019815:	5a                   	pop    edx
c0019816:	31 d2                	xor    edx,edx
c0019818:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001981c:	51                   	push   ecx
c001981d:	55                   	push   ebp
c001981e:	52                   	push   edx
c001981f:	50                   	push   eax
c0019820:	57                   	push   edi
c0019821:	ff d3                	call   ebx
c0019823:	83 c4 14             	add    esp,0x14
c0019826:	57                   	push   edi
c0019827:	e8 18 97 ff ff       	call   c0012f44 <File::close()>
c001982c:	83 c4 10             	add    esp,0x10
c001982f:	31 db                	xor    ebx,ebx
c0019831:	50                   	push   eax
c0019832:	31 ed                	xor    ebp,ebp
c0019834:	68 00 01 00 00       	push   0x100
c0019839:	6a 00                	push   0x0
c001983b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001983f:	50                   	push   eax
c0019840:	e8 7f 6e fe ff       	call   c00006c4 <memset>
c0019845:	58                   	pop    eax
c0019846:	5a                   	pop    edx
c0019847:	6a 01                	push   0x1
c0019849:	57                   	push   edi
c001984a:	e8 97 96 ff ff       	call   c0012ee6 <File::open(FileOpenMode)>
c001984f:	83 c4 10             	add    esp,0x10
c0019852:	83 ec 0c             	sub    esp,0xc
c0019855:	8b 07                	mov    eax,DWORD PTR [edi]
c0019857:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001985b:	51                   	push   ecx
c001985c:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019860:	52                   	push   edx
c0019861:	6a 00                	push   0x0
c0019863:	6a 01                	push   0x1
c0019865:	57                   	push   edi
c0019866:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019869:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001986d:	83 c4 20             	add    esp,0x20
c0019870:	3c 0d                	cmp    al,0xd
c0019872:	0f 84 12 01 00 00    	je     c001998a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019878:	85 db                	test   ebx,ebx
c001987a:	0f 84 fd 00 00 00    	je     c001997d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019880:	3c 0a                	cmp    al,0xa
c0019882:	74 13                	je     c0019897 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019884:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019889:	74 0c                	je     c0019897 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001988b:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c0019891:	0f 8e e6 00 00 00    	jle    c001997d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019897:	83 ec 0c             	sub    esp,0xc
c001989a:	8d 53 01             	lea    edx,[ebx+0x1]
c001989d:	29 dd                	sub    ebp,ebx
c001989f:	52                   	push   edx
c00198a0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00198a4:	e8 b1 5d ff ff       	call   c000f65a <malloc>
c00198a9:	8d 4d 04             	lea    ecx,[ebp+0x4]
c00198ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00198b0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00198b3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00198b7:	e8 9e 5d ff ff       	call   c000f65a <malloc>
c00198bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00198c0:	83 c4 0c             	add    esp,0xc
c00198c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00198c7:	52                   	push   edx
c00198c8:	6a 00                	push   0x0
c00198ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00198ce:	e8 f1 6d fe ff       	call   c00006c4 <memset>
c00198d3:	83 c4 0c             	add    esp,0xc
c00198d6:	53                   	push   ebx
c00198d7:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00198db:	55                   	push   ebp
c00198dc:	01 eb                	add    ebx,ebp
c00198de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00198e2:	e8 b9 6d fe ff       	call   c00006a0 <memcpy>
c00198e7:	83 c4 0c             	add    esp,0xc
c00198ea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198ee:	51                   	push   ecx
c00198ef:	6a 00                	push   0x0
c00198f1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00198f5:	e8 ca 6d fe ff       	call   c00006c4 <memset>
c00198fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198fd:	e8 df 6d fe ff       	call   c00006e1 <strlen>
c0019902:	83 c4 0c             	add    esp,0xc
c0019905:	50                   	push   eax
c0019906:	53                   	push   ebx
c0019907:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001990b:	e8 90 6d fe ff       	call   c00006a0 <memcpy>
c0019910:	5b                   	pop    ebx
c0019911:	58                   	pop    eax
c0019912:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019916:	68 88 a8 02 c0       	push   0xc002a888
c001991b:	e8 09 90 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0019920:	8b 06                	mov    eax,DWORD PTR [esi]
c0019922:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019925:	40                   	inc    eax
c0019926:	83 c4 10             	add    esp,0x10
c0019929:	89 06                	mov    DWORD PTR [esi],eax
c001992b:	85 d2                	test   edx,edx
c001992d:	75 0c                	jne    c001993b <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001992f:	83 ec 0c             	sub    esp,0xc
c0019932:	6a 08                	push   0x8
c0019934:	e8 21 5d ff ff       	call   c000f65a <malloc>
c0019939:	eb 0c                	jmp    c0019947 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001993b:	c1 e0 03             	shl    eax,0x3
c001993e:	51                   	push   ecx
c001993f:	51                   	push   ecx
c0019940:	50                   	push   eax
c0019941:	52                   	push   edx
c0019942:	e8 ff 5c ff ff       	call   c000f646 <realloc>
c0019947:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001994a:	83 c4 10             	add    esp,0x10
c001994d:	31 db                	xor    ebx,ebx
c001994f:	52                   	push   edx
c0019950:	6a 08                	push   0x8
c0019952:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019956:	50                   	push   eax
c0019957:	8b 16                	mov    edx,DWORD PTR [esi]
c0019959:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001995c:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019960:	50                   	push   eax
c0019961:	e8 3a 6d fe ff       	call   c00006a0 <memcpy>
c0019966:	83 c4 0c             	add    esp,0xc
c0019969:	68 00 01 00 00       	push   0x100
c001996e:	6a 00                	push   0x0
c0019970:	55                   	push   ebp
c0019971:	31 ed                	xor    ebp,ebp
c0019973:	e8 4c 6d fe ff       	call   c00006c4 <memset>
c0019978:	83 c4 10             	add    esp,0x10
c001997b:	eb 0d                	jmp    c001998a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001997d:	3c 3d                	cmp    al,0x3d
c001997f:	74 07                	je     c0019988 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c0019981:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c0019985:	45                   	inc    ebp
c0019986:	eb 02                	jmp    c001998a <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019988:	89 eb                	mov    ebx,ebp
c001998a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001998f:	0f 85 bd fe ff ff    	jne    c0019852 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c0019995:	50                   	push   eax
c0019996:	50                   	push   eax
c0019997:	ff 36                	push   DWORD PTR [esi]
c0019999:	68 96 a8 02 c0       	push   0xc002a896
c001999e:	e8 86 8f ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00199a3:	81 c4 3c 01 00 00    	add    esp,0x13c
c00199a9:	5b                   	pop    ebx
c00199aa:	5e                   	pop    esi
c00199ab:	5f                   	pop    edi
c00199ac:	5d                   	pop    ebp
c00199ad:	c3                   	ret    

c00199ae <EnvVarContainer::__loadSystem()>:
c00199ae:	83 ec 10             	sub    esp,0x10
c00199b1:	68 20 c6 02 c0       	push   0xc002c620
c00199b6:	68 c1 a8 02 c0       	push   0xc002a8c1
c00199bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00199bf:	e8 f4 fd ff ff       	call   c00197b8 <EnvVarContainer::loadFrom(char const*, char const*)>
c00199c4:	83 c4 1c             	add    esp,0x1c
c00199c7:	c3                   	ret    

c00199c8 <EnvVarContainer::__loadUser()>:
c00199c8:	c3                   	ret    
c00199c9:	90                   	nop

c00199ca <EnvVarContainer::EnvVarContainer(Process*)>:
c00199ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00199d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00199dc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00199df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00199ea:	90                   	nop
c00199eb:	c3                   	ret    

c00199ec <EnvVarContainer::~EnvVarContainer()>:
c00199ec:	83 ec 0c             	sub    esp,0xc
c00199ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00199f6:	85 c0                	test   eax,eax
c00199f8:	74 1d                	je     c0019a17 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00199fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a00:	85 c0                	test   eax,eax
c0019a02:	74 13                	je     c0019a17 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019a0b:	83 ec 0c             	sub    esp,0xc
c0019a0e:	50                   	push   eax
c0019a0f:	e8 56 5c ff ff       	call   c000f66a <free>
c0019a14:	83 c4 10             	add    esp,0x10
c0019a17:	90                   	nop
c0019a18:	83 c4 0c             	add    esp,0xc
c0019a1b:	c3                   	ret    

c0019a1c <Krnl::getEnv(Process*, char const*)>:
c0019a1c:	53                   	push   ebx
c0019a1d:	83 ec 08             	sub    esp,0x8
c0019a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a24:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019a28:	39 05 34 e6 02 c0    	cmp    DWORD PTR ds:0xc002e634,eax
c0019a2e:	74 04                	je     c0019a34 <Krnl::getEnv(Process*, char const*)+0x18>
c0019a30:	85 c0                	test   eax,eax
c0019a32:	75 0b                	jne    c0019a3f <Krnl::getEnv(Process*, char const*)+0x23>
c0019a34:	a1 10 dc 02 c0       	mov    eax,ds:0xc002dc10
c0019a39:	85 c0                	test   eax,eax
c0019a3b:	75 19                	jne    c0019a56 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019a3d:	eb 27                	jmp    c0019a66 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019a3f:	52                   	push   edx
c0019a40:	52                   	push   edx
c0019a41:	53                   	push   ebx
c0019a42:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019a48:	e8 5f fc ff ff       	call   c00196ac <EnvVarContainer::getEnv(char const*)>
c0019a4d:	83 c4 10             	add    esp,0x10
c0019a50:	85 c0                	test   eax,eax
c0019a52:	75 28                	jne    c0019a7c <Krnl::getEnv(Process*, char const*)+0x60>
c0019a54:	eb de                	jmp    c0019a34 <Krnl::getEnv(Process*, char const*)+0x18>
c0019a56:	52                   	push   edx
c0019a57:	52                   	push   edx
c0019a58:	53                   	push   ebx
c0019a59:	50                   	push   eax
c0019a5a:	e8 4d fc ff ff       	call   c00196ac <EnvVarContainer::getEnv(char const*)>
c0019a5f:	83 c4 10             	add    esp,0x10
c0019a62:	85 c0                	test   eax,eax
c0019a64:	75 16                	jne    c0019a7c <Krnl::getEnv(Process*, char const*)+0x60>
c0019a66:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019a6a:	a1 14 dc 02 c0       	mov    eax,ds:0xc002dc14
c0019a6f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019a73:	83 c4 08             	add    esp,0x8
c0019a76:	5b                   	pop    ebx
c0019a77:	e9 30 fc ff ff       	jmp    c00196ac <EnvVarContainer::getEnv(char const*)>
c0019a7c:	83 c4 08             	add    esp,0x8
c0019a7f:	5b                   	pop    ebx
c0019a80:	c3                   	ret    

c0019a81 <Krnl::setEnvSystem(char const*, char const*)>:
c0019a81:	83 ec 10             	sub    esp,0x10
c0019a84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019a88:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019a8c:	ff 35 14 dc 02 c0    	push   DWORD PTR ds:0xc002dc14
c0019a92:	e8 53 fc ff ff       	call   c00196ea <EnvVarContainer::setEnv(char const*, char const*)>
c0019a97:	83 c4 1c             	add    esp,0x1c
c0019a9a:	c3                   	ret    

c0019a9b <Krnl::setEnvUser(char const*, char const*)>:
c0019a9b:	a1 10 dc 02 c0       	mov    eax,ds:0xc002dc10
c0019aa0:	85 c0                	test   eax,eax
c0019aa2:	74 15                	je     c0019ab9 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019aa4:	83 ec 10             	sub    esp,0x10
c0019aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019aab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019aaf:	50                   	push   eax
c0019ab0:	e8 35 fc ff ff       	call   c00196ea <EnvVarContainer::setEnv(char const*, char const*)>
c0019ab5:	83 c4 1c             	add    esp,0x1c
c0019ab8:	c3                   	ret    
c0019ab9:	c3                   	ret    

c0019aba <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019aba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019abe:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019ac4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ac8:	e9 1d fc ff ff       	jmp    c00196ea <EnvVarContainer::setEnv(char const*, char const*)>

c0019acd <Krnl::deleteEnvSystem(char const*)>:
c0019acd:	c3                   	ret    

c0019ace <Krnl::deleteEnvUser(char const*)>:
c0019ace:	c3                   	ret    

c0019acf <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019acf:	c3                   	ret    

c0019ad0 <Krnl::newProcessEnv(Process*)>:
c0019ad0:	83 ec 28             	sub    esp,0x28
c0019ad3:	6a 0c                	push   0xc
c0019ad5:	e8 80 5b ff ff       	call   c000f65a <malloc>
c0019ada:	5a                   	pop    edx
c0019adb:	59                   	pop    ecx
c0019adc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ae0:	50                   	push   eax
c0019ae1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ae5:	e8 e0 fe ff ff       	call   c00199ca <EnvVarContainer::EnvVarContainer(Process*)>
c0019aea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019aee:	83 c4 2c             	add    esp,0x2c
c0019af1:	c3                   	ret    

c0019af2 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019af2:	56                   	push   esi
c0019af3:	53                   	push   ebx
c0019af4:	83 ec 10             	sub    esp,0x10
c0019af7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019afb:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c0019b01:	6a 0c                	push   0xc
c0019b03:	e8 52 5b ff ff       	call   c000f65a <malloc>
c0019b08:	89 c3                	mov    ebx,eax
c0019b0a:	58                   	pop    eax
c0019b0b:	5a                   	pop    edx
c0019b0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b10:	53                   	push   ebx
c0019b11:	e8 b4 fe ff ff       	call   c00199ca <EnvVarContainer::EnvVarContainer(Process*)>
c0019b16:	8b 06                	mov    eax,DWORD PTR [esi]
c0019b18:	89 03                	mov    DWORD PTR [ebx],eax
c0019b1a:	c1 e0 03             	shl    eax,0x3
c0019b1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b20:	e8 35 5b ff ff       	call   c000f65a <malloc>
c0019b25:	83 c4 0c             	add    esp,0xc
c0019b28:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019b2b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0019b2d:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019b34:	52                   	push   edx
c0019b35:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019b38:	50                   	push   eax
c0019b39:	e8 62 6b fe ff       	call   c00006a0 <memcpy>
c0019b3e:	89 d8                	mov    eax,ebx
c0019b40:	83 c4 14             	add    esp,0x14
c0019b43:	5b                   	pop    ebx
c0019b44:	5e                   	pop    esi
c0019b45:	c3                   	ret    

c0019b46 <Krnl::loadSystemEnv()>:
c0019b46:	53                   	push   ebx
c0019b47:	83 ec 14             	sub    esp,0x14
c0019b4a:	6a 0c                	push   0xc
c0019b4c:	e8 09 5b ff ff       	call   c000f65a <malloc>
c0019b51:	89 c3                	mov    ebx,eax
c0019b53:	58                   	pop    eax
c0019b54:	5a                   	pop    edx
c0019b55:	ff 35 34 e6 02 c0    	push   DWORD PTR ds:0xc002e634
c0019b5b:	53                   	push   ebx
c0019b5c:	e8 69 fe ff ff       	call   c00199ca <EnvVarContainer::EnvVarContainer(Process*)>
c0019b61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b64:	89 1d 14 dc 02 c0    	mov    DWORD PTR ds:0xc002dc14,ebx
c0019b6a:	e8 3f fe ff ff       	call   c00199ae <EnvVarContainer::__loadSystem()>
c0019b6f:	83 c4 18             	add    esp,0x18
c0019b72:	5b                   	pop    ebx
c0019b73:	c3                   	ret    

c0019b74 <Krnl::loadUserEnv()>:
c0019b74:	53                   	push   ebx
c0019b75:	83 ec 14             	sub    esp,0x14
c0019b78:	6a 0c                	push   0xc
c0019b7a:	e8 db 5a ff ff       	call   c000f65a <malloc>
c0019b7f:	89 c3                	mov    ebx,eax
c0019b81:	58                   	pop    eax
c0019b82:	5a                   	pop    edx
c0019b83:	ff 35 34 e6 02 c0    	push   DWORD PTR ds:0xc002e634
c0019b89:	53                   	push   ebx
c0019b8a:	e8 3b fe ff ff       	call   c00199ca <EnvVarContainer::EnvVarContainer(Process*)>
c0019b8f:	89 1d 10 dc 02 c0    	mov    DWORD PTR ds:0xc002dc10,ebx
c0019b95:	83 c4 18             	add    esp,0x18
c0019b98:	5b                   	pop    ebx
c0019b99:	c3                   	ret    

c0019b9a <Krnl::flushEnv()>:
c0019b9a:	c3                   	ret    

c0019b9b <Krnl::getProcessTotalEnvCount(Process*)>:
c0019b9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b9f:	8b 15 10 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc10
c0019ba5:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019bab:	a1 14 dc 02 c0       	mov    eax,ds:0xc002dc14
c0019bb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0019bb2:	03 01                	add    eax,DWORD PTR [ecx]
c0019bb4:	85 d2                	test   edx,edx
c0019bb6:	74 02                	je     c0019bba <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019bb8:	03 02                	add    eax,DWORD PTR [edx]
c0019bba:	c3                   	ret    

c0019bbb <Krnl::getProcessEnvPair(Process*, int)>:
c0019bbb:	57                   	push   edi
c0019bbc:	8b 0d 10 dc 02 c0    	mov    ecx,DWORD PTR ds:0xc002dc10
c0019bc2:	56                   	push   esi
c0019bc3:	85 c9                	test   ecx,ecx
c0019bc5:	53                   	push   ebx
c0019bc6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019bca:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019bce:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c0019bd4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019bd8:	8b 02                	mov    eax,DWORD PTR [edx]
c0019bda:	75 47                	jne    c0019c23 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c0019bdc:	39 c3                	cmp    ebx,eax
c0019bde:	7c 47                	jl     c0019c27 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c0019be0:	8b 15 14 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc14
c0019be6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019be8:	01 c1                	add    ecx,eax
c0019bea:	39 d9                	cmp    ecx,ebx
c0019bec:	7e 6c                	jle    c0019c5a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019bee:	51                   	push   ecx
c0019bef:	89 d9                	mov    ecx,ebx
c0019bf1:	29 c1                	sub    ecx,eax
c0019bf3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019bf6:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c0019bfa:	53                   	push   ebx
c0019bfb:	68 e3 a8 02 c0       	push   0xc002a8e3
c0019c00:	e8 24 8d ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0019c05:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c0019c0b:	2b 18                	sub    ebx,DWORD PTR [eax]
c0019c0d:	a1 14 dc 02 c0       	mov    eax,ds:0xc002dc14
c0019c12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019c15:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019c19:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019c1c:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019c1f:	89 06                	mov    DWORD PTR [esi],eax
c0019c21:	eb 51                	jmp    c0019c74 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c0019c23:	39 c3                	cmp    ebx,eax
c0019c25:	7d 05                	jge    c0019c2c <Krnl::getProcessEnvPair(Process*, int)+0x71>
c0019c27:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019c2a:	eb 20                	jmp    c0019c4c <Krnl::getProcessEnvPair(Process*, int)+0x91>
c0019c2c:	8b 39                	mov    edi,DWORD PTR [ecx]
c0019c2e:	8d 14 07             	lea    edx,[edi+eax*1]
c0019c31:	39 da                	cmp    edx,ebx
c0019c33:	7e 04                	jle    c0019c39 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c0019c35:	29 c3                	sub    ebx,eax
c0019c37:	eb 10                	jmp    c0019c49 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c0019c39:	8b 0d 14 dc 02 c0    	mov    ecx,DWORD PTR ds:0xc002dc14
c0019c3f:	03 11                	add    edx,DWORD PTR [ecx]
c0019c41:	39 da                	cmp    edx,ebx
c0019c43:	7e 15                	jle    c0019c5a <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019c45:	29 c3                	sub    ebx,eax
c0019c47:	29 fb                	sub    ebx,edi
c0019c49:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019c4c:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019c50:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019c53:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019c56:	89 06                	mov    DWORD PTR [esi],eax
c0019c58:	eb 1d                	jmp    c0019c77 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c0019c5a:	83 ec 0c             	sub    esp,0xc
c0019c5d:	68 f7 a8 02 c0       	push   0xc002a8f7
c0019c62:	e8 18 00 00 00       	call   c0019c7f <Krnl::panic(char const*)>
c0019c67:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0019c6d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019c74:	83 c4 10             	add    esp,0x10
c0019c77:	89 f0                	mov    eax,esi
c0019c79:	5b                   	pop    ebx
c0019c7a:	5e                   	pop    esi
c0019c7b:	5f                   	pop    edi
c0019c7c:	c2 04 00             	ret    0x4

c0019c7f <Krnl::panic(char const*)>:
c0019c7f:	55                   	push   ebp
c0019c80:	89 e5                	mov    ebp,esp
c0019c82:	53                   	push   ebx
c0019c83:	50                   	push   eax
c0019c84:	a1 1c dc 02 c0       	mov    eax,ds:0xc002dc1c
c0019c89:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019c8c:	85 c0                	test   eax,eax
c0019c8e:	74 02                	je     c0019c92 <Krnl::panic(char const*)+0x13>
c0019c90:	ff d0                	call   eax
c0019c92:	fa                   	cli    
c0019c93:	c6 05 20 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dc20,0x1
c0019c9a:	83 ec 08             	sub    esp,0x8
c0019c9d:	c6 05 24 c0 02 c0 00 	mov    BYTE PTR ds:0xc002c024,0x0
c0019ca4:	53                   	push   ebx
c0019ca5:	68 11 a9 02 c0       	push   0xc002a911
c0019caa:	e8 7a 8c ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0019caf:	58                   	pop    eax
c0019cb0:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019cb5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cbb:	e8 2b 6e ff ff       	call   c0010aeb <setActiveTerminal(VgaText*)>
c0019cc0:	83 c4 0c             	add    esp,0xc
c0019cc3:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019cc8:	6a 01                	push   0x1
c0019cca:	6a 0f                	push   0xf
c0019ccc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cd2:	e8 45 68 ff ff       	call   c001051c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019cd7:	5a                   	pop    edx
c0019cd8:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019cdd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ce3:	e8 a4 70 ff ff       	call   c0010d8c <VgaText::clearScreen()>
c0019ce8:	59                   	pop    ecx
c0019ce9:	58                   	pop    eax
c0019cea:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019cef:	68 2a a9 02 c0       	push   0xc002a92a
c0019cf4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cfa:	e8 0b 72 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0019cff:	58                   	pop    eax
c0019d00:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019d05:	5a                   	pop    edx
c0019d06:	68 d0 a9 02 c0       	push   0xc002a9d0
c0019d0b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d11:	e8 f4 71 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0019d16:	59                   	pop    ecx
c0019d17:	58                   	pop    eax
c0019d18:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019d1d:	68 46 a9 02 c0       	push   0xc002a946
c0019d22:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d28:	e8 dd 71 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0019d2d:	58                   	pop    eax
c0019d2e:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019d33:	5a                   	pop    edx
c0019d34:	53                   	push   ebx
c0019d35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d3b:	e8 ca 71 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0019d40:	59                   	pop    ecx
c0019d41:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019d46:	5b                   	pop    ebx
c0019d47:	68 66 a9 02 c0       	push   0xc002a966
c0019d4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d52:	e8 b3 71 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0019d57:	58                   	pop    eax
c0019d58:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019d5d:	5a                   	pop    edx
c0019d5e:	68 0c aa 02 c0       	push   0xc002aa0c
c0019d63:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d69:	e8 9c 71 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0019d6e:	59                   	pop    ecx
c0019d6f:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019d74:	5b                   	pop    ebx
c0019d75:	68 46 a9 02 c0       	push   0xc002a946
c0019d7a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d80:	e8 85 71 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0019d85:	58                   	pop    eax
c0019d86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019d8b:	5a                   	pop    edx
c0019d8c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019d8f:	83 c0 0c             	add    eax,0xc
c0019d92:	50                   	push   eax
c0019d93:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019d98:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d9e:	e8 67 71 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0019da3:	59                   	pop    ecx
c0019da4:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019da9:	5b                   	pop    ebx
c0019daa:	68 65 a9 02 c0       	push   0xc002a965
c0019daf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019db5:	e8 50 71 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0019dba:	58                   	pop    eax
c0019dbb:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019dc0:	5a                   	pop    edx
c0019dc1:	68 38 aa 02 c0       	push   0xc002aa38
c0019dc6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dcc:	e8 39 71 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0019dd1:	59                   	pop    ecx
c0019dd2:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019dd7:	5b                   	pop    ebx
c0019dd8:	68 78 aa 02 c0       	push   0xc002aa78
c0019ddd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019de3:	e8 22 71 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0019de8:	58                   	pop    eax
c0019de9:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019dee:	5a                   	pop    edx
c0019def:	68 51 a9 02 c0       	push   0xc002a951
c0019df4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dfa:	e8 0b 71 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0019dff:	59                   	pop    ecx
c0019e00:	5b                   	pop    ebx
c0019e01:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019e04:	68 69 a9 02 c0       	push   0xc002a969
c0019e09:	e8 1b 8b ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0019e0e:	58                   	pop    eax
c0019e0f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e12:	5a                   	pop    edx
c0019e13:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019e16:	68 72 a9 02 c0       	push   0xc002a972
c0019e1b:	e8 09 8b ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0019e20:	59                   	pop    ecx
c0019e21:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e24:	5b                   	pop    ebx
c0019e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e27:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019e2a:	68 7b a9 02 c0       	push   0xc002a97b
c0019e2f:	e8 f5 8a ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0019e34:	58                   	pop    eax
c0019e35:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019e3a:	5a                   	pop    edx
c0019e3b:	68 bc aa 02 c0       	push   0xc002aabc
c0019e40:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e46:	e8 bf 70 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0019e4b:	59                   	pop    ecx
c0019e4c:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019e51:	5b                   	pop    ebx
c0019e52:	68 84 a9 02 c0       	push   0xc002a984
c0019e57:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e5d:	e8 a8 70 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0019e62:	0f 20 c0             	mov    eax,cr0
c0019e65:	5a                   	pop    edx
c0019e66:	59                   	pop    ecx
c0019e67:	50                   	push   eax
c0019e68:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019e6d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e73:	e8 b8 70 ff ff       	call   c0010f30 <VgaText::putx(unsigned int)>
c0019e78:	5b                   	pop    ebx
c0019e79:	58                   	pop    eax
c0019e7a:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019e7f:	68 8e a9 02 c0       	push   0xc002a98e
c0019e84:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e8a:	e8 7b 70 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0019e8f:	0f 20 d0             	mov    eax,cr2
c0019e92:	5a                   	pop    edx
c0019e93:	59                   	pop    ecx
c0019e94:	50                   	push   eax
c0019e95:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019e9a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ea0:	e8 8b 70 ff ff       	call   c0010f30 <VgaText::putx(unsigned int)>
c0019ea5:	5b                   	pop    ebx
c0019ea6:	58                   	pop    eax
c0019ea7:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019eac:	68 98 a9 02 c0       	push   0xc002a998
c0019eb1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eb7:	e8 4e 70 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0019ebc:	0f 20 d8             	mov    eax,cr3
c0019ebf:	5a                   	pop    edx
c0019ec0:	59                   	pop    ecx
c0019ec1:	50                   	push   eax
c0019ec2:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019ec7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ecd:	e8 5e 70 ff ff       	call   c0010f30 <VgaText::putx(unsigned int)>
c0019ed2:	5b                   	pop    ebx
c0019ed3:	58                   	pop    eax
c0019ed4:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019ed9:	68 ab a9 02 c0       	push   0xc002a9ab
c0019ede:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ee4:	e8 21 70 ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0019ee9:	0f 20 e0             	mov    eax,cr4
c0019eec:	5a                   	pop    edx
c0019eed:	59                   	pop    ecx
c0019eee:	50                   	push   eax
c0019eef:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019ef4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019efa:	e8 31 70 ff ff       	call   c0010f30 <VgaText::putx(unsigned int)>
c0019eff:	5b                   	pop    ebx
c0019f00:	58                   	pop    eax
c0019f01:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019f06:	68 b5 a9 02 c0       	push   0xc002a9b5
c0019f0b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f11:	e8 f4 6f ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0019f16:	5a                   	pop    edx
c0019f17:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019f1c:	59                   	pop    ecx
c0019f1d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019f23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f26:	50                   	push   eax
c0019f27:	e8 04 70 ff ff       	call   c0010f30 <VgaText::putx(unsigned int)>
c0019f2c:	5b                   	pop    ebx
c0019f2d:	58                   	pop    eax
c0019f2e:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019f33:	68 cc a9 02 c0       	push   0xc002a9cc
c0019f38:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f3e:	e8 c7 6f ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0019f43:	5a                   	pop    edx
c0019f44:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019f49:	59                   	pop    ecx
c0019f4a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019f50:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f53:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019f56:	50                   	push   eax
c0019f57:	e8 d4 6f ff ff       	call   c0010f30 <VgaText::putx(unsigned int)>
c0019f5c:	5b                   	pop    ebx
c0019f5d:	58                   	pop    eax
c0019f5e:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019f63:	68 cc a9 02 c0       	push   0xc002a9cc
c0019f68:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f6e:	e8 97 6f ff ff       	call   c0010f0a <VgaText::puts(char const*)>
c0019f73:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c0019f78:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f7b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019f81:	8b 12                	mov    edx,DWORD PTR [edx]
c0019f83:	59                   	pop    ecx
c0019f84:	5b                   	pop    ebx
c0019f85:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019f88:	50                   	push   eax
c0019f89:	e8 a2 6f ff ff       	call   c0010f30 <VgaText::putx(unsigned int)>
c0019f8e:	83 c4 10             	add    esp,0x10
c0019f91:	b2 fe                	mov    dl,0xfe
c0019f93:	e4 60                	in     al,0x60
c0019f95:	3c 1c                	cmp    al,0x1c
c0019f97:	74 04                	je     c0019f9d <Krnl::panic(char const*)+0x31e>
c0019f99:	3c 5a                	cmp    al,0x5a
c0019f9b:	75 f6                	jne    c0019f93 <Krnl::panic(char const*)+0x314>
c0019f9d:	e4 64                	in     al,0x64
c0019f9f:	a8 02                	test   al,0x2
c0019fa1:	75 fa                	jne    c0019f9d <Krnl::panic(char const*)+0x31e>
c0019fa3:	88 d0                	mov    al,dl
c0019fa5:	e6 64                	out    0x64,al
c0019fa7:	fa                   	cli    
c0019fa8:	f4                   	hlt    
c0019fa9:	eb e8                	jmp    c0019f93 <Krnl::panic(char const*)+0x314>

c0019fab <Net::switchEndian16(unsigned short)>:
c0019fab:	83 ec 04             	sub    esp,0x4
c0019fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019fb2:	66 89 04 24          	mov    WORD PTR [esp],ax
c0019fb6:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019fba:	c1 f8 08             	sar    eax,0x8
c0019fbd:	89 c2                	mov    edx,eax
c0019fbf:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019fc3:	c1 e0 08             	shl    eax,0x8
c0019fc6:	09 d0                	or     eax,edx
c0019fc8:	83 c4 04             	add    esp,0x4
c0019fcb:	c3                   	ret    

c0019fcc <Net::switchEndian32(unsigned int)>:
c0019fcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fd0:	c1 e8 18             	shr    eax,0x18
c0019fd3:	89 c2                	mov    edx,eax
c0019fd5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fd9:	c1 e0 08             	shl    eax,0x8
c0019fdc:	25 00 00 ff 00       	and    eax,0xff0000
c0019fe1:	09 c2                	or     edx,eax
c0019fe3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fe7:	c1 e8 08             	shr    eax,0x8
c0019fea:	25 00 ff 00 00       	and    eax,0xff00
c0019fef:	09 c2                	or     edx,eax
c0019ff1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ff5:	c1 e0 18             	shl    eax,0x18
c0019ff8:	09 d0                	or     eax,edx
c0019ffa:	c3                   	ret    

c0019ffb <Net::crc32Calc(unsigned char*, int)>:
c0019ffb:	83 ec 10             	sub    esp,0x10
c0019ffe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a003:	75 07                	jne    c001a00c <Net::crc32Calc(unsigned char*, int)+0x11>
c001a005:	b8 00 00 00 00       	mov    eax,0x0
c001a00a:	eb 7c                	jmp    c001a088 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a00c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a011:	7f 07                	jg     c001a01a <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a013:	b8 00 00 00 00       	mov    eax,0x0
c001a018:	eb 6e                	jmp    c001a088 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a01a:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a022:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a02a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a02e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a032:	7d 4e                	jge    c001a082 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a034:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a038:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a03c:	01 d0                	add    eax,edx
c001a03e:	8a 00                	mov    al,BYTE PTR [eax]
c001a040:	0f b6 c0             	movzx  eax,al
c001a043:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a047:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a04f:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a054:	7f 26                	jg     c001a07c <Net::crc32Calc(unsigned char*, int)+0x81>
c001a056:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a05a:	83 e0 01             	and    eax,0x1
c001a05d:	74 0d                	je     c001a06c <Net::crc32Calc(unsigned char*, int)+0x71>
c001a05f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a063:	d1 e8                	shr    eax,1
c001a065:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a06a:	eb 06                	jmp    c001a072 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a06c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a070:	d1 e8                	shr    eax,1
c001a072:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a076:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a07a:	eb d3                	jmp    c001a04f <Net::crc32Calc(unsigned char*, int)+0x54>
c001a07c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a080:	eb a8                	jmp    c001a02a <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a082:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a086:	f7 d0                	not    eax
c001a088:	83 c4 10             	add    esp,0x10
c001a08b:	c3                   	ret    

c001a08c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a08c:	83 ec 1c             	sub    esp,0x1c
c001a08f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a093:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a097:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a09f:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a0a4:	7f 14                	jg     c001a0ba <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a0a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0aa:	8d 50 01             	lea    edx,[eax+0x1]
c001a0ad:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a0b1:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a0b4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a0b8:	eb e5                	jmp    c001a09f <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a0ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0be:	8d 50 01             	lea    edx,[eax+0x1]
c001a0c1:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a0c5:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a0c8:	83 ec 04             	sub    esp,0x4
c001a0cb:	6a 06                	push   0x6
c001a0cd:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a0d1:	50                   	push   eax
c001a0d2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a0d6:	e8 c5 65 fe ff       	call   c00006a0 <memcpy>
c001a0db:	83 c4 10             	add    esp,0x10
c001a0de:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a0e3:	83 ec 04             	sub    esp,0x4
c001a0e6:	6a 06                	push   0x6
c001a0e8:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a0ec:	50                   	push   eax
c001a0ed:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a0f1:	e8 aa 65 fe ff       	call   c00006a0 <memcpy>
c001a0f6:	83 c4 10             	add    esp,0x10
c001a0f9:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a0fe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a102:	0f b7 c0             	movzx  eax,ax
c001a105:	c1 f8 08             	sar    eax,0x8
c001a108:	89 c1                	mov    ecx,eax
c001a10a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a10e:	8d 50 01             	lea    edx,[eax+0x1]
c001a111:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a115:	88 ca                	mov    dl,cl
c001a117:	88 10                	mov    BYTE PTR [eax],dl
c001a119:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a11d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a121:	8d 48 01             	lea    ecx,[eax+0x1]
c001a124:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a128:	88 10                	mov    BYTE PTR [eax],dl
c001a12a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a12e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a132:	83 ec 04             	sub    esp,0x4
c001a135:	52                   	push   edx
c001a136:	50                   	push   eax
c001a137:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a13b:	e8 60 65 fe ff       	call   c00006a0 <memcpy>
c001a140:	83 c4 10             	add    esp,0x10
c001a143:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a147:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a14b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a14f:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a153:	83 ec 08             	sub    esp,0x8
c001a156:	50                   	push   eax
c001a157:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a15b:	e8 9b fe ff ff       	call   c0019ffb <Net::crc32Calc(unsigned char*, int)>
c001a160:	83 c4 10             	add    esp,0x10
c001a163:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a167:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a16b:	c1 e8 18             	shr    eax,0x18
c001a16e:	89 c1                	mov    ecx,eax
c001a170:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a174:	8d 50 01             	lea    edx,[eax+0x1]
c001a177:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a17b:	88 ca                	mov    dl,cl
c001a17d:	88 10                	mov    BYTE PTR [eax],dl
c001a17f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a183:	c1 e8 10             	shr    eax,0x10
c001a186:	89 c1                	mov    ecx,eax
c001a188:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a18c:	8d 50 01             	lea    edx,[eax+0x1]
c001a18f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a193:	88 ca                	mov    dl,cl
c001a195:	88 10                	mov    BYTE PTR [eax],dl
c001a197:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a19b:	c1 e8 08             	shr    eax,0x8
c001a19e:	89 c1                	mov    ecx,eax
c001a1a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a1a4:	8d 50 01             	lea    edx,[eax+0x1]
c001a1a7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a1ab:	88 ca                	mov    dl,cl
c001a1ad:	88 10                	mov    BYTE PTR [eax],dl
c001a1af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a1b3:	8d 50 01             	lea    edx,[eax+0x1]
c001a1b6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a1ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a1be:	88 10                	mov    BYTE PTR [eax],dl
c001a1c0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a1c4:	83 c4 1c             	add    esp,0x1c
c001a1c7:	c3                   	ret    

c001a1c8 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a1c8:	83 ec 2c             	sub    esp,0x2c
c001a1cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a1cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a1d3:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001a1d8:	83 ec 04             	sub    esp,0x4
c001a1db:	6a 06                	push   0x6
c001a1dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a1e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a1e5:	83 c0 0e             	add    eax,0xe
c001a1e8:	50                   	push   eax
c001a1e9:	e8 b2 64 fe ff       	call   c00006a0 <memcpy>
c001a1ee:	83 c4 10             	add    esp,0x10
c001a1f1:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a1f6:	83 ec 04             	sub    esp,0x4
c001a1f9:	6a 06                	push   0x6
c001a1fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a1ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a203:	83 c0 08             	add    eax,0x8
c001a206:	50                   	push   eax
c001a207:	e8 94 64 fe ff       	call   c00006a0 <memcpy>
c001a20c:	83 c4 10             	add    esp,0x10
c001a20f:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a214:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a218:	8d 50 01             	lea    edx,[eax+0x1]
c001a21b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a21f:	8a 00                	mov    al,BYTE PTR [eax]
c001a221:	0f b6 c0             	movzx  eax,al
c001a224:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001a229:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a22d:	8d 50 01             	lea    edx,[eax+0x1]
c001a230:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a234:	8a 00                	mov    al,BYTE PTR [eax]
c001a236:	0f b6 c0             	movzx  eax,al
c001a239:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001a23e:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001a243:	c1 e0 08             	shl    eax,0x8
c001a246:	89 c2                	mov    edx,eax
c001a248:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a24c:	09 d0                	or     eax,edx
c001a24e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a252:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a256:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001a25b:	75 3a                	jne    c001a297 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a25d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a261:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a264:	66 3d dc 05          	cmp    ax,0x5dc
c001a268:	77 10                	ja     c001a27a <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001a26a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a26e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a271:	0f b7 c0             	movzx  eax,ax
c001a274:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a278:	eb 1d                	jmp    c001a297 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a27a:	83 ec 0c             	sub    esp,0xc
c001a27d:	68 e4 aa 02 c0       	push   0xc002aae4
c001a282:	e8 a2 86 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001a287:	83 c4 10             	add    esp,0x10
c001a28a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a28e:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a292:	e9 c0 00 00 00       	jmp    c001a357 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001a297:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a29b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a29f:	8b 00                	mov    eax,DWORD PTR [eax]
c001a2a1:	83 ec 04             	sub    esp,0x4
c001a2a4:	52                   	push   edx
c001a2a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a2a9:	50                   	push   eax
c001a2aa:	e8 f1 63 fe ff       	call   c00006a0 <memcpy>
c001a2af:	83 c4 10             	add    esp,0x10
c001a2b2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a2b6:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001a2ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a2be:	8d 50 01             	lea    edx,[eax+0x1]
c001a2c1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a2c5:	8a 00                	mov    al,BYTE PTR [eax]
c001a2c7:	0f b6 c0             	movzx  eax,al
c001a2ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a2ce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a2d2:	8d 50 01             	lea    edx,[eax+0x1]
c001a2d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a2d9:	8a 00                	mov    al,BYTE PTR [eax]
c001a2db:	0f b6 c0             	movzx  eax,al
c001a2de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a2e2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a2e6:	8d 50 01             	lea    edx,[eax+0x1]
c001a2e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a2ed:	8a 00                	mov    al,BYTE PTR [eax]
c001a2ef:	0f b6 c0             	movzx  eax,al
c001a2f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a2f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a2fa:	8d 50 01             	lea    edx,[eax+0x1]
c001a2fd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a301:	8a 00                	mov    al,BYTE PTR [eax]
c001a303:	0f b6 c0             	movzx  eax,al
c001a306:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a30a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a30e:	c1 e0 18             	shl    eax,0x18
c001a311:	89 c2                	mov    edx,eax
c001a313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a317:	c1 e0 10             	shl    eax,0x10
c001a31a:	09 c2                	or     edx,eax
c001a31c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a320:	c1 e0 08             	shl    eax,0x8
c001a323:	09 d0                	or     eax,edx
c001a325:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001a329:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a32d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a331:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001a335:	83 e8 04             	sub    eax,0x4
c001a338:	83 ec 08             	sub    esp,0x8
c001a33b:	50                   	push   eax
c001a33c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a340:	e8 b6 fc ff ff       	call   c0019ffb <Net::crc32Calc(unsigned char*, int)>
c001a345:	83 c4 10             	add    esp,0x10
c001a348:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a34c:	0f 94 c2             	sete   dl
c001a34f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a353:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a356:	90                   	nop
c001a357:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a35b:	83 c4 2c             	add    esp,0x2c
c001a35e:	c2 04 00             	ret    0x4

c001a361 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a361:	55                   	push   ebp
c001a362:	57                   	push   edi
c001a363:	56                   	push   esi
c001a364:	53                   	push   ebx
c001a365:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a36b:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a372:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a374:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a377:	80 fb 40             	cmp    bl,0x40
c001a37a:	75 1b                	jne    c001a397 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a37c:	8a 16                	mov    dl,BYTE PTR [esi]
c001a37e:	84 d2                	test   dl,dl
c001a380:	0f 84 f1 00 00 00    	je     c001a477 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a386:	8d 46 01             	lea    eax,[esi+0x1]
c001a389:	80 fa 3a             	cmp    dl,0x3a
c001a38c:	74 04                	je     c001a392 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a38e:	89 c6                	mov    esi,eax
c001a390:	eb ea                	jmp    c001a37c <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a392:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a395:	89 c6                	mov    esi,eax
c001a397:	50                   	push   eax
c001a398:	6a 40                	push   0x40
c001a39a:	6a 00                	push   0x0
c001a39c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a3a0:	50                   	push   eax
c001a3a1:	e8 1e 63 fe ff       	call   c00006c4 <memset>
c001a3a6:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a3ad:	31 c0                	xor    eax,eax
c001a3af:	83 c4 10             	add    esp,0x10
c001a3b2:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a3b4:	84 c9                	test   cl,cl
c001a3b6:	0f 84 bb 00 00 00    	je     c001a477 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a3bc:	3d c7 00 00 00       	cmp    eax,0xc7
c001a3c1:	0f 8f b0 00 00 00    	jg     c001a477 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a3c7:	80 f9 0a             	cmp    cl,0xa
c001a3ca:	0f 85 98 00 00 00    	jne    c001a468 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a3d0:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a3d5:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a3d9:	a8 df                	test   al,0xdf
c001a3db:	0f 94 c1             	sete   cl
c001a3de:	3c 23                	cmp    al,0x23
c001a3e0:	0f 94 c2             	sete   dl
c001a3e3:	08 d1                	or     cl,dl
c001a3e5:	75 4a                	jne    c001a431 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a3e7:	8d 50 f7             	lea    edx,[eax-0x9]
c001a3ea:	80 fa 01             	cmp    dl,0x1
c001a3ed:	76 42                	jbe    c001a431 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a3ef:	3c 5b                	cmp    al,0x5b
c001a3f1:	75 42                	jne    c001a435 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a3f3:	80 fb 40             	cmp    bl,0x40
c001a3f6:	75 39                	jne    c001a431 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a3f8:	83 ec 0c             	sub    esp,0xc
c001a3fb:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a3ff:	52                   	push   edx
c001a400:	e8 dc 62 fe ff       	call   c00006e1 <strlen>
c001a405:	83 c4 10             	add    esp,0x10
c001a408:	83 f8 3f             	cmp    eax,0x3f
c001a40b:	77 6a                	ja     c001a477 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a40d:	50                   	push   eax
c001a40e:	50                   	push   eax
c001a40f:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a413:	52                   	push   edx
c001a414:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a418:	52                   	push   edx
c001a419:	e8 45 63 fe ff       	call   c0000763 <strcpy>
c001a41e:	58                   	pop    eax
c001a41f:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a423:	52                   	push   edx
c001a424:	e8 b8 62 fe ff       	call   c00006e1 <strlen>
c001a429:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a42e:	83 c4 10             	add    esp,0x10
c001a431:	31 d2                	xor    edx,edx
c001a433:	eb 3a                	jmp    c001a46f <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a435:	80 fb 40             	cmp    bl,0x40
c001a438:	74 06                	je     c001a440 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a43a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a43e:	eb 20                	jmp    c001a460 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a440:	50                   	push   eax
c001a441:	50                   	push   eax
c001a442:	55                   	push   ebp
c001a443:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a447:	50                   	push   eax
c001a448:	e8 67 63 fe ff       	call   c00007b4 <strcmp>
c001a44d:	83 c4 10             	add    esp,0x10
c001a450:	85 c0                	test   eax,eax
c001a452:	75 dd                	jne    c001a431 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a454:	eb e4                	jmp    c001a43a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a456:	8d 50 01             	lea    edx,[eax+0x1]
c001a459:	80 f9 3d             	cmp    cl,0x3d
c001a45c:	74 1d                	je     c001a47b <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a45e:	89 d0                	mov    eax,edx
c001a460:	8a 08                	mov    cl,BYTE PTR [eax]
c001a462:	84 c9                	test   cl,cl
c001a464:	75 f0                	jne    c001a456 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a466:	eb 0f                	jmp    c001a477 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a468:	8d 50 01             	lea    edx,[eax+0x1]
c001a46b:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a46f:	47                   	inc    edi
c001a470:	89 d0                	mov    eax,edx
c001a472:	e9 3b ff ff ff       	jmp    c001a3b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a477:	31 c0                	xor    eax,eax
c001a479:	eb 33                	jmp    c001a4ae <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a47b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a47f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a482:	50                   	push   eax
c001a483:	50                   	push   eax
c001a484:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a488:	50                   	push   eax
c001a489:	56                   	push   esi
c001a48a:	e8 25 63 fe ff       	call   c00007b4 <strcmp>
c001a48f:	83 c4 10             	add    esp,0x10
c001a492:	85 c0                	test   eax,eax
c001a494:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a498:	75 97                	jne    c001a431 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a49a:	51                   	push   ecx
c001a49b:	51                   	push   ecx
c001a49c:	52                   	push   edx
c001a49d:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a4a4:	e8 ba 62 fe ff       	call   c0000763 <strcpy>
c001a4a9:	83 c4 10             	add    esp,0x10
c001a4ac:	b0 01                	mov    al,0x1
c001a4ae:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a4b4:	5b                   	pop    ebx
c001a4b5:	5e                   	pop    esi
c001a4b6:	5f                   	pop    edi
c001a4b7:	5d                   	pop    ebp
c001a4b8:	c3                   	ret    

c001a4b9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a4b9:	57                   	push   edi
c001a4ba:	56                   	push   esi
c001a4bb:	53                   	push   ebx
c001a4bc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a4c2:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a4c9:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a4d0:	53                   	push   ebx
c001a4d1:	e8 0b 62 fe ff       	call   c00006e1 <strlen>
c001a4d6:	89 34 24             	mov    DWORD PTR [esp],esi
c001a4d9:	89 c7                	mov    edi,eax
c001a4db:	e8 01 62 fe ff       	call   c00006e1 <strlen>
c001a4e0:	83 c4 10             	add    esp,0x10
c001a4e3:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a4e7:	3d ff 00 00 00       	cmp    eax,0xff
c001a4ec:	0f 87 d3 00 00 00    	ja     c001a5c5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a4f2:	57                   	push   edi
c001a4f3:	57                   	push   edi
c001a4f4:	56                   	push   esi
c001a4f5:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a4f9:	56                   	push   esi
c001a4fa:	e8 64 62 fe ff       	call   c0000763 <strcpy>
c001a4ff:	58                   	pop    eax
c001a500:	5a                   	pop    edx
c001a501:	68 18 af 02 c0       	push   0xc002af18
c001a506:	56                   	push   esi
c001a507:	e8 0e 63 fe ff       	call   c000081a <strcat>
c001a50c:	59                   	pop    ecx
c001a50d:	5f                   	pop    edi
c001a50e:	53                   	push   ebx
c001a50f:	56                   	push   esi
c001a510:	e8 05 63 fe ff       	call   c000081a <strcat>
c001a515:	58                   	pop    eax
c001a516:	5a                   	pop    edx
c001a517:	68 30 ab 02 c0       	push   0xc002ab30
c001a51c:	56                   	push   esi
c001a51d:	e8 f8 62 fe ff       	call   c000081a <strcat>
c001a522:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a529:	e8 2c 51 ff ff       	call   c000f65a <malloc>
c001a52e:	83 c4 0c             	add    esp,0xc
c001a531:	89 c3                	mov    ebx,eax
c001a533:	ff 35 34 e6 02 c0    	push   DWORD PTR ds:0xc002e634
c001a539:	56                   	push   esi
c001a53a:	50                   	push   eax
c001a53b:	e8 42 89 ff ff       	call   c0012e82 <File::File(char const*, Process*)>
c001a540:	83 c4 10             	add    esp,0x10
c001a543:	85 db                	test   ebx,ebx
c001a545:	74 7e                	je     c001a5c5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a547:	51                   	push   ecx
c001a548:	51                   	push   ecx
c001a549:	6a 01                	push   0x1
c001a54b:	53                   	push   ebx
c001a54c:	e8 95 89 ff ff       	call   c0012ee6 <File::open(FileOpenMode)>
c001a551:	83 c4 10             	add    esp,0x10
c001a554:	85 c0                	test   eax,eax
c001a556:	74 08                	je     c001a560 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a558:	83 ec 0c             	sub    esp,0xc
c001a55b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a55d:	53                   	push   ebx
c001a55e:	eb 5f                	jmp    c001a5bf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a560:	52                   	push   edx
c001a561:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a565:	50                   	push   eax
c001a566:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a56a:	50                   	push   eax
c001a56b:	53                   	push   ebx
c001a56c:	e8 21 8c ff ff       	call   c0013192 <File::stat(unsigned long long*, bool*)>
c001a571:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a575:	83 c4 10             	add    esp,0x10
c001a578:	89 c1                	mov    ecx,eax
c001a57a:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a57e:	74 31                	je     c001a5b1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a580:	83 ec 0c             	sub    esp,0xc
c001a583:	50                   	push   eax
c001a584:	e8 d1 50 ff ff       	call   c000f65a <malloc>
c001a589:	89 c6                	mov    esi,eax
c001a58b:	58                   	pop    eax
c001a58c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a58e:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a592:	52                   	push   edx
c001a593:	56                   	push   esi
c001a594:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a598:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a59c:	53                   	push   ebx
c001a59d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a5a0:	83 c4 20             	add    esp,0x20
c001a5a3:	85 c0                	test   eax,eax
c001a5a5:	75 0a                	jne    c001a5b1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a5a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5ab:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a5af:	74 18                	je     c001a5c9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a5b1:	83 ec 0c             	sub    esp,0xc
c001a5b4:	53                   	push   ebx
c001a5b5:	e8 8a 89 ff ff       	call   c0012f44 <File::close()>
c001a5ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a5bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a5bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a5c2:	83 c4 10             	add    esp,0x10
c001a5c5:	31 c0                	xor    eax,eax
c001a5c7:	eb 3b                	jmp    c001a604 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a5c9:	83 ec 0c             	sub    esp,0xc
c001a5cc:	53                   	push   ebx
c001a5cd:	e8 72 89 ff ff       	call   c0012f44 <File::close()>
c001a5d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a5d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a5d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a5da:	83 c4 0c             	add    esp,0xc
c001a5dd:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a5e4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a5eb:	56                   	push   esi
c001a5ec:	e8 70 fd ff ff       	call   c001a361 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a5f1:	89 34 24             	mov    DWORD PTR [esp],esi
c001a5f4:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a5f8:	e8 6d 50 ff ff       	call   c000f66a <free>
c001a5fd:	83 c4 10             	add    esp,0x10
c001a600:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a604:	81 c4 20 01 00 00    	add    esp,0x120
c001a60a:	5b                   	pop    ebx
c001a60b:	5e                   	pop    esi
c001a60c:	5f                   	pop    edi
c001a60d:	c3                   	ret    

c001a60e <Reg::getLine(char*, char*, char*)>:
c001a60e:	57                   	push   edi
c001a60f:	56                   	push   esi
c001a610:	53                   	push   ebx
c001a611:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a615:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a619:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a61d:	57                   	push   edi
c001a61e:	56                   	push   esi
c001a61f:	53                   	push   ebx
c001a620:	68 35 ab 02 c0       	push   0xc002ab35
c001a625:	e8 8f fe ff ff       	call   c001a4b9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a62a:	83 c4 10             	add    esp,0x10
c001a62d:	84 c0                	test   al,al
c001a62f:	75 10                	jne    c001a641 <Reg::getLine(char*, char*, char*)+0x33>
c001a631:	57                   	push   edi
c001a632:	56                   	push   esi
c001a633:	53                   	push   ebx
c001a634:	68 5a ab 02 c0       	push   0xc002ab5a
c001a639:	e8 7b fe ff ff       	call   c001a4b9 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a63e:	83 c4 10             	add    esp,0x10
c001a641:	5b                   	pop    ebx
c001a642:	5e                   	pop    esi
c001a643:	5f                   	pop    edi
c001a644:	c3                   	ret    

c001a645 <Reg::readInt(char*, char*, int*)>:
c001a645:	55                   	push   ebp
c001a646:	57                   	push   edi
c001a647:	56                   	push   esi
c001a648:	53                   	push   ebx
c001a649:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a64f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a653:	57                   	push   edi
c001a654:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a65b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a662:	e8 a7 ff ff ff       	call   c001a60e <Reg::getLine(char*, char*, char*)>
c001a667:	83 c4 10             	add    esp,0x10
c001a66a:	84 c0                	test   al,al
c001a66c:	0f 84 b3 00 00 00    	je     c001a725 <Reg::readInt(char*, char*, int*)+0xe0>
c001a672:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a676:	80 fa 2b             	cmp    dl,0x2b
c001a679:	74 0c                	je     c001a687 <Reg::readInt(char*, char*, int*)+0x42>
c001a67b:	80 fa 2d             	cmp    dl,0x2d
c001a67e:	75 0e                	jne    c001a68e <Reg::readInt(char*, char*, int*)+0x49>
c001a680:	ba 01 00 00 00       	mov    edx,0x1
c001a685:	eb 0b                	jmp    c001a692 <Reg::readInt(char*, char*, int*)+0x4d>
c001a687:	ba 01 00 00 00       	mov    edx,0x1
c001a68c:	eb 02                	jmp    c001a690 <Reg::readInt(char*, char*, int*)+0x4b>
c001a68e:	31 d2                	xor    edx,edx
c001a690:	31 c0                	xor    eax,eax
c001a692:	be 0a 00 00 00       	mov    esi,0xa
c001a697:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a69c:	75 20                	jne    c001a6be <Reg::readInt(char*, char*, int*)+0x79>
c001a69e:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a6a2:	80 f9 78             	cmp    cl,0x78
c001a6a5:	75 0a                	jne    c001a6b1 <Reg::readInt(char*, char*, int*)+0x6c>
c001a6a7:	83 c2 02             	add    edx,0x2
c001a6aa:	be 10 00 00 00       	mov    esi,0x10
c001a6af:	eb 0d                	jmp    c001a6be <Reg::readInt(char*, char*, int*)+0x79>
c001a6b1:	80 f9 62             	cmp    cl,0x62
c001a6b4:	75 08                	jne    c001a6be <Reg::readInt(char*, char*, int*)+0x79>
c001a6b6:	83 c2 02             	add    edx,0x2
c001a6b9:	be 02 00 00 00       	mov    esi,0x2
c001a6be:	01 d7                	add    edi,edx
c001a6c0:	31 d2                	xor    edx,edx
c001a6c2:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a6c4:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a6c8:	80 fb 0d             	cmp    bl,0xd
c001a6cb:	0f 94 c3             	sete   bl
c001a6ce:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a6d3:	0f 94 c1             	sete   cl
c001a6d6:	08 cb                	or     bl,cl
c001a6d8:	75 3a                	jne    c001a714 <Reg::readInt(char*, char*, int*)+0xcf>
c001a6da:	0f af d6             	imul   edx,esi
c001a6dd:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a6e2:	83 fe 10             	cmp    esi,0x10
c001a6e5:	75 26                	jne    c001a70d <Reg::readInt(char*, char*, int*)+0xc8>
c001a6e7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a6eb:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a6ee:	89 e9                	mov    ecx,ebp
c001a6f0:	80 f9 05             	cmp    cl,0x5
c001a6f3:	77 06                	ja     c001a6fb <Reg::readInt(char*, char*, int*)+0xb6>
c001a6f5:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a6f9:	eb 16                	jmp    c001a711 <Reg::readInt(char*, char*, int*)+0xcc>
c001a6fb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a6ff:	83 e9 61             	sub    ecx,0x61
c001a702:	80 f9 05             	cmp    cl,0x5
c001a705:	77 06                	ja     c001a70d <Reg::readInt(char*, char*, int*)+0xc8>
c001a707:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a70b:	eb 04                	jmp    c001a711 <Reg::readInt(char*, char*, int*)+0xcc>
c001a70d:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a711:	47                   	inc    edi
c001a712:	eb ae                	jmp    c001a6c2 <Reg::readInt(char*, char*, int*)+0x7d>
c001a714:	84 c0                	test   al,al
c001a716:	74 02                	je     c001a71a <Reg::readInt(char*, char*, int*)+0xd5>
c001a718:	f7 da                	neg    edx
c001a71a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a721:	89 10                	mov    DWORD PTR [eax],edx
c001a723:	88 d8                	mov    al,bl
c001a725:	81 c4 ec 00 00 00    	add    esp,0xec
c001a72b:	5b                   	pop    ebx
c001a72c:	5e                   	pop    esi
c001a72d:	5f                   	pop    edi
c001a72e:	5d                   	pop    ebp
c001a72f:	c3                   	ret    

c001a730 <Reg::readString(char*, char*, char*, int)>:
c001a730:	57                   	push   edi
c001a731:	56                   	push   esi
c001a732:	53                   	push   ebx
c001a733:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a739:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a740:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a744:	57                   	push   edi
c001a745:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a74c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a753:	e8 b6 fe ff ff       	call   c001a60e <Reg::getLine(char*, char*, char*)>
c001a758:	83 c4 10             	add    esp,0x10
c001a75b:	89 c6                	mov    esi,eax
c001a75d:	84 c0                	test   al,al
c001a75f:	74 44                	je     c001a7a5 <Reg::readString(char*, char*, char*, int)+0x75>
c001a761:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a768:	31 c0                	xor    eax,eax
c001a76a:	4a                   	dec    edx
c001a76b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a76e:	84 c9                	test   cl,cl
c001a770:	74 0f                	je     c001a781 <Reg::readString(char*, char*, char*, int)+0x51>
c001a772:	39 c2                	cmp    edx,eax
c001a774:	7e 0b                	jle    c001a781 <Reg::readString(char*, char*, char*, int)+0x51>
c001a776:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a779:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a77e:	40                   	inc    eax
c001a77f:	eb ea                	jmp    c001a76b <Reg::readString(char*, char*, char*, int)+0x3b>
c001a781:	83 ec 0c             	sub    esp,0xc
c001a784:	53                   	push   ebx
c001a785:	e8 57 5f fe ff       	call   c00006e1 <strlen>
c001a78a:	83 c4 10             	add    esp,0x10
c001a78d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a792:	75 11                	jne    c001a7a5 <Reg::readString(char*, char*, char*, int)+0x75>
c001a794:	83 ec 0c             	sub    esp,0xc
c001a797:	53                   	push   ebx
c001a798:	e8 44 5f fe ff       	call   c00006e1 <strlen>
c001a79d:	83 c4 10             	add    esp,0x10
c001a7a0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a7a5:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a7ab:	89 f0                	mov    eax,esi
c001a7ad:	5b                   	pop    ebx
c001a7ae:	5e                   	pop    esi
c001a7af:	5f                   	pop    edi
c001a7b0:	c3                   	ret    

c001a7b1 <Reg::readBool(char*, char*, bool*)>:
c001a7b1:	83 ec 20             	sub    esp,0x20
c001a7b4:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a7b8:	50                   	push   eax
c001a7b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7c1:	e8 7f fe ff ff       	call   c001a645 <Reg::readInt(char*, char*, int*)>
c001a7c6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a7cb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a7cf:	0f 95 02             	setne  BYTE PTR [edx]
c001a7d2:	83 c4 2c             	add    esp,0x2c
c001a7d5:	c3                   	ret    

c001a7d6 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001a7d6:	53                   	push   ebx
c001a7d7:	83 ec 1c             	sub    esp,0x1c
c001a7da:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a7de:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a7e2:	50                   	push   eax
c001a7e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7eb:	e8 c1 ff ff ff       	call   c001a7b1 <Reg::readBool(char*, char*, bool*)>
c001a7f0:	83 c4 10             	add    esp,0x10
c001a7f3:	84 c0                	test   al,al
c001a7f5:	74 04                	je     c001a7fb <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001a7f7:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001a7fb:	88 d8                	mov    al,bl
c001a7fd:	83 c4 18             	add    esp,0x18
c001a800:	5b                   	pop    ebx
c001a801:	c3                   	ret    

c001a802 <Reg::readIntWithDefault(char*, char*, int)>:
c001a802:	53                   	push   ebx
c001a803:	83 ec 1c             	sub    esp,0x1c
c001a806:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a80a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a80e:	50                   	push   eax
c001a80f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a813:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a817:	e8 29 fe ff ff       	call   c001a645 <Reg::readInt(char*, char*, int*)>
c001a81c:	83 c4 10             	add    esp,0x10
c001a81f:	84 c0                	test   al,al
c001a821:	74 04                	je     c001a827 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001a823:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a827:	89 d8                	mov    eax,ebx
c001a829:	83 c4 18             	add    esp,0x18
c001a82c:	5b                   	pop    ebx
c001a82d:	c3                   	ret    

c001a82e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001a82e:	57                   	push   edi
c001a82f:	56                   	push   esi
c001a830:	53                   	push   ebx
c001a831:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a835:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a839:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a83d:	56                   	push   esi
c001a83e:	53                   	push   ebx
c001a83f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a847:	e8 e4 fe ff ff       	call   c001a730 <Reg::readString(char*, char*, char*, int)>
c001a84c:	83 c4 10             	add    esp,0x10
c001a84f:	84 c0                	test   al,al
c001a851:	75 1b                	jne    c001a86e <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001a853:	50                   	push   eax
c001a854:	56                   	push   esi
c001a855:	4e                   	dec    esi
c001a856:	6a 00                	push   0x0
c001a858:	53                   	push   ebx
c001a859:	e8 66 5e fe ff       	call   c00006c4 <memset>
c001a85e:	83 c4 0c             	add    esp,0xc
c001a861:	56                   	push   esi
c001a862:	57                   	push   edi
c001a863:	53                   	push   ebx
c001a864:	89 fb                	mov    ebx,edi
c001a866:	e8 35 5e fe ff       	call   c00006a0 <memcpy>
c001a86b:	83 c4 10             	add    esp,0x10
c001a86e:	89 d8                	mov    eax,ebx
c001a870:	5b                   	pop    ebx
c001a871:	5e                   	pop    esi
c001a872:	5f                   	pop    edi
c001a873:	c3                   	ret    

c001a874 <Sys::exit(regs*)>:
c001a874:	83 ec 18             	sub    esp,0x18
c001a877:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a87b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a87e:	e8 ee 33 00 00       	call   c001dc71 <terminateTask(int)>
c001a883:	83 c8 ff             	or     eax,0xffffffff
c001a886:	83 c4 1c             	add    esp,0x1c
c001a889:	89 c2                	mov    edx,eax
c001a88b:	c3                   	ret    

c001a88c <Sys::getCwd(regs*)>:
c001a88c:	83 ec 10             	sub    esp,0x10
c001a88f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a893:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a896:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a899:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a89e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a8a1:	e8 de 83 ff ff       	call   c0012c84 <Fs::getcwd(Process*, char*, int)>
c001a8a6:	83 c4 1c             	add    esp,0x1c
c001a8a9:	99                   	cdq    
c001a8aa:	c3                   	ret    

c001a8ab <Sys::getPID(regs*)>:
c001a8ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a8b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a8b3:	8b 00                	mov    eax,DWORD PTR [eax]
c001a8b5:	99                   	cdq    
c001a8b6:	c3                   	ret    

c001a8b7 <Sys::loadDLL(regs*)>:
c001a8b7:	56                   	push   esi
c001a8b8:	53                   	push   ebx
c001a8b9:	31 d2                	xor    edx,edx
c001a8bb:	51                   	push   ecx
c001a8bc:	b8 01 00 00 00       	mov    eax,0x1
c001a8c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a8c5:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001a8c9:	0f 84 8c 00 00 00    	je     c001a95b <Sys::loadDLL(regs*)+0xa4>
c001a8cf:	83 ec 0c             	sub    esp,0xc
c001a8d2:	68 14 01 00 00       	push   0x114
c001a8d7:	e8 7e 4d ff ff       	call   c000f65a <malloc>
c001a8dc:	83 c4 0c             	add    esp,0xc
c001a8df:	89 c3                	mov    ebx,eax
c001a8e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a8e6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a8e9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a8ec:	53                   	push   ebx
c001a8ed:	e8 90 85 ff ff       	call   c0012e82 <File::File(char const*, Process*)>
c001a8f2:	83 c4 10             	add    esp,0x10
c001a8f5:	31 d2                	xor    edx,edx
c001a8f7:	b8 02 00 00 00       	mov    eax,0x2
c001a8fc:	85 db                	test   ebx,ebx
c001a8fe:	74 5b                	je     c001a95b <Sys::loadDLL(regs*)+0xa4>
c001a900:	83 ec 0c             	sub    esp,0xc
c001a903:	53                   	push   ebx
c001a904:	e8 4b 88 ff ff       	call   c0013154 <File::exists()>
c001a909:	83 c4 10             	add    esp,0x10
c001a90c:	84 c0                	test   al,al
c001a90e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a910:	75 11                	jne    c001a923 <Sys::loadDLL(regs*)+0x6c>
c001a912:	83 ec 0c             	sub    esp,0xc
c001a915:	53                   	push   ebx
c001a916:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a919:	83 c4 10             	add    esp,0x10
c001a91c:	b8 03 00 00 00       	mov    eax,0x3
c001a921:	eb 36                	jmp    c001a959 <Sys::loadDLL(regs*)+0xa2>
c001a923:	83 ec 0c             	sub    esp,0xc
c001a926:	53                   	push   ebx
c001a927:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a92a:	58                   	pop    eax
c001a92b:	5a                   	pop    edx
c001a92c:	6a 00                	push   0x0
c001a92e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a931:	e8 85 22 00 00       	call   c001cbbb <Thr::loadDLL(char const*, bool)>
c001a936:	83 c4 10             	add    esp,0x10
c001a939:	89 c1                	mov    ecx,eax
c001a93b:	31 d2                	xor    edx,edx
c001a93d:	b8 04 00 00 00       	mov    eax,0x4
c001a942:	85 c9                	test   ecx,ecx
c001a944:	74 15                	je     c001a95b <Sys::loadDLL(regs*)+0xa4>
c001a946:	53                   	push   ebx
c001a947:	53                   	push   ebx
c001a948:	ff 35 e8 d0 02 c0    	push   DWORD PTR ds:0xc002d0e8
c001a94e:	51                   	push   ecx
c001a94f:	e8 76 24 00 00       	call   c001cdca <Thr::executeDLL(unsigned long, void*)>
c001a954:	83 c4 10             	add    esp,0x10
c001a957:	31 c0                	xor    eax,eax
c001a959:	31 d2                	xor    edx,edx
c001a95b:	59                   	pop    ecx
c001a95c:	5b                   	pop    ebx
c001a95d:	5e                   	pop    esi
c001a95e:	c3                   	ret    

c001a95f <Sys::read(regs*)>:
c001a95f:	57                   	push   edi
c001a960:	56                   	push   esi
c001a961:	53                   	push   ebx
c001a962:	83 ec 10             	sub    esp,0x10
c001a965:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a969:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a96c:	83 f8 02             	cmp    eax,0x2
c001a96f:	77 10                	ja     c001a981 <Sys::read(regs*)+0x22>
c001a971:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a976:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a979:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a97f:	eb 0e                	jmp    c001a98f <Sys::read(regs*)+0x30>
c001a981:	83 ec 0c             	sub    esp,0xc
c001a984:	50                   	push   eax
c001a985:	e8 59 6e ff ff       	call   c00117e3 <getFromFileDescriptor(int)>
c001a98a:	83 c4 10             	add    esp,0x10
c001a98d:	89 c1                	mov    ecx,eax
c001a98f:	83 c8 ff             	or     eax,0xffffffff
c001a992:	85 c9                	test   ecx,ecx
c001a994:	89 c2                	mov    edx,eax
c001a996:	74 28                	je     c001a9c0 <Sys::read(regs*)+0x61>
c001a998:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a9a0:	31 ff                	xor    edi,edi
c001a9a2:	83 ec 0c             	sub    esp,0xc
c001a9a5:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a9a7:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a9ab:	52                   	push   edx
c001a9ac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a9af:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a9b2:	57                   	push   edi
c001a9b3:	56                   	push   esi
c001a9b4:	51                   	push   ecx
c001a9b5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a9b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a9bc:	83 c4 20             	add    esp,0x20
c001a9bf:	99                   	cdq    
c001a9c0:	83 c4 10             	add    esp,0x10
c001a9c3:	5b                   	pop    ebx
c001a9c4:	5e                   	pop    esi
c001a9c5:	5f                   	pop    edi
c001a9c6:	c3                   	ret    

c001a9c7 <Sys::sbrk(regs*)>:
c001a9c7:	56                   	push   esi
c001a9c8:	53                   	push   ebx
c001a9c9:	50                   	push   eax
c001a9ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a9cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a9d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a9d6:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001a9d9:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001a9df:	85 db                	test   ebx,ebx
c001a9e1:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001a9e4:	74 02                	je     c001a9e8 <Sys::sbrk(regs*)+0x21>
c001a9e6:	79 06                	jns    c001a9ee <Sys::sbrk(regs*)+0x27>
c001a9e8:	89 f0                	mov    eax,esi
c001a9ea:	31 d2                	xor    edx,edx
c001a9ec:	eb 2a                	jmp    c001aa18 <Sys::sbrk(regs*)+0x51>
c001a9ee:	83 c8 ff             	or     eax,0xffffffff
c001a9f1:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001a9f7:	89 c2                	mov    edx,eax
c001a9f9:	77 1d                	ja     c001aa18 <Sys::sbrk(regs*)+0x51>
c001a9fb:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001aa01:	50                   	push   eax
c001aa02:	c1 ea 0c             	shr    edx,0xc
c001aa05:	68 07 04 00 00       	push   0x407
c001aa0a:	52                   	push   edx
c001aa0b:	51                   	push   ecx
c001aa0c:	e8 f3 76 ff ff       	call   c0012104 <VAS::allocatePages(int, int)>
c001aa11:	89 f0                	mov    eax,esi
c001aa13:	31 d2                	xor    edx,edx
c001aa15:	83 c4 10             	add    esp,0x10
c001aa18:	59                   	pop    ecx
c001aa19:	5b                   	pop    ebx
c001aa1a:	5e                   	pop    esi
c001aa1b:	c3                   	ret    

c001aa1c <Sys::setCwd(regs*)>:
c001aa1c:	83 ec 14             	sub    esp,0x14
c001aa1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aa23:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aa26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa2b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aa2e:	e8 c0 87 ff ff       	call   c00131f3 <Fs::setcwd(Process*, char*)>
c001aa33:	83 c4 1c             	add    esp,0x1c
c001aa36:	99                   	cdq    
c001aa37:	c3                   	ret    

c001aa38 <Sys::setTime(regs*)>:
c001aa38:	55                   	push   ebp
c001aa39:	31 d2                	xor    edx,edx
c001aa3b:	57                   	push   edi
c001aa3c:	bf 18 00 00 00       	mov    edi,0x18
c001aa41:	56                   	push   esi
c001aa42:	53                   	push   ebx
c001aa43:	bb 3c 00 00 00       	mov    ebx,0x3c
c001aa48:	83 ec 30             	sub    esp,0x30
c001aa4b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001aa4f:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001aa52:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001aa55:	f7 f3                	div    ebx
c001aa57:	89 d6                	mov    esi,edx
c001aa59:	31 d2                	xor    edx,edx
c001aa5b:	f7 f3                	div    ebx
c001aa5d:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001aa60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001aa64:	bb 10 0e 00 00       	mov    ebx,0xe10
c001aa69:	31 d2                	xor    edx,edx
c001aa6b:	f7 f3                	div    ebx
c001aa6d:	31 d2                	xor    edx,edx
c001aa6f:	bb 0c 00 00 00       	mov    ebx,0xc
c001aa74:	f7 f7                	div    edi
c001aa76:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001aa79:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001aa7d:	0f b7 cd             	movzx  ecx,bp
c001aa80:	56                   	push   esi
c001aa81:	89 c7                	mov    edi,eax
c001aa83:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001aa87:	c1 e6 10             	shl    esi,0x10
c001aa8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aa8e:	83 e7 1f             	and    edi,0x1f
c001aa91:	51                   	push   ecx
c001aa92:	47                   	inc    edi
c001aa93:	c1 e8 05             	shr    eax,0x5
c001aa96:	31 d2                	xor    edx,edx
c001aa98:	f7 f3                	div    ebx
c001aa9a:	31 db                	xor    ebx,ebx
c001aa9c:	52                   	push   edx
c001aa9d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001aaa1:	57                   	push   edi
c001aaa2:	68 75 ab 02 c0       	push   0xc002ab75
c001aaa7:	e8 7d 7e ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001aaac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aab0:	89 f8                	mov    eax,edi
c001aab2:	31 c9                	xor    ecx,ecx
c001aab4:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001aab8:	88 c1                	mov    cl,al
c001aaba:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001aac0:	88 d5                	mov    ch,dl
c001aac2:	c1 e0 10             	shl    eax,0x10
c001aac5:	0f b7 d1             	movzx  edx,cx
c001aac8:	09 c2                	or     edx,eax
c001aaca:	89 d8                	mov    eax,ebx
c001aacc:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001aad1:	09 f0                	or     eax,esi
c001aad3:	89 c3                	mov    ebx,eax
c001aad5:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001aad9:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001aadd:	83 c4 18             	add    esp,0x18
c001aae0:	53                   	push   ebx
c001aae1:	52                   	push   edx
c001aae2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001aae6:	8d 74 24 28          	lea    esi,[esp+0x28]
c001aaea:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001aaee:	e8 1a 8e ff ff       	call   c001390d <datetimeToSeconds(datetime_t)>
c001aaf3:	83 c4 0c             	add    esp,0xc
c001aaf6:	52                   	push   edx
c001aaf7:	50                   	push   eax
c001aaf8:	56                   	push   esi
c001aaf9:	e8 96 8f ff ff       	call   c0013a94 <secondsToDatetime(unsigned long long)>
c001aafe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ab02:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ab06:	51                   	push   ecx
c001ab07:	89 d6                	mov    esi,edx
c001ab09:	51                   	push   ecx
c001ab0a:	c1 ee 10             	shr    esi,0x10
c001ab0d:	89 f3                	mov    ebx,esi
c001ab0f:	0f b6 f3             	movzx  esi,bl
c001ab12:	56                   	push   esi
c001ab13:	0f b6 f6             	movzx  esi,dh
c001ab16:	0f b6 d2             	movzx  edx,dl
c001ab19:	56                   	push   esi
c001ab1a:	52                   	push   edx
c001ab1b:	89 c2                	mov    edx,eax
c001ab1d:	c1 ea 10             	shr    edx,0x10
c001ab20:	52                   	push   edx
c001ab21:	0f b6 d4             	movzx  edx,ah
c001ab24:	0f b6 c0             	movzx  eax,al
c001ab27:	52                   	push   edx
c001ab28:	50                   	push   eax
c001ab29:	68 91 ab 02 c0       	push   0xc002ab91
c001ab2e:	e8 f6 7d ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001ab33:	83 c4 2c             	add    esp,0x2c
c001ab36:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c001ab3b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ab3f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ab43:	53                   	push   ebx
c001ab44:	51                   	push   ecx
c001ab45:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001ab4b:	e8 e4 8e ff ff       	call   c0013a34 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001ab50:	83 f0 01             	xor    eax,0x1
c001ab53:	31 d2                	xor    edx,edx
c001ab55:	0f b6 c0             	movzx  eax,al
c001ab58:	83 c4 3c             	add    esp,0x3c
c001ab5b:	5b                   	pop    ebx
c001ab5c:	5e                   	pop    esi
c001ab5d:	5f                   	pop    edi
c001ab5e:	5d                   	pop    ebp
c001ab5f:	c3                   	ret    

c001ab60 <Sys::timezone(regs*)>:
c001ab60:	53                   	push   ebx
c001ab61:	83 ec 08             	sub    esp,0x8
c001ab64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab68:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001ab6c:	75 17                	jne    c001ab85 <Sys::timezone(regs*)+0x25>
c001ab6e:	83 ec 0c             	sub    esp,0xc
c001ab71:	68 ad ab 02 c0       	push   0xc002abad
c001ab76:	e8 ae 7d ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001ab7b:	83 c8 ff             	or     eax,0xffffffff
c001ab7e:	83 c4 10             	add    esp,0x10
c001ab81:	89 c2                	mov    edx,eax
c001ab83:	eb 20                	jmp    c001aba5 <Sys::timezone(regs*)+0x45>
c001ab85:	83 ec 0c             	sub    esp,0xc
c001ab88:	68 e5 ab 02 c0       	push   0xc002abe5
c001ab8d:	e8 97 7d ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001ab92:	58                   	pop    eax
c001ab93:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001ab96:	e8 fb 8b ff ff       	call   c0013796 <User::loadClockSettings(int)>
c001ab9b:	83 c4 10             	add    esp,0x10
c001ab9e:	b8 01 00 00 00       	mov    eax,0x1
c001aba3:	31 d2                	xor    edx,edx
c001aba5:	83 c4 08             	add    esp,0x8
c001aba8:	5b                   	pop    ebx
c001aba9:	c3                   	ret    

c001abaa <Sys::write(regs*)>:
c001abaa:	57                   	push   edi
c001abab:	56                   	push   esi
c001abac:	53                   	push   ebx
c001abad:	83 ec 10             	sub    esp,0x10
c001abb0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001abb4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001abb7:	83 f8 02             	cmp    eax,0x2
c001abba:	77 10                	ja     c001abcc <Sys::write(regs*)+0x22>
c001abbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001abc1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001abc4:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001abca:	eb 0e                	jmp    c001abda <Sys::write(regs*)+0x30>
c001abcc:	83 ec 0c             	sub    esp,0xc
c001abcf:	50                   	push   eax
c001abd0:	e8 0e 6c ff ff       	call   c00117e3 <getFromFileDescriptor(int)>
c001abd5:	83 c4 10             	add    esp,0x10
c001abd8:	89 c1                	mov    ecx,eax
c001abda:	83 c8 ff             	or     eax,0xffffffff
c001abdd:	85 c9                	test   ecx,ecx
c001abdf:	89 c2                	mov    edx,eax
c001abe1:	74 28                	je     c001ac0b <Sys::write(regs*)+0x61>
c001abe3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001abeb:	31 ff                	xor    edi,edi
c001abed:	83 ec 0c             	sub    esp,0xc
c001abf0:	8b 01                	mov    eax,DWORD PTR [ecx]
c001abf2:	8d 54 24 18          	lea    edx,[esp+0x18]
c001abf6:	52                   	push   edx
c001abf7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001abfa:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001abfd:	57                   	push   edi
c001abfe:	56                   	push   esi
c001abff:	51                   	push   ecx
c001ac00:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001ac03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ac07:	83 c4 20             	add    esp,0x20
c001ac0a:	99                   	cdq    
c001ac0b:	83 c4 10             	add    esp,0x10
c001ac0e:	5b                   	pop    ebx
c001ac0f:	5e                   	pop    esi
c001ac10:	5f                   	pop    edi
c001ac11:	c3                   	ret    

c001ac12 <Sys::yield(regs*)>:
c001ac12:	57                   	push   edi
c001ac13:	56                   	push   esi
c001ac14:	53                   	push   ebx
c001ac15:	e8 14 26 00 00       	call   c001d22e <lockScheduler()>
c001ac1a:	e8 4b 29 00 00       	call   c001d56a <schedule()>
c001ac1f:	e8 0c 26 00 00       	call   c001d230 <unlockScheduler()>
c001ac24:	8b 35 70 d7 02 c0    	mov    esi,DWORD PTR ds:0xc002d770
c001ac2a:	8b 3d 74 d7 02 c0    	mov    edi,DWORD PTR ds:0xc002d774
c001ac30:	89 f0                	mov    eax,esi
c001ac32:	89 fb                	mov    ebx,edi
c001ac34:	89 f1                	mov    ecx,esi
c001ac36:	c1 e0 07             	shl    eax,0x7
c001ac39:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001ac3d:	25 80 30 0f 00       	and    eax,0xf3080
c001ac42:	c1 eb 17             	shr    ebx,0x17
c001ac45:	31 c8                	xor    eax,ecx
c001ac47:	89 da                	mov    edx,ebx
c001ac49:	5b                   	pop    ebx
c001ac4a:	5e                   	pop    esi
c001ac4b:	5f                   	pop    edi
c001ac4c:	c3                   	ret    

c001ac4d <sysCallSeekDir(regs*)>:
c001ac4d:	31 c0                	xor    eax,eax
c001ac4f:	31 d2                	xor    edx,edx
c001ac51:	c3                   	ret    

c001ac52 <sysCallTellDir(regs*)>:
c001ac52:	31 c0                	xor    eax,eax
c001ac54:	31 d2                	xor    edx,edx
c001ac56:	c3                   	ret    

c001ac57 <sysCallVerify(regs*)>:
c001ac57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac5b:	31 d2                	xor    edx,edx
c001ac5d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ac60:	c3                   	ret    

c001ac61 <sysCallGetArgc(regs*)>:
c001ac61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac66:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac69:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001ac6f:	99                   	cdq    
c001ac70:	c3                   	ret    

c001ac71 <sysFormatDisk(regs*)>:
c001ac71:	56                   	push   esi
c001ac72:	53                   	push   ebx
c001ac73:	53                   	push   ebx
c001ac74:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ac78:	8b 1d 68 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d268
c001ac7e:	eb 25                	jmp    c001aca5 <sysFormatDisk(regs*)+0x34>
c001ac80:	83 ec 0c             	sub    esp,0xc
c001ac83:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001ac86:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ac88:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001ac8b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001ac8e:	50                   	push   eax
c001ac8f:	ff 34 85 00 d7 02 c0 	push   DWORD PTR [eax*4-0x3ffd2900]
c001ac96:	53                   	push   ebx
c001ac97:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001ac9a:	83 c4 20             	add    esp,0x20
c001ac9d:	83 f8 08             	cmp    eax,0x8
c001aca0:	75 12                	jne    c001acb4 <sysFormatDisk(regs*)+0x43>
c001aca2:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001aca5:	85 db                	test   ebx,ebx
c001aca7:	75 d7                	jne    c001ac80 <sysFormatDisk(regs*)+0xf>
c001aca9:	59                   	pop    ecx
c001acaa:	b8 03 00 00 00       	mov    eax,0x3
c001acaf:	31 d2                	xor    edx,edx
c001acb1:	5b                   	pop    ebx
c001acb2:	5e                   	pop    esi
c001acb3:	c3                   	ret    
c001acb4:	85 c0                	test   eax,eax
c001acb6:	74 1b                	je     c001acd3 <sysFormatDisk(regs*)+0x62>
c001acb8:	83 f8 09             	cmp    eax,0x9
c001acbb:	74 0b                	je     c001acc8 <sysFormatDisk(regs*)+0x57>
c001acbd:	59                   	pop    ecx
c001acbe:	b8 02 00 00 00       	mov    eax,0x2
c001acc3:	31 d2                	xor    edx,edx
c001acc5:	5b                   	pop    ebx
c001acc6:	5e                   	pop    esi
c001acc7:	c3                   	ret    
c001acc8:	59                   	pop    ecx
c001acc9:	b8 01 00 00 00       	mov    eax,0x1
c001acce:	31 d2                	xor    edx,edx
c001acd0:	5b                   	pop    ebx
c001acd1:	5e                   	pop    esi
c001acd2:	c3                   	ret    
c001acd3:	59                   	pop    ecx
c001acd4:	31 c0                	xor    eax,eax
c001acd6:	31 d2                	xor    edx,edx
c001acd8:	5b                   	pop    ebx
c001acd9:	5e                   	pop    esi
c001acda:	c3                   	ret    

c001acdb <sysSetDiskVolumeLabel(regs*)>:
c001acdb:	56                   	push   esi
c001acdc:	53                   	push   ebx
c001acdd:	53                   	push   ebx
c001acde:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ace2:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001ace5:	83 f8 19             	cmp    eax,0x19
c001ace8:	77 29                	ja     c001ad13 <sysSetDiskVolumeLabel(regs*)+0x38>
c001acea:	8b 0c 85 00 d7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2900]
c001acf1:	85 c9                	test   ecx,ecx
c001acf3:	74 1e                	je     c001ad13 <sysSetDiskVolumeLabel(regs*)+0x38>
c001acf5:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001acf8:	85 d2                	test   edx,edx
c001acfa:	74 17                	je     c001ad13 <sysSetDiskVolumeLabel(regs*)+0x38>
c001acfc:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001ad02:	8b 33                	mov    esi,DWORD PTR [ebx]
c001ad04:	52                   	push   edx
c001ad05:	50                   	push   eax
c001ad06:	51                   	push   ecx
c001ad07:	53                   	push   ebx
c001ad08:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001ad0b:	83 c4 10             	add    esp,0x10
c001ad0e:	99                   	cdq    
c001ad0f:	59                   	pop    ecx
c001ad10:	5b                   	pop    ebx
c001ad11:	5e                   	pop    esi
c001ad12:	c3                   	ret    
c001ad13:	59                   	pop    ecx
c001ad14:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ad19:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ad1e:	5b                   	pop    ebx
c001ad1f:	5e                   	pop    esi
c001ad20:	c3                   	ret    

c001ad21 <sysGetDiskVolumeLabel(regs*)>:
c001ad21:	57                   	push   edi
c001ad22:	56                   	push   esi
c001ad23:	53                   	push   ebx
c001ad24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad28:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ad2b:	83 fa 19             	cmp    edx,0x19
c001ad2e:	77 34                	ja     c001ad64 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ad30:	8b 0c 95 00 d7 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2900]
c001ad37:	85 c9                	test   ecx,ecx
c001ad39:	74 29                	je     c001ad64 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ad3b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001ad3e:	85 db                	test   ebx,ebx
c001ad40:	74 22                	je     c001ad64 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ad42:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001ad45:	85 c0                	test   eax,eax
c001ad47:	74 1b                	je     c001ad64 <sysGetDiskVolumeLabel(regs*)+0x43>
c001ad49:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001ad4f:	83 ec 0c             	sub    esp,0xc
c001ad52:	8b 3e                	mov    edi,DWORD PTR [esi]
c001ad54:	50                   	push   eax
c001ad55:	53                   	push   ebx
c001ad56:	52                   	push   edx
c001ad57:	51                   	push   ecx
c001ad58:	56                   	push   esi
c001ad59:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001ad5c:	83 c4 20             	add    esp,0x20
c001ad5f:	99                   	cdq    
c001ad60:	5b                   	pop    ebx
c001ad61:	5e                   	pop    esi
c001ad62:	5f                   	pop    edi
c001ad63:	c3                   	ret    
c001ad64:	5b                   	pop    ebx
c001ad65:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ad6a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ad6f:	5e                   	pop    esi
c001ad70:	5f                   	pop    edi
c001ad71:	c3                   	ret    

c001ad72 <sysShutdown(regs*)>:
c001ad72:	83 ec 0c             	sub    esp,0xc
c001ad75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad79:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ad7c:	85 c0                	test   eax,eax
c001ad7e:	74 18                	je     c001ad98 <sysShutdown(regs*)+0x26>
c001ad80:	83 f8 01             	cmp    eax,0x1
c001ad83:	74 38                	je     c001adbd <sysShutdown(regs*)+0x4b>
c001ad85:	83 f8 02             	cmp    eax,0x2
c001ad88:	74 24                	je     c001adae <sysShutdown(regs*)+0x3c>
c001ad8a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ad8f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ad94:	83 c4 0c             	add    esp,0xc
c001ad97:	c3                   	ret    
c001ad98:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c001ad9d:	8b 10                	mov    edx,DWORD PTR [eax]
c001ad9f:	6a 00                	push   0x0
c001ada1:	6a 00                	push   0x0
c001ada3:	6a 00                	push   0x0
c001ada5:	50                   	push   eax
c001ada6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ada9:	83 c4 10             	add    esp,0x10
c001adac:	eb dc                	jmp    c001ad8a <sysShutdown(regs*)+0x18>
c001adae:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c001adb3:	8b 10                	mov    edx,DWORD PTR [eax]
c001adb5:	6a 00                	push   0x0
c001adb7:	6a 00                	push   0x0
c001adb9:	6a 01                	push   0x1
c001adbb:	eb e8                	jmp    c001ada5 <sysShutdown(regs*)+0x33>
c001adbd:	a1 80 d7 02 c0       	mov    eax,ds:0xc002d780
c001adc2:	85 c0                	test   eax,eax
c001adc4:	74 02                	je     c001adc8 <sysShutdown(regs*)+0x56>
c001adc6:	ff d0                	call   eax
c001adc8:	31 c0                	xor    eax,eax
c001adca:	31 d2                	xor    edx,edx
c001adcc:	83 c4 0c             	add    esp,0xc
c001adcf:	c3                   	ret    

c001add0 <sysCallRealpath(regs*)>:
c001add0:	83 ec 0c             	sub    esp,0xc
c001add3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001add7:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001adda:	85 d2                	test   edx,edx
c001addc:	74 07                	je     c001ade5 <sysCallRealpath(regs*)+0x15>
c001adde:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001ade1:	85 c0                	test   eax,eax
c001ade3:	75 0b                	jne    c001adf0 <sysCallRealpath(regs*)+0x20>
c001ade5:	b8 01 00 00 00       	mov    eax,0x1
c001adea:	31 d2                	xor    edx,edx
c001adec:	83 c4 0c             	add    esp,0xc
c001adef:	c3                   	ret    
c001adf0:	51                   	push   ecx
c001adf1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001adf7:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001adfa:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001ae00:	51                   	push   ecx
c001ae01:	52                   	push   edx
c001ae02:	50                   	push   eax
c001ae03:	e8 d0 7e ff ff       	call   c0012cd8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001ae08:	83 c4 10             	add    esp,0x10
c001ae0b:	31 c0                	xor    eax,eax
c001ae0d:	31 d2                	xor    edx,edx
c001ae0f:	83 c4 0c             	add    esp,0xc
c001ae12:	c3                   	ret    

c001ae13 <sysCallReadDir(regs*)>:
c001ae13:	53                   	push   ebx
c001ae14:	83 ec 18             	sub    esp,0x18
c001ae17:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae1b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ae1e:	83 f8 02             	cmp    eax,0x2
c001ae21:	76 53                	jbe    c001ae76 <sysCallReadDir(regs*)+0x63>
c001ae23:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001ae26:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001ae2c:	77 4f                	ja     c001ae7d <sysCallReadDir(regs*)+0x6a>
c001ae2e:	83 ec 0c             	sub    esp,0xc
c001ae31:	50                   	push   eax
c001ae32:	e8 ac 69 ff ff       	call   c00117e3 <getFromFileDescriptor(int)>
c001ae37:	83 c4 10             	add    esp,0x10
c001ae3a:	85 c0                	test   eax,eax
c001ae3c:	74 50                	je     c001ae8e <sysCallReadDir(regs*)+0x7b>
c001ae3e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae46:	83 ec 0c             	sub    esp,0xc
c001ae49:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae4b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001ae4f:	51                   	push   ecx
c001ae50:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ae53:	6a 00                	push   0x0
c001ae55:	68 10 01 00 00       	push   0x110
c001ae5a:	50                   	push   eax
c001ae5b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ae5e:	83 c4 20             	add    esp,0x20
c001ae61:	85 c0                	test   eax,eax
c001ae63:	74 38                	je     c001ae9d <sysCallReadDir(regs*)+0x8a>
c001ae65:	83 f8 07             	cmp    eax,0x7
c001ae68:	74 0c                	je     c001ae76 <sysCallReadDir(regs*)+0x63>
c001ae6a:	b8 02 00 00 00       	mov    eax,0x2
c001ae6f:	31 d2                	xor    edx,edx
c001ae71:	83 c4 18             	add    esp,0x18
c001ae74:	5b                   	pop    ebx
c001ae75:	c3                   	ret    
c001ae76:	b8 01 00 00 00       	mov    eax,0x1
c001ae7b:	eb f2                	jmp    c001ae6f <sysCallReadDir(regs*)+0x5c>
c001ae7d:	83 ec 08             	sub    esp,0x8
c001ae80:	52                   	push   edx
c001ae81:	68 24 ac 02 c0       	push   0xc002ac24
c001ae86:	e8 9e 7a ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001ae8b:	83 c4 10             	add    esp,0x10
c001ae8e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ae93:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ae98:	83 c4 18             	add    esp,0x18
c001ae9b:	5b                   	pop    ebx
c001ae9c:	c3                   	ret    
c001ae9d:	31 c0                	xor    eax,eax
c001ae9f:	eb ce                	jmp    c001ae6f <sysCallReadDir(regs*)+0x5c>

c001aea1 <sysCallIsATTY(regs*)>:
c001aea1:	83 ec 0c             	sub    esp,0xc
c001aea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aea8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001aeab:	83 f8 02             	cmp    eax,0x2
c001aeae:	76 07                	jbe    c001aeb7 <sysCallIsATTY(regs*)+0x16>
c001aeb0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001aeb5:	75 26                	jne    c001aedd <sysCallIsATTY(regs*)+0x3c>
c001aeb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aebc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aebf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001aec5:	85 c0                	test   eax,eax
c001aec7:	74 24                	je     c001aeed <sysCallIsATTY(regs*)+0x4c>
c001aec9:	83 ec 0c             	sub    esp,0xc
c001aecc:	8b 10                	mov    edx,DWORD PTR [eax]
c001aece:	50                   	push   eax
c001aecf:	ff 12                	call   DWORD PTR [edx]
c001aed1:	31 d2                	xor    edx,edx
c001aed3:	0f b6 c0             	movzx  eax,al
c001aed6:	83 c4 10             	add    esp,0x10
c001aed9:	83 c4 0c             	add    esp,0xc
c001aedc:	c3                   	ret    
c001aedd:	83 ec 0c             	sub    esp,0xc
c001aee0:	50                   	push   eax
c001aee1:	e8 fd 68 ff ff       	call   c00117e3 <getFromFileDescriptor(int)>
c001aee6:	83 c4 10             	add    esp,0x10
c001aee9:	85 c0                	test   eax,eax
c001aeeb:	75 dc                	jne    c001aec9 <sysCallIsATTY(regs*)+0x28>
c001aeed:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aef2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aef7:	83 c4 0c             	add    esp,0xc
c001aefa:	c3                   	ret    

c001aefb <sysCallSeek(regs*)>:
c001aefb:	53                   	push   ebx
c001aefc:	83 ec 08             	sub    esp,0x8
c001aeff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af03:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001af06:	83 f8 02             	cmp    eax,0x2
c001af09:	76 4a                	jbe    c001af55 <sysCallSeek(regs*)+0x5a>
c001af0b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001af10:	77 32                	ja     c001af44 <sysCallSeek(regs*)+0x49>
c001af12:	83 ec 0c             	sub    esp,0xc
c001af15:	50                   	push   eax
c001af16:	e8 c8 68 ff ff       	call   c00117e3 <getFromFileDescriptor(int)>
c001af1b:	83 c4 0c             	add    esp,0xc
c001af1e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001af21:	31 db                	xor    ebx,ebx
c001af23:	53                   	push   ebx
c001af24:	51                   	push   ecx
c001af25:	50                   	push   eax
c001af26:	e8 79 80 ff ff       	call   c0012fa4 <File::seek(unsigned long long)>
c001af2b:	83 c4 10             	add    esp,0x10
c001af2e:	85 c0                	test   eax,eax
c001af30:	0f 95 c0             	setne  al
c001af33:	31 d2                	xor    edx,edx
c001af35:	0f b6 c0             	movzx  eax,al
c001af38:	f7 d8                	neg    eax
c001af3a:	83 d2 00             	adc    edx,0x0
c001af3d:	83 c4 08             	add    esp,0x8
c001af40:	f7 da                	neg    edx
c001af42:	5b                   	pop    ebx
c001af43:	c3                   	ret    
c001af44:	83 ec 08             	sub    esp,0x8
c001af47:	50                   	push   eax
c001af48:	68 93 ac 02 c0       	push   0xc002ac93
c001af4d:	e8 d7 79 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001af52:	83 c4 10             	add    esp,0x10
c001af55:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001af5a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001af5f:	83 c4 08             	add    esp,0x8
c001af62:	5b                   	pop    ebx
c001af63:	c3                   	ret    

c001af64 <sysCallTell(regs*)>:
c001af64:	53                   	push   ebx
c001af65:	83 ec 08             	sub    esp,0x8
c001af68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af6c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001af6f:	83 f8 02             	cmp    eax,0x2
c001af72:	76 5e                	jbe    c001afd2 <sysCallTell(regs*)+0x6e>
c001af74:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001af79:	77 2d                	ja     c001afa8 <sysCallTell(regs*)+0x44>
c001af7b:	83 ec 0c             	sub    esp,0xc
c001af7e:	50                   	push   eax
c001af7f:	e8 5f 68 ff ff       	call   c00117e3 <getFromFileDescriptor(int)>
c001af84:	5a                   	pop    edx
c001af85:	59                   	pop    ecx
c001af86:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001af89:	50                   	push   eax
c001af8a:	e8 6b 80 ff ff       	call   c0012ffa <File::tell(unsigned long long*)>
c001af8f:	83 c4 10             	add    esp,0x10
c001af92:	85 c0                	test   eax,eax
c001af94:	0f 95 c0             	setne  al
c001af97:	31 d2                	xor    edx,edx
c001af99:	0f b6 c0             	movzx  eax,al
c001af9c:	f7 d8                	neg    eax
c001af9e:	83 d2 00             	adc    edx,0x0
c001afa1:	83 c4 08             	add    esp,0x8
c001afa4:	f7 da                	neg    edx
c001afa6:	5b                   	pop    ebx
c001afa7:	c3                   	ret    
c001afa8:	83 ec 08             	sub    esp,0x8
c001afab:	50                   	push   eax
c001afac:	68 ad ac 02 c0       	push   0xc002acad
c001afb1:	e8 73 79 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001afb6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001afb9:	83 c4 10             	add    esp,0x10
c001afbc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001afc2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001afc9:	31 d2                	xor    edx,edx
c001afcb:	31 c0                	xor    eax,eax
c001afcd:	83 c4 08             	add    esp,0x8
c001afd0:	5b                   	pop    ebx
c001afd1:	c3                   	ret    
c001afd2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001afd7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001afdc:	83 c4 08             	add    esp,0x8
c001afdf:	5b                   	pop    ebx
c001afe0:	c3                   	ret    

c001afe1 <sysCallSize(regs*)>:
c001afe1:	53                   	push   ebx
c001afe2:	83 ec 18             	sub    esp,0x18
c001afe5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001afe9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001afec:	83 f8 02             	cmp    eax,0x2
c001afef:	76 64                	jbe    c001b055 <sysCallSize(regs*)+0x74>
c001aff1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001aff6:	77 33                	ja     c001b02b <sysCallSize(regs*)+0x4a>
c001aff8:	83 ec 0c             	sub    esp,0xc
c001affb:	50                   	push   eax
c001affc:	e8 e2 67 ff ff       	call   c00117e3 <getFromFileDescriptor(int)>
c001b001:	83 c4 0c             	add    esp,0xc
c001b004:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b008:	52                   	push   edx
c001b009:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b00c:	50                   	push   eax
c001b00d:	e8 80 81 ff ff       	call   c0013192 <File::stat(unsigned long long*, bool*)>
c001b012:	83 c4 10             	add    esp,0x10
c001b015:	85 c0                	test   eax,eax
c001b017:	0f 95 c0             	setne  al
c001b01a:	31 d2                	xor    edx,edx
c001b01c:	0f b6 c0             	movzx  eax,al
c001b01f:	f7 d8                	neg    eax
c001b021:	83 d2 00             	adc    edx,0x0
c001b024:	83 c4 18             	add    esp,0x18
c001b027:	f7 da                	neg    edx
c001b029:	5b                   	pop    ebx
c001b02a:	c3                   	ret    
c001b02b:	83 ec 08             	sub    esp,0x8
c001b02e:	50                   	push   eax
c001b02f:	68 c7 ac 02 c0       	push   0xc002acc7
c001b034:	e8 f0 78 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001b039:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b03c:	83 c4 10             	add    esp,0x10
c001b03f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b045:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b04c:	31 d2                	xor    edx,edx
c001b04e:	31 c0                	xor    eax,eax
c001b050:	83 c4 18             	add    esp,0x18
c001b053:	5b                   	pop    ebx
c001b054:	c3                   	ret    
c001b055:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b05a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b05f:	83 c4 18             	add    esp,0x18
c001b062:	5b                   	pop    ebx
c001b063:	c3                   	ret    

c001b064 <sysCallSizeFromFilename(regs*)>:
c001b064:	57                   	push   edi
c001b065:	56                   	push   esi
c001b066:	53                   	push   ebx
c001b067:	83 ec 20             	sub    esp,0x20
c001b06a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b06e:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001b071:	83 fb 02             	cmp    ebx,0x2
c001b074:	0f 86 99 00 00 00    	jbe    c001b113 <sysCallSizeFromFilename(regs*)+0xaf>
c001b07a:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b080:	77 65                	ja     c001b0e7 <sysCallSizeFromFilename(regs*)+0x83>
c001b082:	83 ec 0c             	sub    esp,0xc
c001b085:	68 14 01 00 00       	push   0x114
c001b08a:	e8 cb 45 ff ff       	call   c000f65a <malloc>
c001b08f:	83 c4 0c             	add    esp,0xc
c001b092:	89 c6                	mov    esi,eax
c001b094:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b099:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b09c:	53                   	push   ebx
c001b09d:	56                   	push   esi
c001b09e:	e8 df 7d ff ff       	call   c0012e82 <File::File(char const*, Process*)>
c001b0a3:	83 c4 0c             	add    esp,0xc
c001b0a6:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b0aa:	50                   	push   eax
c001b0ab:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001b0ae:	56                   	push   esi
c001b0af:	e8 de 80 ff ff       	call   c0013192 <File::stat(unsigned long long*, bool*)>
c001b0b4:	83 c4 10             	add    esp,0x10
c001b0b7:	85 f6                	test   esi,esi
c001b0b9:	74 14                	je     c001b0cf <sysCallSizeFromFilename(regs*)+0x6b>
c001b0bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b0bf:	8b 16                	mov    edx,DWORD PTR [esi]
c001b0c1:	83 ec 0c             	sub    esp,0xc
c001b0c4:	56                   	push   esi
c001b0c5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b0c8:	83 c4 10             	add    esp,0x10
c001b0cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b0cf:	85 c0                	test   eax,eax
c001b0d1:	0f 95 c0             	setne  al
c001b0d4:	31 d2                	xor    edx,edx
c001b0d6:	0f b6 c0             	movzx  eax,al
c001b0d9:	f7 d8                	neg    eax
c001b0db:	83 d2 00             	adc    edx,0x0
c001b0de:	83 c4 20             	add    esp,0x20
c001b0e1:	f7 da                	neg    edx
c001b0e3:	5b                   	pop    ebx
c001b0e4:	5e                   	pop    esi
c001b0e5:	5f                   	pop    edi
c001b0e6:	c3                   	ret    
c001b0e7:	83 ec 08             	sub    esp,0x8
c001b0ea:	53                   	push   ebx
c001b0eb:	68 c7 ac 02 c0       	push   0xc002acc7
c001b0f0:	e8 34 78 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001b0f5:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001b0f8:	83 c4 10             	add    esp,0x10
c001b0fb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b101:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b108:	31 d2                	xor    edx,edx
c001b10a:	83 c4 20             	add    esp,0x20
c001b10d:	31 c0                	xor    eax,eax
c001b10f:	5b                   	pop    ebx
c001b110:	5e                   	pop    esi
c001b111:	5f                   	pop    edi
c001b112:	c3                   	ret    
c001b113:	83 c4 20             	add    esp,0x20
c001b116:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b11b:	5b                   	pop    ebx
c001b11c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b121:	5e                   	pop    esi
c001b122:	5f                   	pop    edi
c001b123:	c3                   	ret    

c001b124 <sysCallClose(regs*)>:
c001b124:	53                   	push   ebx
c001b125:	83 ec 08             	sub    esp,0x8
c001b128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b12c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b12f:	83 f8 02             	cmp    eax,0x2
c001b132:	76 50                	jbe    c001b184 <sysCallClose(regs*)+0x60>
c001b134:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b139:	74 58                	je     c001b193 <sysCallClose(regs*)+0x6f>
c001b13b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b140:	74 60                	je     c001b1a2 <sysCallClose(regs*)+0x7e>
c001b142:	77 2f                	ja     c001b173 <sysCallClose(regs*)+0x4f>
c001b144:	83 ec 0c             	sub    esp,0xc
c001b147:	50                   	push   eax
c001b148:	e8 96 66 ff ff       	call   c00117e3 <getFromFileDescriptor(int)>
c001b14d:	89 c3                	mov    ebx,eax
c001b14f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b152:	e8 ed 7d ff ff       	call   c0012f44 <File::close()>
c001b157:	83 c4 10             	add    esp,0x10
c001b15a:	85 db                	test   ebx,ebx
c001b15c:	74 0c                	je     c001b16a <sysCallClose(regs*)+0x46>
c001b15e:	83 ec 0c             	sub    esp,0xc
c001b161:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b163:	53                   	push   ebx
c001b164:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b167:	83 c4 10             	add    esp,0x10
c001b16a:	31 c0                	xor    eax,eax
c001b16c:	31 d2                	xor    edx,edx
c001b16e:	83 c4 08             	add    esp,0x8
c001b171:	5b                   	pop    ebx
c001b172:	c3                   	ret    
c001b173:	83 ec 08             	sub    esp,0x8
c001b176:	50                   	push   eax
c001b177:	68 48 ac 02 c0       	push   0xc002ac48
c001b17c:	e8 a8 77 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001b181:	83 c4 10             	add    esp,0x10
c001b184:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b189:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b18e:	83 c4 08             	add    esp,0x8
c001b191:	5b                   	pop    ebx
c001b192:	c3                   	ret    
c001b193:	83 ec 0c             	sub    esp,0xc
c001b196:	68 e2 ac 02 c0       	push   0xc002ace2
c001b19b:	e8 89 77 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001b1a0:	eb c5                	jmp    c001b167 <sysCallClose(regs*)+0x43>
c001b1a2:	83 ec 0c             	sub    esp,0xc
c001b1a5:	68 f0 ac 02 c0       	push   0xc002acf0
c001b1aa:	eb ef                	jmp    c001b19b <sysCallClose(regs*)+0x77>

c001b1ac <sysCallOpenDir(regs*)>:
c001b1ac:	56                   	push   esi
c001b1ad:	53                   	push   ebx
c001b1ae:	53                   	push   ebx
c001b1af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b1b3:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b1b6:	85 f6                	test   esi,esi
c001b1b8:	74 59                	je     c001b213 <sysCallOpenDir(regs*)+0x67>
c001b1ba:	83 ec 0c             	sub    esp,0xc
c001b1bd:	68 14 01 00 00       	push   0x114
c001b1c2:	e8 93 44 ff ff       	call   c000f65a <malloc>
c001b1c7:	83 c4 0c             	add    esp,0xc
c001b1ca:	89 c6                	mov    esi,eax
c001b1cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1d1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b1d4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b1d7:	56                   	push   esi
c001b1d8:	e8 51 81 ff ff       	call   c001332e <Directory::Directory(char const*, Process*)>
c001b1dd:	83 c4 10             	add    esp,0x10
c001b1e0:	85 f6                	test   esi,esi
c001b1e2:	74 2f                	je     c001b213 <sysCallOpenDir(regs*)+0x67>
c001b1e4:	83 ec 0c             	sub    esp,0xc
c001b1e7:	56                   	push   esi
c001b1e8:	e8 a5 81 ff ff       	call   c0013392 <Directory::open()>
c001b1ed:	83 c4 10             	add    esp,0x10
c001b1f0:	85 c0                	test   eax,eax
c001b1f2:	75 1f                	jne    c001b213 <sysCallOpenDir(regs*)+0x67>
c001b1f4:	83 ec 0c             	sub    esp,0xc
c001b1f7:	56                   	push   esi
c001b1f8:	e8 f1 62 ff ff       	call   c00114ee <UnixFile::getFileDescriptor()>
c001b1fd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b200:	83 c4 10             	add    esp,0x10
c001b203:	89 02                	mov    DWORD PTR [edx],eax
c001b205:	c1 f8 1f             	sar    eax,0x1f
c001b208:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b20b:	31 c0                	xor    eax,eax
c001b20d:	59                   	pop    ecx
c001b20e:	31 d2                	xor    edx,edx
c001b210:	5b                   	pop    ebx
c001b211:	5e                   	pop    esi
c001b212:	c3                   	ret    
c001b213:	59                   	pop    ecx
c001b214:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b219:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b21e:	5b                   	pop    ebx
c001b21f:	5e                   	pop    esi
c001b220:	c3                   	ret    

c001b221 <sysCallCloseDir(regs*)>:
c001b221:	53                   	push   ebx
c001b222:	83 ec 08             	sub    esp,0x8
c001b225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b229:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b22c:	83 f8 02             	cmp    eax,0x2
c001b22f:	76 47                	jbe    c001b278 <sysCallCloseDir(regs*)+0x57>
c001b231:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b236:	77 2f                	ja     c001b267 <sysCallCloseDir(regs*)+0x46>
c001b238:	83 ec 0c             	sub    esp,0xc
c001b23b:	50                   	push   eax
c001b23c:	e8 a2 65 ff ff       	call   c00117e3 <getFromFileDescriptor(int)>
c001b241:	89 c3                	mov    ebx,eax
c001b243:	89 04 24             	mov    DWORD PTR [esp],eax
c001b246:	e8 a3 81 ff ff       	call   c00133ee <Directory::close()>
c001b24b:	83 c4 10             	add    esp,0x10
c001b24e:	85 db                	test   ebx,ebx
c001b250:	74 0c                	je     c001b25e <sysCallCloseDir(regs*)+0x3d>
c001b252:	83 ec 0c             	sub    esp,0xc
c001b255:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b257:	53                   	push   ebx
c001b258:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b25b:	83 c4 10             	add    esp,0x10
c001b25e:	31 c0                	xor    eax,eax
c001b260:	31 d2                	xor    edx,edx
c001b262:	83 c4 08             	add    esp,0x8
c001b265:	5b                   	pop    ebx
c001b266:	c3                   	ret    
c001b267:	83 ec 08             	sub    esp,0x8
c001b26a:	50                   	push   eax
c001b26b:	68 70 ac 02 c0       	push   0xc002ac70
c001b270:	e8 b4 76 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001b275:	83 c4 10             	add    esp,0x10
c001b278:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b27d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b282:	83 c4 08             	add    esp,0x8
c001b285:	5b                   	pop    ebx
c001b286:	c3                   	ret    

c001b287 <sysCallMakeDir(regs*)>:
c001b287:	56                   	push   esi
c001b288:	53                   	push   ebx
c001b289:	83 ec 10             	sub    esp,0x10
c001b28c:	68 14 01 00 00       	push   0x114
c001b291:	e8 c4 43 ff ff       	call   c000f65a <malloc>
c001b296:	83 c4 0c             	add    esp,0xc
c001b299:	89 c3                	mov    ebx,eax
c001b29b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2a0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b2a7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b2aa:	53                   	push   ebx
c001b2ab:	e8 7e 80 ff ff       	call   c001332e <Directory::Directory(char const*, Process*)>
c001b2b0:	83 c4 10             	add    esp,0x10
c001b2b3:	85 db                	test   ebx,ebx
c001b2b5:	74 32                	je     c001b2e9 <sysCallMakeDir(regs*)+0x62>
c001b2b7:	83 ec 0c             	sub    esp,0xc
c001b2ba:	53                   	push   ebx
c001b2bb:	e8 b2 82 ff ff       	call   c0013572 <Directory::create()>
c001b2c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2c3:	89 c6                	mov    esi,eax
c001b2c5:	e8 24 81 ff ff       	call   c00133ee <Directory::close()>
c001b2ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2d2:	83 c4 10             	add    esp,0x10
c001b2d5:	31 c0                	xor    eax,eax
c001b2d7:	59                   	pop    ecx
c001b2d8:	85 f6                	test   esi,esi
c001b2da:	5b                   	pop    ebx
c001b2db:	0f 95 c0             	setne  al
c001b2de:	5e                   	pop    esi
c001b2df:	31 d2                	xor    edx,edx
c001b2e1:	f7 d8                	neg    eax
c001b2e3:	83 d2 00             	adc    edx,0x0
c001b2e6:	f7 da                	neg    edx
c001b2e8:	c3                   	ret    
c001b2e9:	59                   	pop    ecx
c001b2ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2ef:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2f4:	5b                   	pop    ebx
c001b2f5:	5e                   	pop    esi
c001b2f6:	c3                   	ret    

c001b2f7 <sysCallWait(regs*)>:
c001b2f7:	83 ec 10             	sub    esp,0x10
c001b2fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2fe:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b301:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b304:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b307:	e8 d9 23 00 00       	call   c001d6e5 <waitTask(int, int*, int)>
c001b30c:	83 c4 1c             	add    esp,0x1c
c001b30f:	99                   	cdq    
c001b310:	c3                   	ret    

c001b311 <sysCallNotImpl(regs*)>:
c001b311:	83 ec 18             	sub    esp,0x18
c001b314:	68 fe ac 02 c0       	push   0xc002acfe
c001b319:	e8 61 e9 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001b31e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b323:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b328:	83 c4 1c             	add    esp,0x1c
c001b32b:	c3                   	ret    

c001b32c <sysPanic(regs*)>:
c001b32c:	83 ec 18             	sub    esp,0x18
c001b32f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b333:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b336:	e8 44 e9 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001b33b:	c7 04 24 18 ad 02 c0 	mov    DWORD PTR [esp],0xc002ad18
c001b342:	e8 38 e9 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001b347:	b8 01 00 00 00       	mov    eax,0x1
c001b34c:	31 d2                	xor    edx,edx
c001b34e:	83 c4 1c             	add    esp,0x1c
c001b351:	c3                   	ret    

c001b352 <sysCallRmdir(regs*)>:
c001b352:	56                   	push   esi
c001b353:	53                   	push   ebx
c001b354:	83 ec 20             	sub    esp,0x20
c001b357:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b35b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b35e:	68 14 01 00 00       	push   0x114
c001b363:	e8 f2 42 ff ff       	call   c000f65a <malloc>
c001b368:	83 c4 0c             	add    esp,0xc
c001b36b:	89 c3                	mov    ebx,eax
c001b36d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b372:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b375:	56                   	push   esi
c001b376:	53                   	push   ebx
c001b377:	e8 06 7b ff ff       	call   c0012e82 <File::File(char const*, Process*)>
c001b37c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b37f:	e8 da 7c ff ff       	call   c001305e <File::unlink()>
c001b384:	83 c4 10             	add    esp,0x10
c001b387:	85 db                	test   ebx,ebx
c001b389:	74 14                	je     c001b39f <sysCallRmdir(regs*)+0x4d>
c001b38b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b38f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b391:	83 ec 0c             	sub    esp,0xc
c001b394:	53                   	push   ebx
c001b395:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b398:	83 c4 10             	add    esp,0x10
c001b39b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b39f:	85 c0                	test   eax,eax
c001b3a1:	0f 95 c0             	setne  al
c001b3a4:	31 d2                	xor    edx,edx
c001b3a6:	0f b6 c0             	movzx  eax,al
c001b3a9:	f7 d8                	neg    eax
c001b3ab:	83 d2 00             	adc    edx,0x0
c001b3ae:	83 c4 14             	add    esp,0x14
c001b3b1:	f7 da                	neg    edx
c001b3b3:	5b                   	pop    ebx
c001b3b4:	5e                   	pop    esi
c001b3b5:	c3                   	ret    

c001b3b6 <sysCallUnlink(regs*)>:
c001b3b6:	56                   	push   esi
c001b3b7:	53                   	push   ebx
c001b3b8:	83 ec 20             	sub    esp,0x20
c001b3bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b3bf:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b3c2:	68 14 01 00 00       	push   0x114
c001b3c7:	e8 8e 42 ff ff       	call   c000f65a <malloc>
c001b3cc:	83 c4 0c             	add    esp,0xc
c001b3cf:	89 c3                	mov    ebx,eax
c001b3d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3d6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3d9:	56                   	push   esi
c001b3da:	53                   	push   ebx
c001b3db:	e8 a2 7a ff ff       	call   c0012e82 <File::File(char const*, Process*)>
c001b3e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3e3:	e8 76 7c ff ff       	call   c001305e <File::unlink()>
c001b3e8:	83 c4 10             	add    esp,0x10
c001b3eb:	85 db                	test   ebx,ebx
c001b3ed:	74 14                	je     c001b403 <sysCallUnlink(regs*)+0x4d>
c001b3ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b3f3:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b3f5:	83 ec 0c             	sub    esp,0xc
c001b3f8:	53                   	push   ebx
c001b3f9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b3fc:	83 c4 10             	add    esp,0x10
c001b3ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b403:	85 c0                	test   eax,eax
c001b405:	0f 95 c0             	setne  al
c001b408:	31 d2                	xor    edx,edx
c001b40a:	0f b6 c0             	movzx  eax,al
c001b40d:	f7 d8                	neg    eax
c001b40f:	83 d2 00             	adc    edx,0x0
c001b412:	83 c4 14             	add    esp,0x14
c001b415:	f7 da                	neg    edx
c001b417:	5b                   	pop    ebx
c001b418:	5e                   	pop    esi
c001b419:	c3                   	ret    

c001b41a <sysCallGetArgv(regs*)>:
c001b41a:	83 ec 0c             	sub    esp,0xc
c001b41d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b421:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b424:	85 c0                	test   eax,eax
c001b426:	78 2b                	js     c001b453 <sysCallGetArgv(regs*)+0x39>
c001b428:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b42e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b431:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b437:	7d 1a                	jge    c001b453 <sysCallGetArgv(regs*)+0x39>
c001b439:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b440:	85 c0                	test   eax,eax
c001b442:	74 17                	je     c001b45b <sysCallGetArgv(regs*)+0x41>
c001b444:	83 ec 08             	sub    esp,0x8
c001b447:	50                   	push   eax
c001b448:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b44b:	e8 13 53 fe ff       	call   c0000763 <strcpy>
c001b450:	83 c4 10             	add    esp,0x10
c001b453:	31 c0                	xor    eax,eax
c001b455:	31 d2                	xor    edx,edx
c001b457:	83 c4 0c             	add    esp,0xc
c001b45a:	c3                   	ret    
c001b45b:	b8 01 00 00 00       	mov    eax,0x1
c001b460:	31 d2                	xor    edx,edx
c001b462:	83 c4 0c             	add    esp,0xc
c001b465:	c3                   	ret    

c001b466 <sysCallTTYName(regs*)>:
c001b466:	56                   	push   esi
c001b467:	53                   	push   ebx
c001b468:	53                   	push   ebx
c001b469:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b46d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b470:	85 c0                	test   eax,eax
c001b472:	74 5f                	je     c001b4d3 <sysCallTTYName(regs*)+0x6d>
c001b474:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b477:	83 f8 02             	cmp    eax,0x2
c001b47a:	77 3e                	ja     c001b4ba <sysCallTTYName(regs*)+0x54>
c001b47c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b481:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b484:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b48a:	85 db                	test   ebx,ebx
c001b48c:	74 45                	je     c001b4d3 <sysCallTTYName(regs*)+0x6d>
c001b48e:	83 ec 0c             	sub    esp,0xc
c001b491:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b493:	53                   	push   ebx
c001b494:	ff 10                	call   DWORD PTR [eax]
c001b496:	83 c4 10             	add    esp,0x10
c001b499:	84 c0                	test   al,al
c001b49b:	74 41                	je     c001b4de <sysCallTTYName(regs*)+0x78>
c001b49d:	83 ec 08             	sub    esp,0x8
c001b4a0:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001b4a6:	53                   	push   ebx
c001b4a7:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b4aa:	e8 b4 52 fe ff       	call   c0000763 <strcpy>
c001b4af:	83 c4 10             	add    esp,0x10
c001b4b2:	31 c0                	xor    eax,eax
c001b4b4:	59                   	pop    ecx
c001b4b5:	31 d2                	xor    edx,edx
c001b4b7:	5b                   	pop    ebx
c001b4b8:	5e                   	pop    esi
c001b4b9:	c3                   	ret    
c001b4ba:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b4bf:	74 bb                	je     c001b47c <sysCallTTYName(regs*)+0x16>
c001b4c1:	83 ec 0c             	sub    esp,0xc
c001b4c4:	50                   	push   eax
c001b4c5:	e8 19 63 ff ff       	call   c00117e3 <getFromFileDescriptor(int)>
c001b4ca:	83 c4 10             	add    esp,0x10
c001b4cd:	89 c3                	mov    ebx,eax
c001b4cf:	85 db                	test   ebx,ebx
c001b4d1:	75 bb                	jne    c001b48e <sysCallTTYName(regs*)+0x28>
c001b4d3:	59                   	pop    ecx
c001b4d4:	b8 01 00 00 00       	mov    eax,0x1
c001b4d9:	31 d2                	xor    edx,edx
c001b4db:	5b                   	pop    ebx
c001b4dc:	5e                   	pop    esi
c001b4dd:	c3                   	ret    
c001b4de:	59                   	pop    ecx
c001b4df:	b8 02 00 00 00       	mov    eax,0x2
c001b4e4:	31 d2                	xor    edx,edx
c001b4e6:	5b                   	pop    ebx
c001b4e7:	5e                   	pop    esi
c001b4e8:	c3                   	ret    

c001b4e9 <sysCallUSleep(regs*)>:
c001b4e9:	83 ec 14             	sub    esp,0x14
c001b4ec:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b4f1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b4f5:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b4fc:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b4ff:	01 ca                	add    edx,ecx
c001b501:	52                   	push   edx
c001b502:	50                   	push   eax
c001b503:	e8 76 22 00 00       	call   c001d77e <nanoSleep(unsigned long long)>
c001b508:	31 c0                	xor    eax,eax
c001b50a:	31 d2                	xor    edx,edx
c001b50c:	83 c4 1c             	add    esp,0x1c
c001b50f:	c3                   	ret    

c001b510 <sysCallSpawn(regs*)>:
c001b510:	56                   	push   esi
c001b511:	53                   	push   ebx
c001b512:	53                   	push   ebx
c001b513:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b517:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b51a:	85 f6                	test   esi,esi
c001b51c:	75 08                	jne    c001b526 <sysCallSpawn(regs*)+0x16>
c001b51e:	59                   	pop    ecx
c001b51f:	31 c0                	xor    eax,eax
c001b521:	31 d2                	xor    edx,edx
c001b523:	5b                   	pop    ebx
c001b524:	5e                   	pop    esi
c001b525:	c3                   	ret    
c001b526:	83 ec 0c             	sub    esp,0xc
c001b529:	68 3f 07 00 00       	push   0x73f
c001b52e:	e8 27 41 ff ff       	call   c000f65a <malloc>
c001b533:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b536:	89 c6                	mov    esi,eax
c001b538:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b53d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b540:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b543:	56                   	push   esi
c001b544:	e8 35 19 00 00       	call   c001ce7e <Process::Process(char const*, Process*, char**)>
c001b549:	83 c4 20             	add    esp,0x20
c001b54c:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b553:	75 c9                	jne    c001b51e <sysCallSpawn(regs*)+0xe>
c001b555:	83 ec 0c             	sub    esp,0xc
c001b558:	56                   	push   esi
c001b559:	e8 e6 1e 00 00       	call   c001d444 <Process::createUserThread()>
c001b55e:	8b 06                	mov    eax,DWORD PTR [esi]
c001b560:	83 c4 10             	add    esp,0x10
c001b563:	99                   	cdq    
c001b564:	59                   	pop    ecx
c001b565:	5b                   	pop    ebx
c001b566:	5e                   	pop    esi
c001b567:	c3                   	ret    

c001b568 <sysCallGetEnv(regs*)>:
c001b568:	57                   	push   edi
c001b569:	56                   	push   esi
c001b56a:	53                   	push   ebx
c001b56b:	83 ec 1c             	sub    esp,0x1c
c001b56e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b572:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b577:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b57a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b57d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b580:	e8 16 e6 ff ff       	call   c0019b9b <Krnl::getProcessTotalEnvCount(Process*)>
c001b585:	83 c4 10             	add    esp,0x10
c001b588:	39 c7                	cmp    edi,eax
c001b58a:	7c 14                	jl     c001b5a0 <sysCallGetEnv(regs*)+0x38>
c001b58c:	85 f6                	test   esi,esi
c001b58e:	75 0b                	jne    c001b59b <sysCallGetEnv(regs*)+0x33>
c001b590:	83 c4 10             	add    esp,0x10
c001b593:	31 c0                	xor    eax,eax
c001b595:	5b                   	pop    ebx
c001b596:	31 d2                	xor    edx,edx
c001b598:	5e                   	pop    esi
c001b599:	5f                   	pop    edi
c001b59a:	c3                   	ret    
c001b59b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b59e:	eb f0                	jmp    c001b590 <sysCallGetEnv(regs*)+0x28>
c001b5a0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b5a4:	52                   	push   edx
c001b5a5:	57                   	push   edi
c001b5a6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b5ac:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b5af:	50                   	push   eax
c001b5b0:	e8 06 e6 ff ff       	call   c0019bbb <Krnl::getProcessEnvPair(Process*, int)>
c001b5b5:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b5b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b5bc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b5c0:	83 c4 0c             	add    esp,0xc
c001b5c3:	85 c9                	test   ecx,ecx
c001b5c5:	75 23                	jne    c001b5ea <sysCallGetEnv(regs*)+0x82>
c001b5c7:	83 ec 0c             	sub    esp,0xc
c001b5ca:	50                   	push   eax
c001b5cb:	e8 11 51 fe ff       	call   c00006e1 <strlen>
c001b5d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b5d3:	89 c3                	mov    ebx,eax
c001b5d5:	e8 07 51 fe ff       	call   c00006e1 <strlen>
c001b5da:	83 c4 10             	add    esp,0x10
c001b5dd:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b5e1:	83 c4 10             	add    esp,0x10
c001b5e4:	31 d2                	xor    edx,edx
c001b5e6:	5b                   	pop    ebx
c001b5e7:	5e                   	pop    esi
c001b5e8:	5f                   	pop    edi
c001b5e9:	c3                   	ret    
c001b5ea:	83 ec 08             	sub    esp,0x8
c001b5ed:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b5f0:	50                   	push   eax
c001b5f1:	56                   	push   esi
c001b5f2:	e8 6c 51 fe ff       	call   c0000763 <strcpy>
c001b5f7:	58                   	pop    eax
c001b5f8:	5a                   	pop    edx
c001b5f9:	68 27 ad 02 c0       	push   0xc002ad27
c001b5fe:	56                   	push   esi
c001b5ff:	e8 16 52 fe ff       	call   c000081a <strcat>
c001b604:	59                   	pop    ecx
c001b605:	5b                   	pop    ebx
c001b606:	57                   	push   edi
c001b607:	56                   	push   esi
c001b608:	e8 0d 52 fe ff       	call   c000081a <strcat>
c001b60d:	83 c4 10             	add    esp,0x10
c001b610:	e9 7b ff ff ff       	jmp    c001b590 <sysCallGetEnv(regs*)+0x28>

c001b615 <sysAppSettings(regs*)>:
c001b615:	53                   	push   ebx
c001b616:	83 ec 08             	sub    esp,0x8
c001b619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b61d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b620:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001b626:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b62b:	66 3d c0 09          	cmp    ax,0x9c0
c001b62f:	75 2f                	jne    c001b660 <sysAppSettings(regs*)+0x4b>
c001b631:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001b637:	83 e0 1f             	and    eax,0x1f
c001b63a:	3c 01                	cmp    al,0x1
c001b63c:	74 2e                	je     c001b66c <sysAppSettings(regs*)+0x57>
c001b63e:	3c 07                	cmp    al,0x7
c001b640:	0f 84 bd 00 00 00    	je     c001b703 <sysAppSettings(regs*)+0xee>
c001b646:	84 c0                	test   al,al
c001b648:	0f 84 dc 00 00 00    	je     c001b72a <sysAppSettings(regs*)+0x115>
c001b64e:	3c 08                	cmp    al,0x8
c001b650:	74 6d                	je     c001b6bf <sysAppSettings(regs*)+0xaa>
c001b652:	0f b6 c0             	movzx  eax,al
c001b655:	83 c4 08             	add    esp,0x8
c001b658:	05 e8 03 00 00       	add    eax,0x3e8
c001b65d:	5b                   	pop    ebx
c001b65e:	99                   	cdq    
c001b65f:	c3                   	ret    
c001b660:	b8 01 00 00 00       	mov    eax,0x1
c001b665:	31 d2                	xor    edx,edx
c001b667:	83 c4 08             	add    esp,0x8
c001b66a:	5b                   	pop    ebx
c001b66b:	c3                   	ret    
c001b66c:	51                   	push   ecx
c001b66d:	68 00 01 00 00       	push   0x100
c001b672:	6a 00                	push   0x0
c001b674:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b679:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b67c:	83 c0 0c             	add    eax,0xc
c001b67f:	50                   	push   eax
c001b680:	e8 3f 50 fe ff       	call   c00006c4 <memset>
c001b685:	83 c4 0c             	add    esp,0xc
c001b688:	68 ff 00 00 00       	push   0xff
c001b68d:	53                   	push   ebx
c001b68e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b693:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b696:	83 c0 0c             	add    eax,0xc
c001b699:	50                   	push   eax
c001b69a:	e8 01 50 fe ff       	call   c00006a0 <memcpy>
c001b69f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6a4:	5b                   	pop    ebx
c001b6a5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6a8:	5a                   	pop    edx
c001b6a9:	8d 50 0c             	lea    edx,[eax+0xc]
c001b6ac:	52                   	push   edx
c001b6ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b6b3:	e8 a6 52 ff ff       	call   c001095e <VgaText::setTitle(char*)>
c001b6b8:	83 c4 10             	add    esp,0x10
c001b6bb:	31 c0                	xor    eax,eax
c001b6bd:	eb a6                	jmp    c001b665 <sysAppSettings(regs*)+0x50>
c001b6bf:	83 ec 08             	sub    esp,0x8
c001b6c2:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b6c8:	83 e0 0f             	and    eax,0xf
c001b6cb:	50                   	push   eax
c001b6cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6d1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b6da:	e8 6f 52 ff ff       	call   c001094e <VgaText::setTitleColour(VgaColour)>
c001b6df:	58                   	pop    eax
c001b6e0:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b6e6:	5a                   	pop    edx
c001b6e7:	c1 e8 04             	shr    eax,0x4
c001b6ea:	83 e0 0f             	and    eax,0xf
c001b6ed:	50                   	push   eax
c001b6ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b6fc:	e8 3d 52 ff ff       	call   c001093e <VgaText::setTitleTextColour(VgaColour)>
c001b701:	eb b5                	jmp    c001b6b8 <sysAppSettings(regs*)+0xa3>
c001b703:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b708:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b70b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b711:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001b717:	c0 e8 06             	shr    al,0x6
c001b71a:	83 e0 01             	and    eax,0x1
c001b71d:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001b723:	31 c0                	xor    eax,eax
c001b725:	e9 3b ff ff ff       	jmp    c001b665 <sysAppSettings(regs*)+0x50>
c001b72a:	b8 02 00 00 00       	mov    eax,0x2
c001b72f:	e9 31 ff ff ff       	jmp    c001b665 <sysAppSettings(regs*)+0x50>

c001b734 <sysSetFatAttrib(regs*)>:
c001b734:	57                   	push   edi
c001b735:	56                   	push   esi
c001b736:	53                   	push   ebx
c001b737:	83 ec 1c             	sub    esp,0x1c
c001b73a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b73e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b741:	68 14 01 00 00       	push   0x114
c001b746:	e8 0f 3f ff ff       	call   c000f65a <malloc>
c001b74b:	83 c4 0c             	add    esp,0xc
c001b74e:	89 c3                	mov    ebx,eax
c001b750:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b755:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b758:	57                   	push   edi
c001b759:	53                   	push   ebx
c001b75a:	e8 23 77 ff ff       	call   c0012e82 <File::File(char const*, Process*)>
c001b75f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b762:	83 c4 0c             	add    esp,0xc
c001b765:	0f b6 d4             	movzx  edx,ah
c001b768:	0f b6 c0             	movzx  eax,al
c001b76b:	52                   	push   edx
c001b76c:	50                   	push   eax
c001b76d:	53                   	push   ebx
c001b76e:	e8 85 79 ff ff       	call   c00130f8 <File::chfatattr(unsigned char, unsigned char)>
c001b773:	83 c4 10             	add    esp,0x10
c001b776:	85 db                	test   ebx,ebx
c001b778:	74 14                	je     c001b78e <sysSetFatAttrib(regs*)+0x5a>
c001b77a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b77e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b780:	83 ec 0c             	sub    esp,0xc
c001b783:	53                   	push   ebx
c001b784:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b787:	83 c4 10             	add    esp,0x10
c001b78a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b78e:	85 c0                	test   eax,eax
c001b790:	0f 95 c0             	setne  al
c001b793:	31 d2                	xor    edx,edx
c001b795:	0f b6 c0             	movzx  eax,al
c001b798:	f7 d8                	neg    eax
c001b79a:	83 d2 00             	adc    edx,0x0
c001b79d:	83 c4 10             	add    esp,0x10
c001b7a0:	f7 da                	neg    edx
c001b7a2:	5b                   	pop    ebx
c001b7a3:	5e                   	pop    esi
c001b7a4:	5f                   	pop    edi
c001b7a5:	c3                   	ret    

c001b7a6 <sysPipe(regs*)>:
c001b7a6:	57                   	push   edi
c001b7a7:	56                   	push   esi
c001b7a8:	53                   	push   ebx
c001b7a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7ad:	83 ec 0c             	sub    esp,0xc
c001b7b0:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001b7b3:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001b7b6:	6a 20                	push   0x20
c001b7b8:	e8 9d 3e ff ff       	call   c000f65a <malloc>
c001b7bd:	89 c3                	mov    ebx,eax
c001b7bf:	58                   	pop    eax
c001b7c0:	5a                   	pop    edx
c001b7c1:	68 00 50 00 00       	push   0x5000
c001b7c6:	53                   	push   ebx
c001b7c7:	e8 c2 4a ff ff       	call   c001028e <Pipe::Pipe(int)>
c001b7cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7cf:	e8 1a 5d ff ff       	call   c00114ee <UnixFile::getFileDescriptor()>
c001b7d4:	89 07                	mov    DWORD PTR [edi],eax
c001b7d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7d9:	e8 10 5d ff ff       	call   c00114ee <UnixFile::getFileDescriptor()>
c001b7de:	83 c4 10             	add    esp,0x10
c001b7e1:	89 06                	mov    DWORD PTR [esi],eax
c001b7e3:	31 d2                	xor    edx,edx
c001b7e5:	5b                   	pop    ebx
c001b7e6:	31 c0                	xor    eax,eax
c001b7e8:	5e                   	pop    esi
c001b7e9:	5f                   	pop    edi
c001b7ea:	c3                   	ret    

c001b7eb <sysGetUnixTime(regs*)>:
c001b7eb:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c001b7f0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b7f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b7fa:	e9 6d 80 ff ff       	jmp    c001386c <Clock::timeInSecondsLocal()>

c001b7ff <string_ends_with(char const*, char const*)>:
c001b7ff:	57                   	push   edi
c001b800:	56                   	push   esi
c001b801:	53                   	push   ebx
c001b802:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b806:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b80a:	83 ec 0c             	sub    esp,0xc
c001b80d:	53                   	push   ebx
c001b80e:	e8 ce 4e fe ff       	call   c00006e1 <strlen>
c001b813:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b816:	89 c6                	mov    esi,eax
c001b818:	e8 c4 4e fe ff       	call   c00006e1 <strlen>
c001b81d:	83 c4 10             	add    esp,0x10
c001b820:	39 c6                	cmp    esi,eax
c001b822:	7d 06                	jge    c001b82a <string_ends_with(char const*, char const*)+0x2b>
c001b824:	5b                   	pop    ebx
c001b825:	31 c0                	xor    eax,eax
c001b827:	5e                   	pop    esi
c001b828:	5f                   	pop    edi
c001b829:	c3                   	ret    
c001b82a:	83 ec 08             	sub    esp,0x8
c001b82d:	29 c6                	sub    esi,eax
c001b82f:	57                   	push   edi
c001b830:	01 f3                	add    ebx,esi
c001b832:	53                   	push   ebx
c001b833:	e8 7c 4f fe ff       	call   c00007b4 <strcmp>
c001b838:	83 c4 10             	add    esp,0x10
c001b83b:	85 c0                	test   eax,eax
c001b83d:	5b                   	pop    ebx
c001b83e:	0f 94 c0             	sete   al
c001b841:	5e                   	pop    esi
c001b842:	0f b6 c0             	movzx  eax,al
c001b845:	5f                   	pop    edi
c001b846:	c3                   	ret    

c001b847 <sysCallOpen(regs*)>:
c001b847:	56                   	push   esi
c001b848:	53                   	push   ebx
c001b849:	81 ec 04 01 00 00    	sub    esp,0x104
c001b84f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001b856:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001b859:	85 c9                	test   ecx,ecx
c001b85b:	0f 84 b3 00 00 00    	je     c001b914 <sysCallOpen(regs*)+0xcd>
c001b861:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b864:	85 c0                	test   eax,eax
c001b866:	0f 84 a8 00 00 00    	je     c001b914 <sysCallOpen(regs*)+0xcd>
c001b86c:	52                   	push   edx
c001b86d:	68 29 ad 02 c0       	push   0xc002ad29
c001b872:	50                   	push   eax
c001b873:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b877:	56                   	push   esi
c001b878:	e8 5b 74 ff ff       	call   c0012cd8 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b87d:	89 34 24             	mov    DWORD PTR [esp],esi
c001b880:	e8 5c 4e fe ff       	call   c00006e1 <strlen>
c001b885:	83 c4 10             	add    esp,0x10
c001b888:	48                   	dec    eax
c001b889:	74 1d                	je     c001b8a8 <sysCallOpen(regs*)+0x61>
c001b88b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001b88e:	eb 0f                	jmp    c001b89f <sysCallOpen(regs*)+0x58>
c001b890:	80 fa 3a             	cmp    dl,0x3a
c001b893:	74 0f                	je     c001b8a4 <sysCallOpen(regs*)+0x5d>
c001b895:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001b899:	48                   	dec    eax
c001b89a:	74 0c                	je     c001b8a8 <sysCallOpen(regs*)+0x61>
c001b89c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001b89f:	80 fa 2e             	cmp    dl,0x2e
c001b8a2:	75 ec                	jne    c001b890 <sysCallOpen(regs*)+0x49>
c001b8a4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001b8a8:	83 ec 08             	sub    esp,0x8
c001b8ab:	68 2d ad 02 c0       	push   0xc002ad2d
c001b8b0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b8b3:	e8 47 ff ff ff       	call   c001b7ff <string_ends_with(char const*, char const*)>
c001b8b8:	83 c4 10             	add    esp,0x10
c001b8bb:	85 c0                	test   eax,eax
c001b8bd:	75 17                	jne    c001b8d6 <sysCallOpen(regs*)+0x8f>
c001b8bf:	83 ec 08             	sub    esp,0x8
c001b8c2:	68 4e ad 02 c0       	push   0xc002ad4e
c001b8c7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b8ca:	e8 30 ff ff ff       	call   c001b7ff <string_ends_with(char const*, char const*)>
c001b8cf:	83 c4 10             	add    esp,0x10
c001b8d2:	85 c0                	test   eax,eax
c001b8d4:	74 51                	je     c001b927 <sysCallOpen(regs*)+0xe0>
c001b8d6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b8d9:	83 ec 08             	sub    esp,0x8
c001b8dc:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001b8e2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b8e9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b8ec:	ff 30                	push   DWORD PTR [eax]
c001b8ee:	68 32 ad 02 c0       	push   0xc002ad32
c001b8f3:	e8 31 70 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001b8f8:	c7 04 24 41 ad 02 c0 	mov    DWORD PTR [esp],0xc002ad41
c001b8ff:	e8 25 70 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001b904:	83 c4 10             	add    esp,0x10
c001b907:	81 c4 04 01 00 00    	add    esp,0x104
c001b90d:	31 c0                	xor    eax,eax
c001b90f:	31 d2                	xor    edx,edx
c001b911:	5b                   	pop    ebx
c001b912:	5e                   	pop    esi
c001b913:	c3                   	ret    
c001b914:	81 c4 04 01 00 00    	add    esp,0x104
c001b91a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b91f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b924:	5b                   	pop    ebx
c001b925:	5e                   	pop    esi
c001b926:	c3                   	ret    
c001b927:	83 ec 08             	sub    esp,0x8
c001b92a:	68 2e ad 02 c0       	push   0xc002ad2e
c001b92f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b932:	e8 7d 4e fe ff       	call   c00007b4 <strcmp>
c001b937:	83 c4 10             	add    esp,0x10
c001b93a:	85 c0                	test   eax,eax
c001b93c:	74 98                	je     c001b8d6 <sysCallOpen(regs*)+0x8f>
c001b93e:	83 ec 08             	sub    esp,0x8
c001b941:	68 2d ad 02 c0       	push   0xc002ad2d
c001b946:	56                   	push   esi
c001b947:	e8 b3 fe ff ff       	call   c001b7ff <string_ends_with(char const*, char const*)>
c001b94c:	83 c4 10             	add    esp,0x10
c001b94f:	85 c0                	test   eax,eax
c001b951:	75 83                	jne    c001b8d6 <sysCallOpen(regs*)+0x8f>
c001b953:	83 ec 08             	sub    esp,0x8
c001b956:	68 53 ad 02 c0       	push   0xc002ad53
c001b95b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b95e:	e8 9c fe ff ff       	call   c001b7ff <string_ends_with(char const*, char const*)>
c001b963:	83 c4 10             	add    esp,0x10
c001b966:	85 c0                	test   eax,eax
c001b968:	0f 85 d9 00 00 00    	jne    c001ba47 <sysCallOpen(regs*)+0x200>
c001b96e:	83 ec 08             	sub    esp,0x8
c001b971:	68 58 ad 02 c0       	push   0xc002ad58
c001b976:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b979:	e8 81 fe ff ff       	call   c001b7ff <string_ends_with(char const*, char const*)>
c001b97e:	83 c4 10             	add    esp,0x10
c001b981:	85 c0                	test   eax,eax
c001b983:	0f 85 be 00 00 00    	jne    c001ba47 <sysCallOpen(regs*)+0x200>
c001b989:	83 ec 08             	sub    esp,0x8
c001b98c:	68 54 ad 02 c0       	push   0xc002ad54
c001b991:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b994:	e8 1b 4e fe ff       	call   c00007b4 <strcmp>
c001b999:	83 c4 10             	add    esp,0x10
c001b99c:	85 c0                	test   eax,eax
c001b99e:	0f 84 a3 00 00 00    	je     c001ba47 <sysCallOpen(regs*)+0x200>
c001b9a4:	83 ec 08             	sub    esp,0x8
c001b9a7:	68 53 ad 02 c0       	push   0xc002ad53
c001b9ac:	56                   	push   esi
c001b9ad:	e8 4d fe ff ff       	call   c001b7ff <string_ends_with(char const*, char const*)>
c001b9b2:	83 c4 10             	add    esp,0x10
c001b9b5:	85 c0                	test   eax,eax
c001b9b7:	0f 85 8a 00 00 00    	jne    c001ba47 <sysCallOpen(regs*)+0x200>
c001b9bd:	83 ec 0c             	sub    esp,0xc
c001b9c0:	68 14 01 00 00       	push   0x114
c001b9c5:	e8 90 3c ff ff       	call   c000f65a <malloc>
c001b9ca:	83 c4 0c             	add    esp,0xc
c001b9cd:	89 c6                	mov    esi,eax
c001b9cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9d4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9d7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9da:	56                   	push   esi
c001b9db:	e8 a2 74 ff ff       	call   c0012e82 <File::File(char const*, Process*)>
c001b9e0:	83 c4 10             	add    esp,0x10
c001b9e3:	85 f6                	test   esi,esi
c001b9e5:	0f 84 29 ff ff ff    	je     c001b914 <sysCallOpen(regs*)+0xcd>
c001b9eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b9ee:	0f b6 c2             	movzx  eax,dl
c001b9f1:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001b9f4:	89 d0                	mov    eax,edx
c001b9f6:	83 e0 01             	and    eax,0x1
c001b9f9:	f6 c2 02             	test   dl,0x2
c001b9fc:	74 03                	je     c001ba01 <sysCallOpen(regs*)+0x1ba>
c001b9fe:	83 c8 02             	or     eax,0x2
c001ba01:	f6 c2 04             	test   dl,0x4
c001ba04:	74 03                	je     c001ba09 <sysCallOpen(regs*)+0x1c2>
c001ba06:	83 c8 04             	or     eax,0x4
c001ba09:	f6 c2 08             	test   dl,0x8
c001ba0c:	74 03                	je     c001ba11 <sysCallOpen(regs*)+0x1ca>
c001ba0e:	83 c8 0a             	or     eax,0xa
c001ba11:	83 e2 10             	and    edx,0x10
c001ba14:	74 03                	je     c001ba19 <sysCallOpen(regs*)+0x1d2>
c001ba16:	83 c8 12             	or     eax,0x12
c001ba19:	83 ec 08             	sub    esp,0x8
c001ba1c:	50                   	push   eax
c001ba1d:	56                   	push   esi
c001ba1e:	e8 c3 74 ff ff       	call   c0012ee6 <File::open(FileOpenMode)>
c001ba23:	83 c4 10             	add    esp,0x10
c001ba26:	85 c0                	test   eax,eax
c001ba28:	0f 85 e6 fe ff ff    	jne    c001b914 <sysCallOpen(regs*)+0xcd>
c001ba2e:	83 ec 0c             	sub    esp,0xc
c001ba31:	56                   	push   esi
c001ba32:	e8 b7 5a ff ff       	call   c00114ee <UnixFile::getFileDescriptor()>
c001ba37:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001ba3a:	89 02                	mov    DWORD PTR [edx],eax
c001ba3c:	c1 f8 1f             	sar    eax,0x1f
c001ba3f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ba42:	e9 bd fe ff ff       	jmp    c001b904 <sysCallOpen(regs*)+0xbd>
c001ba47:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba4a:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001ba50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba57:	e9 ab fe ff ff       	jmp    c001b907 <sysCallOpen(regs*)+0xc0>

c001ba5c <Sys::loadSyscalls()>:
c001ba5c:	c7 05 40 dc 02 c0 12 ac 01 c0 	mov    DWORD PTR ds:0xc002dc40,0xc001ac12
c001ba66:	c7 05 44 dc 02 c0 74 a8 01 c0 	mov    DWORD PTR ds:0xc002dc44,0xc001a874
c001ba70:	c7 05 48 dc 02 c0 c7 a9 01 c0 	mov    DWORD PTR ds:0xc002dc48,0xc001a9c7
c001ba7a:	c7 05 4c dc 02 c0 aa ab 01 c0 	mov    DWORD PTR ds:0xc002dc4c,0xc001abaa
c001ba84:	c7 05 50 dc 02 c0 5f a9 01 c0 	mov    DWORD PTR ds:0xc002dc50,0xc001a95f
c001ba8e:	c7 05 54 dc 02 c0 ab a8 01 c0 	mov    DWORD PTR ds:0xc002dc54,0xc001a8ab
c001ba98:	c7 05 58 dc 02 c0 8c a8 01 c0 	mov    DWORD PTR ds:0xc002dc58,0xc001a88c
c001baa2:	c7 05 5c dc 02 c0 1c aa 01 c0 	mov    DWORD PTR ds:0xc002dc5c,0xc001aa1c
c001baac:	c7 05 64 dc 02 c0 24 b1 01 c0 	mov    DWORD PTR ds:0xc002dc64,0xc001b124
c001bab6:	c7 05 60 dc 02 c0 47 b8 01 c0 	mov    DWORD PTR ds:0xc002dc60,0xc001b847
c001bac0:	c7 05 68 dc 02 c0 ac b1 01 c0 	mov    DWORD PTR ds:0xc002dc68,0xc001b1ac
c001baca:	c7 05 6c dc 02 c0 13 ae 01 c0 	mov    DWORD PTR ds:0xc002dc6c,0xc001ae13
c001bad4:	c7 05 70 dc 02 c0 4d ac 01 c0 	mov    DWORD PTR ds:0xc002dc70,0xc001ac4d
c001bade:	c7 05 74 dc 02 c0 52 ac 01 c0 	mov    DWORD PTR ds:0xc002dc74,0xc001ac52
c001bae8:	c7 05 78 dc 02 c0 87 b2 01 c0 	mov    DWORD PTR ds:0xc002dc78,0xc001b287
c001baf2:	c7 05 7c dc 02 c0 21 b2 01 c0 	mov    DWORD PTR ds:0xc002dc7c,0xc001b221
c001bafc:	c7 05 80 dc 02 c0 fb ae 01 c0 	mov    DWORD PTR ds:0xc002dc80,0xc001aefb
c001bb06:	c7 05 84 dc 02 c0 64 af 01 c0 	mov    DWORD PTR ds:0xc002dc84,0xc001af64
c001bb10:	c7 05 88 dc 02 c0 e1 af 01 c0 	mov    DWORD PTR ds:0xc002dc88,0xc001afe1
c001bb1a:	c7 05 8c dc 02 c0 57 ac 01 c0 	mov    DWORD PTR ds:0xc002dc8c,0xc001ac57
c001bb24:	c7 05 90 dc 02 c0 f7 b2 01 c0 	mov    DWORD PTR ds:0xc002dc90,0xc001b2f7
c001bb2e:	c7 05 94 dc 02 c0 11 b3 01 c0 	mov    DWORD PTR ds:0xc002dc94,0xc001b311
c001bb38:	c7 05 98 dc 02 c0 11 b3 01 c0 	mov    DWORD PTR ds:0xc002dc98,0xc001b311
c001bb42:	c7 05 9c dc 02 c0 52 b3 01 c0 	mov    DWORD PTR ds:0xc002dc9c,0xc001b352
c001bb4c:	c7 05 a0 dc 02 c0 b6 b3 01 c0 	mov    DWORD PTR ds:0xc002dca0,0xc001b3b6
c001bb56:	c7 05 a4 dc 02 c0 61 ac 01 c0 	mov    DWORD PTR ds:0xc002dca4,0xc001ac61
c001bb60:	c7 05 a8 dc 02 c0 1a b4 01 c0 	mov    DWORD PTR ds:0xc002dca8,0xc001b41a
c001bb6a:	c7 05 ac dc 02 c0 d0 ad 01 c0 	mov    DWORD PTR ds:0xc002dcac,0xc001add0
c001bb74:	c7 05 b0 dc 02 c0 66 b4 01 c0 	mov    DWORD PTR ds:0xc002dcb0,0xc001b466
c001bb7e:	c7 05 b4 dc 02 c0 a1 ae 01 c0 	mov    DWORD PTR ds:0xc002dcb4,0xc001aea1
c001bb88:	c7 05 b8 dc 02 c0 e9 b4 01 c0 	mov    DWORD PTR ds:0xc002dcb8,0xc001b4e9
c001bb92:	c7 05 bc dc 02 c0 64 b0 01 c0 	mov    DWORD PTR ds:0xc002dcbc,0xc001b064
c001bb9c:	c7 05 c0 dc 02 c0 10 b5 01 c0 	mov    DWORD PTR ds:0xc002dcc0,0xc001b510
c001bba6:	c7 05 c4 dc 02 c0 68 b5 01 c0 	mov    DWORD PTR ds:0xc002dcc4,0xc001b568
c001bbb0:	c7 05 c8 dc 02 c0 15 b6 01 c0 	mov    DWORD PTR ds:0xc002dcc8,0xc001b615
c001bbba:	c7 05 cc dc 02 c0 71 ac 01 c0 	mov    DWORD PTR ds:0xc002dccc,0xc001ac71
c001bbc4:	c7 05 d0 dc 02 c0 db ac 01 c0 	mov    DWORD PTR ds:0xc002dcd0,0xc001acdb
c001bbce:	c7 05 d4 dc 02 c0 21 ad 01 c0 	mov    DWORD PTR ds:0xc002dcd4,0xc001ad21
c001bbd8:	c7 05 d8 dc 02 c0 34 b7 01 c0 	mov    DWORD PTR ds:0xc002dcd8,0xc001b734
c001bbe2:	c7 05 dc dc 02 c0 2c b3 01 c0 	mov    DWORD PTR ds:0xc002dcdc,0xc001b32c
c001bbec:	c7 05 e0 dc 02 c0 72 ad 01 c0 	mov    DWORD PTR ds:0xc002dce0,0xc001ad72
c001bbf6:	c7 05 e4 dc 02 c0 a6 b7 01 c0 	mov    DWORD PTR ds:0xc002dce4,0xc001b7a6
c001bc00:	c7 05 e8 dc 02 c0 eb b7 01 c0 	mov    DWORD PTR ds:0xc002dce8,0xc001b7eb
c001bc0a:	c7 05 ec dc 02 c0 b7 a8 01 c0 	mov    DWORD PTR ds:0xc002dcec,0xc001a8b7
c001bc14:	c7 05 f0 dc 02 c0 38 aa 01 c0 	mov    DWORD PTR ds:0xc002dcf0,0xc001aa38
c001bc1e:	c7 05 f4 dc 02 c0 60 ab 01 c0 	mov    DWORD PTR ds:0xc002dcf4,0xc001ab60
c001bc28:	c3                   	ret    

c001bc29 <Sys::systemCall(regs*, void*)>:
c001bc29:	53                   	push   ebx
c001bc2a:	83 ec 08             	sub    esp,0x8
c001bc2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc31:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001bc34:	83 f8 7f             	cmp    eax,0x7f
c001bc37:	77 16                	ja     c001bc4f <Sys::systemCall(regs*, void*)+0x26>
c001bc39:	8b 14 85 40 dc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd23c0]
c001bc40:	85 d2                	test   edx,edx
c001bc42:	74 0b                	je     c001bc4f <Sys::systemCall(regs*, void*)+0x26>
c001bc44:	83 ec 0c             	sub    esp,0xc
c001bc47:	53                   	push   ebx
c001bc48:	ff d2                	call   edx
c001bc4a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001bc4d:	eb 0d                	jmp    c001bc5c <Sys::systemCall(regs*, void*)+0x33>
c001bc4f:	52                   	push   edx
c001bc50:	52                   	push   edx
c001bc51:	50                   	push   eax
c001bc52:	68 5d ad 02 c0       	push   0xc002ad5d
c001bc57:	e8 cd 6c ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001bc5c:	83 c4 10             	add    esp,0x10
c001bc5f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001bc64:	31 d2                	xor    edx,edx
c001bc66:	83 c4 08             	add    esp,0x8
c001bc69:	5b                   	pop    ebx
c001bc6a:	c3                   	ret    

c001bc6b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001bc6b:	55                   	push   ebp
c001bc6c:	89 e5                	mov    ebp,esp
c001bc6e:	57                   	push   edi
c001bc6f:	56                   	push   esi
c001bc70:	53                   	push   ebx
c001bc71:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001bc77:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001bc7a:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001bc7d:	85 c0                	test   eax,eax
c001bc7f:	0f 95 c1             	setne  cl
c001bc82:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001bc86:	0f 94 c2             	sete   dl
c001bc89:	84 d1                	test   cl,dl
c001bc8b:	74 26                	je     c001bcb3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001bc8d:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001bc94:	74 1d                	je     c001bcb3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001bc96:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001bc99:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001bc9f:	89 d6                	mov    esi,edx
c001bca1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001bca7:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001bcad:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bcb0:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001bcb3:	83 ec 0c             	sub    esp,0xc
c001bcb6:	05 ff 0f 00 00       	add    eax,0xfff
c001bcbb:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001bcbe:	6a 01                	push   0x1
c001bcc0:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001bcc6:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001bccc:	e8 68 5c ff ff       	call   c0011939 <Virt::allocateKernelVirtualPages(int)>
c001bcd1:	83 c4 10             	add    esp,0x10
c001bcd4:	89 c6                	mov    esi,eax
c001bcd6:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001bcdc:	0f 86 21 01 00 00    	jbe    c001be03 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001bce2:	c1 eb 0c             	shr    ebx,0xc
c001bce5:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001bcef:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001bcf5:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bcf8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bcfb:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001bd01:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001bd04:	29 d8                	sub    eax,ebx
c001bd06:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001bd0c:	0f 83 f4 00 00 00    	jae    c001be06 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001bd12:	83 ec 0c             	sub    esp,0xc
c001bd15:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001bd1b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001bd1e:	3d 00 10 00 00       	cmp    eax,0x1000
c001bd23:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001bd25:	52                   	push   edx
c001bd26:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001bd2c:	52                   	push   edx
c001bd2d:	76 05                	jbe    c001bd34 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001bd2f:	b8 00 10 00 00       	mov    eax,0x1000
c001bd34:	31 d2                	xor    edx,edx
c001bd36:	52                   	push   edx
c001bd37:	50                   	push   eax
c001bd38:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001bd3b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bd3e:	83 c4 20             	add    esp,0x20
c001bd41:	85 c0                	test   eax,eax
c001bd43:	74 1f                	je     c001bd64 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001bd45:	51                   	push   ecx
c001bd46:	51                   	push   ecx
c001bd47:	50                   	push   eax
c001bd48:	68 71 ad 02 c0       	push   0xc002ad71
c001bd4d:	e8 d7 6b ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001bd52:	89 34 24             	mov    DWORD PTR [esp],esi
c001bd55:	e8 43 5f ff ff       	call   c0011c9d <Virt::freeKernelVirtualPages(unsigned long)>
c001bd5a:	83 c4 10             	add    esp,0x10
c001bd5d:	31 c0                	xor    eax,eax
c001bd5f:	e9 7c 01 00 00       	jmp    c001bee0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001bd64:	e8 c5 14 00 00       	call   c001d22e <lockScheduler()>
c001bd69:	e8 89 3f ff ff       	call   c000fcf7 <Phys::allocatePage()>
c001bd6e:	6a 07                	push   0x7
c001bd70:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001bd76:	56                   	push   esi
c001bd77:	50                   	push   eax
c001bd78:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bd7e:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001bd81:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001bd87:	e8 78 62 ff ff       	call   c0012004 <VAS::mapPage(unsigned long, unsigned long, int)>
c001bd8c:	83 c4 0c             	add    esp,0xc
c001bd8f:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001bd95:	6a 00                	push   0x0
c001bd97:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bd9d:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001bda0:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001bda6:	e8 c3 60 ff ff       	call   c0011e6e <VAS::mapOtherVASIn(bool, VAS*)>
c001bdab:	58                   	pop    eax
c001bdac:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001bdb2:	5a                   	pop    edx
c001bdb3:	68 07 04 00 00       	push   0x407
c001bdb8:	53                   	push   ebx
c001bdb9:	81 c3 00 10 00 00    	add    ebx,0x1000
c001bdbf:	50                   	push   eax
c001bdc0:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001bdc6:	6a 00                	push   0x0
c001bdc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdcd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bdd0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001bdd6:	e8 e3 65 ff ff       	call   c00123be <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001bddb:	83 c4 1c             	add    esp,0x1c
c001bdde:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001bde4:	68 00 10 00 00       	push   0x1000
c001bde9:	50                   	push   eax
c001bdea:	56                   	push   esi
c001bdeb:	e8 b0 48 fe ff       	call   c00006a0 <memcpy>
c001bdf0:	e8 3b 14 00 00       	call   c001d230 <unlockScheduler()>
c001bdf5:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001bdfb:	83 c4 10             	add    esp,0x10
c001bdfe:	e9 f5 fe ff ff       	jmp    c001bcf8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001be03:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001be06:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001be10:	0f 86 bc 00 00 00    	jbe    c001bed2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001be16:	e8 13 14 00 00       	call   c001d22e <lockScheduler()>
c001be1b:	51                   	push   ecx
c001be1c:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001be22:	6a 00                	push   0x0
c001be24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be29:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be2c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001be32:	e8 37 60 ff ff       	call   c0011e6e <VAS::mapOtherVASIn(bool, VAS*)>
c001be37:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001be3d:	83 c4 10             	add    esp,0x10
c001be40:	c1 e8 0c             	shr    eax,0xc
c001be43:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001be4d:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001be53:	e8 9f 3e ff ff       	call   c000fcf7 <Phys::allocatePage()>
c001be58:	6a 07                	push   0x7
c001be5a:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001be60:	56                   	push   esi
c001be61:	50                   	push   eax
c001be62:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001be68:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001be6b:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001be71:	e8 8e 61 ff ff       	call   c0012004 <VAS::mapPage(unsigned long, unsigned long, int)>
c001be76:	58                   	pop    eax
c001be77:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001be7d:	5a                   	pop    edx
c001be7e:	68 07 04 00 00       	push   0x407
c001be83:	53                   	push   ebx
c001be84:	81 c3 00 10 00 00    	add    ebx,0x1000
c001be8a:	50                   	push   eax
c001be8b:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001be91:	6a 00                	push   0x0
c001be93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be98:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be9b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001bea1:	e8 18 65 ff ff       	call   c00123be <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001bea6:	83 c4 1c             	add    esp,0x1c
c001bea9:	68 00 10 00 00       	push   0x1000
c001beae:	6a 00                	push   0x0
c001beb0:	56                   	push   esi
c001beb1:	e8 0e 48 fe ff       	call   c00006c4 <memset>
c001beb6:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001bebc:	83 c4 10             	add    esp,0x10
c001bebf:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001bec5:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001becb:	77 86                	ja     c001be53 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001becd:	e8 5e 13 00 00       	call   c001d230 <unlockScheduler()>
c001bed2:	83 ec 0c             	sub    esp,0xc
c001bed5:	56                   	push   esi
c001bed6:	e8 c2 5d ff ff       	call   c0011c9d <Virt::freeKernelVirtualPages(unsigned long)>
c001bedb:	83 c4 10             	add    esp,0x10
c001bede:	b0 01                	mov    al,0x1
c001bee0:	8d 65 f4             	lea    esp,[ebp-0xc]
c001bee3:	5b                   	pop    ebx
c001bee4:	5e                   	pop    esi
c001bee5:	5f                   	pop    edi
c001bee6:	5d                   	pop    ebp
c001bee7:	c3                   	ret    

c001bee8 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001bee8:	55                   	push   ebp
c001bee9:	57                   	push   edi
c001beea:	56                   	push   esi
c001beeb:	53                   	push   ebx
c001beec:	83 ec 48             	sub    esp,0x48
c001beef:	68 14 01 00 00       	push   0x114
c001bef4:	e8 61 37 ff ff       	call   c000f65a <malloc>
c001bef9:	83 c4 0c             	add    esp,0xc
c001befc:	89 c6                	mov    esi,eax
c001befe:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001bf02:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001bf06:	50                   	push   eax
c001bf07:	e8 76 6f ff ff       	call   c0012e82 <File::File(char const*, Process*)>
c001bf0c:	58                   	pop    eax
c001bf0d:	5a                   	pop    edx
c001bf0e:	6a 01                	push   0x1
c001bf10:	56                   	push   esi
c001bf11:	e8 d0 6f ff ff       	call   c0012ee6 <File::open(FileOpenMode)>
c001bf16:	83 c4 10             	add    esp,0x10
c001bf19:	85 c0                	test   eax,eax
c001bf1b:	0f 85 47 01 00 00    	jne    c001c068 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bf21:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001bf29:	83 ec 0c             	sub    esp,0xc
c001bf2c:	6a 34                	push   0x34
c001bf2e:	e8 27 37 ff ff       	call   c000f65a <malloc>
c001bf33:	89 c3                	mov    ebx,eax
c001bf35:	58                   	pop    eax
c001bf36:	8b 06                	mov    eax,DWORD PTR [esi]
c001bf38:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001bf3c:	57                   	push   edi
c001bf3d:	53                   	push   ebx
c001bf3e:	6a 00                	push   0x0
c001bf40:	6a 34                	push   0x34
c001bf42:	56                   	push   esi
c001bf43:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bf46:	83 c4 20             	add    esp,0x20
c001bf49:	85 c0                	test   eax,eax
c001bf4b:	0f 85 17 01 00 00    	jne    c001c068 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bf51:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001bf57:	0f 85 0b 01 00 00    	jne    c001c068 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bf5d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bf60:	85 c0                	test   eax,eax
c001bf62:	0f 84 00 01 00 00    	je     c001c068 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bf68:	31 d2                	xor    edx,edx
c001bf6a:	55                   	push   ebp
c001bf6b:	52                   	push   edx
c001bf6c:	50                   	push   eax
c001bf6d:	56                   	push   esi
c001bf6e:	e8 31 70 ff ff       	call   c0012fa4 <File::seek(unsigned long long)>
c001bf73:	83 c4 10             	add    esp,0x10
c001bf76:	85 c0                	test   eax,eax
c001bf78:	0f 85 ea 00 00 00    	jne    c001c068 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bf7e:	83 ec 0c             	sub    esp,0xc
c001bf81:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001bf84:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001bf88:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bf8c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001bf90:	0f af c2             	imul   eax,edx
c001bf93:	50                   	push   eax
c001bf94:	e8 c1 36 ff ff       	call   c000f65a <malloc>
c001bf99:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001bf9b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bf9f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bfa2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bfa6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001bfaa:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001bfae:	0f af c2             	imul   eax,edx
c001bfb1:	99                   	cdq    
c001bfb2:	52                   	push   edx
c001bfb3:	50                   	push   eax
c001bfb4:	56                   	push   esi
c001bfb5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bfb8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bfbb:	83 c4 20             	add    esp,0x20
c001bfbe:	85 c0                	test   eax,eax
c001bfc0:	0f 84 a2 00 00 00    	je     c001c068 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bfc6:	31 d2                	xor    edx,edx
c001bfc8:	51                   	push   ecx
c001bfc9:	52                   	push   edx
c001bfca:	50                   	push   eax
c001bfcb:	56                   	push   esi
c001bfcc:	e8 d3 6f ff ff       	call   c0012fa4 <File::seek(unsigned long long)>
c001bfd1:	83 c4 10             	add    esp,0x10
c001bfd4:	85 c0                	test   eax,eax
c001bfd6:	0f 85 8c 00 00 00    	jne    c001c068 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bfdc:	83 ec 0c             	sub    esp,0xc
c001bfdf:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001bfe3:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001bfe7:	31 ed                	xor    ebp,ebp
c001bfe9:	0f af c2             	imul   eax,edx
c001bfec:	50                   	push   eax
c001bfed:	e8 68 36 ff ff       	call   c000f65a <malloc>
c001bff2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001bff4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bff8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bffb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bfff:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c003:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c007:	0f af c2             	imul   eax,edx
c001c00a:	99                   	cdq    
c001c00b:	52                   	push   edx
c001c00c:	50                   	push   eax
c001c00d:	56                   	push   esi
c001c00e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c011:	83 c4 20             	add    esp,0x20
c001c014:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c01c:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c020:	0f 86 80 00 00 00    	jbe    c001c0a6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c026:	0f b7 fd             	movzx  edi,bp
c001c029:	c1 e7 05             	shl    edi,0x5
c001c02c:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c030:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c033:	75 6b                	jne    c001c0a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c035:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c038:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c03c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c03f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c043:	52                   	push   edx
c001c044:	31 d2                	xor    edx,edx
c001c046:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c049:	52                   	push   edx
c001c04a:	50                   	push   eax
c001c04b:	56                   	push   esi
c001c04c:	e8 53 6f ff ff       	call   c0012fa4 <File::seek(unsigned long long)>
c001c051:	83 c4 10             	add    esp,0x10
c001c054:	85 c0                	test   eax,eax
c001c056:	74 17                	je     c001c06f <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c058:	83 ec 0c             	sub    esp,0xc
c001c05b:	68 9c ad 02 c0       	push   0xc002ad9c
c001c060:	e8 c4 68 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001c065:	83 c4 10             	add    esp,0x10
c001c068:	31 c0                	xor    eax,eax
c001c06a:	e9 87 00 00 00       	jmp    c001c0f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c06f:	83 ec 0c             	sub    esp,0xc
c001c072:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c075:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c078:	50                   	push   eax
c001c079:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c07d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c081:	56                   	push   esi
c001c082:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c086:	e8 e0 fb ff ff       	call   c001bc6b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c08b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c08f:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c093:	83 c4 20             	add    esp,0x20
c001c096:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c09a:	73 04                	jae    c001c0a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c0a0:	45                   	inc    ebp
c001c0a1:	e9 76 ff ff ff       	jmp    c001c01c <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c0a6:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c0aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c0ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0b2:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c0b8:	83 ec 0c             	sub    esp,0xc
c001c0bb:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c0c1:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c0c6:	05 00 10 00 00       	add    eax,0x1000
c001c0cb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c0ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0d2:	e8 93 35 ff ff       	call   c000f66a <free>
c001c0d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0da:	e8 8b 35 ff ff       	call   c000f66a <free>
c001c0df:	58                   	pop    eax
c001c0e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c0e4:	e8 81 35 ff ff       	call   c000f66a <free>
c001c0e9:	89 34 24             	mov    DWORD PTR [esp],esi
c001c0ec:	e8 53 6e ff ff       	call   c0012f44 <File::close()>
c001c0f1:	83 c4 10             	add    esp,0x10
c001c0f4:	b0 01                	mov    al,0x1
c001c0f6:	83 c4 3c             	add    esp,0x3c
c001c0f9:	5b                   	pop    ebx
c001c0fa:	5e                   	pop    esi
c001c0fb:	5f                   	pop    edi
c001c0fc:	5d                   	pop    ebp
c001c0fd:	c3                   	ret    

c001c0fe <Thr::runtimeReferenceHelper()>:
c001c0fe:	83 ec 18             	sub    esp,0x18
c001c101:	68 a4 ad 02 c0       	push   0xc002ada4
c001c106:	e8 1e 68 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001c10b:	fa                   	cli    
c001c10c:	83 c4 10             	add    esp,0x10
c001c10f:	eb fe                	jmp    c001c10f <Thr::runtimeReferenceHelper()+0x11>

c001c111 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c111:	57                   	push   edi
c001c112:	56                   	push   esi
c001c113:	53                   	push   ebx
c001c114:	31 db                	xor    ebx,ebx
c001c116:	39 1d e0 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5e0,ebx
c001c11c:	7e 3c                	jle    c001c15a <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c11e:	8b 34 9d 60 e5 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd1aa0]
c001c125:	31 ff                	xor    edi,edi
c001c127:	39 3c 9d 60 e4 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd1ba0],edi
c001c12e:	7e 27                	jle    c001c157 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c130:	50                   	push   eax
c001c131:	50                   	push   eax
c001c132:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c136:	8b 06                	mov    eax,DWORD PTR [esi]
c001c138:	03 04 9d e0 e4 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd1b20]
c001c13f:	50                   	push   eax
c001c140:	e8 6f 46 fe ff       	call   c00007b4 <strcmp>
c001c145:	83 c4 10             	add    esp,0x10
c001c148:	85 c0                	test   eax,eax
c001c14a:	75 05                	jne    c001c151 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c14c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c14f:	eb 0b                	jmp    c001c15c <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c151:	83 c6 10             	add    esi,0x10
c001c154:	47                   	inc    edi
c001c155:	eb d0                	jmp    c001c127 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c157:	43                   	inc    ebx
c001c158:	eb bc                	jmp    c001c116 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c15a:	31 c0                	xor    eax,eax
c001c15c:	5b                   	pop    ebx
c001c15d:	5e                   	pop    esi
c001c15e:	5f                   	pop    edi
c001c15f:	c3                   	ret    

c001c160 <Thr::loadKernelSymbolTable(char const*)>:
c001c160:	55                   	push   ebp
c001c161:	57                   	push   edi
c001c162:	56                   	push   esi
c001c163:	53                   	push   ebx
c001c164:	83 ec 68             	sub    esp,0x68
c001c167:	8b 35 34 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e634
c001c16d:	68 14 01 00 00       	push   0x114
c001c172:	e8 e3 34 ff ff       	call   c000f65a <malloc>
c001c177:	83 c4 0c             	add    esp,0xc
c001c17a:	89 c3                	mov    ebx,eax
c001c17c:	56                   	push   esi
c001c17d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c181:	50                   	push   eax
c001c182:	e8 fb 6c ff ff       	call   c0012e82 <File::File(char const*, Process*)>
c001c187:	5e                   	pop    esi
c001c188:	5f                   	pop    edi
c001c189:	6a 01                	push   0x1
c001c18b:	53                   	push   ebx
c001c18c:	e8 55 6d ff ff       	call   c0012ee6 <File::open(FileOpenMode)>
c001c191:	83 c4 10             	add    esp,0x10
c001c194:	31 d2                	xor    edx,edx
c001c196:	85 c0                	test   eax,eax
c001c198:	0f 85 74 02 00 00    	jne    c001c412 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001c19e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c1a6:	83 ec 0c             	sub    esp,0xc
c001c1a9:	6a 34                	push   0x34
c001c1ab:	e8 aa 34 ff ff       	call   c000f65a <malloc>
c001c1b0:	59                   	pop    ecx
c001c1b1:	89 c7                	mov    edi,eax
c001c1b3:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c1b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c1b9:	56                   	push   esi
c001c1ba:	57                   	push   edi
c001c1bb:	6a 00                	push   0x0
c001c1bd:	6a 34                	push   0x34
c001c1bf:	53                   	push   ebx
c001c1c0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c1c3:	83 c4 20             	add    esp,0x20
c001c1c6:	85 c0                	test   eax,eax
c001c1c8:	74 17                	je     c001c1e1 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001c1ca:	83 ec 0c             	sub    esp,0xc
c001c1cd:	68 c6 ad 02 c0       	push   0xc002adc6
c001c1d2:	e8 a8 da ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001c1d7:	83 c4 10             	add    esp,0x10
c001c1da:	31 d2                	xor    edx,edx
c001c1dc:	e9 31 02 00 00       	jmp    c001c412 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001c1e1:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c1e7:	75 e1                	jne    c001c1ca <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001c1e9:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c1ec:	85 c0                	test   eax,eax
c001c1ee:	74 da                	je     c001c1ca <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001c1f0:	52                   	push   edx
c001c1f1:	31 d2                	xor    edx,edx
c001c1f3:	52                   	push   edx
c001c1f4:	50                   	push   eax
c001c1f5:	53                   	push   ebx
c001c1f6:	e8 a9 6d ff ff       	call   c0012fa4 <File::seek(unsigned long long)>
c001c1fb:	83 c4 10             	add    esp,0x10
c001c1fe:	85 c0                	test   eax,eax
c001c200:	75 c8                	jne    c001c1ca <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001c202:	83 ec 0c             	sub    esp,0xc
c001c205:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c209:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c20d:	31 ed                	xor    ebp,ebp
c001c20f:	0f af c2             	imul   eax,edx
c001c212:	50                   	push   eax
c001c213:	e8 42 34 ff ff       	call   c000f65a <malloc>
c001c218:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c21a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c21e:	89 34 24             	mov    DWORD PTR [esp],esi
c001c221:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c225:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c229:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c22d:	0f af c2             	imul   eax,edx
c001c230:	99                   	cdq    
c001c231:	52                   	push   edx
c001c232:	50                   	push   eax
c001c233:	53                   	push   ebx
c001c234:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c237:	83 c4 20             	add    esp,0x20
c001c23a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c242:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c24a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c252:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c25a:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c25e:	0f 86 aa 00 00 00    	jbe    c001c30e <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001c264:	0f b7 f5             	movzx  esi,bp
c001c267:	6b f6 28             	imul   esi,esi,0x28
c001c26a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c26e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c271:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c275:	50                   	push   eax
c001c276:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c27a:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c27e:	8b 16                	mov    edx,DWORD PTR [esi]
c001c280:	6b c0 28             	imul   eax,eax,0x28
c001c283:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c287:	89 d0                	mov    eax,edx
c001c289:	31 d2                	xor    edx,edx
c001c28b:	52                   	push   edx
c001c28c:	50                   	push   eax
c001c28d:	53                   	push   ebx
c001c28e:	e8 11 6d ff ff       	call   c0012fa4 <File::seek(unsigned long long)>
c001c293:	83 c4 0c             	add    esp,0xc
c001c296:	6a 20                	push   0x20
c001c298:	6a 00                	push   0x0
c001c29a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c29e:	52                   	push   edx
c001c29f:	e8 20 44 fe ff       	call   c00006c4 <memset>
c001c2a4:	58                   	pop    eax
c001c2a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c2a7:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c2ab:	51                   	push   ecx
c001c2ac:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c2b0:	52                   	push   edx
c001c2b1:	6a 00                	push   0x0
c001c2b3:	6a 1f                	push   0x1f
c001c2b5:	53                   	push   ebx
c001c2b6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c2b9:	83 c4 18             	add    esp,0x18
c001c2bc:	68 dd ad 02 c0       	push   0xc002addd
c001c2c1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c2c5:	52                   	push   edx
c001c2c6:	e8 e9 44 fe ff       	call   c00007b4 <strcmp>
c001c2cb:	83 c4 10             	add    esp,0x10
c001c2ce:	85 c0                	test   eax,eax
c001c2d0:	75 0f                	jne    c001c2e1 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001c2d2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c2d5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c2d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c2dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2e1:	50                   	push   eax
c001c2e2:	50                   	push   eax
c001c2e3:	68 e5 ad 02 c0       	push   0xc002ade5
c001c2e8:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c2ec:	50                   	push   eax
c001c2ed:	e8 c2 44 fe ff       	call   c00007b4 <strcmp>
c001c2f2:	83 c4 10             	add    esp,0x10
c001c2f5:	85 c0                	test   eax,eax
c001c2f7:	75 0f                	jne    c001c308 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001c2f9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c2fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c300:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c304:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c308:	45                   	inc    ebp
c001c309:	e9 4c ff ff ff       	jmp    c001c25a <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001c30e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c313:	75 10                	jne    c001c325 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001c315:	83 ec 0c             	sub    esp,0xc
c001c318:	68 ed ad 02 c0       	push   0xc002aded
c001c31d:	e8 5d d9 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001c322:	83 c4 10             	add    esp,0x10
c001c325:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c32a:	75 10                	jne    c001c33c <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001c32c:	83 ec 0c             	sub    esp,0xc
c001c32f:	68 ed ad 02 c0       	push   0xc002aded
c001c334:	e8 46 d9 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001c339:	83 c4 10             	add    esp,0x10
c001c33c:	31 d2                	xor    edx,edx
c001c33e:	50                   	push   eax
c001c33f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c343:	52                   	push   edx
c001c344:	50                   	push   eax
c001c345:	53                   	push   ebx
c001c346:	e8 59 6c ff ff       	call   c0012fa4 <File::seek(unsigned long long)>
c001c34b:	5a                   	pop    edx
c001c34c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c350:	e8 05 33 ff ff       	call   c000f65a <malloc>
c001c355:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c359:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c35d:	31 c9                	xor    ecx,ecx
c001c35f:	5e                   	pop    esi
c001c360:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c362:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c366:	55                   	push   ebp
c001c367:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c36b:	51                   	push   ecx
c001c36c:	52                   	push   edx
c001c36d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c371:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c375:	53                   	push   ebx
c001c376:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c379:	83 c4 14             	add    esp,0x14
c001c37c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c380:	e8 d5 32 ff ff       	call   c000f65a <malloc>
c001c385:	89 c6                	mov    esi,eax
c001c387:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c389:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c38c:	56                   	push   esi
c001c38d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c391:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c395:	51                   	push   ecx
c001c396:	52                   	push   edx
c001c397:	53                   	push   ebx
c001c398:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c39b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c39f:	8b 15 e0 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5e0
c001c3a5:	83 c4 1c             	add    esp,0x1c
c001c3a8:	c1 e8 04             	shr    eax,0x4
c001c3ab:	89 04 95 60 e4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1ba0],eax
c001c3b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c3b6:	31 d2                	xor    edx,edx
c001c3b8:	52                   	push   edx
c001c3b9:	50                   	push   eax
c001c3ba:	53                   	push   ebx
c001c3bb:	e8 e4 6b ff ff       	call   c0012fa4 <File::seek(unsigned long long)>
c001c3c0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c3c2:	31 d2                	xor    edx,edx
c001c3c4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c3c7:	56                   	push   esi
c001c3c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c3cc:	52                   	push   edx
c001c3cd:	50                   	push   eax
c001c3ce:	53                   	push   ebx
c001c3cf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c3d2:	83 c4 14             	add    esp,0x14
c001c3d5:	53                   	push   ebx
c001c3d6:	e8 69 6b ff ff       	call   c0012f44 <File::close()>
c001c3db:	5d                   	pop    ebp
c001c3dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c3e0:	e8 85 32 ff ff       	call   c000f66a <free>
c001c3e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3e8:	e8 7d 32 ff ff       	call   c000f66a <free>
c001c3ed:	a1 e0 e5 02 c0       	mov    eax,ds:0xc002e5e0
c001c3f2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c3f6:	8d 50 01             	lea    edx,[eax+0x1]
c001c3f9:	89 0c 85 60 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1aa0],ecx
c001c400:	89 15 e0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5e0,edx
c001c406:	89 34 85 e0 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b20],esi
c001c40d:	83 c4 10             	add    esp,0x10
c001c410:	b2 01                	mov    dl,0x1
c001c412:	83 c4 5c             	add    esp,0x5c
c001c415:	88 d0                	mov    al,dl
c001c417:	5b                   	pop    ebx
c001c418:	5e                   	pop    esi
c001c419:	5f                   	pop    edi
c001c41a:	5d                   	pop    ebp
c001c41b:	c3                   	ret    

c001c41c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c41c:	55                   	push   ebp
c001c41d:	57                   	push   edi
c001c41e:	56                   	push   esi
c001c41f:	53                   	push   ebx
c001c420:	81 ec 68 03 00 00    	sub    esp,0x368
c001c426:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c42d:	8b 1d 34 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e634
c001c433:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c437:	68 14 01 00 00       	push   0x114
c001c43c:	e8 19 32 ff ff       	call   c000f65a <malloc>
c001c441:	83 c4 0c             	add    esp,0xc
c001c444:	89 c5                	mov    ebp,eax
c001c446:	53                   	push   ebx
c001c447:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c44e:	50                   	push   eax
c001c44f:	e8 2e 6a ff ff       	call   c0012e82 <File::File(char const*, Process*)>
c001c454:	5e                   	pop    esi
c001c455:	5f                   	pop    edi
c001c456:	6a 01                	push   0x1
c001c458:	55                   	push   ebp
c001c459:	e8 88 6a ff ff       	call   c0012ee6 <File::open(FileOpenMode)>
c001c45e:	83 c4 10             	add    esp,0x10
c001c461:	85 c0                	test   eax,eax
c001c463:	0f 85 8d 06 00 00    	jne    c001caf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c469:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c471:	83 ec 0c             	sub    esp,0xc
c001c474:	6a 34                	push   0x34
c001c476:	e8 df 31 ff ff       	call   c000f65a <malloc>
c001c47b:	5b                   	pop    ebx
c001c47c:	89 c7                	mov    edi,eax
c001c47e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c482:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c485:	53                   	push   ebx
c001c486:	57                   	push   edi
c001c487:	6a 00                	push   0x0
c001c489:	6a 34                	push   0x34
c001c48b:	55                   	push   ebp
c001c48c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c48f:	83 c4 20             	add    esp,0x20
c001c492:	85 c0                	test   eax,eax
c001c494:	0f 85 5c 06 00 00    	jne    c001caf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c49a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c4a0:	0f 85 50 06 00 00    	jne    c001caf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c4a6:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c4a9:	85 c0                	test   eax,eax
c001c4ab:	0f 84 45 06 00 00    	je     c001caf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c4b1:	31 d2                	xor    edx,edx
c001c4b3:	51                   	push   ecx
c001c4b4:	52                   	push   edx
c001c4b5:	50                   	push   eax
c001c4b6:	55                   	push   ebp
c001c4b7:	e8 e8 6a ff ff       	call   c0012fa4 <File::seek(unsigned long long)>
c001c4bc:	83 c4 10             	add    esp,0x10
c001c4bf:	85 c0                	test   eax,eax
c001c4c1:	0f 85 2f 06 00 00    	jne    c001caf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c4c7:	83 ec 0c             	sub    esp,0xc
c001c4ca:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c4cd:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c4d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c4d5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c4d9:	0f af c2             	imul   eax,edx
c001c4dc:	50                   	push   eax
c001c4dd:	e8 78 31 ff ff       	call   c000f65a <malloc>
c001c4e2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c4e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c4ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c4f0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c4f4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c4f8:	0f af c2             	imul   eax,edx
c001c4fb:	99                   	cdq    
c001c4fc:	52                   	push   edx
c001c4fd:	50                   	push   eax
c001c4fe:	55                   	push   ebp
c001c4ff:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c502:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c505:	83 c4 20             	add    esp,0x20
c001c508:	85 c0                	test   eax,eax
c001c50a:	0f 84 e6 05 00 00    	je     c001caf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c510:	52                   	push   edx
c001c511:	31 d2                	xor    edx,edx
c001c513:	52                   	push   edx
c001c514:	50                   	push   eax
c001c515:	55                   	push   ebp
c001c516:	e8 89 6a ff ff       	call   c0012fa4 <File::seek(unsigned long long)>
c001c51b:	83 c4 10             	add    esp,0x10
c001c51e:	85 c0                	test   eax,eax
c001c520:	0f 85 d0 05 00 00    	jne    c001caf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c526:	83 ec 0c             	sub    esp,0xc
c001c529:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c52d:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c531:	31 f6                	xor    esi,esi
c001c533:	0f af c2             	imul   eax,edx
c001c536:	50                   	push   eax
c001c537:	e8 1e 31 ff ff       	call   c000f65a <malloc>
c001c53c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c53f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c543:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c546:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c54a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c54e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c552:	0f af c2             	imul   eax,edx
c001c555:	99                   	cdq    
c001c556:	52                   	push   edx
c001c557:	50                   	push   eax
c001c558:	55                   	push   ebp
c001c559:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c55c:	83 c4 20             	add    esp,0x20
c001c55f:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c563:	0f 86 8a 00 00 00    	jbe    c001c5f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c569:	0f b7 de             	movzx  ebx,si
c001c56c:	c1 e3 05             	shl    ebx,0x5
c001c56f:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c573:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c576:	75 75                	jne    c001c5ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c578:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c57b:	31 d2                	xor    edx,edx
c001c57d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c581:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c584:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c588:	50                   	push   eax
c001c589:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c58c:	52                   	push   edx
c001c58d:	50                   	push   eax
c001c58e:	55                   	push   ebp
c001c58f:	e8 10 6a ff ff       	call   c0012fa4 <File::seek(unsigned long long)>
c001c594:	83 c4 10             	add    esp,0x10
c001c597:	85 c0                	test   eax,eax
c001c599:	0f 85 57 05 00 00    	jne    c001caf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c59f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c5a6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c5a9:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c5ad:	31 d2                	xor    edx,edx
c001c5af:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c5b3:	83 ec 0c             	sub    esp,0xc
c001c5b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c5ba:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c5c1:	50                   	push   eax
c001c5c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c5c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c5ca:	52                   	push   edx
c001c5cb:	50                   	push   eax
c001c5cc:	55                   	push   ebp
c001c5cd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c5d0:	83 c4 1c             	add    esp,0x1c
c001c5d3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c5d6:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c5d9:	50                   	push   eax
c001c5da:	6a 00                	push   0x0
c001c5dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e0:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c5e4:	50                   	push   eax
c001c5e5:	e8 da 40 fe ff       	call   c00006c4 <memset>
c001c5ea:	83 c4 10             	add    esp,0x10
c001c5ed:	46                   	inc    esi
c001c5ee:	e9 6c ff ff ff       	jmp    c001c55f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c5f3:	53                   	push   ebx
c001c5f4:	31 db                	xor    ebx,ebx
c001c5f6:	68 00 01 00 00       	push   0x100
c001c5fb:	6a 00                	push   0x0
c001c5fd:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c601:	50                   	push   eax
c001c602:	e8 bd 40 fe ff       	call   c00006c4 <memset>
c001c607:	83 c4 0c             	add    esp,0xc
c001c60a:	68 00 01 00 00       	push   0x100
c001c60f:	6a 00                	push   0x0
c001c611:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c618:	50                   	push   eax
c001c619:	e8 a6 40 fe ff       	call   c00006c4 <memset>
c001c61e:	83 c4 10             	add    esp,0x10
c001c621:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c629:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c631:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001c639:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c641:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c649:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c64d:	0f 86 30 01 00 00    	jbe    c001c783 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c653:	0f b7 f3             	movzx  esi,bx
c001c656:	6b f6 28             	imul   esi,esi,0x28
c001c659:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c65d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c660:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c664:	52                   	push   edx
c001c665:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c669:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c66d:	8b 06                	mov    eax,DWORD PTR [esi]
c001c66f:	6b d2 28             	imul   edx,edx,0x28
c001c672:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c676:	31 d2                	xor    edx,edx
c001c678:	52                   	push   edx
c001c679:	50                   	push   eax
c001c67a:	55                   	push   ebp
c001c67b:	e8 24 69 ff ff       	call   c0012fa4 <File::seek(unsigned long long)>
c001c680:	83 c4 0c             	add    esp,0xc
c001c683:	6a 20                	push   0x20
c001c685:	6a 00                	push   0x0
c001c687:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c68e:	51                   	push   ecx
c001c68f:	e8 30 40 fe ff       	call   c00006c4 <memset>
c001c694:	59                   	pop    ecx
c001c695:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c698:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c69c:	52                   	push   edx
c001c69d:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c6a4:	51                   	push   ecx
c001c6a5:	6a 00                	push   0x0
c001c6a7:	6a 1f                	push   0x1f
c001c6a9:	55                   	push   ebp
c001c6aa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6ad:	83 c4 1c             	add    esp,0x1c
c001c6b0:	6a 09                	push   0x9
c001c6b2:	68 07 ae 02 c0       	push   0xc002ae07
c001c6b7:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c6be:	51                   	push   ecx
c001c6bf:	e8 79 3f fe ff       	call   c000063d <memcmp>
c001c6c4:	83 c4 10             	add    esp,0x10
c001c6c7:	85 c0                	test   eax,eax
c001c6c9:	75 21                	jne    c001c6ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c6cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c6d3:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c6d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c6db:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c6de:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c6e5:	89 d0                	mov    eax,edx
c001c6e7:	40                   	inc    eax
c001c6e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c6ec:	50                   	push   eax
c001c6ed:	6a 09                	push   0x9
c001c6ef:	68 11 ae 02 c0       	push   0xc002ae11
c001c6f4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c6fb:	50                   	push   eax
c001c6fc:	e8 3c 3f fe ff       	call   c000063d <memcmp>
c001c701:	83 c4 10             	add    esp,0x10
c001c704:	85 c0                	test   eax,eax
c001c706:	75 21                	jne    c001c729 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c70c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c710:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c714:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c718:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c71b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c722:	89 d0                	mov    eax,edx
c001c724:	40                   	inc    eax
c001c725:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c729:	50                   	push   eax
c001c72a:	50                   	push   eax
c001c72b:	68 dd ad 02 c0       	push   0xc002addd
c001c730:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c737:	50                   	push   eax
c001c738:	e8 77 40 fe ff       	call   c00007b4 <strcmp>
c001c73d:	83 c4 10             	add    esp,0x10
c001c740:	85 c0                	test   eax,eax
c001c742:	75 0f                	jne    c001c753 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c744:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c747:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c74b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c74f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c753:	50                   	push   eax
c001c754:	50                   	push   eax
c001c755:	68 e5 ad 02 c0       	push   0xc002ade5
c001c75a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c761:	50                   	push   eax
c001c762:	e8 4d 40 fe ff       	call   c00007b4 <strcmp>
c001c767:	83 c4 10             	add    esp,0x10
c001c76a:	85 c0                	test   eax,eax
c001c76c:	75 0f                	jne    c001c77d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c76e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c771:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c775:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c779:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c77d:	43                   	inc    ebx
c001c77e:	e9 c6 fe ff ff       	jmp    c001c649 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001c783:	31 d2                	xor    edx,edx
c001c785:	50                   	push   eax
c001c786:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c78a:	52                   	push   edx
c001c78b:	50                   	push   eax
c001c78c:	55                   	push   ebp
c001c78d:	e8 12 68 ff ff       	call   c0012fa4 <File::seek(unsigned long long)>
c001c792:	58                   	pop    eax
c001c793:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c797:	e8 be 2e ff ff       	call   c000f65a <malloc>
c001c79c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c79f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c7a3:	31 d2                	xor    edx,edx
c001c7a5:	58                   	pop    eax
c001c7a6:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c7aa:	53                   	push   ebx
c001c7ab:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c7af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c7b3:	52                   	push   edx
c001c7b4:	50                   	push   eax
c001c7b5:	55                   	push   ebp
c001c7b6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7b9:	83 c4 14             	add    esp,0x14
c001c7bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c7c0:	e8 95 2e ff ff       	call   c000f65a <malloc>
c001c7c5:	31 d2                	xor    edx,edx
c001c7c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c7cb:	83 c4 0c             	add    esp,0xc
c001c7ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c7d2:	52                   	push   edx
c001c7d3:	50                   	push   eax
c001c7d4:	55                   	push   ebp
c001c7d5:	e8 ca 67 ff ff       	call   c0012fa4 <File::seek(unsigned long long)>
c001c7da:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c7dd:	31 d2                	xor    edx,edx
c001c7df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c7e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c7ea:	52                   	push   edx
c001c7eb:	50                   	push   eax
c001c7ec:	55                   	push   ebp
c001c7ed:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7f0:	83 c4 20             	add    esp,0x20
c001c7f3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c7fb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c7ff:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001c803:	0f 84 f1 02 00 00    	je     c001cafa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001c809:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001c810:	31 d2                	xor    edx,edx
c001c812:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c816:	c1 e8 03             	shr    eax,0x3
c001c819:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001c81d:	51                   	push   ecx
c001c81e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c822:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001c826:	52                   	push   edx
c001c827:	50                   	push   eax
c001c828:	55                   	push   ebp
c001c829:	e8 76 67 ff ff       	call   c0012fa4 <File::seek(unsigned long long)>
c001c82e:	5b                   	pop    ebx
c001c82f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c833:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001c83a:	e8 1b 2e ff ff       	call   c000f65a <malloc>
c001c83f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c842:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c846:	31 d2                	xor    edx,edx
c001c848:	5e                   	pop    esi
c001c849:	8d 44 24 58          	lea    eax,[esp+0x58]
c001c84d:	50                   	push   eax
c001c84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c852:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c856:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001c85d:	52                   	push   edx
c001c85e:	50                   	push   eax
c001c85f:	55                   	push   ebp
c001c860:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c863:	83 c4 20             	add    esp,0x20
c001c866:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c86e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c872:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001c876:	0f 8d 62 02 00 00    	jge    c001cade <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001c87c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c880:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c884:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001c889:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001c88c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c890:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c894:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001c898:	89 d8                	mov    eax,ebx
c001c89a:	c1 e8 08             	shr    eax,0x8
c001c89d:	89 c6                	mov    esi,eax
c001c89f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c8a3:	c1 e6 04             	shl    esi,0x4
c001c8a6:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001c8aa:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001c8ad:	85 d2                	test   edx,edx
c001c8af:	0f 85 bf 00 00 00    	jne    c001c974 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001c8b5:	83 ec 0c             	sub    esp,0xc
c001c8b8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c8bc:	03 06                	add    eax,DWORD PTR [esi]
c001c8be:	50                   	push   eax
c001c8bf:	e8 4d f8 ff ff       	call   c001c111 <Thr::getAddressOfKernelSymbol(char const*)>
c001c8c4:	83 c4 10             	add    esp,0x10
c001c8c7:	89 c2                	mov    edx,eax
c001c8c9:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001c8ce:	85 c0                	test   eax,eax
c001c8d0:	0f 85 9e 00 00 00    	jne    c001c974 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001c8d6:	83 ec 0c             	sub    esp,0xc
c001c8d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c8dd:	03 06                	add    eax,DWORD PTR [esi]
c001c8df:	50                   	push   eax
c001c8e0:	e8 f9 19 ff ff       	call   c000e2de <Krnl::resolveCompatibilitySymbol(char*)>
c001c8e5:	83 c4 10             	add    esp,0x10
c001c8e8:	89 c2                	mov    edx,eax
c001c8ea:	85 c0                	test   eax,eax
c001c8ec:	0f 85 82 00 00 00    	jne    c001c974 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001c8f2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001c8f6:	50                   	push   eax
c001c8f7:	50                   	push   eax
c001c8f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c8fc:	03 06                	add    eax,DWORD PTR [esi]
c001c8fe:	50                   	push   eax
c001c8ff:	68 1b ae 02 c0       	push   0xc002ae1b
c001c904:	e8 20 60 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001c909:	58                   	pop    eax
c001c90a:	5a                   	pop    edx
c001c90b:	68 35 ae 02 c0       	push   0xc002ae35
c001c910:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c917:	50                   	push   eax
c001c918:	e8 46 3e fe ff       	call   c0000763 <strcpy>
c001c91d:	59                   	pop    ecx
c001c91e:	58                   	pop    eax
c001c91f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c923:	03 06                	add    eax,DWORD PTR [esi]
c001c925:	50                   	push   eax
c001c926:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c92d:	50                   	push   eax
c001c92e:	e8 e7 3e fe ff       	call   c000081a <strcat>
c001c933:	58                   	pop    eax
c001c934:	5a                   	pop    edx
c001c935:	68 cb ae 02 c0       	push   0xc002aecb
c001c93a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c941:	50                   	push   eax
c001c942:	e8 d3 3e fe ff       	call   c000081a <strcat>
c001c947:	83 c4 10             	add    esp,0x10
c001c94a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001c94f:	0f 84 43 01 00 00    	je     c001ca98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001c955:	83 ec 0c             	sub    esp,0xc
c001c958:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c95f:	50                   	push   eax
c001c960:	e8 1a d3 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001c965:	83 c4 10             	add    esp,0x10
c001c968:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001c96c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c970:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001c974:	80 fb 01             	cmp    bl,0x1
c001c977:	75 7d                	jne    c001c9f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001c979:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001c980:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c984:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001c988:	01 ce                	add    esi,ecx
c001c98a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001c990:	0f 94 c0             	sete   al
c001c993:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001c999:	0f 94 c3             	sete   bl
c001c99c:	09 c3                	or     ebx,eax
c001c99e:	8b 06                	mov    eax,DWORD PTR [esi]
c001c9a0:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001c9a5:	74 36                	je     c001c9dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001c9a7:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001c9aa:	84 db                	test   bl,bl
c001c9ac:	75 0a                	jne    c001c9b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001c9ae:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c9b2:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001c9b6:	76 37                	jbe    c001c9ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c9b8:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001c9bc:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001c9c1:	0f 84 d1 00 00 00    	je     c001ca98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001c9c7:	83 ec 0c             	sub    esp,0xc
c001c9ca:	68 4c ae 02 c0       	push   0xc002ae4c
c001c9cf:	e8 ab d2 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001c9d4:	83 c4 10             	add    esp,0x10
c001c9d7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c9db:	eb 12                	jmp    c001c9ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c9dd:	01 c1                	add    ecx,eax
c001c9df:	84 db                	test   bl,bl
c001c9e1:	75 0c                	jne    c001c9ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c9e3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c9e7:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001c9eb:	77 02                	ja     c001c9ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c9ed:	01 d1                	add    ecx,edx
c001c9ef:	89 0e                	mov    DWORD PTR [esi],ecx
c001c9f1:	e9 df 00 00 00       	jmp    c001cad5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001c9f6:	80 fb 02             	cmp    bl,0x2
c001c9f9:	75 71                	jne    c001ca6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001c9fb:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001ca02:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001ca06:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001ca0a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ca10:	74 15                	je     c001ca27 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001ca12:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ca18:	74 0d                	je     c001ca27 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001ca1a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ca1e:	83 e8 04             	sub    eax,0x4
c001ca21:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ca25:	76 1f                	jbe    c001ca46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001ca27:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001ca2b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ca30:	74 66                	je     c001ca98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001ca32:	83 ec 0c             	sub    esp,0xc
c001ca35:	68 68 ae 02 c0       	push   0xc002ae68
c001ca3a:	e8 40 d2 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001ca3f:	83 c4 10             	add    esp,0x10
c001ca42:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ca46:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca48:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ca4d:	74 13                	je     c001ca62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001ca4f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ca53:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001ca5a:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001ca5e:	01 c8                	add    eax,ecx
c001ca60:	eb 04                	jmp    c001ca66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001ca62:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001ca66:	01 c2                	add    edx,eax
c001ca68:	89 16                	mov    DWORD PTR [esi],edx
c001ca6a:	eb 69                	jmp    c001cad5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001ca6c:	0f b6 db             	movzx  ebx,bl
c001ca6f:	50                   	push   eax
c001ca70:	50                   	push   eax
c001ca71:	53                   	push   ebx
c001ca72:	68 84 ae 02 c0       	push   0xc002ae84
c001ca77:	e8 ad 5e ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001ca7c:	83 c4 10             	add    esp,0x10
c001ca7f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ca84:	74 12                	je     c001ca98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001ca86:	83 ec 0c             	sub    esp,0xc
c001ca89:	68 8f ae 02 c0       	push   0xc002ae8f
c001ca8e:	e8 ec d1 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001ca93:	83 c4 10             	add    esp,0x10
c001ca96:	eb 3d                	jmp    c001cad5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001ca98:	83 ec 0c             	sub    esp,0xc
c001ca9b:	55                   	push   ebp
c001ca9c:	e8 a3 64 ff ff       	call   c0012f44 <File::close()>
c001caa1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001caa4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001caa7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001caaa:	59                   	pop    ecx
c001caab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001caaf:	e8 b6 2b ff ff       	call   c000f66a <free>
c001cab4:	5b                   	pop    ebx
c001cab5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cab9:	e8 ac 2b ff ff       	call   c000f66a <free>
c001cabe:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cac1:	e8 a4 2b ff ff       	call   c000f66a <free>
c001cac6:	5e                   	pop    esi
c001cac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cacb:	e8 9a 2b ff ff       	call   c000f66a <free>
c001cad0:	83 c4 10             	add    esp,0x10
c001cad3:	eb 21                	jmp    c001caf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cad5:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cad9:	e9 90 fd ff ff       	jmp    c001c86e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cade:	83 ec 0c             	sub    esp,0xc
c001cae1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cae5:	e8 80 2b ff ff       	call   c000f66a <free>
c001caea:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001caee:	83 c4 10             	add    esp,0x10
c001caf1:	e9 05 fd ff ff       	jmp    c001c7fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001caf6:	31 c0                	xor    eax,eax
c001caf8:	eb 33                	jmp    c001cb2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001cafa:	83 ec 0c             	sub    esp,0xc
c001cafd:	55                   	push   ebp
c001cafe:	e8 41 64 ff ff       	call   c0012f44 <File::close()>
c001cb03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cb06:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cb09:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cb0c:	58                   	pop    eax
c001cb0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cb11:	e8 54 2b ff ff       	call   c000f66a <free>
c001cb16:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb19:	e8 4c 2b ff ff       	call   c000f66a <free>
c001cb1e:	5a                   	pop    edx
c001cb1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb23:	e8 42 2b ff ff       	call   c000f66a <free>
c001cb28:	83 c4 10             	add    esp,0x10
c001cb2b:	b0 01                	mov    al,0x1
c001cb2d:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cb33:	5b                   	pop    ebx
c001cb34:	5e                   	pop    esi
c001cb35:	5f                   	pop    edi
c001cb36:	5d                   	pop    ebp
c001cb37:	c3                   	ret    

c001cb38 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cb38:	56                   	push   esi
c001cb39:	31 d2                	xor    edx,edx
c001cb3b:	53                   	push   ebx
c001cb3c:	8b 1d 40 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de40
c001cb42:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cb46:	39 d3                	cmp    ebx,edx
c001cb48:	7e 1b                	jle    c001cb65 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cb4a:	8b 04 95 60 e0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1fa0]
c001cb51:	39 c8                	cmp    eax,ecx
c001cb53:	77 0d                	ja     c001cb62 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cb55:	8b 34 95 60 de 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd21a0]
c001cb5c:	01 c6                	add    esi,eax
c001cb5e:	39 ce                	cmp    esi,ecx
c001cb60:	77 05                	ja     c001cb67 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cb62:	42                   	inc    edx
c001cb63:	eb e1                	jmp    c001cb46 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cb65:	31 c0                	xor    eax,eax
c001cb67:	5b                   	pop    ebx
c001cb68:	5e                   	pop    esi
c001cb69:	c3                   	ret    

c001cb6a <Thr::getDriverNameFromAddress(unsigned long)>:
c001cb6a:	53                   	push   ebx
c001cb6b:	31 c0                	xor    eax,eax
c001cb6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cb71:	8b 1d 40 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de40
c001cb77:	39 c3                	cmp    ebx,eax
c001cb79:	7e 22                	jle    c001cb9d <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cb7b:	8b 14 85 60 e0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1fa0]
c001cb82:	39 ca                	cmp    edx,ecx
c001cb84:	77 14                	ja     c001cb9a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cb86:	03 14 85 60 de 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd21a0]
c001cb8d:	39 ca                	cmp    edx,ecx
c001cb8f:	76 09                	jbe    c001cb9a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cb91:	8b 04 85 60 e2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1da0]
c001cb98:	eb 05                	jmp    c001cb9f <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001cb9a:	40                   	inc    eax
c001cb9b:	eb da                	jmp    c001cb77 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001cb9d:	31 c0                	xor    eax,eax
c001cb9f:	5b                   	pop    ebx
c001cba0:	c3                   	ret    

c001cba1 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001cba1:	53                   	push   ebx
c001cba2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001cba6:	53                   	push   ebx
c001cba7:	e8 8c ff ff ff       	call   c001cb38 <Thr::getDriverBaseFromAddress(unsigned long)>
c001cbac:	5a                   	pop    edx
c001cbad:	31 d2                	xor    edx,edx
c001cbaf:	85 c0                	test   eax,eax
c001cbb1:	74 04                	je     c001cbb7 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001cbb3:	89 da                	mov    edx,ebx
c001cbb5:	29 c2                	sub    edx,eax
c001cbb7:	89 d0                	mov    eax,edx
c001cbb9:	5b                   	pop    ebx
c001cbba:	c3                   	ret    

c001cbbb <Thr::loadDLL(char const*, bool)>:
c001cbbb:	55                   	push   ebp
c001cbbc:	57                   	push   edi
c001cbbd:	56                   	push   esi
c001cbbe:	53                   	push   ebx
c001cbbf:	81 ec 34 01 00 00    	sub    esp,0x134
c001cbc5:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001cbcc:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001cbd3:	56                   	push   esi
c001cbd4:	68 a7 ae 02 c0       	push   0xc002aea7
c001cbd9:	e8 4b 5d ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001cbde:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001cbe5:	e8 70 2a ff ff       	call   c000f65a <malloc>
c001cbea:	83 c4 0c             	add    esp,0xc
c001cbed:	89 c3                	mov    ebx,eax
c001cbef:	ff 35 34 e6 02 c0    	push   DWORD PTR ds:0xc002e634
c001cbf5:	56                   	push   esi
c001cbf6:	50                   	push   eax
c001cbf7:	e8 86 62 ff ff       	call   c0012e82 <File::File(char const*, Process*)>
c001cbfc:	83 c4 10             	add    esp,0x10
c001cbff:	85 db                	test   ebx,ebx
c001cc01:	75 3c                	jne    c001cc3f <Thr::loadDLL(char const*, bool)+0x84>
c001cc03:	89 e8                	mov    eax,ebp
c001cc05:	84 c0                	test   al,al
c001cc07:	0f 84 b0 01 00 00    	je     c001cdbd <Thr::loadDLL(char const*, bool)+0x202>
c001cc0d:	50                   	push   eax
c001cc0e:	50                   	push   eax
c001cc0f:	68 b8 ae 02 c0       	push   0xc002aeb8
c001cc14:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001cc18:	57                   	push   edi
c001cc19:	e8 45 3b fe ff       	call   c0000763 <strcpy>
c001cc1e:	58                   	pop    eax
c001cc1f:	5a                   	pop    edx
c001cc20:	56                   	push   esi
c001cc21:	57                   	push   edi
c001cc22:	e8 f3 3b fe ff       	call   c000081a <strcat>
c001cc27:	59                   	pop    ecx
c001cc28:	58                   	pop    eax
c001cc29:	68 cb ae 02 c0       	push   0xc002aecb
c001cc2e:	57                   	push   edi
c001cc2f:	e8 e6 3b fe ff       	call   c000081a <strcat>
c001cc34:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc37:	e8 43 d0 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001cc3c:	83 c4 10             	add    esp,0x10
c001cc3f:	50                   	push   eax
c001cc40:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001cc44:	50                   	push   eax
c001cc45:	8d 44 24 20          	lea    eax,[esp+0x20]
c001cc49:	50                   	push   eax
c001cc4a:	53                   	push   ebx
c001cc4b:	e8 42 65 ff ff       	call   c0013192 <File::stat(unsigned long long*, bool*)>
c001cc50:	83 c4 10             	add    esp,0x10
c001cc53:	85 db                	test   ebx,ebx
c001cc55:	74 0c                	je     c001cc63 <Thr::loadDLL(char const*, bool)+0xa8>
c001cc57:	83 ec 0c             	sub    esp,0xc
c001cc5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc5c:	53                   	push   ebx
c001cc5d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cc60:	83 c4 10             	add    esp,0x10
c001cc63:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001cc68:	75 0a                	jne    c001cc74 <Thr::loadDLL(char const*, bool)+0xb9>
c001cc6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cc6e:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001cc72:	75 3c                	jne    c001ccb0 <Thr::loadDLL(char const*, bool)+0xf5>
c001cc74:	89 e8                	mov    eax,ebp
c001cc76:	84 c0                	test   al,al
c001cc78:	0f 84 3d 01 00 00    	je     c001cdbb <Thr::loadDLL(char const*, bool)+0x200>
c001cc7e:	50                   	push   eax
c001cc7f:	50                   	push   eax
c001cc80:	68 b8 ae 02 c0       	push   0xc002aeb8
c001cc85:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001cc89:	53                   	push   ebx
c001cc8a:	e8 d4 3a fe ff       	call   c0000763 <strcpy>
c001cc8f:	58                   	pop    eax
c001cc90:	5a                   	pop    edx
c001cc91:	56                   	push   esi
c001cc92:	53                   	push   ebx
c001cc93:	e8 82 3b fe ff       	call   c000081a <strcat>
c001cc98:	59                   	pop    ecx
c001cc99:	5f                   	pop    edi
c001cc9a:	68 cb ae 02 c0       	push   0xc002aecb
c001cc9f:	53                   	push   ebx
c001cca0:	e8 75 3b fe ff       	call   c000081a <strcat>
c001cca5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cca8:	e8 d2 cf ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001ccad:	83 c4 10             	add    esp,0x10
c001ccb0:	e8 14 4e ff ff       	call   c0011ac9 <Virt::getAKernelVAS()>
c001ccb5:	51                   	push   ecx
c001ccb6:	6a 03                	push   0x3
c001ccb8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001ccbc:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ccc0:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001ccc6:	83 d3 00             	adc    ebx,0x0
c001ccc9:	89 ca                	mov    edx,ecx
c001cccb:	89 d1                	mov    ecx,edx
c001cccd:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001ccd1:	51                   	push   ecx
c001ccd2:	50                   	push   eax
c001ccd3:	e8 2c 54 ff ff       	call   c0012104 <VAS::allocatePages(int, int)>
c001ccd8:	89 34 24             	mov    DWORD PTR [esp],esi
c001ccdb:	89 c3                	mov    ebx,eax
c001ccdd:	e8 ff 39 fe ff       	call   c00006e1 <strlen>
c001cce2:	8b 3d 40 de 02 c0    	mov    edi,DWORD PTR ds:0xc002de40
c001cce8:	40                   	inc    eax
c001cce9:	89 04 24             	mov    DWORD PTR [esp],eax
c001ccec:	e8 69 29 ff ff       	call   c000f65a <malloc>
c001ccf1:	89 04 bd 60 e2 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1da0],eax
c001ccf8:	5f                   	pop    edi
c001ccf9:	58                   	pop    eax
c001ccfa:	a1 40 de 02 c0       	mov    eax,ds:0xc002de40
c001ccff:	56                   	push   esi
c001cd00:	ff 34 85 60 e2 02 c0 	push   DWORD PTR [eax*4-0x3ffd1da0]
c001cd07:	e8 57 3a fe ff       	call   c0000763 <strcpy>
c001cd0c:	a1 40 de 02 c0       	mov    eax,ds:0xc002de40
c001cd11:	8d 50 01             	lea    edx,[eax+0x1]
c001cd14:	89 1c 85 60 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fa0],ebx
c001cd1b:	89 15 40 de 02 c0    	mov    DWORD PTR ds:0xc002de40,edx
c001cd21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd25:	83 c4 0c             	add    esp,0xc
c001cd28:	89 14 85 60 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd21a0],edx
c001cd2f:	6a 01                	push   0x1
c001cd31:	53                   	push   ebx
c001cd32:	56                   	push   esi
c001cd33:	e8 e4 f6 ff ff       	call   c001c41c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001cd38:	83 c4 10             	add    esp,0x10
c001cd3b:	89 c7                	mov    edi,eax
c001cd3d:	fe c8                	dec    al
c001cd3f:	74 16                	je     c001cd57 <Thr::loadDLL(char const*, bool)+0x19c>
c001cd41:	89 e8                	mov    eax,ebp
c001cd43:	84 c0                	test   al,al
c001cd45:	74 10                	je     c001cd57 <Thr::loadDLL(char const*, bool)+0x19c>
c001cd47:	83 ec 0c             	sub    esp,0xc
c001cd4a:	68 cd ae 02 c0       	push   0xc002aecd
c001cd4f:	e8 2b cf ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001cd54:	83 c4 10             	add    esp,0x10
c001cd57:	31 f6                	xor    esi,esi
c001cd59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd5d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cd61:	05 ff 0f 00 00       	add    eax,0xfff
c001cd66:	83 d2 00             	adc    edx,0x0
c001cd69:	0f ac d0 0c          	shrd   eax,edx,0xc
c001cd6d:	c1 ea 0c             	shr    edx,0xc
c001cd70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cd74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cd78:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001cd7c:	ba 00 00 00 00       	mov    edx,0x0
c001cd81:	89 d0                	mov    eax,edx
c001cd83:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001cd87:	73 2c                	jae    c001cdb5 <Thr::loadDLL(char const*, bool)+0x1fa>
c001cd89:	e8 3b 4d ff ff       	call   c0011ac9 <Virt::getAKernelVAS()>
c001cd8e:	89 f5                	mov    ebp,esi
c001cd90:	c1 e5 0c             	shl    ebp,0xc
c001cd93:	52                   	push   edx
c001cd94:	01 dd                	add    ebp,ebx
c001cd96:	52                   	push   edx
c001cd97:	55                   	push   ebp
c001cd98:	50                   	push   eax
c001cd99:	e8 e0 4e ff ff       	call   c0011c7e <VAS::getPageTableEntry(unsigned long)>
c001cd9e:	83 c4 10             	add    esp,0x10
c001cda1:	f6 00 60             	test   BYTE PTR [eax],0x60
c001cda4:	75 0c                	jne    c001cdb2 <Thr::loadDLL(char const*, bool)+0x1f7>
c001cda6:	83 ec 0c             	sub    esp,0xc
c001cda9:	55                   	push   ebp
c001cdaa:	e8 be 2e ff ff       	call   c000fc6d <Phys::freePage(unsigned long)>
c001cdaf:	83 c4 10             	add    esp,0x10
c001cdb2:	46                   	inc    esi
c001cdb3:	eb a4                	jmp    c001cd59 <Thr::loadDLL(char const*, bool)+0x19e>
c001cdb5:	89 f8                	mov    eax,edi
c001cdb7:	84 c0                	test   al,al
c001cdb9:	75 02                	jne    c001cdbd <Thr::loadDLL(char const*, bool)+0x202>
c001cdbb:	31 db                	xor    ebx,ebx
c001cdbd:	81 c4 2c 01 00 00    	add    esp,0x12c
c001cdc3:	89 d8                	mov    eax,ebx
c001cdc5:	5b                   	pop    ebx
c001cdc6:	5e                   	pop    esi
c001cdc7:	5f                   	pop    edi
c001cdc8:	5d                   	pop    ebp
c001cdc9:	c3                   	ret    

c001cdca <Thr::executeDLL(unsigned long, void*)>:
c001cdca:	56                   	push   esi
c001cdcb:	53                   	push   ebx
c001cdcc:	51                   	push   ecx
c001cdcd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cdd1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001cdd5:	85 db                	test   ebx,ebx
c001cdd7:	75 10                	jne    c001cde9 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001cdd9:	83 ec 0c             	sub    esp,0xc
c001cddc:	68 ec ae 02 c0       	push   0xc002aeec
c001cde1:	e8 99 ce ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001cde6:	83 c4 10             	add    esp,0x10
c001cde9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001cded:	89 d8                	mov    eax,ebx
c001cdef:	5a                   	pop    edx
c001cdf0:	5b                   	pop    ebx
c001cdf1:	5e                   	pop    esi
c001cdf2:	ff e0                	jmp    eax

c001cdf4 <changeTSS>:
c001cdf4:	83 ec 14             	sub    esp,0x14
c001cdf7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cdfc:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001cdff:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001ce04:	c1 e2 15             	shl    edx,0x15
c001ce07:	29 d0                	sub    eax,edx
c001ce09:	50                   	push   eax
c001ce0a:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c001ce0f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ce15:	05 7c 11 00 00       	add    eax,0x117c
c001ce1a:	50                   	push   eax
c001ce1b:	e8 58 44 ff ff       	call   c0011278 <TSS::setESP(unsigned long)>
c001ce20:	83 c4 1c             	add    esp,0x1c
c001ce23:	c3                   	ret    

c001ce24 <Process::addArgs(char**)>:
c001ce24:	57                   	push   edi
c001ce25:	56                   	push   esi
c001ce26:	53                   	push   ebx
c001ce27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ce2b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ce2f:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001ce39:	85 ff                	test   edi,edi
c001ce3b:	74 3d                	je     c001ce7a <Process::addArgs(char**)+0x56>
c001ce3d:	8b 07                	mov    eax,DWORD PTR [edi]
c001ce3f:	85 c0                	test   eax,eax
c001ce41:	74 37                	je     c001ce7a <Process::addArgs(char**)+0x56>
c001ce43:	31 db                	xor    ebx,ebx
c001ce45:	83 ec 0c             	sub    esp,0xc
c001ce48:	50                   	push   eax
c001ce49:	e8 93 38 fe ff       	call   c00006e1 <strlen>
c001ce4e:	40                   	inc    eax
c001ce4f:	89 04 24             	mov    DWORD PTR [esp],eax
c001ce52:	e8 03 28 ff ff       	call   c000f65a <malloc>
c001ce57:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001ce5e:	5a                   	pop    edx
c001ce5f:	59                   	pop    ecx
c001ce60:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001ce63:	43                   	inc    ebx
c001ce64:	50                   	push   eax
c001ce65:	e8 f9 38 fe ff       	call   c0000763 <strcpy>
c001ce6a:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001ce70:	83 c4 10             	add    esp,0x10
c001ce73:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001ce76:	85 c0                	test   eax,eax
c001ce78:	75 cb                	jne    c001ce45 <Process::addArgs(char**)+0x21>
c001ce7a:	5b                   	pop    ebx
c001ce7b:	5e                   	pop    esi
c001ce7c:	5f                   	pop    edi
c001ce7d:	c3                   	ret    

c001ce7e <Process::Process(char const*, Process*, char**)>:
c001ce7e:	56                   	push   esi
c001ce7f:	53                   	push   ebx
c001ce80:	83 ec 14             	sub    esp,0x14
c001ce83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce87:	05 0c 02 00 00       	add    eax,0x20c
c001ce8c:	bb 07 00 00 00       	mov    ebx,0x7
c001ce91:	89 c6                	mov    esi,eax
c001ce93:	85 db                	test   ebx,ebx
c001ce95:	78 12                	js     c001cea9 <Process::Process(char const*, Process*, char**)+0x2b>
c001ce97:	83 ec 0c             	sub    esp,0xc
c001ce9a:	56                   	push   esi
c001ce9b:	e8 b2 ac 00 00       	call   c0027b52 <ThreadControlBlock::ThreadControlBlock()>
c001cea0:	83 c4 10             	add    esp,0x10
c001cea3:	83 c6 63             	add    esi,0x63
c001cea6:	4b                   	dec    ebx
c001cea7:	eb ea                	jmp    c001ce93 <Process::Process(char const*, Process*, char**)+0x15>
c001cea9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cead:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001ceb4:	83 ec 0c             	sub    esp,0xc
c001ceb7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cebb:	e8 10 cc ff ff       	call   c0019ad0 <Krnl::newProcessEnv(Process*)>
c001cec0:	83 c4 10             	add    esp,0x10
c001cec3:	89 c2                	mov    edx,eax
c001cec5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cec9:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001cecf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ced3:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001cedc:	a1 70 c6 02 c0       	mov    eax,ds:0xc002c670
c001cee1:	8d 50 01             	lea    edx,[eax+0x1]
c001cee4:	89 15 70 c6 02 c0    	mov    DWORD PTR ds:0xc002c670,edx
c001ceea:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ceee:	89 02                	mov    DWORD PTR [edx],eax
c001cef0:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001cef8:	83 ec 0c             	sub    esp,0xc
c001cefb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ceff:	e8 56 27 ff ff       	call   c000f65a <malloc>
c001cf04:	83 c4 10             	add    esp,0x10
c001cf07:	89 c3                	mov    ebx,eax
c001cf09:	83 ec 08             	sub    esp,0x8
c001cf0c:	6a 00                	push   0x0
c001cf0e:	53                   	push   ebx
c001cf0f:	e8 98 55 ff ff       	call   c00124ac <VAS::VAS(bool)>
c001cf14:	83 c4 10             	add    esp,0x10
c001cf17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf1b:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001cf21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf25:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001cf2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf33:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cf37:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001cf3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf41:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cf47:	85 c0                	test   eax,eax
c001cf49:	74 42                	je     c001cf8d <Process::Process(char const*, Process*, char**)+0x10f>
c001cf4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf4f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cf55:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001cf5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf5f:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001cf65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf69:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cf6f:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001cf75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf79:	05 0c 01 00 00       	add    eax,0x10c
c001cf7e:	83 ec 08             	sub    esp,0x8
c001cf81:	52                   	push   edx
c001cf82:	50                   	push   eax
c001cf83:	e8 db 37 fe ff       	call   c0000763 <strcpy>
c001cf88:	83 c4 10             	add    esp,0x10
c001cf8b:	eb 63                	jmp    c001cff0 <Process::Process(char const*, Process*, char**)+0x172>
c001cf8d:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001cf95:	83 ec 0c             	sub    esp,0xc
c001cf98:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cf9c:	e8 b9 26 ff ff       	call   c000f65a <malloc>
c001cfa1:	83 c4 10             	add    esp,0x10
c001cfa4:	89 c3                	mov    ebx,eax
c001cfa6:	83 ec 08             	sub    esp,0x8
c001cfa9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cfad:	53                   	push   ebx
c001cfae:	e8 c3 3f ff ff       	call   c0010f76 <VgaText::VgaText(char const*)>
c001cfb3:	83 c4 10             	add    esp,0x10
c001cfb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfba:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001cfc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfc4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cfca:	83 ec 0c             	sub    esp,0xc
c001cfcd:	50                   	push   eax
c001cfce:	e8 96 33 ff ff       	call   c0010369 <addToTerminalCycle(VgaText*)>
c001cfd3:	83 c4 10             	add    esp,0x10
c001cfd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfda:	05 0c 01 00 00       	add    eax,0x10c
c001cfdf:	83 ec 08             	sub    esp,0x8
c001cfe2:	68 16 af 02 c0       	push   0xc002af16
c001cfe7:	50                   	push   eax
c001cfe8:	e8 76 37 fe ff       	call   c0000763 <strcpy>
c001cfed:	83 c4 10             	add    esp,0x10
c001cff0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cff4:	83 c0 0c             	add    eax,0xc
c001cff7:	83 ec 08             	sub    esp,0x8
c001cffa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cffe:	50                   	push   eax
c001cfff:	e8 5f 37 fe ff       	call   c0000763 <strcpy>
c001d004:	83 c4 10             	add    esp,0x10
c001d007:	83 ec 08             	sub    esp,0x8
c001d00a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d00e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d012:	e8 0d fe ff ff       	call   c001ce24 <Process::addArgs(char**)>
c001d017:	83 c4 10             	add    esp,0x10
c001d01a:	83 ec 08             	sub    esp,0x8
c001d01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d021:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d025:	e8 be ee ff ff       	call   c001bee8 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d02a:	83 c4 10             	add    esp,0x10
c001d02d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d031:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d035:	83 f0 01             	xor    eax,0x1
c001d038:	88 c2                	mov    dl,al
c001d03a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d03e:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d044:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d049:	83 ec 08             	sub    esp,0x8
c001d04c:	50                   	push   eax
c001d04d:	68 14 b0 02 c0       	push   0xc002b014
c001d052:	e8 d2 58 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001d057:	83 c4 10             	add    esp,0x10
c001d05a:	90                   	nop
c001d05b:	83 c4 14             	add    esp,0x14
c001d05e:	5b                   	pop    ebx
c001d05f:	5e                   	pop    esi
c001d060:	c3                   	ret    
c001d061:	90                   	nop

c001d062 <Process::Process(bool, char const*, Process*, char**)>:
c001d062:	56                   	push   esi
c001d063:	53                   	push   ebx
c001d064:	83 ec 24             	sub    esp,0x24
c001d067:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d06b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d06f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d073:	05 0c 02 00 00       	add    eax,0x20c
c001d078:	bb 07 00 00 00       	mov    ebx,0x7
c001d07d:	89 c6                	mov    esi,eax
c001d07f:	85 db                	test   ebx,ebx
c001d081:	78 12                	js     c001d095 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d083:	83 ec 0c             	sub    esp,0xc
c001d086:	56                   	push   esi
c001d087:	e8 c6 aa 00 00       	call   c0027b52 <ThreadControlBlock::ThreadControlBlock()>
c001d08c:	83 c4 10             	add    esp,0x10
c001d08f:	83 c6 63             	add    esi,0x63
c001d092:	4b                   	dec    ebx
c001d093:	eb ea                	jmp    c001d07f <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d095:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d099:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d0a0:	83 ec 0c             	sub    esp,0xc
c001d0a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d0a7:	e8 24 ca ff ff       	call   c0019ad0 <Krnl::newProcessEnv(Process*)>
c001d0ac:	83 c4 10             	add    esp,0x10
c001d0af:	89 c2                	mov    edx,eax
c001d0b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d0b5:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d0bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d0bf:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d0c8:	a1 70 c6 02 c0       	mov    eax,ds:0xc002c670
c001d0cd:	8d 50 01             	lea    edx,[eax+0x1]
c001d0d0:	89 15 70 c6 02 c0    	mov    DWORD PTR ds:0xc002c670,edx
c001d0d6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d0da:	89 02                	mov    DWORD PTR [edx],eax
c001d0dc:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001d0e4:	83 ec 0c             	sub    esp,0xc
c001d0e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d0eb:	e8 6a 25 ff ff       	call   c000f65a <malloc>
c001d0f0:	83 c4 10             	add    esp,0x10
c001d0f3:	89 c3                	mov    ebx,eax
c001d0f5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d0fa:	83 ec 08             	sub    esp,0x8
c001d0fd:	50                   	push   eax
c001d0fe:	53                   	push   ebx
c001d0ff:	e8 a8 53 ff ff       	call   c00124ac <VAS::VAS(bool)>
c001d104:	83 c4 10             	add    esp,0x10
c001d107:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d10b:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d111:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d115:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d11f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d123:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d127:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d12d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d131:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d137:	85 c0                	test   eax,eax
c001d139:	74 42                	je     c001d17d <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d13b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d13f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d145:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d14b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d14f:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d155:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d159:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d15f:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d165:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d169:	05 0c 01 00 00       	add    eax,0x10c
c001d16e:	83 ec 08             	sub    esp,0x8
c001d171:	52                   	push   edx
c001d172:	50                   	push   eax
c001d173:	e8 eb 35 fe ff       	call   c0000763 <strcpy>
c001d178:	83 c4 10             	add    esp,0x10
c001d17b:	eb 63                	jmp    c001d1e0 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d17d:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001d185:	83 ec 0c             	sub    esp,0xc
c001d188:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d18c:	e8 c9 24 ff ff       	call   c000f65a <malloc>
c001d191:	83 c4 10             	add    esp,0x10
c001d194:	89 c3                	mov    ebx,eax
c001d196:	83 ec 08             	sub    esp,0x8
c001d199:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d19d:	53                   	push   ebx
c001d19e:	e8 d3 3d ff ff       	call   c0010f76 <VgaText::VgaText(char const*)>
c001d1a3:	83 c4 10             	add    esp,0x10
c001d1a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d1aa:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d1b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d1b4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d1ba:	83 ec 0c             	sub    esp,0xc
c001d1bd:	50                   	push   eax
c001d1be:	e8 a6 31 ff ff       	call   c0010369 <addToTerminalCycle(VgaText*)>
c001d1c3:	83 c4 10             	add    esp,0x10
c001d1c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d1ca:	05 0c 01 00 00       	add    eax,0x10c
c001d1cf:	83 ec 08             	sub    esp,0x8
c001d1d2:	68 16 af 02 c0       	push   0xc002af16
c001d1d7:	50                   	push   eax
c001d1d8:	e8 86 35 fe ff       	call   c0000763 <strcpy>
c001d1dd:	83 c4 10             	add    esp,0x10
c001d1e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d1e4:	83 c0 0c             	add    eax,0xc
c001d1e7:	83 ec 08             	sub    esp,0x8
c001d1ea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d1ee:	50                   	push   eax
c001d1ef:	e8 6f 35 fe ff       	call   c0000763 <strcpy>
c001d1f4:	83 c4 10             	add    esp,0x10
c001d1f7:	83 ec 08             	sub    esp,0x8
c001d1fa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d1fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d202:	e8 1d fc ff ff       	call   c001ce24 <Process::addArgs(char**)>
c001d207:	83 c4 10             	add    esp,0x10
c001d20a:	90                   	nop
c001d20b:	83 c4 24             	add    esp,0x24
c001d20e:	5b                   	pop    ebx
c001d20f:	5e                   	pop    esi
c001d210:	c3                   	ret    

c001d211 <disableIRQs()>:
c001d211:	fa                   	cli    
c001d212:	ff 05 0c e6 02 c0    	inc    DWORD PTR ds:0xc002e60c
c001d218:	c3                   	ret    

c001d219 <getIRQNestingLevel()>:
c001d219:	a1 0c e6 02 c0       	mov    eax,ds:0xc002e60c
c001d21e:	c3                   	ret    

c001d21f <enableIRQs()>:
c001d21f:	a1 0c e6 02 c0       	mov    eax,ds:0xc002e60c
c001d224:	48                   	dec    eax
c001d225:	a3 0c e6 02 c0       	mov    ds:0xc002e60c,eax
c001d22a:	75 01                	jne    c001d22d <enableIRQs()+0xe>
c001d22c:	fb                   	sti    
c001d22d:	c3                   	ret    

c001d22e <lockScheduler()>:
c001d22e:	eb e1                	jmp    c001d211 <disableIRQs()>

c001d230 <unlockScheduler()>:
c001d230:	eb ed                	jmp    c001d21f <enableIRQs()>

c001d232 <userModeEntryPoint(void*)>:
c001d232:	83 ec 0c             	sub    esp,0xc
c001d235:	e8 f6 ff ff ff       	call   c001d230 <unlockScheduler()>
c001d23a:	fb                   	sti    
c001d23b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d240:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d243:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d249:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d24d:	83 c4 0c             	add    esp,0xc
c001d250:	e9 d5 30 fe ff       	jmp    c000032a <goToUsermode>

c001d255 <lockStuff()>:
c001d255:	e8 b7 ff ff ff       	call   c001d211 <disableIRQs()>
c001d25a:	ff 05 08 e6 02 c0    	inc    DWORD PTR ds:0xc002e608
c001d260:	c3                   	ret    

c001d261 <taskStartupFunction>:
c001d261:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d266:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d269:	c3                   	ret    

c001d26a <updateTimeUsed()>:
c001d26a:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c001d26f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d275:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d27c:	74 50                	je     c001d2ce <updateTimeUsed()+0x64>
c001d27e:	57                   	push   edi
c001d27f:	56                   	push   esi
c001d280:	53                   	push   ebx
c001d281:	0f 31                	rdtsc  
c001d283:	89 c1                	mov    ecx,eax
c001d285:	a3 48 e6 02 c0       	mov    ds:0xc002e648,eax
c001d28a:	2b 0d 38 e6 02 c0    	sub    ecx,DWORD PTR ds:0xc002e638
c001d290:	89 d3                	mov    ebx,edx
c001d292:	89 0d 40 e6 02 c0    	mov    DWORD PTR ds:0xc002e640,ecx
c001d298:	1b 1d 3c e6 02 c0    	sbb    ebx,DWORD PTR ds:0xc002e63c
c001d29e:	a3 38 e6 02 c0       	mov    ds:0xc002e638,eax
c001d2a3:	89 1d 44 e6 02 c0    	mov    DWORD PTR ds:0xc002e644,ebx
c001d2a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d2ae:	89 15 4c e6 02 c0    	mov    DWORD PTR ds:0xc002e64c,edx
c001d2b4:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001d2b7:	89 15 3c e6 02 c0    	mov    DWORD PTR ds:0xc002e63c,edx
c001d2bd:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001d2c0:	01 f1                	add    ecx,esi
c001d2c2:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001d2c5:	11 fb                	adc    ebx,edi
c001d2c7:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001d2ca:	5b                   	pop    ebx
c001d2cb:	5e                   	pop    esi
c001d2cc:	5f                   	pop    edi
c001d2cd:	c3                   	ret    
c001d2ce:	c3                   	ret    

c001d2cf <switchToThread(ThreadControlBlock*)>:
c001d2cf:	53                   	push   ebx
c001d2d0:	83 ec 08             	sub    esp,0x8
c001d2d3:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001d2d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d2dc:	85 c0                	test   eax,eax
c001d2de:	75 30                	jne    c001d310 <switchToThread(ThreadControlBlock*)+0x41>
c001d2e0:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001d2e3:	3c ff                	cmp    al,0xff
c001d2e5:	74 25                	je     c001d30c <switchToThread(ThreadControlBlock*)+0x3d>
c001d2e7:	0f b6 d0             	movzx  edx,al
c001d2ea:	b8 84 03 00 00       	mov    eax,0x384
c001d2ef:	29 d0                	sub    eax,edx
c001d2f1:	c1 e0 10             	shl    eax,0x10
c001d2f4:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001d2f7:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001d2fa:	e8 6b ff ff ff       	call   c001d26a <updateTimeUsed()>
c001d2ff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001d303:	83 c4 08             	add    esp,0x8
c001d306:	5b                   	pop    ebx
c001d307:	e9 56 30 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d30c:	31 c0                	xor    eax,eax
c001d30e:	eb e7                	jmp    c001d2f7 <switchToThread(ThreadControlBlock*)+0x28>
c001d310:	c7 05 04 e6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002e604,0x1
c001d31a:	83 c4 08             	add    esp,0x8
c001d31d:	5b                   	pop    ebx
c001d31e:	c3                   	ret    
c001d31f:	90                   	nop

c001d320 <Semaphore::Semaphore(int)>:
c001d320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d324:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d328:	89 10                	mov    DWORD PTR [eax],edx
c001d32a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d32e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d335:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d339:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d344:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d34b:	90                   	nop
c001d34c:	c3                   	ret    
c001d34d:	90                   	nop

c001d34e <Mutex::Mutex()>:
c001d34e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d352:	6a 01                	push   0x1
c001d354:	50                   	push   eax
c001d355:	e8 c6 ff ff ff       	call   c001d320 <Semaphore::Semaphore(int)>
c001d35a:	83 c4 08             	add    esp,0x8
c001d35d:	90                   	nop
c001d35e:	c3                   	ret    
c001d35f:	90                   	nop

c001d360 <Process::createThread(void (*)(void*), void*, int)>:
c001d360:	55                   	push   ebp
c001d361:	31 c9                	xor    ecx,ecx
c001d363:	57                   	push   edi
c001d364:	56                   	push   esi
c001d365:	53                   	push   ebx
c001d366:	83 ec 1c             	sub    esp,0x1c
c001d369:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d36d:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d374:	89 f2                	mov    edx,esi
c001d376:	0f b7 c2             	movzx  eax,dx
c001d379:	83 e2 01             	and    edx,0x1
c001d37c:	74 14                	je     c001d392 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001d37e:	d1 f8                	sar    eax,1
c001d380:	41                   	inc    ecx
c001d381:	89 c2                	mov    edx,eax
c001d383:	83 f9 10             	cmp    ecx,0x10
c001d386:	75 ee                	jne    c001d376 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d388:	83 c4 1c             	add    esp,0x1c
c001d38b:	31 c0                	xor    eax,eax
c001d38d:	5b                   	pop    ebx
c001d38e:	5e                   	pop    esi
c001d38f:	5f                   	pop    edi
c001d390:	5d                   	pop    ebp
c001d391:	c3                   	ret    
c001d392:	83 ec 08             	sub    esp,0x8
c001d395:	b8 01 00 00 00       	mov    eax,0x1
c001d39a:	d3 e0                	shl    eax,cl
c001d39c:	09 c6                	or     esi,eax
c001d39e:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d3a4:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d3ab:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001d3ae:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d3b1:	01 ce                	add    esi,ecx
c001d3b3:	89 f0                	mov    eax,esi
c001d3b5:	c1 e0 05             	shl    eax,0x5
c001d3b8:	01 c6                	add    esi,eax
c001d3ba:	8d 04 33             	lea    eax,[ebx+esi*1]
c001d3bd:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001d3c3:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d3c9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001d3cd:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d3d3:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001d3d9:	89 ca                	mov    edx,ecx
c001d3db:	f7 da                	neg    edx
c001d3dd:	c1 e2 15             	shl    edx,0x15
c001d3e0:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001d3e6:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001d3ec:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d3f0:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d3fa:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d400:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d404:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001d40a:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d414:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d41e:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001d425:	50                   	push   eax
c001d426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d42a:	68 28 e6 02 c0       	push   0xc002e628
c001d42f:	e8 ac a5 00 00       	call   c00279e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d434:	83 c4 10             	add    esp,0x10
c001d437:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d43b:	83 c4 1c             	add    esp,0x1c
c001d43e:	5b                   	pop    ebx
c001d43f:	5e                   	pop    esi
c001d440:	5f                   	pop    edi
c001d441:	5d                   	pop    ebp
c001d442:	c3                   	ret    
c001d443:	90                   	nop

c001d444 <Process::createUserThread()>:
c001d444:	83 ec 0c             	sub    esp,0xc
c001d447:	68 80 00 00 00       	push   0x80
c001d44c:	6a 00                	push   0x0
c001d44e:	68 32 d2 01 c0       	push   0xc001d232
c001d453:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d457:	e8 04 ff ff ff       	call   c001d360 <Process::createThread(void (*)(void*), void*, int)>
c001d45c:	83 c4 1c             	add    esp,0x1c
c001d45f:	c3                   	ret    

c001d460 <setupMultitasking(void (*)())>:
c001d460:	56                   	push   esi
c001d461:	53                   	push   ebx
c001d462:	53                   	push   ebx
c001d463:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d467:	eb 10                	jmp    c001d479 <setupMultitasking(void (*)())+0x19>
c001d469:	83 ec 0c             	sub    esp,0xc
c001d46c:	68 28 e6 02 c0       	push   0xc002e628
c001d471:	e8 bc a4 00 00       	call   c0027932 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d476:	83 c4 10             	add    esp,0x10
c001d479:	83 ec 0c             	sub    esp,0xc
c001d47c:	68 28 e6 02 c0       	push   0xc002e628
c001d481:	e8 90 a4 00 00       	call   c0027916 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d486:	83 c4 10             	add    esp,0x10
c001d489:	84 c0                	test   al,al
c001d48b:	74 dc                	je     c001d469 <setupMultitasking(void (*)())+0x9>
c001d48d:	83 ec 0c             	sub    esp,0xc
c001d490:	68 3f 07 00 00       	push   0x73f
c001d495:	e8 c0 21 ff ff       	call   c000f65a <malloc>
c001d49a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d4a1:	89 c3                	mov    ebx,eax
c001d4a3:	6a 00                	push   0x0
c001d4a5:	68 1a af 02 c0       	push   0xc002af1a
c001d4aa:	6a 01                	push   0x1
c001d4ac:	50                   	push   eax
c001d4ad:	e8 b0 fb ff ff       	call   c001d062 <Process::Process(bool, char const*, Process*, char**)>
c001d4b2:	83 c4 18             	add    esp,0x18
c001d4b5:	89 1d 34 e6 02 c0    	mov    DWORD PTR ds:0xc002e634,ebx
c001d4bb:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d4c1:	68 3c b0 02 c0       	push   0xc002b03c
c001d4c6:	e8 5e 54 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001d4cb:	58                   	pop    eax
c001d4cc:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d4d2:	e8 14 36 ff ff       	call   c0010aeb <setActiveTerminal(VgaText*)>
c001d4d7:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d4df:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d4e5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d4e8:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d4f2:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d4f8:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d4fe:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d508:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d512:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d51c:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d522:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d528:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d532:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d538:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d542:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d548:	5a                   	pop    edx
c001d549:	59                   	pop    ecx
c001d54a:	68 16 af 02 c0       	push   0xc002af16
c001d54f:	50                   	push   eax
c001d550:	e8 0e 32 fe ff       	call   c0000763 <strcpy>
c001d555:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d55c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d560:	83 c4 14             	add    esp,0x14
c001d563:	5b                   	pop    ebx
c001d564:	5e                   	pop    esi
c001d565:	e9 ea 2d fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d56a <schedule()>:
c001d56a:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001d56f:	85 c0                	test   eax,eax
c001d571:	74 0b                	je     c001d57e <schedule()+0x14>
c001d573:	c7 05 04 e6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002e604,0x1
c001d57d:	c3                   	ret    
c001d57e:	53                   	push   ebx
c001d57f:	83 ec 14             	sub    esp,0x14
c001d582:	68 28 e6 02 c0       	push   0xc002e628
c001d587:	e8 8a a3 00 00       	call   c0027916 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d58c:	83 c4 10             	add    esp,0x10
c001d58f:	84 c0                	test   al,al
c001d591:	75 38                	jne    c001d5cb <schedule()+0x61>
c001d593:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d598:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d59b:	4a                   	dec    edx
c001d59c:	74 32                	je     c001d5d0 <schedule()+0x66>
c001d59e:	83 ec 0c             	sub    esp,0xc
c001d5a1:	68 28 e6 02 c0       	push   0xc002e628
c001d5a6:	e8 63 a3 00 00       	call   c002790e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d5ab:	c7 04 24 28 e6 02 c0 	mov    DWORD PTR [esp],0xc002e628
c001d5b2:	89 c3                	mov    ebx,eax
c001d5b4:	e8 79 a3 00 00       	call   c0027932 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d5b9:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d5c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d5c3:	e8 07 fd ff ff       	call   c001d2cf <switchToThread(ThreadControlBlock*)>
c001d5c8:	83 c4 10             	add    esp,0x10
c001d5cb:	83 c4 08             	add    esp,0x8
c001d5ce:	5b                   	pop    ebx
c001d5cf:	c3                   	ret    
c001d5d0:	83 ec 08             	sub    esp,0x8
c001d5d3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d5da:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d5e0:	68 28 e6 02 c0       	push   0xc002e628
c001d5e5:	e8 f6 a3 00 00       	call   c00279e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d5ea:	83 c4 10             	add    esp,0x10
c001d5ed:	eb af                	jmp    c001d59e <schedule()+0x34>

c001d5ef <unlockStuff()>:
c001d5ef:	a1 08 e6 02 c0       	mov    eax,ds:0xc002e608
c001d5f4:	48                   	dec    eax
c001d5f5:	a3 08 e6 02 c0       	mov    ds:0xc002e608,eax
c001d5fa:	75 09                	jne    c001d605 <unlockStuff()+0x16>
c001d5fc:	a1 04 e6 02 c0       	mov    eax,ds:0xc002e604
c001d601:	85 c0                	test   eax,eax
c001d603:	75 05                	jne    c001d60a <unlockStuff()+0x1b>
c001d605:	e9 15 fc ff ff       	jmp    c001d21f <enableIRQs()>
c001d60a:	83 ec 0c             	sub    esp,0xc
c001d60d:	c7 05 04 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e604,0x0
c001d617:	e8 4e ff ff ff       	call   c001d56a <schedule()>
c001d61c:	83 c4 0c             	add    esp,0xc
c001d61f:	e9 fb fb ff ff       	jmp    c001d21f <enableIRQs()>

c001d624 <Semaphore::tryAcquire()>:
c001d624:	83 ec 0c             	sub    esp,0xc
c001d627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d62b:	e8 25 fc ff ff       	call   c001d255 <lockStuff()>
c001d630:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d633:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d635:	7c 0b                	jl     c001d642 <Semaphore::tryAcquire()+0x1e>
c001d637:	e8 b3 ff ff ff       	call   c001d5ef <unlockStuff()>
c001d63c:	31 c0                	xor    eax,eax
c001d63e:	83 c4 0c             	add    esp,0xc
c001d641:	c3                   	ret    
c001d642:	42                   	inc    edx
c001d643:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d646:	e8 a4 ff ff ff       	call   c001d5ef <unlockStuff()>
c001d64b:	b0 01                	mov    al,0x1
c001d64d:	83 c4 0c             	add    esp,0xc
c001d650:	c3                   	ret    
c001d651:	90                   	nop

c001d652 <Semaphore::assertLocked(char const*)>:
c001d652:	83 ec 0c             	sub    esp,0xc
c001d655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d659:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d65d:	e8 f3 fb ff ff       	call   c001d255 <lockStuff()>
c001d662:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d664:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001d667:	7c 05                	jl     c001d66e <Semaphore::assertLocked(char const*)+0x1c>
c001d669:	83 c4 0c             	add    esp,0xc
c001d66c:	eb 81                	jmp    c001d5ef <unlockStuff()>
c001d66e:	83 ec 0c             	sub    esp,0xc
c001d671:	52                   	push   edx
c001d672:	e8 08 c6 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001d677:	83 c4 10             	add    esp,0x10
c001d67a:	83 c4 0c             	add    esp,0xc
c001d67d:	e9 6d ff ff ff       	jmp    c001d5ef <unlockStuff()>

c001d682 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d682:	83 ec 0c             	sub    esp,0xc
c001d685:	e8 8f fb ff ff       	call   c001d219 <getIRQNestingLevel()>
c001d68a:	83 ec 08             	sub    esp,0x8
c001d68d:	50                   	push   eax
c001d68e:	68 70 b0 02 c0       	push   0xc002b070
c001d693:	e8 91 52 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001d698:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d69c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6a1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d6a4:	e8 c1 fe ff ff       	call   c001d56a <schedule()>
c001d6a9:	e8 82 fb ff ff       	call   c001d230 <unlockScheduler()>
c001d6ae:	e8 66 fb ff ff       	call   c001d219 <getIRQNestingLevel()>
c001d6b3:	5a                   	pop    edx
c001d6b4:	59                   	pop    ecx
c001d6b5:	50                   	push   eax
c001d6b6:	68 a4 b0 02 c0       	push   0xc002b0a4
c001d6bb:	e8 69 52 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001d6c0:	83 c4 1c             	add    esp,0x1c
c001d6c3:	c3                   	ret    

c001d6c4 <blockTask(TaskState)>:
c001d6c4:	83 ec 0c             	sub    esp,0xc
c001d6c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d6cb:	e8 5e fb ff ff       	call   c001d22e <lockScheduler()>
c001d6d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6d5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d6d8:	e8 8d fe ff ff       	call   c001d56a <schedule()>
c001d6dd:	83 c4 0c             	add    esp,0xc
c001d6e0:	e9 4b fb ff ff       	jmp    c001d230 <unlockScheduler()>

c001d6e5 <waitTask(int, int*, int)>:
c001d6e5:	83 ec 18             	sub    esp,0x18
c001d6e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d6f1:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d6f4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d6f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6fd:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d700:	6a 07                	push   0x7
c001d702:	e8 bd ff ff ff       	call   c001d6c4 <blockTask(TaskState)>
c001d707:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d70c:	83 c4 10             	add    esp,0x10
c001d70f:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d712:	85 d2                	test   edx,edx
c001d714:	74 0a                	je     c001d720 <waitTask(int, int*, int)+0x3b>
c001d716:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001d719:	89 02                	mov    DWORD PTR [edx],eax
c001d71b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d720:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001d723:	83 c4 0c             	add    esp,0xc
c001d726:	c3                   	ret    

c001d727 <nanoSleepUntil(unsigned long long)>:
c001d727:	83 ec 0c             	sub    esp,0xc
c001d72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d72e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d732:	3b 05 70 d7 02 c0    	cmp    eax,DWORD PTR ds:0xc002d770
c001d738:	89 d1                	mov    ecx,edx
c001d73a:	1b 0d 74 d7 02 c0    	sbb    ecx,DWORD PTR ds:0xc002d774
c001d740:	73 04                	jae    c001d746 <nanoSleepUntil(unsigned long long)+0x1f>
c001d742:	83 c4 0c             	add    esp,0xc
c001d745:	c3                   	ret    
c001d746:	e8 0a fb ff ff       	call   c001d255 <lockStuff()>
c001d74b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d751:	83 ec 08             	sub    esp,0x8
c001d754:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001d757:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001d75a:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d760:	68 1c e6 02 c0       	push   0xc002e61c
c001d765:	e8 76 a2 00 00       	call   c00279e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d76a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001d771:	e8 4e ff ff ff       	call   c001d6c4 <blockTask(TaskState)>
c001d776:	83 c4 1c             	add    esp,0x1c
c001d779:	e9 71 fe ff ff       	jmp    c001d5ef <unlockStuff()>

c001d77e <nanoSleep(unsigned long long)>:
c001d77e:	a1 70 d7 02 c0       	mov    eax,ds:0xc002d770
c001d783:	8b 15 74 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d774
c001d789:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001d78d:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001d791:	eb 94                	jmp    c001d727 <nanoSleepUntil(unsigned long long)>

c001d793 <sleep(unsigned long long)>:
c001d793:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001d79b:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001d7a0:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001d7a4:	01 ca                	add    edx,ecx
c001d7a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d7aa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d7ae:	eb ce                	jmp    c001d77e <nanoSleep(unsigned long long)>

c001d7b0 <Semaphore::acquire()>:
c001d7b0:	83 ec 0c             	sub    esp,0xc
c001d7b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7b7:	e8 99 fa ff ff       	call   c001d255 <lockStuff()>
c001d7bc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d7bf:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d7c1:	7d 0c                	jge    c001d7cf <Semaphore::acquire()+0x1f>
c001d7c3:	42                   	inc    edx
c001d7c4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d7c7:	83 c4 0c             	add    esp,0xc
c001d7ca:	e9 20 fe ff ff       	jmp    c001d5ef <unlockStuff()>
c001d7cf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d7d5:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001d7dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d7df:	85 d2                	test   edx,edx
c001d7e1:	74 2a                	je     c001d80d <Semaphore::acquire()+0x5d>
c001d7e3:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001d7e6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d7ec:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001d7ef:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d7f5:	83 ec 0c             	sub    esp,0xc
c001d7f8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d7fb:	6a 05                	push   0x5
c001d7fd:	e8 c2 fe ff ff       	call   c001d6c4 <blockTask(TaskState)>
c001d802:	83 c4 10             	add    esp,0x10
c001d805:	83 c4 0c             	add    esp,0xc
c001d808:	e9 e2 fd ff ff       	jmp    c001d5ef <unlockStuff()>
c001d80d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d813:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d816:	eb d7                	jmp    c001d7ef <Semaphore::acquire()+0x3f>

c001d818 <taskReturned>:
c001d818:	83 ec 18             	sub    esp,0x18
c001d81b:	68 d8 b0 02 c0       	push   0xc002b0d8
c001d820:	e8 5a c4 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001d825:	83 c4 10             	add    esp,0x10
c001d828:	83 ec 0c             	sub    esp,0xc
c001d82b:	6a 02                	push   0x2
c001d82d:	e8 92 fe ff ff       	call   c001d6c4 <blockTask(TaskState)>
c001d832:	e8 f7 f9 ff ff       	call   c001d22e <lockScheduler()>
c001d837:	e8 2e fd ff ff       	call   c001d56a <schedule()>
c001d83c:	e8 ef f9 ff ff       	call   c001d230 <unlockScheduler()>
c001d841:	83 c4 10             	add    esp,0x10
c001d844:	eb e2                	jmp    c001d828 <taskReturned+0x10>

c001d846 <unblockTask(ThreadControlBlock*)>:
c001d846:	53                   	push   ebx
c001d847:	83 ec 08             	sub    esp,0x8
c001d84a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d84e:	e8 db f9 ff ff       	call   c001d22e <lockScheduler()>
c001d853:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d856:	85 c0                	test   eax,eax
c001d858:	74 5c                	je     c001d8b6 <unblockTask(ThreadControlBlock*)+0x70>
c001d85a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d85d:	48                   	dec    eax
c001d85e:	74 31                	je     c001d891 <unblockTask(ThreadControlBlock*)+0x4b>
c001d860:	83 ec 0c             	sub    esp,0xc
c001d863:	68 28 e6 02 c0       	push   0xc002e628
c001d868:	e8 a1 a0 00 00       	call   c002790e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d86d:	83 c4 10             	add    esp,0x10
c001d870:	85 c0                	test   eax,eax
c001d872:	75 17                	jne    c001d88b <unblockTask(ThreadControlBlock*)+0x45>
c001d874:	eb 65                	jmp    c001d8db <unblockTask(ThreadControlBlock*)+0x95>
c001d876:	83 ec 08             	sub    esp,0x8
c001d879:	50                   	push   eax
c001d87a:	68 28 e6 02 c0       	push   0xc002e628
c001d87f:	e8 64 a3 00 00       	call   c0027be8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001d884:	83 c4 10             	add    esp,0x10
c001d887:	85 c0                	test   eax,eax
c001d889:	74 50                	je     c001d8db <unblockTask(ThreadControlBlock*)+0x95>
c001d88b:	39 c3                	cmp    ebx,eax
c001d88d:	75 e7                	jne    c001d876 <unblockTask(ThreadControlBlock*)+0x30>
c001d88f:	eb 1c                	jmp    c001d8ad <unblockTask(ThreadControlBlock*)+0x67>
c001d891:	83 ec 0c             	sub    esp,0xc
c001d894:	68 c8 b1 02 c0       	push   0xc002b1c8
c001d899:	e8 8b 50 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001d89e:	c7 04 24 54 b1 02 c0 	mov    DWORD PTR [esp],0xc002b154
c001d8a5:	e8 7f 50 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001d8aa:	83 c4 10             	add    esp,0x10
c001d8ad:	83 c4 08             	add    esp,0x8
c001d8b0:	5b                   	pop    ebx
c001d8b1:	e9 7a f9 ff ff       	jmp    c001d230 <unlockScheduler()>
c001d8b6:	83 ec 0c             	sub    esp,0xc
c001d8b9:	68 0c b1 02 c0       	push   0xc002b10c
c001d8be:	e8 66 50 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001d8c3:	c7 04 24 54 b1 02 c0 	mov    DWORD PTR [esp],0xc002b154
c001d8ca:	e8 5a 50 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001d8cf:	83 c4 10             	add    esp,0x10
c001d8d2:	83 c4 08             	add    esp,0x8
c001d8d5:	5b                   	pop    ebx
c001d8d6:	e9 55 f9 ff ff       	jmp    c001d230 <unlockScheduler()>
c001d8db:	83 ec 08             	sub    esp,0x8
c001d8de:	53                   	push   ebx
c001d8df:	68 28 e6 02 c0       	push   0xc002e628
c001d8e4:	e8 f7 a0 00 00       	call   c00279e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d8e9:	83 c4 10             	add    esp,0x10
c001d8ec:	83 c4 08             	add    esp,0x8
c001d8ef:	5b                   	pop    ebx
c001d8f0:	e9 3b f9 ff ff       	jmp    c001d230 <unlockScheduler()>

c001d8f5 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001d8f5:	55                   	push   ebp
c001d8f6:	57                   	push   edi
c001d8f7:	56                   	push   esi
c001d8f8:	53                   	push   ebx
c001d8f9:	83 ec 1c             	sub    esp,0x1c
c001d8fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d900:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d903:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001d909:	85 ff                	test   edi,edi
c001d90b:	7e 20                	jle    c001d92d <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001d90d:	31 f6                	xor    esi,esi
c001d90f:	83 ec 0c             	sub    esp,0xc
c001d912:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001d919:	46                   	inc    esi
c001d91a:	e8 4b 1d ff ff       	call   c000f66a <free>
c001d91f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d922:	83 c4 10             	add    esp,0x10
c001d925:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001d92b:	7f e2                	jg     c001d90f <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001d92d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d937:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001d93c:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001d93f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d942:	d3 c0                	rol    eax,cl
c001d944:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001d94b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d94e:	89 f7                	mov    edi,esi
c001d950:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001d958:	0f 85 74 01 00 00    	jne    c001dad2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001d95e:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001d964:	85 ed                	test   ebp,ebp
c001d966:	74 1b                	je     c001d983 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001d968:	83 ec 0c             	sub    esp,0xc
c001d96b:	55                   	push   ebp
c001d96c:	e8 7b c0 ff ff       	call   c00199ec <EnvVarContainer::~EnvVarContainer()>
c001d971:	59                   	pop    ecx
c001d972:	5e                   	pop    esi
c001d973:	6a 0c                	push   0xc
c001d975:	55                   	push   ebp
c001d976:	e8 ce 4e ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c001d97b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d97e:	83 c4 10             	add    esp,0x10
c001d981:	89 f7                	mov    edi,esi
c001d983:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d989:	85 c0                	test   eax,eax
c001d98b:	0f 84 aa 00 00 00    	je     c001da3b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d991:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001d994:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d998:	31 c9                	xor    ecx,ecx
c001d99a:	eb 10                	jmp    c001d9ac <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001d99c:	41                   	inc    ecx
c001d99d:	83 f9 10             	cmp    ecx,0x10
c001d9a0:	0f 84 95 00 00 00    	je     c001da3b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d9a6:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d9ac:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001d9b3:	d3 fa                	sar    edx,cl
c001d9b5:	83 e2 01             	and    edx,0x1
c001d9b8:	74 e2                	je     c001d99c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d9ba:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d9bd:	01 ca                	add    edx,ecx
c001d9bf:	89 d5                	mov    ebp,edx
c001d9c1:	c1 e5 05             	shl    ebp,0x5
c001d9c4:	01 ea                	add    edx,ebp
c001d9c6:	01 d0                	add    eax,edx
c001d9c8:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001d9ce:	83 fd 07             	cmp    ebp,0x7
c001d9d1:	75 c9                	jne    c001d99c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d9d3:	05 40 02 00 00       	add    eax,0x240
c001d9d8:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001d9db:	83 fd ff             	cmp    ebp,0xffffffff
c001d9de:	0f 8c 08 01 00 00    	jl     c001daec <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001d9e4:	0f 84 b9 01 00 00    	je     c001dba3 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001d9ea:	85 ed                	test   ebp,ebp
c001d9ec:	0f 84 a0 01 00 00    	je     c001db92 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001d9f2:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001d9f4:	75 a6                	jne    c001d99c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d9f6:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d9fc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001da00:	01 d0                	add    eax,edx
c001da02:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001da06:	83 ec 0c             	sub    esp,0xc
c001da09:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001da0f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001da12:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001da18:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001da1f:	50                   	push   eax
c001da20:	e8 21 fe ff ff       	call   c001d846 <unblockTask(ThreadControlBlock*)>
c001da25:	83 c4 10             	add    esp,0x10
c001da28:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001da2b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001da2f:	89 f7                	mov    edi,esi
c001da31:	41                   	inc    ecx
c001da32:	83 f9 10             	cmp    ecx,0x10
c001da35:	0f 85 6b ff ff ff    	jne    c001d9a6 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001da3b:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001da41:	85 c0                	test   eax,eax
c001da43:	74 5d                	je     c001daa2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001da45:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001da4b:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001da51:	74 4f                	je     c001daa2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001da53:	83 ec 0c             	sub    esp,0xc
c001da56:	68 28 e6 02 c0       	push   0xc002e628
c001da5b:	e8 ae 9e 00 00       	call   c002790e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001da60:	c7 04 24 28 e6 02 c0 	mov    DWORD PTR [esp],0xc002e628
c001da67:	89 c7                	mov    edi,eax
c001da69:	e8 a8 9e 00 00       	call   c0027916 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001da6e:	83 c4 10             	add    esp,0x10
c001da71:	84 c0                	test   al,al
c001da73:	0f 84 e4 00 00 00    	je     c001db5d <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001da79:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001da7c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001da82:	85 d2                	test   edx,edx
c001da84:	74 0f                	je     c001da95 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001da86:	83 ec 0c             	sub    esp,0xc
c001da89:	8b 02                	mov    eax,DWORD PTR [edx]
c001da8b:	52                   	push   edx
c001da8c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001da8f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001da92:	83 c4 10             	add    esp,0x10
c001da95:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001da9f:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001daa2:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001daa8:	85 db                	test   ebx,ebx
c001daaa:	74 16                	je     c001dac2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001daac:	83 ec 0c             	sub    esp,0xc
c001daaf:	53                   	push   ebx
c001dab0:	e8 e3 43 ff ff       	call   c0011e98 <VAS::~VAS()>
c001dab5:	58                   	pop    eax
c001dab6:	5a                   	pop    edx
c001dab7:	6a 10                	push   0x10
c001dab9:	53                   	push   ebx
c001daba:	e8 8a 4d ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c001dabf:	83 c4 10             	add    esp,0x10
c001dac2:	83 ec 0c             	sub    esp,0xc
c001dac5:	68 21 af 02 c0       	push   0xc002af21
c001daca:	e8 5a 4e ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001dacf:	83 c4 10             	add    esp,0x10
c001dad2:	83 ec 08             	sub    esp,0x8
c001dad5:	68 3f 07 00 00       	push   0x73f
c001dada:	68 2f af 02 c0       	push   0xc002af2f
c001dadf:	e8 45 4e ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001dae4:	83 c4 2c             	add    esp,0x2c
c001dae7:	5b                   	pop    ebx
c001dae8:	5e                   	pop    esi
c001dae9:	5f                   	pop    edi
c001daea:	5d                   	pop    ebp
c001daeb:	c3                   	ret    
c001daec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001daf0:	83 ec 0c             	sub    esp,0xc
c001daf3:	68 0c b2 02 c0       	push   0xc002b20c
c001daf8:	e8 82 c1 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001dafd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001db00:	83 c4 10             	add    esp,0x10
c001db03:	89 f7                	mov    edi,esi
c001db05:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001db09:	e9 8e fe ff ff       	jmp    c001d99c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001db0e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001db14:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001db1a:	75 1c                	jne    c001db38 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001db1c:	83 ec 0c             	sub    esp,0xc
c001db1f:	68 74 b2 02 c0       	push   0xc002b274
c001db24:	e8 00 4e ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001db29:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001db30:	e8 8f fb ff ff       	call   c001d6c4 <blockTask(TaskState)>
c001db35:	83 c4 10             	add    esp,0x10
c001db38:	83 ec 08             	sub    esp,0x8
c001db3b:	56                   	push   esi
c001db3c:	68 28 e6 02 c0       	push   0xc002e628
c001db41:	e8 9a 9e 00 00       	call   c00279e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001db46:	c7 04 24 28 e6 02 c0 	mov    DWORD PTR [esp],0xc002e628
c001db4d:	e8 bc 9d 00 00       	call   c002790e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001db52:	83 c4 10             	add    esp,0x10
c001db55:	39 f8                	cmp    eax,edi
c001db57:	0f 84 1c ff ff ff    	je     c001da79 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001db5d:	83 ec 0c             	sub    esp,0xc
c001db60:	68 28 e6 02 c0       	push   0xc002e628
c001db65:	e8 a4 9d 00 00       	call   c002790e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001db6a:	c7 04 24 28 e6 02 c0 	mov    DWORD PTR [esp],0xc002e628
c001db71:	89 c6                	mov    esi,eax
c001db73:	e8 ba 9d 00 00       	call   c0027932 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001db78:	83 c4 10             	add    esp,0x10
c001db7b:	39 f3                	cmp    ebx,esi
c001db7d:	74 b9                	je     c001db38 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001db7f:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001db82:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001db85:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001db8b:	75 ab                	jne    c001db38 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001db8d:	e9 7c ff ff ff       	jmp    c001db0e <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001db92:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001db96:	83 ec 0c             	sub    esp,0xc
c001db99:	68 40 b2 02 c0       	push   0xc002b240
c001db9e:	e9 55 ff ff ff       	jmp    c001daf8 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001dba3:	8b 36                	mov    esi,DWORD PTR [esi]
c001dba5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dba9:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001dbac:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dbaf:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001dbb5:	01 d7                	add    edi,edx
c001dbb7:	89 f8                	mov    eax,edi
c001dbb9:	e9 44 fe ff ff       	jmp    c001da02 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001dbbe <cleanerTaskFunction(void*)>:
c001dbbe:	53                   	push   ebx
c001dbbf:	83 ec 08             	sub    esp,0x8
c001dbc2:	e8 69 f6 ff ff       	call   c001d230 <unlockScheduler()>
c001dbc7:	e8 62 f6 ff ff       	call   c001d22e <lockScheduler()>
c001dbcc:	80 3d ec e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5ec,0x0
c001dbd3:	0f 85 8e 00 00 00    	jne    c001dc67 <cleanerTaskFunction(void*)+0xa9>
c001dbd9:	83 ec 0c             	sub    esp,0xc
c001dbdc:	6a 02                	push   0x2
c001dbde:	e8 9f fa ff ff       	call   c001d682 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001dbe3:	83 c4 10             	add    esp,0x10
c001dbe6:	c6 05 ec e5 02 c0 00 	mov    BYTE PTR ds:0xc002e5ec,0x0
c001dbed:	e8 63 f6 ff ff       	call   c001d255 <lockStuff()>
c001dbf2:	e8 37 f6 ff ff       	call   c001d22e <lockScheduler()>
c001dbf7:	83 ec 0c             	sub    esp,0xc
c001dbfa:	68 10 e6 02 c0       	push   0xc002e610
c001dbff:	e8 12 9d 00 00       	call   c0027916 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dc04:	83 c4 10             	add    esp,0x10
c001dc07:	84 c0                	test   al,al
c001dc09:	75 40                	jne    c001dc4b <cleanerTaskFunction(void*)+0x8d>
c001dc0b:	83 ec 0c             	sub    esp,0xc
c001dc0e:	68 10 e6 02 c0       	push   0xc002e610
c001dc13:	e8 f6 9c 00 00       	call   c002790e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dc18:	c7 04 24 10 e6 02 c0 	mov    DWORD PTR [esp],0xc002e610
c001dc1f:	89 c3                	mov    ebx,eax
c001dc21:	e8 0c 9d 00 00       	call   c0027932 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dc26:	c7 04 24 45 af 02 c0 	mov    DWORD PTR [esp],0xc002af45
c001dc2d:	e8 f7 4c ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001dc32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc35:	e8 bb fc ff ff       	call   c001d8f5 <cleanupTerminatedTask(ThreadControlBlock*)>
c001dc3a:	c7 04 24 5e af 02 c0 	mov    DWORD PTR [esp],0xc002af5e
c001dc41:	e8 e3 4c ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001dc46:	83 c4 10             	add    esp,0x10
c001dc49:	eb ac                	jmp    c001dbf7 <cleanerTaskFunction(void*)+0x39>
c001dc4b:	e8 e0 f5 ff ff       	call   c001d230 <unlockScheduler()>
c001dc50:	e8 9a f9 ff ff       	call   c001d5ef <unlockStuff()>
c001dc55:	e8 d4 f5 ff ff       	call   c001d22e <lockScheduler()>
c001dc5a:	80 3d ec e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5ec,0x0
c001dc61:	0f 84 72 ff ff ff    	je     c001dbd9 <cleanerTaskFunction(void*)+0x1b>
c001dc67:	e8 c4 f5 ff ff       	call   c001d230 <unlockScheduler()>
c001dc6c:	e9 75 ff ff ff       	jmp    c001dbe6 <cleanerTaskFunction(void*)+0x28>

c001dc71 <terminateTask(int)>:
c001dc71:	83 ec 14             	sub    esp,0x14
c001dc74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc79:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dc7c:	83 c0 0c             	add    eax,0xc
c001dc7f:	50                   	push   eax
c001dc80:	68 9c b2 02 c0       	push   0xc002b29c
c001dc85:	e8 9f 4c ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001dc8a:	e8 c6 f5 ff ff       	call   c001d255 <lockStuff()>
c001dc8f:	e8 9a f5 ff ff       	call   c001d22e <lockScheduler()>
c001dc94:	c7 04 24 71 af 02 c0 	mov    DWORD PTR [esp],0xc002af71
c001dc9b:	e8 89 4c ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001dca0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dca4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dca9:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001dcac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcb1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001dcb4:	5a                   	pop    edx
c001dcb5:	59                   	pop    ecx
c001dcb6:	50                   	push   eax
c001dcb7:	68 10 e6 02 c0       	push   0xc002e610
c001dcbc:	e8 1f 9d 00 00       	call   c00279e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dcc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcc6:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001dccd:	c7 04 24 8b af 02 c0 	mov    DWORD PTR [esp],0xc002af8b
c001dcd4:	e8 50 4c ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001dcd9:	83 c4 10             	add    esp,0x10
c001dcdc:	a1 e8 e5 02 c0       	mov    eax,ds:0xc002e5e8
c001dce1:	85 c0                	test   eax,eax
c001dce3:	74 5a                	je     c001dd3f <terminateTask(int)+0xce>
c001dce5:	83 ec 0c             	sub    esp,0xc
c001dce8:	68 a5 af 02 c0       	push   0xc002afa5
c001dced:	e8 37 4c ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001dcf2:	58                   	pop    eax
c001dcf3:	c6 05 ec e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5ec,0x1
c001dcfa:	ff 35 e8 e5 02 c0    	push   DWORD PTR ds:0xc002e5e8
c001dd00:	e8 41 fb ff ff       	call   c001d846 <unblockTask(ThreadControlBlock*)>
c001dd05:	c7 04 24 bf af 02 c0 	mov    DWORD PTR [esp],0xc002afbf
c001dd0c:	e8 18 4c ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001dd11:	83 c4 10             	add    esp,0x10
c001dd14:	e8 17 f5 ff ff       	call   c001d230 <unlockScheduler()>
c001dd19:	e8 d1 f8 ff ff       	call   c001d5ef <unlockStuff()>
c001dd1e:	83 ec 0c             	sub    esp,0xc
c001dd21:	68 f7 af 02 c0       	push   0xc002aff7
c001dd26:	e8 fe 4b ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001dd2b:	83 c4 10             	add    esp,0x10
c001dd2e:	e8 fb f4 ff ff       	call   c001d22e <lockScheduler()>
c001dd33:	e8 32 f8 ff ff       	call   c001d56a <schedule()>
c001dd38:	e8 f3 f4 ff ff       	call   c001d230 <unlockScheduler()>
c001dd3d:	eb ef                	jmp    c001dd2e <terminateTask(int)+0xbd>
c001dd3f:	83 ec 0c             	sub    esp,0xc
c001dd42:	68 d9 af 02 c0       	push   0xc002afd9
c001dd47:	e8 dd 4b ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001dd4c:	83 c4 10             	add    esp,0x10
c001dd4f:	eb c3                	jmp    c001dd14 <terminateTask(int)+0xa3>

c001dd51 <Thr::terminateFromIRQ(int)>:
c001dd51:	83 ec 18             	sub    esp,0x18
c001dd54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd58:	e8 14 ff ff ff       	call   c001dc71 <terminateTask(int)>
c001dd5d:	90                   	nop

c001dd5e <Semaphore::release()>:
c001dd5e:	83 ec 0c             	sub    esp,0xc
c001dd61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd65:	e8 eb f4 ff ff       	call   c001d255 <lockStuff()>
c001dd6a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dd6d:	85 d2                	test   edx,edx
c001dd6f:	74 1a                	je     c001dd8b <Semaphore::release()+0x2d>
c001dd71:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001dd74:	83 ec 0c             	sub    esp,0xc
c001dd77:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001dd7a:	52                   	push   edx
c001dd7b:	e8 c6 fa ff ff       	call   c001d846 <unblockTask(ThreadControlBlock*)>
c001dd80:	83 c4 10             	add    esp,0x10
c001dd83:	83 c4 0c             	add    esp,0xc
c001dd86:	e9 64 f8 ff ff       	jmp    c001d5ef <unlockStuff()>
c001dd8b:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001dd8e:	83 c4 0c             	add    esp,0xc
c001dd91:	e9 59 f8 ff ff       	jmp    c001d5ef <unlockStuff()>

c001dd96 <__static_initialization_and_destruction_0(int, int)>:
c001dd96:	83 ec 0c             	sub    esp,0xc
c001dd99:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001dd9e:	0f 85 88 00 00 00    	jne    c001de2c <__static_initialization_and_destruction_0(int, int)+0x96>
c001dda4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ddac:	75 7e                	jne    c001de2c <__static_initialization_and_destruction_0(int, int)+0x96>
c001ddae:	83 ec 0c             	sub    esp,0xc
c001ddb1:	68 28 e6 02 c0       	push   0xc002e628
c001ddb6:	e8 d5 9d 00 00       	call   c0027b90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ddbb:	83 c4 10             	add    esp,0x10
c001ddbe:	83 ec 04             	sub    esp,0x4
c001ddc1:	68 0c c0 02 c0       	push   0xc002c00c
c001ddc6:	68 28 e6 02 c0       	push   0xc002e628
c001ddcb:	68 50 7b 02 c0       	push   0xc0027b50
c001ddd0:	e8 ee 49 ff ff       	call   c00127c3 <__cxa_atexit>
c001ddd5:	83 c4 10             	add    esp,0x10
c001ddd8:	83 ec 0c             	sub    esp,0xc
c001dddb:	68 1c e6 02 c0       	push   0xc002e61c
c001dde0:	e8 ab 9d 00 00       	call   c0027b90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001dde5:	83 c4 10             	add    esp,0x10
c001dde8:	83 ec 04             	sub    esp,0x4
c001ddeb:	68 0c c0 02 c0       	push   0xc002c00c
c001ddf0:	68 1c e6 02 c0       	push   0xc002e61c
c001ddf5:	68 50 7b 02 c0       	push   0xc0027b50
c001ddfa:	e8 c4 49 ff ff       	call   c00127c3 <__cxa_atexit>
c001ddff:	83 c4 10             	add    esp,0x10
c001de02:	83 ec 0c             	sub    esp,0xc
c001de05:	68 10 e6 02 c0       	push   0xc002e610
c001de0a:	e8 81 9d 00 00       	call   c0027b90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001de0f:	83 c4 10             	add    esp,0x10
c001de12:	83 ec 04             	sub    esp,0x4
c001de15:	68 0c c0 02 c0       	push   0xc002c00c
c001de1a:	68 10 e6 02 c0       	push   0xc002e610
c001de1f:	68 50 7b 02 c0       	push   0xc0027b50
c001de24:	e8 9a 49 ff ff       	call   c00127c3 <__cxa_atexit>
c001de29:	83 c4 10             	add    esp,0x10
c001de2c:	90                   	nop
c001de2d:	83 c4 0c             	add    esp,0xc
c001de30:	c3                   	ret    

c001de31 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001de31:	83 ec 0c             	sub    esp,0xc
c001de34:	83 ec 08             	sub    esp,0x8
c001de37:	68 ff ff 00 00       	push   0xffff
c001de3c:	6a 01                	push   0x1
c001de3e:	e8 53 ff ff ff       	call   c001dd96 <__static_initialization_and_destruction_0(int, int)>
c001de43:	83 c4 10             	add    esp,0x10
c001de46:	83 c4 0c             	add    esp,0xc
c001de49:	c3                   	ret    

c001de4a <Vm::inbv(unsigned short)>:
c001de4a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001de4e:	66 81 fa fe fe       	cmp    dx,0xfefe
c001de53:	75 06                	jne    c001de5b <Vm::inbv(unsigned short)+0x11>
c001de55:	a0 6c e6 02 c0       	mov    al,ds:0xc002e66c
c001de5a:	c3                   	ret    
c001de5b:	ec                   	in     al,dx
c001de5c:	c3                   	ret    

c001de5d <Vm::outbv(unsigned short, unsigned char)>:
c001de5d:	53                   	push   ebx
c001de5e:	83 ec 08             	sub    esp,0x8
c001de61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001de65:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001de69:	66 81 fa fe fe       	cmp    dx,0xfefe
c001de6e:	75 38                	jne    c001dea8 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001de70:	0f b6 c3             	movzx  eax,bl
c001de73:	51                   	push   ecx
c001de74:	51                   	push   ecx
c001de75:	50                   	push   eax
c001de76:	68 bb b2 02 c0       	push   0xc002b2bb
c001de7b:	e8 a9 4a ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001de80:	8b 15 6c e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e66c
c001de86:	83 c4 10             	add    esp,0x10
c001de89:	8d 42 01             	lea    eax,[edx+0x1]
c001de8c:	88 9a 80 e6 02 c0    	mov    BYTE PTR [edx-0x3ffd1980],bl
c001de92:	a3 6c e6 02 c0       	mov    ds:0xc002e66c,eax
c001de97:	83 f8 20             	cmp    eax,0x20
c001de9a:	75 0f                	jne    c001deab <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001de9c:	c7 05 6c e6 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002e66c,0x1f
c001dea6:	eb 03                	jmp    c001deab <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001dea8:	88 d8                	mov    al,bl
c001deaa:	ee                   	out    dx,al
c001deab:	83 c4 08             	add    esp,0x8
c001deae:	5b                   	pop    ebx
c001deaf:	c3                   	ret    

c001deb0 <Vm::realToLinear(unsigned short, unsigned short)>:
c001deb0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001deb5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001deba:	c1 e0 04             	shl    eax,0x4
c001debd:	01 d0                	add    eax,edx
c001debf:	c3                   	ret    

c001dec0 <Vm::getSegment(unsigned int)>:
c001dec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dec4:	c1 e8 10             	shr    eax,0x10
c001dec7:	c3                   	ret    

c001dec8 <Vm::getOffset(unsigned int)>:
c001dec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001decc:	c3                   	ret    

c001decd <Vm::mainloop2()>:
c001decd:	83 ec 0c             	sub    esp,0xc
c001ded0:	e8 59 f3 ff ff       	call   c001d22e <lockScheduler()>
c001ded5:	83 ec 0c             	sub    esp,0xc
c001ded8:	c6 05 65 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e665,0x1
c001dedf:	6a 02                	push   0x2
c001dee1:	e8 9c f7 ff ff       	call   c001d682 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001dee6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001deeb:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001deef:	52                   	push   edx
c001def0:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001def4:	52                   	push   edx
c001def5:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001def9:	52                   	push   edx
c001defa:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001defe:	50                   	push   eax
c001deff:	e8 f6 23 fe ff       	call   c00002fa <goToVM86>
c001df04:	83 c4 2c             	add    esp,0x2c
c001df07:	c3                   	ret    

c001df08 <Vm::mainVm8086Loop(void*)>:
c001df08:	83 ec 0c             	sub    esp,0xc
c001df0b:	e8 20 f3 ff ff       	call   c001d230 <unlockScheduler()>
c001df10:	83 c4 0c             	add    esp,0xc
c001df13:	eb b8                	jmp    c001decd <Vm::mainloop2()>

c001df15 <Vm::mainloop3(unsigned long)>:
c001df15:	53                   	push   ebx
c001df16:	83 ec 08             	sub    esp,0x8
c001df19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df1d:	e8 0c f3 ff ff       	call   c001d22e <lockScheduler()>
c001df22:	83 ec 0c             	sub    esp,0xc
c001df25:	89 1d 60 e6 02 c0    	mov    DWORD PTR ds:0xc002e660,ebx
c001df2b:	6a 02                	push   0x2
c001df2d:	c6 05 64 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e664,0x1
c001df34:	e8 49 f7 ff ff       	call   c001d682 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001df39:	83 c4 18             	add    esp,0x18
c001df3c:	5b                   	pop    ebx
c001df3d:	eb 8e                	jmp    c001decd <Vm::mainloop2()>

c001df3f <Vm::initialise8086()>:
c001df3f:	83 ec 0c             	sub    esp,0xc
c001df42:	68 80 00 00 00       	push   0x80
c001df47:	6a 00                	push   0x0
c001df49:	68 08 df 01 c0       	push   0xc001df08
c001df4e:	ff 35 34 e6 02 c0    	push   DWORD PTR ds:0xc002e634
c001df54:	e8 07 f4 ff ff       	call   c001d360 <Process::createThread(void (*)(void*), void*, int)>
c001df59:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001df60:	a3 68 e6 02 c0       	mov    ds:0xc002e668,eax
c001df65:	68 00 01 00 00       	push   0x100
c001df6a:	a1 34 e6 02 c0       	mov    eax,ds:0xc002e634
c001df6f:	6a 00                	push   0x0
c001df71:	6a 00                	push   0x0
c001df73:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001df79:	e8 7a 43 ff ff       	call   c00122f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001df7e:	83 c4 2c             	add    esp,0x2c
c001df81:	c3                   	ret    

c001df82 <Vm::finish8086()>:
c001df82:	53                   	push   ebx
c001df83:	83 ec 08             	sub    esp,0x8
c001df86:	e8 a3 f2 ff ff       	call   c001d22e <lockScheduler()>
c001df8b:	80 3d 64 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e664,0x0
c001df92:	75 0c                	jne    c001dfa0 <Vm::finish8086()+0x1e>
c001df94:	e8 d1 f5 ff ff       	call   c001d56a <schedule()>
c001df99:	e8 92 f2 ff ff       	call   c001d230 <unlockScheduler()>
c001df9e:	eb e6                	jmp    c001df86 <Vm::finish8086()+0x4>
c001dfa0:	83 ec 0c             	sub    esp,0xc
c001dfa3:	8b 1d 60 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e660
c001dfa9:	ff 35 68 e6 02 c0    	push   DWORD PTR ds:0xc002e668
c001dfaf:	c6 05 64 e6 02 c0 00 	mov    BYTE PTR ds:0xc002e664,0x0
c001dfb6:	e8 8b f8 ff ff       	call   c001d846 <unblockTask(ThreadControlBlock*)>
c001dfbb:	e8 70 f2 ff ff       	call   c001d230 <unlockScheduler()>
c001dfc0:	89 d8                	mov    eax,ebx
c001dfc2:	83 c4 18             	add    esp,0x18
c001dfc5:	5b                   	pop    ebx
c001dfc6:	c3                   	ret    

c001dfc7 <Vm::getOutput8086(unsigned char*)>:
c001dfc7:	83 ec 10             	sub    esp,0x10
c001dfca:	ff 35 6c e6 02 c0    	push   DWORD PTR ds:0xc002e66c
c001dfd0:	68 80 e6 02 c0       	push   0xc002e680
c001dfd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dfd9:	e8 c2 26 fe ff       	call   c00006a0 <memcpy>
c001dfde:	a1 6c e6 02 c0       	mov    eax,ds:0xc002e66c
c001dfe3:	c7 05 6c e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e66c,0x0
c001dfed:	83 c4 1c             	add    esp,0x1c
c001dff0:	c3                   	ret    

c001dff1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001dff1:	55                   	push   ebp
c001dff2:	57                   	push   edi
c001dff3:	56                   	push   esi
c001dff4:	53                   	push   ebx
c001dff5:	83 ec 2c             	sub    esp,0x2c
c001dff8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dffc:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001e000:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001e004:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e008:	e8 21 f2 ff ff       	call   c001d22e <lockScheduler()>
c001e00d:	a0 65 e6 02 c0       	mov    al,ds:0xc002e665
c001e012:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e016:	84 c0                	test   al,al
c001e018:	75 0c                	jne    c001e026 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001e01a:	e8 4b f5 ff ff       	call   c001d56a <schedule()>
c001e01f:	e8 0c f2 ff ff       	call   c001d230 <unlockScheduler()>
c001e024:	eb e2                	jmp    c001e008 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e026:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c001e02b:	c7 05 6c e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e66c,0x0
c001e035:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001e039:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001e03d:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001e041:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001e045:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e049:	50                   	push   eax
c001e04a:	6a 20                	push   0x20
c001e04c:	6a 00                	push   0x0
c001e04e:	68 80 e6 02 c0       	push   0xc002e680
c001e053:	e8 6c 26 fe ff       	call   c00006c4 <memset>
c001e058:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e05f:	e8 f6 15 ff ff       	call   c000f65a <malloc>
c001e064:	83 c4 0c             	add    esp,0xc
c001e067:	89 c7                	mov    edi,eax
c001e069:	ff 35 34 e6 02 c0    	push   DWORD PTR ds:0xc002e634
c001e06f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e073:	50                   	push   eax
c001e074:	e8 09 4e ff ff       	call   c0012e82 <File::File(char const*, Process*)>
c001e079:	83 c4 10             	add    esp,0x10
c001e07c:	85 ff                	test   edi,edi
c001e07e:	75 0a                	jne    c001e08a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001e080:	83 ec 0c             	sub    esp,0xc
c001e083:	68 d7 b2 02 c0       	push   0xc002b2d7
c001e088:	eb 27                	jmp    c001e0b1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001e08a:	50                   	push   eax
c001e08b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e08f:	50                   	push   eax
c001e090:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e094:	50                   	push   eax
c001e095:	57                   	push   edi
c001e096:	e8 f7 50 ff ff       	call   c0013192 <File::stat(unsigned long long*, bool*)>
c001e09b:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001e0a0:	83 c4 10             	add    esp,0x10
c001e0a3:	89 e8                	mov    eax,ebp
c001e0a5:	84 c0                	test   al,al
c001e0a7:	74 19                	je     c001e0c2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e0a9:	83 ec 0c             	sub    esp,0xc
c001e0ac:	68 eb b2 02 c0       	push   0xc002b2eb
c001e0b1:	e8 c9 bb ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001e0b6:	31 ed                	xor    ebp,ebp
c001e0b8:	e8 73 f1 ff ff       	call   c001d230 <unlockScheduler()>
c001e0bd:	83 c4 10             	add    esp,0x10
c001e0c0:	eb 75                	jmp    c001e137 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e0c2:	50                   	push   eax
c001e0c3:	50                   	push   eax
c001e0c4:	6a 01                	push   0x1
c001e0c6:	57                   	push   edi
c001e0c7:	e8 1a 4e ff ff       	call   c0012ee6 <File::open(FileOpenMode)>
c001e0cc:	83 c4 10             	add    esp,0x10
c001e0cf:	85 c0                	test   eax,eax
c001e0d1:	74 17                	je     c001e0ea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001e0d3:	83 ec 0c             	sub    esp,0xc
c001e0d6:	68 04 b3 02 c0       	push   0xc002b304
c001e0db:	e8 9f bb ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001e0e0:	e8 4b f1 ff ff       	call   c001d230 <unlockScheduler()>
c001e0e5:	83 c4 10             	add    esp,0x10
c001e0e8:	eb 4d                	jmp    c001e137 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e0ea:	0f b7 f6             	movzx  esi,si
c001e0ed:	50                   	push   eax
c001e0ee:	0f b7 db             	movzx  ebx,bx
c001e0f1:	50                   	push   eax
c001e0f2:	56                   	push   esi
c001e0f3:	53                   	push   ebx
c001e0f4:	e8 b7 fd ff ff       	call   c001deb0 <Vm::realToLinear(unsigned short, unsigned short)>
c001e0f9:	5a                   	pop    edx
c001e0fa:	8b 17                	mov    edx,DWORD PTR [edi]
c001e0fc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e100:	51                   	push   ecx
c001e101:	50                   	push   eax
c001e102:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e106:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e10a:	57                   	push   edi
c001e10b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e10e:	83 c4 14             	add    esp,0x14
c001e111:	57                   	push   edi
c001e112:	e8 2d 4e ff ff       	call   c0012f44 <File::close()>
c001e117:	c6 05 65 e6 02 c0 00 	mov    BYTE PTR ds:0xc002e665,0x0
c001e11e:	e8 0d f1 ff ff       	call   c001d230 <unlockScheduler()>
c001e123:	59                   	pop    ecx
c001e124:	ff 35 68 e6 02 c0    	push   DWORD PTR ds:0xc002e668
c001e12a:	e8 17 f7 ff ff       	call   c001d846 <unblockTask(ThreadControlBlock*)>
c001e12f:	83 c4 10             	add    esp,0x10
c001e132:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001e137:	83 c4 2c             	add    esp,0x2c
c001e13a:	89 e8                	mov    eax,ebp
c001e13c:	5b                   	pop    ebx
c001e13d:	5e                   	pop    esi
c001e13e:	5f                   	pop    edi
c001e13f:	5d                   	pop    ebp
c001e140:	c3                   	ret    

c001e141 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e141:	57                   	push   edi
c001e142:	56                   	push   esi
c001e143:	53                   	push   ebx
c001e144:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e148:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e14c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e150:	83 e8 06             	sub    eax,0x6
c001e153:	0f b7 c0             	movzx  eax,ax
c001e156:	50                   	push   eax
c001e157:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e15c:	50                   	push   eax
c001e15d:	e8 4e fd ff ff       	call   c001deb0 <Vm::realToLinear(unsigned short, unsigned short)>
c001e162:	5a                   	pop    edx
c001e163:	5e                   	pop    esi
c001e164:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e167:	8d 56 fa             	lea    edx,[esi-0x6]
c001e16a:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e170:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e173:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e176:	83 c2 02             	add    edx,0x2
c001e179:	66 89 10             	mov    WORD PTR [eax],dx
c001e17c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e17f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e183:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e186:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e18a:	89 d6                	mov    esi,edx
c001e18c:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e192:	66 81 e6 ff fd       	and    si,0xfdff
c001e197:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e19b:	74 07                	je     c001e1a4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e19d:	89 d6                	mov    esi,edx
c001e19f:	66 81 ce 00 02       	or     si,0x200
c001e1a4:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e1a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1ad:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e1b1:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e1b9:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e1bc:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e1c4:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e1c7:	5b                   	pop    ebx
c001e1c8:	5e                   	pop    esi
c001e1c9:	5f                   	pop    edi
c001e1ca:	c3                   	ret    

c001e1cb <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e1cb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e1d0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e1d5:	c1 e0 04             	shl    eax,0x4
c001e1d8:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e1db:	c3                   	ret    

c001e1dc <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e1dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e1e1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e1e6:	c1 e0 04             	shl    eax,0x4
c001e1e9:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e1ed:	c3                   	ret    

c001e1ee <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e1ee:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e1f3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e1f8:	c1 e0 04             	shl    eax,0x4
c001e1fb:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e1fe:	c3                   	ret    

c001e1ff <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e1ff:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e204:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e209:	c1 e0 04             	shl    eax,0x4
c001e20c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e210:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e213:	c3                   	ret    

c001e214 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e214:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e219:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e21e:	c1 e0 04             	shl    eax,0x4
c001e221:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e225:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e229:	c3                   	ret    

c001e22a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e22a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e22f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e234:	c1 e0 04             	shl    eax,0x4
c001e237:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e23b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e23e:	c3                   	ret    

c001e23f <Vm::faultHandler(regs*)>:
c001e23f:	55                   	push   ebp
c001e240:	57                   	push   edi
c001e241:	56                   	push   esi
c001e242:	53                   	push   ebx
c001e243:	83 ec 1c             	sub    esp,0x1c
c001e246:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e24a:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001e24d:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001e250:	0f b7 c1             	movzx  eax,cx
c001e253:	50                   	push   eax
c001e254:	0f b7 c3             	movzx  eax,bx
c001e257:	c1 e3 04             	shl    ebx,0x4
c001e25a:	50                   	push   eax
c001e25b:	e8 50 fc ff ff       	call   c001deb0 <Vm::realToLinear(unsigned short, unsigned short)>
c001e260:	5a                   	pop    edx
c001e261:	89 c5                	mov    ebp,eax
c001e263:	5e                   	pop    esi
c001e264:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001e268:	50                   	push   eax
c001e269:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e26d:	50                   	push   eax
c001e26e:	e8 3d fc ff ff       	call   c001deb0 <Vm::realToLinear(unsigned short, unsigned short)>
c001e273:	01 cb                	add    ebx,ecx
c001e275:	89 c6                	mov    esi,eax
c001e277:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001e27b:	50                   	push   eax
c001e27c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e280:	50                   	push   eax
c001e281:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e285:	50                   	push   eax
c001e286:	55                   	push   ebp
c001e287:	53                   	push   ebx
c001e288:	b3 06                	mov    bl,0x6
c001e28a:	68 1d b3 02 c0       	push   0xc002b31d
c001e28f:	e8 95 46 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e294:	83 c4 20             	add    esp,0x20
c001e297:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e29c:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e2a1:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e2a5:	3c 9d                	cmp    al,0x9d
c001e2a7:	0f 84 d7 02 00 00    	je     c001e584 <Vm::faultHandler(regs*)+0x345>
c001e2ad:	0f 87 a3 00 00 00    	ja     c001e356 <Vm::faultHandler(regs*)+0x117>
c001e2b3:	3c 66                	cmp    al,0x66
c001e2b5:	0f 84 15 02 00 00    	je     c001e4d0 <Vm::faultHandler(regs*)+0x291>
c001e2bb:	77 5f                	ja     c001e31c <Vm::faultHandler(regs*)+0xdd>
c001e2bd:	3c 36                	cmp    al,0x36
c001e2bf:	0f 84 f1 01 00 00    	je     c001e4b6 <Vm::faultHandler(regs*)+0x277>
c001e2c5:	77 28                	ja     c001e2ef <Vm::faultHandler(regs*)+0xb0>
c001e2c7:	3c 26                	cmp    al,0x26
c001e2c9:	0f 84 99 01 00 00    	je     c001e468 <Vm::faultHandler(regs*)+0x229>
c001e2cf:	3c 2e                	cmp    al,0x2e
c001e2d1:	0f 85 3b 07 00 00    	jne    c001ea12 <Vm::faultHandler(regs*)+0x7d3>
c001e2d7:	83 ec 0c             	sub    esp,0xc
c001e2da:	31 db                	xor    ebx,ebx
c001e2dc:	68 32 b3 02 c0       	push   0xc002b332
c001e2e1:	e8 43 46 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e2e6:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e2e9:	83 c4 10             	add    esp,0x10
c001e2ec:	45                   	inc    ebp
c001e2ed:	eb b2                	jmp    c001e2a1 <Vm::faultHandler(regs*)+0x62>
c001e2ef:	3c 64                	cmp    al,0x64
c001e2f1:	0f 84 8b 01 00 00    	je     c001e482 <Vm::faultHandler(regs*)+0x243>
c001e2f7:	0f 87 9f 01 00 00    	ja     c001e49c <Vm::faultHandler(regs*)+0x25d>
c001e2fd:	3c 3e                	cmp    al,0x3e
c001e2ff:	0f 85 0d 07 00 00    	jne    c001ea12 <Vm::faultHandler(regs*)+0x7d3>
c001e305:	83 ec 0c             	sub    esp,0xc
c001e308:	b3 01                	mov    bl,0x1
c001e30a:	68 36 b3 02 c0       	push   0xc002b336
c001e30f:	e8 15 46 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e314:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e317:	83 c4 10             	add    esp,0x10
c001e31a:	eb d0                	jmp    c001e2ec <Vm::faultHandler(regs*)+0xad>
c001e31c:	3c 6d                	cmp    al,0x6d
c001e31e:	0f 84 af 03 00 00    	je     c001e6d3 <Vm::faultHandler(regs*)+0x494>
c001e324:	77 15                	ja     c001e33b <Vm::faultHandler(regs*)+0xfc>
c001e326:	3c 67                	cmp    al,0x67
c001e328:	0f 84 bf 01 00 00    	je     c001e4ed <Vm::faultHandler(regs*)+0x2ae>
c001e32e:	3c 6c                	cmp    al,0x6c
c001e330:	0f 84 3f 03 00 00    	je     c001e675 <Vm::faultHandler(regs*)+0x436>
c001e336:	e9 d7 06 00 00       	jmp    c001ea12 <Vm::faultHandler(regs*)+0x7d3>
c001e33b:	3c 6f                	cmp    al,0x6f
c001e33d:	0f 84 a4 04 00 00    	je     c001e7e7 <Vm::faultHandler(regs*)+0x5a8>
c001e343:	0f 82 11 04 00 00    	jb     c001e75a <Vm::faultHandler(regs*)+0x51b>
c001e349:	3c 9c                	cmp    al,0x9c
c001e34b:	0f 84 ba 01 00 00    	je     c001e50b <Vm::faultHandler(regs*)+0x2cc>
c001e351:	e9 bc 06 00 00       	jmp    c001ea12 <Vm::faultHandler(regs*)+0x7d3>
c001e356:	3c ec                	cmp    al,0xec
c001e358:	0f 84 24 06 00 00    	je     c001e982 <Vm::faultHandler(regs*)+0x743>
c001e35e:	0f 87 93 00 00 00    	ja     c001e3f7 <Vm::faultHandler(regs*)+0x1b8>
c001e364:	3c e4                	cmp    al,0xe4
c001e366:	0f 84 5c 05 00 00    	je     c001e8c8 <Vm::faultHandler(regs*)+0x689>
c001e36c:	77 6a                	ja     c001e3d8 <Vm::faultHandler(regs*)+0x199>
c001e36e:	3c cd                	cmp    al,0xcd
c001e370:	0f 84 7e 02 00 00    	je     c001e5f4 <Vm::faultHandler(regs*)+0x3b5>
c001e376:	3c cf                	cmp    al,0xcf
c001e378:	0f 85 94 06 00 00    	jne    c001ea12 <Vm::faultHandler(regs*)+0x7d3>
c001e37e:	83 ec 0c             	sub    esp,0xc
c001e381:	68 7a b3 02 c0       	push   0xc002b37a
c001e386:	e8 9e 45 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e38b:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001e38e:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001e391:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001e395:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001e398:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001e39c:	0d 00 02 02 00       	or     eax,0x20200
c001e3a1:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e3a4:	56                   	push   esi
c001e3a5:	53                   	push   ebx
c001e3a6:	52                   	push   edx
c001e3a7:	68 80 b3 02 c0       	push   0xc002b380
c001e3ac:	e8 78 45 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e3b1:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001e3b5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e3bb:	66 c1 e8 09          	shr    ax,0x9
c001e3bf:	83 e0 01             	and    eax,0x1
c001e3c2:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e3c5:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e3c8:	83 c0 06             	add    eax,0x6
c001e3cb:	25 ff ff 00 00       	and    eax,0xffff
c001e3d0:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e3d3:	e9 95 02 00 00       	jmp    c001e66d <Vm::faultHandler(regs*)+0x42e>
c001e3d8:	3c e6                	cmp    al,0xe6
c001e3da:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001e3de:	0f 84 4e 05 00 00    	je     c001e932 <Vm::faultHandler(regs*)+0x6f3>
c001e3e4:	0f 82 0a 05 00 00    	jb     c001e8f4 <Vm::faultHandler(regs*)+0x6b5>
c001e3ea:	3c e7                	cmp    al,0xe7
c001e3ec:	0f 84 69 05 00 00    	je     c001e95b <Vm::faultHandler(regs*)+0x71c>
c001e3f2:	e9 1b 06 00 00       	jmp    c001ea12 <Vm::faultHandler(regs*)+0x7d3>
c001e3f7:	3c ef                	cmp    al,0xef
c001e3f9:	0f 84 e6 05 00 00    	je     c001e9e5 <Vm::faultHandler(regs*)+0x7a6>
c001e3ff:	77 37                	ja     c001e438 <Vm::faultHandler(regs*)+0x1f9>
c001e401:	3c ed                	cmp    al,0xed
c001e403:	0f 84 a3 05 00 00    	je     c001e9ac <Vm::faultHandler(regs*)+0x76d>
c001e409:	3c ee                	cmp    al,0xee
c001e40b:	0f 85 01 06 00 00    	jne    c001ea12 <Vm::faultHandler(regs*)+0x7d3>
c001e411:	52                   	push   edx
c001e412:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e415:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e418:	68 1b b4 02 c0       	push   0xc002b41b
c001e41d:	e8 07 45 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e422:	59                   	pop    ecx
c001e423:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e427:	5b                   	pop    ebx
c001e428:	50                   	push   eax
c001e429:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e42d:	50                   	push   eax
c001e42e:	e8 2a fa ff ff       	call   c001de5d <Vm::outbv(unsigned short, unsigned char)>
c001e433:	e9 a5 05 00 00       	jmp    c001e9dd <Vm::faultHandler(regs*)+0x79e>
c001e438:	3c fa                	cmp    al,0xfa
c001e43a:	0f 84 f7 01 00 00    	je     c001e637 <Vm::faultHandler(regs*)+0x3f8>
c001e440:	3c fb                	cmp    al,0xfb
c001e442:	0f 84 0a 02 00 00    	je     c001e652 <Vm::faultHandler(regs*)+0x413>
c001e448:	3c f3                	cmp    al,0xf3
c001e44a:	0f 85 c2 05 00 00    	jne    c001ea12 <Vm::faultHandler(regs*)+0x7d3>
c001e450:	83 ec 0c             	sub    esp,0xc
c001e453:	68 53 b3 02 c0       	push   0xc002b353
c001e458:	e8 cc 44 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e45d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e460:	83 c4 10             	add    esp,0x10
c001e463:	e9 84 fe ff ff       	jmp    c001e2ec <Vm::faultHandler(regs*)+0xad>
c001e468:	83 ec 0c             	sub    esp,0xc
c001e46b:	b3 02                	mov    bl,0x2
c001e46d:	68 2e b3 02 c0       	push   0xc002b32e
c001e472:	e8 b2 44 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e477:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e47a:	83 c4 10             	add    esp,0x10
c001e47d:	e9 6a fe ff ff       	jmp    c001e2ec <Vm::faultHandler(regs*)+0xad>
c001e482:	83 ec 0c             	sub    esp,0xc
c001e485:	b3 03                	mov    bl,0x3
c001e487:	68 3a b3 02 c0       	push   0xc002b33a
c001e48c:	e8 98 44 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e491:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e494:	83 c4 10             	add    esp,0x10
c001e497:	e9 50 fe ff ff       	jmp    c001e2ec <Vm::faultHandler(regs*)+0xad>
c001e49c:	83 ec 0c             	sub    esp,0xc
c001e49f:	b3 04                	mov    bl,0x4
c001e4a1:	68 3e b3 02 c0       	push   0xc002b33e
c001e4a6:	e8 7e 44 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e4ab:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e4ae:	83 c4 10             	add    esp,0x10
c001e4b1:	e9 36 fe ff ff       	jmp    c001e2ec <Vm::faultHandler(regs*)+0xad>
c001e4b6:	83 ec 0c             	sub    esp,0xc
c001e4b9:	b3 05                	mov    bl,0x5
c001e4bb:	68 42 b3 02 c0       	push   0xc002b342
c001e4c0:	e8 64 44 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e4c5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e4c8:	83 c4 10             	add    esp,0x10
c001e4cb:	e9 1c fe ff ff       	jmp    c001e2ec <Vm::faultHandler(regs*)+0xad>
c001e4d0:	83 ec 0c             	sub    esp,0xc
c001e4d3:	68 46 b3 02 c0       	push   0xc002b346
c001e4d8:	e8 4c 44 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e4dd:	83 c4 10             	add    esp,0x10
c001e4e0:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e4e3:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e4e8:	e9 ff fd ff ff       	jmp    c001e2ec <Vm::faultHandler(regs*)+0xad>
c001e4ed:	50                   	push   eax
c001e4ee:	50                   	push   eax
c001e4ef:	6a 01                	push   0x1
c001e4f1:	68 4b b3 02 c0       	push   0xc002b34b
c001e4f6:	e8 2e 44 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e4fb:	83 c4 10             	add    esp,0x10
c001e4fe:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e501:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001e506:	e9 e1 fd ff ff       	jmp    c001e2ec <Vm::faultHandler(regs*)+0xad>
c001e50b:	83 ec 0c             	sub    esp,0xc
c001e50e:	68 59 b3 02 c0       	push   0xc002b359
c001e513:	e8 11 44 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e518:	83 c4 10             	add    esp,0x10
c001e51b:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001e51e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e523:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001e526:	74 2f                	je     c001e557 <Vm::faultHandler(regs*)+0x318>
c001e528:	83 ea 04             	sub    edx,0x4
c001e52b:	25 ff 0d 00 00       	and    eax,0xdff
c001e530:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e536:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e539:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e53c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e542:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e546:	0f 84 bf 04 00 00    	je     c001ea0b <Vm::faultHandler(regs*)+0x7cc>
c001e54c:	80 cc 02             	or     ah,0x2
c001e54f:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e552:	e9 b4 04 00 00       	jmp    c001ea0b <Vm::faultHandler(regs*)+0x7cc>
c001e557:	83 ea 02             	sub    edx,0x2
c001e55a:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e560:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e563:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e567:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e56d:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e571:	74 05                	je     c001e578 <Vm::faultHandler(regs*)+0x339>
c001e573:	80 cc 02             	or     ah,0x2
c001e576:	eb 03                	jmp    c001e57b <Vm::faultHandler(regs*)+0x33c>
c001e578:	80 e4 fd             	and    ah,0xfd
c001e57b:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e57f:	e9 87 04 00 00       	jmp    c001ea0b <Vm::faultHandler(regs*)+0x7cc>
c001e584:	83 ec 0c             	sub    esp,0xc
c001e587:	68 60 b3 02 c0       	push   0xc002b360
c001e58c:	e8 98 43 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e591:	83 c4 10             	add    esp,0x10
c001e594:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e599:	74 28                	je     c001e5c3 <Vm::faultHandler(regs*)+0x384>
c001e59b:	8b 06                	mov    eax,DWORD PTR [esi]
c001e59d:	25 ff 0d 00 00       	and    eax,0xdff
c001e5a2:	0d 00 02 02 00       	or     eax,0x20200
c001e5a7:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e5aa:	8b 06                	mov    eax,DWORD PTR [esi]
c001e5ac:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e5b2:	c1 e8 09             	shr    eax,0x9
c001e5b5:	83 e0 01             	and    eax,0x1
c001e5b8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e5bb:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e5be:	83 c0 04             	add    eax,0x4
c001e5c1:	eb 24                	jmp    c001e5e7 <Vm::faultHandler(regs*)+0x3a8>
c001e5c3:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e5c6:	0d 00 02 02 00       	or     eax,0x20200
c001e5cb:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e5ce:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e5d1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e5d7:	66 c1 e8 09          	shr    ax,0x9
c001e5db:	83 e0 01             	and    eax,0x1
c001e5de:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e5e1:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e5e4:	83 c0 02             	add    eax,0x2
c001e5e7:	25 ff ff 00 00       	and    eax,0xffff
c001e5ec:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e5ef:	e9 17 04 00 00       	jmp    c001ea0b <Vm::faultHandler(regs*)+0x7cc>
c001e5f4:	53                   	push   ebx
c001e5f5:	53                   	push   ebx
c001e5f6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e5fa:	50                   	push   eax
c001e5fb:	68 66 b3 02 c0       	push   0xc002b366
c001e600:	e8 24 43 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e605:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e609:	83 c4 10             	add    esp,0x10
c001e60c:	3c ee                	cmp    al,0xee
c001e60e:	75 10                	jne    c001e620 <Vm::faultHandler(regs*)+0x3e1>
c001e610:	83 ec 0c             	sub    esp,0xc
c001e613:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e616:	e8 fa f8 ff ff       	call   c001df15 <Vm::mainloop3(unsigned long)>
c001e61b:	e9 c0 03 00 00       	jmp    c001e9e0 <Vm::faultHandler(regs*)+0x7a1>
c001e620:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001e624:	83 ec 0c             	sub    esp,0xc
c001e627:	53                   	push   ebx
c001e628:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001e62c:	53                   	push   ebx
c001e62d:	55                   	push   ebp
c001e62e:	50                   	push   eax
c001e62f:	57                   	push   edi
c001e630:	e8 0c fb ff ff       	call   c001e141 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e635:	eb 36                	jmp    c001e66d <Vm::faultHandler(regs*)+0x42e>
c001e637:	83 ec 0c             	sub    esp,0xc
c001e63a:	68 70 b3 02 c0       	push   0xc002b370
c001e63f:	e8 e5 42 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e644:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e649:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e64d:	e9 8b 03 00 00       	jmp    c001e9dd <Vm::faultHandler(regs*)+0x79e>
c001e652:	83 ec 0c             	sub    esp,0xc
c001e655:	68 75 b3 02 c0       	push   0xc002b375
c001e65a:	e8 ca 42 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e65f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e664:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e668:	e9 70 03 00 00       	jmp    c001e9dd <Vm::faultHandler(regs*)+0x79e>
c001e66d:	83 c4 20             	add    esp,0x20
c001e670:	e9 99 03 00 00       	jmp    c001ea0e <Vm::faultHandler(regs*)+0x7cf>
c001e675:	83 ec 0c             	sub    esp,0xc
c001e678:	68 b3 b3 02 c0       	push   0xc002b3b3
c001e67d:	e8 a7 42 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e682:	83 c4 10             	add    esp,0x10
c001e685:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e688:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e68d:	74 0d                	je     c001e69c <Vm::faultHandler(regs*)+0x45d>
c001e68f:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e696:	0f 87 9e 01 00 00    	ja     c001e83a <Vm::faultHandler(regs*)+0x5fb>
c001e69c:	83 ec 0c             	sub    esp,0xc
c001e69f:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e6a3:	0f b7 db             	movzx  ebx,bx
c001e6a6:	50                   	push   eax
c001e6a7:	e8 9e f7 ff ff       	call   c001de4a <Vm::inbv(unsigned short)>
c001e6ac:	83 c4 0c             	add    esp,0xc
c001e6af:	0f b6 c0             	movzx  eax,al
c001e6b2:	50                   	push   eax
c001e6b3:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001e6b7:	50                   	push   eax
c001e6b8:	53                   	push   ebx
c001e6b9:	e8 41 fb ff ff       	call   c001e1ff <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001e6be:	83 c4 10             	add    esp,0x10
c001e6c1:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e6c4:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e6c8:	74 03                	je     c001e6cd <Vm::faultHandler(regs*)+0x48e>
c001e6ca:	48                   	dec    eax
c001e6cb:	eb 01                	jmp    c001e6ce <Vm::faultHandler(regs*)+0x48f>
c001e6cd:	40                   	inc    eax
c001e6ce:	0f b7 c0             	movzx  eax,ax
c001e6d1:	eb 7f                	jmp    c001e752 <Vm::faultHandler(regs*)+0x513>
c001e6d3:	83 ec 0c             	sub    esp,0xc
c001e6d6:	68 e5 b3 02 c0       	push   0xc002b3e5
c001e6db:	e8 49 42 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e6e0:	83 c4 10             	add    esp,0x10
c001e6e3:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e6e6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e6eb:	74 0d                	je     c001e6fa <Vm::faultHandler(regs*)+0x4bb>
c001e6ed:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e6f4:	0f 87 40 01 00 00    	ja     c001e83a <Vm::faultHandler(regs*)+0x5fb>
c001e6fa:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e6fd:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001e701:	0f b7 db             	movzx  ebx,bx
c001e704:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e709:	74 20                	je     c001e72b <Vm::faultHandler(regs*)+0x4ec>
c001e70b:	ed                   	in     eax,dx
c001e70c:	51                   	push   ecx
c001e70d:	50                   	push   eax
c001e70e:	56                   	push   esi
c001e70f:	53                   	push   ebx
c001e710:	e8 15 fb ff ff       	call   c001e22a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001e715:	83 c4 10             	add    esp,0x10
c001e718:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e71b:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e71f:	74 05                	je     c001e726 <Vm::faultHandler(regs*)+0x4e7>
c001e721:	83 e8 04             	sub    eax,0x4
c001e724:	eb 27                	jmp    c001e74d <Vm::faultHandler(regs*)+0x50e>
c001e726:	83 c0 04             	add    eax,0x4
c001e729:	eb 22                	jmp    c001e74d <Vm::faultHandler(regs*)+0x50e>
c001e72b:	66 ed                	in     ax,dx
c001e72d:	0f b7 c0             	movzx  eax,ax
c001e730:	52                   	push   edx
c001e731:	50                   	push   eax
c001e732:	56                   	push   esi
c001e733:	53                   	push   ebx
c001e734:	e8 db fa ff ff       	call   c001e214 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001e739:	83 c4 10             	add    esp,0x10
c001e73c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e73f:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e743:	74 05                	je     c001e74a <Vm::faultHandler(regs*)+0x50b>
c001e745:	83 e8 02             	sub    eax,0x2
c001e748:	eb 03                	jmp    c001e74d <Vm::faultHandler(regs*)+0x50e>
c001e74a:	83 c0 02             	add    eax,0x2
c001e74d:	25 ff ff 00 00       	and    eax,0xffff
c001e752:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001e755:	e9 b1 02 00 00       	jmp    c001ea0b <Vm::faultHandler(regs*)+0x7cc>
c001e75a:	83 ec 0c             	sub    esp,0xc
c001e75d:	4b                   	dec    ebx
c001e75e:	68 eb b3 02 c0       	push   0xc002b3eb
c001e763:	e8 c1 41 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e768:	83 c4 10             	add    esp,0x10
c001e76b:	80 fb 05             	cmp    bl,0x5
c001e76e:	77 0a                	ja     c001e77a <Vm::faultHandler(regs*)+0x53b>
c001e770:	0f b6 db             	movzx  ebx,bl
c001e773:	ff 24 9d 5c b4 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd4ba4]
c001e77a:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e77e:	eb 1b                	jmp    c001e79b <Vm::faultHandler(regs*)+0x55c>
c001e780:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e784:	eb 15                	jmp    c001e79b <Vm::faultHandler(regs*)+0x55c>
c001e786:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e78a:	eb 0f                	jmp    c001e79b <Vm::faultHandler(regs*)+0x55c>
c001e78c:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e790:	eb 09                	jmp    c001e79b <Vm::faultHandler(regs*)+0x55c>
c001e792:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e795:	eb 04                	jmp    c001e79b <Vm::faultHandler(regs*)+0x55c>
c001e797:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e79b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e7a0:	74 0d                	je     c001e7af <Vm::faultHandler(regs*)+0x570>
c001e7a2:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001e7a9:	0f 87 8b 00 00 00    	ja     c001e83a <Vm::faultHandler(regs*)+0x5fb>
c001e7af:	53                   	push   ebx
c001e7b0:	53                   	push   ebx
c001e7b1:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001e7b5:	52                   	push   edx
c001e7b6:	50                   	push   eax
c001e7b7:	e8 0f fa ff ff       	call   c001e1cb <Vm::readByteFromReal(unsigned short, unsigned short)>
c001e7bc:	5e                   	pop    esi
c001e7bd:	0f b6 c0             	movzx  eax,al
c001e7c0:	5d                   	pop    ebp
c001e7c1:	50                   	push   eax
c001e7c2:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e7c6:	50                   	push   eax
c001e7c7:	e8 91 f6 ff ff       	call   c001de5d <Vm::outbv(unsigned short, unsigned char)>
c001e7cc:	83 c4 10             	add    esp,0x10
c001e7cf:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001e7d2:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e7d6:	74 03                	je     c001e7db <Vm::faultHandler(regs*)+0x59c>
c001e7d8:	48                   	dec    eax
c001e7d9:	eb 01                	jmp    c001e7dc <Vm::faultHandler(regs*)+0x59d>
c001e7db:	40                   	inc    eax
c001e7dc:	0f b7 c0             	movzx  eax,ax
c001e7df:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001e7e2:	e9 24 02 00 00       	jmp    c001ea0b <Vm::faultHandler(regs*)+0x7cc>
c001e7e7:	83 ec 0c             	sub    esp,0xc
c001e7ea:	4b                   	dec    ebx
c001e7eb:	68 eb b3 02 c0       	push   0xc002b3eb
c001e7f0:	e8 34 41 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e7f5:	83 c4 10             	add    esp,0x10
c001e7f8:	80 fb 05             	cmp    bl,0x5
c001e7fb:	77 0a                	ja     c001e807 <Vm::faultHandler(regs*)+0x5c8>
c001e7fd:	0f b6 db             	movzx  ebx,bl
c001e800:	ff 24 9d 74 b4 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd4b8c]
c001e807:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e80b:	eb 1b                	jmp    c001e828 <Vm::faultHandler(regs*)+0x5e9>
c001e80d:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e811:	eb 15                	jmp    c001e828 <Vm::faultHandler(regs*)+0x5e9>
c001e813:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e817:	eb 0f                	jmp    c001e828 <Vm::faultHandler(regs*)+0x5e9>
c001e819:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e81d:	eb 09                	jmp    c001e828 <Vm::faultHandler(regs*)+0x5e9>
c001e81f:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e822:	eb 04                	jmp    c001e828 <Vm::faultHandler(regs*)+0x5e9>
c001e824:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e828:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001e82b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e830:	74 39                	je     c001e86b <Vm::faultHandler(regs*)+0x62c>
c001e832:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001e838:	76 31                	jbe    c001e86b <Vm::faultHandler(regs*)+0x62c>
c001e83a:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e83e:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e842:	51                   	push   ecx
c001e843:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e847:	51                   	push   ecx
c001e848:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e84c:	51                   	push   ecx
c001e84d:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e851:	51                   	push   ecx
c001e852:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e856:	52                   	push   edx
c001e857:	50                   	push   eax
c001e858:	50                   	push   eax
c001e859:	68 b8 b3 02 c0       	push   0xc002b3b8
c001e85e:	e8 c6 40 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e863:	83 c4 20             	add    esp,0x20
c001e866:	e9 fb 01 00 00       	jmp    c001ea66 <Vm::faultHandler(regs*)+0x827>
c001e86b:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001e86e:	0f b7 d3             	movzx  edx,bx
c001e871:	81 e6 00 04 00 00    	and    esi,0x400
c001e877:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001e87a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e87f:	74 1d                	je     c001e89e <Vm::faultHandler(regs*)+0x65f>
c001e881:	51                   	push   ecx
c001e882:	51                   	push   ecx
c001e883:	52                   	push   edx
c001e884:	50                   	push   eax
c001e885:	e8 64 f9 ff ff       	call   c001e1ee <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001e88a:	83 c4 10             	add    esp,0x10
c001e88d:	89 ea                	mov    edx,ebp
c001e88f:	ef                   	out    dx,eax
c001e890:	85 f6                	test   esi,esi
c001e892:	74 05                	je     c001e899 <Vm::faultHandler(regs*)+0x65a>
c001e894:	83 eb 04             	sub    ebx,0x4
c001e897:	eb 21                	jmp    c001e8ba <Vm::faultHandler(regs*)+0x67b>
c001e899:	83 c3 04             	add    ebx,0x4
c001e89c:	eb 1c                	jmp    c001e8ba <Vm::faultHandler(regs*)+0x67b>
c001e89e:	51                   	push   ecx
c001e89f:	51                   	push   ecx
c001e8a0:	52                   	push   edx
c001e8a1:	50                   	push   eax
c001e8a2:	e8 35 f9 ff ff       	call   c001e1dc <Vm::readWordFromReal(unsigned short, unsigned short)>
c001e8a7:	83 c4 10             	add    esp,0x10
c001e8aa:	89 ea                	mov    edx,ebp
c001e8ac:	66 ef                	out    dx,ax
c001e8ae:	85 f6                	test   esi,esi
c001e8b0:	74 05                	je     c001e8b7 <Vm::faultHandler(regs*)+0x678>
c001e8b2:	83 eb 02             	sub    ebx,0x2
c001e8b5:	eb 03                	jmp    c001e8ba <Vm::faultHandler(regs*)+0x67b>
c001e8b7:	83 c3 02             	add    ebx,0x2
c001e8ba:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001e8c0:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001e8c3:	e9 43 01 00 00       	jmp    c001ea0b <Vm::faultHandler(regs*)+0x7cc>
c001e8c8:	53                   	push   ebx
c001e8c9:	53                   	push   ebx
c001e8ca:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e8ce:	50                   	push   eax
c001e8cf:	68 f1 b3 02 c0       	push   0xc002b3f1
c001e8d4:	e8 50 40 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e8d9:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e8e0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e8e4:	89 04 24             	mov    DWORD PTR [esp],eax
c001e8e7:	e8 5e f5 ff ff       	call   c001de4a <Vm::inbv(unsigned short)>
c001e8ec:	0f b6 c0             	movzx  eax,al
c001e8ef:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e8f2:	eb 5e                	jmp    c001e952 <Vm::faultHandler(regs*)+0x713>
c001e8f4:	51                   	push   ecx
c001e8f5:	51                   	push   ecx
c001e8f6:	53                   	push   ebx
c001e8f7:	68 f7 b3 02 c0       	push   0xc002b3f7
c001e8fc:	e8 28 40 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e901:	83 c4 10             	add    esp,0x10
c001e904:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e909:	74 07                	je     c001e912 <Vm::faultHandler(regs*)+0x6d3>
c001e90b:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e90f:	ed                   	in     eax,dx
c001e910:	eb 14                	jmp    c001e926 <Vm::faultHandler(regs*)+0x6e7>
c001e912:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001e915:	66 31 db             	xor    bx,bx
c001e918:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001e91b:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e91f:	66 ed                	in     ax,dx
c001e921:	0f b7 c0             	movzx  eax,ax
c001e924:	09 d8                	or     eax,ebx
c001e926:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e929:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e92d:	e9 dc 00 00 00       	jmp    c001ea0e <Vm::faultHandler(regs*)+0x7cf>
c001e932:	50                   	push   eax
c001e933:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e936:	53                   	push   ebx
c001e937:	68 fd b3 02 c0       	push   0xc002b3fd
c001e93c:	e8 e8 3f ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e941:	58                   	pop    eax
c001e942:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e946:	5a                   	pop    edx
c001e947:	50                   	push   eax
c001e948:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e94c:	50                   	push   eax
c001e94d:	e8 0b f5 ff ff       	call   c001de5d <Vm::outbv(unsigned short, unsigned char)>
c001e952:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e956:	e9 85 00 00 00       	jmp    c001e9e0 <Vm::faultHandler(regs*)+0x7a1>
c001e95b:	50                   	push   eax
c001e95c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e95f:	53                   	push   ebx
c001e960:	68 06 b4 02 c0       	push   0xc002b406
c001e965:	e8 bf 3f ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e96a:	83 c4 10             	add    esp,0x10
c001e96d:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e971:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e976:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e979:	74 03                	je     c001e97e <Vm::faultHandler(regs*)+0x73f>
c001e97b:	ef                   	out    dx,eax
c001e97c:	eb ab                	jmp    c001e929 <Vm::faultHandler(regs*)+0x6ea>
c001e97e:	66 ef                	out    dx,ax
c001e980:	eb a7                	jmp    c001e929 <Vm::faultHandler(regs*)+0x6ea>
c001e982:	55                   	push   ebp
c001e983:	55                   	push   ebp
c001e984:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e987:	68 0f b4 02 c0       	push   0xc002b40f
c001e98c:	e8 98 3f ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e991:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e998:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e99c:	89 04 24             	mov    DWORD PTR [esp],eax
c001e99f:	e8 a6 f4 ff ff       	call   c001de4a <Vm::inbv(unsigned short)>
c001e9a4:	0f b6 c0             	movzx  eax,al
c001e9a7:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e9aa:	eb 31                	jmp    c001e9dd <Vm::faultHandler(regs*)+0x79e>
c001e9ac:	56                   	push   esi
c001e9ad:	56                   	push   esi
c001e9ae:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e9b1:	68 15 b4 02 c0       	push   0xc002b415
c001e9b6:	e8 6e 3f ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e9bb:	83 c4 10             	add    esp,0x10
c001e9be:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e9c1:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e9c6:	74 03                	je     c001e9cb <Vm::faultHandler(regs*)+0x78c>
c001e9c8:	ed                   	in     eax,dx
c001e9c9:	eb 0d                	jmp    c001e9d8 <Vm::faultHandler(regs*)+0x799>
c001e9cb:	66 ed                	in     ax,dx
c001e9cd:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001e9d0:	0f b7 c0             	movzx  eax,ax
c001e9d3:	66 31 d2             	xor    dx,dx
c001e9d6:	09 d0                	or     eax,edx
c001e9d8:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e9db:	eb 2e                	jmp    c001ea0b <Vm::faultHandler(regs*)+0x7cc>
c001e9dd:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e9e0:	83 c4 10             	add    esp,0x10
c001e9e3:	eb 29                	jmp    c001ea0e <Vm::faultHandler(regs*)+0x7cf>
c001e9e5:	50                   	push   eax
c001e9e6:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e9e9:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e9ec:	68 24 b4 02 c0       	push   0xc002b424
c001e9f1:	e8 33 3f ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001e9f6:	83 c4 10             	add    esp,0x10
c001e9f9:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e9fc:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ea01:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001ea04:	74 03                	je     c001ea09 <Vm::faultHandler(regs*)+0x7ca>
c001ea06:	ef                   	out    dx,eax
c001ea07:	eb 02                	jmp    c001ea0b <Vm::faultHandler(regs*)+0x7cc>
c001ea09:	66 ef                	out    dx,ax
c001ea0b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ea0e:	b0 01                	mov    al,0x1
c001ea10:	eb 56                	jmp    c001ea68 <Vm::faultHandler(regs*)+0x829>
c001ea12:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001ea16:	51                   	push   ecx
c001ea17:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001ea1b:	51                   	push   ecx
c001ea1c:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001ea20:	51                   	push   ecx
c001ea21:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001ea25:	51                   	push   ecx
c001ea26:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ea2a:	52                   	push   edx
c001ea2b:	50                   	push   eax
c001ea2c:	50                   	push   eax
c001ea2d:	68 2d b4 02 c0       	push   0xc002b42d
c001ea32:	e8 f2 3e ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001ea37:	83 c4 20             	add    esp,0x20
c001ea3a:	83 ec 0c             	sub    esp,0xc
c001ea3d:	6a 60                	push   0x60
c001ea3f:	e8 06 f4 ff ff       	call   c001de4a <Vm::inbv(unsigned short)>
c001ea44:	83 c4 10             	add    esp,0x10
c001ea47:	3c 1c                	cmp    al,0x1c
c001ea49:	74 04                	je     c001ea4f <Vm::faultHandler(regs*)+0x810>
c001ea4b:	3c 5a                	cmp    al,0x5a
c001ea4d:	75 eb                	jne    c001ea3a <Vm::faultHandler(regs*)+0x7fb>
c001ea4f:	3c 1c                	cmp    al,0x1c
c001ea51:	74 04                	je     c001ea57 <Vm::faultHandler(regs*)+0x818>
c001ea53:	3c 5a                	cmp    al,0x5a
c001ea55:	75 0f                	jne    c001ea66 <Vm::faultHandler(regs*)+0x827>
c001ea57:	83 ec 0c             	sub    esp,0xc
c001ea5a:	6a 60                	push   0x60
c001ea5c:	e8 e9 f3 ff ff       	call   c001de4a <Vm::inbv(unsigned short)>
c001ea61:	83 c4 10             	add    esp,0x10
c001ea64:	eb e9                	jmp    c001ea4f <Vm::faultHandler(regs*)+0x810>
c001ea66:	31 c0                	xor    eax,eax
c001ea68:	83 c4 1c             	add    esp,0x1c
c001ea6b:	5b                   	pop    ebx
c001ea6c:	5e                   	pop    esi
c001ea6d:	5f                   	pop    edi
c001ea6e:	5d                   	pop    ebp
c001ea6f:	c3                   	ret    

c001ea70 <Vm::fpuInternalTo32(unsigned long long)>:
c001ea70:	57                   	push   edi
c001ea71:	56                   	push   esi
c001ea72:	53                   	push   ebx
c001ea73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea7b:	89 d6                	mov    esi,edx
c001ea7d:	89 d7                	mov    edi,edx
c001ea7f:	89 c1                	mov    ecx,eax
c001ea81:	c1 ef 14             	shr    edi,0x14
c001ea84:	89 d3                	mov    ebx,edx
c001ea86:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ea8c:	31 d2                	xor    edx,edx
c001ea8e:	89 f8                	mov    eax,edi
c001ea90:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ea96:	bf ff 00 00 00       	mov    edi,0xff
c001ea9b:	05 80 fc ff ff       	add    eax,0xfffffc80
c001eaa0:	83 d2 ff             	adc    edx,0xffffffff
c001eaa3:	39 c7                	cmp    edi,eax
c001eaa5:	bf 00 00 00 00       	mov    edi,0x0
c001eaaa:	19 d7                	sbb    edi,edx
c001eaac:	72 15                	jb     c001eac3 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001eaae:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001eab2:	c1 e0 17             	shl    eax,0x17
c001eab5:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001eabb:	09 f1                	or     ecx,esi
c001eabd:	09 c1                	or     ecx,eax
c001eabf:	89 cf                	mov    edi,ecx
c001eac1:	eb 02                	jmp    c001eac5 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001eac3:	31 ff                	xor    edi,edi
c001eac5:	89 f8                	mov    eax,edi
c001eac7:	5b                   	pop    ebx
c001eac8:	5e                   	pop    esi
c001eac9:	5f                   	pop    edi
c001eaca:	c3                   	ret    

c001eacb <Vm::fpuInternalTo64(unsigned long long)>:
c001eacb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eacf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ead3:	c3                   	ret    

c001ead4 <Vm::fpu32ToInternal(unsigned int)>:
c001ead4:	57                   	push   edi
c001ead5:	31 ff                	xor    edi,edi
c001ead7:	56                   	push   esi
c001ead8:	53                   	push   ebx
c001ead9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eadd:	89 cb                	mov    ebx,ecx
c001eadf:	89 ce                	mov    esi,ecx
c001eae1:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001eae7:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001eaed:	c1 e9 17             	shr    ecx,0x17
c001eaf0:	89 f0                	mov    eax,esi
c001eaf2:	0f b6 d1             	movzx  edx,cl
c001eaf5:	81 c2 80 03 00 00    	add    edx,0x380
c001eafb:	89 d1                	mov    ecx,edx
c001eafd:	89 fa                	mov    edx,edi
c001eaff:	c1 e1 14             	shl    ecx,0x14
c001eb02:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001eb06:	c1 e0 1d             	shl    eax,0x1d
c001eb09:	89 d7                	mov    edi,edx
c001eb0b:	89 c6                	mov    esi,eax
c001eb0d:	89 ca                	mov    edx,ecx
c001eb0f:	89 f0                	mov    eax,esi
c001eb11:	09 fa                	or     edx,edi
c001eb13:	09 da                	or     edx,ebx
c001eb15:	5b                   	pop    ebx
c001eb16:	5e                   	pop    esi
c001eb17:	5f                   	pop    edi
c001eb18:	c3                   	ret    

c001eb19 <Vm::fpu64ToInternal(unsigned long long)>:
c001eb19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb1d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001eb21:	c3                   	ret    

c001eb22 <Vm::fpuFloatToLong(unsigned long long)>:
c001eb22:	57                   	push   edi
c001eb23:	31 c0                	xor    eax,eax
c001eb25:	56                   	push   esi
c001eb26:	31 d2                	xor    edx,edx
c001eb28:	53                   	push   ebx
c001eb29:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eb2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eb31:	89 d9                	mov    ecx,ebx
c001eb33:	c1 e9 14             	shr    ecx,0x14
c001eb36:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001eb3c:	89 cf                	mov    edi,ecx
c001eb3e:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001eb44:	78 33                	js     c001eb79 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001eb46:	89 d9                	mov    ecx,ebx
c001eb48:	89 f0                	mov    eax,esi
c001eb4a:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001eb50:	81 c9 00 00 10 00    	or     ecx,0x100000
c001eb56:	89 ca                	mov    edx,ecx
c001eb58:	b9 34 00 00 00       	mov    ecx,0x34
c001eb5d:	29 f9                	sub    ecx,edi
c001eb5f:	0f ad d0             	shrd   eax,edx,cl
c001eb62:	d3 fa                	sar    edx,cl
c001eb64:	f6 c1 20             	test   cl,0x20
c001eb67:	74 05                	je     c001eb6e <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001eb69:	89 d0                	mov    eax,edx
c001eb6b:	c1 fa 1f             	sar    edx,0x1f
c001eb6e:	85 db                	test   ebx,ebx
c001eb70:	79 07                	jns    c001eb79 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001eb72:	f7 d8                	neg    eax
c001eb74:	83 d2 00             	adc    edx,0x0
c001eb77:	f7 da                	neg    edx
c001eb79:	5b                   	pop    ebx
c001eb7a:	5e                   	pop    esi
c001eb7b:	5f                   	pop    edi
c001eb7c:	c3                   	ret    

c001eb7d <Vm::fpuULongToFloat(unsigned long long)>:
c001eb7d:	57                   	push   edi
c001eb7e:	31 c9                	xor    ecx,ecx
c001eb80:	56                   	push   esi
c001eb81:	53                   	push   ebx
c001eb82:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eb86:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001eb8a:	0f ba e7 14          	bt     edi,0x14
c001eb8e:	72 07                	jb     c001eb97 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001eb90:	01 f6                	add    esi,esi
c001eb92:	11 ff                	adc    edi,edi
c001eb94:	41                   	inc    ecx
c001eb95:	eb f3                	jmp    c001eb8a <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001eb97:	89 fa                	mov    edx,edi
c001eb99:	89 f0                	mov    eax,esi
c001eb9b:	bb 33 04 00 00       	mov    ebx,0x433
c001eba0:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001eba6:	29 cb                	sub    ebx,ecx
c001eba8:	89 d9                	mov    ecx,ebx
c001ebaa:	5b                   	pop    ebx
c001ebab:	c1 e1 14             	shl    ecx,0x14
c001ebae:	5e                   	pop    esi
c001ebaf:	09 ca                	or     edx,ecx
c001ebb1:	5f                   	pop    edi
c001ebb2:	c3                   	ret    

c001ebb3 <Vm::fpuLongToFloat(long long)>:
c001ebb3:	56                   	push   esi
c001ebb4:	31 c0                	xor    eax,eax
c001ebb6:	53                   	push   ebx
c001ebb7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ebbb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ebbf:	39 c8                	cmp    eax,ecx
c001ebc1:	19 d8                	sbb    eax,ebx
c001ebc3:	7d 04                	jge    c001ebc9 <Vm::fpuLongToFloat(long long)+0x16>
c001ebc5:	31 f6                	xor    esi,esi
c001ebc7:	eb 0c                	jmp    c001ebd5 <Vm::fpuLongToFloat(long long)+0x22>
c001ebc9:	f7 d9                	neg    ecx
c001ebcb:	be 01 00 00 00       	mov    esi,0x1
c001ebd0:	83 d3 00             	adc    ebx,0x0
c001ebd3:	f7 db                	neg    ebx
c001ebd5:	31 c0                	xor    eax,eax
c001ebd7:	0f ba e3 14          	bt     ebx,0x14
c001ebdb:	72 07                	jb     c001ebe4 <Vm::fpuLongToFloat(long long)+0x31>
c001ebdd:	01 c9                	add    ecx,ecx
c001ebdf:	11 db                	adc    ebx,ebx
c001ebe1:	40                   	inc    eax
c001ebe2:	eb f3                	jmp    c001ebd7 <Vm::fpuLongToFloat(long long)+0x24>
c001ebe4:	ba 33 04 00 00       	mov    edx,0x433
c001ebe9:	29 c2                	sub    edx,eax
c001ebeb:	89 c8                	mov    eax,ecx
c001ebed:	c1 e2 14             	shl    edx,0x14
c001ebf0:	89 d9                	mov    ecx,ebx
c001ebf2:	89 f3                	mov    ebx,esi
c001ebf4:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ebfa:	09 ca                	or     edx,ecx
c001ebfc:	84 db                	test   bl,bl
c001ebfe:	74 06                	je     c001ec06 <Vm::fpuLongToFloat(long long)+0x53>
c001ec00:	81 ca 00 00 00 80    	or     edx,0x80000000
c001ec06:	5b                   	pop    ebx
c001ec07:	5e                   	pop    esi
c001ec08:	c3                   	ret    

c001ec09 <Vm::fpuGet0()>:
c001ec09:	31 c0                	xor    eax,eax
c001ec0b:	31 d2                	xor    edx,edx
c001ec0d:	c3                   	ret    

c001ec0e <Vm::fpuGet1()>:
c001ec0e:	b8 01 00 00 00       	mov    eax,0x1
c001ec13:	31 d2                	xor    edx,edx
c001ec15:	c3                   	ret    

c001ec16 <Vm::fpuGetPi()>:
c001ec16:	b8 03 00 00 00       	mov    eax,0x3
c001ec1b:	31 d2                	xor    edx,edx
c001ec1d:	c3                   	ret    

c001ec1e <Vm::fpuGetLog2E()>:
c001ec1e:	83 ec 18             	sub    esp,0x18
c001ec21:	68 8c b4 02 c0       	push   0xc002b48c
c001ec26:	e8 54 b0 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001ec2b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ec30:	31 d2                	xor    edx,edx
c001ec32:	83 c4 1c             	add    esp,0x1c
c001ec35:	c3                   	ret    

c001ec36 <Vm::fpuGetLogE2()>:
c001ec36:	83 ec 18             	sub    esp,0x18
c001ec39:	68 98 b4 02 c0       	push   0xc002b498
c001ec3e:	e8 3c b0 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001ec43:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ec48:	31 d2                	xor    edx,edx
c001ec4a:	83 c4 1c             	add    esp,0x1c
c001ec4d:	c3                   	ret    

c001ec4e <Vm::fpuGetLog210()>:
c001ec4e:	83 ec 18             	sub    esp,0x18
c001ec51:	68 a4 b4 02 c0       	push   0xc002b4a4
c001ec56:	e8 24 b0 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001ec5b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ec60:	31 d2                	xor    edx,edx
c001ec62:	83 c4 1c             	add    esp,0x1c
c001ec65:	c3                   	ret    

c001ec66 <Vm::fpuGetLog102()>:
c001ec66:	83 ec 18             	sub    esp,0x18
c001ec69:	68 b1 b4 02 c0       	push   0xc002b4b1
c001ec6e:	e8 0c b0 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001ec73:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ec78:	31 d2                	xor    edx,edx
c001ec7a:	83 c4 1c             	add    esp,0x1c
c001ec7d:	c3                   	ret    

c001ec7e <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001ec7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec82:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ec86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec8a:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001ec8e:	0f 92 c0             	setb   al
c001ec91:	c3                   	ret    

c001ec92 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001ec92:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ec96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec9a:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001ec9e:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001eca2:	09 c2                	or     edx,eax
c001eca4:	0f 94 c0             	sete   al
c001eca7:	c3                   	ret    

c001eca8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001eca8:	57                   	push   edi
c001eca9:	56                   	push   esi
c001ecaa:	53                   	push   ebx
c001ecab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ecaf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ecb3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ecb7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ecbb:	57                   	push   edi
c001ecbc:	56                   	push   esi
c001ecbd:	53                   	push   ebx
c001ecbe:	51                   	push   ecx
c001ecbf:	e8 ce ff ff ff       	call   c001ec92 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001ecc4:	83 c4 10             	add    esp,0x10
c001ecc7:	88 c2                	mov    dl,al
c001ecc9:	31 c0                	xor    eax,eax
c001eccb:	84 d2                	test   dl,dl
c001eccd:	75 0c                	jne    c001ecdb <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001eccf:	57                   	push   edi
c001ecd0:	56                   	push   esi
c001ecd1:	53                   	push   ebx
c001ecd2:	51                   	push   ecx
c001ecd3:	e8 a6 ff ff ff       	call   c001ec7e <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001ecd8:	83 c4 10             	add    esp,0x10
c001ecdb:	83 e0 01             	and    eax,0x1
c001ecde:	5b                   	pop    ebx
c001ecdf:	88 c1                	mov    cl,al
c001ece1:	83 e2 01             	and    edx,0x1
c001ece4:	a0 a1 e6 02 c0       	mov    al,ds:0xc002e6a1
c001ece9:	c1 e2 06             	shl    edx,0x6
c001ecec:	83 e0 ba             	and    eax,0xffffffba
c001ecef:	5e                   	pop    esi
c001ecf0:	09 c8                	or     eax,ecx
c001ecf2:	5f                   	pop    edi
c001ecf3:	09 d0                	or     eax,edx
c001ecf5:	a2 a1 e6 02 c0       	mov    ds:0xc002e6a1,al
c001ecfa:	c3                   	ret    

c001ecfb <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001ecfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ecff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed03:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ed07:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001ed0b:	c3                   	ret    

c001ed0c <Vm::fpuAbs(unsigned long long)>:
c001ed0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ed14:	c3                   	ret    

c001ed15 <Vm::fpuChs(unsigned long long)>:
c001ed15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed19:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ed1d:	f7 d8                	neg    eax
c001ed1f:	83 d2 00             	adc    edx,0x0
c001ed22:	f7 da                	neg    edx
c001ed24:	c3                   	ret    

c001ed25 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001ed25:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001ed29:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001ed2e:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001ed32:	eb c7                	jmp    c001ecfb <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001ed34 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001ed34:	53                   	push   ebx
c001ed35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed39:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed3d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed41:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ed45:	0f af ca             	imul   ecx,edx
c001ed48:	0f af d8             	imul   ebx,eax
c001ed4b:	f7 e2                	mul    edx
c001ed4d:	01 d9                	add    ecx,ebx
c001ed4f:	5b                   	pop    ebx
c001ed50:	01 ca                	add    edx,ecx
c001ed52:	c3                   	ret    

c001ed53 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001ed53:	83 ec 0c             	sub    esp,0xc
c001ed56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed66:	e8 31 6b 00 00       	call   c002589c <__udivdi3>
c001ed6b:	83 c4 1c             	add    esp,0x1c
c001ed6e:	c3                   	ret    

c001ed6f <Vm::fpuSquare(unsigned long long)>:
c001ed6f:	50                   	push   eax
c001ed70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ed78:	52                   	push   edx
c001ed79:	50                   	push   eax
c001ed7a:	52                   	push   edx
c001ed7b:	50                   	push   eax
c001ed7c:	e8 b3 ff ff ff       	call   c001ed34 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ed81:	83 c4 14             	add    esp,0x14
c001ed84:	c3                   	ret    

c001ed85 <Vm::fpuGetReg(int)>:
c001ed85:	83 ec 0c             	sub    esp,0xc
c001ed88:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ed8d:	76 10                	jbe    c001ed9f <Vm::fpuGetReg(int)+0x1a>
c001ed8f:	83 ec 0c             	sub    esp,0xc
c001ed92:	68 be b4 02 c0       	push   0xc002b4be
c001ed97:	e8 e3 ae ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001ed9c:	83 c4 10             	add    esp,0x10
c001ed9f:	a0 a1 e6 02 c0       	mov    al,ds:0xc002e6a1
c001eda4:	b9 08 00 00 00       	mov    ecx,0x8
c001eda9:	c0 e8 03             	shr    al,0x3
c001edac:	83 e0 07             	and    eax,0x7
c001edaf:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001edb3:	99                   	cdq    
c001edb4:	f7 f9                	idiv   ecx
c001edb6:	8b 04 d5 a4 e6 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd195c]
c001edbd:	8b 14 d5 a8 e6 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd1958]
c001edc4:	83 c4 0c             	add    esp,0xc
c001edc7:	c3                   	ret    

c001edc8 <Vm::fpuSetReg(int, unsigned long long)>:
c001edc8:	57                   	push   edi
c001edc9:	56                   	push   esi
c001edca:	52                   	push   edx
c001edcb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001edcf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001edd3:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001edd8:	76 10                	jbe    c001edea <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001edda:	83 ec 0c             	sub    esp,0xc
c001eddd:	68 d1 b4 02 c0       	push   0xc002b4d1
c001ede2:	e8 98 ae ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001ede7:	83 c4 10             	add    esp,0x10
c001edea:	a0 a1 e6 02 c0       	mov    al,ds:0xc002e6a1
c001edef:	b9 08 00 00 00       	mov    ecx,0x8
c001edf4:	c0 e8 03             	shr    al,0x3
c001edf7:	83 e0 07             	and    eax,0x7
c001edfa:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001edfe:	99                   	cdq    
c001edff:	f7 f9                	idiv   ecx
c001ee01:	89 34 d5 a4 e6 02 c0 	mov    DWORD PTR [edx*8-0x3ffd195c],esi
c001ee08:	89 3c d5 a8 e6 02 c0 	mov    DWORD PTR [edx*8-0x3ffd1958],edi
c001ee0f:	58                   	pop    eax
c001ee10:	5e                   	pop    esi
c001ee11:	5f                   	pop    edi
c001ee12:	c3                   	ret    

c001ee13 <Vm::fpuPush(unsigned long long)>:
c001ee13:	a0 a1 e6 02 c0       	mov    al,ds:0xc002e6a1
c001ee18:	c0 e8 03             	shr    al,0x3
c001ee1b:	83 e0 07             	and    eax,0x7
c001ee1e:	83 c0 07             	add    eax,0x7
c001ee21:	88 c2                	mov    dl,al
c001ee23:	83 e0 07             	and    eax,0x7
c001ee26:	83 e2 07             	and    edx,0x7
c001ee29:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001ee30:	8a 15 a1 e6 02 c0    	mov    dl,BYTE PTR ds:0xc002e6a1
c001ee36:	83 e2 c7             	and    edx,0xffffffc7
c001ee39:	09 ca                	or     edx,ecx
c001ee3b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ee3f:	88 15 a1 e6 02 c0    	mov    BYTE PTR ds:0xc002e6a1,dl
c001ee45:	89 0c c5 a8 e6 02 c0 	mov    DWORD PTR [eax*8-0x3ffd1958],ecx
c001ee4c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ee50:	89 14 c5 a4 e6 02 c0 	mov    DWORD PTR [eax*8-0x3ffd195c],edx
c001ee57:	a1 e4 e6 02 c0       	mov    eax,ds:0xc002e6e4
c001ee5c:	83 f8 08             	cmp    eax,0x8
c001ee5f:	75 08                	jne    c001ee69 <Vm::fpuPush(unsigned long long)+0x56>
c001ee61:	80 0d a0 e6 02 c0 40 	or     BYTE PTR ds:0xc002e6a0,0x40
c001ee68:	c3                   	ret    
c001ee69:	40                   	inc    eax
c001ee6a:	a3 e4 e6 02 c0       	mov    ds:0xc002e6e4,eax
c001ee6f:	c3                   	ret    

c001ee70 <Vm::fpuPop()>:
c001ee70:	8a 0d a1 e6 02 c0    	mov    cl,BYTE PTR ds:0xc002e6a1
c001ee76:	53                   	push   ebx
c001ee77:	c0 e9 03             	shr    cl,0x3
c001ee7a:	8a 1d a1 e6 02 c0    	mov    bl,BYTE PTR ds:0xc002e6a1
c001ee80:	83 e1 07             	and    ecx,0x7
c001ee83:	83 e3 c7             	and    ebx,0xffffffc7
c001ee86:	8b 04 cd a4 e6 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd195c]
c001ee8d:	8b 14 cd a8 e6 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd1958]
c001ee94:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001ee9b:	83 e1 38             	and    ecx,0x38
c001ee9e:	09 d9                	or     ecx,ebx
c001eea0:	88 0d a1 e6 02 c0    	mov    BYTE PTR ds:0xc002e6a1,cl
c001eea6:	8b 0d e4 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e6e4
c001eeac:	85 c9                	test   ecx,ecx
c001eeae:	74 09                	je     c001eeb9 <Vm::fpuPop()+0x49>
c001eeb0:	49                   	dec    ecx
c001eeb1:	89 0d e4 e6 02 c0    	mov    DWORD PTR ds:0xc002e6e4,ecx
c001eeb7:	eb 07                	jmp    c001eec0 <Vm::fpuPop()+0x50>
c001eeb9:	80 0d a0 e6 02 c0 40 	or     BYTE PTR ds:0xc002e6a0,0x40
c001eec0:	5b                   	pop    ebx
c001eec1:	c3                   	ret    

c001eec2 <Vm::x87Handler(regs*)>:
c001eec2:	55                   	push   ebp
c001eec3:	57                   	push   edi
c001eec4:	56                   	push   esi
c001eec5:	53                   	push   ebx
c001eec6:	83 ec 1c             	sub    esp,0x1c
c001eec9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001eecd:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001eed2:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001eed5:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001eedd:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001eee1:	50                   	push   eax
c001eee2:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001eee6:	50                   	push   eax
c001eee7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001eeeb:	50                   	push   eax
c001eeec:	53                   	push   ebx
c001eeed:	e8 be a5 ff ff       	call   c00194b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001eef2:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001eef5:	83 c4 10             	add    esp,0x10
c001eef8:	89 c6                	mov    esi,eax
c001eefa:	80 fa d9             	cmp    dl,0xd9
c001eefd:	0f 85 52 01 00 00    	jne    c001f055 <Vm::x87Handler(regs*)+0x193>
c001ef03:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef07:	8d 50 20             	lea    edx,[eax+0x20]
c001ef0a:	80 fa 0e             	cmp    dl,0xe
c001ef0d:	0f 87 86 00 00 00    	ja     c001ef99 <Vm::x87Handler(regs*)+0xd7>
c001ef13:	0f b6 d2             	movzx  edx,dl
c001ef16:	ff 24 95 e4 b4 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd4b1c]
c001ef1d:	e8 e7 fc ff ff       	call   c001ec09 <Vm::fpuGet0()>
c001ef22:	eb 05                	jmp    c001ef29 <Vm::x87Handler(regs*)+0x67>
c001ef24:	e8 e5 fc ff ff       	call   c001ec0e <Vm::fpuGet1()>
c001ef29:	57                   	push   edi
c001ef2a:	57                   	push   edi
c001ef2b:	52                   	push   edx
c001ef2c:	50                   	push   eax
c001ef2d:	e8 e1 fe ff ff       	call   c001ee13 <Vm::fpuPush(unsigned long long)>
c001ef32:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ef36:	83 c4 10             	add    esp,0x10
c001ef39:	b0 01                	mov    al,0x1
c001ef3b:	e9 e3 09 00 00       	jmp    c001f923 <Vm::x87Handler(regs*)+0xa61>
c001ef40:	83 ec 0c             	sub    esp,0xc
c001ef43:	6a 00                	push   0x0
c001ef45:	e8 3b fe ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001ef4a:	59                   	pop    ecx
c001ef4b:	5e                   	pop    esi
c001ef4c:	52                   	push   edx
c001ef4d:	50                   	push   eax
c001ef4e:	e8 c2 fd ff ff       	call   c001ed15 <Vm::fpuChs(unsigned long long)>
c001ef53:	eb 13                	jmp    c001ef68 <Vm::x87Handler(regs*)+0xa6>
c001ef55:	83 ec 0c             	sub    esp,0xc
c001ef58:	6a 00                	push   0x0
c001ef5a:	e8 26 fe ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001ef5f:	5f                   	pop    edi
c001ef60:	5d                   	pop    ebp
c001ef61:	52                   	push   edx
c001ef62:	50                   	push   eax
c001ef63:	e8 a4 fd ff ff       	call   c001ed0c <Vm::fpuAbs(unsigned long long)>
c001ef68:	83 c4 0c             	add    esp,0xc
c001ef6b:	52                   	push   edx
c001ef6c:	50                   	push   eax
c001ef6d:	6a 00                	push   0x0
c001ef6f:	e8 54 fe ff ff       	call   c001edc8 <Vm::fpuSetReg(int, unsigned long long)>
c001ef74:	eb bc                	jmp    c001ef32 <Vm::x87Handler(regs*)+0x70>
c001ef76:	e8 d3 fc ff ff       	call   c001ec4e <Vm::fpuGetLog210()>
c001ef7b:	eb ac                	jmp    c001ef29 <Vm::x87Handler(regs*)+0x67>
c001ef7d:	e8 9c fc ff ff       	call   c001ec1e <Vm::fpuGetLog2E()>
c001ef82:	eb a5                	jmp    c001ef29 <Vm::x87Handler(regs*)+0x67>
c001ef84:	e8 8d fc ff ff       	call   c001ec16 <Vm::fpuGetPi()>
c001ef89:	eb 9e                	jmp    c001ef29 <Vm::x87Handler(regs*)+0x67>
c001ef8b:	e8 d6 fc ff ff       	call   c001ec66 <Vm::fpuGetLog102()>
c001ef90:	eb 97                	jmp    c001ef29 <Vm::x87Handler(regs*)+0x67>
c001ef92:	e8 9f fc ff ff       	call   c001ec36 <Vm::fpuGetLogE2()>
c001ef97:	eb 90                	jmp    c001ef29 <Vm::x87Handler(regs*)+0x67>
c001ef99:	8d 50 40             	lea    edx,[eax+0x40]
c001ef9c:	80 fa 07             	cmp    dl,0x7
c001ef9f:	77 15                	ja     c001efb6 <Vm::x87Handler(regs*)+0xf4>
c001efa1:	83 ec 0c             	sub    esp,0xc
c001efa4:	2d c0 00 00 00       	sub    eax,0xc0
c001efa9:	50                   	push   eax
c001efaa:	e8 d6 fd ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001efaf:	59                   	pop    ecx
c001efb0:	5e                   	pop    esi
c001efb1:	e9 75 ff ff ff       	jmp    c001ef2b <Vm::x87Handler(regs*)+0x69>
c001efb6:	8d 50 38             	lea    edx,[eax+0x38]
c001efb9:	80 fa 07             	cmp    dl,0x7
c001efbc:	77 3c                	ja     c001effa <Vm::x87Handler(regs*)+0x138>
c001efbe:	83 ec 0c             	sub    esp,0xc
c001efc1:	2d c8 00 00 00       	sub    eax,0xc8
c001efc6:	50                   	push   eax
c001efc7:	e8 b9 fd ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001efcc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001efd3:	89 c6                	mov    esi,eax
c001efd5:	89 d7                	mov    edi,edx
c001efd7:	e8 a9 fd ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001efdc:	83 c4 0c             	add    esp,0xc
c001efdf:	52                   	push   edx
c001efe0:	50                   	push   eax
c001efe1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efe5:	2d c8 00 00 00       	sub    eax,0xc8
c001efea:	50                   	push   eax
c001efeb:	e8 d8 fd ff ff       	call   c001edc8 <Vm::fpuSetReg(int, unsigned long long)>
c001eff0:	83 c4 0c             	add    esp,0xc
c001eff3:	57                   	push   edi
c001eff4:	56                   	push   esi
c001eff5:	e9 73 ff ff ff       	jmp    c001ef6d <Vm::x87Handler(regs*)+0xab>
c001effa:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001effe:	84 d2                	test   dl,dl
c001f000:	75 0f                	jne    c001f011 <Vm::x87Handler(regs*)+0x14f>
c001f002:	83 ec 0c             	sub    esp,0xc
c001f005:	ff 36                	push   DWORD PTR [esi]
c001f007:	e8 c8 fa ff ff       	call   c001ead4 <Vm::fpu32ToInternal(unsigned int)>
c001f00c:	e9 bf 00 00 00       	jmp    c001f0d0 <Vm::x87Handler(regs*)+0x20e>
c001f011:	80 fa 03             	cmp    dl,0x3
c001f014:	75 13                	jne    c001f029 <Vm::x87Handler(regs*)+0x167>
c001f016:	e8 55 fe ff ff       	call   c001ee70 <Vm::fpuPop()>
c001f01b:	55                   	push   ebp
c001f01c:	55                   	push   ebp
c001f01d:	52                   	push   edx
c001f01e:	50                   	push   eax
c001f01f:	e8 4c fa ff ff       	call   c001ea70 <Vm::fpuInternalTo32(unsigned long long)>
c001f024:	e9 88 00 00 00       	jmp    c001f0b1 <Vm::x87Handler(regs*)+0x1ef>
c001f029:	80 fa 05             	cmp    dl,0x5
c001f02c:	75 0e                	jne    c001f03c <Vm::x87Handler(regs*)+0x17a>
c001f02e:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f031:	66 a3 a2 e6 02 c0    	mov    ds:0xc002e6a2,ax
c001f037:	e9 df 00 00 00       	jmp    c001f11b <Vm::x87Handler(regs*)+0x259>
c001f03c:	31 c0                	xor    eax,eax
c001f03e:	80 fa 07             	cmp    dl,0x7
c001f041:	0f 85 dc 08 00 00    	jne    c001f923 <Vm::x87Handler(regs*)+0xa61>
c001f047:	66 a1 a2 e6 02 c0    	mov    ax,ds:0xc002e6a2
c001f04d:	66 89 06             	mov    WORD PTR [esi],ax
c001f050:	e9 c6 00 00 00       	jmp    c001f11b <Vm::x87Handler(regs*)+0x259>
c001f055:	80 fa d8             	cmp    dl,0xd8
c001f058:	0f 84 c9 00 00 00    	je     c001f127 <Vm::x87Handler(regs*)+0x265>
c001f05e:	80 fa dc             	cmp    dl,0xdc
c001f061:	0f 84 0d 02 00 00    	je     c001f274 <Vm::x87Handler(regs*)+0x3b2>
c001f067:	80 fa de             	cmp    dl,0xde
c001f06a:	0f 84 cd 02 00 00    	je     c001f33d <Vm::x87Handler(regs*)+0x47b>
c001f070:	80 fa dd             	cmp    dl,0xdd
c001f073:	0f 84 5f 04 00 00    	je     c001f4d8 <Vm::x87Handler(regs*)+0x616>
c001f079:	80 fa da             	cmp    dl,0xda
c001f07c:	0f 84 24 05 00 00    	je     c001f5a6 <Vm::x87Handler(regs*)+0x6e4>
c001f082:	80 fa df             	cmp    dl,0xdf
c001f085:	0f 84 68 05 00 00    	je     c001f5f3 <Vm::x87Handler(regs*)+0x731>
c001f08b:	31 c0                	xor    eax,eax
c001f08d:	80 fa db             	cmp    dl,0xdb
c001f090:	0f 85 8d 08 00 00    	jne    c001f923 <Vm::x87Handler(regs*)+0xa61>
c001f096:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f09a:	80 fa 03             	cmp    dl,0x3
c001f09d:	0f 85 70 06 00 00    	jne    c001f713 <Vm::x87Handler(regs*)+0x851>
c001f0a3:	e8 c8 fd ff ff       	call   c001ee70 <Vm::fpuPop()>
c001f0a8:	55                   	push   ebp
c001f0a9:	55                   	push   ebp
c001f0aa:	52                   	push   edx
c001f0ab:	50                   	push   eax
c001f0ac:	e8 71 fa ff ff       	call   c001eb22 <Vm::fpuFloatToLong(unsigned long long)>
c001f0b1:	83 c4 10             	add    esp,0x10
c001f0b4:	89 06                	mov    DWORD PTR [esi],eax
c001f0b6:	eb 63                	jmp    c001f11b <Vm::x87Handler(regs*)+0x259>
c001f0b8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f0bc:	84 d2                	test   dl,dl
c001f0be:	0f 85 e6 05 00 00    	jne    c001f6aa <Vm::x87Handler(regs*)+0x7e8>
c001f0c4:	57                   	push   edi
c001f0c5:	57                   	push   edi
c001f0c6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f0c9:	ff 36                	push   DWORD PTR [esi]
c001f0cb:	e8 49 fa ff ff       	call   c001eb19 <Vm::fpu64ToInternal(unsigned long long)>
c001f0d0:	5e                   	pop    esi
c001f0d1:	5f                   	pop    edi
c001f0d2:	52                   	push   edx
c001f0d3:	50                   	push   eax
c001f0d4:	e8 3a fd ff ff       	call   c001ee13 <Vm::fpuPush(unsigned long long)>
c001f0d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f0dd:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f0e0:	e9 51 fe ff ff       	jmp    c001ef36 <Vm::x87Handler(regs*)+0x74>
c001f0e5:	80 fa 03             	cmp    dl,0x3
c001f0e8:	0f 85 d7 06 00 00    	jne    c001f7c5 <Vm::x87Handler(regs*)+0x903>
c001f0ee:	57                   	push   edi
c001f0ef:	57                   	push   edi
c001f0f0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f0f3:	ff 36                	push   DWORD PTR [esi]
c001f0f5:	e8 1f fa ff ff       	call   c001eb19 <Vm::fpu64ToInternal(unsigned long long)>
c001f0fa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f101:	89 c6                	mov    esi,eax
c001f103:	89 d7                	mov    edi,edx
c001f105:	e8 7b fc ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f10a:	57                   	push   edi
c001f10b:	56                   	push   esi
c001f10c:	52                   	push   edx
c001f10d:	50                   	push   eax
c001f10e:	e8 95 fb ff ff       	call   c001eca8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f113:	83 c4 20             	add    esp,0x20
c001f116:	e8 55 fd ff ff       	call   c001ee70 <Vm::fpuPop()>
c001f11b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f11f:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f122:	e9 12 fe ff ff       	jmp    c001ef39 <Vm::x87Handler(regs*)+0x77>
c001f127:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f12b:	8d 50 40             	lea    edx,[eax+0x40]
c001f12e:	80 fa 07             	cmp    dl,0x7
c001f131:	77 29                	ja     c001f15c <Vm::x87Handler(regs*)+0x29a>
c001f133:	83 ec 0c             	sub    esp,0xc
c001f136:	2d c0 00 00 00       	sub    eax,0xc0
c001f13b:	50                   	push   eax
c001f13c:	e8 44 fc ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f141:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f148:	89 c6                	mov    esi,eax
c001f14a:	89 d7                	mov    edi,edx
c001f14c:	e8 34 fc ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f151:	57                   	push   edi
c001f152:	56                   	push   esi
c001f153:	52                   	push   edx
c001f154:	50                   	push   eax
c001f155:	e8 a1 fb ff ff       	call   c001ecfb <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f15a:	eb 2f                	jmp    c001f18b <Vm::x87Handler(regs*)+0x2c9>
c001f15c:	8d 50 38             	lea    edx,[eax+0x38]
c001f15f:	80 fa 07             	cmp    dl,0x7
c001f162:	77 2f                	ja     c001f193 <Vm::x87Handler(regs*)+0x2d1>
c001f164:	83 ec 0c             	sub    esp,0xc
c001f167:	2d c8 00 00 00       	sub    eax,0xc8
c001f16c:	50                   	push   eax
c001f16d:	e8 13 fc ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f172:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f179:	89 c6                	mov    esi,eax
c001f17b:	89 d7                	mov    edi,edx
c001f17d:	e8 03 fc ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f182:	57                   	push   edi
c001f183:	56                   	push   esi
c001f184:	52                   	push   edx
c001f185:	50                   	push   eax
c001f186:	e8 a9 fb ff ff       	call   c001ed34 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f18b:	83 c4 1c             	add    esp,0x1c
c001f18e:	e9 d8 fd ff ff       	jmp    c001ef6b <Vm::x87Handler(regs*)+0xa9>
c001f193:	8d 50 30             	lea    edx,[eax+0x30]
c001f196:	80 fa 07             	cmp    dl,0x7
c001f199:	77 0d                	ja     c001f1a8 <Vm::x87Handler(regs*)+0x2e6>
c001f19b:	83 ec 0c             	sub    esp,0xc
c001f19e:	2d d0 00 00 00       	sub    eax,0xd0
c001f1a3:	e9 99 03 00 00       	jmp    c001f541 <Vm::x87Handler(regs*)+0x67f>
c001f1a8:	8d 50 28             	lea    edx,[eax+0x28]
c001f1ab:	80 fa 07             	cmp    dl,0x7
c001f1ae:	77 0d                	ja     c001f1bd <Vm::x87Handler(regs*)+0x2fb>
c001f1b0:	83 ec 0c             	sub    esp,0xc
c001f1b3:	2d d8 00 00 00       	sub    eax,0xd8
c001f1b8:	e9 c0 03 00 00       	jmp    c001f57d <Vm::x87Handler(regs*)+0x6bb>
c001f1bd:	8d 50 20             	lea    edx,[eax+0x20]
c001f1c0:	80 fa 07             	cmp    dl,0x7
c001f1c3:	77 1b                	ja     c001f1e0 <Vm::x87Handler(regs*)+0x31e>
c001f1c5:	83 ec 0c             	sub    esp,0xc
c001f1c8:	2d e0 00 00 00       	sub    eax,0xe0
c001f1cd:	50                   	push   eax
c001f1ce:	e8 b2 fb ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f1d3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f1da:	89 c6                	mov    esi,eax
c001f1dc:	89 d7                	mov    edi,edx
c001f1de:	eb 22                	jmp    c001f202 <Vm::x87Handler(regs*)+0x340>
c001f1e0:	8d 50 18             	lea    edx,[eax+0x18]
c001f1e3:	80 fa 07             	cmp    dl,0x7
c001f1e6:	77 2d                	ja     c001f215 <Vm::x87Handler(regs*)+0x353>
c001f1e8:	83 ec 0c             	sub    esp,0xc
c001f1eb:	6a 00                	push   0x0
c001f1ed:	e8 93 fb ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f1f2:	89 c6                	mov    esi,eax
c001f1f4:	89 d7                	mov    edi,edx
c001f1f6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1fa:	2d e8 00 00 00       	sub    eax,0xe8
c001f1ff:	89 04 24             	mov    DWORD PTR [esp],eax
c001f202:	e8 7e fb ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f207:	57                   	push   edi
c001f208:	56                   	push   esi
c001f209:	52                   	push   edx
c001f20a:	50                   	push   eax
c001f20b:	e8 15 fb ff ff       	call   c001ed25 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f210:	e9 76 ff ff ff       	jmp    c001f18b <Vm::x87Handler(regs*)+0x2c9>
c001f215:	8d 50 10             	lea    edx,[eax+0x10]
c001f218:	80 fa 07             	cmp    dl,0x7
c001f21b:	77 1b                	ja     c001f238 <Vm::x87Handler(regs*)+0x376>
c001f21d:	83 ec 0c             	sub    esp,0xc
c001f220:	2d f0 00 00 00       	sub    eax,0xf0
c001f225:	50                   	push   eax
c001f226:	e8 5a fb ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f22b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f232:	89 c6                	mov    esi,eax
c001f234:	89 d7                	mov    edi,edx
c001f236:	eb 22                	jmp    c001f25a <Vm::x87Handler(regs*)+0x398>
c001f238:	3c f7                	cmp    al,0xf7
c001f23a:	0f 86 d1 03 00 00    	jbe    c001f611 <Vm::x87Handler(regs*)+0x74f>
c001f240:	83 ec 0c             	sub    esp,0xc
c001f243:	6a 00                	push   0x0
c001f245:	e8 3b fb ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f24a:	89 c6                	mov    esi,eax
c001f24c:	89 d7                	mov    edi,edx
c001f24e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f252:	2d f8 00 00 00       	sub    eax,0xf8
c001f257:	89 04 24             	mov    DWORD PTR [esp],eax
c001f25a:	e8 26 fb ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f25f:	57                   	push   edi
c001f260:	56                   	push   esi
c001f261:	52                   	push   edx
c001f262:	50                   	push   eax
c001f263:	e8 eb fa ff ff       	call   c001ed53 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f268:	83 c4 1c             	add    esp,0x1c
c001f26b:	52                   	push   edx
c001f26c:	50                   	push   eax
c001f26d:	6a 00                	push   0x0
c001f26f:	e9 51 02 00 00       	jmp    c001f4c5 <Vm::x87Handler(regs*)+0x603>
c001f274:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f278:	8d 50 40             	lea    edx,[eax+0x40]
c001f27b:	80 fa 07             	cmp    dl,0x7
c001f27e:	77 37                	ja     c001f2b7 <Vm::x87Handler(regs*)+0x3f5>
c001f280:	83 ec 0c             	sub    esp,0xc
c001f283:	2d c0 00 00 00       	sub    eax,0xc0
c001f288:	50                   	push   eax
c001f289:	e8 f7 fa ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f28e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f295:	89 c6                	mov    esi,eax
c001f297:	89 d7                	mov    edi,edx
c001f299:	e8 e7 fa ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f29e:	57                   	push   edi
c001f29f:	56                   	push   esi
c001f2a0:	52                   	push   edx
c001f2a1:	50                   	push   eax
c001f2a2:	e8 54 fa ff ff       	call   c001ecfb <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f2a7:	83 c4 1c             	add    esp,0x1c
c001f2aa:	52                   	push   edx
c001f2ab:	50                   	push   eax
c001f2ac:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2b0:	2d c0 00 00 00       	sub    eax,0xc0
c001f2b5:	eb 3d                	jmp    c001f2f4 <Vm::x87Handler(regs*)+0x432>
c001f2b7:	8d 50 38             	lea    edx,[eax+0x38]
c001f2ba:	80 fa 07             	cmp    dl,0x7
c001f2bd:	77 3b                	ja     c001f2fa <Vm::x87Handler(regs*)+0x438>
c001f2bf:	83 ec 0c             	sub    esp,0xc
c001f2c2:	2d c8 00 00 00       	sub    eax,0xc8
c001f2c7:	50                   	push   eax
c001f2c8:	e8 b8 fa ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f2cd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2d4:	89 c6                	mov    esi,eax
c001f2d6:	89 d7                	mov    edi,edx
c001f2d8:	e8 a8 fa ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f2dd:	57                   	push   edi
c001f2de:	56                   	push   esi
c001f2df:	52                   	push   edx
c001f2e0:	50                   	push   eax
c001f2e1:	e8 4e fa ff ff       	call   c001ed34 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f2e6:	83 c4 1c             	add    esp,0x1c
c001f2e9:	52                   	push   edx
c001f2ea:	50                   	push   eax
c001f2eb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2ef:	2d c8 00 00 00       	sub    eax,0xc8
c001f2f4:	50                   	push   eax
c001f2f5:	e9 75 fc ff ff       	jmp    c001ef6f <Vm::x87Handler(regs*)+0xad>
c001f2fa:	83 c0 18             	add    eax,0x18
c001f2fd:	3c 07                	cmp    al,0x7
c001f2ff:	0f 87 3b 04 00 00    	ja     c001f740 <Vm::x87Handler(regs*)+0x87e>
c001f305:	83 ec 0c             	sub    esp,0xc
c001f308:	6a 00                	push   0x0
c001f30a:	e8 76 fa ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f30f:	89 c6                	mov    esi,eax
c001f311:	89 d7                	mov    edi,edx
c001f313:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f317:	2d e8 00 00 00       	sub    eax,0xe8
c001f31c:	89 04 24             	mov    DWORD PTR [esp],eax
c001f31f:	e8 61 fa ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f324:	57                   	push   edi
c001f325:	56                   	push   esi
c001f326:	52                   	push   edx
c001f327:	50                   	push   eax
c001f328:	e8 f8 f9 ff ff       	call   c001ed25 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f32d:	83 c4 1c             	add    esp,0x1c
c001f330:	52                   	push   edx
c001f331:	50                   	push   eax
c001f332:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f336:	2d e8 00 00 00       	sub    eax,0xe8
c001f33b:	eb b7                	jmp    c001f2f4 <Vm::x87Handler(regs*)+0x432>
c001f33d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f341:	8d 50 40             	lea    edx,[eax+0x40]
c001f344:	80 fa 07             	cmp    dl,0x7
c001f347:	77 3a                	ja     c001f383 <Vm::x87Handler(regs*)+0x4c1>
c001f349:	83 ec 0c             	sub    esp,0xc
c001f34c:	2d c0 00 00 00       	sub    eax,0xc0
c001f351:	50                   	push   eax
c001f352:	e8 2e fa ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f357:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f35e:	89 c6                	mov    esi,eax
c001f360:	89 d7                	mov    edi,edx
c001f362:	e8 1e fa ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f367:	57                   	push   edi
c001f368:	56                   	push   esi
c001f369:	52                   	push   edx
c001f36a:	50                   	push   eax
c001f36b:	e8 8b f9 ff ff       	call   c001ecfb <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f370:	83 c4 1c             	add    esp,0x1c
c001f373:	52                   	push   edx
c001f374:	50                   	push   eax
c001f375:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f379:	2d c0 00 00 00       	sub    eax,0xc0
c001f37e:	e9 9e 01 00 00       	jmp    c001f521 <Vm::x87Handler(regs*)+0x65f>
c001f383:	8d 50 20             	lea    edx,[eax+0x20]
c001f386:	80 fa 07             	cmp    dl,0x7
c001f389:	77 3a                	ja     c001f3c5 <Vm::x87Handler(regs*)+0x503>
c001f38b:	83 ec 0c             	sub    esp,0xc
c001f38e:	2d e0 00 00 00       	sub    eax,0xe0
c001f393:	50                   	push   eax
c001f394:	e8 ec f9 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f399:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f3a0:	89 c6                	mov    esi,eax
c001f3a2:	89 d7                	mov    edi,edx
c001f3a4:	e8 dc f9 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f3a9:	57                   	push   edi
c001f3aa:	56                   	push   esi
c001f3ab:	52                   	push   edx
c001f3ac:	50                   	push   eax
c001f3ad:	e8 73 f9 ff ff       	call   c001ed25 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f3b2:	83 c4 1c             	add    esp,0x1c
c001f3b5:	52                   	push   edx
c001f3b6:	50                   	push   eax
c001f3b7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3bb:	2d e0 00 00 00       	sub    eax,0xe0
c001f3c0:	e9 5c 01 00 00       	jmp    c001f521 <Vm::x87Handler(regs*)+0x65f>
c001f3c5:	8d 50 18             	lea    edx,[eax+0x18]
c001f3c8:	80 fa 07             	cmp    dl,0x7
c001f3cb:	77 3b                	ja     c001f408 <Vm::x87Handler(regs*)+0x546>
c001f3cd:	83 ec 0c             	sub    esp,0xc
c001f3d0:	6a 00                	push   0x0
c001f3d2:	e8 ae f9 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f3d7:	89 c6                	mov    esi,eax
c001f3d9:	89 d7                	mov    edi,edx
c001f3db:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3df:	2d e8 00 00 00       	sub    eax,0xe8
c001f3e4:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3e7:	e8 99 f9 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f3ec:	57                   	push   edi
c001f3ed:	56                   	push   esi
c001f3ee:	52                   	push   edx
c001f3ef:	50                   	push   eax
c001f3f0:	e8 30 f9 ff ff       	call   c001ed25 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f3f5:	83 c4 1c             	add    esp,0x1c
c001f3f8:	52                   	push   edx
c001f3f9:	50                   	push   eax
c001f3fa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3fe:	2d e8 00 00 00       	sub    eax,0xe8
c001f403:	e9 19 01 00 00       	jmp    c001f521 <Vm::x87Handler(regs*)+0x65f>
c001f408:	8d 50 38             	lea    edx,[eax+0x38]
c001f40b:	80 fa 07             	cmp    dl,0x7
c001f40e:	77 37                	ja     c001f447 <Vm::x87Handler(regs*)+0x585>
c001f410:	83 ec 0c             	sub    esp,0xc
c001f413:	2d c8 00 00 00       	sub    eax,0xc8
c001f418:	50                   	push   eax
c001f419:	e8 67 f9 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f41e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f425:	89 c6                	mov    esi,eax
c001f427:	89 d7                	mov    edi,edx
c001f429:	e8 57 f9 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f42e:	57                   	push   edi
c001f42f:	56                   	push   esi
c001f430:	52                   	push   edx
c001f431:	50                   	push   eax
c001f432:	e8 fd f8 ff ff       	call   c001ed34 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f437:	83 c4 1c             	add    esp,0x1c
c001f43a:	52                   	push   edx
c001f43b:	50                   	push   eax
c001f43c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f440:	2d c8 00 00 00       	sub    eax,0xc8
c001f445:	eb 7d                	jmp    c001f4c4 <Vm::x87Handler(regs*)+0x602>
c001f447:	3c f7                	cmp    al,0xf7
c001f449:	76 38                	jbe    c001f483 <Vm::x87Handler(regs*)+0x5c1>
c001f44b:	83 ec 0c             	sub    esp,0xc
c001f44e:	6a 00                	push   0x0
c001f450:	e8 30 f9 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f455:	89 c6                	mov    esi,eax
c001f457:	89 d7                	mov    edi,edx
c001f459:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f45d:	2d f8 00 00 00       	sub    eax,0xf8
c001f462:	89 04 24             	mov    DWORD PTR [esp],eax
c001f465:	e8 1b f9 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f46a:	57                   	push   edi
c001f46b:	56                   	push   esi
c001f46c:	52                   	push   edx
c001f46d:	50                   	push   eax
c001f46e:	e8 e0 f8 ff ff       	call   c001ed53 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f473:	83 c4 1c             	add    esp,0x1c
c001f476:	52                   	push   edx
c001f477:	50                   	push   eax
c001f478:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f47c:	2d f8 00 00 00       	sub    eax,0xf8
c001f481:	eb 41                	jmp    c001f4c4 <Vm::x87Handler(regs*)+0x602>
c001f483:	8d 50 10             	lea    edx,[eax+0x10]
c001f486:	80 fa 07             	cmp    dl,0x7
c001f489:	0f 87 5a 01 00 00    	ja     c001f5e9 <Vm::x87Handler(regs*)+0x727>
c001f48f:	83 ec 0c             	sub    esp,0xc
c001f492:	2d f0 00 00 00       	sub    eax,0xf0
c001f497:	50                   	push   eax
c001f498:	e8 e8 f8 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f49d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4a4:	89 c6                	mov    esi,eax
c001f4a6:	89 d7                	mov    edi,edx
c001f4a8:	e8 d8 f8 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f4ad:	57                   	push   edi
c001f4ae:	56                   	push   esi
c001f4af:	52                   	push   edx
c001f4b0:	50                   	push   eax
c001f4b1:	e8 9d f8 ff ff       	call   c001ed53 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f4b6:	83 c4 1c             	add    esp,0x1c
c001f4b9:	52                   	push   edx
c001f4ba:	50                   	push   eax
c001f4bb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4bf:	2d f0 00 00 00       	sub    eax,0xf0
c001f4c4:	50                   	push   eax
c001f4c5:	e8 fe f8 ff ff       	call   c001edc8 <Vm::fpuSetReg(int, unsigned long long)>
c001f4ca:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f4ce:	e8 9d f9 ff ff       	call   c001ee70 <Vm::fpuPop()>
c001f4d3:	e9 5e fa ff ff       	jmp    c001ef36 <Vm::x87Handler(regs*)+0x74>
c001f4d8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4dc:	8d 50 30             	lea    edx,[eax+0x30]
c001f4df:	80 fa 07             	cmp    dl,0x7
c001f4e2:	77 1d                	ja     c001f501 <Vm::x87Handler(regs*)+0x63f>
c001f4e4:	83 ec 0c             	sub    esp,0xc
c001f4e7:	6a 00                	push   0x0
c001f4e9:	e8 97 f8 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f4ee:	83 c4 0c             	add    esp,0xc
c001f4f1:	52                   	push   edx
c001f4f2:	50                   	push   eax
c001f4f3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f4f7:	2d d0 00 00 00       	sub    eax,0xd0
c001f4fc:	e9 f3 fd ff ff       	jmp    c001f2f4 <Vm::x87Handler(regs*)+0x432>
c001f501:	8d 50 28             	lea    edx,[eax+0x28]
c001f504:	80 fa 07             	cmp    dl,0x7
c001f507:	77 28                	ja     c001f531 <Vm::x87Handler(regs*)+0x66f>
c001f509:	83 ec 0c             	sub    esp,0xc
c001f50c:	6a 00                	push   0x0
c001f50e:	e8 72 f8 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f513:	83 c4 0c             	add    esp,0xc
c001f516:	52                   	push   edx
c001f517:	50                   	push   eax
c001f518:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f51c:	2d d8 00 00 00       	sub    eax,0xd8
c001f521:	50                   	push   eax
c001f522:	e8 a1 f8 ff ff       	call   c001edc8 <Vm::fpuSetReg(int, unsigned long long)>
c001f527:	e8 44 f9 ff ff       	call   c001ee70 <Vm::fpuPop()>
c001f52c:	e9 01 fa ff ff       	jmp    c001ef32 <Vm::x87Handler(regs*)+0x70>
c001f531:	8d 50 20             	lea    edx,[eax+0x20]
c001f534:	80 fa 07             	cmp    dl,0x7
c001f537:	77 30                	ja     c001f569 <Vm::x87Handler(regs*)+0x6a7>
c001f539:	83 ec 0c             	sub    esp,0xc
c001f53c:	2d e0 00 00 00       	sub    eax,0xe0
c001f541:	50                   	push   eax
c001f542:	e8 3e f8 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f547:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f54e:	89 c6                	mov    esi,eax
c001f550:	89 d7                	mov    edi,edx
c001f552:	e8 2e f8 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f557:	57                   	push   edi
c001f558:	56                   	push   esi
c001f559:	52                   	push   edx
c001f55a:	50                   	push   eax
c001f55b:	e8 48 f7 ff ff       	call   c001eca8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f560:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f564:	e9 54 02 00 00       	jmp    c001f7bd <Vm::x87Handler(regs*)+0x8fb>
c001f569:	8d 50 18             	lea    edx,[eax+0x18]
c001f56c:	80 fa 07             	cmp    dl,0x7
c001f56f:	0f 87 43 fb ff ff    	ja     c001f0b8 <Vm::x87Handler(regs*)+0x1f6>
c001f575:	83 ec 0c             	sub    esp,0xc
c001f578:	2d e8 00 00 00       	sub    eax,0xe8
c001f57d:	50                   	push   eax
c001f57e:	e8 02 f8 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f583:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f58a:	89 c6                	mov    esi,eax
c001f58c:	89 d7                	mov    edi,edx
c001f58e:	e8 f2 f7 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f593:	57                   	push   edi
c001f594:	56                   	push   esi
c001f595:	52                   	push   edx
c001f596:	50                   	push   eax
c001f597:	e8 0c f7 ff ff       	call   c001eca8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f59c:	83 c4 20             	add    esp,0x20
c001f59f:	e8 cc f8 ff ff       	call   c001ee70 <Vm::fpuPop()>
c001f5a4:	eb 62                	jmp    c001f608 <Vm::x87Handler(regs*)+0x746>
c001f5a6:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f5aa:	0f 85 0f 01 00 00    	jne    c001f6bf <Vm::x87Handler(regs*)+0x7fd>
c001f5b0:	83 ec 0c             	sub    esp,0xc
c001f5b3:	6a 01                	push   0x1
c001f5b5:	e8 cb f7 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f5ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5c1:	89 c6                	mov    esi,eax
c001f5c3:	89 d7                	mov    edi,edx
c001f5c5:	e8 bb f7 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f5ca:	57                   	push   edi
c001f5cb:	56                   	push   esi
c001f5cc:	52                   	push   edx
c001f5cd:	50                   	push   eax
c001f5ce:	e8 d5 f6 ff ff       	call   c001eca8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f5d3:	83 c4 20             	add    esp,0x20
c001f5d6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f5da:	e8 91 f8 ff ff       	call   c001ee70 <Vm::fpuPop()>
c001f5df:	e8 8c f8 ff ff       	call   c001ee70 <Vm::fpuPop()>
c001f5e4:	e9 50 f9 ff ff       	jmp    c001ef39 <Vm::x87Handler(regs*)+0x77>
c001f5e9:	3c d9                	cmp    al,0xd9
c001f5eb:	0f 85 b5 02 00 00    	jne    c001f8a6 <Vm::x87Handler(regs*)+0x9e4>
c001f5f1:	eb bd                	jmp    c001f5b0 <Vm::x87Handler(regs*)+0x6ee>
c001f5f3:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f5f7:	0f 85 ea 02 00 00    	jne    c001f8e7 <Vm::x87Handler(regs*)+0xa25>
c001f5fd:	0f b7 05 a0 e6 02 c0 	movzx  eax,WORD PTR ds:0xc002e6a0
c001f604:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f608:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f60c:	e9 28 f9 ff ff       	jmp    c001ef39 <Vm::x87Handler(regs*)+0x77>
c001f611:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f615:	84 d2                	test   dl,dl
c001f617:	75 0f                	jne    c001f628 <Vm::x87Handler(regs*)+0x766>
c001f619:	83 ec 0c             	sub    esp,0xc
c001f61c:	ff 36                	push   DWORD PTR [esi]
c001f61e:	e8 b1 f4 ff ff       	call   c001ead4 <Vm::fpu32ToInternal(unsigned int)>
c001f623:	e9 2c 01 00 00       	jmp    c001f754 <Vm::x87Handler(regs*)+0x892>
c001f628:	80 fa 01             	cmp    dl,0x1
c001f62b:	75 0f                	jne    c001f63c <Vm::x87Handler(regs*)+0x77a>
c001f62d:	83 ec 0c             	sub    esp,0xc
c001f630:	ff 36                	push   DWORD PTR [esi]
c001f632:	e8 9d f4 ff ff       	call   c001ead4 <Vm::fpu32ToInternal(unsigned int)>
c001f637:	e9 81 02 00 00       	jmp    c001f8bd <Vm::x87Handler(regs*)+0x9fb>
c001f63c:	80 fa 04             	cmp    dl,0x4
c001f63f:	75 0f                	jne    c001f650 <Vm::x87Handler(regs*)+0x78e>
c001f641:	83 ec 0c             	sub    esp,0xc
c001f644:	ff 36                	push   DWORD PTR [esi]
c001f646:	e8 89 f4 ff ff       	call   c001ead4 <Vm::fpu32ToInternal(unsigned int)>
c001f64b:	e9 86 01 00 00       	jmp    c001f7d6 <Vm::x87Handler(regs*)+0x914>
c001f650:	80 fa 05             	cmp    dl,0x5
c001f653:	75 1b                	jne    c001f670 <Vm::x87Handler(regs*)+0x7ae>
c001f655:	83 ec 0c             	sub    esp,0xc
c001f658:	6a 00                	push   0x0
c001f65a:	e8 26 f7 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f65f:	89 c7                	mov    edi,eax
c001f661:	89 d5                	mov    ebp,edx
c001f663:	58                   	pop    eax
c001f664:	ff 36                	push   DWORD PTR [esi]
c001f666:	e8 69 f4 ff ff       	call   c001ead4 <Vm::fpu32ToInternal(unsigned int)>
c001f66b:	e9 a3 01 00 00       	jmp    c001f813 <Vm::x87Handler(regs*)+0x951>
c001f670:	80 fa 06             	cmp    dl,0x6
c001f673:	75 0f                	jne    c001f684 <Vm::x87Handler(regs*)+0x7c2>
c001f675:	83 ec 0c             	sub    esp,0xc
c001f678:	ff 36                	push   DWORD PTR [esi]
c001f67a:	e8 55 f4 ff ff       	call   c001ead4 <Vm::fpu32ToInternal(unsigned int)>
c001f67f:	e9 ae 01 00 00       	jmp    c001f832 <Vm::x87Handler(regs*)+0x970>
c001f684:	31 c0                	xor    eax,eax
c001f686:	80 fa 07             	cmp    dl,0x7
c001f689:	0f 85 94 02 00 00    	jne    c001f923 <Vm::x87Handler(regs*)+0xa61>
c001f68f:	83 ec 0c             	sub    esp,0xc
c001f692:	6a 00                	push   0x0
c001f694:	e8 ec f6 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f699:	89 c7                	mov    edi,eax
c001f69b:	89 d5                	mov    ebp,edx
c001f69d:	58                   	pop    eax
c001f69e:	ff 36                	push   DWORD PTR [esi]
c001f6a0:	e8 2f f4 ff ff       	call   c001ead4 <Vm::fpu32ToInternal(unsigned int)>
c001f6a5:	e9 cb 01 00 00       	jmp    c001f875 <Vm::x87Handler(regs*)+0x9b3>
c001f6aa:	80 fa 03             	cmp    dl,0x3
c001f6ad:	0f 85 d3 01 00 00    	jne    c001f886 <Vm::x87Handler(regs*)+0x9c4>
c001f6b3:	e8 b8 f7 ff ff       	call   c001ee70 <Vm::fpuPop()>
c001f6b8:	51                   	push   ecx
c001f6b9:	51                   	push   ecx
c001f6ba:	e9 de 01 00 00       	jmp    c001f89d <Vm::x87Handler(regs*)+0x9db>
c001f6bf:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f6c3:	80 fa 01             	cmp    dl,0x1
c001f6c6:	75 09                	jne    c001f6d1 <Vm::x87Handler(regs*)+0x80f>
c001f6c8:	57                   	push   edi
c001f6c9:	57                   	push   edi
c001f6ca:	8b 06                	mov    eax,DWORD PTR [esi]
c001f6cc:	e9 e3 01 00 00       	jmp    c001f8b4 <Vm::x87Handler(regs*)+0x9f2>
c001f6d1:	80 fa 04             	cmp    dl,0x4
c001f6d4:	75 12                	jne    c001f6e8 <Vm::x87Handler(regs*)+0x826>
c001f6d6:	31 d2                	xor    edx,edx
c001f6d8:	51                   	push   ecx
c001f6d9:	51                   	push   ecx
c001f6da:	8b 06                	mov    eax,DWORD PTR [esi]
c001f6dc:	52                   	push   edx
c001f6dd:	50                   	push   eax
c001f6de:	e8 d0 f4 ff ff       	call   c001ebb3 <Vm::fpuLongToFloat(long long)>
c001f6e3:	e9 ee 00 00 00       	jmp    c001f7d6 <Vm::x87Handler(regs*)+0x914>
c001f6e8:	31 c0                	xor    eax,eax
c001f6ea:	80 fa 07             	cmp    dl,0x7
c001f6ed:	0f 85 30 02 00 00    	jne    c001f923 <Vm::x87Handler(regs*)+0xa61>
c001f6f3:	83 ec 0c             	sub    esp,0xc
c001f6f6:	6a 00                	push   0x0
c001f6f8:	e8 88 f6 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f6fd:	89 c7                	mov    edi,eax
c001f6ff:	89 d5                	mov    ebp,edx
c001f701:	58                   	pop    eax
c001f702:	8b 06                	mov    eax,DWORD PTR [esi]
c001f704:	5a                   	pop    edx
c001f705:	31 d2                	xor    edx,edx
c001f707:	52                   	push   edx
c001f708:	50                   	push   eax
c001f709:	e8 a5 f4 ff ff       	call   c001ebb3 <Vm::fpuLongToFloat(long long)>
c001f70e:	e9 62 01 00 00       	jmp    c001f875 <Vm::x87Handler(regs*)+0x9b3>
c001f713:	84 d2                	test   dl,dl
c001f715:	75 0d                	jne    c001f724 <Vm::x87Handler(regs*)+0x862>
c001f717:	31 d2                	xor    edx,edx
c001f719:	55                   	push   ebp
c001f71a:	55                   	push   ebp
c001f71b:	8b 06                	mov    eax,DWORD PTR [esi]
c001f71d:	52                   	push   edx
c001f71e:	50                   	push   eax
c001f71f:	e9 d3 01 00 00       	jmp    c001f8f7 <Vm::x87Handler(regs*)+0xa35>
c001f724:	31 c0                	xor    eax,eax
c001f726:	80 fa 02             	cmp    dl,0x2
c001f729:	0f 85 f4 01 00 00    	jne    c001f923 <Vm::x87Handler(regs*)+0xa61>
c001f72f:	83 ec 0c             	sub    esp,0xc
c001f732:	6a 00                	push   0x0
c001f734:	e8 4c f6 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f739:	59                   	pop    ecx
c001f73a:	5f                   	pop    edi
c001f73b:	e9 6a f9 ff ff       	jmp    c001f0aa <Vm::x87Handler(regs*)+0x1e8>
c001f740:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f744:	84 d2                	test   dl,dl
c001f746:	75 2a                	jne    c001f772 <Vm::x87Handler(regs*)+0x8b0>
c001f748:	50                   	push   eax
c001f749:	50                   	push   eax
c001f74a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f74d:	ff 36                	push   DWORD PTR [esi]
c001f74f:	e8 c5 f3 ff ff       	call   c001eb19 <Vm::fpu64ToInternal(unsigned long long)>
c001f754:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f75b:	89 c6                	mov    esi,eax
c001f75d:	89 d7                	mov    edi,edx
c001f75f:	e8 21 f6 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f764:	57                   	push   edi
c001f765:	56                   	push   esi
c001f766:	52                   	push   edx
c001f767:	50                   	push   eax
c001f768:	e8 8e f5 ff ff       	call   c001ecfb <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f76d:	e9 64 01 00 00       	jmp    c001f8d6 <Vm::x87Handler(regs*)+0xa14>
c001f772:	80 fa 01             	cmp    dl,0x1
c001f775:	75 11                	jne    c001f788 <Vm::x87Handler(regs*)+0x8c6>
c001f777:	50                   	push   eax
c001f778:	50                   	push   eax
c001f779:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f77c:	ff 36                	push   DWORD PTR [esi]
c001f77e:	e8 96 f3 ff ff       	call   c001eb19 <Vm::fpu64ToInternal(unsigned long long)>
c001f783:	e9 35 01 00 00       	jmp    c001f8bd <Vm::x87Handler(regs*)+0x9fb>
c001f788:	80 fa 02             	cmp    dl,0x2
c001f78b:	0f 85 54 f9 ff ff    	jne    c001f0e5 <Vm::x87Handler(regs*)+0x223>
c001f791:	55                   	push   ebp
c001f792:	55                   	push   ebp
c001f793:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f796:	ff 36                	push   DWORD PTR [esi]
c001f798:	e8 7c f3 ff ff       	call   c001eb19 <Vm::fpu64ToInternal(unsigned long long)>
c001f79d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7a4:	89 c6                	mov    esi,eax
c001f7a6:	89 d7                	mov    edi,edx
c001f7a8:	e8 d8 f5 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f7ad:	57                   	push   edi
c001f7ae:	56                   	push   esi
c001f7af:	52                   	push   edx
c001f7b0:	50                   	push   eax
c001f7b1:	e8 f2 f4 ff ff       	call   c001eca8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f7b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f7ba:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f7bd:	83 c4 20             	add    esp,0x20
c001f7c0:	e9 74 f7 ff ff       	jmp    c001ef39 <Vm::x87Handler(regs*)+0x77>
c001f7c5:	80 fa 04             	cmp    dl,0x4
c001f7c8:	75 2a                	jne    c001f7f4 <Vm::x87Handler(regs*)+0x932>
c001f7ca:	51                   	push   ecx
c001f7cb:	51                   	push   ecx
c001f7cc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f7cf:	ff 36                	push   DWORD PTR [esi]
c001f7d1:	e8 43 f3 ff ff       	call   c001eb19 <Vm::fpu64ToInternal(unsigned long long)>
c001f7d6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7dd:	89 c6                	mov    esi,eax
c001f7df:	89 d7                	mov    edi,edx
c001f7e1:	e8 9f f5 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f7e6:	57                   	push   edi
c001f7e7:	56                   	push   esi
c001f7e8:	52                   	push   edx
c001f7e9:	50                   	push   eax
c001f7ea:	e8 36 f5 ff ff       	call   c001ed25 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f7ef:	e9 e2 00 00 00       	jmp    c001f8d6 <Vm::x87Handler(regs*)+0xa14>
c001f7f4:	80 fa 05             	cmp    dl,0x5
c001f7f7:	75 28                	jne    c001f821 <Vm::x87Handler(regs*)+0x95f>
c001f7f9:	83 ec 0c             	sub    esp,0xc
c001f7fc:	6a 00                	push   0x0
c001f7fe:	e8 82 f5 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f803:	89 c7                	mov    edi,eax
c001f805:	89 d5                	mov    ebp,edx
c001f807:	58                   	pop    eax
c001f808:	5a                   	pop    edx
c001f809:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f80c:	ff 36                	push   DWORD PTR [esi]
c001f80e:	e8 06 f3 ff ff       	call   c001eb19 <Vm::fpu64ToInternal(unsigned long long)>
c001f813:	83 c4 10             	add    esp,0x10
c001f816:	55                   	push   ebp
c001f817:	57                   	push   edi
c001f818:	52                   	push   edx
c001f819:	50                   	push   eax
c001f81a:	e8 06 f5 ff ff       	call   c001ed25 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f81f:	eb 60                	jmp    c001f881 <Vm::x87Handler(regs*)+0x9bf>
c001f821:	80 fa 06             	cmp    dl,0x6
c001f824:	75 2a                	jne    c001f850 <Vm::x87Handler(regs*)+0x98e>
c001f826:	51                   	push   ecx
c001f827:	51                   	push   ecx
c001f828:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f82b:	ff 36                	push   DWORD PTR [esi]
c001f82d:	e8 e7 f2 ff ff       	call   c001eb19 <Vm::fpu64ToInternal(unsigned long long)>
c001f832:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f839:	89 c6                	mov    esi,eax
c001f83b:	89 d7                	mov    edi,edx
c001f83d:	e8 43 f5 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f842:	57                   	push   edi
c001f843:	56                   	push   esi
c001f844:	52                   	push   edx
c001f845:	50                   	push   eax
c001f846:	e8 08 f5 ff ff       	call   c001ed53 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f84b:	e9 86 00 00 00       	jmp    c001f8d6 <Vm::x87Handler(regs*)+0xa14>
c001f850:	31 c0                	xor    eax,eax
c001f852:	80 fa 07             	cmp    dl,0x7
c001f855:	0f 85 c8 00 00 00    	jne    c001f923 <Vm::x87Handler(regs*)+0xa61>
c001f85b:	83 ec 0c             	sub    esp,0xc
c001f85e:	6a 00                	push   0x0
c001f860:	e8 20 f5 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f865:	89 c7                	mov    edi,eax
c001f867:	89 d5                	mov    ebp,edx
c001f869:	58                   	pop    eax
c001f86a:	5a                   	pop    edx
c001f86b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f86e:	ff 36                	push   DWORD PTR [esi]
c001f870:	e8 a4 f2 ff ff       	call   c001eb19 <Vm::fpu64ToInternal(unsigned long long)>
c001f875:	83 c4 10             	add    esp,0x10
c001f878:	55                   	push   ebp
c001f879:	57                   	push   edi
c001f87a:	52                   	push   edx
c001f87b:	50                   	push   eax
c001f87c:	e8 d2 f4 ff ff       	call   c001ed53 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f881:	83 c4 0c             	add    esp,0xc
c001f884:	eb 53                	jmp    c001f8d9 <Vm::x87Handler(regs*)+0xa17>
c001f886:	31 c0                	xor    eax,eax
c001f888:	80 fa 02             	cmp    dl,0x2
c001f88b:	0f 85 92 00 00 00    	jne    c001f923 <Vm::x87Handler(regs*)+0xa61>
c001f891:	83 ec 0c             	sub    esp,0xc
c001f894:	6a 00                	push   0x0
c001f896:	e8 ea f4 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f89b:	59                   	pop    ecx
c001f89c:	5f                   	pop    edi
c001f89d:	52                   	push   edx
c001f89e:	50                   	push   eax
c001f89f:	e8 27 f2 ff ff       	call   c001eacb <Vm::fpuInternalTo64(unsigned long long)>
c001f8a4:	eb 70                	jmp    c001f916 <Vm::x87Handler(regs*)+0xa54>
c001f8a6:	31 c0                	xor    eax,eax
c001f8a8:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001f8ad:	75 74                	jne    c001f923 <Vm::x87Handler(regs*)+0xa61>
c001f8af:	50                   	push   eax
c001f8b0:	50                   	push   eax
c001f8b1:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f8b4:	31 d2                	xor    edx,edx
c001f8b6:	52                   	push   edx
c001f8b7:	50                   	push   eax
c001f8b8:	e8 f6 f2 ff ff       	call   c001ebb3 <Vm::fpuLongToFloat(long long)>
c001f8bd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8c4:	89 c6                	mov    esi,eax
c001f8c6:	89 d7                	mov    edi,edx
c001f8c8:	e8 b8 f4 ff ff       	call   c001ed85 <Vm::fpuGetReg(int)>
c001f8cd:	57                   	push   edi
c001f8ce:	56                   	push   esi
c001f8cf:	52                   	push   edx
c001f8d0:	50                   	push   eax
c001f8d1:	e8 5e f4 ff ff       	call   c001ed34 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f8d6:	83 c4 1c             	add    esp,0x1c
c001f8d9:	52                   	push   edx
c001f8da:	50                   	push   eax
c001f8db:	6a 00                	push   0x0
c001f8dd:	e8 e6 f4 ff ff       	call   c001edc8 <Vm::fpuSetReg(int, unsigned long long)>
c001f8e2:	e9 f2 f7 ff ff       	jmp    c001f0d9 <Vm::x87Handler(regs*)+0x217>
c001f8e7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f8eb:	80 fa 05             	cmp    dl,0x5
c001f8ee:	75 11                	jne    c001f901 <Vm::x87Handler(regs*)+0xa3f>
c001f8f0:	55                   	push   ebp
c001f8f1:	55                   	push   ebp
c001f8f2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f8f5:	ff 36                	push   DWORD PTR [esi]
c001f8f7:	e8 81 f2 ff ff       	call   c001eb7d <Vm::fpuULongToFloat(unsigned long long)>
c001f8fc:	e9 cf f7 ff ff       	jmp    c001f0d0 <Vm::x87Handler(regs*)+0x20e>
c001f901:	31 c0                	xor    eax,eax
c001f903:	80 fa 07             	cmp    dl,0x7
c001f906:	75 1b                	jne    c001f923 <Vm::x87Handler(regs*)+0xa61>
c001f908:	e8 63 f5 ff ff       	call   c001ee70 <Vm::fpuPop()>
c001f90d:	51                   	push   ecx
c001f90e:	51                   	push   ecx
c001f90f:	52                   	push   edx
c001f910:	50                   	push   eax
c001f911:	e8 0c f2 ff ff       	call   c001eb22 <Vm::fpuFloatToLong(unsigned long long)>
c001f916:	83 c4 10             	add    esp,0x10
c001f919:	89 06                	mov    DWORD PTR [esi],eax
c001f91b:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001f91e:	e9 f8 f7 ff ff       	jmp    c001f11b <Vm::x87Handler(regs*)+0x259>
c001f923:	83 c4 1c             	add    esp,0x1c
c001f926:	5b                   	pop    ebx
c001f927:	5e                   	pop    esi
c001f928:	5f                   	pop    edi
c001f929:	5d                   	pop    ebp
c001f92a:	c3                   	ret    

c001f92b <__static_initialization_and_destruction_0(int, int)>:
c001f92b:	83 ec 0c             	sub    esp,0xc
c001f92e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f933:	75 1a                	jne    c001f94f <__static_initialization_and_destruction_0(int, int)+0x24>
c001f935:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f93d:	75 10                	jne    c001f94f <__static_initialization_and_destruction_0(int, int)+0x24>
c001f93f:	83 ec 0c             	sub    esp,0xc
c001f942:	68 a0 e6 02 c0       	push   0xc002e6a0
c001f947:	e8 a4 82 00 00       	call   c0027bf0 <Vm::_FPUState::_FPUState()>
c001f94c:	83 c4 10             	add    esp,0x10
c001f94f:	90                   	nop
c001f950:	83 c4 0c             	add    esp,0xc
c001f953:	c3                   	ret    

c001f954 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001f954:	83 ec 0c             	sub    esp,0xc
c001f957:	83 ec 08             	sub    esp,0x8
c001f95a:	68 ff ff 00 00       	push   0xffff
c001f95f:	6a 01                	push   0x1
c001f961:	e8 c5 ff ff ff       	call   c001f92b <__static_initialization_and_destruction_0(int, int)>
c001f966:	83 c4 10             	add    esp,0x10
c001f969:	83 c4 0c             	add    esp,0xc
c001f96c:	c3                   	ret    
c001f96d:	90                   	nop

c001f96e <FAT::getName()>:
c001f96e:	b8 20 b5 02 c0       	mov    eax,0xc002b520
c001f973:	c3                   	ret    

c001f974 <FAT::tell(void*, unsigned long long*)>:
c001f974:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f979:	75 06                	jne    c001f981 <FAT::tell(void*, unsigned long long*)+0xd>
c001f97b:	b8 04 00 00 00       	mov    eax,0x4
c001f980:	c3                   	ret    
c001f981:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f986:	75 06                	jne    c001f98e <FAT::tell(void*, unsigned long long*)+0x1a>
c001f988:	b8 04 00 00 00       	mov    eax,0x4
c001f98d:	c3                   	ret    
c001f98e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f992:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001f995:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001f998:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f99c:	89 01                	mov    DWORD PTR [ecx],eax
c001f99e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f9a1:	b8 00 00 00 00       	mov    eax,0x0
c001f9a6:	c3                   	ret    
c001f9a7:	90                   	nop

c001f9a8 <FAT::stat(void*, unsigned long long*)>:
c001f9a8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f9ad:	75 06                	jne    c001f9b5 <FAT::stat(void*, unsigned long long*)+0xd>
c001f9af:	b8 04 00 00 00       	mov    eax,0x4
c001f9b4:	c3                   	ret    
c001f9b5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f9ba:	75 06                	jne    c001f9c2 <FAT::stat(void*, unsigned long long*)+0x1a>
c001f9bc:	b8 04 00 00 00       	mov    eax,0x4
c001f9c1:	c3                   	ret    
c001f9c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9c6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f9c9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f9cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f9d0:	89 01                	mov    DWORD PTR [ecx],eax
c001f9d2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f9d5:	b8 00 00 00 00       	mov    eax,0x0
c001f9da:	c3                   	ret    
c001f9db:	90                   	nop

c001f9dc <FAT::~FAT()>:
c001f9dc:	83 ec 0c             	sub    esp,0xc
c001f9df:	ba a4 b5 02 c0       	mov    edx,0xc002b5a4
c001f9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e8:	89 10                	mov    DWORD PTR [eax],edx
c001f9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ee:	83 ec 0c             	sub    esp,0xc
c001f9f1:	50                   	push   eax
c001f9f2:	e8 5b 32 ff ff       	call   c0012c52 <Filesystem::~Filesystem()>
c001f9f7:	83 c4 10             	add    esp,0x10
c001f9fa:	90                   	nop
c001f9fb:	83 c4 0c             	add    esp,0xc
c001f9fe:	c3                   	ret    
c001f9ff:	90                   	nop

c001fa00 <FAT::~FAT()>:
c001fa00:	83 ec 0c             	sub    esp,0xc
c001fa03:	83 ec 0c             	sub    esp,0xc
c001fa06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa0a:	e8 cd ff ff ff       	call   c001f9dc <FAT::~FAT()>
c001fa0f:	83 c4 10             	add    esp,0x10
c001fa12:	83 ec 08             	sub    esp,0x8
c001fa15:	6a 08                	push   0x8
c001fa17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa1b:	e8 29 2e ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c001fa20:	83 c4 10             	add    esp,0x10
c001fa23:	83 c4 0c             	add    esp,0xc
c001fa26:	c3                   	ret    
c001fa27:	90                   	nop

c001fa28 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fa28:	83 ec 1c             	sub    esp,0x1c
c001fa2b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fa32:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fa37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fa3b:	8b 04 85 20 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd18e0]
c001fa42:	83 f8 ff             	cmp    eax,0xffffffff
c001fa45:	75 34                	jne    c001fa7b <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001fa47:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fa4b:	88 c2                	mov    dl,al
c001fa4d:	a1 00 e7 02 c0       	mov    eax,ds:0xc002e700
c001fa52:	01 d0                	add    eax,edx
c001fa54:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fa58:	8b 15 00 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e700
c001fa5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fa62:	89 14 85 20 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd18e0],edx
c001fa69:	a1 00 e7 02 c0       	mov    eax,ds:0xc002e700
c001fa6e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fa72:	89 14 85 a0 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1860],edx
c001fa79:	eb 17                	jmp    c001fa92 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001fa7b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fa7f:	88 c2                	mov    dl,al
c001fa81:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fa85:	8b 04 85 20 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd18e0]
c001fa8c:	01 d0                	add    eax,edx
c001fa8e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fa92:	83 ec 04             	sub    esp,0x4
c001fa95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fa99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fa9d:	8d 44 24 15          	lea    eax,[esp+0x15]
c001faa1:	50                   	push   eax
c001faa2:	e8 7a 70 fe ff       	call   c0006b21 <f_getlabel>
c001faa7:	83 c4 10             	add    esp,0x10
c001faaa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001faae:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fab3:	75 07                	jne    c001fabc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001fab5:	b8 00 00 00 00       	mov    eax,0x0
c001faba:	eb 05                	jmp    c001fac1 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001fabc:	b8 01 00 00 00       	mov    eax,0x1
c001fac1:	83 c4 1c             	add    esp,0x1c
c001fac4:	c3                   	ret    
c001fac5:	90                   	nop

c001fac6 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001fac6:	57                   	push   edi
c001fac7:	83 ec 58             	sub    esp,0x58
c001faca:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001fad2:	8d 54 24 10          	lea    edx,[esp+0x10]
c001fad6:	b9 0f 00 00 00       	mov    ecx,0xf
c001fadb:	b8 00 00 00 00       	mov    eax,0x0
c001fae0:	fc                   	cld    
c001fae1:	89 d7                	mov    edi,edx
c001fae3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fae5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fae9:	8b 04 85 20 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd18e0]
c001faf0:	83 f8 ff             	cmp    eax,0xffffffff
c001faf3:	75 34                	jne    c001fb29 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001faf5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001faf9:	88 c2                	mov    dl,al
c001fafb:	a1 00 e7 02 c0       	mov    eax,ds:0xc002e700
c001fb00:	01 d0                	add    eax,edx
c001fb02:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fb06:	8b 15 00 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e700
c001fb0c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fb10:	89 14 85 20 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd18e0],edx
c001fb17:	a1 00 e7 02 c0       	mov    eax,ds:0xc002e700
c001fb1c:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001fb20:	89 14 85 a0 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1860],edx
c001fb27:	eb 17                	jmp    c001fb40 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001fb29:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fb2d:	88 c2                	mov    dl,al
c001fb2f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fb33:	8b 04 85 20 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd18e0]
c001fb3a:	01 d0                	add    eax,edx
c001fb3c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fb40:	83 ec 08             	sub    esp,0x8
c001fb43:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001fb47:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fb4b:	50                   	push   eax
c001fb4c:	e8 c9 0c fe ff       	call   c000081a <strcat>
c001fb51:	83 c4 10             	add    esp,0x10
c001fb54:	83 ec 0c             	sub    esp,0xc
c001fb57:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fb5b:	50                   	push   eax
c001fb5c:	e8 ae 71 fe ff       	call   c0006d0f <f_setlabel>
c001fb61:	83 c4 10             	add    esp,0x10
c001fb64:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001fb68:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001fb6d:	75 07                	jne    c001fb76 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001fb6f:	b8 00 00 00 00       	mov    eax,0x0
c001fb74:	eb 05                	jmp    c001fb7b <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001fb76:	b8 01 00 00 00       	mov    eax,0x1
c001fb7b:	83 c4 58             	add    esp,0x58
c001fb7e:	5f                   	pop    edi
c001fb7f:	c3                   	ret    

c001fb80 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001fb80:	83 ec 2c             	sub    esp,0x2c
c001fb83:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001fb8b:	83 ec 08             	sub    esp,0x8
c001fb8e:	68 44 b5 02 c0       	push   0xc002b544
c001fb93:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fb97:	e8 18 0c fe ff       	call   c00007b4 <strcmp>
c001fb9c:	83 c4 10             	add    esp,0x10
c001fb9f:	85 c0                	test   eax,eax
c001fba1:	0f 94 c0             	sete   al
c001fba4:	84 c0                	test   al,al
c001fba6:	74 0d                	je     c001fbb5 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001fba8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fbb0:	e9 a6 00 00 00       	jmp    c001fc5b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fbb5:	83 ec 08             	sub    esp,0x8
c001fbb8:	68 36 b5 02 c0       	push   0xc002b536
c001fbbd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fbc1:	e8 ee 0b fe ff       	call   c00007b4 <strcmp>
c001fbc6:	83 c4 10             	add    esp,0x10
c001fbc9:	85 c0                	test   eax,eax
c001fbcb:	0f 94 c0             	sete   al
c001fbce:	84 c0                	test   al,al
c001fbd0:	74 0a                	je     c001fbdc <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001fbd2:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fbda:	eb 7f                	jmp    c001fc5b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fbdc:	83 ec 08             	sub    esp,0x8
c001fbdf:	68 3c b5 02 c0       	push   0xc002b53c
c001fbe4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fbe8:	e8 c7 0b fe ff       	call   c00007b4 <strcmp>
c001fbed:	83 c4 10             	add    esp,0x10
c001fbf0:	85 c0                	test   eax,eax
c001fbf2:	0f 94 c0             	sete   al
c001fbf5:	84 c0                	test   al,al
c001fbf7:	74 0a                	je     c001fc03 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001fbf9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fc01:	eb 58                	jmp    c001fc5b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fc03:	83 ec 08             	sub    esp,0x8
c001fc06:	68 0c 83 02 c0       	push   0xc002830c
c001fc0b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fc0f:	e8 a0 0b fe ff       	call   c00007b4 <strcmp>
c001fc14:	83 c4 10             	add    esp,0x10
c001fc17:	85 c0                	test   eax,eax
c001fc19:	0f 94 c0             	sete   al
c001fc1c:	84 c0                	test   al,al
c001fc1e:	74 0a                	je     c001fc2a <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001fc20:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001fc28:	eb 31                	jmp    c001fc5b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fc2a:	83 ec 08             	sub    esp,0x8
c001fc2d:	68 42 b5 02 c0       	push   0xc002b542
c001fc32:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fc36:	e8 79 0b fe ff       	call   c00007b4 <strcmp>
c001fc3b:	83 c4 10             	add    esp,0x10
c001fc3e:	85 c0                	test   eax,eax
c001fc40:	0f 94 c0             	sete   al
c001fc43:	84 c0                	test   al,al
c001fc45:	74 0a                	je     c001fc51 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001fc47:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001fc4f:	eb 0a                	jmp    c001fc5b <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fc51:	b8 08 00 00 00       	mov    eax,0x8
c001fc56:	e9 04 01 00 00       	jmp    c001fd5f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001fc5b:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001fc62:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001fc67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fc6b:	8b 04 85 20 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd18e0]
c001fc72:	83 f8 ff             	cmp    eax,0xffffffff
c001fc75:	75 34                	jne    c001fcab <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001fc77:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001fc7b:	88 c2                	mov    dl,al
c001fc7d:	a1 00 e7 02 c0       	mov    eax,ds:0xc002e700
c001fc82:	01 d0                	add    eax,edx
c001fc84:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001fc88:	8b 15 00 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e700
c001fc8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fc92:	89 14 85 20 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd18e0],edx
c001fc99:	a1 00 e7 02 c0       	mov    eax,ds:0xc002e700
c001fc9e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001fca2:	89 14 85 a0 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1860],edx
c001fca9:	eb 17                	jmp    c001fcc2 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001fcab:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001fcaf:	88 c2                	mov    dl,al
c001fcb1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fcb5:	8b 04 85 20 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd18e0]
c001fcbc:	01 d0                	add    eax,edx
c001fcbe:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001fcc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fcc6:	88 04 24             	mov    BYTE PTR [esp],al
c001fcc9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001fccd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fcd1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001fcd9:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001fcde:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fce6:	83 ec 0c             	sub    esp,0xc
c001fce9:	68 00 20 00 00       	push   0x2000
c001fcee:	e8 67 f9 fe ff       	call   c000f65a <malloc>
c001fcf3:	83 c4 10             	add    esp,0x10
c001fcf6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fcfa:	68 00 20 00 00       	push   0x2000
c001fcff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd03:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fd07:	50                   	push   eax
c001fd08:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001fd0c:	50                   	push   eax
c001fd0d:	e8 48 74 fe ff       	call   c000715a <f_mkfs>
c001fd12:	83 c4 10             	add    esp,0x10
c001fd15:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fd19:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fd1e:	75 07                	jne    c001fd27 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001fd20:	b8 00 00 00 00       	mov    eax,0x0
c001fd25:	eb 38                	jmp    c001fd5f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001fd27:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001fd2c:	75 17                	jne    c001fd45 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001fd2e:	83 ec 0c             	sub    esp,0xc
c001fd31:	68 74 b5 02 c0       	push   0xc002b574
c001fd36:	e8 ee 2b ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001fd3b:	83 c4 10             	add    esp,0x10
c001fd3e:	b8 09 00 00 00       	mov    eax,0x9
c001fd43:	eb 1a                	jmp    c001fd5f <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001fd45:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fd49:	83 ec 08             	sub    esp,0x8
c001fd4c:	50                   	push   eax
c001fd4d:	68 48 b5 02 c0       	push   0xc002b548
c001fd52:	e8 d2 2b ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c001fd57:	83 c4 10             	add    esp,0x10
c001fd5a:	b8 01 00 00 00       	mov    eax,0x1
c001fd5f:	83 c4 2c             	add    esp,0x2c
c001fd62:	c3                   	ret    
c001fd63:	90                   	nop

c001fd64 <FAT::tryMount(LogicalDisk*, int)>:
c001fd64:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001fd6a:	a1 00 e7 02 c0       	mov    eax,ds:0xc002e700
c001fd6f:	83 f8 14             	cmp    eax,0x14
c001fd72:	75 17                	jne    c001fd8b <FAT::tryMount(LogicalDisk*, int)+0x27>
c001fd74:	83 ec 0c             	sub    esp,0xc
c001fd77:	68 5a b5 02 c0       	push   0xc002b55a
c001fd7c:	e8 fe 9e ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c001fd81:	83 c4 10             	add    esp,0x10
c001fd84:	b0 00                	mov    al,0x0
c001fd86:	e9 d7 01 00 00       	jmp    c001ff62 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fd8b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001fd92:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fd98:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001fd9e:	3d 00 02 00 00       	cmp    eax,0x200
c001fda3:	74 07                	je     c001fdac <FAT::tryMount(LogicalDisk*, int)+0x48>
c001fda5:	b0 00                	mov    al,0x0
c001fda7:	e9 b6 01 00 00       	jmp    c001ff62 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fdac:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001fdb4:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001fdbb:	8b 04 85 20 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd18e0]
c001fdc2:	83 f8 ff             	cmp    eax,0xffffffff
c001fdc5:	74 07                	je     c001fdce <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001fdc7:	b0 01                	mov    al,0x1
c001fdc9:	e9 94 01 00 00       	jmp    c001ff62 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fdce:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001fdd8:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001fde0:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001fde7:	88 c2                	mov    dl,al
c001fde9:	a1 00 e7 02 c0       	mov    eax,ds:0xc002e700
c001fdee:	01 d0                	add    eax,edx
c001fdf0:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001fdf7:	8b 15 00 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e700
c001fdfd:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001fe04:	89 14 85 20 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd18e0],edx
c001fe0b:	a1 00 e7 02 c0       	mov    eax,ds:0xc002e700
c001fe10:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001fe17:	89 14 85 a0 e7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1860],edx
c001fe1e:	83 ec 0c             	sub    esp,0xc
c001fe21:	68 54 02 00 00       	push   0x254
c001fe26:	e8 2f f8 fe ff       	call   c000f65a <malloc>
c001fe2b:	83 c4 10             	add    esp,0x10
c001fe2e:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001fe35:	83 ec 04             	sub    esp,0x4
c001fe38:	6a 00                	push   0x0
c001fe3a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fe41:	50                   	push   eax
c001fe42:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fe49:	e8 ca 4e fe ff       	call   c0004d18 <f_mount>
c001fe4e:	83 c4 10             	add    esp,0x10
c001fe51:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001fe58:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001fe60:	74 19                	je     c001fe7b <FAT::tryMount(LogicalDisk*, int)+0x117>
c001fe62:	83 ec 0c             	sub    esp,0xc
c001fe65:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fe6c:	e8 09 f8 fe ff       	call   c000f67a <rfree>
c001fe71:	83 c4 10             	add    esp,0x10
c001fe74:	b0 00                	mov    al,0x0
c001fe76:	e9 e7 00 00 00       	jmp    c001ff62 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fe7b:	83 ec 04             	sub    esp,0x4
c001fe7e:	68 00 01 00 00       	push   0x100
c001fe83:	6a 00                	push   0x0
c001fe85:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fe8c:	50                   	push   eax
c001fe8d:	e8 32 08 fe ff       	call   c00006c4 <memset>
c001fe92:	83 c4 10             	add    esp,0x10
c001fe95:	83 ec 08             	sub    esp,0x8
c001fe98:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fe9f:	50                   	push   eax
c001fea0:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fea7:	50                   	push   eax
c001fea8:	e8 6d 09 fe ff       	call   c000081a <strcat>
c001fead:	83 c4 10             	add    esp,0x10
c001feb0:	83 ec 08             	sub    esp,0x8
c001feb3:	68 68 b5 02 c0       	push   0xc002b568
c001feb8:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001febf:	50                   	push   eax
c001fec0:	e8 55 09 fe ff       	call   c000081a <strcat>
c001fec5:	83 c4 10             	add    esp,0x10
c001fec8:	83 ec 04             	sub    esp,0x4
c001fecb:	6a 01                	push   0x1
c001fecd:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001fed4:	50                   	push   eax
c001fed5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fed9:	50                   	push   eax
c001feda:	e8 9b 4e fe ff       	call   c0004d7a <f_open>
c001fedf:	83 c4 10             	add    esp,0x10
c001fee2:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001fee9:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001fef0:	85 c0                	test   eax,eax
c001fef2:	74 0a                	je     c001fefe <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001fef4:	78 2d                	js     c001ff23 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001fef6:	83 e8 04             	sub    eax,0x4
c001fef9:	83 f8 01             	cmp    eax,0x1
c001fefc:	77 25                	ja     c001ff23 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001fefe:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001ff06:	83 ec 0c             	sub    esp,0xc
c001ff09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ff0d:	50                   	push   eax
c001ff0e:	e8 b9 59 fe ff       	call   c00058cc <f_close>
c001ff13:	83 c4 10             	add    esp,0x10
c001ff16:	90                   	nop
c001ff17:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001ff1f:	74 3a                	je     c001ff5b <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001ff21:	eb 2d                	jmp    c001ff50 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001ff23:	83 ec 0c             	sub    esp,0xc
c001ff26:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001ff2d:	e8 48 f7 fe ff       	call   c000f67a <rfree>
c001ff32:	83 c4 10             	add    esp,0x10
c001ff35:	83 ec 04             	sub    esp,0x4
c001ff38:	6a 00                	push   0x0
c001ff3a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001ff41:	50                   	push   eax
c001ff42:	6a 00                	push   0x0
c001ff44:	e8 cf 4d fe ff       	call   c0004d18 <f_mount>
c001ff49:	83 c4 10             	add    esp,0x10
c001ff4c:	b0 00                	mov    al,0x0
c001ff4e:	eb 12                	jmp    c001ff62 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001ff50:	a1 00 e7 02 c0       	mov    eax,ds:0xc002e700
c001ff55:	40                   	inc    eax
c001ff56:	a3 00 e7 02 c0       	mov    ds:0xc002e700,eax
c001ff5b:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001ff62:	81 c4 6c 03 00 00    	add    esp,0x36c
c001ff68:	c3                   	ret    
c001ff69:	90                   	nop

c001ff6a <FAT::readDir(void*, unsigned long, void*, int*)>:
c001ff6a:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001ff70:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001ff78:	74 0a                	je     c001ff84 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001ff7a:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001ff82:	75 0a                	jne    c001ff8e <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001ff84:	b8 04 00 00 00       	mov    eax,0x4
c001ff89:	e9 db 00 00 00       	jmp    c0020069 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001ff8e:	83 ec 08             	sub    esp,0x8
c001ff91:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ff98:	50                   	push   eax
c001ff99:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001ffa0:	e8 31 5f fe ff       	call   c0005ed6 <f_readdir>
c001ffa5:	83 c4 10             	add    esp,0x10
c001ffa8:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001ffaf:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001ffb5:	83 ec 0c             	sub    esp,0xc
c001ffb8:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ffbf:	83 c0 1a             	add    eax,0x1a
c001ffc2:	50                   	push   eax
c001ffc3:	e8 19 07 fe ff       	call   c00006e1 <strlen>
c001ffc8:	83 c4 10             	add    esp,0x10
c001ffcb:	ba 00 00 00 00       	mov    edx,0x0
c001ffd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ffd4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ffd8:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001ffdf:	0f b6 c0             	movzx  eax,al
c001ffe2:	83 e0 10             	and    eax,0x10
c001ffe5:	74 07                	je     c001ffee <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001ffe7:	b8 02 00 00 00       	mov    eax,0x2
c001ffec:	eb 05                	jmp    c001fff3 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001ffee:	b8 01 00 00 00       	mov    eax,0x1
c001fff3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fff7:	83 ec 08             	sub    esp,0x8
c001fffa:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020001:	83 c0 1a             	add    eax,0x1a
c0020004:	50                   	push   eax
c0020005:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020009:	83 c0 10             	add    eax,0x10
c002000c:	50                   	push   eax
c002000d:	e8 51 07 fe ff       	call   c0000763 <strcpy>
c0020012:	83 c4 10             	add    esp,0x10
c0020015:	83 ec 04             	sub    esp,0x4
c0020018:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c002001f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020023:	50                   	push   eax
c0020024:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c002002b:	e8 70 06 fe ff       	call   c00006a0 <memcpy>
c0020030:	83 c4 10             	add    esp,0x10
c0020033:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c002003a:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020040:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020047:	84 c0                	test   al,al
c0020049:	75 07                	jne    c0020052 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c002004b:	b8 07 00 00 00       	mov    eax,0x7
c0020050:	eb 17                	jmp    c0020069 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020052:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020059:	85 c0                	test   eax,eax
c002005b:	75 07                	jne    c0020064 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c002005d:	b8 00 00 00 00       	mov    eax,0x0
c0020062:	eb 05                	jmp    c0020069 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020064:	b8 01 00 00 00       	mov    eax,0x1
c0020069:	81 c4 3c 02 00 00    	add    esp,0x23c
c002006f:	c3                   	ret    

c0020070 <FAT::read(void*, unsigned long, void*, int*)>:
c0020070:	83 ec 1c             	sub    esp,0x1c
c0020073:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020078:	74 07                	je     c0020081 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c002007a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002007f:	75 07                	jne    c0020088 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020081:	b8 04 00 00 00       	mov    eax,0x4
c0020086:	eb 3d                	jmp    c00200c5 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020088:	8d 44 24 08          	lea    eax,[esp+0x8]
c002008c:	50                   	push   eax
c002008d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020091:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020095:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020099:	e8 18 51 fe ff       	call   c00051b6 <f_read>
c002009e:	83 c4 10             	add    esp,0x10
c00200a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00200a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00200a9:	89 c2                	mov    edx,eax
c00200ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00200af:	89 10                	mov    DWORD PTR [eax],edx
c00200b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00200b5:	85 c0                	test   eax,eax
c00200b7:	75 07                	jne    c00200c0 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00200b9:	b8 00 00 00 00       	mov    eax,0x0
c00200be:	eb 05                	jmp    c00200c5 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00200c0:	b8 01 00 00 00       	mov    eax,0x1
c00200c5:	83 c4 1c             	add    esp,0x1c
c00200c8:	c3                   	ret    
c00200c9:	90                   	nop

c00200ca <FAT::write(void*, unsigned long, void*, int*)>:
c00200ca:	83 ec 1c             	sub    esp,0x1c
c00200cd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00200d2:	74 07                	je     c00200db <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00200d4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00200d9:	75 07                	jne    c00200e2 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00200db:	b8 04 00 00 00       	mov    eax,0x4
c00200e0:	eb 3d                	jmp    c002011f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00200e2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00200e6:	50                   	push   eax
c00200e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00200eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00200ef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00200f3:	e8 3e 53 fe ff       	call   c0005436 <f_write>
c00200f8:	83 c4 10             	add    esp,0x10
c00200fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00200ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020103:	89 c2                	mov    edx,eax
c0020105:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020109:	89 10                	mov    DWORD PTR [eax],edx
c002010b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002010f:	85 c0                	test   eax,eax
c0020111:	75 07                	jne    c002011a <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020113:	b8 00 00 00 00       	mov    eax,0x0
c0020118:	eb 05                	jmp    c002011f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002011a:	b8 01 00 00 00       	mov    eax,0x1
c002011f:	83 c4 1c             	add    esp,0x1c
c0020122:	c3                   	ret    
c0020123:	90                   	nop

c0020124 <FAT::close(void*)>:
c0020124:	83 ec 1c             	sub    esp,0x1c
c0020127:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002012c:	75 07                	jne    c0020135 <FAT::close(void*)+0x11>
c002012e:	b8 04 00 00 00       	mov    eax,0x4
c0020133:	eb 36                	jmp    c002016b <FAT::close(void*)+0x47>
c0020135:	83 ec 0c             	sub    esp,0xc
c0020138:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002013c:	e8 8b 57 fe ff       	call   c00058cc <f_close>
c0020141:	83 c4 10             	add    esp,0x10
c0020144:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020148:	83 ec 0c             	sub    esp,0xc
c002014b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002014f:	e8 16 f5 fe ff       	call   c000f66a <free>
c0020154:	83 c4 10             	add    esp,0x10
c0020157:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002015b:	85 c0                	test   eax,eax
c002015d:	75 07                	jne    c0020166 <FAT::close(void*)+0x42>
c002015f:	b8 00 00 00 00       	mov    eax,0x0
c0020164:	eb 05                	jmp    c002016b <FAT::close(void*)+0x47>
c0020166:	b8 01 00 00 00       	mov    eax,0x1
c002016b:	83 c4 1c             	add    esp,0x1c
c002016e:	c3                   	ret    
c002016f:	90                   	nop

c0020170 <FAT::closeDir(void*)>:
c0020170:	83 ec 1c             	sub    esp,0x1c
c0020173:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020178:	75 07                	jne    c0020181 <FAT::closeDir(void*)+0x11>
c002017a:	b8 04 00 00 00       	mov    eax,0x4
c002017f:	eb 36                	jmp    c00201b7 <FAT::closeDir(void*)+0x47>
c0020181:	83 ec 0c             	sub    esp,0xc
c0020184:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020188:	e8 27 5d fe ff       	call   c0005eb4 <f_closedir>
c002018d:	83 c4 10             	add    esp,0x10
c0020190:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020194:	83 ec 0c             	sub    esp,0xc
c0020197:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002019b:	e8 ca f4 fe ff       	call   c000f66a <free>
c00201a0:	83 c4 10             	add    esp,0x10
c00201a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00201a7:	85 c0                	test   eax,eax
c00201a9:	75 07                	jne    c00201b2 <FAT::closeDir(void*)+0x42>
c00201ab:	b8 00 00 00 00       	mov    eax,0x0
c00201b0:	eb 05                	jmp    c00201b7 <FAT::closeDir(void*)+0x47>
c00201b2:	b8 01 00 00 00       	mov    eax,0x1
c00201b7:	83 c4 1c             	add    esp,0x1c
c00201ba:	c3                   	ret    
c00201bb:	90                   	nop

c00201bc <FAT::seek(void*, unsigned long long)>:
c00201bc:	83 ec 2c             	sub    esp,0x2c
c00201bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00201c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00201c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00201cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00201cf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00201d4:	75 07                	jne    c00201dd <FAT::seek(void*, unsigned long long)+0x21>
c00201d6:	b8 04 00 00 00       	mov    eax,0x4
c00201db:	eb 2f                	jmp    c002020c <FAT::seek(void*, unsigned long long)+0x50>
c00201dd:	83 ec 04             	sub    esp,0x4
c00201e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00201e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00201e8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00201ec:	e8 0a 57 fe ff       	call   c00058fb <f_lseek>
c00201f1:	83 c4 10             	add    esp,0x10
c00201f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00201f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00201fc:	85 c0                	test   eax,eax
c00201fe:	75 07                	jne    c0020207 <FAT::seek(void*, unsigned long long)+0x4b>
c0020200:	b8 00 00 00 00       	mov    eax,0x0
c0020205:	eb 05                	jmp    c002020c <FAT::seek(void*, unsigned long long)+0x50>
c0020207:	b8 01 00 00 00       	mov    eax,0x1
c002020c:	83 c4 2c             	add    esp,0x2c
c002020f:	c3                   	ret    

c0020210 <fatWrapperReadDisk>:
c0020210:	83 ec 1c             	sub    esp,0x1c
c0020213:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020217:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002021b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002021f:	89 04 24             	mov    DWORD PTR [esp],eax
c0020222:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020226:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002022a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002022f:	8b 04 85 00 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2900]
c0020236:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002023a:	83 ec 0c             	sub    esp,0xc
c002023d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020241:	52                   	push   edx
c0020242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020246:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002024a:	50                   	push   eax
c002024b:	e8 9e 5d ff ff       	call   c0015fee <LogicalDisk::read(unsigned long long, int, void*)>
c0020250:	83 c4 20             	add    esp,0x20
c0020253:	83 c4 1c             	add    esp,0x1c
c0020256:	c3                   	ret    

c0020257 <fatWrapperWriteDisk>:
c0020257:	83 ec 1c             	sub    esp,0x1c
c002025a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002025e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020262:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020266:	89 04 24             	mov    DWORD PTR [esp],eax
c0020269:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002026d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020271:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020276:	8b 04 85 00 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2900]
c002027d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020281:	83 ec 0c             	sub    esp,0xc
c0020284:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020288:	52                   	push   edx
c0020289:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002028d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020291:	50                   	push   eax
c0020292:	e8 c3 5d ff ff       	call   c001605a <LogicalDisk::write(unsigned long long, int, void*)>
c0020297:	83 c4 20             	add    esp,0x20
c002029a:	83 c4 1c             	add    esp,0x1c
c002029d:	c3                   	ret    

c002029e <fatWrapperIoctl>:
c002029e:	53                   	push   ebx
c002029f:	83 ec 28             	sub    esp,0x28
c00202a2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00202a6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00202aa:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00202ae:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00202b2:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00202b7:	75 31                	jne    c00202ea <fatWrapperIoctl+0x4c>
c00202b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00202bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00202c1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00202c6:	8b 04 85 00 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2900]
c00202cd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00202d3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00202d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00202dd:	66 89 02             	mov    WORD PTR [edx],ax
c00202e0:	b8 00 00 00 00       	mov    eax,0x0
c00202e5:	e9 b2 00 00 00       	jmp    c002039c <fatWrapperIoctl+0xfe>
c00202ea:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00202ef:	75 6a                	jne    c002035b <fatWrapperIoctl+0xbd>
c00202f1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00202f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00202f9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00202fe:	8b 04 85 00 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2900]
c0020305:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002030b:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020311:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020317:	89 c8                	mov    eax,ecx
c0020319:	89 da                	mov    edx,ebx
c002031b:	0f a4 c2 0a          	shld   edx,eax,0xa
c002031f:	c1 e0 0a             	shl    eax,0xa
c0020322:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020327:	8b 0c 8d 00 d7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2900]
c002032e:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020334:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c002033a:	89 cb                	mov    ebx,ecx
c002033c:	c1 fb 1f             	sar    ebx,0x1f
c002033f:	53                   	push   ebx
c0020340:	51                   	push   ecx
c0020341:	52                   	push   edx
c0020342:	50                   	push   eax
c0020343:	e8 54 55 00 00       	call   c002589c <__udivdi3>
c0020348:	83 c4 10             	add    esp,0x10
c002034b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002034f:	89 01                	mov    DWORD PTR [ecx],eax
c0020351:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020354:	b8 00 00 00 00       	mov    eax,0x0
c0020359:	eb 41                	jmp    c002039c <fatWrapperIoctl+0xfe>
c002035b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020360:	75 07                	jne    c0020369 <fatWrapperIoctl+0xcb>
c0020362:	b8 00 00 00 00       	mov    eax,0x0
c0020367:	eb 33                	jmp    c002039c <fatWrapperIoctl+0xfe>
c0020369:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002036e:	75 19                	jne    c0020389 <fatWrapperIoctl+0xeb>
c0020370:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020374:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020378:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002037c:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020382:	b8 00 00 00 00       	mov    eax,0x0
c0020387:	eb 13                	jmp    c002039c <fatWrapperIoctl+0xfe>
c0020389:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002038e:	75 07                	jne    c0020397 <fatWrapperIoctl+0xf9>
c0020390:	b8 00 00 00 00       	mov    eax,0x0
c0020395:	eb 05                	jmp    c002039c <fatWrapperIoctl+0xfe>
c0020397:	b8 04 00 00 00       	mov    eax,0x4
c002039c:	83 c4 28             	add    esp,0x28
c002039f:	5b                   	pop    ebx
c00203a0:	c3                   	ret    
c00203a1:	90                   	nop

c00203a2 <FAT::FAT()>:
c00203a2:	83 ec 1c             	sub    esp,0x1c
c00203a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00203a9:	83 ec 0c             	sub    esp,0xc
c00203ac:	50                   	push   eax
c00203ad:	e8 7c 28 ff ff       	call   c0012c2e <Filesystem::Filesystem()>
c00203b2:	83 c4 10             	add    esp,0x10
c00203b5:	ba a4 b5 02 c0       	mov    edx,0xc002b5a4
c00203ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00203be:	89 10                	mov    DWORD PTR [eax],edx
c00203c0:	c7 05 00 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e700,0x0
c00203ca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00203d2:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00203d7:	7f 15                	jg     c00203ee <FAT::FAT()+0x4c>
c00203d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00203dd:	c7 04 85 20 e7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd18e0],0xffffffff
c00203e8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00203ec:	eb e4                	jmp    c00203d2 <FAT::FAT()+0x30>
c00203ee:	90                   	nop
c00203ef:	83 c4 1c             	add    esp,0x1c
c00203f2:	c3                   	ret    
c00203f3:	90                   	nop

c00203f4 <FAT::fixFilepath(char*)>:
c00203f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00203f8:	8a 00                	mov    al,BYTE PTR [eax]
c00203fa:	3c 40                	cmp    al,0x40
c00203fc:	7e 2c                	jle    c002042a <FAT::fixFilepath(char*)+0x36>
c00203fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020402:	8a 00                	mov    al,BYTE PTR [eax]
c0020404:	83 e8 41             	sub    eax,0x41
c0020407:	88 c2                	mov    dl,al
c0020409:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002040d:	88 10                	mov    BYTE PTR [eax],dl
c002040f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020413:	8a 00                	mov    al,BYTE PTR [eax]
c0020415:	0f be c0             	movsx  eax,al
c0020418:	8b 04 85 20 e7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd18e0]
c002041f:	83 c0 30             	add    eax,0x30
c0020422:	88 c2                	mov    dl,al
c0020424:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020428:	88 10                	mov    BYTE PTR [eax],dl
c002042a:	90                   	nop
c002042b:	c3                   	ret    

c002042c <FAT::open(char const*, void**, FileOpenMode)>:
c002042c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020432:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002043a:	74 0a                	je     c0020446 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c002043c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020444:	75 0a                	jne    c0020450 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020446:	b8 04 00 00 00       	mov    eax,0x4
c002044b:	e9 fd 00 00 00       	jmp    c002054d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020450:	83 ec 08             	sub    esp,0x8
c0020453:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002045a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002045e:	50                   	push   eax
c002045f:	e8 ff 02 fe ff       	call   c0000763 <strcpy>
c0020464:	83 c4 10             	add    esp,0x10
c0020467:	83 ec 08             	sub    esp,0x8
c002046a:	8d 44 24 10          	lea    eax,[esp+0x10]
c002046e:	50                   	push   eax
c002046f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020476:	e8 79 ff ff ff       	call   c00203f4 <FAT::fixFilepath(char*)>
c002047b:	83 c4 10             	add    esp,0x10
c002047e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020486:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002048d:	83 e0 01             	and    eax,0x1
c0020490:	74 08                	je     c002049a <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020492:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c002049a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00204a1:	83 e0 04             	and    eax,0x4
c00204a4:	74 10                	je     c00204b6 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00204a6:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00204ae:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00204b6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00204bd:	83 e0 02             	and    eax,0x2
c00204c0:	74 08                	je     c00204ca <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00204c2:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00204ca:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00204d1:	83 e0 08             	and    eax,0x8
c00204d4:	74 08                	je     c00204de <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00204d6:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00204de:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00204e5:	83 e0 10             	and    eax,0x10
c00204e8:	74 08                	je     c00204f2 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00204ea:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00204f2:	83 ec 0c             	sub    esp,0xc
c00204f5:	68 50 02 00 00       	push   0x250
c00204fa:	e8 5b f1 fe ff       	call   c000f65a <malloc>
c00204ff:	83 c4 10             	add    esp,0x10
c0020502:	89 c2                	mov    edx,eax
c0020504:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002050b:	89 10                	mov    DWORD PTR [eax],edx
c002050d:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020515:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002051c:	8b 00                	mov    eax,DWORD PTR [eax]
c002051e:	83 ec 04             	sub    esp,0x4
c0020521:	52                   	push   edx
c0020522:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020526:	52                   	push   edx
c0020527:	50                   	push   eax
c0020528:	e8 4d 48 fe ff       	call   c0004d7a <f_open>
c002052d:	83 c4 10             	add    esp,0x10
c0020530:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020537:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c002053f:	74 07                	je     c0020548 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020541:	b8 01 00 00 00       	mov    eax,0x1
c0020546:	eb 05                	jmp    c002054d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020548:	b8 00 00 00 00       	mov    eax,0x0
c002054d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020553:	c3                   	ret    

c0020554 <FAT::openDir(char const*, void**)>:
c0020554:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002055a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020562:	74 0a                	je     c002056e <FAT::openDir(char const*, void**)+0x1a>
c0020564:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002056c:	75 07                	jne    c0020575 <FAT::openDir(char const*, void**)+0x21>
c002056e:	b8 04 00 00 00       	mov    eax,0x4
c0020573:	eb 7d                	jmp    c00205f2 <FAT::openDir(char const*, void**)+0x9e>
c0020575:	83 ec 08             	sub    esp,0x8
c0020578:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002057f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020583:	50                   	push   eax
c0020584:	e8 da 01 fe ff       	call   c0000763 <strcpy>
c0020589:	83 c4 10             	add    esp,0x10
c002058c:	83 ec 08             	sub    esp,0x8
c002058f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020593:	50                   	push   eax
c0020594:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002059b:	e8 54 fe ff ff       	call   c00203f4 <FAT::fixFilepath(char*)>
c00205a0:	83 c4 10             	add    esp,0x10
c00205a3:	83 ec 0c             	sub    esp,0xc
c00205a6:	6a 4c                	push   0x4c
c00205a8:	e8 ad f0 fe ff       	call   c000f65a <malloc>
c00205ad:	83 c4 10             	add    esp,0x10
c00205b0:	89 c2                	mov    edx,eax
c00205b2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00205b9:	89 10                	mov    DWORD PTR [eax],edx
c00205bb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00205c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00205c4:	83 ec 08             	sub    esp,0x8
c00205c7:	8d 54 24 14          	lea    edx,[esp+0x14]
c00205cb:	52                   	push   edx
c00205cc:	50                   	push   eax
c00205cd:	e8 e0 57 fe ff       	call   c0005db2 <f_opendir>
c00205d2:	83 c4 10             	add    esp,0x10
c00205d5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00205dc:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00205e4:	74 07                	je     c00205ed <FAT::openDir(char const*, void**)+0x99>
c00205e6:	b8 01 00 00 00       	mov    eax,0x1
c00205eb:	eb 05                	jmp    c00205f2 <FAT::openDir(char const*, void**)+0x9e>
c00205ed:	b8 00 00 00 00       	mov    eax,0x0
c00205f2:	81 c4 1c 01 00 00    	add    esp,0x11c
c00205f8:	c3                   	ret    
c00205f9:	90                   	nop

c00205fa <FAT::stat(char const*, unsigned long long*, bool*)>:
c00205fa:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020600:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020608:	75 0a                	jne    c0020614 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c002060a:	b8 04 00 00 00       	mov    eax,0x4
c002060f:	e9 c9 00 00 00       	jmp    c00206dd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020614:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c002061c:	75 0a                	jne    c0020628 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c002061e:	b8 04 00 00 00       	mov    eax,0x4
c0020623:	e9 b5 00 00 00       	jmp    c00206dd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020628:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020630:	75 0a                	jne    c002063c <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020632:	b8 04 00 00 00       	mov    eax,0x4
c0020637:	e9 a1 00 00 00       	jmp    c00206dd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002063c:	83 ec 08             	sub    esp,0x8
c002063f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020646:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002064d:	50                   	push   eax
c002064e:	e8 10 01 fe ff       	call   c0000763 <strcpy>
c0020653:	83 c4 10             	add    esp,0x10
c0020656:	83 ec 08             	sub    esp,0x8
c0020659:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020660:	50                   	push   eax
c0020661:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020668:	e8 87 fd ff ff       	call   c00203f4 <FAT::fixFilepath(char*)>
c002066d:	83 c4 10             	add    esp,0x10
c0020670:	83 ec 08             	sub    esp,0x8
c0020673:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020677:	50                   	push   eax
c0020678:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002067f:	50                   	push   eax
c0020680:	e8 ec 58 fe ff       	call   c0005f71 <f_stat>
c0020685:	83 c4 10             	add    esp,0x10
c0020688:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002068f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020696:	85 c0                	test   eax,eax
c0020698:	74 07                	je     c00206a1 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c002069a:	83 f8 04             	cmp    eax,0x4
c002069d:	74 32                	je     c00206d1 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002069f:	eb 37                	jmp    c00206d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00206a1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00206a5:	0f b6 c0             	movzx  eax,al
c00206a8:	83 e0 10             	and    eax,0x10
c00206ab:	0f 95 c2             	setne  dl
c00206ae:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00206b5:	88 10                	mov    BYTE PTR [eax],dl
c00206b7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00206ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00206be:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00206c5:	89 01                	mov    DWORD PTR [ecx],eax
c00206c7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00206ca:	b8 00 00 00 00       	mov    eax,0x0
c00206cf:	eb 0c                	jmp    c00206dd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00206d1:	b8 02 00 00 00       	mov    eax,0x2
c00206d6:	eb 05                	jmp    c00206dd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00206d8:	b8 01 00 00 00       	mov    eax,0x1
c00206dd:	81 c4 2c 02 00 00    	add    esp,0x22c
c00206e3:	c3                   	ret    

c00206e4 <FAT::unlink(char const*)>:
c00206e4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00206ea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00206f2:	75 07                	jne    c00206fb <FAT::unlink(char const*)+0x17>
c00206f4:	b8 04 00 00 00       	mov    eax,0x4
c00206f9:	eb 5c                	jmp    c0020757 <FAT::unlink(char const*)+0x73>
c00206fb:	83 ec 08             	sub    esp,0x8
c00206fe:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020705:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020709:	50                   	push   eax
c002070a:	e8 54 00 fe ff       	call   c0000763 <strcpy>
c002070f:	83 c4 10             	add    esp,0x10
c0020712:	83 ec 08             	sub    esp,0x8
c0020715:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020719:	50                   	push   eax
c002071a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020721:	e8 ce fc ff ff       	call   c00203f4 <FAT::fixFilepath(char*)>
c0020726:	83 c4 10             	add    esp,0x10
c0020729:	83 ec 0c             	sub    esp,0xc
c002072c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020730:	50                   	push   eax
c0020731:	e8 8d 5b fe ff       	call   c00062c3 <f_unlink>
c0020736:	83 c4 10             	add    esp,0x10
c0020739:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020740:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020747:	85 c0                	test   eax,eax
c0020749:	75 07                	jne    c0020752 <FAT::unlink(char const*)+0x6e>
c002074b:	b8 00 00 00 00       	mov    eax,0x0
c0020750:	eb 05                	jmp    c0020757 <FAT::unlink(char const*)+0x73>
c0020752:	b8 01 00 00 00       	mov    eax,0x1
c0020757:	81 c4 1c 01 00 00    	add    esp,0x11c
c002075d:	c3                   	ret    

c002075e <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c002075e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020764:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c002076b:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020772:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020776:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002077a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020782:	75 0a                	jne    c002078e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020784:	b8 04 00 00 00       	mov    eax,0x4
c0020789:	e9 1c 01 00 00       	jmp    c00208aa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002078e:	83 ec 08             	sub    esp,0x8
c0020791:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020798:	8d 44 24 24          	lea    eax,[esp+0x24]
c002079c:	50                   	push   eax
c002079d:	e8 c1 ff fd ff       	call   c0000763 <strcpy>
c00207a2:	83 c4 10             	add    esp,0x10
c00207a5:	83 ec 08             	sub    esp,0x8
c00207a8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00207ac:	50                   	push   eax
c00207ad:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00207b4:	e8 3b fc ff ff       	call   c00203f4 <FAT::fixFilepath(char*)>
c00207b9:	83 c4 10             	add    esp,0x10
c00207bc:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00207c4:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00207cc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00207d1:	83 e0 01             	and    eax,0x1
c00207d4:	74 08                	je     c00207de <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00207d6:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00207de:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00207e3:	83 e0 02             	and    eax,0x2
c00207e6:	74 08                	je     c00207f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00207e8:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00207f0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00207f5:	83 e0 04             	and    eax,0x4
c00207f8:	74 08                	je     c0020802 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00207fa:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020802:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020807:	83 e0 08             	and    eax,0x8
c002080a:	74 08                	je     c0020814 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c002080c:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020814:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020819:	83 e0 01             	and    eax,0x1
c002081c:	74 08                	je     c0020826 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c002081e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020826:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002082b:	83 e0 02             	and    eax,0x2
c002082e:	74 08                	je     c0020838 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020830:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020838:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002083d:	83 e0 04             	and    eax,0x4
c0020840:	74 08                	je     c002084a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020842:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c002084a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002084f:	83 e0 08             	and    eax,0x8
c0020852:	74 08                	je     c002085c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020854:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c002085c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020863:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c002086a:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020872:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002087a:	83 ec 04             	sub    esp,0x4
c002087d:	52                   	push   edx
c002087e:	50                   	push   eax
c002087f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020883:	50                   	push   eax
c0020884:	e8 dc 60 fe ff       	call   c0006965 <f_chmod>
c0020889:	83 c4 10             	add    esp,0x10
c002088c:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020893:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002089a:	85 c0                	test   eax,eax
c002089c:	75 07                	jne    c00208a5 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c002089e:	b8 00 00 00 00       	mov    eax,0x0
c00208a3:	eb 05                	jmp    c00208aa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00208a5:	b8 01 00 00 00       	mov    eax,0x1
c00208aa:	81 c4 2c 01 00 00    	add    esp,0x12c
c00208b0:	c3                   	ret    
c00208b1:	90                   	nop

c00208b2 <FAT::rename(char const*, char const*)>:
c00208b2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00208b8:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00208c0:	74 0a                	je     c00208cc <FAT::rename(char const*, char const*)+0x1a>
c00208c2:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00208ca:	75 0a                	jne    c00208d6 <FAT::rename(char const*, char const*)+0x24>
c00208cc:	b8 04 00 00 00       	mov    eax,0x4
c00208d1:	e9 98 00 00 00       	jmp    c002096e <FAT::rename(char const*, char const*)+0xbc>
c00208d6:	83 ec 08             	sub    esp,0x8
c00208d9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00208e0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00208e7:	50                   	push   eax
c00208e8:	e8 76 fe fd ff       	call   c0000763 <strcpy>
c00208ed:	83 c4 10             	add    esp,0x10
c00208f0:	83 ec 08             	sub    esp,0x8
c00208f3:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00208fa:	50                   	push   eax
c00208fb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020902:	e8 ed fa ff ff       	call   c00203f4 <FAT::fixFilepath(char*)>
c0020907:	83 c4 10             	add    esp,0x10
c002090a:	83 ec 08             	sub    esp,0x8
c002090d:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020914:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020918:	50                   	push   eax
c0020919:	e8 45 fe fd ff       	call   c0000763 <strcpy>
c002091e:	83 c4 10             	add    esp,0x10
c0020921:	83 ec 08             	sub    esp,0x8
c0020924:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020928:	50                   	push   eax
c0020929:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020930:	e8 bf fa ff ff       	call   c00203f4 <FAT::fixFilepath(char*)>
c0020935:	83 c4 10             	add    esp,0x10
c0020938:	83 ec 08             	sub    esp,0x8
c002093b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002093f:	50                   	push   eax
c0020940:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020947:	50                   	push   eax
c0020948:	e8 25 5d fe ff       	call   c0006672 <f_rename>
c002094d:	83 c4 10             	add    esp,0x10
c0020950:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020957:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002095e:	85 c0                	test   eax,eax
c0020960:	75 07                	jne    c0020969 <FAT::rename(char const*, char const*)+0xb7>
c0020962:	b8 00 00 00 00       	mov    eax,0x0
c0020967:	eb 05                	jmp    c002096e <FAT::rename(char const*, char const*)+0xbc>
c0020969:	b8 01 00 00 00       	mov    eax,0x1
c002096e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020974:	c3                   	ret    
c0020975:	90                   	nop

c0020976 <FAT::mkdir(char const*)>:
c0020976:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002097c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020984:	75 07                	jne    c002098d <FAT::mkdir(char const*)+0x17>
c0020986:	b8 04 00 00 00       	mov    eax,0x4
c002098b:	eb 5c                	jmp    c00209e9 <FAT::mkdir(char const*)+0x73>
c002098d:	83 ec 08             	sub    esp,0x8
c0020990:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020997:	8d 44 24 18          	lea    eax,[esp+0x18]
c002099b:	50                   	push   eax
c002099c:	e8 c2 fd fd ff       	call   c0000763 <strcpy>
c00209a1:	83 c4 10             	add    esp,0x10
c00209a4:	83 ec 08             	sub    esp,0x8
c00209a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00209ab:	50                   	push   eax
c00209ac:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00209b3:	e8 3c fa ff ff       	call   c00203f4 <FAT::fixFilepath(char*)>
c00209b8:	83 c4 10             	add    esp,0x10
c00209bb:	83 ec 0c             	sub    esp,0xc
c00209be:	8d 44 24 18          	lea    eax,[esp+0x18]
c00209c2:	50                   	push   eax
c00209c3:	e8 7e 5a fe ff       	call   c0006446 <f_mkdir>
c00209c8:	83 c4 10             	add    esp,0x10
c00209cb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00209d2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00209d9:	85 c0                	test   eax,eax
c00209db:	75 07                	jne    c00209e4 <FAT::mkdir(char const*)+0x6e>
c00209dd:	b8 00 00 00 00       	mov    eax,0x0
c00209e2:	eb 05                	jmp    c00209e9 <FAT::mkdir(char const*)+0x73>
c00209e4:	b8 01 00 00 00       	mov    eax,0x1
c00209e9:	81 c4 1c 01 00 00    	add    esp,0x11c
c00209ef:	c3                   	ret    

c00209f0 <FAT::exists(char const*)>:
c00209f0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00209f6:	83 ec 08             	sub    esp,0x8
c00209f9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020a00:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a04:	50                   	push   eax
c0020a05:	e8 59 fd fd ff       	call   c0000763 <strcpy>
c0020a0a:	83 c4 10             	add    esp,0x10
c0020a0d:	83 ec 08             	sub    esp,0x8
c0020a10:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020a14:	50                   	push   eax
c0020a15:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020a1c:	e8 d3 f9 ff ff       	call   c00203f4 <FAT::fixFilepath(char*)>
c0020a21:	83 c4 10             	add    esp,0x10
c0020a24:	83 ec 08             	sub    esp,0x8
c0020a27:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020a2e:	50                   	push   eax
c0020a2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a33:	50                   	push   eax
c0020a34:	e8 38 55 fe ff       	call   c0005f71 <f_stat>
c0020a39:	83 c4 10             	add    esp,0x10
c0020a3c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020a43:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020a4a:	85 c0                	test   eax,eax
c0020a4c:	75 04                	jne    c0020a52 <FAT::exists(char const*)+0x62>
c0020a4e:	b0 01                	mov    al,0x1
c0020a50:	eb 02                	jmp    c0020a54 <FAT::exists(char const*)+0x64>
c0020a52:	b0 00                	mov    al,0x0
c0020a54:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020a5a:	c3                   	ret    
c0020a5b:	90                   	nop

c0020a5c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020a5c:	b8 08 00 00 00       	mov    eax,0x8
c0020a61:	c3                   	ret    

c0020a62 <ISO9660::seek(void*, unsigned long long)>:
c0020a62:	53                   	push   ebx
c0020a63:	b8 04 00 00 00       	mov    eax,0x4
c0020a68:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020a6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020a70:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020a74:	85 d2                	test   edx,edx
c0020a76:	74 17                	je     c0020a8f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020a78:	89 c8                	mov    eax,ecx
c0020a7a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020a7d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020a80:	b8 01 00 00 00       	mov    eax,0x1
c0020a85:	73 08                	jae    c0020a8f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020a87:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020a8a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020a8d:	31 c0                	xor    eax,eax
c0020a8f:	5b                   	pop    ebx
c0020a90:	c3                   	ret    
c0020a91:	90                   	nop

c0020a92 <ISO9660::tell(void*, unsigned long long*)>:
c0020a92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020a96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a9a:	85 d2                	test   edx,edx
c0020a9c:	74 12                	je     c0020ab0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020a9e:	85 c0                	test   eax,eax
c0020aa0:	74 0e                	je     c0020ab0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020aa2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020aa5:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020aa8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020aab:	89 10                	mov    DWORD PTR [eax],edx
c0020aad:	31 c0                	xor    eax,eax
c0020aaf:	c3                   	ret    
c0020ab0:	b8 04 00 00 00       	mov    eax,0x4
c0020ab5:	c3                   	ret    

c0020ab6 <ISO9660::getName()>:
c0020ab6:	b8 00 b6 02 c0       	mov    eax,0xc002b600
c0020abb:	c3                   	ret    

c0020abc <ISO9660::stat(void*, unsigned long long*)>:
c0020abc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020ac0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ac4:	85 d2                	test   edx,edx
c0020ac6:	74 12                	je     c0020ada <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020ac8:	85 c0                	test   eax,eax
c0020aca:	74 0e                	je     c0020ada <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020acc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020acf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020ad2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020ad5:	89 10                	mov    DWORD PTR [eax],edx
c0020ad7:	31 c0                	xor    eax,eax
c0020ad9:	c3                   	ret    
c0020ada:	b8 04 00 00 00       	mov    eax,0x4
c0020adf:	c3                   	ret    

c0020ae0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020ae0:	b8 01 00 00 00       	mov    eax,0x1
c0020ae5:	c3                   	ret    

c0020ae6 <ISO9660::unlink(char const*)>:
c0020ae6:	b8 01 00 00 00       	mov    eax,0x1
c0020aeb:	c3                   	ret    

c0020aec <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020aec:	b8 01 00 00 00       	mov    eax,0x1
c0020af1:	c3                   	ret    

c0020af2 <ISO9660::rename(char const*, char const*)>:
c0020af2:	b8 01 00 00 00       	mov    eax,0x1
c0020af7:	c3                   	ret    

c0020af8 <ISO9660::mkdir(char const*)>:
c0020af8:	b8 01 00 00 00       	mov    eax,0x1
c0020afd:	c3                   	ret    

c0020afe <ISO9660::close(void*)>:
c0020afe:	83 ec 0c             	sub    esp,0xc
c0020b01:	b8 04 00 00 00       	mov    eax,0x4
c0020b06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020b0a:	85 d2                	test   edx,edx
c0020b0c:	74 0e                	je     c0020b1c <ISO9660::close(void*)+0x1e>
c0020b0e:	83 ec 0c             	sub    esp,0xc
c0020b11:	52                   	push   edx
c0020b12:	e8 53 eb fe ff       	call   c000f66a <free>
c0020b17:	83 c4 10             	add    esp,0x10
c0020b1a:	31 c0                	xor    eax,eax
c0020b1c:	83 c4 0c             	add    esp,0xc
c0020b1f:	c3                   	ret    

c0020b20 <ISO9660::closeDir(void*)>:
c0020b20:	83 ec 0c             	sub    esp,0xc
c0020b23:	b8 04 00 00 00       	mov    eax,0x4
c0020b28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020b2c:	85 d2                	test   edx,edx
c0020b2e:	74 0e                	je     c0020b3e <ISO9660::closeDir(void*)+0x1e>
c0020b30:	83 ec 0c             	sub    esp,0xc
c0020b33:	52                   	push   edx
c0020b34:	e8 31 eb fe ff       	call   c000f66a <free>
c0020b39:	83 c4 10             	add    esp,0x10
c0020b3c:	31 c0                	xor    eax,eax
c0020b3e:	83 c4 0c             	add    esp,0xc
c0020b41:	c3                   	ret    

c0020b42 <ISO9660::~ISO9660()>:
c0020b42:	83 ec 0c             	sub    esp,0xc
c0020b45:	ba 64 b6 02 c0       	mov    edx,0xc002b664
c0020b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b4e:	89 10                	mov    DWORD PTR [eax],edx
c0020b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b54:	83 ec 0c             	sub    esp,0xc
c0020b57:	50                   	push   eax
c0020b58:	e8 f5 20 ff ff       	call   c0012c52 <Filesystem::~Filesystem()>
c0020b5d:	83 c4 10             	add    esp,0x10
c0020b60:	90                   	nop
c0020b61:	83 c4 0c             	add    esp,0xc
c0020b64:	c3                   	ret    
c0020b65:	90                   	nop

c0020b66 <ISO9660::~ISO9660()>:
c0020b66:	83 ec 0c             	sub    esp,0xc
c0020b69:	83 ec 0c             	sub    esp,0xc
c0020b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b70:	e8 cd ff ff ff       	call   c0020b42 <ISO9660::~ISO9660()>
c0020b75:	83 c4 10             	add    esp,0x10
c0020b78:	83 ec 08             	sub    esp,0x8
c0020b7b:	6a 08                	push   0x8
c0020b7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b81:	e8 c3 1c ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0020b86:	83 c4 10             	add    esp,0x10
c0020b89:	83 c4 0c             	add    esp,0xc
c0020b8c:	c3                   	ret    

c0020b8d <__memmem(unsigned char*, int, unsigned char*, int)>:
c0020b8d:	55                   	push   ebp
c0020b8e:	31 c9                	xor    ecx,ecx
c0020b90:	57                   	push   edi
c0020b91:	56                   	push   esi
c0020b92:	53                   	push   ebx
c0020b93:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0020b97:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020b9b:	89 eb                	mov    ebx,ebp
c0020b9d:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0020ba1:	39 ce                	cmp    esi,ecx
c0020ba3:	7e 17                	jle    c0020bbc <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0020ba5:	31 d2                	xor    edx,edx
c0020ba7:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0020bab:	7d 13                	jge    c0020bc0 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0020bad:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020bb1:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020bb4:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0020bb7:	75 0d                	jne    c0020bc6 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0020bb9:	42                   	inc    edx
c0020bba:	eb eb                	jmp    c0020ba7 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0020bbc:	31 c0                	xor    eax,eax
c0020bbe:	eb 0a                	jmp    c0020bca <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020bc0:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020bc4:	eb 04                	jmp    c0020bca <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020bc6:	41                   	inc    ecx
c0020bc7:	43                   	inc    ebx
c0020bc8:	eb d7                	jmp    c0020ba1 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0020bca:	5b                   	pop    ebx
c0020bcb:	5e                   	pop    esi
c0020bcc:	5f                   	pop    edi
c0020bcd:	5d                   	pop    ebp
c0020bce:	c3                   	ret    

c0020bcf <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0020bcf:	56                   	push   esi
c0020bd0:	53                   	push   ebx
c0020bd1:	52                   	push   edx
c0020bd2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020bd6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020bda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020bde:	39 0d 00 e8 02 c0    	cmp    DWORD PTR ds:0xc002e800,ecx
c0020be4:	75 08                	jne    c0020bee <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0020be6:	38 05 74 c6 02 c0    	cmp    BYTE PTR ds:0xc002c674,al
c0020bec:	74 2b                	je     c0020c19 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0020bee:	83 ec 0c             	sub    esp,0xc
c0020bf1:	a2 74 c6 02 c0       	mov    ds:0xc002c674,al
c0020bf6:	68 20 e8 02 c0       	push   0xc002e820
c0020bfb:	0f be c0             	movsx  eax,al
c0020bfe:	6a 01                	push   0x1
c0020c00:	89 0d 00 e8 02 c0    	mov    DWORD PTR ds:0xc002e800,ecx
c0020c06:	31 db                	xor    ebx,ebx
c0020c08:	53                   	push   ebx
c0020c09:	51                   	push   ecx
c0020c0a:	ff 34 85 fc d5 02 c0 	push   DWORD PTR [eax*4-0x3ffd2a04]
c0020c11:	e8 d8 53 ff ff       	call   c0015fee <LogicalDisk::read(unsigned long long, int, void*)>
c0020c16:	83 c4 20             	add    esp,0x20
c0020c19:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0020c21:	c7 44 24 14 20 e8 02 c0 	mov    DWORD PTR [esp+0x14],0xc002e820
c0020c29:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020c2d:	58                   	pop    eax
c0020c2e:	5b                   	pop    ebx
c0020c2f:	5e                   	pop    esi
c0020c30:	e9 6b fa fd ff       	jmp    c00006a0 <memcpy>
c0020c35:	90                   	nop

c0020c36 <ISO9660::tryMount(LogicalDisk*, int)>:
c0020c36:	81 ec 10 08 00 00    	sub    esp,0x810
c0020c3c:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0020c43:	83 c0 41             	add    eax,0x41
c0020c46:	0f be c0             	movsx  eax,al
c0020c49:	50                   	push   eax
c0020c4a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c4e:	50                   	push   eax
c0020c4f:	6a 10                	push   0x10
c0020c51:	e8 79 ff ff ff       	call   c0020bcf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020c56:	83 c4 10             	add    esp,0x10
c0020c59:	31 c0                	xor    eax,eax
c0020c5b:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0020c60:	75 1d                	jne    c0020c7f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020c62:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0020c67:	75 16                	jne    c0020c7f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020c69:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0020c6e:	75 0f                	jne    c0020c7f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020c70:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0020c75:	75 08                	jne    c0020c7f <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020c77:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0020c7c:	0f 94 c0             	sete   al
c0020c7f:	81 c4 0c 08 00 00    	add    esp,0x80c
c0020c85:	c3                   	ret    

c0020c86 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0020c86:	55                   	push   ebp
c0020c87:	57                   	push   edi
c0020c88:	56                   	push   esi
c0020c89:	53                   	push   ebx
c0020c8a:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0020c90:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0020c97:	85 ed                	test   ebp,ebp
c0020c99:	0f 84 d6 01 00 00    	je     c0020e75 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020c9f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0020ca7:	0f 84 c8 01 00 00    	je     c0020e75 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020cad:	b8 01 00 00 00       	mov    eax,0x1
c0020cb2:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0020cb6:	0f 85 be 01 00 00    	jne    c0020e7a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0020cbc:	31 d2                	xor    edx,edx
c0020cbe:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020cc5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020cc8:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0020ccb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020ccf:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0020cd2:	89 04 24             	mov    DWORD PTR [esp],eax
c0020cd5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020cd9:	01 f0                	add    eax,esi
c0020cdb:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0020cde:	11 fa                	adc    edx,edi
c0020ce0:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0020ce4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0020ce8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020cec:	19 d1                	sbb    ecx,edx
c0020cee:	72 0a                	jb     c0020cfa <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0020cf0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020cf4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020cf8:	eb 13                	jmp    c0020d0d <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0020cfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020cfe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020d02:	29 f0                	sub    eax,esi
c0020d04:	19 fa                	sbb    edx,edi
c0020d06:	89 04 24             	mov    DWORD PTR [esp],eax
c0020d09:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020d0d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020d10:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0020d13:	0f a4 c2 0b          	shld   edx,eax,0xb
c0020d17:	51                   	push   ecx
c0020d18:	c1 e0 0b             	shl    eax,0xb
c0020d1b:	01 c6                	add    esi,eax
c0020d1d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020d21:	11 d7                	adc    edi,edx
c0020d23:	50                   	push   eax
c0020d24:	89 fa                	mov    edx,edi
c0020d26:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0020d2a:	89 f0                	mov    eax,esi
c0020d2c:	53                   	push   ebx
c0020d2d:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020d31:	50                   	push   eax
c0020d32:	e8 98 fe ff ff       	call   c0020bcf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020d37:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020d3b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0020d3e:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0020d42:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0020d48:	83 c4 10             	add    esp,0x10
c0020d4b:	b8 00 08 00 00       	mov    eax,0x800
c0020d50:	29 d0                	sub    eax,edx
c0020d52:	39 c1                	cmp    ecx,eax
c0020d54:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0020d58:	83 d9 00             	sbb    ecx,0x0
c0020d5b:	7d 1c                	jge    c0020d79 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0020d5d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0020d62:	75 12                	jne    c0020d76 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0020d64:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020d6b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020d71:	e9 fb 00 00 00       	jmp    c0020e71 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0020d76:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020d79:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0020d7c:	31 d2                	xor    edx,edx
c0020d7e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0020d82:	39 c2                	cmp    edx,eax
c0020d84:	7d 14                	jge    c0020d9a <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0020d86:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0020d8d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020d91:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0020d94:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0020d97:	42                   	inc    edx
c0020d98:	eb e8                	jmp    c0020d82 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0020d9a:	89 c3                	mov    ebx,eax
c0020d9c:	85 c0                	test   eax,eax
c0020d9e:	79 02                	jns    c0020da2 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0020da0:	31 db                	xor    ebx,ebx
c0020da2:	99                   	cdq    
c0020da3:	01 c3                	add    ebx,eax
c0020da5:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0020dac:	01 c6                	add    esi,eax
c0020dae:	11 d7                	adc    edi,edx
c0020db0:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020db4:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020db8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0020dbb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0020dbf:	29 c6                	sub    esi,eax
c0020dc1:	19 d7                	sbb    edi,edx
c0020dc3:	89 34 24             	mov    DWORD PTR [esp],esi
c0020dc6:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0020dca:	b8 ff 07 00 00       	mov    eax,0x7ff
c0020dcf:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0020dd2:	b8 00 00 00 00       	mov    eax,0x0
c0020dd7:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020ddb:	7d 3e                	jge    c0020e1b <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0020ddd:	52                   	push   edx
c0020dde:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020de2:	50                   	push   eax
c0020de3:	53                   	push   ebx
c0020de4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020de8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020dec:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020df0:	50                   	push   eax
c0020df1:	e8 d9 fd ff ff       	call   c0020bcf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020df6:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0020dfe:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0020e03:	81 c3 00 08 00 00    	add    ebx,0x800
c0020e09:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0020e11:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0020e16:	83 c4 10             	add    esp,0x10
c0020e19:	eb af                	jmp    c0020dca <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0020e1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020e1f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0020e22:	74 32                	je     c0020e56 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0020e24:	50                   	push   eax
c0020e25:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020e29:	50                   	push   eax
c0020e2a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020e2e:	50                   	push   eax
c0020e2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0020e33:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0020e37:	0f ac fe 0b          	shrd   esi,edi,0xb
c0020e3b:	56                   	push   esi
c0020e3c:	e8 8e fd ff ff       	call   c0020bcf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020e41:	83 c4 0c             	add    esp,0xc
c0020e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0020e48:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020e4c:	50                   	push   eax
c0020e4d:	53                   	push   ebx
c0020e4e:	e8 4d f8 fd ff       	call   c00006a0 <memcpy>
c0020e53:	83 c4 10             	add    esp,0x10
c0020e56:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020e5d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020e61:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020e65:	89 38                	mov    DWORD PTR [eax],edi
c0020e67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e6b:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0020e6e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0020e71:	31 c0                	xor    eax,eax
c0020e73:	eb 05                	jmp    c0020e7a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0020e75:	b8 04 00 00 00       	mov    eax,0x4
c0020e7a:	81 c4 2c 08 00 00    	add    esp,0x82c
c0020e80:	5b                   	pop    ebx
c0020e81:	5e                   	pop    esi
c0020e82:	5f                   	pop    edi
c0020e83:	5d                   	pop    ebp
c0020e84:	c3                   	ret    
c0020e85:	90                   	nop

c0020e86 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0020e86:	55                   	push   ebp
c0020e87:	57                   	push   edi
c0020e88:	56                   	push   esi
c0020e89:	53                   	push   ebx
c0020e8a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0020e90:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0020e97:	85 f6                	test   esi,esi
c0020e99:	0f 84 64 02 00 00    	je     c0021103 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0020e9f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0020ea7:	0f 84 56 02 00 00    	je     c0021103 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0020ead:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0020eb0:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0020eb3:	75 0a                	jne    c0020ebf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0020eb5:	b8 07 00 00 00       	mov    eax,0x7
c0020eba:	e9 49 02 00 00       	jmp    c0021108 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020ebf:	50                   	push   eax
c0020ec0:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020ec4:	50                   	push   eax
c0020ec5:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020ecc:	53                   	push   ebx
c0020ecd:	8b 06                	mov    eax,DWORD PTR [esi]
c0020ecf:	c1 e0 0b             	shl    eax,0xb
c0020ed2:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0020ed5:	c1 e8 0b             	shr    eax,0xb
c0020ed8:	50                   	push   eax
c0020ed9:	e8 f1 fc ff ff       	call   c0020bcf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020ede:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020ee1:	83 c4 10             	add    esp,0x10
c0020ee4:	89 c1                	mov    ecx,eax
c0020ee6:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0020ee9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0020eef:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0020ef2:	84 db                	test   bl,bl
c0020ef4:	0f 85 90 00 00 00    	jne    c0020f8a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0020efa:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0020f00:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020f06:	29 c7                	sub    edi,eax
c0020f08:	89 fb                	mov    ebx,edi
c0020f0a:	c1 fb 1f             	sar    ebx,0x1f
c0020f0d:	01 f8                	add    eax,edi
c0020f0f:	11 da                	adc    edx,ebx
c0020f11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020f15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020f19:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0020f1c:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0020f1f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020f22:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020f25:	89 04 24             	mov    DWORD PTR [esp],eax
c0020f28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020f2c:	89 d8                	mov    eax,ebx
c0020f2e:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020f31:	ba 00 00 00 00       	mov    edx,0x0
c0020f36:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020f3a:	b8 00 00 00 00       	mov    eax,0x0
c0020f3f:	73 0b                	jae    c0020f4c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0020f41:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020f44:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020f48:	29 f8                	sub    eax,edi
c0020f4a:	19 da                	sbb    edx,ebx
c0020f4c:	89 d3                	mov    ebx,edx
c0020f4e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020f51:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020f54:	09 c3                	or     ebx,eax
c0020f56:	0f 84 59 ff ff ff    	je     c0020eb5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0020f5c:	55                   	push   ebp
c0020f5d:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020f61:	50                   	push   eax
c0020f62:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020f69:	53                   	push   ebx
c0020f6a:	8b 06                	mov    eax,DWORD PTR [esi]
c0020f6c:	c1 e0 0b             	shl    eax,0xb
c0020f6f:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0020f73:	c1 e8 0b             	shr    eax,0xb
c0020f76:	50                   	push   eax
c0020f77:	e8 53 fc ff ff       	call   c0020bcf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020f7c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020f7f:	83 c4 10             	add    esp,0x10
c0020f82:	25 ff 07 00 00       	and    eax,0x7ff
c0020f87:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0020f8a:	57                   	push   edi
c0020f8b:	6a 28                	push   0x28
c0020f8d:	6a 00                	push   0x0
c0020f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020f93:	50                   	push   eax
c0020f94:	e8 2b f7 fd ff       	call   c00006c4 <memset>
c0020f99:	31 d2                	xor    edx,edx
c0020f9b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0020f9e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020fa4:	89 f8                	mov    eax,edi
c0020fa6:	83 c0 21             	add    eax,0x21
c0020fa9:	83 d2 00             	adc    edx,0x0
c0020fac:	89 c7                	mov    edi,eax
c0020fae:	89 d5                	mov    ebp,edx
c0020fb0:	83 c4 10             	add    esp,0x10
c0020fb3:	31 c9                	xor    ecx,ecx
c0020fb5:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0020fbc:	83 f9 28             	cmp    ecx,0x28
c0020fbf:	88 04 24             	mov    BYTE PTR [esp],al
c0020fc2:	0f 94 c2             	sete   dl
c0020fc5:	88 d0                	mov    al,dl
c0020fc7:	ba ff 07 00 00       	mov    edx,0x7ff
c0020fcc:	39 fa                	cmp    edx,edi
c0020fce:	ba 00 00 00 00       	mov    edx,0x0
c0020fd3:	19 ea                	sbb    edx,ebp
c0020fd5:	0f 92 c2             	setb   dl
c0020fd8:	09 c2                	or     edx,eax
c0020fda:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0020fde:	0f 94 c0             	sete   al
c0020fe1:	08 d0                	or     al,dl
c0020fe3:	75 16                	jne    c0020ffb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020fe5:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0020fe9:	74 10                	je     c0020ffb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020feb:	8a 04 24             	mov    al,BYTE PTR [esp]
c0020fee:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0020ff2:	41                   	inc    ecx
c0020ff3:	83 c7 01             	add    edi,0x1
c0020ff6:	83 d5 00             	adc    ebp,0x0
c0020ff9:	eb ba                	jmp    c0020fb5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0020ffb:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021002:	83 ec 0c             	sub    esp,0xc
c0021005:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021009:	57                   	push   edi
c002100a:	e8 d2 f6 fd ff       	call   c00006e1 <strlen>
c002100f:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021017:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002101b:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021022:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021025:	5a                   	pop    edx
c0021026:	25 ff 07 00 00       	and    eax,0x7ff
c002102b:	01 c8                	add    eax,ecx
c002102d:	59                   	pop    ecx
c002102e:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021034:	83 e0 02             	and    eax,0x2
c0021037:	3c 01                	cmp    al,0x1
c0021039:	19 c0                	sbb    eax,eax
c002103b:	83 c0 02             	add    eax,0x2
c002103e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021042:	57                   	push   edi
c0021043:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021047:	50                   	push   eax
c0021048:	e8 16 f7 fd ff       	call   c0000763 <strcpy>
c002104d:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021051:	83 c4 10             	add    esp,0x10
c0021054:	84 c0                	test   al,al
c0021056:	75 21                	jne    c0021079 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021058:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021060:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021068:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021070:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021077:	eb 28                	jmp    c00210a1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021079:	fe c8                	dec    al
c002107b:	75 24                	jne    c00210a1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c002107d:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021085:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002108d:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021095:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c002109c:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00210a1:	0f b6 fb             	movzx  edi,bl
c00210a4:	31 db                	xor    ebx,ebx
c00210a6:	50                   	push   eax
c00210a7:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c00210ae:	8d 44 24 48          	lea    eax,[esp+0x48]
c00210b2:	50                   	push   eax
c00210b3:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c00210ba:	e8 e1 f5 fd ff       	call   c00006a0 <memcpy>
c00210bf:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c00210c6:	89 f9                	mov    ecx,edi
c00210c8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00210ce:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c00210d1:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00210d4:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c00210d7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00210da:	83 c4 10             	add    esp,0x10
c00210dd:	39 c7                	cmp    edi,eax
c00210df:	89 df                	mov    edi,ebx
c00210e1:	19 d7                	sbb    edi,edx
c00210e3:	72 10                	jb     c00210f5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00210e5:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00210ec:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00210f3:	eb 0a                	jmp    c00210ff <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c00210f5:	29 c8                	sub    eax,ecx
c00210f7:	19 da                	sbb    edx,ebx
c00210f9:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00210fc:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00210ff:	31 c0                	xor    eax,eax
c0021101:	eb 05                	jmp    c0021108 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021103:	b8 04 00 00 00       	mov    eax,0x4
c0021108:	81 c4 5c 09 00 00    	add    esp,0x95c
c002110e:	5b                   	pop    ebx
c002110f:	5e                   	pop    esi
c0021110:	5f                   	pop    edi
c0021111:	5d                   	pop    ebp
c0021112:	c3                   	ret    

c0021113 <readRoot(unsigned int*, unsigned int*, char)>:
c0021113:	81 ec 40 08 00 00    	sub    esp,0x840
c0021119:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021121:	50                   	push   eax
c0021122:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021126:	50                   	push   eax
c0021127:	6a 10                	push   0x10
c0021129:	e8 a1 fa ff ff       	call   c0020bcf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002112e:	83 c4 0c             	add    esp,0xc
c0021131:	6a 22                	push   0x22
c0021133:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c002113a:	50                   	push   eax
c002113b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002113f:	50                   	push   eax
c0021140:	e8 5b f5 fd ff       	call   c00006a0 <memcpy>
c0021145:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002114c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021150:	89 10                	mov    DWORD PTR [eax],edx
c0021152:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021159:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002115d:	89 10                	mov    DWORD PTR [eax],edx
c002115f:	b0 01                	mov    al,0x1
c0021161:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021167:	c3                   	ret    

c0021168 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021168:	55                   	push   ebp
c0021169:	57                   	push   edi
c002116a:	56                   	push   esi
c002116b:	53                   	push   ebx
c002116c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021172:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021179:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021180:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021184:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021188:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002118c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021190:	75 03                	jne    c0021195 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021192:	83 c3 02             	add    ebx,0x2
c0021195:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021198:	75 03                	jne    c002119d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c002119a:	43                   	inc    ebx
c002119b:	eb f8                	jmp    c0021195 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002119d:	51                   	push   ecx
c002119e:	68 00 01 00 00       	push   0x100
c00211a3:	6a 00                	push   0x0
c00211a5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00211a9:	50                   	push   eax
c00211aa:	e8 15 f5 fd ff       	call   c00006c4 <memset>
c00211af:	83 c4 10             	add    esp,0x10
c00211b2:	31 d2                	xor    edx,edx
c00211b4:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00211b7:	84 c0                	test   al,al
c00211b9:	74 21                	je     c00211dc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00211bb:	3c 2f                	cmp    al,0x2f
c00211bd:	75 0b                	jne    c00211ca <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00211bf:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00211c3:	bd 01 00 00 00       	mov    ebp,0x1
c00211c8:	eb 14                	jmp    c00211de <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00211ca:	8d 48 9f             	lea    ecx,[eax-0x61]
c00211cd:	80 f9 19             	cmp    cl,0x19
c00211d0:	77 03                	ja     c00211d5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00211d2:	83 e8 20             	sub    eax,0x20
c00211d5:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00211d9:	42                   	inc    edx
c00211da:	eb d8                	jmp    c00211b4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00211dc:	31 ed                	xor    ebp,ebp
c00211de:	83 ec 0c             	sub    esp,0xc
c00211e1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00211e8:	e8 6d e4 fe ff       	call   c000f65a <malloc>
c00211ed:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00211f4:	89 c6                	mov    esi,eax
c00211f6:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00211fc:	c1 ef 0b             	shr    edi,0xb
c00211ff:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021206:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c002120a:	83 c4 10             	add    esp,0x10
c002120d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021212:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021216:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c002121d:	74 28                	je     c0021247 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c002121f:	52                   	push   edx
c0021220:	57                   	push   edi
c0021221:	50                   	push   eax
c0021222:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021226:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c002122d:	e8 9d f9 ff ff       	call   c0020bcf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021232:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021236:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c002123d:	05 00 08 00 00       	add    eax,0x800
c0021242:	83 c4 10             	add    esp,0x10
c0021245:	eb cb                	jmp    c0021212 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021247:	83 ec 0c             	sub    esp,0xc
c002124a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c002124e:	57                   	push   edi
c002124f:	e8 8d f4 fd ff       	call   c00006e1 <strlen>
c0021254:	50                   	push   eax
c0021255:	57                   	push   edi
c0021256:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c002125d:	56                   	push   esi
c002125e:	e8 2a f9 ff ff       	call   c0020b8d <__memmem(unsigned char*, int, unsigned char*, int)>
c0021263:	83 c4 20             	add    esp,0x20
c0021266:	85 c0                	test   eax,eax
c0021268:	75 13                	jne    c002127d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c002126a:	83 ec 0c             	sub    esp,0xc
c002126d:	56                   	push   esi
c002126e:	e8 f7 e3 fe ff       	call   c000f66a <free>
c0021273:	83 c4 10             	add    esp,0x10
c0021276:	31 c0                	xor    eax,eax
c0021278:	e9 b3 00 00 00       	jmp    c0021330 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002127d:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021281:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021285:	c1 e7 08             	shl    edi,0x8
c0021288:	c1 e2 10             	shl    edx,0x10
c002128b:	09 d7                	or     edi,edx
c002128d:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021291:	09 d7                	or     edi,edx
c0021293:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021297:	c1 e2 18             	shl    edx,0x18
c002129a:	09 d7                	or     edi,edx
c002129c:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00212a0:	89 d1                	mov    ecx,edx
c00212a2:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00212a6:	c1 e1 08             	shl    ecx,0x8
c00212a9:	c1 e2 10             	shl    edx,0x10
c00212ac:	09 ca                	or     edx,ecx
c00212ae:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00212b2:	09 ca                	or     edx,ecx
c00212b4:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00212b8:	c1 e1 18             	shl    ecx,0x18
c00212bb:	09 ca                	or     edx,ecx
c00212bd:	89 e9                	mov    ecx,ebp
c00212bf:	84 c9                	test   cl,cl
c00212c1:	74 3c                	je     c00212ff <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c00212c3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00212c7:	83 ec 0c             	sub    esp,0xc
c00212ca:	56                   	push   esi
c00212cb:	e8 9a e3 fe ff       	call   c000f66a <free>
c00212d0:	83 c4 0c             	add    esp,0xc
c00212d3:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00212da:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00212df:	50                   	push   eax
c00212e0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00212e7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00212ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00212f2:	52                   	push   edx
c00212f3:	57                   	push   edi
c00212f4:	53                   	push   ebx
c00212f5:	e8 6e fe ff ff       	call   c0021168 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00212fa:	83 c4 20             	add    esp,0x20
c00212fd:	eb 31                	jmp    c0021330 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00212ff:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021302:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021309:	d0 e8                	shr    al,1
c002130b:	89 3b                	mov    DWORD PTR [ebx],edi
c002130d:	83 e0 01             	and    eax,0x1
c0021310:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021317:	83 ec 0c             	sub    esp,0xc
c002131a:	89 13                	mov    DWORD PTR [ebx],edx
c002131c:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021323:	89 03                	mov    DWORD PTR [ebx],eax
c0021325:	56                   	push   esi
c0021326:	e8 3f e3 fe ff       	call   c000f66a <free>
c002132b:	83 c4 10             	add    esp,0x10
c002132e:	b0 01                	mov    al,0x1
c0021330:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021336:	5b                   	pop    ebx
c0021337:	5e                   	pop    esi
c0021338:	5f                   	pop    edi
c0021339:	5d                   	pop    ebp
c002133a:	c3                   	ret    

c002133b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c002133b:	55                   	push   ebp
c002133c:	57                   	push   edi
c002133d:	56                   	push   esi
c002133e:	53                   	push   ebx
c002133f:	83 ec 20             	sub    esp,0x20
c0021342:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021346:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c002134a:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002134e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021356:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002135e:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021363:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021369:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c002136f:	57                   	push   edi
c0021370:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021374:	50                   	push   eax
c0021375:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021379:	50                   	push   eax
c002137a:	e8 94 fd ff ff       	call   c0021113 <readRoot(unsigned int*, unsigned int*, char)>
c002137f:	5a                   	pop    edx
c0021380:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021384:	e8 58 f3 fd ff       	call   c00006e1 <strlen>
c0021389:	83 c4 10             	add    esp,0x10
c002138c:	83 f8 03             	cmp    eax,0x3
c002138f:	77 17                	ja     c00213a8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021391:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021395:	89 03                	mov    DWORD PTR [ebx],eax
c0021397:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002139b:	89 06                	mov    DWORD PTR [esi],eax
c002139d:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00213a4:	b0 01                	mov    al,0x1
c00213a6:	eb 19                	jmp    c00213c1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00213a8:	50                   	push   eax
c00213a9:	55                   	push   ebp
c00213aa:	57                   	push   edi
c00213ab:	56                   	push   esi
c00213ac:	53                   	push   ebx
c00213ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00213b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00213b5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00213b9:	e8 aa fd ff ff       	call   c0021168 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00213be:	83 c4 20             	add    esp,0x20
c00213c1:	83 c4 1c             	add    esp,0x1c
c00213c4:	5b                   	pop    ebx
c00213c5:	5e                   	pop    esi
c00213c6:	5f                   	pop    edi
c00213c7:	5d                   	pop    ebp
c00213c8:	c3                   	ret    
c00213c9:	90                   	nop

c00213ca <ISO9660::open(char const*, void**, FileOpenMode)>:
c00213ca:	57                   	push   edi
c00213cb:	56                   	push   esi
c00213cc:	53                   	push   ebx
c00213cd:	83 ec 10             	sub    esp,0x10
c00213d0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00213d4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00213d8:	85 ff                	test   edi,edi
c00213da:	0f 84 9d 00 00 00    	je     c002147d <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00213e0:	85 f6                	test   esi,esi
c00213e2:	0f 84 95 00 00 00    	je     c002147d <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00213e8:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00213ed:	74 17                	je     c0021406 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00213ef:	83 ec 0c             	sub    esp,0xc
c00213f2:	68 1b b6 02 c0       	push   0xc002b61b
c00213f7:	e8 2d 15 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00213fc:	83 c4 10             	add    esp,0x10
c00213ff:	b8 03 00 00 00       	mov    eax,0x3
c0021404:	eb 7c                	jmp    c0021482 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021406:	83 ec 0c             	sub    esp,0xc
c0021409:	6a 1c                	push   0x1c
c002140b:	e8 4a e2 fe ff       	call   c000f65a <malloc>
c0021410:	89 07                	mov    DWORD PTR [edi],eax
c0021412:	89 c3                	mov    ebx,eax
c0021414:	58                   	pop    eax
c0021415:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021419:	50                   	push   eax
c002141a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002141d:	50                   	push   eax
c002141e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021422:	50                   	push   eax
c0021423:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021427:	50                   	push   eax
c0021428:	56                   	push   esi
c0021429:	e8 0d ff ff ff       	call   c002133b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002142e:	83 c4 20             	add    esp,0x20
c0021431:	84 c0                	test   al,al
c0021433:	74 07                	je     c002143c <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021435:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002143a:	74 0b                	je     c0021447 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c002143c:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021440:	b8 01 00 00 00       	mov    eax,0x1
c0021445:	eb 3b                	jmp    c0021482 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002144b:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002144f:	89 03                	mov    DWORD PTR [ebx],eax
c0021451:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021458:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002145c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021463:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002146a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002146d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021474:	8a 06                	mov    al,BYTE PTR [esi]
c0021476:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021479:	31 c0                	xor    eax,eax
c002147b:	eb 05                	jmp    c0021482 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002147d:	b8 04 00 00 00       	mov    eax,0x4
c0021482:	83 c4 10             	add    esp,0x10
c0021485:	5b                   	pop    ebx
c0021486:	5e                   	pop    esi
c0021487:	5f                   	pop    edi
c0021488:	c3                   	ret    
c0021489:	90                   	nop

c002148a <ISO9660::exists(char const*)>:
c002148a:	83 ec 28             	sub    esp,0x28
c002148d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021491:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021495:	52                   	push   edx
c0021496:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021499:	52                   	push   edx
c002149a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002149e:	52                   	push   edx
c002149f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00214a3:	52                   	push   edx
c00214a4:	50                   	push   eax
c00214a5:	e8 91 fe ff ff       	call   c002133b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00214aa:	83 c4 3c             	add    esp,0x3c
c00214ad:	c3                   	ret    

c00214ae <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00214ae:	56                   	push   esi
c00214af:	53                   	push   ebx
c00214b0:	83 ec 14             	sub    esp,0x14
c00214b3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00214b7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00214bb:	85 db                	test   ebx,ebx
c00214bd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00214c1:	0f 94 c2             	sete   dl
c00214c4:	85 f6                	test   esi,esi
c00214c6:	0f 94 c0             	sete   al
c00214c9:	08 c2                	or     dl,al
c00214cb:	75 68                	jne    c0021535 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00214cd:	85 c9                	test   ecx,ecx
c00214cf:	74 64                	je     c0021535 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00214d1:	83 ec 0c             	sub    esp,0xc
c00214d4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00214d7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214db:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00214e1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00214e8:	50                   	push   eax
c00214e9:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00214ec:	50                   	push   eax
c00214ed:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00214f1:	50                   	push   eax
c00214f2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00214f6:	50                   	push   eax
c00214f7:	51                   	push   ecx
c00214f8:	e8 3e fe ff ff       	call   c002133b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00214fd:	83 c4 20             	add    esp,0x20
c0021500:	ba 01 00 00 00       	mov    edx,0x1
c0021505:	84 c0                	test   al,al
c0021507:	74 31                	je     c002153a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002150d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021514:	89 03                	mov    DWORD PTR [ebx],eax
c0021516:	ba 00 00 00 00       	mov    edx,0x0
c002151b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002151f:	85 c0                	test   eax,eax
c0021521:	0f 95 06             	setne  BYTE PTR [esi]
c0021524:	74 14                	je     c002153a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021526:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002152c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021533:	eb 05                	jmp    c002153a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021535:	ba 04 00 00 00       	mov    edx,0x4
c002153a:	83 c4 14             	add    esp,0x14
c002153d:	89 d0                	mov    eax,edx
c002153f:	5b                   	pop    ebx
c0021540:	5e                   	pop    esi
c0021541:	c3                   	ret    

c0021542 <ISO9660::openDir(char const*, void**)>:
c0021542:	57                   	push   edi
c0021543:	56                   	push   esi
c0021544:	53                   	push   ebx
c0021545:	83 ec 10             	sub    esp,0x10
c0021548:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002154c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021550:	85 ff                	test   edi,edi
c0021552:	0f 84 95 00 00 00    	je     c00215ed <ISO9660::openDir(char const*, void**)+0xab>
c0021558:	85 f6                	test   esi,esi
c002155a:	0f 84 8d 00 00 00    	je     c00215ed <ISO9660::openDir(char const*, void**)+0xab>
c0021560:	83 ec 0c             	sub    esp,0xc
c0021563:	6a 1c                	push   0x1c
c0021565:	e8 f0 e0 fe ff       	call   c000f65a <malloc>
c002156a:	89 07                	mov    DWORD PTR [edi],eax
c002156c:	89 c3                	mov    ebx,eax
c002156e:	59                   	pop    ecx
c002156f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021573:	50                   	push   eax
c0021574:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021577:	50                   	push   eax
c0021578:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002157c:	50                   	push   eax
c002157d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021581:	50                   	push   eax
c0021582:	56                   	push   esi
c0021583:	e8 b3 fd ff ff       	call   c002133b <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021588:	83 c4 20             	add    esp,0x20
c002158b:	84 c0                	test   al,al
c002158d:	74 07                	je     c0021596 <ISO9660::openDir(char const*, void**)+0x54>
c002158f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021594:	75 21                	jne    c00215b7 <ISO9660::openDir(char const*, void**)+0x75>
c0021596:	0f b6 c0             	movzx  eax,al
c0021599:	52                   	push   edx
c002159a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002159e:	50                   	push   eax
c002159f:	68 41 b6 02 c0       	push   0xc002b641
c00215a4:	e8 80 13 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00215a9:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00215ad:	83 c4 10             	add    esp,0x10
c00215b0:	b8 01 00 00 00       	mov    eax,0x1
c00215b5:	eb 3b                	jmp    c00215f2 <ISO9660::openDir(char const*, void**)+0xb0>
c00215b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215bb:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00215bf:	89 03                	mov    DWORD PTR [ebx],eax
c00215c1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00215c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00215cc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00215d3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00215da:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00215dd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00215e4:	8a 06                	mov    al,BYTE PTR [esi]
c00215e6:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00215e9:	31 c0                	xor    eax,eax
c00215eb:	eb 05                	jmp    c00215f2 <ISO9660::openDir(char const*, void**)+0xb0>
c00215ed:	b8 04 00 00 00       	mov    eax,0x4
c00215f2:	83 c4 10             	add    esp,0x10
c00215f5:	5b                   	pop    ebx
c00215f6:	5e                   	pop    esi
c00215f7:	5f                   	pop    edi
c00215f8:	c3                   	ret    
c00215f9:	90                   	nop

c00215fa <ISO9660::ISO9660()>:
c00215fa:	83 ec 0c             	sub    esp,0xc
c00215fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021601:	83 ec 0c             	sub    esp,0xc
c0021604:	50                   	push   eax
c0021605:	e8 24 16 ff ff       	call   c0012c2e <Filesystem::Filesystem()>
c002160a:	83 c4 10             	add    esp,0x10
c002160d:	ba 64 b6 02 c0       	mov    edx,0xc002b664
c0021612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021616:	89 10                	mov    DWORD PTR [eax],edx
c0021618:	90                   	nop
c0021619:	83 c4 0c             	add    esp,0xc
c002161c:	c3                   	ret    
c002161d:	90                   	nop

c002161e <SoundChannel::~SoundChannel()>:
c002161e:	83 ec 0c             	sub    esp,0xc
c0021621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021625:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021628:	83 ec 0c             	sub    esp,0xc
c002162b:	50                   	push   eax
c002162c:	e8 39 e0 fe ff       	call   c000f66a <free>
c0021631:	83 c4 10             	add    esp,0x10
c0021634:	90                   	nop
c0021635:	83 c4 0c             	add    esp,0xc
c0021638:	c3                   	ret    
c0021639:	90                   	nop

c002163a <SoundChannel::setSpeed(float)>:
c002163a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002163e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021642:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0021645:	c3                   	ret    

c0021646 <SoundChannel::getSpeed()>:
c0021646:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002164a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c002164d:	c3                   	ret    

c002164e <SoundChannel::setVolume(int)>:
c002164e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021652:	83 f8 64             	cmp    eax,0x64
c0021655:	7e 05                	jle    c002165c <SoundChannel::setVolume(int)+0xe>
c0021657:	b8 64 00 00 00       	mov    eax,0x64
c002165c:	85 c0                	test   eax,eax
c002165e:	79 02                	jns    c0021662 <SoundChannel::setVolume(int)+0x14>
c0021660:	31 c0                	xor    eax,eax
c0021662:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021666:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0021669:	c3                   	ret    

c002166a <SoundChannel::getVolume()>:
c002166a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002166e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021671:	c3                   	ret    

c0021672 <SoundChannel::pause()>:
c0021672:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021676:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c002167a:	c3                   	ret    
c002167b:	90                   	nop

c002167c <SoundChannel::SoundChannel(int, int, int, int)>:
c002167c:	83 ec 1c             	sub    esp,0x1c
c002167f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021683:	e8 ea ff ff ff       	call   c0021672 <SoundChannel::pause()>
c0021688:	83 c4 04             	add    esp,0x4
c002168b:	6a 50                	push   0x50
c002168d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021691:	e8 b8 ff ff ff       	call   c002164e <SoundChannel::setVolume(int)>
c0021696:	83 c4 08             	add    esp,0x8
c0021699:	a1 dc b6 02 c0       	mov    eax,ds:0xc002b6dc
c002169e:	50                   	push   eax
c002169f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00216a3:	e8 92 ff ff ff       	call   c002163a <SoundChannel::setSpeed(float)>
c00216a8:	83 c4 08             	add    esp,0x8
c00216ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216af:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00216b3:	89 10                	mov    DWORD PTR [eax],edx
c00216b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00216bd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00216c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216c4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00216c8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00216cb:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00216d0:	75 23                	jne    c00216f5 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00216d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216d6:	8b 10                	mov    edx,DWORD PTR [eax]
c00216d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00216df:	0f af c2             	imul   eax,edx
c00216e2:	85 c0                	test   eax,eax
c00216e4:	79 03                	jns    c00216e9 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00216e6:	83 c0 03             	add    eax,0x3
c00216e9:	c1 f8 02             	sar    eax,0x2
c00216ec:	05 a0 0f 00 00       	add    eax,0xfa0
c00216f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00216f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216f9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00216fd:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021700:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021704:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c002170b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002170f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021716:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002171a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002171d:	c1 e0 02             	shl    eax,0x2
c0021720:	83 ec 0c             	sub    esp,0xc
c0021723:	50                   	push   eax
c0021724:	e8 31 df fe ff       	call   c000f65a <malloc>
c0021729:	83 c4 10             	add    esp,0x10
c002172c:	89 c2                	mov    edx,eax
c002172e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021732:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021735:	83 ec 04             	sub    esp,0x4
c0021738:	8d 44 24 08          	lea    eax,[esp+0x8]
c002173c:	50                   	push   eax
c002173d:	6a 01                	push   0x1
c002173f:	6a 04                	push   0x4
c0021741:	e8 42 72 fe ff       	call   c0008988 <src_new>
c0021746:	83 c4 10             	add    esp,0x10
c0021749:	89 c2                	mov    edx,eax
c002174b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002174f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021752:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021756:	85 c0                	test   eax,eax
c0021758:	74 10                	je     c002176a <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c002175a:	83 ec 0c             	sub    esp,0xc
c002175d:	68 c0 b6 02 c0       	push   0xc002b6c0
c0021762:	e8 18 85 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c0021767:	83 c4 10             	add    esp,0x10
c002176a:	a0 20 f4 02 c0       	mov    al,ds:0xc002f420
c002176f:	83 f0 01             	xor    eax,0x1
c0021772:	84 c0                	test   al,al
c0021774:	74 57                	je     c00217cd <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0021776:	a1 e0 b6 02 c0       	mov    eax,ds:0xc002b6e0
c002177b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002177f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021787:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c002178f:	7f 35                	jg     c00217c6 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0021791:	83 ec 0c             	sub    esp,0xc
c0021794:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021798:	e8 2a 4a 00 00       	call   c00261c7 <__floatsisf>
c002179d:	83 c4 10             	add    esp,0x10
c00217a0:	8b 15 e0 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b6e0
c00217a6:	83 ec 08             	sub    esp,0x8
c00217a9:	52                   	push   edx
c00217aa:	50                   	push   eax
c00217ab:	e8 29 46 00 00       	call   c0025dd9 <__mulsf3>
c00217b0:	83 c4 10             	add    esp,0x10
c00217b3:	89 c2                	mov    edx,eax
c00217b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00217b9:	89 14 85 20 f0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0fe0],edx
c00217c0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00217c4:	eb c1                	jmp    c0021787 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00217c6:	c6 05 20 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f420,0x1
c00217cd:	90                   	nop
c00217ce:	83 c4 1c             	add    esp,0x1c
c00217d1:	c3                   	ret    

c00217d2 <SoundChannel::play()>:
c00217d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217d6:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c00217da:	c3                   	ret    
c00217db:	90                   	nop

c00217dc <SoundChannel::paused()>:
c00217dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217e0:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00217e3:	c3                   	ret    

c00217e4 <SoundChannel::getSampleRate()>:
c00217e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00217ea:	c3                   	ret    
c00217eb:	90                   	nop

c00217ec <SoundChannel::getBits()>:
c00217ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00217f3:	c3                   	ret    

c00217f4 <SoundChannel::getBufferUsed()>:
c00217f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217f8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00217fb:	c3                   	ret    

c00217fc <SoundChannel::getBufferSize()>:
c00217fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021800:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021803:	c3                   	ret    

c0021804 <SoundChannel::unbuffer(float*, int, int)>:
c0021804:	56                   	push   esi
c0021805:	53                   	push   ebx
c0021806:	83 ec 40             	sub    esp,0x40
c0021809:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c002180d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021810:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021814:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021817:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002181b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002181f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021823:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021827:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002182b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002182f:	e8 93 49 00 00       	call   c00261c7 <__floatsisf>
c0021834:	5a                   	pop    edx
c0021835:	89 c6                	mov    esi,eax
c0021837:	ff 33                	push   DWORD PTR [ebx]
c0021839:	e8 89 49 00 00       	call   c00261c7 <__floatsisf>
c002183e:	59                   	pop    ecx
c002183f:	5a                   	pop    edx
c0021840:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0021843:	50                   	push   eax
c0021844:	e8 90 45 00 00       	call   c0025dd9 <__mulsf3>
c0021849:	59                   	pop    ecx
c002184a:	5a                   	pop    edx
c002184b:	50                   	push   eax
c002184c:	56                   	push   esi
c002184d:	e8 4a 47 00 00       	call   c0025f9c <__divsf3>
c0021852:	89 04 24             	mov    DWORD PTR [esp],eax
c0021855:	e8 3d 5c 00 00       	call   c0027497 <__extendsfdf2>
c002185a:	59                   	pop    ecx
c002185b:	5e                   	pop    esi
c002185c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021860:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021864:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c002186c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021870:	50                   	push   eax
c0021871:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021874:	e8 04 6d fe ff       	call   c000857d <src_process>
c0021879:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002187d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021880:	83 c4 0c             	add    esp,0xc
c0021883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021886:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021889:	29 d0                	sub    eax,edx
c002188b:	c1 e0 02             	shl    eax,0x2
c002188e:	50                   	push   eax
c002188f:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021892:	50                   	push   eax
c0021893:	51                   	push   ecx
c0021894:	e8 cf ed fd ff       	call   c0000668 <memmove>
c0021899:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002189d:	83 c4 44             	add    esp,0x44
c00218a0:	5b                   	pop    ebx
c00218a1:	5e                   	pop    esi
c00218a2:	c3                   	ret    
c00218a3:	90                   	nop

c00218a4 <SoundChannel::buffer8(unsigned char*, int)>:
c00218a4:	55                   	push   ebp
c00218a5:	57                   	push   edi
c00218a6:	56                   	push   esi
c00218a7:	53                   	push   ebx
c00218a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00218ac:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00218b0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00218b3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00218b7:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00218ba:	74 7a                	je     c0021936 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00218bc:	85 ff                	test   edi,edi
c00218be:	7e 76                	jle    c0021936 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00218c0:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00218c4:	8d 70 01             	lea    esi,[eax+0x1]
c00218c7:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00218ca:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00218cd:	8b 1c 9d 20 f0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0fe0]
c00218d4:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00218d7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00218da:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00218dd:	74 5e                	je     c002193d <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00218df:	83 ff 01             	cmp    edi,0x1
c00218e2:	74 4b                	je     c002192f <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00218e4:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00218e8:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00218eb:	8d 70 01             	lea    esi,[eax+0x1]
c00218ee:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00218f1:	8b 1c 9d 20 f0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0fe0]
c00218f8:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00218fb:	b8 02 00 00 00       	mov    eax,0x2
c0021900:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021903:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021906:	75 23                	jne    c002192b <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021908:	eb 27                	jmp    c0021931 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002190a:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c002190f:	8d 71 01             	lea    esi,[ecx+0x1]
c0021912:	40                   	inc    eax
c0021913:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021916:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021919:	8b 1c 9d 20 f0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0fe0]
c0021920:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021923:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021926:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021929:	74 06                	je     c0021931 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002192b:	39 c7                	cmp    edi,eax
c002192d:	75 db                	jne    c002190a <SoundChannel::buffer8(unsigned char*, int)+0x66>
c002192f:	89 f8                	mov    eax,edi
c0021931:	5b                   	pop    ebx
c0021932:	5e                   	pop    esi
c0021933:	5f                   	pop    edi
c0021934:	5d                   	pop    ebp
c0021935:	c3                   	ret    
c0021936:	5b                   	pop    ebx
c0021937:	31 c0                	xor    eax,eax
c0021939:	5e                   	pop    esi
c002193a:	5f                   	pop    edi
c002193b:	5d                   	pop    ebp
c002193c:	c3                   	ret    
c002193d:	b8 01 00 00 00       	mov    eax,0x1
c0021942:	eb ed                	jmp    c0021931 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021944 <SoundDevice::SoundDevice(char const*)>:
c0021944:	83 ec 1c             	sub    esp,0x1c
c0021947:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002194b:	83 ec 08             	sub    esp,0x8
c002194e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021952:	50                   	push   eax
c0021953:	e8 e8 25 ff ff       	call   c0013f40 <Device::Device(char const*)>
c0021958:	83 c4 10             	add    esp,0x10
c002195b:	ba ec b6 02 c0       	mov    edx,0xc002b6ec
c0021960:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021964:	89 10                	mov    DWORD PTR [eax],edx
c0021966:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002196a:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021974:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021978:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021982:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002198a:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002198f:	7f 19                	jg     c00219aa <SoundDevice::SoundDevice(char const*)+0x66>
c0021991:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021995:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021999:	83 c2 54             	add    edx,0x54
c002199c:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00219a4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00219a8:	eb e0                	jmp    c002198a <SoundDevice::SoundDevice(char const*)+0x46>
c00219aa:	90                   	nop
c00219ab:	83 c4 1c             	add    esp,0x1c
c00219ae:	c3                   	ret    
c00219af:	90                   	nop

c00219b0 <SoundDevice::~SoundDevice()>:
c00219b0:	53                   	push   ebx
c00219b1:	83 ec 18             	sub    esp,0x18
c00219b4:	ba ec b6 02 c0       	mov    edx,0xc002b6ec
c00219b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219bd:	89 10                	mov    DWORD PTR [eax],edx
c00219bf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00219c7:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00219cc:	7f 46                	jg     c0021a14 <SoundDevice::~SoundDevice()+0x64>
c00219ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00219d6:	83 c2 54             	add    edx,0x54
c00219d9:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00219dd:	85 c0                	test   eax,eax
c00219df:	74 2d                	je     c0021a0e <SoundDevice::~SoundDevice()+0x5e>
c00219e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00219e9:	83 c2 54             	add    edx,0x54
c00219ec:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00219f0:	85 db                	test   ebx,ebx
c00219f2:	74 1a                	je     c0021a0e <SoundDevice::~SoundDevice()+0x5e>
c00219f4:	83 ec 0c             	sub    esp,0xc
c00219f7:	53                   	push   ebx
c00219f8:	e8 21 fc ff ff       	call   c002161e <SoundChannel::~SoundChannel()>
c00219fd:	83 c4 10             	add    esp,0x10
c0021a00:	83 ec 08             	sub    esp,0x8
c0021a03:	6a 2c                	push   0x2c
c0021a05:	53                   	push   ebx
c0021a06:	e8 3e 0e ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0021a0b:	83 c4 10             	add    esp,0x10
c0021a0e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021a12:	eb b3                	jmp    c00219c7 <SoundDevice::~SoundDevice()+0x17>
c0021a14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a18:	83 ec 0c             	sub    esp,0xc
c0021a1b:	50                   	push   eax
c0021a1c:	e8 01 22 ff ff       	call   c0013c22 <Device::~Device()>
c0021a21:	83 c4 10             	add    esp,0x10
c0021a24:	90                   	nop
c0021a25:	83 c4 18             	add    esp,0x18
c0021a28:	5b                   	pop    ebx
c0021a29:	c3                   	ret    

c0021a2a <SoundDevice::~SoundDevice()>:
c0021a2a:	83 ec 0c             	sub    esp,0xc
c0021a2d:	83 ec 0c             	sub    esp,0xc
c0021a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a34:	e8 77 ff ff ff       	call   c00219b0 <SoundDevice::~SoundDevice()>
c0021a39:	83 c4 10             	add    esp,0x10
c0021a3c:	83 ec 08             	sub    esp,0x8
c0021a3f:	68 e4 01 00 00       	push   0x1e4
c0021a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a48:	e8 fc 0d ff ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0021a4d:	83 c4 10             	add    esp,0x10
c0021a50:	83 c4 0c             	add    esp,0xc
c0021a53:	c3                   	ret    

c0021a54 <SoundDevice::getFreeChannelNum()>:
c0021a54:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021a58:	31 c0                	xor    eax,eax
c0021a5a:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021a62:	74 09                	je     c0021a6d <SoundDevice::getFreeChannelNum()+0x19>
c0021a64:	40                   	inc    eax
c0021a65:	83 f8 20             	cmp    eax,0x20
c0021a68:	75 f0                	jne    c0021a5a <SoundDevice::getFreeChannelNum()+0x6>
c0021a6a:	83 c8 ff             	or     eax,0xffffffff
c0021a6d:	c3                   	ret    

c0021a6e <SoundDevice::addChannel(SoundChannel*)>:
c0021a6e:	56                   	push   esi
c0021a6f:	53                   	push   ebx
c0021a70:	51                   	push   ecx
c0021a71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021a75:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021a79:	53                   	push   ebx
c0021a7a:	e8 d5 ff ff ff       	call   c0021a54 <SoundDevice::getFreeChannelNum()>
c0021a7f:	5a                   	pop    edx
c0021a80:	83 f8 ff             	cmp    eax,0xffffffff
c0021a83:	74 51                	je     c0021ad6 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021a85:	85 f6                	test   esi,esi
c0021a87:	74 4d                	je     c0021ad6 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021a89:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0021a90:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0021a97:	75 30                	jne    c0021ac9 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021a99:	83 ec 0c             	sub    esp,0xc
c0021a9c:	56                   	push   esi
c0021a9d:	e8 42 fd ff ff       	call   c00217e4 <SoundChannel::getSampleRate()>
c0021aa2:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021aa8:	89 34 24             	mov    DWORD PTR [esp],esi
c0021aab:	e8 3c fd ff ff       	call   c00217ec <SoundChannel::getBits()>
c0021ab0:	83 c4 0c             	add    esp,0xc
c0021ab3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0021ab9:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021abb:	50                   	push   eax
c0021abc:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0021ac2:	53                   	push   ebx
c0021ac3:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0021ac6:	83 c4 10             	add    esp,0x10
c0021ac9:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021acf:	b8 01 00 00 00       	mov    eax,0x1
c0021ad4:	eb 03                	jmp    c0021ad9 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021ad6:	83 c8 ff             	or     eax,0xffffffff
c0021ad9:	5a                   	pop    edx
c0021ada:	5b                   	pop    ebx
c0021adb:	5e                   	pop    esi
c0021adc:	c3                   	ret    
c0021add:	90                   	nop

c0021ade <SoundDevice::removeChannel(int)>:
c0021ade:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021ae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ae6:	83 fa 1f             	cmp    edx,0x1f
c0021ae9:	77 23                	ja     c0021b0e <SoundDevice::removeChannel(int)+0x30>
c0021aeb:	8d 14 90             	lea    edx,[eax+edx*4]
c0021aee:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021af5:	74 17                	je     c0021b0e <SoundDevice::removeChannel(int)+0x30>
c0021af7:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021b01:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021b07:	75 05                	jne    c0021b0e <SoundDevice::removeChannel(int)+0x30>
c0021b09:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b0b:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0021b0e:	c3                   	ret    
c0021b0f:	90                   	nop

c0021b10 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0021b10:	57                   	push   edi
c0021b11:	56                   	push   esi
c0021b12:	53                   	push   ebx
c0021b13:	31 db                	xor    ebx,ebx
c0021b15:	83 ec 10             	sub    esp,0x10
c0021b18:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021b1c:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021b20:	0f 8d cb 00 00 00    	jge    c0021bf1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0021b26:	83 ec 0c             	sub    esp,0xc
c0021b29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021b2d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021b30:	e8 62 59 00 00       	call   c0027497 <__extendsfdf2>
c0021b35:	83 c4 10             	add    esp,0x10
c0021b38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b40:	68 00 00 f0 3f       	push   0x3ff00000
c0021b45:	6a 00                	push   0x0
c0021b47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021b4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021b4f:	e8 cf 48 00 00       	call   c0026423 <__adddf3>
c0021b54:	83 c4 10             	add    esp,0x10
c0021b57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b5b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b5f:	68 00 00 e0 3f       	push   0x3fe00000
c0021b64:	6a 00                	push   0x0
c0021b66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021b6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021b6e:	e8 2d 4f 00 00       	call   c0026aa0 <__muldf3>
c0021b73:	83 c4 10             	add    esp,0x10
c0021b76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b7e:	68 00 00 60 40       	push   0x40600000
c0021b83:	6a 00                	push   0x0
c0021b85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021b89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021b8d:	e8 0e 4f 00 00       	call   c0026aa0 <__muldf3>
c0021b92:	59                   	pop    ecx
c0021b93:	5f                   	pop    edi
c0021b94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021b98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0021b9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ba0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ba4:	e8 ca 57 00 00       	call   c0027373 <__truncdfsf2>
c0021ba9:	5a                   	pop    edx
c0021baa:	89 c7                	mov    edi,eax
c0021bac:	59                   	pop    ecx
c0021bad:	68 00 00 fe 42       	push   0x42fe0000
c0021bb2:	50                   	push   eax
c0021bb3:	e8 65 48 00 00       	call   c002641d <__gesf2>
c0021bb8:	83 c4 10             	add    esp,0x10
c0021bbb:	85 c0                	test   eax,eax
c0021bbd:	78 06                	js     c0021bc5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0021bbf:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0021bc3:	eb 26                	jmp    c0021beb <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021bc5:	50                   	push   eax
c0021bc6:	50                   	push   eax
c0021bc7:	6a 00                	push   0x0
c0021bc9:	57                   	push   edi
c0021bca:	e8 52 48 00 00       	call   c0026421 <__lesf2>
c0021bcf:	83 c4 10             	add    esp,0x10
c0021bd2:	85 c0                	test   eax,eax
c0021bd4:	7f 06                	jg     c0021bdc <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0021bd6:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0021bda:	eb 0f                	jmp    c0021beb <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021bdc:	83 ec 0c             	sub    esp,0xc
c0021bdf:	57                   	push   edi
c0021be0:	e8 47 59 00 00       	call   c002752c <lrintf>
c0021be5:	83 c4 10             	add    esp,0x10
c0021be8:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0021beb:	43                   	inc    ebx
c0021bec:	e9 2b ff ff ff       	jmp    c0021b1c <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0021bf1:	83 c4 10             	add    esp,0x10
c0021bf4:	5b                   	pop    ebx
c0021bf5:	5e                   	pop    esi
c0021bf6:	5f                   	pop    edi
c0021bf7:	c3                   	ret    

c0021bf8 <SoundDevice::getAudio(int, float*, float*)>:
c0021bf8:	55                   	push   ebp
c0021bf9:	57                   	push   edi
c0021bfa:	56                   	push   esi
c0021bfb:	53                   	push   ebx
c0021bfc:	31 db                	xor    ebx,ebx
c0021bfe:	83 ec 20             	sub    esp,0x20
c0021c01:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021c05:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021c09:	c1 e0 02             	shl    eax,0x2
c0021c0c:	50                   	push   eax
c0021c0d:	6a 00                	push   0x0
c0021c0f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021c13:	e8 ac ea fd ff       	call   c00006c4 <memset>
c0021c18:	83 c4 10             	add    esp,0x10
c0021c1b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021c1f:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0021c26:	85 c0                	test   eax,eax
c0021c28:	0f 84 d7 00 00 00    	je     c0021d05 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021c2e:	83 ec 0c             	sub    esp,0xc
c0021c31:	50                   	push   eax
c0021c32:	e8 a5 fb ff ff       	call   c00217dc <SoundChannel::paused()>
c0021c37:	83 c4 10             	add    esp,0x10
c0021c3a:	84 c0                	test   al,al
c0021c3c:	0f 85 c3 00 00 00    	jne    c0021d05 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021c42:	83 ec 0c             	sub    esp,0xc
c0021c45:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021c4c:	e8 19 fa ff ff       	call   c002166a <SoundChannel::getVolume()>
c0021c51:	83 c4 10             	add    esp,0x10
c0021c54:	85 c0                	test   eax,eax
c0021c56:	0f 84 a9 00 00 00    	je     c0021d05 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021c5c:	83 ec 0c             	sub    esp,0xc
c0021c5f:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021c66:	e8 ff f9 ff ff       	call   c002166a <SoundChannel::getVolume()>
c0021c6b:	83 ec 0c             	sub    esp,0xc
c0021c6e:	50                   	push   eax
c0021c6f:	e8 53 45 00 00       	call   c00261c7 <__floatsisf>
c0021c74:	59                   	pop    ecx
c0021c75:	5d                   	pop    ebp
c0021c76:	31 ed                	xor    ebp,ebp
c0021c78:	68 00 00 c8 42       	push   0x42c80000
c0021c7d:	50                   	push   eax
c0021c7e:	e8 19 43 00 00       	call   c0025f9c <__divsf3>
c0021c83:	83 c4 10             	add    esp,0x10
c0021c86:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021c8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0021c8e:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0021c94:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0021c98:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021c9f:	e8 60 fb ff ff       	call   c0021804 <SoundChannel::unbuffer(float*, int, int)>
c0021ca4:	83 c4 20             	add    esp,0x20
c0021ca7:	89 c1                	mov    ecx,eax
c0021ca9:	39 cd                	cmp    ebp,ecx
c0021cab:	7d 52                	jge    c0021cff <SoundDevice::getAudio(int, float*, float*)+0x107>
c0021cad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021cb1:	50                   	push   eax
c0021cb2:	50                   	push   eax
c0021cb3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0021cb7:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021cba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021cbe:	e8 16 41 00 00       	call   c0025dd9 <__mulsf3>
c0021cc3:	5a                   	pop    edx
c0021cc4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021cc8:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0021cce:	e8 f4 44 00 00       	call   c00261c7 <__floatsisf>
c0021cd3:	59                   	pop    ecx
c0021cd4:	5a                   	pop    edx
c0021cd5:	50                   	push   eax
c0021cd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021cda:	e8 bd 42 00 00       	call   c0025f9c <__divsf3>
c0021cdf:	59                   	pop    ecx
c0021ce0:	5a                   	pop    edx
c0021ce1:	50                   	push   eax
c0021ce2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021ce6:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021ce9:	e8 c8 3d 00 00       	call   c0025ab6 <__addsf3>
c0021cee:	83 c4 10             	add    esp,0x10
c0021cf1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021cf5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021cf9:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0021cfc:	45                   	inc    ebp
c0021cfd:	eb aa                	jmp    c0021ca9 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0021cff:	39 cf                	cmp    edi,ecx
c0021d01:	7e 02                	jle    c0021d05 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021d03:	89 cf                	mov    edi,ecx
c0021d05:	43                   	inc    ebx
c0021d06:	83 fb 20             	cmp    ebx,0x20
c0021d09:	0f 85 10 ff ff ff    	jne    c0021c1f <SoundDevice::getAudio(int, float*, float*)+0x27>
c0021d0f:	83 c4 1c             	add    esp,0x1c
c0021d12:	89 f8                	mov    eax,edi
c0021d14:	5b                   	pop    ebx
c0021d15:	5e                   	pop    esi
c0021d16:	5f                   	pop    edi
c0021d17:	5d                   	pop    ebp
c0021d18:	c3                   	ret    
c0021d19:	90                   	nop

c0021d1a <PCI::open(int, int, void*)>:
c0021d1a:	83 ec 18             	sub    esp,0x18
c0021d1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021d21:	8b 10                	mov    edx,DWORD PTR [eax]
c0021d23:	50                   	push   eax
c0021d24:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0021d27:	31 c0                	xor    eax,eax
c0021d29:	83 c4 1c             	add    esp,0x1c
c0021d2c:	c3                   	ret    
c0021d2d:	90                   	nop

c0021d2e <PCI::close(int, int, void*)>:
c0021d2e:	31 c0                	xor    eax,eax
c0021d30:	c3                   	ret    
c0021d31:	90                   	nop

c0021d32 <PCI::PCI()>:
c0021d32:	83 ec 0c             	sub    esp,0xc
c0021d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d39:	83 ec 08             	sub    esp,0x8
c0021d3c:	68 1c b7 02 c0       	push   0xc002b71c
c0021d41:	50                   	push   eax
c0021d42:	e8 7d 18 ff ff       	call   c00135c4 <Bus::Bus(char const*)>
c0021d47:	83 c4 10             	add    esp,0x10
c0021d4a:	ba 88 b7 02 c0       	mov    edx,0xc002b788
c0021d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d53:	89 10                	mov    DWORD PTR [eax],edx
c0021d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d59:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021d5f:	0f b6 d0             	movzx  edx,al
c0021d62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d66:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0021d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d71:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021d77:	0f b6 d0             	movzx  edx,al
c0021d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d7e:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0021d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d87:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021d8d:	8d 50 01             	lea    edx,[eax+0x1]
c0021d90:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021d94:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021d9a:	0f b6 d0             	movzx  edx,al
c0021d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021da1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021da5:	83 c9 c0             	or     ecx,0xffffffc0
c0021da8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021dac:	90                   	nop
c0021dad:	83 c4 0c             	add    esp,0xc
c0021db0:	c3                   	ret    
c0021db1:	90                   	nop

c0021db2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021db2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021db6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021dbb:	89 ca                	mov    edx,ecx
c0021dbd:	c1 e0 10             	shl    eax,0x10
c0021dc0:	81 e2 fc 00 00 00    	and    edx,0xfc
c0021dc6:	09 d0                	or     eax,edx
c0021dc8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0021dcd:	c1 e2 08             	shl    edx,0x8
c0021dd0:	09 d0                	or     eax,edx
c0021dd2:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0021dd7:	c1 e2 0b             	shl    edx,0xb
c0021dda:	09 d0                	or     eax,edx
c0021ddc:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021de1:	0d 00 00 00 80       	or     eax,0x80000000
c0021de6:	ef                   	out    dx,eax
c0021de7:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021dec:	ed                   	in     eax,dx
c0021ded:	83 e1 02             	and    ecx,0x2
c0021df0:	0f b6 c9             	movzx  ecx,cl
c0021df3:	c1 e1 03             	shl    ecx,0x3
c0021df6:	d3 e8                	shr    eax,cl
c0021df8:	c3                   	ret    
c0021df9:	90                   	nop

c0021dfa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0021dfa:	6a 00                	push   0x0
c0021dfc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e01:	50                   	push   eax
c0021e02:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e07:	50                   	push   eax
c0021e08:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e0d:	50                   	push   eax
c0021e0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e12:	e8 9b ff ff ff       	call   c0021db2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021e17:	83 c4 14             	add    esp,0x14
c0021e1a:	c3                   	ret    
c0021e1b:	90                   	nop

c0021e1c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0021e1c:	6a 0e                	push   0xe
c0021e1e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e23:	50                   	push   eax
c0021e24:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e29:	50                   	push   eax
c0021e2a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e2f:	50                   	push   eax
c0021e30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e34:	e8 79 ff ff ff       	call   c0021db2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021e39:	83 c4 14             	add    esp,0x14
c0021e3c:	0f b6 c0             	movzx  eax,al
c0021e3f:	c3                   	ret    

c0021e40 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0021e40:	55                   	push   ebp
c0021e41:	57                   	push   edi
c0021e42:	56                   	push   esi
c0021e43:	53                   	push   ebx
c0021e44:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0021e49:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0021e4e:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0021e53:	6a 0a                	push   0xa
c0021e55:	56                   	push   esi
c0021e56:	55                   	push   ebp
c0021e57:	57                   	push   edi
c0021e58:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021e5c:	e8 51 ff ff ff       	call   c0021db2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021e61:	6a 0a                	push   0xa
c0021e63:	89 c3                	mov    ebx,eax
c0021e65:	56                   	push   esi
c0021e66:	0f b6 db             	movzx  ebx,bl
c0021e69:	55                   	push   ebp
c0021e6a:	57                   	push   edi
c0021e6b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021e6f:	e8 3e ff ff ff       	call   c0021db2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021e74:	83 c4 28             	add    esp,0x28
c0021e77:	25 00 ff 00 00       	and    eax,0xff00
c0021e7c:	09 d8                	or     eax,ebx
c0021e7e:	5b                   	pop    ebx
c0021e7f:	5e                   	pop    esi
c0021e80:	5f                   	pop    edi
c0021e81:	5d                   	pop    ebp
c0021e82:	c3                   	ret    
c0021e83:	90                   	nop

c0021e84 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0021e84:	6a 08                	push   0x8
c0021e86:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e8b:	50                   	push   eax
c0021e8c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e91:	50                   	push   eax
c0021e92:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e97:	50                   	push   eax
c0021e98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e9c:	e8 11 ff ff ff       	call   c0021db2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021ea1:	83 c4 14             	add    esp,0x14
c0021ea4:	0f b6 c4             	movzx  eax,ah
c0021ea7:	c3                   	ret    

c0021ea8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0021ea8:	6a 08                	push   0x8
c0021eaa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021eaf:	50                   	push   eax
c0021eb0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021eb5:	50                   	push   eax
c0021eb6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021ebb:	50                   	push   eax
c0021ebc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ec0:	e8 ed fe ff ff       	call   c0021db2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021ec5:	83 c4 14             	add    esp,0x14
c0021ec8:	c3                   	ret    
c0021ec9:	90                   	nop

c0021eca <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0021eca:	6a 3c                	push   0x3c
c0021ecc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021ed1:	50                   	push   eax
c0021ed2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021ed7:	50                   	push   eax
c0021ed8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021edd:	50                   	push   eax
c0021ede:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ee2:	e8 cb fe ff ff       	call   c0021db2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021ee7:	83 c4 14             	add    esp,0x14
c0021eea:	c3                   	ret    
c0021eeb:	90                   	nop

c0021eec <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0021eec:	6a 18                	push   0x18
c0021eee:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021ef3:	50                   	push   eax
c0021ef4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021ef9:	50                   	push   eax
c0021efa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021eff:	50                   	push   eax
c0021f00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f04:	e8 a9 fe ff ff       	call   c0021db2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021f09:	83 c4 14             	add    esp,0x14
c0021f0c:	0f b6 c4             	movzx  eax,ah
c0021f0f:	c3                   	ret    

c0021f10 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021f10:	55                   	push   ebp
c0021f11:	57                   	push   edi
c0021f12:	56                   	push   esi
c0021f13:	53                   	push   ebx
c0021f14:	50                   	push   eax
c0021f15:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0021f19:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0021f1e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021f23:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0021f28:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0021f2f:	8d 43 12             	lea    eax,[ebx+0x12]
c0021f32:	83 c3 10             	add    ebx,0x10
c0021f35:	0f b6 c0             	movzx  eax,al
c0021f38:	0f b6 db             	movzx  ebx,bl
c0021f3b:	50                   	push   eax
c0021f3c:	51                   	push   ecx
c0021f3d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021f41:	57                   	push   edi
c0021f42:	55                   	push   ebp
c0021f43:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021f47:	e8 66 fe ff ff       	call   c0021db2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021f4c:	53                   	push   ebx
c0021f4d:	89 c6                	mov    esi,eax
c0021f4f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021f53:	c1 e6 10             	shl    esi,0x10
c0021f56:	51                   	push   ecx
c0021f57:	57                   	push   edi
c0021f58:	55                   	push   ebp
c0021f59:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021f5d:	e8 50 fe ff ff       	call   c0021db2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021f62:	83 c4 2c             	add    esp,0x2c
c0021f65:	0f b7 c0             	movzx  eax,ax
c0021f68:	5b                   	pop    ebx
c0021f69:	09 f0                	or     eax,esi
c0021f6b:	5e                   	pop    esi
c0021f6c:	5f                   	pop    edi
c0021f6d:	5d                   	pop    ebp
c0021f6e:	c3                   	ret    
c0021f6f:	90                   	nop

c0021f70 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0021f70:	53                   	push   ebx
c0021f71:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021f76:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021f7b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021f7f:	c1 e1 10             	shl    ecx,0x10
c0021f82:	25 fc 00 00 00       	and    eax,0xfc
c0021f87:	09 c1                	or     ecx,eax
c0021f89:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021f8e:	c1 e0 08             	shl    eax,0x8
c0021f91:	09 c1                	or     ecx,eax
c0021f93:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0021f98:	c1 e0 0b             	shl    eax,0xb
c0021f9b:	09 c1                	or     ecx,eax
c0021f9d:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0021fa3:	89 c8                	mov    eax,ecx
c0021fa5:	ef                   	out    dx,eax
c0021fa6:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021fab:	ed                   	in     eax,dx
c0021fac:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0021fb1:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0021fb6:	74 0a                	je     c0021fc2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0021fb8:	0f b7 d8             	movzx  ebx,ax
c0021fbb:	89 d0                	mov    eax,edx
c0021fbd:	c1 e0 10             	shl    eax,0x10
c0021fc0:	eb 05                	jmp    c0021fc7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0021fc2:	66 31 c0             	xor    ax,ax
c0021fc5:	89 d3                	mov    ebx,edx
c0021fc7:	09 c3                	or     ebx,eax
c0021fc9:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021fce:	89 c8                	mov    eax,ecx
c0021fd0:	ef                   	out    dx,eax
c0021fd1:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021fd6:	89 d8                	mov    eax,ebx
c0021fd8:	ef                   	out    dx,eax
c0021fd9:	5b                   	pop    ebx
c0021fda:	c3                   	ret    
c0021fdb:	90                   	nop

c0021fdc <PCI::checkBus(unsigned char)>:
c0021fdc:	56                   	push   esi
c0021fdd:	53                   	push   ebx
c0021fde:	31 db                	xor    ebx,ebx
c0021fe0:	51                   	push   ecx
c0021fe1:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021fe6:	52                   	push   edx
c0021fe7:	53                   	push   ebx
c0021fe8:	43                   	inc    ebx
c0021fe9:	56                   	push   esi
c0021fea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fee:	e8 2b 03 00 00       	call   c002231e <PCI::checkDevice(unsigned char, unsigned char)>
c0021ff3:	83 c4 10             	add    esp,0x10
c0021ff6:	83 fb 20             	cmp    ebx,0x20
c0021ff9:	75 eb                	jne    c0021fe6 <PCI::checkBus(unsigned char)+0xa>
c0021ffb:	58                   	pop    eax
c0021ffc:	5b                   	pop    ebx
c0021ffd:	5e                   	pop    esi
c0021ffe:	c3                   	ret    
c0021fff:	90                   	nop

c0022000 <PCI::foundDevice(PCIDeviceInfo)>:
c0022000:	55                   	push   ebp
c0022001:	57                   	push   edi
c0022002:	56                   	push   esi
c0022003:	53                   	push   ebx
c0022004:	83 ec 1c             	sub    esp,0x1c
c0022007:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002200b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022011:	0f 84 52 01 00 00    	je     c0022169 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022017:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002201b:	66 81 f9 06 04       	cmp    cx,0x406
c0022020:	75 2c                	jne    c002204e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022022:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022027:	50                   	push   eax
c0022028:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002202d:	50                   	push   eax
c002202e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022033:	50                   	push   eax
c0022034:	56                   	push   esi
c0022035:	e8 b2 fe ff ff       	call   c0021eec <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002203a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002203e:	0f b6 c0             	movzx  eax,al
c0022041:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022045:	83 c4 2c             	add    esp,0x2c
c0022048:	5b                   	pop    ebx
c0022049:	5e                   	pop    esi
c002204a:	5f                   	pop    edi
c002204b:	5d                   	pop    ebp
c002204c:	eb 8e                	jmp    c0021fdc <PCI::checkBus(unsigned char)>
c002204e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022052:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022058:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002205c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022060:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022064:	88 d3                	mov    bl,dl
c0022066:	85 c0                	test   eax,eax
c0022068:	74 33                	je     c002209d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002206a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002206d:	85 d2                	test   edx,edx
c002206f:	74 28                	je     c0022099 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022071:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022077:	31 ef                	xor    edi,ebp
c0022079:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002207f:	75 18                	jne    c0022099 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022081:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022085:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c002208b:	75 0c                	jne    c0022099 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002208d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022093:	0f 84 d0 00 00 00    	je     c0022169 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022099:	8b 00                	mov    eax,DWORD PTR [eax]
c002209b:	eb c9                	jmp    c0022066 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c002209d:	66 81 f9 01 06       	cmp    cx,0x601
c00220a2:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00220a6:	75 19                	jne    c00220c1 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00220a8:	83 ec 0c             	sub    esp,0xc
c00220ab:	68 64 01 00 00       	push   0x164
c00220b0:	e8 a5 d5 fe ff       	call   c000f65a <malloc>
c00220b5:	89 c5                	mov    ebp,eax
c00220b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00220ba:	e8 95 0f 00 00       	call   c0023054 <SATABus::SATABus()>
c00220bf:	eb 1e                	jmp    c00220df <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00220c1:	66 81 f9 01 01       	cmp    cx,0x101
c00220c6:	75 60                	jne    c0022128 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00220c8:	83 ec 0c             	sub    esp,0xc
c00220cb:	68 70 02 00 00       	push   0x270
c00220d0:	e8 85 d5 fe ff       	call   c000f65a <malloc>
c00220d5:	89 c5                	mov    ebp,eax
c00220d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00220da:	e8 03 03 00 00       	call   c00223e2 <IDE::IDE()>
c00220df:	58                   	pop    eax
c00220e0:	5a                   	pop    edx
c00220e1:	55                   	push   ebp
c00220e2:	56                   	push   esi
c00220e3:	e8 68 1c ff ff       	call   c0013d50 <Device::addChild(Device*)>
c00220e8:	83 ec 1c             	sub    esp,0x1c
c00220eb:	b9 09 00 00 00       	mov    ecx,0x9
c00220f0:	fc                   	cld    
c00220f1:	89 e7                	mov    edi,esp
c00220f3:	89 de                	mov    esi,ebx
c00220f5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00220f7:	55                   	push   ebp
c00220f8:	e8 5d 1b ff ff       	call   c0013c5a <Device::preOpenPCI(PCIDeviceInfo)>
c00220fd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022100:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022104:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002210c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022114:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002211c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002211f:	83 c4 4c             	add    esp,0x4c
c0022122:	5b                   	pop    ebx
c0022123:	5e                   	pop    esi
c0022124:	5f                   	pop    edi
c0022125:	5d                   	pop    ebp
c0022126:	ff e0                	jmp    eax
c0022128:	83 ec 0c             	sub    esp,0xc
c002212b:	68 58 01 00 00       	push   0x158
c0022130:	e8 25 d5 fe ff       	call   c000f65a <malloc>
c0022135:	89 c5                	mov    ebp,eax
c0022137:	58                   	pop    eax
c0022138:	5a                   	pop    edx
c0022139:	68 24 b7 02 c0       	push   0xc002b724
c002213e:	55                   	push   ebp
c002213f:	e8 02 1f ff ff       	call   c0014046 <DriverlessDevice::DriverlessDevice(char const*)>
c0022144:	59                   	pop    ecx
c0022145:	5f                   	pop    edi
c0022146:	55                   	push   ebp
c0022147:	56                   	push   esi
c0022148:	e8 03 1c ff ff       	call   c0013d50 <Device::addChild(Device*)>
c002214d:	b9 09 00 00 00       	mov    ecx,0x9
c0022152:	fc                   	cld    
c0022153:	89 df                	mov    edi,ebx
c0022155:	89 de                	mov    esi,ebx
c0022157:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022159:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c002215d:	83 c4 2c             	add    esp,0x2c
c0022160:	5b                   	pop    ebx
c0022161:	5e                   	pop    esi
c0022162:	5f                   	pop    edi
c0022163:	5d                   	pop    ebp
c0022164:	e9 f1 1a ff ff       	jmp    c0013c5a <Device::preOpenPCI(PCIDeviceInfo)>
c0022169:	83 c4 1c             	add    esp,0x1c
c002216c:	5b                   	pop    ebx
c002216d:	5e                   	pop    esi
c002216e:	5f                   	pop    edi
c002216f:	5d                   	pop    ebp
c0022170:	c3                   	ret    
c0022171:	90                   	nop

c0022172 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022172:	55                   	push   ebp
c0022173:	57                   	push   edi
c0022174:	56                   	push   esi
c0022175:	53                   	push   ebx
c0022176:	83 ec 5c             	sub    esp,0x5c
c0022179:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c002217d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022181:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022185:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c002218a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002218e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022192:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022197:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002219b:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00221a0:	6a 0c                	push   0xc
c00221a2:	55                   	push   ebp
c00221a3:	53                   	push   ebx
c00221a4:	57                   	push   edi
c00221a5:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c00221ac:	e8 01 fc ff ff       	call   c0021db2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00221b1:	55                   	push   ebp
c00221b2:	53                   	push   ebx
c00221b3:	57                   	push   edi
c00221b4:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00221bb:	e8 80 fc ff ff       	call   c0021e40 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00221c0:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c00221c5:	83 c4 24             	add    esp,0x24
c00221c8:	55                   	push   ebp
c00221c9:	53                   	push   ebx
c00221ca:	57                   	push   edi
c00221cb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00221cf:	e8 f6 fc ff ff       	call   c0021eca <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00221d4:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00221d8:	6a 3c                	push   0x3c
c00221da:	55                   	push   ebp
c00221db:	53                   	push   ebx
c00221dc:	57                   	push   edi
c00221dd:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00221e4:	e8 c9 fb ff ff       	call   c0021db2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00221e9:	0f b6 c4             	movzx  eax,ah
c00221ec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00221f0:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00221f4:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c00221f8:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c00221fd:	83 c4 24             	add    esp,0x24
c0022200:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022206:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c002220d:	74 6c                	je     c002227b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c002220f:	31 f6                	xor    esi,esi
c0022211:	8b 15 e8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0e8
c0022217:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002221d:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022223:	7e 56                	jle    c002227b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022225:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022228:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c002222f:	39 cb                	cmp    ebx,ecx
c0022231:	75 45                	jne    c0022278 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022233:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c002223a:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c002223e:	75 38                	jne    c0022278 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022240:	83 ec 0c             	sub    esp,0xc
c0022243:	68 3e b7 02 c0       	push   0xc002b73e
c0022248:	e8 dc 06 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c002224d:	8b 15 e8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0e8
c0022253:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022259:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022261:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022265:	52                   	push   edx
c0022266:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002226a:	53                   	push   ebx
c002226b:	68 63 b7 02 c0       	push   0xc002b763
c0022270:	e8 b4 06 ff ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0022275:	83 c4 20             	add    esp,0x20
c0022278:	46                   	inc    esi
c0022279:	eb 96                	jmp    c0022211 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c002227b:	31 d2                	xor    edx,edx
c002227d:	83 ec 0c             	sub    esp,0xc
c0022280:	55                   	push   ebp
c0022281:	53                   	push   ebx
c0022282:	57                   	push   edi
c0022283:	52                   	push   edx
c0022284:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022288:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002228f:	e8 7c fc ff ff       	call   c0021f10 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022294:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022298:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002229c:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00222a0:	42                   	inc    edx
c00222a1:	83 c4 20             	add    esp,0x20
c00222a4:	83 fa 06             	cmp    edx,0x6
c00222a7:	75 d4                	jne    c002227d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c00222a9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00222ad:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c00222b1:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c00222b5:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c00222b9:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00222bd:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00222c1:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00222c6:	86 e0                	xchg   al,ah
c00222c8:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00222cd:	55                   	push   ebp
c00222ce:	53                   	push   ebx
c00222cf:	57                   	push   edi
c00222d0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00222d4:	e8 ab fb ff ff       	call   c0021e84 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00222d9:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00222dd:	55                   	push   ebp
c00222de:	53                   	push   ebx
c00222df:	57                   	push   edi
c00222e0:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00222e7:	e8 0e fb ff ff       	call   c0021dfa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00222ec:	83 ec 0c             	sub    esp,0xc
c00222ef:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c00222f4:	b9 09 00 00 00       	mov    ecx,0x9
c00222f9:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c00222fd:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022301:	fc                   	cld    
c0022302:	89 e7                	mov    edi,esp
c0022304:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022306:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002230d:	e8 ee fc ff ff       	call   c0022000 <PCI::foundDevice(PCIDeviceInfo)>
c0022312:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022318:	5b                   	pop    ebx
c0022319:	5e                   	pop    esi
c002231a:	5f                   	pop    edi
c002231b:	5d                   	pop    ebp
c002231c:	c3                   	ret    
c002231d:	90                   	nop

c002231e <PCI::checkDevice(unsigned char, unsigned char)>:
c002231e:	55                   	push   ebp
c002231f:	57                   	push   edi
c0022320:	56                   	push   esi
c0022321:	53                   	push   ebx
c0022322:	83 ec 0c             	sub    esp,0xc
c0022325:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022329:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002232e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022333:	6a 00                	push   0x0
c0022335:	56                   	push   esi
c0022336:	57                   	push   edi
c0022337:	55                   	push   ebp
c0022338:	e8 bd fa ff ff       	call   c0021dfa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002233d:	6a 00                	push   0x0
c002233f:	56                   	push   esi
c0022340:	57                   	push   edi
c0022341:	55                   	push   ebp
c0022342:	e8 2b fe ff ff       	call   c0022172 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022347:	83 c4 20             	add    esp,0x20
c002234a:	6a 00                	push   0x0
c002234c:	56                   	push   esi
c002234d:	57                   	push   edi
c002234e:	55                   	push   ebp
c002234f:	e8 c8 fa ff ff       	call   c0021e1c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022354:	83 c4 10             	add    esp,0x10
c0022357:	84 c0                	test   al,al
c0022359:	79 27                	jns    c0022382 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002235b:	bb 01 00 00 00       	mov    ebx,0x1
c0022360:	53                   	push   ebx
c0022361:	56                   	push   esi
c0022362:	57                   	push   edi
c0022363:	55                   	push   ebp
c0022364:	e8 91 fa ff ff       	call   c0021dfa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022369:	83 c4 10             	add    esp,0x10
c002236c:	66 40                	inc    ax
c002236e:	74 0c                	je     c002237c <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022370:	53                   	push   ebx
c0022371:	56                   	push   esi
c0022372:	57                   	push   edi
c0022373:	55                   	push   ebp
c0022374:	e8 f9 fd ff ff       	call   c0022172 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022379:	83 c4 10             	add    esp,0x10
c002237c:	43                   	inc    ebx
c002237d:	83 fb 08             	cmp    ebx,0x8
c0022380:	75 de                	jne    c0022360 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022382:	83 c4 0c             	add    esp,0xc
c0022385:	5b                   	pop    ebx
c0022386:	5e                   	pop    esi
c0022387:	5f                   	pop    edi
c0022388:	5d                   	pop    ebp
c0022389:	c3                   	ret    

c002238a <PCI::detect()>:
c002238a:	56                   	push   esi
c002238b:	53                   	push   ebx
c002238c:	53                   	push   ebx
c002238d:	31 db                	xor    ebx,ebx
c002238f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022393:	6a 00                	push   0x0
c0022395:	6a 00                	push   0x0
c0022397:	6a 00                	push   0x0
c0022399:	56                   	push   esi
c002239a:	e8 7d fa ff ff       	call   c0021e1c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002239f:	83 c4 10             	add    esp,0x10
c00223a2:	a8 80                	test   al,0x80
c00223a4:	75 21                	jne    c00223c7 <PCI::detect()+0x3d>
c00223a6:	51                   	push   ecx
c00223a7:	51                   	push   ecx
c00223a8:	6a 00                	push   0x0
c00223aa:	56                   	push   esi
c00223ab:	e8 2c fc ff ff       	call   c0021fdc <PCI::checkBus(unsigned char)>
c00223b0:	83 c4 10             	add    esp,0x10
c00223b3:	eb 24                	jmp    c00223d9 <PCI::detect()+0x4f>
c00223b5:	52                   	push   edx
c00223b6:	52                   	push   edx
c00223b7:	53                   	push   ebx
c00223b8:	43                   	inc    ebx
c00223b9:	56                   	push   esi
c00223ba:	e8 1d fc ff ff       	call   c0021fdc <PCI::checkBus(unsigned char)>
c00223bf:	83 c4 10             	add    esp,0x10
c00223c2:	83 fb 08             	cmp    ebx,0x8
c00223c5:	74 12                	je     c00223d9 <PCI::detect()+0x4f>
c00223c7:	53                   	push   ebx
c00223c8:	6a 00                	push   0x0
c00223ca:	6a 00                	push   0x0
c00223cc:	56                   	push   esi
c00223cd:	e8 28 fa ff ff       	call   c0021dfa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00223d2:	83 c4 10             	add    esp,0x10
c00223d5:	66 40                	inc    ax
c00223d7:	74 dc                	je     c00223b5 <PCI::detect()+0x2b>
c00223d9:	58                   	pop    eax
c00223da:	5b                   	pop    ebx
c00223db:	5e                   	pop    esi
c00223dc:	c3                   	ret    
c00223dd:	90                   	nop

c00223de <IDE::close(int, int, void*)>:
c00223de:	83 c8 ff             	or     eax,0xffffffff
c00223e1:	c3                   	ret    

c00223e2 <IDE::IDE()>:
c00223e2:	83 ec 0c             	sub    esp,0xc
c00223e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223e9:	83 ec 08             	sub    esp,0x8
c00223ec:	68 ac b7 02 c0       	push   0xc002b7ac
c00223f1:	50                   	push   eax
c00223f2:	e8 e5 1c ff ff       	call   c00140dc <HardDiskController::HardDiskController(char const*)>
c00223f7:	83 c4 10             	add    esp,0x10
c00223fa:	ba ec b9 02 c0       	mov    edx,0xc002b9ec
c00223ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022403:	89 10                	mov    DWORD PTR [eax],edx
c0022405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022409:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022410:	90                   	nop
c0022411:	83 c4 0c             	add    esp,0xc
c0022414:	c3                   	ret    
c0022415:	90                   	nop

c0022416 <IDE::prepareInterrupt(unsigned char)>:
c0022416:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002241b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002241f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022427:	c3                   	ret    

c0022428 <selectDrive(unsigned char, unsigned char)>:
c0022428:	c3                   	ret    
c0022429:	90                   	nop

c002242a <IDE::getBase(unsigned char)>:
c002242a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002242f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022433:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002243b:	c3                   	ret    

c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002243c:	55                   	push   ebp
c002243d:	57                   	push   edi
c002243e:	56                   	push   esi
c002243f:	53                   	push   ebx
c0022440:	83 ec 1c             	sub    esp,0x1c
c0022443:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022447:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002244b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002244e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022452:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022456:	80 f9 03             	cmp    cl,0x3
c0022459:	77 51                	ja     c00224ac <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c002245b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002245f:	0f b6 f2             	movzx  esi,dl
c0022462:	0f b6 db             	movzx  ebx,bl
c0022465:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022468:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c002246c:	83 ca 80             	or     edx,0xffffff80
c002246f:	0f b6 d2             	movzx  edx,dl
c0022472:	52                   	push   edx
c0022473:	6a 0c                	push   0xc
c0022475:	56                   	push   esi
c0022476:	57                   	push   edi
c0022477:	e8 c0 ff ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002247c:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022481:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022485:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022489:	ee                   	out    dx,al
c002248a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002248f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022493:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022497:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002249b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00224a3:	83 c4 2c             	add    esp,0x2c
c00224a6:	5b                   	pop    ebx
c00224a7:	5e                   	pop    esi
c00224a8:	5f                   	pop    edi
c00224a9:	5d                   	pop    ebp
c00224aa:	eb 90                	jmp    c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00224ac:	80 fb 07             	cmp    bl,0x7
c00224af:	77 12                	ja     c00224c3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00224b1:	0f b6 d2             	movzx  edx,dl
c00224b4:	0f b6 db             	movzx  ebx,bl
c00224b7:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00224bf:	89 da                	mov    edx,ebx
c00224c1:	eb 2f                	jmp    c00224f2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00224c3:	80 fb 0d             	cmp    bl,0xd
c00224c6:	77 13                	ja     c00224db <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00224c8:	0f b6 d2             	movzx  edx,dl
c00224cb:	0f b6 db             	movzx  ebx,bl
c00224ce:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00224d5:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00224d9:	eb 17                	jmp    c00224f2 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00224db:	80 fb 15             	cmp    bl,0x15
c00224de:	77 13                	ja     c00224f3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00224e0:	0f b6 d2             	movzx  edx,dl
c00224e3:	0f b6 db             	movzx  ebx,bl
c00224e6:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00224ee:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00224f2:	ee                   	out    dx,al
c00224f3:	83 c4 1c             	add    esp,0x1c
c00224f6:	5b                   	pop    ebx
c00224f7:	5e                   	pop    esi
c00224f8:	5f                   	pop    edi
c00224f9:	5d                   	pop    ebp
c00224fa:	c3                   	ret    
c00224fb:	90                   	nop

c00224fc <IDE::read(unsigned char, unsigned char)>:
c00224fc:	55                   	push   ebp
c00224fd:	57                   	push   edi
c00224fe:	56                   	push   esi
c00224ff:	53                   	push   ebx
c0022500:	83 ec 1c             	sub    esp,0x1c
c0022503:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022507:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002250b:	8d 43 f8             	lea    eax,[ebx-0x8]
c002250e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022512:	3c 03                	cmp    al,0x3
c0022514:	77 43                	ja     c0022559 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022516:	0f b6 f2             	movzx  esi,dl
c0022519:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002251c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022520:	83 c8 80             	or     eax,0xffffff80
c0022523:	0f b6 c0             	movzx  eax,al
c0022526:	50                   	push   eax
c0022527:	6a 0c                	push   0xc
c0022529:	56                   	push   esi
c002252a:	57                   	push   edi
c002252b:	e8 0c ff ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022530:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022535:	0f b6 c3             	movzx  eax,bl
c0022538:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c002253c:	ec                   	in     al,dx
c002253d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022541:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022546:	52                   	push   edx
c0022547:	6a 0c                	push   0xc
c0022549:	56                   	push   esi
c002254a:	57                   	push   edi
c002254b:	e8 ec fe ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022550:	83 c4 20             	add    esp,0x20
c0022553:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022557:	eb 49                	jmp    c00225a2 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022559:	80 fb 07             	cmp    bl,0x7
c002255c:	77 12                	ja     c0022570 <IDE::read(unsigned char, unsigned char)+0x74>
c002255e:	0f b6 d2             	movzx  edx,dl
c0022561:	0f b6 c3             	movzx  eax,bl
c0022564:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c002256c:	89 c2                	mov    edx,eax
c002256e:	eb 31                	jmp    c00225a1 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022570:	80 fb 0d             	cmp    bl,0xd
c0022573:	77 13                	ja     c0022588 <IDE::read(unsigned char, unsigned char)+0x8c>
c0022575:	0f b6 d2             	movzx  edx,dl
c0022578:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c002257f:	0f b6 d3             	movzx  edx,bl
c0022582:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022586:	eb 19                	jmp    c00225a1 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022588:	31 c0                	xor    eax,eax
c002258a:	80 fb 15             	cmp    bl,0x15
c002258d:	77 13                	ja     c00225a2 <IDE::read(unsigned char, unsigned char)+0xa6>
c002258f:	0f b6 d2             	movzx  edx,dl
c0022592:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002259a:	0f b6 d3             	movzx  edx,bl
c002259d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00225a1:	ec                   	in     al,dx
c00225a2:	83 c4 1c             	add    esp,0x1c
c00225a5:	5b                   	pop    ebx
c00225a6:	5e                   	pop    esi
c00225a7:	5f                   	pop    edi
c00225a8:	5d                   	pop    ebp
c00225a9:	c3                   	ret    

c00225aa <IDE::waitInterrupt(unsigned char)>:
c00225aa:	55                   	push   ebp
c00225ab:	57                   	push   edi
c00225ac:	56                   	push   esi
c00225ad:	53                   	push   ebx
c00225ae:	31 db                	xor    ebx,ebx
c00225b0:	83 ec 0c             	sub    esp,0xc
c00225b3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00225b7:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00225bc:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00225c4:	89 e8                	mov    eax,ebp
c00225c6:	84 c0                	test   al,al
c00225c8:	75 34                	jne    c00225fe <IDE::waitInterrupt(unsigned char)+0x54>
c00225ca:	52                   	push   edx
c00225cb:	6a 0c                	push   0xc
c00225cd:	56                   	push   esi
c00225ce:	57                   	push   edi
c00225cf:	e8 28 ff ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c00225d4:	83 c4 10             	add    esp,0x10
c00225d7:	a8 01                	test   al,0x1
c00225d9:	75 2b                	jne    c0022606 <IDE::waitInterrupt(unsigned char)+0x5c>
c00225db:	f6 c3 04             	test   bl,0x4
c00225de:	75 16                	jne    c00225f6 <IDE::waitInterrupt(unsigned char)+0x4c>
c00225e0:	83 fb 32             	cmp    ebx,0x32
c00225e3:	7e 11                	jle    c00225f6 <IDE::waitInterrupt(unsigned char)+0x4c>
c00225e5:	50                   	push   eax
c00225e6:	50                   	push   eax
c00225e7:	6a 00                	push   0x0
c00225e9:	68 80 96 98 00       	push   0x989680
c00225ee:	e8 8b b1 ff ff       	call   c001d77e <nanoSleep(unsigned long long)>
c00225f3:	83 c4 10             	add    esp,0x10
c00225f6:	83 fb 3c             	cmp    ebx,0x3c
c00225f9:	74 0b                	je     c0022606 <IDE::waitInterrupt(unsigned char)+0x5c>
c00225fb:	43                   	inc    ebx
c00225fc:	eb be                	jmp    c00225bc <IDE::waitInterrupt(unsigned char)+0x12>
c00225fe:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022606:	83 c4 0c             	add    esp,0xc
c0022609:	89 e8                	mov    eax,ebp
c002260b:	5b                   	pop    ebx
c002260c:	5e                   	pop    esi
c002260d:	5f                   	pop    edi
c002260e:	5d                   	pop    ebp
c002260f:	c3                   	ret    

c0022610 <ideChannel0IRQHandler(regs*, void*)>:
c0022610:	83 ec 10             	sub    esp,0x10
c0022613:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022617:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002261e:	6a 07                	push   0x7
c0022620:	6a 00                	push   0x0
c0022622:	50                   	push   eax
c0022623:	e8 d4 fe ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0022628:	83 c4 1c             	add    esp,0x1c
c002262b:	c3                   	ret    

c002262c <ideChannel1IRQHandler(regs*, void*)>:
c002262c:	83 ec 10             	sub    esp,0x10
c002262f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022633:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002263a:	6a 07                	push   0x7
c002263c:	6a 01                	push   0x1
c002263e:	50                   	push   eax
c002263f:	e8 b8 fe ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0022644:	83 c4 1c             	add    esp,0x1c
c0022647:	c3                   	ret    

c0022648 <IDE::enableIRQs(unsigned char, bool)>:
c0022648:	57                   	push   edi
c0022649:	56                   	push   esi
c002264a:	be 04 00 00 00       	mov    esi,0x4
c002264f:	53                   	push   ebx
c0022650:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022655:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022659:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c002265e:	0f 94 c0             	sete   al
c0022661:	d1 e0                	shl    eax,1
c0022663:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c002266a:	0f b6 c0             	movzx  eax,al
c002266d:	50                   	push   eax
c002266e:	6a 0c                	push   0xc
c0022670:	57                   	push   edi
c0022671:	53                   	push   ebx
c0022672:	e8 c5 fd ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022677:	83 c4 10             	add    esp,0x10
c002267a:	50                   	push   eax
c002267b:	6a 0c                	push   0xc
c002267d:	57                   	push   edi
c002267e:	53                   	push   ebx
c002267f:	e8 78 fe ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0022684:	83 c4 10             	add    esp,0x10
c0022687:	4e                   	dec    esi
c0022688:	75 f0                	jne    c002267a <IDE::enableIRQs(unsigned char, bool)+0x32>
c002268a:	5b                   	pop    ebx
c002268b:	5e                   	pop    esi
c002268c:	5f                   	pop    edi
c002268d:	c3                   	ret    

c002268e <IDE::open(int, int, void*)>:
c002268e:	55                   	push   ebp
c002268f:	57                   	push   edi
c0022690:	56                   	push   esi
c0022691:	53                   	push   ebx
c0022692:	83 ec 1c             	sub    esp,0x1c
c0022695:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022699:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00226a2:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00226ab:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00226b2:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00226b9:	0f 85 b0 02 00 00    	jne    c002296f <IDE::open(int, int, void*)+0x2e1>
c00226bf:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00226c5:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00226c9:	83 e0 7f             	and    eax,0x7f
c00226cc:	3c 05                	cmp    al,0x5
c00226ce:	74 04                	je     c00226d4 <IDE::open(int, int, void*)+0x46>
c00226d0:	3c 0f                	cmp    al,0xf
c00226d2:	75 32                	jne    c0022706 <IDE::open(int, int, void*)+0x78>
c00226d4:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00226da:	83 e0 fc             	and    eax,0xfffffffc
c00226dd:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00226e4:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00226ea:	83 e0 fc             	and    eax,0xfffffffc
c00226ed:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00226f4:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00226fa:	83 e0 fc             	and    eax,0xfffffffc
c00226fd:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022704:	eb 14                	jmp    c002271a <IDE::open(int, int, void*)+0x8c>
c0022706:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022710:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002271a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0022721:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0022728:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002272c:	89 c6                	mov    esi,eax
c002272e:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022733:	c1 e6 10             	shl    esi,0x10
c0022736:	89 e8                	mov    eax,ebp
c0022738:	89 fa                	mov    edx,edi
c002273a:	c1 e0 0b             	shl    eax,0xb
c002273d:	09 f0                	or     eax,esi
c002273f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0022746:	c1 e6 08             	shl    esi,0x8
c0022749:	09 c6                	or     esi,eax
c002274b:	89 f0                	mov    eax,esi
c002274d:	0d 08 00 00 80       	or     eax,0x80000008
c0022752:	ef                   	out    dx,eax
c0022753:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0022758:	89 ca                	mov    edx,ecx
c002275a:	ed                   	in     eax,dx
c002275b:	c1 e8 10             	shr    eax,0x10
c002275e:	3d ff ff 00 00       	cmp    eax,0xffff
c0022763:	0f 84 f5 00 00 00    	je     c002285e <IDE::open(int, int, void*)+0x1d0>
c0022769:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002276f:	89 fa                	mov    edx,edi
c0022771:	89 f0                	mov    eax,esi
c0022773:	ef                   	out    dx,eax
c0022774:	b0 fe                	mov    al,0xfe
c0022776:	89 ca                	mov    edx,ecx
c0022778:	ee                   	out    dx,al
c0022779:	89 f0                	mov    eax,esi
c002277b:	89 fa                	mov    edx,edi
c002277d:	ef                   	out    dx,eax
c002277e:	89 ca                	mov    edx,ecx
c0022780:	ed                   	in     eax,dx
c0022781:	3c fe                	cmp    al,0xfe
c0022783:	0f 85 a9 00 00 00    	jne    c0022832 <IDE::open(int, int, void*)+0x1a4>
c0022789:	8b 15 e8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0e8
c002278f:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0022796:	74 33                	je     c00227cb <IDE::open(int, int, void*)+0x13d>
c0022798:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002279e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00227a2:	40                   	inc    eax
c00227a3:	83 ec 0c             	sub    esp,0xc
c00227a6:	0f b6 c0             	movzx  eax,al
c00227a9:	50                   	push   eax
c00227aa:	55                   	push   ebp
c00227ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00227af:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00227b5:	51                   	push   ecx
c00227b6:	e8 bf 51 ff ff       	call   c001797a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00227bb:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00227c0:	83 c4 1c             	add    esp,0x1c
c00227c3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00227c9:	eb 0a                	jmp    c00227d5 <IDE::open(int, int, void*)+0x147>
c00227cb:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c00227d5:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00227dc:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00227e3:	c1 e1 10             	shl    ecx,0x10
c00227e6:	c1 e0 08             	shl    eax,0x8
c00227e9:	bf f8 0c 00 00       	mov    edi,0xcf8
c00227ee:	09 c1                	or     ecx,eax
c00227f0:	89 fa                	mov    edx,edi
c00227f2:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00227f9:	c1 e0 0b             	shl    eax,0xb
c00227fc:	09 c1                	or     ecx,eax
c00227fe:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0022804:	89 c8                	mov    eax,ecx
c0022806:	ef                   	out    dx,eax
c0022807:	be fc 0c 00 00       	mov    esi,0xcfc
c002280c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0022812:	89 f2                	mov    edx,esi
c0022814:	ee                   	out    dx,al
c0022815:	89 c8                	mov    eax,ecx
c0022817:	89 fa                	mov    edx,edi
c0022819:	ef                   	out    dx,eax
c002281a:	89 f2                	mov    edx,esi
c002281c:	ed                   	in     eax,dx
c002281d:	0f b6 c0             	movzx  eax,al
c0022820:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0022826:	74 46                	je     c002286e <IDE::open(int, int, void*)+0x1e0>
c0022828:	83 ec 0c             	sub    esp,0xc
c002282b:	68 c4 b7 02 c0       	push   0xc002b7c4
c0022830:	eb 34                	jmp    c0022866 <IDE::open(int, int, void*)+0x1d8>
c0022832:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002283b:	75 17                	jne    c0022854 <IDE::open(int, int, void*)+0x1c6>
c002283d:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0022842:	74 07                	je     c002284b <IDE::open(int, int, void*)+0x1bd>
c0022844:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0022849:	75 09                	jne    c0022854 <IDE::open(int, int, void*)+0x1c6>
c002284b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022852:	eb 1a                	jmp    c002286e <IDE::open(int, int, void*)+0x1e0>
c0022854:	83 ec 0c             	sub    esp,0xc
c0022857:	68 cc b7 02 c0       	push   0xc002b7cc
c002285c:	eb 08                	jmp    c0022866 <IDE::open(int, int, void*)+0x1d8>
c002285e:	83 ec 0c             	sub    esp,0xc
c0022861:	68 fd b7 02 c0       	push   0xc002b7fd
c0022866:	e8 14 74 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c002286b:	83 c4 10             	add    esp,0x10
c002286e:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0022875:	79 1a                	jns    c0022891 <IDE::open(int, int, void*)+0x203>
c0022877:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002287d:	83 e0 fc             	and    eax,0xfffffffc
c0022880:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0022887:	83 c0 08             	add    eax,0x8
c002288a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0022891:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0022897:	89 c2                	mov    edx,eax
c0022899:	83 e2 0f             	and    edx,0xf
c002289c:	66 83 fa 08          	cmp    dx,0x8
c00228a0:	75 0a                	jne    c00228ac <IDE::open(int, int, void*)+0x21e>
c00228a2:	83 e8 02             	sub    eax,0x2
c00228a5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00228ac:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00228b2:	89 c2                	mov    edx,eax
c00228b4:	83 e2 0f             	and    edx,0xf
c00228b7:	66 83 fa 08          	cmp    dx,0x8
c00228bb:	75 0a                	jne    c00228c7 <IDE::open(int, int, void*)+0x239>
c00228bd:	83 e8 02             	sub    eax,0x2
c00228c0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00228c7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00228ce:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00228d5:	89 d0                	mov    eax,edx
c00228d7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00228da:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00228de:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00228e2:	8d 4a 01             	lea    ecx,[edx+0x1]
c00228e5:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00228ea:	0f b6 c9             	movzx  ecx,cl
c00228ed:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00228f4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00228f7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00228fb:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00228ff:	8d 50 02             	lea    edx,[eax+0x2]
c0022902:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022907:	0f b6 d2             	movzx  edx,dl
c002290a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0022910:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022913:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022917:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002291b:	8d 48 03             	lea    ecx,[eax+0x3]
c002291e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022923:	0f b6 c9             	movzx  ecx,cl
c0022926:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002292c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002292f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022933:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0022937:	8d 50 04             	lea    edx,[eax+0x4]
c002293a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0022940:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022945:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002294c:	66 85 f6             	test   si,si
c002294f:	74 3e                	je     c002298f <IDE::open(int, int, void*)+0x301>
c0022951:	0f b6 d2             	movzx  edx,dl
c0022954:	83 c0 05             	add    eax,0x5
c0022957:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002295a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002295e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0022962:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0022968:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002296d:	eb 20                	jmp    c002298f <IDE::open(int, int, void*)+0x301>
c002296f:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022979:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022983:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002298a:	e9 02 ff ff ff       	jmp    c0022891 <IDE::open(int, int, void*)+0x203>
c002298f:	52                   	push   edx
c0022990:	52                   	push   edx
c0022991:	6a 00                	push   0x0
c0022993:	53                   	push   ebx
c0022994:	e8 7d fa ff ff       	call   c0022416 <IDE::prepareInterrupt(unsigned char)>
c0022999:	59                   	pop    ecx
c002299a:	5e                   	pop    esi
c002299b:	6a 01                	push   0x1
c002299d:	53                   	push   ebx
c002299e:	e8 73 fa ff ff       	call   c0022416 <IDE::prepareInterrupt(unsigned char)>
c00229a3:	83 c4 0c             	add    esp,0xc
c00229a6:	6a 00                	push   0x0
c00229a8:	6a 00                	push   0x0
c00229aa:	53                   	push   ebx
c00229ab:	e8 98 fc ff ff       	call   c0022648 <IDE::enableIRQs(unsigned char, bool)>
c00229b0:	83 c4 0c             	add    esp,0xc
c00229b3:	6a 00                	push   0x0
c00229b5:	6a 01                	push   0x1
c00229b7:	53                   	push   ebx
c00229b8:	e8 8b fc ff ff       	call   c0022648 <IDE::enableIRQs(unsigned char, bool)>
c00229bd:	83 c4 10             	add    esp,0x10
c00229c0:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00229c7:	74 40                	je     c0022a09 <IDE::open(int, int, void*)+0x37b>
c00229c9:	83 ec 0c             	sub    esp,0xc
c00229cc:	68 27 b8 02 c0       	push   0xc002b827
c00229d1:	e8 53 ff fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00229d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00229d9:	6a 01                	push   0x1
c00229db:	68 10 26 02 c0       	push   0xc0022610
c00229e0:	6a 0e                	push   0xe
c00229e2:	53                   	push   ebx
c00229e3:	e8 ec 12 ff ff       	call   c0013cd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00229e8:	83 c4 14             	add    esp,0x14
c00229eb:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00229f1:	53                   	push   ebx
c00229f2:	6a 01                	push   0x1
c00229f4:	68 2c 26 02 c0       	push   0xc002262c
c00229f9:	6a 0f                	push   0xf
c00229fb:	53                   	push   ebx
c00229fc:	e8 d3 12 ff ff       	call   c0013cd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022a01:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0022a07:	eb 4a                	jmp    c0022a53 <IDE::open(int, int, void*)+0x3c5>
c0022a09:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0022a13:	50                   	push   eax
c0022a14:	6a 0f                	push   0xf
c0022a16:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022a1c:	68 43 b8 02 c0       	push   0xc002b843
c0022a21:	e8 03 ff fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0022a26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022a29:	6a 00                	push   0x0
c0022a2b:	68 10 26 02 c0       	push   0xc0022610
c0022a30:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022a36:	53                   	push   ebx
c0022a37:	e8 98 12 ff ff       	call   c0013cd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022a3c:	83 c4 14             	add    esp,0x14
c0022a3f:	53                   	push   ebx
c0022a40:	6a 00                	push   0x0
c0022a42:	68 2c 26 02 c0       	push   0xc002262c
c0022a47:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0022a4d:	53                   	push   ebx
c0022a4e:	e8 81 12 ff ff       	call   c0013cd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022a53:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022a55:	83 c4 20             	add    esp,0x20
c0022a58:	83 ec 0c             	sub    esp,0xc
c0022a5b:	53                   	push   ebx
c0022a5c:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0022a5f:	83 c4 0c             	add    esp,0xc
c0022a62:	6a 07                	push   0x7
c0022a64:	6a 00                	push   0x0
c0022a66:	53                   	push   ebx
c0022a67:	e8 90 fa ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0022a6c:	83 c4 0c             	add    esp,0xc
c0022a6f:	6a 07                	push   0x7
c0022a71:	6a 01                	push   0x1
c0022a73:	53                   	push   ebx
c0022a74:	e8 83 fa ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0022a79:	83 c4 0c             	add    esp,0xc
c0022a7c:	6a 01                	push   0x1
c0022a7e:	6a 00                	push   0x0
c0022a80:	53                   	push   ebx
c0022a81:	e8 c2 fb ff ff       	call   c0022648 <IDE::enableIRQs(unsigned char, bool)>
c0022a86:	83 c4 0c             	add    esp,0xc
c0022a89:	6a 01                	push   0x1
c0022a8b:	6a 01                	push   0x1
c0022a8d:	53                   	push   ebx
c0022a8e:	e8 b5 fb ff ff       	call   c0022648 <IDE::enableIRQs(unsigned char, bool)>
c0022a93:	83 c4 2c             	add    esp,0x2c
c0022a96:	31 c0                	xor    eax,eax
c0022a98:	5b                   	pop    ebx
c0022a99:	5e                   	pop    esi
c0022a9a:	5f                   	pop    edi
c0022a9b:	5d                   	pop    ebp
c0022a9c:	c3                   	ret    
c0022a9d:	90                   	nop

c0022a9e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0022a9e:	55                   	push   ebp
c0022a9f:	57                   	push   edi
c0022aa0:	56                   	push   esi
c0022aa1:	53                   	push   ebx
c0022aa2:	83 ec 1c             	sub    esp,0x1c
c0022aa5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022aa9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022aad:	8d 50 f8             	lea    edx,[eax-0x8]
c0022ab0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022ab4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022ab8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022abc:	80 fa 03             	cmp    dl,0x3
c0022abf:	77 5d                	ja     c0022b1e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0022ac1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022ac5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022ac9:	0f b6 db             	movzx  ebx,bl
c0022acc:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0022acf:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0022ad3:	83 ca 80             	or     edx,0xffffff80
c0022ad6:	0f b6 d2             	movzx  edx,dl
c0022ad9:	52                   	push   edx
c0022ada:	6a 0c                	push   0xc
c0022adc:	53                   	push   ebx
c0022add:	56                   	push   esi
c0022ade:	e8 59 f9 ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022ae3:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0022ae8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022aec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022af0:	0f b6 c0             	movzx  eax,al
c0022af3:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0022af7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022af9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0022afe:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0022b02:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022b06:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022b0a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022b12:	83 c4 2c             	add    esp,0x2c
c0022b15:	5b                   	pop    ebx
c0022b16:	5e                   	pop    esi
c0022b17:	5f                   	pop    edi
c0022b18:	5d                   	pop    ebp
c0022b19:	e9 1e f9 ff ff       	jmp    c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022b1e:	3c 07                	cmp    al,0x7
c0022b20:	77 10                	ja     c0022b32 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0022b22:	0f b6 db             	movzx  ebx,bl
c0022b25:	0f b6 d0             	movzx  edx,al
c0022b28:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0022b30:	eb 2d                	jmp    c0022b5f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022b32:	3c 0d                	cmp    al,0xd
c0022b34:	77 13                	ja     c0022b49 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0022b36:	0f b6 db             	movzx  ebx,bl
c0022b39:	0f b6 c0             	movzx  eax,al
c0022b3c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0022b43:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0022b47:	eb 16                	jmp    c0022b5f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022b49:	3c 15                	cmp    al,0x15
c0022b4b:	77 14                	ja     c0022b61 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0022b4d:	0f b6 db             	movzx  ebx,bl
c0022b50:	0f b6 c0             	movzx  eax,al
c0022b53:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0022b5b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0022b5f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022b61:	83 c4 1c             	add    esp,0x1c
c0022b64:	5b                   	pop    ebx
c0022b65:	5e                   	pop    esi
c0022b66:	5f                   	pop    edi
c0022b67:	5d                   	pop    ebp
c0022b68:	c3                   	ret    
c0022b69:	90                   	nop

c0022b6a <IDE::detect()>:
c0022b6a:	55                   	push   ebp
c0022b6b:	57                   	push   edi
c0022b6c:	56                   	push   esi
c0022b6d:	53                   	push   ebx
c0022b6e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0022b74:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0022b7b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0022b82:	0f 85 be 02 00 00    	jne    c0022e46 <IDE::detect()+0x2dc>
c0022b88:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0022b8f:	31 f6                	xor    esi,esi
c0022b91:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0022b99:	31 ed                	xor    ebp,ebp
c0022b9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b9f:	c1 e0 06             	shl    eax,0x6
c0022ba2:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0022baa:	89 e8                	mov    eax,ebp
c0022bac:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0022bb0:	c1 e0 04             	shl    eax,0x4
c0022bb3:	83 c8 a0             	or     eax,0xffffffa0
c0022bb6:	0f b6 c0             	movzx  eax,al
c0022bb9:	50                   	push   eax
c0022bba:	6a 06                	push   0x6
c0022bbc:	56                   	push   esi
c0022bbd:	53                   	push   ebx
c0022bbe:	e8 79 f8 ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022bc3:	83 c4 0c             	add    esp,0xc
c0022bc6:	6a 0c                	push   0xc
c0022bc8:	56                   	push   esi
c0022bc9:	53                   	push   ebx
c0022bca:	e8 2d f9 ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0022bcf:	83 c4 0c             	add    esp,0xc
c0022bd2:	6a 0c                	push   0xc
c0022bd4:	56                   	push   esi
c0022bd5:	53                   	push   ebx
c0022bd6:	e8 21 f9 ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0022bdb:	83 c4 0c             	add    esp,0xc
c0022bde:	6a 0c                	push   0xc
c0022be0:	56                   	push   esi
c0022be1:	53                   	push   ebx
c0022be2:	e8 15 f9 ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0022be7:	83 c4 0c             	add    esp,0xc
c0022bea:	6a 0c                	push   0xc
c0022bec:	56                   	push   esi
c0022bed:	53                   	push   ebx
c0022bee:	e8 09 f9 ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0022bf3:	68 ec 00 00 00       	push   0xec
c0022bf8:	6a 07                	push   0x7
c0022bfa:	56                   	push   esi
c0022bfb:	53                   	push   ebx
c0022bfc:	e8 3b f8 ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022c01:	83 c4 1c             	add    esp,0x1c
c0022c04:	6a 0c                	push   0xc
c0022c06:	56                   	push   esi
c0022c07:	53                   	push   ebx
c0022c08:	e8 ef f8 ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0022c0d:	83 c4 0c             	add    esp,0xc
c0022c10:	6a 0c                	push   0xc
c0022c12:	56                   	push   esi
c0022c13:	53                   	push   ebx
c0022c14:	e8 e3 f8 ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0022c19:	83 c4 0c             	add    esp,0xc
c0022c1c:	6a 0c                	push   0xc
c0022c1e:	56                   	push   esi
c0022c1f:	53                   	push   ebx
c0022c20:	e8 d7 f8 ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0022c25:	83 c4 0c             	add    esp,0xc
c0022c28:	6a 0c                	push   0xc
c0022c2a:	56                   	push   esi
c0022c2b:	53                   	push   ebx
c0022c2c:	e8 cb f8 ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0022c31:	83 c4 0c             	add    esp,0xc
c0022c34:	6a 0c                	push   0xc
c0022c36:	56                   	push   esi
c0022c37:	53                   	push   ebx
c0022c38:	e8 bf f8 ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0022c3d:	83 c4 10             	add    esp,0x10
c0022c40:	84 c0                	test   al,al
c0022c42:	0f 84 8b 01 00 00    	je     c0022dd3 <IDE::detect()+0x269>
c0022c48:	31 ff                	xor    edi,edi
c0022c4a:	50                   	push   eax
c0022c4b:	6a 0c                	push   0xc
c0022c4d:	56                   	push   esi
c0022c4e:	53                   	push   ebx
c0022c4f:	e8 a8 f8 ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0022c54:	83 c4 10             	add    esp,0x10
c0022c57:	a8 01                	test   al,0x1
c0022c59:	0f 85 8e 01 00 00    	jne    c0022ded <IDE::detect()+0x283>
c0022c5f:	84 c0                	test   al,al
c0022c61:	78 04                	js     c0022c67 <IDE::detect()+0xfd>
c0022c63:	a8 08                	test   al,0x8
c0022c65:	75 27                	jne    c0022c8e <IDE::detect()+0x124>
c0022c67:	47                   	inc    edi
c0022c68:	81 ff 17 01 00 00    	cmp    edi,0x117
c0022c6e:	7e da                	jle    c0022c4a <IDE::detect()+0xe0>
c0022c70:	50                   	push   eax
c0022c71:	50                   	push   eax
c0022c72:	6a 00                	push   0x0
c0022c74:	68 40 4b 4c 00       	push   0x4c4b40
c0022c79:	e8 00 ab ff ff       	call   c001d77e <nanoSleep(unsigned long long)>
c0022c7e:	83 c4 10             	add    esp,0x10
c0022c81:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0022c87:	75 c1                	jne    c0022c4a <IDE::detect()+0xe0>
c0022c89:	e9 5f 01 00 00       	jmp    c0022ded <IDE::detect()+0x283>
c0022c8e:	31 c9                	xor    ecx,ecx
c0022c90:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0022c94:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0022c98:	83 ec 0c             	sub    esp,0xc
c0022c9b:	68 80 00 00 00       	push   0x80
c0022ca0:	57                   	push   edi
c0022ca1:	6a 00                	push   0x0
c0022ca3:	56                   	push   esi
c0022ca4:	53                   	push   ebx
c0022ca5:	e8 f4 fd ff ff       	call   c0022a9e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0022caa:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0022caf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022cb3:	89 d1                	mov    ecx,edx
c0022cb5:	c1 e0 06             	shl    eax,0x6
c0022cb8:	01 d8                	add    eax,ebx
c0022cba:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0022cc1:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0022cc8:	89 f2                	mov    edx,esi
c0022cca:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0022cd0:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0022cd4:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0022cda:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022cde:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0022ce5:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0022ced:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0022cf4:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0022cfc:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0022d02:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0022d09:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0022d0f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0022d13:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022d17:	83 c4 20             	add    esp,0x20
c0022d1a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0022d1d:	83 c0 02             	add    eax,0x2
c0022d20:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0022d26:	83 c7 02             	add    edi,0x2
c0022d29:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0022d2c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0022d32:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0022d36:	75 e2                	jne    c0022d1a <IDE::detect()+0x1b0>
c0022d38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d3c:	c1 e0 06             	shl    eax,0x6
c0022d3f:	01 d8                	add    eax,ebx
c0022d41:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0022d47:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0022d4e:	66 c1 ea 09          	shr    dx,0x9
c0022d52:	83 e2 01             	and    edx,0x1
c0022d55:	84 c9                	test   cl,cl
c0022d57:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0022d5d:	75 2f                	jne    c0022d8e <IDE::detect()+0x224>
c0022d5f:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0022d65:	85 c0                	test   eax,eax
c0022d67:	74 66                	je     c0022dcf <IDE::detect()+0x265>
c0022d69:	50                   	push   eax
c0022d6a:	55                   	push   ebp
c0022d6b:	56                   	push   esi
c0022d6c:	68 5f b8 02 c0       	push   0xc002b85f
c0022d71:	e8 b3 fb fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0022d76:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0022d7d:	e8 d8 c8 fe ff       	call   c000f65a <malloc>
c0022d82:	89 c7                	mov    edi,eax
c0022d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d87:	e8 62 06 00 00       	call   c00233ee <ATA::ATA()>
c0022d8c:	eb 28                	jmp    c0022db6 <IDE::detect()+0x24c>
c0022d8e:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0022d94:	55                   	push   ebp
c0022d95:	56                   	push   esi
c0022d96:	68 8e b8 02 c0       	push   0xc002b88e
c0022d9b:	e8 89 fb fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0022da0:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0022da7:	e8 ae c8 fe ff       	call   c000f65a <malloc>
c0022dac:	89 c7                	mov    edi,eax
c0022dae:	89 04 24             	mov    DWORD PTR [esp],eax
c0022db1:	e8 68 0c 00 00       	call   c0023a1e <ATAPI::ATAPI()>
c0022db6:	5a                   	pop    edx
c0022db7:	59                   	pop    ecx
c0022db8:	57                   	push   edi
c0022db9:	53                   	push   ebx
c0022dba:	e8 91 0f ff ff       	call   c0013d50 <Device::addChild(Device*)>
c0022dbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0022dc1:	53                   	push   ebx
c0022dc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022dc6:	6a 00                	push   0x0
c0022dc8:	57                   	push   edi
c0022dc9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022dcc:	83 c4 20             	add    esp,0x20
c0022dcf:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0022dd3:	4d                   	dec    ebp
c0022dd4:	74 0a                	je     c0022de0 <IDE::detect()+0x276>
c0022dd6:	bd 01 00 00 00       	mov    ebp,0x1
c0022ddb:	e9 bb fd ff ff       	jmp    c0022b9b <IDE::detect()+0x31>
c0022de0:	4e                   	dec    esi
c0022de1:	74 63                	je     c0022e46 <IDE::detect()+0x2dc>
c0022de3:	be 01 00 00 00       	mov    esi,0x1
c0022de8:	e9 ac fd ff ff       	jmp    c0022b99 <IDE::detect()+0x2f>
c0022ded:	50                   	push   eax
c0022dee:	6a 04                	push   0x4
c0022df0:	56                   	push   esi
c0022df1:	53                   	push   ebx
c0022df2:	e8 05 f7 ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0022df7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022dfb:	83 c4 0c             	add    esp,0xc
c0022dfe:	6a 05                	push   0x5
c0022e00:	56                   	push   esi
c0022e01:	53                   	push   ebx
c0022e02:	e8 f5 f6 ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0022e07:	83 c4 10             	add    esp,0x10
c0022e0a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0022e0e:	80 fa 14             	cmp    dl,0x14
c0022e11:	75 04                	jne    c0022e17 <IDE::detect()+0x2ad>
c0022e13:	3c eb                	cmp    al,0xeb
c0022e15:	eb 07                	jmp    c0022e1e <IDE::detect()+0x2b4>
c0022e17:	3c 96                	cmp    al,0x96
c0022e19:	75 b8                	jne    c0022dd3 <IDE::detect()+0x269>
c0022e1b:	80 fa 69             	cmp    dl,0x69
c0022e1e:	75 b3                	jne    c0022dd3 <IDE::detect()+0x269>
c0022e20:	68 a1 00 00 00       	push   0xa1
c0022e25:	6a 07                	push   0x7
c0022e27:	56                   	push   esi
c0022e28:	53                   	push   ebx
c0022e29:	e8 0e f6 ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e2e:	5f                   	pop    edi
c0022e2f:	58                   	pop    eax
c0022e30:	6a 00                	push   0x0
c0022e32:	68 40 42 0f 00       	push   0xf4240
c0022e37:	e8 42 a9 ff ff       	call   c001d77e <nanoSleep(unsigned long long)>
c0022e3c:	83 c4 10             	add    esp,0x10
c0022e3f:	b1 01                	mov    cl,0x1
c0022e41:	e9 4a fe ff ff       	jmp    c0022c90 <IDE::detect()+0x126>
c0022e46:	81 c4 1c 02 00 00    	add    esp,0x21c
c0022e4c:	5b                   	pop    ebx
c0022e4d:	5e                   	pop    esi
c0022e4e:	5f                   	pop    edi
c0022e4f:	5d                   	pop    ebp
c0022e50:	c3                   	ret    
c0022e51:	90                   	nop

c0022e52 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0022e52:	55                   	push   ebp
c0022e53:	57                   	push   edi
c0022e54:	56                   	push   esi
c0022e55:	53                   	push   ebx
c0022e56:	83 ec 1c             	sub    esp,0x1c
c0022e59:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022e5d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022e61:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022e65:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0022e69:	88 c3                	mov    bl,al
c0022e6b:	84 c0                	test   al,al
c0022e6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022e71:	0f 84 67 01 00 00    	je     c0022fde <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0022e77:	83 ec 0c             	sub    esp,0xc
c0022e7a:	68 bf b8 02 c0       	push   0xc002b8bf
c0022e7f:	e8 a5 fa fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0022e84:	83 c4 10             	add    esp,0x10
c0022e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e8b:	3c 01                	cmp    al,0x1
c0022e8d:	75 17                	jne    c0022ea6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0022e8f:	83 ec 0c             	sub    esp,0xc
c0022e92:	b3 13                	mov    bl,0x13
c0022e94:	68 cb b8 02 c0       	push   0xc002b8cb
c0022e99:	e8 8b fa fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0022e9e:	83 c4 10             	add    esp,0x10
c0022ea1:	e9 25 01 00 00       	jmp    c0022fcb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022ea6:	3c 02                	cmp    al,0x2
c0022ea8:	0f 85 ef 00 00 00    	jne    c0022f9d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0022eae:	d1 e6                	shl    esi,1
c0022eb0:	09 ee                	or     esi,ebp
c0022eb2:	52                   	push   edx
c0022eb3:	89 f0                	mov    eax,esi
c0022eb5:	6a 01                	push   0x1
c0022eb7:	0f b6 f0             	movzx  esi,al
c0022eba:	c1 e6 06             	shl    esi,0x6
c0022ebd:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0022ec5:	50                   	push   eax
c0022ec6:	57                   	push   edi
c0022ec7:	e8 30 f6 ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0022ecc:	83 c4 10             	add    esp,0x10
c0022ecf:	89 c6                	mov    esi,eax
c0022ed1:	a8 01                	test   al,0x1
c0022ed3:	74 12                	je     c0022ee7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0022ed5:	83 ec 0c             	sub    esp,0xc
c0022ed8:	b3 07                	mov    bl,0x7
c0022eda:	68 e0 b8 02 c0       	push   0xc002b8e0
c0022edf:	e8 45 fa fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0022ee4:	83 c4 10             	add    esp,0x10
c0022ee7:	f7 c6 02 00 00 00    	test   esi,0x2
c0022eed:	74 12                	je     c0022f01 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0022eef:	83 ec 0c             	sub    esp,0xc
c0022ef2:	b3 03                	mov    bl,0x3
c0022ef4:	68 fe b8 02 c0       	push   0xc002b8fe
c0022ef9:	e8 2b fa fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0022efe:	83 c4 10             	add    esp,0x10
c0022f01:	f7 c6 04 00 00 00    	test   esi,0x4
c0022f07:	74 12                	je     c0022f1b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0022f09:	83 ec 0c             	sub    esp,0xc
c0022f0c:	b3 14                	mov    bl,0x14
c0022f0e:	68 1e b9 02 c0       	push   0xc002b91e
c0022f13:	e8 11 fa fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0022f18:	83 c4 10             	add    esp,0x10
c0022f1b:	f7 c6 08 00 00 00    	test   esi,0x8
c0022f21:	74 12                	je     c0022f35 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0022f23:	83 ec 0c             	sub    esp,0xc
c0022f26:	b3 03                	mov    bl,0x3
c0022f28:	68 fe b8 02 c0       	push   0xc002b8fe
c0022f2d:	e8 f7 f9 fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0022f32:	83 c4 10             	add    esp,0x10
c0022f35:	f7 c6 10 00 00 00    	test   esi,0x10
c0022f3b:	74 12                	je     c0022f4f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0022f3d:	83 ec 0c             	sub    esp,0xc
c0022f40:	b3 15                	mov    bl,0x15
c0022f42:	68 36 b9 02 c0       	push   0xc002b936
c0022f47:	e8 dd f9 fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0022f4c:	83 c4 10             	add    esp,0x10
c0022f4f:	f7 c6 20 00 00 00    	test   esi,0x20
c0022f55:	74 12                	je     c0022f69 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0022f57:	83 ec 0c             	sub    esp,0xc
c0022f5a:	b3 03                	mov    bl,0x3
c0022f5c:	68 fe b8 02 c0       	push   0xc002b8fe
c0022f61:	e8 c3 f9 fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0022f66:	83 c4 10             	add    esp,0x10
c0022f69:	f7 c6 40 00 00 00    	test   esi,0x40
c0022f6f:	74 12                	je     c0022f83 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0022f71:	83 ec 0c             	sub    esp,0xc
c0022f74:	b3 16                	mov    bl,0x16
c0022f76:	68 50 b9 02 c0       	push   0xc002b950
c0022f7b:	e8 a9 f9 fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0022f80:	83 c4 10             	add    esp,0x10
c0022f83:	89 f0                	mov    eax,esi
c0022f85:	84 c0                	test   al,al
c0022f87:	79 42                	jns    c0022fcb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022f89:	83 ec 0c             	sub    esp,0xc
c0022f8c:	b3 0d                	mov    bl,0xd
c0022f8e:	68 71 b9 02 c0       	push   0xc002b971
c0022f93:	e8 91 f9 fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0022f98:	83 c4 10             	add    esp,0x10
c0022f9b:	eb 2e                	jmp    c0022fcb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022f9d:	3c 03                	cmp    al,0x3
c0022f9f:	75 14                	jne    c0022fb5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0022fa1:	83 ec 0c             	sub    esp,0xc
c0022fa4:	b3 17                	mov    bl,0x17
c0022fa6:	68 85 b9 02 c0       	push   0xc002b985
c0022fab:	e8 79 f9 fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0022fb0:	83 c4 10             	add    esp,0x10
c0022fb3:	eb 16                	jmp    c0022fcb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022fb5:	3c 04                	cmp    al,0x4
c0022fb7:	75 12                	jne    c0022fcb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022fb9:	83 ec 0c             	sub    esp,0xc
c0022fbc:	b3 08                	mov    bl,0x8
c0022fbe:	68 9b b9 02 c0       	push   0xc002b99b
c0022fc3:	e8 61 f9 fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0022fc8:	83 c4 10             	add    esp,0x10
c0022fcb:	50                   	push   eax
c0022fcc:	50                   	push   eax
c0022fcd:	0f b6 c3             	movzx  eax,bl
c0022fd0:	50                   	push   eax
c0022fd1:	68 b3 b9 02 c0       	push   0xc002b9b3
c0022fd6:	e8 4e f9 fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0022fdb:	83 c4 10             	add    esp,0x10
c0022fde:	83 c4 1c             	add    esp,0x1c
c0022fe1:	88 d8                	mov    al,bl
c0022fe3:	5b                   	pop    ebx
c0022fe4:	5e                   	pop    esi
c0022fe5:	5f                   	pop    edi
c0022fe6:	5d                   	pop    ebp
c0022fe7:	c3                   	ret    

c0022fe8 <IDE::polling(unsigned char, unsigned int)>:
c0022fe8:	57                   	push   edi
c0022fe9:	56                   	push   esi
c0022fea:	53                   	push   ebx
c0022feb:	bb 04 00 00 00       	mov    ebx,0x4
c0022ff0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022ff4:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022ff9:	52                   	push   edx
c0022ffa:	6a 0c                	push   0xc
c0022ffc:	56                   	push   esi
c0022ffd:	57                   	push   edi
c0022ffe:	e8 f9 f4 ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0023003:	83 c4 10             	add    esp,0x10
c0023006:	4b                   	dec    ebx
c0023007:	75 f0                	jne    c0022ff9 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023009:	bb a0 86 01 00       	mov    ebx,0x186a0
c002300e:	50                   	push   eax
c002300f:	6a 0c                	push   0xc
c0023011:	56                   	push   esi
c0023012:	57                   	push   edi
c0023013:	e8 e4 f4 ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0023018:	83 c4 10             	add    esp,0x10
c002301b:	a8 01                	test   al,0x1
c002301d:	74 12                	je     c0023031 <IDE::polling(unsigned char, unsigned int)+0x49>
c002301f:	83 ec 0c             	sub    esp,0xc
c0023022:	68 cd b9 02 c0       	push   0xc002b9cd
c0023027:	e8 fd f8 fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c002302c:	83 c4 10             	add    esp,0x10
c002302f:	eb 17                	jmp    c0023048 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023031:	a8 20                	test   al,0x20
c0023033:	75 0f                	jne    c0023044 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023035:	4b                   	dec    ebx
c0023036:	74 10                	je     c0023048 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023038:	84 c0                	test   al,al
c002303a:	78 d2                	js     c002300e <IDE::polling(unsigned char, unsigned int)+0x26>
c002303c:	a8 08                	test   al,0x8
c002303e:	74 ce                	je     c002300e <IDE::polling(unsigned char, unsigned int)+0x26>
c0023040:	31 c0                	xor    eax,eax
c0023042:	eb 06                	jmp    c002304a <IDE::polling(unsigned char, unsigned int)+0x62>
c0023044:	b0 01                	mov    al,0x1
c0023046:	eb 02                	jmp    c002304a <IDE::polling(unsigned char, unsigned int)+0x62>
c0023048:	b0 02                	mov    al,0x2
c002304a:	5b                   	pop    ebx
c002304b:	5e                   	pop    esi
c002304c:	5f                   	pop    edi
c002304d:	c3                   	ret    

c002304e <SATABus::close(int, int, void*)>:
c002304e:	31 c0                	xor    eax,eax
c0023050:	c3                   	ret    
c0023051:	90                   	nop

c0023052 <SATABus::detect()>:
c0023052:	c3                   	ret    
c0023053:	90                   	nop

c0023054 <SATABus::SATABus()>:
c0023054:	83 ec 0c             	sub    esp,0xc
c0023057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002305b:	83 ec 08             	sub    esp,0x8
c002305e:	68 10 ba 02 c0       	push   0xc002ba10
c0023063:	50                   	push   eax
c0023064:	e8 73 10 ff ff       	call   c00140dc <HardDiskController::HardDiskController(char const*)>
c0023069:	83 c4 10             	add    esp,0x10
c002306c:	ba cc ba 02 c0       	mov    edx,0xc002bacc
c0023071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023075:	89 10                	mov    DWORD PTR [eax],edx
c0023077:	83 ec 0c             	sub    esp,0xc
c002307a:	6a 50                	push   0x50
c002307c:	e8 3e cd fe ff       	call   c000fdbf <Phys::allocateContiguousPages(int)>
c0023081:	83 c4 10             	add    esp,0x10
c0023084:	89 c2                	mov    edx,eax
c0023086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002308a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023090:	83 ec 0c             	sub    esp,0xc
c0023093:	6a 50                	push   0x50
c0023095:	e8 9f e8 fe ff       	call   c0011939 <Virt::allocateKernelVirtualPages(int)>
c002309a:	83 c4 10             	add    esp,0x10
c002309d:	89 c2                	mov    edx,eax
c002309f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230a3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00230a9:	e8 1b ea fe ff       	call   c0011ac9 <Virt::getAKernelVAS()>
c00230ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00230b2:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00230b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00230bc:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00230c2:	83 ec 0c             	sub    esp,0xc
c00230c5:	6a 03                	push   0x3
c00230c7:	6a 50                	push   0x50
c00230c9:	51                   	push   ecx
c00230ca:	52                   	push   edx
c00230cb:	50                   	push   eax
c00230cc:	e8 27 f2 fe ff       	call   c00122f8 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00230d1:	83 c4 20             	add    esp,0x20
c00230d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230d8:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c00230de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230e2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00230e8:	83 ec 04             	sub    esp,0x4
c00230eb:	52                   	push   edx
c00230ec:	50                   	push   eax
c00230ed:	68 34 ba 02 c0       	push   0xc002ba34
c00230f2:	e8 32 f8 fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00230f7:	83 c4 10             	add    esp,0x10
c00230fa:	90                   	nop
c00230fb:	83 c4 0c             	add    esp,0xc
c00230fe:	c3                   	ret    
c00230ff:	90                   	nop

c0023100 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023100:	83 ec 0c             	sub    esp,0xc
c0023103:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023107:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002310a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002310d:	09 c2                	or     edx,eax
c002310f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023113:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023119:	8b 08                	mov    ecx,DWORD PTR [eax]
c002311b:	31 c0                	xor    eax,eax
c002311d:	c1 e9 08             	shr    ecx,0x8
c0023120:	83 e1 0f             	and    ecx,0xf
c0023123:	39 c8                	cmp    eax,ecx
c0023125:	74 0a                	je     c0023131 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023127:	f6 c2 01             	test   dl,0x1
c002312a:	74 18                	je     c0023144 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c002312c:	d1 ea                	shr    edx,1
c002312e:	40                   	inc    eax
c002312f:	eb f2                	jmp    c0023123 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023131:	83 ec 0c             	sub    esp,0xc
c0023134:	68 58 ba 02 c0       	push   0xc002ba58
c0023139:	e8 41 6b ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c002313e:	83 c4 10             	add    esp,0x10
c0023141:	83 c8 ff             	or     eax,0xffffffff
c0023144:	83 c4 0c             	add    esp,0xc
c0023147:	c3                   	ret    

c0023148 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023148:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002314c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002314f:	89 c2                	mov    edx,eax
c0023151:	c1 ea 08             	shr    edx,0x8
c0023154:	83 e2 0f             	and    edx,0xf
c0023157:	fe ca                	dec    dl
c0023159:	75 31                	jne    c002318c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002315b:	83 e0 0f             	and    eax,0xf
c002315e:	3c 03                	cmp    al,0x3
c0023160:	75 2a                	jne    c002318c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023162:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023165:	b8 02 00 00 00       	mov    eax,0x2
c002316a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023170:	74 1c                	je     c002318e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023172:	b8 04 00 00 00       	mov    eax,0x4
c0023177:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002317d:	74 0f                	je     c002318e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002317f:	31 c0                	xor    eax,eax
c0023181:	83 fa 03             	cmp    edx,0x3
c0023184:	0f 94 c0             	sete   al
c0023187:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002318b:	c3                   	ret    
c002318c:	31 c0                	xor    eax,eax
c002318e:	c3                   	ret    
c002318f:	90                   	nop

c0023190 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023190:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023194:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023197:	0f ba e2 0f          	bt     edx,0xf
c002319b:	72 f7                	jb     c0023194 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002319d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00231a0:	83 ca 10             	or     edx,0x10
c00231a3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00231a6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00231a9:	83 ca 01             	or     edx,0x1
c00231ac:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00231af:	c3                   	ret    

c00231b0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00231b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00231b4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00231b7:	83 e2 fe             	and    edx,0xfffffffe
c00231ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00231bd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00231c0:	83 e2 ef             	and    edx,0xffffffef
c00231c3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00231c6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00231c9:	0f ba e2 0e          	bt     edx,0xe
c00231cd:	72 f7                	jb     c00231c6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00231cf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00231d2:	0f ba e2 0f          	bt     edx,0xf
c00231d6:	72 ee                	jb     c00231c6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00231d8:	c3                   	ret    
c00231d9:	90                   	nop

c00231da <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00231da:	55                   	push   ebp
c00231db:	57                   	push   edi
c00231dc:	56                   	push   esi
c00231dd:	53                   	push   ebx
c00231de:	83 ec 1c             	sub    esp,0x1c
c00231e1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00231e5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00231e9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00231ed:	53                   	push   ebx
c00231ee:	89 fd                	mov    ebp,edi
c00231f0:	56                   	push   esi
c00231f1:	c1 e5 0a             	shl    ebp,0xa
c00231f4:	e8 b7 ff ff ff       	call   c00231b0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00231f9:	83 ec 0c             	sub    esp,0xc
c00231fc:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023202:	01 e8                	add    eax,ebp
c0023204:	89 03                	mov    DWORD PTR [ebx],eax
c0023206:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023208:	68 00 04 00 00       	push   0x400
c002320d:	6a 00                	push   0x0
c002320f:	50                   	push   eax
c0023210:	e8 af d4 fd ff       	call   c00006c4 <memset>
c0023215:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c002321b:	89 fa                	mov    edx,edi
c002321d:	01 e8                	add    eax,ebp
c002321f:	c1 e7 0d             	shl    edi,0xd
c0023222:	89 03                	mov    DWORD PTR [ebx],eax
c0023224:	c1 e2 08             	shl    edx,0x8
c0023227:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002322e:	81 c2 00 80 00 00    	add    edx,0x8000
c0023234:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023238:	89 d0                	mov    eax,edx
c002323a:	83 c4 1c             	add    esp,0x1c
c002323d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023243:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023246:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023249:	68 00 01 00 00       	push   0x100
c002324e:	6a 00                	push   0x0
c0023250:	50                   	push   eax
c0023251:	e8 6e d4 fd ff       	call   c00006c4 <memset>
c0023256:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002325a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023260:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023266:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002326a:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c002326d:	83 c4 10             	add    esp,0x10
c0023270:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023277:	31 ff                	xor    edi,edi
c0023279:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c002327f:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023285:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023289:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002328f:	83 c5 20             	add    ebp,0x20
c0023292:	01 f8                	add    eax,edi
c0023294:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023297:	52                   	push   edx
c0023298:	68 00 01 00 00       	push   0x100
c002329d:	6a 00                	push   0x0
c002329f:	50                   	push   eax
c00232a0:	e8 1f d4 fd ff       	call   c00006c4 <memset>
c00232a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00232a9:	83 c4 10             	add    esp,0x10
c00232ac:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00232b2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00232b9:	01 f8                	add    eax,edi
c00232bb:	81 c7 00 01 00 00    	add    edi,0x100
c00232c1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00232c4:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00232ca:	75 b3                	jne    c002327f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c00232cc:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00232d0:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00232d4:	83 c4 1c             	add    esp,0x1c
c00232d7:	5b                   	pop    ebx
c00232d8:	5e                   	pop    esi
c00232d9:	5f                   	pop    edi
c00232da:	5d                   	pop    ebp
c00232db:	e9 b0 fe ff ff       	jmp    c0023190 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c00232e0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c00232e0:	55                   	push   ebp
c00232e1:	57                   	push   edi
c00232e2:	56                   	push   esi
c00232e3:	53                   	push   ebx
c00232e4:	31 db                	xor    ebx,ebx
c00232e6:	83 ec 0c             	sub    esp,0xc
c00232e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00232ed:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00232f1:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00232f4:	f7 c7 01 00 00 00    	test   edi,0x1
c00232fa:	0f 84 94 00 00 00    	je     c0023394 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0023300:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023304:	89 d8                	mov    eax,ebx
c0023306:	c1 e0 07             	shl    eax,0x7
c0023309:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023310:	55                   	push   ebp
c0023311:	56                   	push   esi
c0023312:	e8 31 fe ff ff       	call   c0023148 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023317:	59                   	pop    ecx
c0023318:	83 f8 01             	cmp    eax,0x1
c002331b:	5a                   	pop    edx
c002331c:	75 47                	jne    c0023365 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x85>
c002331e:	51                   	push   ecx
c002331f:	51                   	push   ecx
c0023320:	53                   	push   ebx
c0023321:	68 7d ba 02 c0       	push   0xc002ba7d
c0023326:	e8 fe f5 fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c002332b:	83 c4 0c             	add    esp,0xc
c002332e:	53                   	push   ebx
c002332f:	55                   	push   ebp
c0023330:	56                   	push   esi
c0023331:	e8 a4 fe ff ff       	call   c00231da <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023336:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c002333d:	e8 18 c3 fe ff       	call   c000f65a <malloc>
c0023342:	89 04 24             	mov    DWORD PTR [esp],eax
c0023345:	89 c5                	mov    ebp,eax
c0023347:	e8 de 0c 00 00       	call   c002402a <SATA::SATA()>
c002334c:	58                   	pop    eax
c002334d:	5a                   	pop    edx
c002334e:	55                   	push   ebp
c002334f:	56                   	push   esi
c0023350:	e8 fb 09 ff ff       	call   c0013d50 <Device::addChild(Device*)>
c0023355:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023358:	56                   	push   esi
c0023359:	6a 00                	push   0x0
c002335b:	53                   	push   ebx
c002335c:	55                   	push   ebp
c002335d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023360:	83 c4 20             	add    esp,0x20
c0023363:	eb 2f                	jmp    c0023394 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0023365:	83 f8 04             	cmp    eax,0x4
c0023368:	75 1a                	jne    c0023384 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa4>
c002336a:	52                   	push   edx
c002336b:	52                   	push   edx
c002336c:	53                   	push   ebx
c002336d:	68 94 ba 02 c0       	push   0xc002ba94
c0023372:	e8 b2 f5 fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0023377:	83 c4 0c             	add    esp,0xc
c002337a:	53                   	push   ebx
c002337b:	55                   	push   ebp
c002337c:	56                   	push   esi
c002337d:	e8 58 fe ff ff       	call   c00231da <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023382:	eb 0d                	jmp    c0023391 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb1>
c0023384:	50                   	push   eax
c0023385:	50                   	push   eax
c0023386:	53                   	push   ebx
c0023387:	68 ad ba 02 c0       	push   0xc002baad
c002338c:	e8 98 f5 fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0023391:	83 c4 10             	add    esp,0x10
c0023394:	d1 ef                	shr    edi,1
c0023396:	43                   	inc    ebx
c0023397:	83 fb 20             	cmp    ebx,0x20
c002339a:	0f 85 54 ff ff ff    	jne    c00232f4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00233a0:	83 c4 0c             	add    esp,0xc
c00233a3:	5b                   	pop    ebx
c00233a4:	5e                   	pop    esi
c00233a5:	5f                   	pop    edi
c00233a6:	5d                   	pop    ebp
c00233a7:	c3                   	ret    

c00233a8 <SATABus::open(int, int, void*)>:
c00233a8:	83 ec 14             	sub    esp,0x14
c00233ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00233af:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00233b5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00233bb:	52                   	push   edx
c00233bc:	50                   	push   eax
c00233bd:	e8 1e ff ff ff       	call   c00232e0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c00233c2:	31 c0                	xor    eax,eax
c00233c4:	83 c4 1c             	add    esp,0x1c
c00233c7:	c3                   	ret    

c00233c8 <ATA::close(int, int, void*)>:
c00233c8:	83 ec 0c             	sub    esp,0xc
c00233cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233cf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00233d5:	85 c0                	test   eax,eax
c00233d7:	74 0c                	je     c00233e5 <ATA::close(int, int, void*)+0x1d>
c00233d9:	83 ec 0c             	sub    esp,0xc
c00233dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00233de:	50                   	push   eax
c00233df:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00233e2:	83 c4 10             	add    esp,0x10
c00233e5:	31 c0                	xor    eax,eax
c00233e7:	83 c4 0c             	add    esp,0xc
c00233ea:	c3                   	ret    
c00233eb:	90                   	nop

c00233ec <ATA::powerSaving(PowerSavingLevel)>:
c00233ec:	c3                   	ret    
c00233ed:	90                   	nop

c00233ee <ATA::ATA()>:
c00233ee:	83 ec 0c             	sub    esp,0xc
c00233f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233f5:	83 ec 04             	sub    esp,0x4
c00233f8:	68 00 02 00 00       	push   0x200
c00233fd:	68 c0 bb 02 c0       	push   0xc002bbc0
c0023402:	50                   	push   eax
c0023403:	e8 58 0d ff ff       	call   c0014160 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023408:	83 c4 10             	add    esp,0x10
c002340b:	ba 0c bb 02 c0       	mov    edx,0xc002bb0c
c0023410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023414:	89 10                	mov    DWORD PTR [eax],edx
c0023416:	90                   	nop
c0023417:	83 c4 0c             	add    esp,0xc
c002341a:	c3                   	ret    
c002341b:	90                   	nop

c002341c <ATA::flush(bool)>:
c002341c:	53                   	push   ebx
c002341d:	83 ec 08             	sub    esp,0x8
c0023420:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023425:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023429:	19 c0                	sbb    eax,eax
c002342b:	83 e0 fd             	and    eax,0xfffffffd
c002342e:	05 ea 00 00 00       	add    eax,0xea
c0023433:	50                   	push   eax
c0023434:	6a 07                	push   0x7
c0023436:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002343d:	50                   	push   eax
c002343e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023444:	e8 f3 ef ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023449:	83 c4 0c             	add    esp,0xc
c002344c:	6a 00                	push   0x0
c002344e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023455:	50                   	push   eax
c0023456:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002345c:	e8 87 fb ff ff       	call   c0022fe8 <IDE::polling(unsigned char, unsigned int)>
c0023461:	83 c4 18             	add    esp,0x18
c0023464:	5b                   	pop    ebx
c0023465:	c3                   	ret    

c0023466 <ATA::readyForCommand()>:
c0023466:	56                   	push   esi
c0023467:	53                   	push   ebx
c0023468:	31 db                	xor    ebx,ebx
c002346a:	50                   	push   eax
c002346b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002346f:	50                   	push   eax
c0023470:	6a 0c                	push   0xc
c0023472:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023479:	50                   	push   eax
c002347a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023480:	e8 77 f0 ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0023485:	83 c4 10             	add    esp,0x10
c0023488:	a8 88                	test   al,0x88
c002348a:	74 23                	je     c00234af <ATA::readyForCommand()+0x49>
c002348c:	43                   	inc    ebx
c002348d:	83 fb 63             	cmp    ebx,0x63
c0023490:	7e dd                	jle    c002346f <ATA::readyForCommand()+0x9>
c0023492:	51                   	push   ecx
c0023493:	51                   	push   ecx
c0023494:	6a 00                	push   0x0
c0023496:	68 40 42 0f 00       	push   0xf4240
c002349b:	e8 de a2 ff ff       	call   c001d77e <nanoSleep(unsigned long long)>
c00234a0:	83 c4 10             	add    esp,0x10
c00234a3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00234a9:	75 c4                	jne    c002346f <ATA::readyForCommand()+0x9>
c00234ab:	31 c0                	xor    eax,eax
c00234ad:	eb 02                	jmp    c00234b1 <ATA::readyForCommand()+0x4b>
c00234af:	b0 01                	mov    al,0x1
c00234b1:	5a                   	pop    edx
c00234b2:	5b                   	pop    ebx
c00234b3:	5e                   	pop    esi
c00234b4:	c3                   	ret    
c00234b5:	90                   	nop

c00234b6 <ATA::access(unsigned long long, int, void*, bool)>:
c00234b6:	55                   	push   ebp
c00234b7:	57                   	push   edi
c00234b8:	56                   	push   esi
c00234b9:	53                   	push   ebx
c00234ba:	83 ec 2c             	sub    esp,0x2c
c00234bd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00234c1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00234c5:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00234c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00234cd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00234d1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00234d5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00234d9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00234df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00234e3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00234e9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00234ed:	c1 e0 06             	shl    eax,0x6
c00234f0:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00234f8:	74 5d                	je     c0023557 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00234fa:	89 fa                	mov    edx,edi
c00234fc:	89 f0                	mov    eax,esi
c00234fe:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023502:	c1 ea 1c             	shr    edx,0x1c
c0023505:	89 d1                	mov    ecx,edx
c0023507:	09 c1                	or     ecx,eax
c0023509:	74 25                	je     c0023530 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002350b:	31 ed                	xor    ebp,ebp
c002350d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023514:	89 fa                	mov    edx,edi
c0023516:	89 f0                	mov    eax,esi
c0023518:	0f ad d0             	shrd   eax,edx,cl
c002351b:	d3 ea                	shr    edx,cl
c002351d:	f6 c1 20             	test   cl,0x20
c0023520:	74 02                	je     c0023524 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023522:	89 d0                	mov    eax,edx
c0023524:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023528:	45                   	inc    ebp
c0023529:	83 fd 06             	cmp    ebp,0x6
c002352c:	75 df                	jne    c002350d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002352e:	eb 76                	jmp    c00235a6 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023530:	89 f0                	mov    eax,esi
c0023532:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023537:	89 fa                	mov    edx,edi
c0023539:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023540:	0f ac d0 10          	shrd   eax,edx,0x10
c0023544:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023549:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002354d:	c1 ee 18             	shr    esi,0x18
c0023550:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023555:	eb 56                	jmp    c00235ad <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023557:	6a 00                	push   0x0
c0023559:	6a 3f                	push   0x3f
c002355b:	57                   	push   edi
c002355c:	56                   	push   esi
c002355d:	e8 3a 24 00 00       	call   c002599c <__umoddi3>
c0023562:	83 c4 10             	add    esp,0x10
c0023565:	40                   	inc    eax
c0023566:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002356a:	6a 00                	push   0x0
c002356c:	68 f0 03 00 00       	push   0x3f0
c0023571:	57                   	push   edi
c0023572:	56                   	push   esi
c0023573:	e8 24 23 00 00       	call   c002589c <__udivdi3>
c0023578:	83 c4 10             	add    esp,0x10
c002357b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023580:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023587:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002358c:	6a 00                	push   0x0
c002358e:	6a 3f                	push   0x3f
c0023590:	57                   	push   edi
c0023591:	56                   	push   esi
c0023592:	e8 05 23 00 00       	call   c002589c <__udivdi3>
c0023597:	83 c4 10             	add    esp,0x10
c002359a:	89 c6                	mov    esi,eax
c002359c:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00235a1:	83 e6 0f             	and    esi,0xf
c00235a4:	eb 07                	jmp    c00235ad <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00235a6:	31 f6                	xor    esi,esi
c00235a8:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00235ad:	bf 01 00 00 00       	mov    edi,0x1
c00235b2:	50                   	push   eax
c00235b3:	6a 00                	push   0x0
c00235b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00235bc:	50                   	push   eax
c00235bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00235c1:	e8 82 f0 ff ff       	call   c0022648 <IDE::enableIRQs(unsigned char, bool)>
c00235c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00235c9:	e8 98 fe ff ff       	call   c0023466 <ATA::readyForCommand()>
c00235ce:	83 c4 10             	add    esp,0x10
c00235d1:	84 c0                	test   al,al
c00235d3:	0f 84 50 02 00 00    	je     c0023829 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00235d9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00235df:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00235e5:	c1 e0 04             	shl    eax,0x4
c00235e8:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00235ef:	09 c6                	or     esi,eax
c00235f1:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00235f6:	75 05                	jne    c00235fd <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00235f8:	83 ce a0             	or     esi,0xffffffa0
c00235fb:	eb 03                	jmp    c0023600 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00235fd:	83 ce e0             	or     esi,0xffffffe0
c0023600:	89 f0                	mov    eax,esi
c0023602:	0f b6 f0             	movzx  esi,al
c0023605:	56                   	push   esi
c0023606:	6a 06                	push   0x6
c0023608:	51                   	push   ecx
c0023609:	52                   	push   edx
c002360a:	e8 2d ee ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002360f:	83 c4 10             	add    esp,0x10
c0023612:	6a 00                	push   0x0
c0023614:	6a 01                	push   0x1
c0023616:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002361d:	50                   	push   eax
c002361e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023624:	e8 13 ee ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023629:	83 c4 10             	add    esp,0x10
c002362c:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023631:	75 6e                	jne    c00236a1 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023633:	6a 00                	push   0x0
c0023635:	6a 08                	push   0x8
c0023637:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002363e:	50                   	push   eax
c002363f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023645:	e8 f2 ed ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002364a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002364f:	50                   	push   eax
c0023650:	6a 09                	push   0x9
c0023652:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023659:	50                   	push   eax
c002365a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023660:	e8 d7 ed ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023665:	83 c4 20             	add    esp,0x20
c0023668:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002366d:	50                   	push   eax
c002366e:	6a 0a                	push   0xa
c0023670:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023677:	50                   	push   eax
c0023678:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002367e:	e8 b9 ed ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023683:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023688:	50                   	push   eax
c0023689:	6a 0b                	push   0xb
c002368b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023692:	50                   	push   eax
c0023693:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023699:	e8 9e ed ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002369e:	83 c4 20             	add    esp,0x20
c00236a1:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00236a6:	50                   	push   eax
c00236a7:	6a 02                	push   0x2
c00236a9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00236b0:	50                   	push   eax
c00236b1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00236b7:	e8 80 ed ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236bc:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00236c1:	50                   	push   eax
c00236c2:	6a 03                	push   0x3
c00236c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00236cb:	50                   	push   eax
c00236cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00236d2:	e8 65 ed ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236d7:	83 c4 20             	add    esp,0x20
c00236da:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00236df:	50                   	push   eax
c00236e0:	6a 04                	push   0x4
c00236e2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00236e9:	50                   	push   eax
c00236ea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00236f0:	e8 47 ed ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00236fa:	50                   	push   eax
c00236fb:	6a 05                	push   0x5
c00236fd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023704:	50                   	push   eax
c0023705:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002370b:	e8 2c ed ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023710:	83 c4 20             	add    esp,0x20
c0023713:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023718:	0f 94 c0             	sete   al
c002371b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023720:	74 09                	je     c002372b <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023722:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023729:	eb 07                	jmp    c0023732 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c002372b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023732:	0f b6 c0             	movzx  eax,al
c0023735:	50                   	push   eax
c0023736:	6a 07                	push   0x7
c0023738:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002373f:	50                   	push   eax
c0023740:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023746:	e8 f1 ec ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002374b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002374f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0023753:	83 c4 10             	add    esp,0x10
c0023756:	85 f6                	test   esi,esi
c0023758:	0f 84 ac 00 00 00    	je     c002380a <ATA::access(unsigned long long, int, void*, bool)+0x354>
c002375e:	50                   	push   eax
c002375f:	6a 01                	push   0x1
c0023761:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023768:	50                   	push   eax
c0023769:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002376f:	e8 74 f8 ff ff       	call   c0022fe8 <IDE::polling(unsigned char, unsigned int)>
c0023774:	83 c4 10             	add    esp,0x10
c0023777:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002377d:	84 c0                	test   al,al
c002377f:	74 20                	je     c00237a1 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c0023781:	0f b6 f8             	movzx  edi,al
c0023784:	0f b6 d2             	movzx  edx,dl
c0023787:	57                   	push   edi
c0023788:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002378f:	50                   	push   eax
c0023790:	52                   	push   edx
c0023791:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023797:	e8 b6 f6 ff ff       	call   c0022e52 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002379c:	e9 85 00 00 00       	jmp    c0023826 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c00237a1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00237a6:	74 41                	je     c00237e9 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c00237a8:	31 c9                	xor    ecx,ecx
c00237aa:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c00237ae:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00237b2:	50                   	push   eax
c00237b3:	50                   	push   eax
c00237b4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00237bb:	50                   	push   eax
c00237bc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00237c2:	e8 63 ec ff ff       	call   c002242a <IDE::getBase(unsigned char)>
c00237c7:	89 c2                	mov    edx,eax
c00237c9:	89 e8                	mov    eax,ebp
c00237cb:	66 ef                	out    dx,ax
c00237cd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00237d1:	83 c4 10             	add    esp,0x10
c00237d4:	41                   	inc    ecx
c00237d5:	81 f9 00 01 00 00    	cmp    ecx,0x100
c00237db:	75 cd                	jne    c00237aa <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c00237dd:	4e                   	dec    esi
c00237de:	81 c7 00 02 00 00    	add    edi,0x200
c00237e4:	e9 6d ff ff ff       	jmp    c0023756 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c00237e9:	0f b6 d2             	movzx  edx,dl
c00237ec:	51                   	push   ecx
c00237ed:	51                   	push   ecx
c00237ee:	52                   	push   edx
c00237ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00237f5:	e8 30 ec ff ff       	call   c002242a <IDE::getBase(unsigned char)>
c00237fa:	b9 00 01 00 00       	mov    ecx,0x100
c00237ff:	89 c2                	mov    edx,eax
c0023801:	fc                   	cld    
c0023802:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023805:	83 c4 10             	add    esp,0x10
c0023808:	eb d3                	jmp    c00237dd <ATA::access(unsigned long long, int, void*, bool)+0x327>
c002380a:	31 ff                	xor    edi,edi
c002380c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023811:	74 16                	je     c0023829 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0023813:	50                   	push   eax
c0023814:	50                   	push   eax
c0023815:	31 c0                	xor    eax,eax
c0023817:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002381c:	0f 94 c0             	sete   al
c002381f:	50                   	push   eax
c0023820:	53                   	push   ebx
c0023821:	e8 f6 fb ff ff       	call   c002341c <ATA::flush(bool)>
c0023826:	83 c4 10             	add    esp,0x10
c0023829:	83 c4 2c             	add    esp,0x2c
c002382c:	89 f8                	mov    eax,edi
c002382e:	5b                   	pop    ebx
c002382f:	5e                   	pop    esi
c0023830:	5f                   	pop    edi
c0023831:	5d                   	pop    ebp
c0023832:	c3                   	ret    
c0023833:	90                   	nop

c0023834 <ATA::read(unsigned long long, int, void*)>:
c0023834:	57                   	push   edi
c0023835:	b8 04 00 00 00       	mov    eax,0x4
c002383a:	56                   	push   esi
c002383b:	53                   	push   ebx
c002383c:	83 ec 10             	sub    esp,0x10
c002383f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023843:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023847:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002384a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002384e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023852:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023858:	77 3b                	ja     c0023895 <ATA::read(unsigned long long, int, void*)+0x61>
c002385a:	b8 06 00 00 00       	mov    eax,0x6
c002385f:	85 d2                	test   edx,edx
c0023861:	74 32                	je     c0023895 <ATA::read(unsigned long long, int, void*)+0x61>
c0023863:	50                   	push   eax
c0023864:	50                   	push   eax
c0023865:	6a 00                	push   0x0
c0023867:	52                   	push   edx
c0023868:	53                   	push   ebx
c0023869:	57                   	push   edi
c002386a:	56                   	push   esi
c002386b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002386f:	e8 42 fc ff ff       	call   c00234b6 <ATA::access(unsigned long long, int, void*, bool)>
c0023874:	83 c4 20             	add    esp,0x20
c0023877:	85 c0                	test   eax,eax
c0023879:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002387d:	75 11                	jne    c0023890 <ATA::read(unsigned long long, int, void*)+0x5c>
c002387f:	01 1d 28 f4 02 c0    	add    DWORD PTR ds:0xc002f428,ebx
c0023885:	e8 04 cf fe ff       	call   c001078e <VgaText::updateDiskUsage()>
c002388a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002388e:	eb 05                	jmp    c0023895 <ATA::read(unsigned long long, int, void*)+0x61>
c0023890:	b8 01 00 00 00       	mov    eax,0x1
c0023895:	83 c4 10             	add    esp,0x10
c0023898:	5b                   	pop    ebx
c0023899:	5e                   	pop    esi
c002389a:	5f                   	pop    edi
c002389b:	c3                   	ret    

c002389c <ATA::write(unsigned long long, int, void*)>:
c002389c:	57                   	push   edi
c002389d:	b8 04 00 00 00       	mov    eax,0x4
c00238a2:	56                   	push   esi
c00238a3:	53                   	push   ebx
c00238a4:	83 ec 10             	sub    esp,0x10
c00238a7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00238ab:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00238af:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00238b2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00238b6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00238ba:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00238c0:	77 3b                	ja     c00238fd <ATA::write(unsigned long long, int, void*)+0x61>
c00238c2:	b8 06 00 00 00       	mov    eax,0x6
c00238c7:	85 d2                	test   edx,edx
c00238c9:	74 32                	je     c00238fd <ATA::write(unsigned long long, int, void*)+0x61>
c00238cb:	50                   	push   eax
c00238cc:	50                   	push   eax
c00238cd:	6a 01                	push   0x1
c00238cf:	52                   	push   edx
c00238d0:	53                   	push   ebx
c00238d1:	57                   	push   edi
c00238d2:	56                   	push   esi
c00238d3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00238d7:	e8 da fb ff ff       	call   c00234b6 <ATA::access(unsigned long long, int, void*, bool)>
c00238dc:	83 c4 20             	add    esp,0x20
c00238df:	85 c0                	test   eax,eax
c00238e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00238e5:	75 11                	jne    c00238f8 <ATA::write(unsigned long long, int, void*)+0x5c>
c00238e7:	01 1d 24 f4 02 c0    	add    DWORD PTR ds:0xc002f424,ebx
c00238ed:	e8 9c ce fe ff       	call   c001078e <VgaText::updateDiskUsage()>
c00238f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00238f6:	eb 05                	jmp    c00238fd <ATA::write(unsigned long long, int, void*)+0x61>
c00238f8:	b8 01 00 00 00       	mov    eax,0x1
c00238fd:	83 c4 10             	add    esp,0x10
c0023900:	5b                   	pop    ebx
c0023901:	5e                   	pop    esi
c0023902:	5f                   	pop    edi
c0023903:	c3                   	ret    

c0023904 <ATA::detectCHS()>:
c0023904:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023908:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002390e:	c1 e0 06             	shl    eax,0x6
c0023911:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0023917:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0023921:	c7 44 24 04 f0 ba 02 c0 	mov    DWORD PTR [esp+0x4],0xc002baf0
c0023929:	e9 51 63 ff ff       	jmp    c0019c7f <Krnl::panic(char const*)>

c002392e <ATA::open(int, int, void*)>:
c002392e:	53                   	push   ebx
c002392f:	83 ec 08             	sub    esp,0x8
c0023932:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023936:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002393a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002393e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023944:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002394a:	c1 e0 06             	shl    eax,0x6
c002394d:	01 d0                	add    eax,edx
c002394f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0023956:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002395c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0023963:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002396d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0023973:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002397a:	75 0c                	jne    c0023988 <ATA::open(int, int, void*)+0x5a>
c002397c:	83 ec 0c             	sub    esp,0xc
c002397f:	53                   	push   ebx
c0023980:	e8 7f ff ff ff       	call   c0023904 <ATA::detectCHS()>
c0023985:	83 c4 10             	add    esp,0x10
c0023988:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002398e:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023994:	c1 e0 06             	shl    eax,0x6
c0023997:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002399e:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00239a8:	d1 e8                	shr    eax,1
c00239aa:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00239b0:	6a 04                	push   0x4
c00239b2:	6a 0c                	push   0xc
c00239b4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00239bb:	50                   	push   eax
c00239bc:	52                   	push   edx
c00239bd:	e8 7a ea ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239c2:	90                   	nop
c00239c3:	90                   	nop
c00239c4:	6a 00                	push   0x0
c00239c6:	6a 0c                	push   0xc
c00239c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00239cf:	50                   	push   eax
c00239d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00239d6:	e8 61 ea ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239db:	83 c4 14             	add    esp,0x14
c00239de:	53                   	push   ebx
c00239df:	e8 e4 07 ff ff       	call   c00141c8 <PhysicalDisk::startCache()>
c00239e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00239e7:	e8 06 28 ff ff       	call   c00161f2 <createPartitionsForDisk(PhysicalDisk*)>
c00239ec:	31 c0                	xor    eax,eax
c00239ee:	83 c4 18             	add    esp,0x18
c00239f1:	5b                   	pop    ebx
c00239f2:	c3                   	ret    
c00239f3:	90                   	nop

c00239f4 <ATAPI::write(unsigned long long, int, void*)>:
c00239f4:	b8 03 00 00 00       	mov    eax,0x3
c00239f9:	c3                   	ret    

c00239fa <ATAPI::close(int, int, void*)>:
c00239fa:	83 ec 0c             	sub    esp,0xc
c00239fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a01:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023a07:	85 c0                	test   eax,eax
c0023a09:	74 0c                	je     c0023a17 <ATAPI::close(int, int, void*)+0x1d>
c0023a0b:	83 ec 0c             	sub    esp,0xc
c0023a0e:	8b 10                	mov    edx,DWORD PTR [eax]
c0023a10:	50                   	push   eax
c0023a11:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023a14:	83 c4 10             	add    esp,0x10
c0023a17:	31 c0                	xor    eax,eax
c0023a19:	83 c4 0c             	add    esp,0xc
c0023a1c:	c3                   	ret    
c0023a1d:	90                   	nop

c0023a1e <ATAPI::ATAPI()>:
c0023a1e:	83 ec 0c             	sub    esp,0xc
c0023a21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a25:	83 ec 04             	sub    esp,0x4
c0023a28:	68 00 08 00 00       	push   0x800
c0023a2d:	68 38 bb 02 c0       	push   0xc002bb38
c0023a32:	50                   	push   eax
c0023a33:	e8 28 07 ff ff       	call   c0014160 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023a38:	83 c4 10             	add    esp,0x10
c0023a3b:	ba 78 bb 02 c0       	mov    edx,0xc002bb78
c0023a40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a44:	89 10                	mov    DWORD PTR [eax],edx
c0023a46:	90                   	nop
c0023a47:	83 c4 0c             	add    esp,0xc
c0023a4a:	c3                   	ret    
c0023a4b:	90                   	nop

c0023a4c <ATAPI::readyForCommand()>:
c0023a4c:	56                   	push   esi
c0023a4d:	53                   	push   ebx
c0023a4e:	31 db                	xor    ebx,ebx
c0023a50:	50                   	push   eax
c0023a51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023a55:	50                   	push   eax
c0023a56:	6a 0c                	push   0xc
c0023a58:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023a5f:	50                   	push   eax
c0023a60:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023a66:	e8 91 ea ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0023a6b:	83 c4 10             	add    esp,0x10
c0023a6e:	a8 88                	test   al,0x88
c0023a70:	74 23                	je     c0023a95 <ATAPI::readyForCommand()+0x49>
c0023a72:	43                   	inc    ebx
c0023a73:	83 fb 63             	cmp    ebx,0x63
c0023a76:	7e dd                	jle    c0023a55 <ATAPI::readyForCommand()+0x9>
c0023a78:	51                   	push   ecx
c0023a79:	51                   	push   ecx
c0023a7a:	6a 00                	push   0x0
c0023a7c:	68 40 42 0f 00       	push   0xf4240
c0023a81:	e8 f8 9c ff ff       	call   c001d77e <nanoSleep(unsigned long long)>
c0023a86:	83 c4 10             	add    esp,0x10
c0023a89:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023a8f:	75 c4                	jne    c0023a55 <ATAPI::readyForCommand()+0x9>
c0023a91:	31 c0                	xor    eax,eax
c0023a93:	eb 02                	jmp    c0023a97 <ATAPI::readyForCommand()+0x4b>
c0023a95:	b0 01                	mov    al,0x1
c0023a97:	5a                   	pop    edx
c0023a98:	5b                   	pop    ebx
c0023a99:	5e                   	pop    esi
c0023a9a:	c3                   	ret    
c0023a9b:	90                   	nop

c0023a9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0023a9c:	55                   	push   ebp
c0023a9d:	57                   	push   edi
c0023a9e:	56                   	push   esi
c0023a9f:	53                   	push   ebx
c0023aa0:	83 ec 20             	sub    esp,0x20
c0023aa3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0023aa7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0023aab:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0023aaf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023ab3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0023ab7:	6a 01                	push   0x1
c0023ab9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023ac0:	50                   	push   eax
c0023ac1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023ac7:	e8 7c eb ff ff       	call   c0022648 <IDE::enableIRQs(unsigned char, bool)>
c0023acc:	5e                   	pop    esi
c0023acd:	58                   	pop    eax
c0023ace:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023ad5:	50                   	push   eax
c0023ad6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023adc:	e8 35 e9 ff ff       	call   c0022416 <IDE::prepareInterrupt(unsigned char)>
c0023ae1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023ae4:	e8 63 ff ff ff       	call   c0023a4c <ATAPI::readyForCommand()>
c0023ae9:	83 c4 10             	add    esp,0x10
c0023aec:	84 c0                	test   al,al
c0023aee:	75 0a                	jne    c0023afa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0023af0:	bb 01 00 00 00       	mov    ebx,0x1
c0023af5:	e9 57 02 00 00       	jmp    c0023d51 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023afa:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0023b00:	c1 e0 04             	shl    eax,0x4
c0023b03:	0f b6 c0             	movzx  eax,al
c0023b06:	50                   	push   eax
c0023b07:	6a 06                	push   0x6
c0023b09:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023b10:	50                   	push   eax
c0023b11:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b17:	e8 20 e9 ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b1c:	6a 00                	push   0x0
c0023b1e:	6a 01                	push   0x1
c0023b20:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023b27:	50                   	push   eax
c0023b28:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b2e:	e8 09 e9 ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b33:	83 c4 20             	add    esp,0x20
c0023b36:	0f b6 c3             	movzx  eax,bl
c0023b39:	0f b6 df             	movzx  ebx,bh
c0023b3c:	50                   	push   eax
c0023b3d:	6a 04                	push   0x4
c0023b3f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023b46:	50                   	push   eax
c0023b47:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b4d:	e8 ea e8 ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b52:	53                   	push   ebx
c0023b53:	6a 05                	push   0x5
c0023b55:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023b5c:	50                   	push   eax
c0023b5d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b63:	e8 d4 e8 ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b68:	83 c4 20             	add    esp,0x20
c0023b6b:	68 a0 00 00 00       	push   0xa0
c0023b70:	6a 07                	push   0x7
c0023b72:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023b79:	50                   	push   eax
c0023b7a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b80:	e8 b7 e8 ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b85:	83 c4 0c             	add    esp,0xc
c0023b88:	6a 01                	push   0x1
c0023b8a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023b91:	50                   	push   eax
c0023b92:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b98:	e8 4b f4 ff ff       	call   c0022fe8 <IDE::polling(unsigned char, unsigned int)>
c0023b9d:	83 c4 10             	add    esp,0x10
c0023ba0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0023ba6:	84 c0                	test   al,al
c0023ba8:	74 23                	je     c0023bcd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0023baa:	0f b6 d8             	movzx  ebx,al
c0023bad:	0f b6 d2             	movzx  edx,dl
c0023bb0:	53                   	push   ebx
c0023bb1:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0023bb8:	50                   	push   eax
c0023bb9:	52                   	push   edx
c0023bba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023bc0:	e8 8d f2 ff ff       	call   c0022e52 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023bc5:	83 c4 10             	add    esp,0x10
c0023bc8:	e9 84 01 00 00       	jmp    c0023d51 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023bcd:	0f b6 d2             	movzx  edx,dl
c0023bd0:	53                   	push   ebx
c0023bd1:	53                   	push   ebx
c0023bd2:	52                   	push   edx
c0023bd3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023bd9:	e8 4c e8 ff ff       	call   c002242a <IDE::getBase(unsigned char)>
c0023bde:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023be2:	b9 06 00 00 00       	mov    ecx,0x6
c0023be7:	89 c2                	mov    edx,eax
c0023be9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0023bec:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0023bf0:	83 c4 10             	add    esp,0x10
c0023bf3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023bf9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023c00:	85 db                	test   ebx,ebx
c0023c02:	0f 84 ec 00 00 00    	je     c0023cf4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0023c08:	51                   	push   ecx
c0023c09:	51                   	push   ecx
c0023c0a:	52                   	push   edx
c0023c0b:	50                   	push   eax
c0023c0c:	e8 99 e9 ff ff       	call   c00225aa <IDE::waitInterrupt(unsigned char)>
c0023c11:	83 c4 10             	add    esp,0x10
c0023c14:	84 c0                	test   al,al
c0023c16:	0f 84 d4 fe ff ff    	je     c0023af0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023c1c:	56                   	push   esi
c0023c1d:	56                   	push   esi
c0023c1e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023c25:	50                   	push   eax
c0023c26:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023c2c:	e8 e5 e7 ff ff       	call   c0022416 <IDE::prepareInterrupt(unsigned char)>
c0023c31:	83 c4 0c             	add    esp,0xc
c0023c34:	6a 04                	push   0x4
c0023c36:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023c3d:	50                   	push   eax
c0023c3e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023c44:	e8 b3 e8 ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0023c49:	83 c4 0c             	add    esp,0xc
c0023c4c:	89 c6                	mov    esi,eax
c0023c4e:	6a 05                	push   0x5
c0023c50:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023c57:	50                   	push   eax
c0023c58:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023c5e:	e8 99 e8 ff ff       	call   c00224fc <IDE::read(unsigned char, unsigned char)>
c0023c63:	89 f1                	mov    ecx,esi
c0023c65:	0f b6 c0             	movzx  eax,al
c0023c68:	0f b6 f1             	movzx  esi,cl
c0023c6b:	c1 e0 08             	shl    eax,0x8
c0023c6e:	09 c6                	or     esi,eax
c0023c70:	d1 fe                	sar    esi,1
c0023c72:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0023c76:	83 c4 10             	add    esp,0x10
c0023c79:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0023c7e:	74 41                	je     c0023cc1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0023c80:	31 c9                	xor    ecx,ecx
c0023c82:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023c88:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023c8f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0023c93:	75 0a                	jne    c0023c9f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0023c95:	01 c9                	add    ecx,ecx
c0023c97:	01 cd                	add    ebp,ecx
c0023c99:	4b                   	dec    ebx
c0023c9a:	e9 54 ff ff ff       	jmp    c0023bf3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0023c9f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0023ca4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023ca8:	51                   	push   ecx
c0023ca9:	51                   	push   ecx
c0023caa:	52                   	push   edx
c0023cab:	50                   	push   eax
c0023cac:	e8 79 e7 ff ff       	call   c002242a <IDE::getBase(unsigned char)>
c0023cb1:	89 c2                	mov    edx,eax
c0023cb3:	89 f0                	mov    eax,esi
c0023cb5:	66 ef                	out    dx,ax
c0023cb7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023cbb:	83 c4 10             	add    esp,0x10
c0023cbe:	41                   	inc    ecx
c0023cbf:	eb c1                	jmp    c0023c82 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0023cc1:	31 f6                	xor    esi,esi
c0023cc3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023cc9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023cd0:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0023cd4:	75 06                	jne    c0023cdc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0023cd6:	01 f6                	add    esi,esi
c0023cd8:	01 f5                	add    ebp,esi
c0023cda:	eb bd                	jmp    c0023c99 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0023cdc:	51                   	push   ecx
c0023cdd:	51                   	push   ecx
c0023cde:	52                   	push   edx
c0023cdf:	50                   	push   eax
c0023ce0:	e8 45 e7 ff ff       	call   c002242a <IDE::getBase(unsigned char)>
c0023ce5:	89 c2                	mov    edx,eax
c0023ce7:	66 ed                	in     ax,dx
c0023ce9:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0023cee:	83 c4 10             	add    esp,0x10
c0023cf1:	46                   	inc    esi
c0023cf2:	eb cf                	jmp    c0023cc3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0023cf4:	51                   	push   ecx
c0023cf5:	51                   	push   ecx
c0023cf6:	52                   	push   edx
c0023cf7:	50                   	push   eax
c0023cf8:	e8 ad e8 ff ff       	call   c00225aa <IDE::waitInterrupt(unsigned char)>
c0023cfd:	83 c4 10             	add    esp,0x10
c0023d00:	84 c0                	test   al,al
c0023d02:	0f 84 e8 fd ff ff    	je     c0023af0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023d08:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023d0d:	52                   	push   edx
c0023d0e:	52                   	push   edx
c0023d0f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023d16:	50                   	push   eax
c0023d17:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023d1d:	e8 f4 e6 ff ff       	call   c0022416 <IDE::prepareInterrupt(unsigned char)>
c0023d22:	83 c4 10             	add    esp,0x10
c0023d25:	50                   	push   eax
c0023d26:	50                   	push   eax
c0023d27:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023d2e:	50                   	push   eax
c0023d2f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023d35:	e8 f0 e6 ff ff       	call   c002242a <IDE::getBase(unsigned char)>
c0023d3a:	8d 50 07             	lea    edx,[eax+0x7]
c0023d3d:	ec                   	in     al,dx
c0023d3e:	83 c4 10             	add    esp,0x10
c0023d41:	a8 88                	test   al,0x88
c0023d43:	74 0a                	je     c0023d4f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0023d45:	4b                   	dec    ebx
c0023d46:	75 dd                	jne    c0023d25 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0023d48:	bb 02 00 00 00       	mov    ebx,0x2
c0023d4d:	eb 02                	jmp    c0023d51 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023d4f:	31 db                	xor    ebx,ebx
c0023d51:	83 c4 1c             	add    esp,0x1c
c0023d54:	89 d8                	mov    eax,ebx
c0023d56:	5b                   	pop    ebx
c0023d57:	5e                   	pop    esi
c0023d58:	5f                   	pop    edi
c0023d59:	5d                   	pop    ebp
c0023d5a:	c3                   	ret    
c0023d5b:	90                   	nop

c0023d5c <ATAPI::diskRemoved()>:
c0023d5c:	83 ec 18             	sub    esp,0x18
c0023d5f:	68 43 bb 02 c0       	push   0xc002bb43
c0023d64:	e8 c0 eb fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0023d69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023d6d:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0023d74:	83 c4 1c             	add    esp,0x1c
c0023d77:	c3                   	ret    

c0023d78 <ATAPI::eject()>:
c0023d78:	57                   	push   edi
c0023d79:	b9 03 00 00 00       	mov    ecx,0x3
c0023d7e:	53                   	push   ebx
c0023d7f:	83 ec 14             	sub    esp,0x14
c0023d82:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023d86:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023d8a:	fc                   	cld    
c0023d8b:	31 c0                	xor    eax,eax
c0023d8d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023d8f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0023d94:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0023d99:	50                   	push   eax
c0023d9a:	50                   	push   eax
c0023d9b:	6a 00                	push   0x0
c0023d9d:	6a 00                	push   0x0
c0023d9f:	6a 00                	push   0x0
c0023da1:	6a 02                	push   0x2
c0023da3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023da7:	50                   	push   eax
c0023da8:	53                   	push   ebx
c0023da9:	e8 ee fc ff ff       	call   c0023a9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023dae:	83 c4 14             	add    esp,0x14
c0023db1:	53                   	push   ebx
c0023db2:	e8 a5 ff ff ff       	call   c0023d5c <ATAPI::diskRemoved()>
c0023db7:	83 c4 24             	add    esp,0x24
c0023dba:	5b                   	pop    ebx
c0023dbb:	5f                   	pop    edi
c0023dbc:	c3                   	ret    
c0023dbd:	90                   	nop

c0023dbe <ATAPI::diskInserted()>:
c0023dbe:	53                   	push   ebx
c0023dbf:	83 ec 14             	sub    esp,0x14
c0023dc2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023dc6:	68 59 bb 02 c0       	push   0xc002bb59
c0023dcb:	e8 59 eb fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0023dd0:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0023dd7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023dda:	e8 e9 03 ff ff       	call   c00141c8 <PhysicalDisk::startCache()>
c0023ddf:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0023de3:	83 c4 18             	add    esp,0x18
c0023de6:	5b                   	pop    ebx
c0023de7:	e9 06 24 ff ff       	jmp    c00161f2 <createPartitionsForDisk(PhysicalDisk*)>

c0023dec <ATAPI::detectMedia()>:
c0023dec:	56                   	push   esi
c0023ded:	53                   	push   ebx
c0023dee:	83 ec 28             	sub    esp,0x28
c0023df1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023df5:	6a 0c                	push   0xc
c0023df7:	6a 00                	push   0x0
c0023df9:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0023dfd:	56                   	push   esi
c0023dfe:	e8 c1 c8 fd ff       	call   c00006c4 <memset>
c0023e03:	58                   	pop    eax
c0023e04:	5a                   	pop    edx
c0023e05:	6a 00                	push   0x0
c0023e07:	6a 00                	push   0x0
c0023e09:	6a 00                	push   0x0
c0023e0b:	6a 00                	push   0x0
c0023e0d:	56                   	push   esi
c0023e0e:	53                   	push   ebx
c0023e0f:	e8 88 fc ff ff       	call   c0023a9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023e14:	83 c4 1c             	add    esp,0x1c
c0023e17:	6a 0c                	push   0xc
c0023e19:	6a 00                	push   0x0
c0023e1b:	56                   	push   esi
c0023e1c:	e8 a3 c8 fd ff       	call   c00006c4 <memset>
c0023e21:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0023e26:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0023e2b:	59                   	pop    ecx
c0023e2c:	58                   	pop    eax
c0023e2d:	6a 01                	push   0x1
c0023e2f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0023e33:	50                   	push   eax
c0023e34:	6a 00                	push   0x0
c0023e36:	6a 12                	push   0x12
c0023e38:	56                   	push   esi
c0023e39:	53                   	push   ebx
c0023e3a:	e8 5d fc ff ff       	call   c0023a9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023e3f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0023e43:	83 c4 20             	add    esp,0x20
c0023e46:	83 e0 7f             	and    eax,0x7f
c0023e49:	3c 70                	cmp    al,0x70
c0023e4b:	74 15                	je     c0023e62 <ATAPI::detectMedia()+0x76>
c0023e4d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023e54:	75 0c                	jne    c0023e62 <ATAPI::detectMedia()+0x76>
c0023e56:	83 ec 0c             	sub    esp,0xc
c0023e59:	53                   	push   ebx
c0023e5a:	e8 5f ff ff ff       	call   c0023dbe <ATAPI::diskInserted()>
c0023e5f:	83 c4 10             	add    esp,0x10
c0023e62:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023e66:	83 e0 0f             	and    eax,0xf
c0023e69:	3c 02                	cmp    al,0x2
c0023e6b:	75 1b                	jne    c0023e88 <ATAPI::detectMedia()+0x9c>
c0023e6d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0023e72:	75 2d                	jne    c0023ea1 <ATAPI::detectMedia()+0xb5>
c0023e74:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023e7b:	74 24                	je     c0023ea1 <ATAPI::detectMedia()+0xb5>
c0023e7d:	83 ec 0c             	sub    esp,0xc
c0023e80:	53                   	push   ebx
c0023e81:	e8 d6 fe ff ff       	call   c0023d5c <ATAPI::diskRemoved()>
c0023e86:	eb 16                	jmp    c0023e9e <ATAPI::detectMedia()+0xb2>
c0023e88:	84 c0                	test   al,al
c0023e8a:	75 15                	jne    c0023ea1 <ATAPI::detectMedia()+0xb5>
c0023e8c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023e93:	75 0c                	jne    c0023ea1 <ATAPI::detectMedia()+0xb5>
c0023e95:	83 ec 0c             	sub    esp,0xc
c0023e98:	53                   	push   ebx
c0023e99:	e8 20 ff ff ff       	call   c0023dbe <ATAPI::diskInserted()>
c0023e9e:	83 c4 10             	add    esp,0x10
c0023ea1:	83 c4 24             	add    esp,0x24
c0023ea4:	5b                   	pop    ebx
c0023ea5:	5e                   	pop    esi
c0023ea6:	c3                   	ret    
c0023ea7:	90                   	nop

c0023ea8 <ATAPI::open(int, int, void*)>:
c0023ea8:	53                   	push   ebx
c0023ea9:	83 ec 08             	sub    esp,0x8
c0023eac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023eb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023eb4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023eb8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023ebe:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023ec4:	c1 e0 06             	shl    eax,0x6
c0023ec7:	01 d0                	add    eax,edx
c0023ec9:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0023ed0:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0023ed6:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0023edd:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0023ee7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0023eed:	6a 04                	push   0x4
c0023eef:	6a 0c                	push   0xc
c0023ef1:	51                   	push   ecx
c0023ef2:	52                   	push   edx
c0023ef3:	e8 44 e5 ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ef8:	90                   	nop
c0023ef9:	90                   	nop
c0023efa:	6a 00                	push   0x0
c0023efc:	6a 0c                	push   0xc
c0023efe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f05:	50                   	push   eax
c0023f06:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f0c:	e8 2b e5 ff ff       	call   c002243c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f11:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0023f18:	83 c4 14             	add    esp,0x14
c0023f1b:	53                   	push   ebx
c0023f1c:	e8 cb fe ff ff       	call   c0023dec <ATAPI::detectMedia()>
c0023f21:	31 c0                	xor    eax,eax
c0023f23:	83 c4 18             	add    esp,0x18
c0023f26:	5b                   	pop    ebx
c0023f27:	c3                   	ret    

c0023f28 <ATAPI::read(unsigned long long, int, void*)>:
c0023f28:	55                   	push   ebp
c0023f29:	57                   	push   edi
c0023f2a:	56                   	push   esi
c0023f2b:	53                   	push   ebx
c0023f2c:	83 ec 1c             	sub    esp,0x1c
c0023f2f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023f33:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023f37:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0023f3b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023f42:	74 41                	je     c0023f85 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0023f44:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023f48:	b9 03 00 00 00       	mov    ecx,0x3
c0023f4d:	fc                   	cld    
c0023f4e:	31 c0                	xor    eax,eax
c0023f50:	86 fb                	xchg   bl,bh
c0023f52:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023f54:	c1 c3 10             	rol    ebx,0x10
c0023f57:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0023f5c:	89 e8                	mov    eax,ebp
c0023f5e:	86 fb                	xchg   bl,bh
c0023f60:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0023f64:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0023f68:	50                   	push   eax
c0023f69:	50                   	push   eax
c0023f6a:	55                   	push   ebp
c0023f6b:	c1 e5 0b             	shl    ebp,0xb
c0023f6e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023f72:	6a 00                	push   0x0
c0023f74:	55                   	push   ebp
c0023f75:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023f79:	50                   	push   eax
c0023f7a:	56                   	push   esi
c0023f7b:	e8 1c fb ff ff       	call   c0023a9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023f80:	83 c4 20             	add    esp,0x20
c0023f83:	eb 1a                	jmp    c0023f9f <ATAPI::read(unsigned long long, int, void*)+0x77>
c0023f85:	83 ec 0c             	sub    esp,0xc
c0023f88:	56                   	push   esi
c0023f89:	e8 5e fe ff ff       	call   c0023dec <ATAPI::detectMedia()>
c0023f8e:	83 c4 10             	add    esp,0x10
c0023f91:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023f98:	75 aa                	jne    c0023f44 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0023f9a:	b8 02 00 00 00       	mov    eax,0x2
c0023f9f:	83 c4 1c             	add    esp,0x1c
c0023fa2:	5b                   	pop    ebx
c0023fa3:	5e                   	pop    esi
c0023fa4:	5f                   	pop    edi
c0023fa5:	5d                   	pop    ebp
c0023fa6:	c3                   	ret    
c0023fa7:	90                   	nop

c0023fa8 <SATA::close(int, int, void*)>:
c0023fa8:	83 ec 0c             	sub    esp,0xc
c0023fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023faf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023fb5:	85 c0                	test   eax,eax
c0023fb7:	74 0c                	je     c0023fc5 <SATA::close(int, int, void*)+0x1d>
c0023fb9:	83 ec 0c             	sub    esp,0xc
c0023fbc:	8b 10                	mov    edx,DWORD PTR [eax]
c0023fbe:	50                   	push   eax
c0023fbf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023fc2:	83 c4 10             	add    esp,0x10
c0023fc5:	31 c0                	xor    eax,eax
c0023fc7:	83 c4 0c             	add    esp,0xc
c0023fca:	c3                   	ret    
c0023fcb:	90                   	nop

c0023fcc <SATA::powerSaving(PowerSavingLevel)>:
c0023fcc:	c3                   	ret    
c0023fcd:	90                   	nop

c0023fce <SATA::open(int, int, void*)>:
c0023fce:	53                   	push   ebx
c0023fcf:	83 ec 14             	sub    esp,0x14
c0023fd2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023fd6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023fda:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023fe4:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0023fea:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
c0023ff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023ff8:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024002:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024008:	68 a4 bb 02 c0       	push   0xc002bba4
c002400d:	e8 17 e9 fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0024012:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024015:	e8 ae 01 ff ff       	call   c00141c8 <PhysicalDisk::startCache()>
c002401a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002401d:	e8 d0 21 ff ff       	call   c00161f2 <createPartitionsForDisk(PhysicalDisk*)>
c0024022:	31 c0                	xor    eax,eax
c0024024:	83 c4 18             	add    esp,0x18
c0024027:	5b                   	pop    ebx
c0024028:	c3                   	ret    
c0024029:	90                   	nop

c002402a <SATA::SATA()>:
c002402a:	83 ec 0c             	sub    esp,0xc
c002402d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024031:	83 ec 04             	sub    esp,0x4
c0024034:	68 00 02 00 00       	push   0x200
c0024039:	68 bf bb 02 c0       	push   0xc002bbbf
c002403e:	50                   	push   eax
c002403f:	e8 1c 01 ff ff       	call   c0014160 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024044:	83 c4 10             	add    esp,0x10
c0024047:	ba 9c bc 02 c0       	mov    edx,0xc002bc9c
c002404c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024050:	89 10                	mov    DWORD PTR [eax],edx
c0024052:	90                   	nop
c0024053:	83 c4 0c             	add    esp,0xc
c0024056:	c3                   	ret    
c0024057:	90                   	nop

c0024058 <SATA::access(unsigned long long, int, void*, bool)>:
c0024058:	55                   	push   ebp
c0024059:	57                   	push   edi
c002405a:	56                   	push   esi
c002405b:	53                   	push   ebx
c002405c:	81 ec 2c 04 00 00    	sub    esp,0x42c
c0024062:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0024069:	8b bc 24 4c 04 00 00 	mov    edi,DWORD PTR [esp+0x44c]
c0024070:	8b 9c 24 40 04 00 00 	mov    ebx,DWORD PTR [esp+0x440]
c0024077:	8b b4 24 44 04 00 00 	mov    esi,DWORD PTR [esp+0x444]
c002407e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024082:	83 ff 08             	cmp    edi,0x8
c0024085:	7e 10                	jle    c0024097 <SATA::access(unsigned long long, int, void*, bool)+0x3f>
c0024087:	83 ec 0c             	sub    esp,0xc
c002408a:	68 cf bb 02 c0       	push   0xc002bbcf
c002408f:	e8 eb 5b ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c0024094:	83 c4 10             	add    esp,0x10
c0024097:	51                   	push   ecx
c0024098:	68 00 02 00 00       	push   0x200
c002409d:	68 ee 00 00 00       	push   0xee
c00240a2:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00240a6:	55                   	push   ebp
c00240a7:	e8 18 c6 fd ff       	call   c00006c4 <memset>
c00240ac:	83 c4 0c             	add    esp,0xc
c00240af:	68 00 02 00 00       	push   0x200
c00240b4:	68 ee 00 00 00       	push   0xee
c00240b9:	8d 84 24 2c 02 00 00 	lea    eax,[esp+0x22c]
c00240c0:	50                   	push   eax
c00240c1:	e8 fe c5 fd ff       	call   c00006c4 <memset>
c00240c6:	55                   	push   ebp
c00240c7:	57                   	push   edi
c00240c8:	56                   	push   esi
c00240c9:	68 01 bc 02 c0       	push   0xc002bc01
c00240ce:	e8 56 e8 fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c00240d3:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00240d9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00240df:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00240e3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00240e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00240ed:	c1 e0 07             	shl    eax,0x7
c00240f0:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
c00240f4:	83 c4 18             	add    esp,0x18
c00240f7:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024101:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024105:	8d 50 02             	lea    edx,[eax+0x2]
c0024108:	c1 e2 07             	shl    edx,0x7
c002410b:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
c002410f:	52                   	push   edx
c0024110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0024114:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002411a:	e8 e1 ef ff ff       	call   c0023100 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002411f:	89 c1                	mov    ecx,eax
c0024121:	58                   	pop    eax
c0024122:	5a                   	pop    edx
c0024123:	51                   	push   ecx
c0024124:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0024128:	68 36 bc 02 c0       	push   0xc002bc36
c002412d:	e8 f7 e7 fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0024132:	83 c4 10             	add    esp,0x10
c0024135:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0024139:	83 f9 ff             	cmp    ecx,0xffffffff
c002413c:	0f 84 9a 01 00 00    	je     c00242dc <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0024142:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024148:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002414c:	8b 12                	mov    edx,DWORD PTR [edx]
c002414e:	2b 90 5c 01 00 00    	sub    edx,DWORD PTR [eax+0x15c]
c0024154:	03 90 58 01 00 00    	add    edx,DWORD PTR [eax+0x158]
c002415a:	89 c8                	mov    eax,ecx
c002415c:	c1 e0 05             	shl    eax,0x5
c002415f:	01 c2                	add    edx,eax
c0024161:	8a 02                	mov    al,BYTE PTR [edx]
c0024163:	83 e0 a0             	and    eax,0xffffffa0
c0024166:	83 c8 05             	or     eax,0x5
c0024169:	88 02                	mov    BYTE PTR [edx],al
c002416b:	8d 47 ff             	lea    eax,[edi-0x1]
c002416e:	c1 f8 04             	sar    eax,0x4
c0024171:	40                   	inc    eax
c0024172:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0024176:	0f b7 c0             	movzx  eax,ax
c0024179:	8b 9b 70 01 00 00    	mov    ebx,DWORD PTR [ebx+0x170]
c002417f:	83 c0 08             	add    eax,0x8
c0024182:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0024188:	c1 e0 04             	shl    eax,0x4
c002418b:	2b 8b 5c 01 00 00    	sub    ecx,DWORD PTR [ebx+0x15c]
c0024191:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c0024194:	01 cb                	add    ebx,ecx
c0024196:	52                   	push   edx
c0024197:	50                   	push   eax
c0024198:	6a 00                	push   0x0
c002419a:	53                   	push   ebx
c002419b:	e8 24 c5 fd ff       	call   c00006c4 <memset>
c00241a0:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00241a6:	83 c4 10             	add    esp,0x10
c00241a9:	89 ab 80 00 00 00    	mov    DWORD PTR [ebx+0x80],ebp
c00241af:	25 00 00 c0 7f       	and    eax,0x7fc00000
c00241b4:	8d ac 24 20 02 00 00 	lea    ebp,[esp+0x220]
c00241bb:	0d ff 01 00 80       	or     eax,0x800001ff
c00241c0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00241c4:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00241ca:	b8 01 00 00 00       	mov    eax,0x1
c00241cf:	89 c2                	mov    edx,eax
c00241d1:	c1 e2 04             	shl    edx,0x4
c00241d4:	89 ac 13 80 00 00 00 	mov    DWORD PTR [ebx+edx*1+0x80],ebp
c00241db:	8d 50 08             	lea    edx,[eax+0x8]
c00241de:	40                   	inc    eax
c00241df:	c1 e2 04             	shl    edx,0x4
c00241e2:	81 64 13 0c 00 00 c0 7f 	and    DWORD PTR [ebx+edx*1+0xc],0x7fc00000
c00241ea:	83 f8 10             	cmp    eax,0x10
c00241ed:	75 e0                	jne    c00241cf <SATA::access(unsigned long long, int, void*, bool)+0x177>
c00241ef:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00241f2:	c6 43 02 25          	mov    BYTE PTR [ebx+0x2],0x25
c00241f6:	66 25 00 7f          	and    ax,0x7f00
c00241fa:	66 89 73 04          	mov    WORD PTR [ebx+0x4],si
c00241fe:	66 0d 27 80          	or     ax,0x8027
c0024202:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024206:	66 89 03             	mov    WORD PTR [ebx],ax
c0024209:	66 89 7b 0c          	mov    WORD PTR [ebx+0xc],di
c002420d:	89 f0                	mov    eax,esi
c002420f:	31 d2                	xor    edx,edx
c0024211:	c1 e8 10             	shr    eax,0x10
c0024214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024217:	89 f0                	mov    eax,esi
c0024219:	c1 e8 18             	shr    eax,0x18
c002421c:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c002421f:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0024223:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024226:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002422a:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002422d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024231:	c1 e0 07             	shl    eax,0x7
c0024234:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024238:	8b 98 20 01 00 00    	mov    ebx,DWORD PTR [eax+0x120]
c002423e:	80 e3 88             	and    bl,0x88
c0024241:	74 0b                	je     c002424e <SATA::access(unsigned long long, int, void*, bool)+0x1f6>
c0024243:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0024249:	74 0b                	je     c0024256 <SATA::access(unsigned long long, int, void*, bool)+0x1fe>
c002424b:	42                   	inc    edx
c002424c:	eb ea                	jmp    c0024238 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c002424e:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0024254:	75 0a                	jne    c0024260 <SATA::access(unsigned long long, int, void*, bool)+0x208>
c0024256:	83 ec 0c             	sub    esp,0xc
c0024259:	68 3f bc 02 c0       	push   0xc002bc3f
c002425e:	eb 60                	jmp    c00242c0 <SATA::access(unsigned long long, int, void*, bool)+0x268>
c0024260:	be 01 00 00 00       	mov    esi,0x1
c0024265:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024269:	d3 e6                	shl    esi,cl
c002426b:	c1 e3 07             	shl    ebx,0x7
c002426e:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0024274:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024278:	83 ec 0c             	sub    esp,0xc
c002427b:	68 4d bc 02 c0       	push   0xc002bc4d
c0024280:	e8 a4 e6 fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0024285:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c002428b:	83 c4 10             	add    esp,0x10
c002428e:	85 c6                	test   esi,eax
c0024290:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0024296:	74 1a                	je     c00242b2 <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c0024298:	0f ba e0 1e          	bt     eax,0x1e
c002429c:	73 da                	jae    c0024278 <SATA::access(unsigned long long, int, void*, bool)+0x220>
c002429e:	83 ec 0c             	sub    esp,0xc
c00242a1:	68 5a bc 02 c0       	push   0xc002bc5a
c00242a6:	e8 d4 59 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c00242ab:	83 c4 10             	add    esp,0x10
c00242ae:	31 c0                	xor    eax,eax
c00242b0:	eb 2f                	jmp    c00242e1 <SATA::access(unsigned long long, int, void*, bool)+0x289>
c00242b2:	0f ba e0 1e          	bt     eax,0x1e
c00242b6:	73 12                	jae    c00242ca <SATA::access(unsigned long long, int, void*, bool)+0x272>
c00242b8:	83 ec 0c             	sub    esp,0xc
c00242bb:	68 5a bc 02 c0       	push   0xc002bc5a
c00242c0:	e8 ba 59 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c00242c5:	83 c4 10             	add    esp,0x10
c00242c8:	eb 12                	jmp    c00242dc <SATA::access(unsigned long long, int, void*, bool)+0x284>
c00242ca:	83 ec 0c             	sub    esp,0xc
c00242cd:	68 6b bc 02 c0       	push   0xc002bc6b
c00242d2:	e8 a8 59 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c00242d7:	83 c4 10             	add    esp,0x10
c00242da:	eb fe                	jmp    c00242da <SATA::access(unsigned long long, int, void*, bool)+0x282>
c00242dc:	b8 01 00 00 00       	mov    eax,0x1
c00242e1:	81 c4 2c 04 00 00    	add    esp,0x42c
c00242e7:	5b                   	pop    ebx
c00242e8:	5e                   	pop    esi
c00242e9:	5f                   	pop    edi
c00242ea:	5d                   	pop    ebp
c00242eb:	c3                   	ret    

c00242ec <SATA::read(unsigned long long, int, void*)>:
c00242ec:	57                   	push   edi
c00242ed:	b8 04 00 00 00       	mov    eax,0x4
c00242f2:	56                   	push   esi
c00242f3:	53                   	push   ebx
c00242f4:	83 ec 10             	sub    esp,0x10
c00242f7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00242fb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00242ff:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024302:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024306:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002430a:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024310:	77 3b                	ja     c002434d <SATA::read(unsigned long long, int, void*)+0x61>
c0024312:	b8 06 00 00 00       	mov    eax,0x6
c0024317:	85 d2                	test   edx,edx
c0024319:	74 32                	je     c002434d <SATA::read(unsigned long long, int, void*)+0x61>
c002431b:	50                   	push   eax
c002431c:	50                   	push   eax
c002431d:	6a 00                	push   0x0
c002431f:	52                   	push   edx
c0024320:	53                   	push   ebx
c0024321:	57                   	push   edi
c0024322:	56                   	push   esi
c0024323:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024327:	e8 2c fd ff ff       	call   c0024058 <SATA::access(unsigned long long, int, void*, bool)>
c002432c:	83 c4 20             	add    esp,0x20
c002432f:	85 c0                	test   eax,eax
c0024331:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024335:	75 11                	jne    c0024348 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024337:	01 1d 28 f4 02 c0    	add    DWORD PTR ds:0xc002f428,ebx
c002433d:	e8 4c c4 fe ff       	call   c001078e <VgaText::updateDiskUsage()>
c0024342:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024346:	eb 05                	jmp    c002434d <SATA::read(unsigned long long, int, void*)+0x61>
c0024348:	b8 01 00 00 00       	mov    eax,0x1
c002434d:	83 c4 10             	add    esp,0x10
c0024350:	5b                   	pop    ebx
c0024351:	5e                   	pop    esi
c0024352:	5f                   	pop    edi
c0024353:	c3                   	ret    

c0024354 <SATA::write(unsigned long long, int, void*)>:
c0024354:	57                   	push   edi
c0024355:	b8 04 00 00 00       	mov    eax,0x4
c002435a:	56                   	push   esi
c002435b:	53                   	push   ebx
c002435c:	83 ec 10             	sub    esp,0x10
c002435f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024363:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024367:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002436a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002436e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024372:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024378:	77 3b                	ja     c00243b5 <SATA::write(unsigned long long, int, void*)+0x61>
c002437a:	b8 06 00 00 00       	mov    eax,0x6
c002437f:	85 d2                	test   edx,edx
c0024381:	74 32                	je     c00243b5 <SATA::write(unsigned long long, int, void*)+0x61>
c0024383:	50                   	push   eax
c0024384:	50                   	push   eax
c0024385:	6a 01                	push   0x1
c0024387:	52                   	push   edx
c0024388:	53                   	push   ebx
c0024389:	57                   	push   edi
c002438a:	56                   	push   esi
c002438b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002438f:	e8 c4 fc ff ff       	call   c0024058 <SATA::access(unsigned long long, int, void*, bool)>
c0024394:	83 c4 20             	add    esp,0x20
c0024397:	85 c0                	test   eax,eax
c0024399:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002439d:	75 11                	jne    c00243b0 <SATA::write(unsigned long long, int, void*)+0x5c>
c002439f:	01 1d 24 f4 02 c0    	add    DWORD PTR ds:0xc002f424,ebx
c00243a5:	e8 e4 c3 fe ff       	call   c001078e <VgaText::updateDiskUsage()>
c00243aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00243ae:	eb 05                	jmp    c00243b5 <SATA::write(unsigned long long, int, void*)+0x61>
c00243b0:	b8 01 00 00 00       	mov    eax,0x1
c00243b5:	83 c4 10             	add    esp,0x10
c00243b8:	5b                   	pop    ebx
c00243b9:	5e                   	pop    esi
c00243ba:	5f                   	pop    edi
c00243bb:	c3                   	ret    

c00243bc <AVX::open(int, int, void*)>:
c00243bc:	83 ec 0c             	sub    esp,0xc
c00243bf:	e8 44 11 00 00       	call   c0025508 <avxInit>
c00243c4:	b8 00 00 00 00       	mov    eax,0x0
c00243c9:	83 c4 0c             	add    esp,0xc
c00243cc:	c3                   	ret    
c00243cd:	90                   	nop

c00243ce <AVX::close(int, int, void*)>:
c00243ce:	83 ec 0c             	sub    esp,0xc
c00243d1:	e8 33 11 00 00       	call   c0025509 <avxClose>
c00243d6:	b8 00 00 00 00       	mov    eax,0x0
c00243db:	83 c4 0c             	add    esp,0xc
c00243de:	c3                   	ret    
c00243df:	90                   	nop

c00243e0 <AVX::available()>:
c00243e0:	83 ec 0c             	sub    esp,0xc
c00243e3:	e8 18 11 00 00       	call   c0025500 <avxDetect>
c00243e8:	85 c0                	test   eax,eax
c00243ea:	0f 95 c0             	setne  al
c00243ed:	83 c4 0c             	add    esp,0xc
c00243f0:	c3                   	ret    
c00243f1:	90                   	nop

c00243f2 <AVX::save(void*)>:
c00243f2:	83 ec 0c             	sub    esp,0xc
c00243f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00243f9:	83 ec 0c             	sub    esp,0xc
c00243fc:	50                   	push   eax
c00243fd:	e8 04 11 00 00       	call   c0025506 <avxSave>
c0024402:	83 c4 10             	add    esp,0x10
c0024405:	90                   	nop
c0024406:	83 c4 0c             	add    esp,0xc
c0024409:	c3                   	ret    

c002440a <AVX::load(void*)>:
c002440a:	83 ec 0c             	sub    esp,0xc
c002440d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024411:	83 ec 0c             	sub    esp,0xc
c0024414:	50                   	push   eax
c0024415:	e8 ed 10 00 00       	call   c0025507 <avxLoad>
c002441a:	83 c4 10             	add    esp,0x10
c002441d:	90                   	nop
c002441e:	83 c4 0c             	add    esp,0xc
c0024421:	c3                   	ret    

c0024422 <AVX::AVX()>:
c0024422:	83 ec 0c             	sub    esp,0xc
c0024425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024429:	83 ec 08             	sub    esp,0x8
c002442c:	68 c8 bc 02 c0       	push   0xc002bcc8
c0024431:	50                   	push   eax
c0024432:	e8 07 fe fe ff       	call   c001423e <FPU::FPU(char const*)>
c0024437:	83 c4 10             	add    esp,0x10
c002443a:	ba d8 bc 02 c0       	mov    edx,0xc002bcd8
c002443f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024443:	89 10                	mov    DWORD PTR [eax],edx
c0024445:	90                   	nop
c0024446:	83 c4 0c             	add    esp,0xc
c0024449:	c3                   	ret    

c002444a <MMX::available()>:
c002444a:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c002444f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024455:	83 e0 20             	and    eax,0x20
c0024458:	84 c0                	test   al,al
c002445a:	0f 95 c0             	setne  al
c002445d:	c3                   	ret    

c002445e <MMX::open(int, int, void*)>:
c002445e:	83 ec 0c             	sub    esp,0xc
c0024461:	e8 26 11 00 00       	call   c002558c <x87Init>
c0024466:	b8 00 00 00 00       	mov    eax,0x0
c002446b:	83 c4 0c             	add    esp,0xc
c002446e:	c3                   	ret    
c002446f:	90                   	nop

c0024470 <MMX::close(int, int, void*)>:
c0024470:	83 ec 0c             	sub    esp,0xc
c0024473:	e8 2e 11 00 00       	call   c00255a6 <x87Close>
c0024478:	b8 00 00 00 00       	mov    eax,0x0
c002447d:	83 c4 0c             	add    esp,0xc
c0024480:	c3                   	ret    
c0024481:	90                   	nop

c0024482 <MMX::save(void*)>:
c0024482:	83 ec 0c             	sub    esp,0xc
c0024485:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024489:	83 ec 0c             	sub    esp,0xc
c002448c:	50                   	push   eax
c002448d:	e8 ef 10 00 00       	call   c0025581 <x87Save>
c0024492:	83 c4 10             	add    esp,0x10
c0024495:	90                   	nop
c0024496:	83 c4 0c             	add    esp,0xc
c0024499:	c3                   	ret    

c002449a <MMX::load(void*)>:
c002449a:	83 ec 0c             	sub    esp,0xc
c002449d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00244a1:	83 ec 0c             	sub    esp,0xc
c00244a4:	50                   	push   eax
c00244a5:	e8 dd 10 00 00       	call   c0025587 <x87Load>
c00244aa:	83 c4 10             	add    esp,0x10
c00244ad:	90                   	nop
c00244ae:	83 c4 0c             	add    esp,0xc
c00244b1:	c3                   	ret    

c00244b2 <MMX::MMX()>:
c00244b2:	83 ec 0c             	sub    esp,0xc
c00244b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244b9:	83 ec 08             	sub    esp,0x8
c00244bc:	68 08 bd 02 c0       	push   0xc002bd08
c00244c1:	50                   	push   eax
c00244c2:	e8 77 fd fe ff       	call   c001423e <FPU::FPU(char const*)>
c00244c7:	83 c4 10             	add    esp,0x10
c00244ca:	ba 18 bd 02 c0       	mov    edx,0xc002bd18
c00244cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244d3:	89 10                	mov    DWORD PTR [eax],edx
c00244d5:	90                   	nop
c00244d6:	83 c4 0c             	add    esp,0xc
c00244d9:	c3                   	ret    

c00244da <SSE::open(int, int, void*)>:
c00244da:	83 ec 0c             	sub    esp,0xc
c00244dd:	e8 62 10 00 00       	call   c0025544 <sseInit>
c00244e2:	b8 00 00 00 00       	mov    eax,0x0
c00244e7:	83 c4 0c             	add    esp,0xc
c00244ea:	c3                   	ret    
c00244eb:	90                   	nop

c00244ec <SSE::close(int, int, void*)>:
c00244ec:	83 ec 0c             	sub    esp,0xc
c00244ef:	e8 60 10 00 00       	call   c0025554 <sseClose>
c00244f4:	b8 00 00 00 00       	mov    eax,0x0
c00244f9:	83 c4 0c             	add    esp,0xc
c00244fc:	c3                   	ret    
c00244fd:	90                   	nop

c00244fe <SSE::available()>:
c00244fe:	83 ec 1c             	sub    esp,0x1c
c0024501:	e8 1a 10 00 00       	call   c0025520 <absolutelyNoChanceInHell>
c0024506:	85 c0                	test   eax,eax
c0024508:	0f 95 c0             	setne  al
c002450b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002450f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024513:	83 c4 1c             	add    esp,0x1c
c0024516:	c3                   	ret    
c0024517:	90                   	nop

c0024518 <SSE::save(void*)>:
c0024518:	83 ec 0c             	sub    esp,0xc
c002451b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002451f:	83 ec 0c             	sub    esp,0xc
c0024522:	50                   	push   eax
c0024523:	e8 10 10 00 00       	call   c0025538 <sseSave>
c0024528:	83 c4 10             	add    esp,0x10
c002452b:	90                   	nop
c002452c:	83 c4 0c             	add    esp,0xc
c002452f:	c3                   	ret    

c0024530 <SSE::load(void*)>:
c0024530:	83 ec 0c             	sub    esp,0xc
c0024533:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024537:	83 ec 0c             	sub    esp,0xc
c002453a:	50                   	push   eax
c002453b:	e8 fe 0f 00 00       	call   c002553e <sseLoad>
c0024540:	83 c4 10             	add    esp,0x10
c0024543:	90                   	nop
c0024544:	83 c4 0c             	add    esp,0xc
c0024547:	c3                   	ret    

c0024548 <SSE::SSE()>:
c0024548:	83 ec 0c             	sub    esp,0xc
c002454b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002454f:	83 ec 08             	sub    esp,0x8
c0024552:	68 48 bd 02 c0       	push   0xc002bd48
c0024557:	50                   	push   eax
c0024558:	e8 e1 fc fe ff       	call   c001423e <FPU::FPU(char const*)>
c002455d:	83 c4 10             	add    esp,0x10
c0024560:	ba 58 bd 02 c0       	mov    edx,0xc002bd58
c0024565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024569:	89 10                	mov    DWORD PTR [eax],edx
c002456b:	90                   	nop
c002456c:	83 c4 0c             	add    esp,0xc
c002456f:	c3                   	ret    

c0024570 <x87::open(int, int, void*)>:
c0024570:	83 ec 0c             	sub    esp,0xc
c0024573:	e8 14 10 00 00       	call   c002558c <x87Init>
c0024578:	b8 00 00 00 00       	mov    eax,0x0
c002457d:	83 c4 0c             	add    esp,0xc
c0024580:	c3                   	ret    
c0024581:	90                   	nop

c0024582 <x87::close(int, int, void*)>:
c0024582:	83 ec 0c             	sub    esp,0xc
c0024585:	e8 1c 10 00 00       	call   c00255a6 <x87Close>
c002458a:	b8 00 00 00 00       	mov    eax,0x0
c002458f:	83 c4 0c             	add    esp,0xc
c0024592:	c3                   	ret    
c0024593:	90                   	nop

c0024594 <x87::available()>:
c0024594:	83 ec 0c             	sub    esp,0xc
c0024597:	e8 ca 0f 00 00       	call   c0025566 <x87Detect>
c002459c:	85 c0                	test   eax,eax
c002459e:	0f 95 c0             	setne  al
c00245a1:	83 c4 0c             	add    esp,0xc
c00245a4:	c3                   	ret    
c00245a5:	90                   	nop

c00245a6 <x87::save(void*)>:
c00245a6:	83 ec 0c             	sub    esp,0xc
c00245a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00245ad:	83 ec 0c             	sub    esp,0xc
c00245b0:	50                   	push   eax
c00245b1:	e8 cb 0f 00 00       	call   c0025581 <x87Save>
c00245b6:	83 c4 10             	add    esp,0x10
c00245b9:	90                   	nop
c00245ba:	83 c4 0c             	add    esp,0xc
c00245bd:	c3                   	ret    

c00245be <x87::load(void*)>:
c00245be:	83 ec 0c             	sub    esp,0xc
c00245c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00245c5:	83 ec 0c             	sub    esp,0xc
c00245c8:	50                   	push   eax
c00245c9:	e8 b9 0f 00 00       	call   c0025587 <x87Load>
c00245ce:	83 c4 10             	add    esp,0x10
c00245d1:	90                   	nop
c00245d2:	83 c4 0c             	add    esp,0xc
c00245d5:	c3                   	ret    

c00245d6 <x87::x87()>:
c00245d6:	83 ec 0c             	sub    esp,0xc
c00245d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245dd:	83 ec 08             	sub    esp,0x8
c00245e0:	68 88 bd 02 c0       	push   0xc002bd88
c00245e5:	50                   	push   eax
c00245e6:	e8 53 fc fe ff       	call   c001423e <FPU::FPU(char const*)>
c00245eb:	83 c4 10             	add    esp,0x10
c00245ee:	ba 98 bd 02 c0       	mov    edx,0xc002bd98
c00245f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245f7:	89 10                	mov    DWORD PTR [eax],edx
c00245f9:	90                   	nop
c00245fa:	83 c4 0c             	add    esp,0xc
c00245fd:	c3                   	ret    

c00245fe <APIC::disable()>:
c00245fe:	90                   	nop
c00245ff:	c3                   	ret    

c0024600 <APIC::close(int, int, void*)>:
c0024600:	55                   	push   ebp
c0024601:	89 e5                	mov    ebp,esp
c0024603:	83 ec 08             	sub    esp,0x8
c0024606:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024609:	8b 00                	mov    eax,DWORD PTR [eax]
c002460b:	83 c0 3c             	add    eax,0x3c
c002460e:	8b 00                	mov    eax,DWORD PTR [eax]
c0024610:	83 ec 0c             	sub    esp,0xc
c0024613:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024616:	ff d0                	call   eax
c0024618:	83 c4 10             	add    esp,0x10
c002461b:	b8 00 00 00 00       	mov    eax,0x0
c0024620:	c9                   	leave  
c0024621:	c3                   	ret    

c0024622 <IOAPIC::close(int, int, void*)>:
c0024622:	b8 00 00 00 00       	mov    eax,0x0
c0024627:	c3                   	ret    

c0024628 <APIC::io_wait()>:
c0024628:	eb 00                	jmp    c002462a <APIC::io_wait()+0x2>
c002462a:	eb 00                	jmp    c002462c <APIC::io_wait()+0x4>
c002462c:	90                   	nop
c002462d:	c3                   	ret    

c002462e <APIC::getBase()>:
c002462e:	55                   	push   ebp
c002462f:	89 e5                	mov    ebp,esp
c0024631:	83 ec 18             	sub    esp,0x18
c0024634:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c0024639:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002463f:	83 e0 08             	and    eax,0x8
c0024642:	84 c0                	test   al,al
c0024644:	75 07                	jne    c002464d <APIC::getBase()+0x1f>
c0024646:	b8 00 00 00 00       	mov    eax,0x0
c002464b:	eb 21                	jmp    c002466e <APIC::getBase()+0x40>
c002464d:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c0024652:	83 ec 08             	sub    esp,0x8
c0024655:	6a 1b                	push   0x1b
c0024657:	50                   	push   eax
c0024658:	e8 6f a5 fe ff       	call   c000ebcc <Computer::rdmsr(unsigned int)>
c002465d:	83 c4 10             	add    esp,0x10
c0024660:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024663:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0024666:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024669:	25 00 f0 ff ff       	and    eax,0xfffff000
c002466e:	c9                   	leave  
c002466f:	c3                   	ret    

c0024670 <APIC::eoi(unsigned char)>:
c0024670:	55                   	push   ebp
c0024671:	89 e5                	mov    ebp,esp
c0024673:	83 ec 28             	sub    esp,0x28
c0024676:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024679:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002467c:	83 ec 0c             	sub    esp,0xc
c002467f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024682:	e8 a7 ff ff ff       	call   c002462e <APIC::getBase()>
c0024687:	83 c4 10             	add    esp,0x10
c002468a:	05 b0 00 00 00       	add    eax,0xb0
c002468f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0024692:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0024695:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002469b:	90                   	nop
c002469c:	c9                   	leave  
c002469d:	c3                   	ret    

c002469e <APIC::open(int, int, void*)>:
c002469e:	55                   	push   ebp
c002469f:	89 e5                	mov    ebp,esp
c00246a1:	57                   	push   edi
c00246a2:	56                   	push   esi
c00246a3:	53                   	push   ebx
c00246a4:	83 ec 2c             	sub    esp,0x2c
c00246a7:	83 ec 0c             	sub    esp,0xc
c00246aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00246ad:	e8 7c ff ff ff       	call   c002462e <APIC::getBase()>
c00246b2:	83 c4 10             	add    esp,0x10
c00246b5:	89 c2                	mov    edx,eax
c00246b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00246ba:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00246c0:	0f b6 f8             	movzx  edi,al
c00246c3:	89 d0                	mov    eax,edx
c00246c5:	ba 00 00 00 00       	mov    edx,0x0
c00246ca:	89 c1                	mov    ecx,eax
c00246cc:	80 e5 ff             	and    ch,0xff
c00246cf:	89 cb                	mov    ebx,ecx
c00246d1:	0f b6 f2             	movzx  esi,dl
c00246d4:	89 d8                	mov    eax,ebx
c00246d6:	89 f2                	mov    edx,esi
c00246d8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00246db:	8d 5f 08             	lea    ebx,[edi+0x8]
c00246de:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00246e2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00246e6:	83 e0 00             	and    eax,0x0
c00246e9:	09 d0                	or     eax,edx
c00246eb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00246ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00246f2:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00246f8:	8d 50 01             	lea    edx,[eax+0x1]
c00246fb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00246fe:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024704:	0f b6 d0             	movzx  edx,al
c0024707:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002470a:	83 c2 08             	add    edx,0x8
c002470d:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024711:	0f b6 c9             	movzx  ecx,cl
c0024714:	81 c9 00 00 01 00    	or     ecx,0x10000
c002471a:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002471e:	83 ec 0c             	sub    esp,0xc
c0024721:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024724:	e8 05 ff ff ff       	call   c002462e <APIC::getBase()>
c0024729:	83 c4 10             	add    esp,0x10
c002472c:	05 f0 00 00 00       	add    eax,0xf0
c0024731:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0024734:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024737:	8b 00                	mov    eax,DWORD PTR [eax]
c0024739:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002473c:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0024743:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002474a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002474d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024750:	89 10                	mov    DWORD PTR [eax],edx
c0024752:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0024759:	a1 b0 d9 02 c0       	mov    eax,ds:0xc002d9b0
c002475e:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0024761:	7d 7c                	jge    c00247df <APIC::open(int, int, void*)+0x141>
c0024763:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024766:	8b 04 85 c0 d9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2640]
c002476d:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0024770:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024773:	8b 04 85 c0 d9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2640]
c002477a:	c1 e8 08             	shr    eax,0x8
c002477d:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0024781:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024784:	8b 04 85 c0 d9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2640]
c002478b:	c1 e8 18             	shr    eax,0x18
c002478e:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0024791:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0024795:	75 40                	jne    c00247d7 <APIC::open(int, int, void*)+0x139>
c0024797:	83 ec 0c             	sub    esp,0xc
c002479a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002479d:	e8 8c fe ff ff       	call   c002462e <APIC::getBase()>
c00247a2:	83 c4 10             	add    esp,0x10
c00247a5:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00247a9:	75 07                	jne    c00247b2 <APIC::open(int, int, void*)+0x114>
c00247ab:	ba 60 03 00 00       	mov    edx,0x360
c00247b0:	eb 05                	jmp    c00247b7 <APIC::open(int, int, void*)+0x119>
c00247b2:	ba 50 03 00 00       	mov    edx,0x350
c00247b7:	01 d0                	add    eax,edx
c00247b9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00247bc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00247bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00247c1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00247c4:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00247cb:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00247cf:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00247d2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00247d5:	89 10                	mov    DWORD PTR [eax],edx
c00247d7:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00247da:	e9 7a ff ff ff       	jmp    c0024759 <APIC::open(int, int, void*)+0xbb>
c00247df:	b8 00 00 00 00       	mov    eax,0x0
c00247e4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00247e7:	5b                   	pop    ebx
c00247e8:	5e                   	pop    esi
c00247e9:	5f                   	pop    edi
c00247ea:	5d                   	pop    ebp
c00247eb:	c3                   	ret    

c00247ec <IOAPIC::IOAPIC()>:
c00247ec:	83 ec 0c             	sub    esp,0xc
c00247ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247f3:	83 ec 08             	sub    esp,0x8
c00247f6:	68 c8 bd 02 c0       	push   0xc002bdc8
c00247fb:	50                   	push   eax
c00247fc:	e8 3f f7 fe ff       	call   c0013f40 <Device::Device(char const*)>
c0024801:	83 c4 10             	add    esp,0x10
c0024804:	ba f0 be 02 c0       	mov    edx,0xc002bef0
c0024809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002480d:	89 10                	mov    DWORD PTR [eax],edx
c002480f:	90                   	nop
c0024810:	83 c4 0c             	add    esp,0xc
c0024813:	c3                   	ret    

c0024814 <APIC::APIC()>:
c0024814:	53                   	push   ebx
c0024815:	83 ec 18             	sub    esp,0x18
c0024818:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002481c:	83 ec 08             	sub    esp,0x8
c002481f:	68 d0 bd 02 c0       	push   0xc002bdd0
c0024824:	50                   	push   eax
c0024825:	e8 6e fe fe ff       	call   c0014698 <InterruptController::InterruptController(char const*)>
c002482a:	83 c4 10             	add    esp,0x10
c002482d:	ba a8 be 02 c0       	mov    edx,0xc002bea8
c0024832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024836:	89 10                	mov    DWORD PTR [eax],edx
c0024838:	a0 80 f4 02 c0       	mov    al,ds:0xc002f480
c002483d:	83 f0 01             	xor    eax,0x1
c0024840:	84 c0                	test   al,al
c0024842:	0f 84 a1 00 00 00    	je     c00248e9 <APIC::APIC()+0xd5>
c0024848:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002484d:	a0 60 da 02 c0       	mov    al,ds:0xc002da60
c0024852:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0024856:	0f 83 86 00 00 00    	jae    c00248e2 <APIC::APIC()+0xce>
c002485c:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0024864:	83 ec 0c             	sub    esp,0xc
c0024867:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002486b:	e8 ea ad fe ff       	call   c000f65a <malloc>
c0024870:	83 c4 10             	add    esp,0x10
c0024873:	89 c3                	mov    ebx,eax
c0024875:	83 ec 0c             	sub    esp,0xc
c0024878:	53                   	push   ebx
c0024879:	e8 6e ff ff ff       	call   c00247ec <IOAPIC::IOAPIC()>
c002487e:	83 c4 10             	add    esp,0x10
c0024881:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0024885:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002488a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002488e:	89 14 85 60 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ba0],edx
c0024895:	a1 40 f4 02 c0       	mov    eax,ds:0xc002f440
c002489a:	40                   	inc    eax
c002489b:	a3 40 f4 02 c0       	mov    ds:0xc002f440,eax
c00248a0:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c00248a5:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00248ab:	83 ec 08             	sub    esp,0x8
c00248ae:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00248b2:	50                   	push   eax
c00248b3:	e8 98 f4 fe ff       	call   c0013d50 <Device::addChild(Device*)>
c00248b8:	83 c4 10             	add    esp,0x10
c00248bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00248bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00248c1:	83 c0 08             	add    eax,0x8
c00248c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00248c6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00248cb:	6a 00                	push   0x0
c00248cd:	6a 00                	push   0x0
c00248cf:	52                   	push   edx
c00248d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00248d4:	ff d0                	call   eax
c00248d6:	83 c4 10             	add    esp,0x10
c00248d9:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00248dd:	e9 6b ff ff ff       	jmp    c002484d <APIC::APIC()+0x39>
c00248e2:	c6 05 80 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f480,0x1
c00248e9:	90                   	nop
c00248ea:	83 c4 18             	add    esp,0x18
c00248ed:	5b                   	pop    ebx
c00248ee:	c3                   	ret    
c00248ef:	90                   	nop

c00248f0 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00248f0:	55                   	push   ebp
c00248f1:	89 e5                	mov    ebp,esp
c00248f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00248f6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00248fc:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00248ff:	72 1d                	jb     c002491e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0024901:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024904:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002490a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002490d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0024913:	01 d0                	add    eax,edx
c0024915:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0024918:	73 04                	jae    c002491e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002491a:	b0 01                	mov    al,0x1
c002491c:	eb 02                	jmp    c0024920 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002491e:	b0 00                	mov    al,0x0
c0024920:	5d                   	pop    ebp
c0024921:	c3                   	ret    

c0024922 <IOAPIC::read(int)>:
c0024922:	55                   	push   ebp
c0024923:	89 e5                	mov    ebp,esp
c0024925:	83 ec 10             	sub    esp,0x10
c0024928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002492b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024931:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0024934:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024937:	0f b6 d0             	movzx  edx,al
c002493a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002493d:	89 10                	mov    DWORD PTR [eax],edx
c002493f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024942:	83 c0 10             	add    eax,0x10
c0024945:	8b 00                	mov    eax,DWORD PTR [eax]
c0024947:	c9                   	leave  
c0024948:	c3                   	ret    
c0024949:	90                   	nop

c002494a <IOAPIC::open(int, int, void*)>:
c002494a:	55                   	push   ebp
c002494b:	89 e5                	mov    ebp,esp
c002494d:	57                   	push   edi
c002494e:	56                   	push   esi
c002494f:	53                   	push   ebx
c0024950:	83 ec 0c             	sub    esp,0xc
c0024953:	83 ec 0c             	sub    esp,0xc
c0024956:	68 fb bd 02 c0       	push   0xc002bdfb
c002495b:	e8 c9 df fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0024960:	83 c4 10             	add    esp,0x10
c0024963:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024966:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024969:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002496f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024972:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024978:	8b 14 85 a0 da 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2560]
c002497f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024982:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002498b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024991:	8b 14 85 20 db 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd24e0]
c0024998:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002499b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00249a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00249a4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00249aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00249ad:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00249b3:	0f b6 f8             	movzx  edi,al
c00249b6:	89 d0                	mov    eax,edx
c00249b8:	ba 00 00 00 00       	mov    edx,0x0
c00249bd:	89 c1                	mov    ecx,eax
c00249bf:	80 e5 ff             	and    ch,0xff
c00249c2:	89 cb                	mov    ebx,ecx
c00249c4:	0f b6 f2             	movzx  esi,dl
c00249c7:	89 d8                	mov    eax,ebx
c00249c9:	89 f2                	mov    edx,esi
c00249cb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00249ce:	8d 5f 08             	lea    ebx,[edi+0x8]
c00249d1:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00249d5:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00249d9:	83 e0 00             	and    eax,0x0
c00249dc:	09 d0                	or     eax,edx
c00249de:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00249e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00249e5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00249eb:	8d 50 01             	lea    edx,[eax+0x1]
c00249ee:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00249f1:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00249f7:	0f b6 d0             	movzx  edx,al
c00249fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00249fd:	83 c2 08             	add    edx,0x8
c0024a00:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024a04:	0f b6 c9             	movzx  ecx,cl
c0024a07:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0024a0d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024a11:	83 ec 08             	sub    esp,0x8
c0024a14:	6a 01                	push   0x1
c0024a16:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a19:	e8 04 ff ff ff       	call   c0024922 <IOAPIC::read(int)>
c0024a1e:	83 c4 10             	add    esp,0x10
c0024a21:	c1 f8 10             	sar    eax,0x10
c0024a24:	0f b6 c0             	movzx  eax,al
c0024a27:	8d 50 01             	lea    edx,[eax+0x1]
c0024a2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024a2d:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0024a33:	b8 00 00 00 00       	mov    eax,0x0
c0024a38:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024a3b:	5b                   	pop    ebx
c0024a3c:	5e                   	pop    esi
c0024a3d:	5f                   	pop    edi
c0024a3e:	5d                   	pop    ebp
c0024a3f:	c3                   	ret    

c0024a40 <IOAPIC::write(int, int)>:
c0024a40:	55                   	push   ebp
c0024a41:	89 e5                	mov    ebp,esp
c0024a43:	83 ec 10             	sub    esp,0x10
c0024a46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024a49:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024a4f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0024a52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024a55:	0f b6 d0             	movzx  edx,al
c0024a58:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024a5b:	89 10                	mov    DWORD PTR [eax],edx
c0024a5d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024a60:	8d 50 10             	lea    edx,[eax+0x10]
c0024a63:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024a66:	89 02                	mov    DWORD PTR [edx],eax
c0024a68:	90                   	nop
c0024a69:	c9                   	leave  
c0024a6a:	c3                   	ret    
c0024a6b:	90                   	nop

c0024a6c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0024a6c:	55                   	push   ebp
c0024a6d:	89 e5                	mov    ebp,esp
c0024a6f:	53                   	push   ebx
c0024a70:	83 ec 2c             	sub    esp,0x2c
c0024a73:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024a76:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0024a79:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0024a7c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0024a7f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0024a82:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024a85:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0024a88:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0024a8b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024a8e:	88 d8                	mov    al,bl
c0024a90:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0024a93:	88 c8                	mov    al,cl
c0024a95:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0024a98:	88 d0                	mov    al,dl
c0024a9a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0024a9d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0024aa1:	83 c0 08             	add    eax,0x8
c0024aa4:	01 c0                	add    eax,eax
c0024aa6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024aa9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0024aad:	83 c0 08             	add    eax,0x8
c0024ab0:	01 c0                	add    eax,eax
c0024ab2:	40                   	inc    eax
c0024ab3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024ab6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024ab9:	50                   	push   eax
c0024aba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024abd:	e8 60 fe ff ff       	call   c0024922 <IOAPIC::read(int)>
c0024ac2:	83 c4 08             	add    esp,0x8
c0024ac5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024ac8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0024acf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0024ad2:	c1 e0 18             	shl    eax,0x18
c0024ad5:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0024ad8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024adb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024ade:	52                   	push   edx
c0024adf:	50                   	push   eax
c0024ae0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ae3:	e8 58 ff ff ff       	call   c0024a40 <IOAPIC::write(int, int)>
c0024ae8:	83 c4 0c             	add    esp,0xc
c0024aeb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024aee:	50                   	push   eax
c0024aef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024af2:	e8 2b fe ff ff       	call   c0024922 <IOAPIC::read(int)>
c0024af7:	83 c4 08             	add    esp,0x8
c0024afa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0024afd:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0024b04:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0024b0b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0024b12:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0024b16:	74 09                	je     c0024b21 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0024b18:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0024b1f:	eb 07                	jmp    c0024b28 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0024b21:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0024b28:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0024b2c:	74 09                	je     c0024b37 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0024b2e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0024b35:	eb 07                	jmp    c0024b3e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0024b37:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0024b3e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0024b45:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0024b49:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0024b4c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0024b4f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024b52:	52                   	push   edx
c0024b53:	50                   	push   eax
c0024b54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b57:	e8 e4 fe ff ff       	call   c0024a40 <IOAPIC::write(int, int)>
c0024b5c:	83 c4 0c             	add    esp,0xc
c0024b5f:	90                   	nop
c0024b60:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0024b63:	c9                   	leave  
c0024b64:	c3                   	ret    
c0024b65:	90                   	nop

c0024b66 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0024b66:	55                   	push   ebp
c0024b67:	89 e5                	mov    ebp,esp
c0024b69:	57                   	push   edi
c0024b6a:	56                   	push   esi
c0024b6b:	53                   	push   ebx
c0024b6c:	83 ec 2c             	sub    esp,0x2c
c0024b6f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0024b72:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0024b75:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0024b79:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0024b7d:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0024b81:	74 5a                	je     c0024bdd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0024b83:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0024b87:	7f 44                	jg     c0024bcd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0024b89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024b8c:	05 40 c3 02 c0       	add    eax,0xc002c340
c0024b91:	8a 00                	mov    al,BYTE PTR [eax]
c0024b93:	0f b6 c0             	movzx  eax,al
c0024b96:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0024b99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024b9c:	66 8b 84 00 40 da 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd25c0]
c0024ba4:	0f b7 c0             	movzx  eax,ax
c0024ba7:	83 e0 02             	and    eax,0x2
c0024baa:	85 c0                	test   eax,eax
c0024bac:	74 04                	je     c0024bb2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0024bae:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0024bb2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024bb5:	66 8b 84 00 40 da 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd25c0]
c0024bbd:	0f b7 c0             	movzx  eax,ax
c0024bc0:	83 e0 08             	and    eax,0x8
c0024bc3:	85 c0                	test   eax,eax
c0024bc5:	74 16                	je     c0024bdd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0024bc7:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0024bcb:	eb 10                	jmp    c0024bdd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0024bcd:	83 ec 0c             	sub    esp,0xc
c0024bd0:	68 0c be 02 c0       	push   0xc002be0c
c0024bd5:	e8 a5 50 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c0024bda:	83 c4 10             	add    esp,0x10
c0024bdd:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0024be1:	a1 40 f4 02 c0       	mov    eax,ds:0xc002f440
c0024be6:	83 ec 08             	sub    esp,0x8
c0024be9:	50                   	push   eax
c0024bea:	68 44 be 02 c0       	push   0xc002be44
c0024bef:	e8 35 dd fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0024bf4:	83 c4 10             	add    esp,0x10
c0024bf7:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0024bfe:	a1 40 f4 02 c0       	mov    eax,ds:0xc002f440
c0024c03:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0024c06:	7d 67                	jge    c0024c6f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024c08:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024c0b:	8b 04 85 60 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ba0]
c0024c12:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024c15:	83 ec 08             	sub    esp,0x8
c0024c18:	52                   	push   edx
c0024c19:	50                   	push   eax
c0024c1a:	e8 d1 fc ff ff       	call   c00248f0 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0024c1f:	83 c4 10             	add    esp,0x10
c0024c22:	84 c0                	test   al,al
c0024c24:	74 44                	je     c0024c6a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0024c26:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024c29:	8b 1c 85 60 f4 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd0ba0]
c0024c30:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0024c34:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024c37:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0024c3b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024c3e:	83 c0 20             	add    eax,0x20
c0024c41:	0f b6 f0             	movzx  esi,al
c0024c44:	b8 00 00 00 00       	mov    eax,0x0
c0024c49:	99                   	cdq    
c0024c4a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024c4d:	0f b6 c9             	movzx  ecx,cl
c0024c50:	83 ec 04             	sub    esp,0x4
c0024c53:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0024c56:	57                   	push   edi
c0024c57:	56                   	push   esi
c0024c58:	52                   	push   edx
c0024c59:	50                   	push   eax
c0024c5a:	51                   	push   ecx
c0024c5b:	53                   	push   ebx
c0024c5c:	e8 0b fe ff ff       	call   c0024a6c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0024c61:	83 c4 20             	add    esp,0x20
c0024c64:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0024c68:	eb 05                	jmp    c0024c6f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024c6a:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0024c6d:	eb 8f                	jmp    c0024bfe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0024c6f:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0024c72:	83 f0 01             	xor    eax,0x1
c0024c75:	84 c0                	test   al,al
c0024c77:	74 10                	je     c0024c89 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0024c79:	83 ec 0c             	sub    esp,0xc
c0024c7c:	68 5b be 02 c0       	push   0xc002be5b
c0024c81:	e8 f9 4f ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c0024c86:	83 c4 10             	add    esp,0x10
c0024c89:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0024c8d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0024c94:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0024c98:	7f 65                	jg     c0024cff <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0024c9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024c9d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024ca0:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024ca7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024caa:	01 ca                	add    edx,ecx
c0024cac:	83 c2 54             	add    edx,0x54
c0024caf:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0024cb3:	85 c0                	test   eax,eax
c0024cb5:	75 43                	jne    c0024cfa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0024cb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024cba:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024cbd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024cc4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024cc7:	01 ca                	add    edx,ecx
c0024cc9:	8d 4a 54             	lea    ecx,[edx+0x54]
c0024ccc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0024ccf:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0024cd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024cd6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024cd9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024ce0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024ce3:	01 ca                	add    edx,ecx
c0024ce5:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0024ceb:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0024cee:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0024cf2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024cf5:	83 e8 20             	sub    eax,0x20
c0024cf8:	eb 1a                	jmp    c0024d14 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0024cfa:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0024cfd:	eb 95                	jmp    c0024c94 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0024cff:	83 ec 0c             	sub    esp,0xc
c0024d02:	68 68 be 02 c0       	push   0xc002be68
c0024d07:	e8 73 4f ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c0024d0c:	83 c4 10             	add    esp,0x10
c0024d0f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024d14:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024d17:	5b                   	pop    ebx
c0024d18:	5e                   	pop    esi
c0024d19:	5f                   	pop    edi
c0024d1a:	5d                   	pop    ebp
c0024d1b:	c3                   	ret    

c0024d1c <PIC::disable()>:
c0024d1c:	55                   	push   ebp
c0024d1d:	89 e5                	mov    ebp,esp
c0024d1f:	83 ec 10             	sub    esp,0x10
c0024d22:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0024d28:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0024d2c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024d2f:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024d33:	ee                   	out    dx,al
c0024d34:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0024d3a:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0024d3e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0024d41:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0024d45:	ee                   	out    dx,al
c0024d46:	90                   	nop
c0024d47:	c9                   	leave  
c0024d48:	c3                   	ret    
c0024d49:	90                   	nop

c0024d4a <PIC::close(int, int, void*)>:
c0024d4a:	55                   	push   ebp
c0024d4b:	89 e5                	mov    ebp,esp
c0024d4d:	83 ec 08             	sub    esp,0x8
c0024d50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024d53:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d55:	83 c0 3c             	add    eax,0x3c
c0024d58:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d5a:	83 ec 0c             	sub    esp,0xc
c0024d5d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024d60:	ff d0                	call   eax
c0024d62:	83 c4 10             	add    esp,0x10
c0024d65:	b8 00 00 00 00       	mov    eax,0x0
c0024d6a:	c9                   	leave  
c0024d6b:	c3                   	ret    

c0024d6c <PIC::PIC()>:
c0024d6c:	83 ec 0c             	sub    esp,0xc
c0024d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d73:	83 ec 08             	sub    esp,0x8
c0024d76:	68 14 bf 02 c0       	push   0xc002bf14
c0024d7b:	50                   	push   eax
c0024d7c:	e8 17 f9 fe ff       	call   c0014698 <InterruptController::InterruptController(char const*)>
c0024d81:	83 c4 10             	add    esp,0x10
c0024d84:	ba 40 bf 02 c0       	mov    edx,0xc002bf40
c0024d89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d8d:	89 10                	mov    DWORD PTR [eax],edx
c0024d8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d93:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024d99:	0f b6 d0             	movzx  edx,al
c0024d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024da0:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0024da7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024db1:	0f b6 d0             	movzx  edx,al
c0024db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024db8:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0024dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dc1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024dc7:	8d 50 01             	lea    edx,[eax+0x1]
c0024dca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024dce:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024dd4:	0f b6 d0             	movzx  edx,al
c0024dd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ddb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024ddf:	83 e1 3f             	and    ecx,0x3f
c0024de2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024df0:	0f b6 d0             	movzx  edx,al
c0024df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024df7:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0024dfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e02:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024e08:	0f b6 d0             	movzx  edx,al
c0024e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e0f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0024e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e18:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024e1e:	8d 50 01             	lea    edx,[eax+0x1]
c0024e21:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024e25:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024e2b:	0f b6 d0             	movzx  edx,al
c0024e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e32:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024e36:	83 e1 3f             	and    ecx,0x3f
c0024e39:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024e3d:	90                   	nop
c0024e3e:	83 c4 0c             	add    esp,0xc
c0024e41:	c3                   	ret    

c0024e42 <PIC::ioWait()>:
c0024e42:	eb 00                	jmp    c0024e44 <PIC::ioWait()+0x2>
c0024e44:	eb 00                	jmp    c0024e46 <PIC::ioWait()+0x4>
c0024e46:	90                   	nop
c0024e47:	c3                   	ret    

c0024e48 <PIC::getIRQReg(int)>:
c0024e48:	55                   	push   ebp
c0024e49:	89 e5                	mov    ebp,esp
c0024e4b:	83 ec 10             	sub    esp,0x10
c0024e4e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024e51:	0f b6 c0             	movzx  eax,al
c0024e54:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024e5a:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0024e5d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024e60:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024e64:	ee                   	out    dx,al
c0024e65:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024e68:	0f b6 c0             	movzx  eax,al
c0024e6b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024e71:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0024e74:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024e77:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024e7b:	ee                   	out    dx,al
c0024e7c:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0024e82:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0024e86:	89 c2                	mov    edx,eax
c0024e88:	ec                   	in     al,dx
c0024e89:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0024e8c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024e8f:	0f b6 c0             	movzx  eax,al
c0024e92:	c1 e0 08             	shl    eax,0x8
c0024e95:	89 c1                	mov    ecx,eax
c0024e97:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0024e9d:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0024ea1:	89 c2                	mov    edx,eax
c0024ea3:	ec                   	in     al,dx
c0024ea4:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0024ea7:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0024eaa:	0f b6 c0             	movzx  eax,al
c0024ead:	09 c8                	or     eax,ecx
c0024eaf:	c9                   	leave  
c0024eb0:	c3                   	ret    
c0024eb1:	90                   	nop

c0024eb2 <PIC::eoi(unsigned char)>:
c0024eb2:	55                   	push   ebp
c0024eb3:	89 e5                	mov    ebp,esp
c0024eb5:	83 ec 14             	sub    esp,0x14
c0024eb8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024ebb:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0024ebe:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024ec2:	75 1e                	jne    c0024ee2 <PIC::eoi(unsigned char)+0x30>
c0024ec4:	6a 0b                	push   0xb
c0024ec6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ec9:	e8 7a ff ff ff       	call   c0024e48 <PIC::getIRQReg(int)>
c0024ece:	83 c4 08             	add    esp,0x8
c0024ed1:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0024ed5:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0024ed9:	25 80 00 00 00       	and    eax,0x80
c0024ede:	85 c0                	test   eax,eax
c0024ee0:	74 5f                	je     c0024f41 <PIC::eoi(unsigned char)+0x8f>
c0024ee2:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0024ee6:	75 2d                	jne    c0024f15 <PIC::eoi(unsigned char)+0x63>
c0024ee8:	6a 0b                	push   0xb
c0024eea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024eed:	e8 56 ff ff ff       	call   c0024e48 <PIC::getIRQReg(int)>
c0024ef2:	83 c4 08             	add    esp,0x8
c0024ef5:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0024ef9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024efc:	66 85 c0             	test   ax,ax
c0024eff:	78 14                	js     c0024f15 <PIC::eoi(unsigned char)+0x63>
c0024f01:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0024f07:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0024f0b:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024f0e:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024f12:	ee                   	out    dx,al
c0024f13:	eb 2d                	jmp    c0024f42 <PIC::eoi(unsigned char)+0x90>
c0024f15:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024f19:	76 12                	jbe    c0024f2d <PIC::eoi(unsigned char)+0x7b>
c0024f1b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024f21:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0024f25:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024f28:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024f2c:	ee                   	out    dx,al
c0024f2d:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024f33:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0024f37:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024f3a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024f3e:	ee                   	out    dx,al
c0024f3f:	eb 01                	jmp    c0024f42 <PIC::eoi(unsigned char)+0x90>
c0024f41:	90                   	nop
c0024f42:	c9                   	leave  
c0024f43:	c3                   	ret    

c0024f44 <PIC::remap()>:
c0024f44:	55                   	push   ebp
c0024f45:	89 e5                	mov    ebp,esp
c0024f47:	83 ec 48             	sub    esp,0x48
c0024f4a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0024f51:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0024f58:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0024f5e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0024f61:	89 c2                	mov    edx,eax
c0024f63:	ec                   	in     al,dx
c0024f64:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0024f67:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0024f6a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0024f6d:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0024f73:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0024f76:	89 c2                	mov    edx,eax
c0024f78:	ec                   	in     al,dx
c0024f79:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0024f7c:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0024f7f:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0024f82:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0024f88:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0024f8c:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0024f8f:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0024f92:	ee                   	out    dx,al
c0024f93:	83 ec 0c             	sub    esp,0xc
c0024f96:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f99:	e8 a4 fe ff ff       	call   c0024e42 <PIC::ioWait()>
c0024f9e:	83 c4 10             	add    esp,0x10
c0024fa1:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0024fa7:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0024fab:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0024fae:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0024fb1:	ee                   	out    dx,al
c0024fb2:	83 ec 0c             	sub    esp,0xc
c0024fb5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024fb8:	e8 85 fe ff ff       	call   c0024e42 <PIC::ioWait()>
c0024fbd:	83 c4 10             	add    esp,0x10
c0024fc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0024fc3:	0f b6 c0             	movzx  eax,al
c0024fc6:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0024fcc:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0024fcf:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0024fd2:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0024fd5:	ee                   	out    dx,al
c0024fd6:	83 ec 0c             	sub    esp,0xc
c0024fd9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024fdc:	e8 61 fe ff ff       	call   c0024e42 <PIC::ioWait()>
c0024fe1:	83 c4 10             	add    esp,0x10
c0024fe4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024fe7:	0f b6 c0             	movzx  eax,al
c0024fea:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0024ff0:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0024ff3:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0024ff6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024ff9:	ee                   	out    dx,al
c0024ffa:	83 ec 0c             	sub    esp,0xc
c0024ffd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025000:	e8 3d fe ff ff       	call   c0024e42 <PIC::ioWait()>
c0025005:	83 c4 10             	add    esp,0x10
c0025008:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002500e:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025012:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025015:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025018:	ee                   	out    dx,al
c0025019:	83 ec 0c             	sub    esp,0xc
c002501c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002501f:	e8 1e fe ff ff       	call   c0024e42 <PIC::ioWait()>
c0025024:	83 c4 10             	add    esp,0x10
c0025027:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002502d:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025031:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025034:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025037:	ee                   	out    dx,al
c0025038:	83 ec 0c             	sub    esp,0xc
c002503b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002503e:	e8 ff fd ff ff       	call   c0024e42 <PIC::ioWait()>
c0025043:	83 c4 10             	add    esp,0x10
c0025046:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002504c:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025050:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025053:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025056:	ee                   	out    dx,al
c0025057:	83 ec 0c             	sub    esp,0xc
c002505a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002505d:	e8 e0 fd ff ff       	call   c0024e42 <PIC::ioWait()>
c0025062:	83 c4 10             	add    esp,0x10
c0025065:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002506b:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002506f:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025072:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025075:	ee                   	out    dx,al
c0025076:	83 ec 0c             	sub    esp,0xc
c0025079:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002507c:	e8 c1 fd ff ff       	call   c0024e42 <PIC::ioWait()>
c0025081:	83 c4 10             	add    esp,0x10
c0025084:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025088:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c002508e:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025091:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025094:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025097:	ee                   	out    dx,al
c0025098:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002509c:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00250a2:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00250a5:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00250a8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00250ab:	ee                   	out    dx,al
c00250ac:	90                   	nop
c00250ad:	c9                   	leave  
c00250ae:	c3                   	ret    
c00250af:	90                   	nop

c00250b0 <PIC::open(int, int, void*)>:
c00250b0:	55                   	push   ebp
c00250b1:	89 e5                	mov    ebp,esp
c00250b3:	83 ec 18             	sub    esp,0x18
c00250b6:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00250bc:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00250c0:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00250c3:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00250c7:	ee                   	out    dx,al
c00250c8:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00250ce:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00250d2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00250d5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00250d9:	ee                   	out    dx,al
c00250da:	83 ec 0c             	sub    esp,0xc
c00250dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00250e0:	e8 5f fe ff ff       	call   c0024f44 <PIC::remap()>
c00250e5:	83 c4 10             	add    esp,0x10
c00250e8:	b8 00 00 00 00       	mov    eax,0x0
c00250ed:	c9                   	leave  
c00250ee:	c3                   	ret    
c00250ef:	90                   	nop

c00250f0 <APICTimer::close(int, int, void*)>:
c00250f0:	b8 00 00 00 00       	mov    eax,0x0
c00250f5:	c3                   	ret    

c00250f6 <apicTimerHandler(regs*, void*)>:
c00250f6:	83 ec 0c             	sub    esp,0xc
c00250f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00250fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00250ff:	99                   	cdq    
c0025100:	52                   	push   edx
c0025101:	50                   	push   eax
c0025102:	6a 00                	push   0x0
c0025104:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025109:	e8 8e 07 00 00       	call   c002589c <__udivdi3>
c002510e:	83 c4 10             	add    esp,0x10
c0025111:	83 ec 08             	sub    esp,0x8
c0025114:	52                   	push   edx
c0025115:	50                   	push   eax
c0025116:	e8 7c 14 ff ff       	call   c0016597 <timerHandler(unsigned long long)>
c002511b:	83 c4 10             	add    esp,0x10
c002511e:	90                   	nop
c002511f:	83 c4 0c             	add    esp,0xc
c0025122:	c3                   	ret    
c0025123:	90                   	nop

c0025124 <APICTimer::write(int)>:
c0025124:	53                   	push   ebx
c0025125:	83 ec 28             	sub    esp,0x28
c0025128:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002512c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025130:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025136:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c002513b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025141:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025147:	83 ec 0c             	sub    esp,0xc
c002514a:	50                   	push   eax
c002514b:	e8 de f4 ff ff       	call   c002462e <APIC::getBase()>
c0025150:	83 c4 10             	add    esp,0x10
c0025153:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025157:	a1 70 d7 02 c0       	mov    eax,ds:0xc002d770
c002515c:	8b 15 74 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d774
c0025162:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025166:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002516e:	05 e0 03 00 00       	add    eax,0x3e0
c0025173:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025179:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002517d:	05 80 03 00 00       	add    eax,0x380
c0025182:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025188:	fb                   	sti    
c0025189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002518d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025191:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025196:	83 d2 00             	adc    edx,0x0
c0025199:	89 c1                	mov    ecx,eax
c002519b:	89 d3                	mov    ebx,edx
c002519d:	a1 70 d7 02 c0       	mov    eax,ds:0xc002d770
c00251a2:	8b 15 74 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d774
c00251a8:	39 c8                	cmp    eax,ecx
c00251aa:	89 d0                	mov    eax,edx
c00251ac:	19 d8                	sbb    eax,ebx
c00251ae:	73 02                	jae    c00251b2 <APICTimer::write(int)+0x8e>
c00251b0:	eb d7                	jmp    c0025189 <APICTimer::write(int)+0x65>
c00251b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00251b6:	05 20 03 00 00       	add    eax,0x320
c00251bb:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00251c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00251c5:	05 90 03 00 00       	add    eax,0x390
c00251ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00251cc:	f7 d0                	not    eax
c00251ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00251d2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00251d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00251da:	ba 00 00 00 00       	mov    edx,0x0
c00251df:	f7 f3                	div    ebx
c00251e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00251e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00251e9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00251ef:	0d 00 00 02 00       	or     eax,0x20000
c00251f4:	89 c2                	mov    edx,eax
c00251f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00251fa:	05 20 03 00 00       	add    eax,0x320
c00251ff:	89 10                	mov    DWORD PTR [eax],edx
c0025201:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025205:	05 e0 03 00 00       	add    eax,0x3e0
c002520a:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025210:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025214:	05 80 03 00 00       	add    eax,0x380
c0025219:	89 c2                	mov    edx,eax
c002521b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002521f:	89 02                	mov    DWORD PTR [edx],eax
c0025221:	90                   	nop
c0025222:	83 c4 28             	add    esp,0x28
c0025225:	5b                   	pop    ebx
c0025226:	c3                   	ret    
c0025227:	90                   	nop

c0025228 <APICTimer::open(int, int, void*)>:
c0025228:	57                   	push   edi
c0025229:	56                   	push   esi
c002522a:	53                   	push   ebx
c002522b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002522f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025231:	83 c0 24             	add    eax,0x24
c0025234:	8b 00                	mov    eax,DWORD PTR [eax]
c0025236:	83 ec 08             	sub    esp,0x8
c0025239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002523d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025241:	ff d0                	call   eax
c0025243:	83 c4 10             	add    esp,0x10
c0025246:	a1 e8 d0 02 c0       	mov    eax,ds:0xc002d0e8
c002524b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025251:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025257:	83 ec 0c             	sub    esp,0xc
c002525a:	50                   	push   eax
c002525b:	e8 ce f3 ff ff       	call   c002462e <APIC::getBase()>
c0025260:	83 c4 10             	add    esp,0x10
c0025263:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0025269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002526d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025273:	0f b6 f8             	movzx  edi,al
c0025276:	89 d0                	mov    eax,edx
c0025278:	ba 00 00 00 00       	mov    edx,0x0
c002527d:	89 c1                	mov    ecx,eax
c002527f:	80 e5 ff             	and    ch,0xff
c0025282:	89 cb                	mov    ebx,ecx
c0025284:	0f b6 f2             	movzx  esi,dl
c0025287:	89 d8                	mov    eax,ebx
c0025289:	89 f2                	mov    edx,esi
c002528b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002528f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025292:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025296:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002529a:	83 e0 00             	and    eax,0x0
c002529d:	09 d0                	or     eax,edx
c002529f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00252a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252a7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00252ad:	8d 50 01             	lea    edx,[eax+0x1]
c00252b0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00252b4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00252ba:	0f b6 d0             	movzx  edx,al
c00252bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252c1:	83 c2 08             	add    edx,0x8
c00252c4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00252c8:	0f b6 c9             	movzx  ecx,cl
c00252cb:	81 c9 00 00 01 00    	or     ecx,0x10000
c00252d1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00252d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00252dd:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00252e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00252eb:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00252f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00252f5:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00252fb:	83 ec 0c             	sub    esp,0xc
c00252fe:	51                   	push   ecx
c00252ff:	6a 01                	push   0x1
c0025301:	68 f6 50 02 c0       	push   0xc00250f6
c0025306:	52                   	push   edx
c0025307:	50                   	push   eax
c0025308:	e8 c7 e9 fe ff       	call   c0013cd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002530d:	83 c4 20             	add    esp,0x20
c0025310:	89 c2                	mov    edx,eax
c0025312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025316:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002531c:	b8 00 00 00 00       	mov    eax,0x0
c0025321:	5b                   	pop    ebx
c0025322:	5e                   	pop    esi
c0025323:	5f                   	pop    edi
c0025324:	c3                   	ret    
c0025325:	90                   	nop

c0025326 <APICTimer::APICTimer()>:
c0025326:	83 ec 0c             	sub    esp,0xc
c0025329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002532d:	83 ec 08             	sub    esp,0x8
c0025330:	68 80 bf 02 c0       	push   0xc002bf80
c0025335:	50                   	push   eax
c0025336:	e8 cd 11 ff ff       	call   c0016508 <Timer::Timer(char const*)>
c002533b:	83 c4 10             	add    esp,0x10
c002533e:	ba 94 bf 02 c0       	mov    edx,0xc002bf94
c0025343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025347:	89 10                	mov    DWORD PTR [eax],edx
c0025349:	90                   	nop
c002534a:	83 c4 0c             	add    esp,0xc
c002534d:	c3                   	ret    

c002534e <PIT::write(int)>:
c002534e:	83 ec 10             	sub    esp,0x10
c0025351:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025355:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025359:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002535f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025363:	a3 84 f4 02 c0       	mov    ds:0xc002f484,eax
c0025368:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002536d:	99                   	cdq    
c002536e:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0025372:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025376:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002537d:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0025382:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0025386:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002538b:	ee                   	out    dx,al
c002538c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025390:	0f b6 c0             	movzx  eax,al
c0025393:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002539a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002539e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00253a2:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00253a7:	ee                   	out    dx,al
c00253a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00253ac:	c1 f8 08             	sar    eax,0x8
c00253af:	0f b6 c0             	movzx  eax,al
c00253b2:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00253b9:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00253bd:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00253c1:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00253c6:	ee                   	out    dx,al
c00253c7:	90                   	nop
c00253c8:	83 c4 10             	add    esp,0x10
c00253cb:	c3                   	ret    

c00253cc <pitHandler(regs*, void*)>:
c00253cc:	83 ec 0c             	sub    esp,0xc
c00253cf:	a1 84 f4 02 c0       	mov    eax,ds:0xc002f484
c00253d4:	99                   	cdq    
c00253d5:	52                   	push   edx
c00253d6:	50                   	push   eax
c00253d7:	6a 00                	push   0x0
c00253d9:	68 00 ca 9a 3b       	push   0x3b9aca00
c00253de:	e8 b9 04 00 00       	call   c002589c <__udivdi3>
c00253e3:	83 c4 10             	add    esp,0x10
c00253e6:	83 ec 08             	sub    esp,0x8
c00253e9:	52                   	push   edx
c00253ea:	50                   	push   eax
c00253eb:	e8 a7 11 ff ff       	call   c0016597 <timerHandler(unsigned long long)>
c00253f0:	83 c4 10             	add    esp,0x10
c00253f3:	90                   	nop
c00253f4:	83 c4 0c             	add    esp,0xc
c00253f7:	c3                   	ret    

c00253f8 <PIT::open(int, int, void*)>:
c00253f8:	83 ec 0c             	sub    esp,0xc
c00253fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0025401:	83 c0 24             	add    eax,0x24
c0025404:	8b 00                	mov    eax,DWORD PTR [eax]
c0025406:	83 ec 08             	sub    esp,0x8
c0025409:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002540d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025411:	ff d0                	call   eax
c0025413:	83 c4 10             	add    esp,0x10
c0025416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002541a:	83 ec 0c             	sub    esp,0xc
c002541d:	6a 00                	push   0x0
c002541f:	6a 01                	push   0x1
c0025421:	68 cc 53 02 c0       	push   0xc00253cc
c0025426:	6a 00                	push   0x0
c0025428:	50                   	push   eax
c0025429:	e8 a6 e8 fe ff       	call   c0013cd4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002542e:	83 c4 20             	add    esp,0x20
c0025431:	89 c2                	mov    edx,eax
c0025433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025437:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002543d:	b8 00 00 00 00       	mov    eax,0x0
c0025442:	83 c4 0c             	add    esp,0xc
c0025445:	c3                   	ret    

c0025446 <PIT::close(int, int, void*)>:
c0025446:	83 ec 0c             	sub    esp,0xc
c0025449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002544d:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0025457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002545b:	6a 01                	push   0x1
c002545d:	68 cc 53 02 c0       	push   0xc00253cc
c0025462:	6a 00                	push   0x0
c0025464:	50                   	push   eax
c0025465:	e8 a8 e8 fe ff       	call   c0013d12 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002546a:	83 c4 10             	add    esp,0x10
c002546d:	b8 00 00 00 00       	mov    eax,0x0
c0025472:	83 c4 0c             	add    esp,0xc
c0025475:	c3                   	ret    

c0025476 <PIT::PIT()>:
c0025476:	83 ec 0c             	sub    esp,0xc
c0025479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002547d:	83 ec 08             	sub    esp,0x8
c0025480:	68 bc bf 02 c0       	push   0xc002bfbc
c0025485:	50                   	push   eax
c0025486:	e8 7d 10 ff ff       	call   c0016508 <Timer::Timer(char const*)>
c002548b:	83 c4 10             	add    esp,0x10
c002548e:	ba e4 bf 02 c0       	mov    edx,0xc002bfe4
c0025493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025497:	89 10                	mov    DWORD PTR [eax],edx
c0025499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002549d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00254a3:	0f b6 d0             	movzx  edx,al
c00254a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254aa:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00254b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254b5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00254bb:	0f b6 d0             	movzx  edx,al
c00254be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254c2:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00254c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254cb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00254d1:	8d 50 01             	lea    edx,[eax+0x1]
c00254d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00254d8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00254de:	0f b6 d0             	movzx  edx,al
c00254e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254e5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00254e9:	83 e1 3f             	and    ecx,0x3f
c00254ec:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00254f0:	90                   	nop
c00254f1:	83 c4 0c             	add    esp,0xc
c00254f4:	c3                   	ret    
c00254f5:	66 90                	xchg   ax,ax
c00254f7:	66 90                	xchg   ax,ax
c00254f9:	66 90                	xchg   ax,ax
c00254fb:	66 90                	xchg   ax,ax
c00254fd:	66 90                	xchg   ax,ax
c00254ff:	90                   	nop

c0025500 <avxDetect>:
c0025500:	b8 00 00 00 00       	mov    eax,0x0
c0025505:	c3                   	ret    

c0025506 <avxSave>:
c0025506:	c3                   	ret    

c0025507 <avxLoad>:
c0025507:	c3                   	ret    

c0025508 <avxInit>:
c0025508:	c3                   	ret    

c0025509 <avxClose>:
c0025509:	c3                   	ret    

c002550a <wouldSheSayYes>:
c002550a:	c3                   	ret    
c002550b:	49                   	dec    ecx
c002550c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0025510:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0025514:	75 20                	jne    c0025536 <sseDetect.noSSE+0x1>
c0025516:	4e                   	dec    esi
c0025517:	79 61                	jns    c002557a <x87Detect+0x14>
c0025519:	68 2e 2e 2e 00       	push   0x2e2e2e
c002551e:	66 90                	xchg   ax,ax

c0025520 <absolutelyNoChanceInHell>:
c0025520:	b8 01 00 00 00       	mov    eax,0x1
c0025525:	0f a2                	cpuid  
c0025527:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002552d:	74 06                	je     c0025535 <sseDetect.noSSE>
c002552f:	b8 01 00 00 00       	mov    eax,0x1
c0025534:	c3                   	ret    

c0025535 <sseDetect.noSSE>:
c0025535:	31 c0                	xor    eax,eax
c0025537:	c3                   	ret    

c0025538 <sseSave>:
c0025538:	0f ae 44 24 08       	fxsave [esp+0x8]
c002553d:	c3                   	ret    

c002553e <sseLoad>:
c002553e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0025543:	c3                   	ret    

c0025544 <sseInit>:
c0025544:	e8 43 00 00 00       	call   c002558c <x87Init>
c0025549:	0f 20 e0             	mov    eax,cr4
c002554c:	66 0d 00 06          	or     ax,0x600
c0025550:	0f 22 e0             	mov    cr4,eax
c0025553:	c3                   	ret    

c0025554 <sseClose>:
c0025554:	c3                   	ret    
c0025555:	66 90                	xchg   ax,ax
c0025557:	66 90                	xchg   ax,ax
c0025559:	66 90                	xchg   ax,ax
c002555b:	66 90                	xchg   ax,ax
c002555d:	66 90                	xchg   ax,ax
c002555f:	90                   	nop

c0025560 <value_37F>:
c0025560:	7f 03                	jg     c0025565 <value_37A+0x1>

c0025562 <value_37E>:
c0025562:	7e 03                	jle    c0025567 <x87Detect+0x1>

c0025564 <value_37A>:
c0025564:	7a 03                	jp     c0025569 <x87Detect+0x3>

c0025566 <x87Detect>:
c0025566:	b8 01 00 00 00       	mov    eax,0x1
c002556b:	0f a2                	cpuid  
c002556d:	f7 c2 01 00 00 00    	test   edx,0x1
c0025573:	74 06                	je     c002557b <x87Detect.nox87>
c0025575:	b8 01 00 00 00       	mov    eax,0x1
c002557a:	c3                   	ret    

c002557b <x87Detect.nox87>:
c002557b:	b8 00 00 00 00       	mov    eax,0x0
c0025580:	c3                   	ret    

c0025581 <x87Save>:
c0025581:	9b dd 74 24 08       	fsave  [esp+0x8]
c0025586:	c3                   	ret    

c0025587 <x87Load>:
c0025587:	dd 64 24 08          	frstor [esp+0x8]
c002558b:	c3                   	ret    

c002558c <x87Init>:
c002558c:	9b db e3             	finit  
c002558f:	0f 20 c0             	mov    eax,cr0
c0025592:	66 25 fb ff          	and    ax,0xfffb
c0025596:	66 0d 22 00          	or     ax,0x22
c002559a:	0f 22 c0             	mov    cr0,eax
c002559d:	0f 06                	clts   
c002559f:	d9 2d 64 55 02 c0    	fldcw  WORD PTR ds:0xc0025564
c00255a5:	c3                   	ret    

c00255a6 <x87Close>:
c00255a6:	c3                   	ret    
c00255a7:	90                   	nop

c00255a8 <__do_global_ctors_aux>:
c00255a8:	a1 9c 80 02 c0       	mov    eax,ds:0xc002809c
c00255ad:	83 f8 ff             	cmp    eax,0xffffffff
c00255b0:	74 1a                	je     c00255cc <__do_global_ctors_aux+0x24>
c00255b2:	55                   	push   ebp
c00255b3:	89 e5                	mov    ebp,esp
c00255b5:	53                   	push   ebx
c00255b6:	52                   	push   edx
c00255b7:	bb 9c 80 02 c0       	mov    ebx,0xc002809c
c00255bc:	ff d0                	call   eax
c00255be:	83 eb 04             	sub    ebx,0x4
c00255c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00255c3:	83 f8 ff             	cmp    eax,0xffffffff
c00255c6:	75 f4                	jne    c00255bc <__do_global_ctors_aux+0x14>
c00255c8:	58                   	pop    eax
c00255c9:	5b                   	pop    ebx
c00255ca:	5d                   	pop    ebp
c00255cb:	c3                   	ret    
c00255cc:	c3                   	ret    
c00255cd:	66 90                	xchg   ax,ax
c00255cf:	90                   	nop

c00255d0 <__divdi3>:
c00255d0:	55                   	push   ebp
c00255d1:	57                   	push   edi
c00255d2:	56                   	push   esi
c00255d3:	53                   	push   ebx
c00255d4:	83 ec 1c             	sub    esp,0x1c
c00255d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00255db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00255df:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00255e2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00255e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00255ea:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00255ee:	85 db                	test   ebx,ebx
c00255f0:	0f 88 8e 00 00 00    	js     c0025684 <__divdi3+0xb4>
c00255f6:	89 dd                	mov    ebp,ebx
c00255f8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0025600:	89 d3                	mov    ebx,edx
c0025602:	85 d2                	test   edx,edx
c0025604:	79 0d                	jns    c0025613 <__divdi3+0x43>
c0025606:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002560a:	f7 d8                	neg    eax
c002560c:	83 d2 00             	adc    edx,0x0
c002560f:	f7 da                	neg    edx
c0025611:	89 d3                	mov    ebx,edx
c0025613:	89 c7                	mov    edi,eax
c0025615:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025618:	85 db                	test   ebx,ebx
c002561a:	75 48                	jne    c0025664 <__divdi3+0x94>
c002561c:	39 ef                	cmp    edi,ebp
c002561e:	76 24                	jbe    c0025644 <__divdi3+0x74>
c0025620:	89 ea                	mov    edx,ebp
c0025622:	f7 f7                	div    edi
c0025624:	89 c1                	mov    ecx,eax
c0025626:	31 f6                	xor    esi,esi
c0025628:	89 c8                	mov    eax,ecx
c002562a:	89 f2                	mov    edx,esi
c002562c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025630:	85 c9                	test   ecx,ecx
c0025632:	74 07                	je     c002563b <__divdi3+0x6b>
c0025634:	f7 d8                	neg    eax
c0025636:	83 d2 00             	adc    edx,0x0
c0025639:	f7 da                	neg    edx
c002563b:	83 c4 1c             	add    esp,0x1c
c002563e:	5b                   	pop    ebx
c002563f:	5e                   	pop    esi
c0025640:	5f                   	pop    edi
c0025641:	5d                   	pop    ebp
c0025642:	c3                   	ret    
c0025643:	90                   	nop
c0025644:	85 ff                	test   edi,edi
c0025646:	75 0b                	jne    c0025653 <__divdi3+0x83>
c0025648:	b8 01 00 00 00       	mov    eax,0x1
c002564d:	31 d2                	xor    edx,edx
c002564f:	f7 f3                	div    ebx
c0025651:	89 c7                	mov    edi,eax
c0025653:	31 d2                	xor    edx,edx
c0025655:	89 e8                	mov    eax,ebp
c0025657:	f7 f7                	div    edi
c0025659:	89 c6                	mov    esi,eax
c002565b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002565e:	f7 f7                	div    edi
c0025660:	89 c1                	mov    ecx,eax
c0025662:	eb c4                	jmp    c0025628 <__divdi3+0x58>
c0025664:	39 eb                	cmp    ebx,ebp
c0025666:	77 3c                	ja     c00256a4 <__divdi3+0xd4>
c0025668:	0f bd f3             	bsr    esi,ebx
c002566b:	83 f6 1f             	xor    esi,0x1f
c002566e:	75 40                	jne    c00256b0 <__divdi3+0xe0>
c0025670:	39 eb                	cmp    ebx,ebp
c0025672:	72 09                	jb     c002567d <__divdi3+0xad>
c0025674:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0025677:	0f 87 97 00 00 00    	ja     c0025714 <__divdi3+0x144>
c002567d:	b9 01 00 00 00       	mov    ecx,0x1
c0025682:	eb a4                	jmp    c0025628 <__divdi3+0x58>
c0025684:	f7 d9                	neg    ecx
c0025686:	83 d3 00             	adc    ebx,0x0
c0025689:	f7 db                	neg    ebx
c002568b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002568e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025692:	89 dd                	mov    ebp,ebx
c0025694:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002569c:	e9 5f ff ff ff       	jmp    c0025600 <__divdi3+0x30>
c00256a1:	8d 76 00             	lea    esi,[esi+0x0]
c00256a4:	31 f6                	xor    esi,esi
c00256a6:	31 c9                	xor    ecx,ecx
c00256a8:	e9 7b ff ff ff       	jmp    c0025628 <__divdi3+0x58>
c00256ad:	8d 76 00             	lea    esi,[esi+0x0]
c00256b0:	b8 20 00 00 00       	mov    eax,0x20
c00256b5:	29 f0                	sub    eax,esi
c00256b7:	89 f1                	mov    ecx,esi
c00256b9:	d3 e3                	shl    ebx,cl
c00256bb:	89 fa                	mov    edx,edi
c00256bd:	88 c1                	mov    cl,al
c00256bf:	d3 ea                	shr    edx,cl
c00256c1:	09 da                	or     edx,ebx
c00256c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00256c7:	89 f1                	mov    ecx,esi
c00256c9:	d3 e7                	shl    edi,cl
c00256cb:	89 eb                	mov    ebx,ebp
c00256cd:	88 c1                	mov    cl,al
c00256cf:	d3 eb                	shr    ebx,cl
c00256d1:	89 f1                	mov    ecx,esi
c00256d3:	d3 e5                	shl    ebp,cl
c00256d5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00256d8:	88 c1                	mov    cl,al
c00256da:	d3 ea                	shr    edx,cl
c00256dc:	09 d5                	or     ebp,edx
c00256de:	89 e8                	mov    eax,ebp
c00256e0:	89 da                	mov    edx,ebx
c00256e2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00256e6:	89 d3                	mov    ebx,edx
c00256e8:	89 c5                	mov    ebp,eax
c00256ea:	f7 e7                	mul    edi
c00256ec:	39 d3                	cmp    ebx,edx
c00256ee:	72 18                	jb     c0025708 <__divdi3+0x138>
c00256f0:	74 0a                	je     c00256fc <__divdi3+0x12c>
c00256f2:	89 e9                	mov    ecx,ebp
c00256f4:	31 f6                	xor    esi,esi
c00256f6:	e9 2d ff ff ff       	jmp    c0025628 <__divdi3+0x58>
c00256fb:	90                   	nop
c00256fc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00256ff:	89 f1                	mov    ecx,esi
c0025701:	d3 e7                	shl    edi,cl
c0025703:	39 c7                	cmp    edi,eax
c0025705:	73 eb                	jae    c00256f2 <__divdi3+0x122>
c0025707:	90                   	nop
c0025708:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002570b:	31 f6                	xor    esi,esi
c002570d:	e9 16 ff ff ff       	jmp    c0025628 <__divdi3+0x58>
c0025712:	66 90                	xchg   ax,ax
c0025714:	31 c9                	xor    ecx,ecx
c0025716:	e9 0d ff ff ff       	jmp    c0025628 <__divdi3+0x58>
c002571b:	90                   	nop

c002571c <__moddi3>:
c002571c:	55                   	push   ebp
c002571d:	57                   	push   edi
c002571e:	56                   	push   esi
c002571f:	53                   	push   ebx
c0025720:	83 ec 2c             	sub    esp,0x2c
c0025723:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0025727:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002572b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002572f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0025733:	85 db                	test   ebx,ebx
c0025735:	0f 88 85 00 00 00    	js     c00257c0 <__moddi3+0xa4>
c002573b:	89 de                	mov    esi,ebx
c002573d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0025745:	89 d7                	mov    edi,edx
c0025747:	85 d2                	test   edx,edx
c0025749:	79 09                	jns    c0025754 <__moddi3+0x38>
c002574b:	f7 d8                	neg    eax
c002574d:	83 d2 00             	adc    edx,0x0
c0025750:	f7 da                	neg    edx
c0025752:	89 d7                	mov    edi,edx
c0025754:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025758:	89 cd                	mov    ebp,ecx
c002575a:	85 ff                	test   edi,edi
c002575c:	75 52                	jne    c00257b0 <__moddi3+0x94>
c002575e:	89 c3                	mov    ebx,eax
c0025760:	39 f0                	cmp    eax,esi
c0025762:	76 24                	jbe    c0025788 <__moddi3+0x6c>
c0025764:	89 c8                	mov    eax,ecx
c0025766:	89 f2                	mov    edx,esi
c0025768:	f7 f3                	div    ebx
c002576a:	89 d6                	mov    esi,edx
c002576c:	89 f0                	mov    eax,esi
c002576e:	31 d2                	xor    edx,edx
c0025770:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025774:	85 c9                	test   ecx,ecx
c0025776:	74 07                	je     c002577f <__moddi3+0x63>
c0025778:	f7 d8                	neg    eax
c002577a:	83 d2 00             	adc    edx,0x0
c002577d:	f7 da                	neg    edx
c002577f:	83 c4 2c             	add    esp,0x2c
c0025782:	5b                   	pop    ebx
c0025783:	5e                   	pop    esi
c0025784:	5f                   	pop    edi
c0025785:	5d                   	pop    ebp
c0025786:	c3                   	ret    
c0025787:	90                   	nop
c0025788:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002578c:	85 db                	test   ebx,ebx
c002578e:	75 0d                	jne    c002579d <__moddi3+0x81>
c0025790:	b8 01 00 00 00       	mov    eax,0x1
c0025795:	31 d2                	xor    edx,edx
c0025797:	f7 f7                	div    edi
c0025799:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002579d:	89 f0                	mov    eax,esi
c002579f:	31 d2                	xor    edx,edx
c00257a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00257a5:	f7 f7                	div    edi
c00257a7:	89 e8                	mov    eax,ebp
c00257a9:	f7 f7                	div    edi
c00257ab:	89 d6                	mov    esi,edx
c00257ad:	eb bd                	jmp    c002576c <__moddi3+0x50>
c00257af:	90                   	nop
c00257b0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00257b4:	39 f7                	cmp    edi,esi
c00257b6:	76 20                	jbe    c00257d8 <__moddi3+0xbc>
c00257b8:	89 c8                	mov    eax,ecx
c00257ba:	89 f2                	mov    edx,esi
c00257bc:	eb b2                	jmp    c0025770 <__moddi3+0x54>
c00257be:	66 90                	xchg   ax,ax
c00257c0:	f7 d9                	neg    ecx
c00257c2:	83 d3 00             	adc    ebx,0x0
c00257c5:	f7 db                	neg    ebx
c00257c7:	89 de                	mov    esi,ebx
c00257c9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00257d1:	e9 6f ff ff ff       	jmp    c0025745 <__moddi3+0x29>
c00257d6:	66 90                	xchg   ax,ax
c00257d8:	0f bd c7             	bsr    eax,edi
c00257db:	83 f0 1f             	xor    eax,0x1f
c00257de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00257e2:	75 24                	jne    c0025808 <__moddi3+0xec>
c00257e4:	39 f7                	cmp    edi,esi
c00257e6:	72 06                	jb     c00257ee <__moddi3+0xd2>
c00257e8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00257ec:	77 0c                	ja     c00257fa <__moddi3+0xde>
c00257ee:	89 e9                	mov    ecx,ebp
c00257f0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00257f4:	19 fe                	sbb    esi,edi
c00257f6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00257fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00257fe:	89 f2                	mov    edx,esi
c0025800:	e9 6b ff ff ff       	jmp    c0025770 <__moddi3+0x54>
c0025805:	8d 76 00             	lea    esi,[esi+0x0]
c0025808:	b8 20 00 00 00       	mov    eax,0x20
c002580d:	89 c2                	mov    edx,eax
c002580f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025813:	29 da                	sub    edx,ebx
c0025815:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025819:	88 d9                	mov    cl,bl
c002581b:	d3 e7                	shl    edi,cl
c002581d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025821:	88 d1                	mov    cl,dl
c0025823:	d3 e8                	shr    eax,cl
c0025825:	09 c7                	or     edi,eax
c0025827:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002582b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002582f:	89 d8                	mov    eax,ebx
c0025831:	88 d9                	mov    cl,bl
c0025833:	d3 e7                	shl    edi,cl
c0025835:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0025839:	89 f3                	mov    ebx,esi
c002583b:	88 d1                	mov    cl,dl
c002583d:	d3 eb                	shr    ebx,cl
c002583f:	89 c7                	mov    edi,eax
c0025841:	88 c1                	mov    cl,al
c0025843:	d3 e6                	shl    esi,cl
c0025845:	89 e8                	mov    eax,ebp
c0025847:	88 d1                	mov    cl,dl
c0025849:	d3 e8                	shr    eax,cl
c002584b:	09 f0                	or     eax,esi
c002584d:	89 f9                	mov    ecx,edi
c002584f:	d3 e5                	shl    ebp,cl
c0025851:	89 da                	mov    edx,ebx
c0025853:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0025857:	89 d3                	mov    ebx,edx
c0025859:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002585d:	89 c6                	mov    esi,eax
c002585f:	89 d1                	mov    ecx,edx
c0025861:	39 d3                	cmp    ebx,edx
c0025863:	72 27                	jb     c002588c <__moddi3+0x170>
c0025865:	74 21                	je     c0025888 <__moddi3+0x16c>
c0025867:	29 f5                	sub    ebp,esi
c0025869:	19 cb                	sbb    ebx,ecx
c002586b:	89 de                	mov    esi,ebx
c002586d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0025871:	d3 e6                	shl    esi,cl
c0025873:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0025877:	89 f9                	mov    ecx,edi
c0025879:	d3 ed                	shr    ebp,cl
c002587b:	09 ee                	or     esi,ebp
c002587d:	89 f0                	mov    eax,esi
c002587f:	d3 eb                	shr    ebx,cl
c0025881:	89 da                	mov    edx,ebx
c0025883:	e9 e8 fe ff ff       	jmp    c0025770 <__moddi3+0x54>
c0025888:	39 c5                	cmp    ebp,eax
c002588a:	73 db                	jae    c0025867 <__moddi3+0x14b>
c002588c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0025890:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0025894:	89 d1                	mov    ecx,edx
c0025896:	89 c6                	mov    esi,eax
c0025898:	eb cd                	jmp    c0025867 <__moddi3+0x14b>
c002589a:	66 90                	xchg   ax,ax

c002589c <__udivdi3>:
c002589c:	55                   	push   ebp
c002589d:	57                   	push   edi
c002589e:	56                   	push   esi
c002589f:	53                   	push   ebx
c00258a0:	83 ec 1c             	sub    esp,0x1c
c00258a3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00258a7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00258ab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00258af:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00258b3:	85 d2                	test   edx,edx
c00258b5:	75 41                	jne    c00258f8 <__udivdi3+0x5c>
c00258b7:	39 f7                	cmp    edi,esi
c00258b9:	76 15                	jbe    c00258d0 <__udivdi3+0x34>
c00258bb:	89 e8                	mov    eax,ebp
c00258bd:	89 f2                	mov    edx,esi
c00258bf:	f7 f7                	div    edi
c00258c1:	31 db                	xor    ebx,ebx
c00258c3:	89 da                	mov    edx,ebx
c00258c5:	83 c4 1c             	add    esp,0x1c
c00258c8:	5b                   	pop    ebx
c00258c9:	5e                   	pop    esi
c00258ca:	5f                   	pop    edi
c00258cb:	5d                   	pop    ebp
c00258cc:	c3                   	ret    
c00258cd:	8d 76 00             	lea    esi,[esi+0x0]
c00258d0:	89 f9                	mov    ecx,edi
c00258d2:	85 ff                	test   edi,edi
c00258d4:	75 0b                	jne    c00258e1 <__udivdi3+0x45>
c00258d6:	b8 01 00 00 00       	mov    eax,0x1
c00258db:	31 d2                	xor    edx,edx
c00258dd:	f7 f7                	div    edi
c00258df:	89 c1                	mov    ecx,eax
c00258e1:	31 d2                	xor    edx,edx
c00258e3:	89 f0                	mov    eax,esi
c00258e5:	f7 f1                	div    ecx
c00258e7:	89 c3                	mov    ebx,eax
c00258e9:	89 e8                	mov    eax,ebp
c00258eb:	f7 f1                	div    ecx
c00258ed:	89 da                	mov    edx,ebx
c00258ef:	83 c4 1c             	add    esp,0x1c
c00258f2:	5b                   	pop    ebx
c00258f3:	5e                   	pop    esi
c00258f4:	5f                   	pop    edi
c00258f5:	5d                   	pop    ebp
c00258f6:	c3                   	ret    
c00258f7:	90                   	nop
c00258f8:	39 f2                	cmp    edx,esi
c00258fa:	77 1c                	ja     c0025918 <__udivdi3+0x7c>
c00258fc:	0f bd da             	bsr    ebx,edx
c00258ff:	83 f3 1f             	xor    ebx,0x1f
c0025902:	75 24                	jne    c0025928 <__udivdi3+0x8c>
c0025904:	39 f2                	cmp    edx,esi
c0025906:	72 08                	jb     c0025910 <__udivdi3+0x74>
c0025908:	39 ef                	cmp    edi,ebp
c002590a:	0f 87 84 00 00 00    	ja     c0025994 <__udivdi3+0xf8>
c0025910:	b8 01 00 00 00       	mov    eax,0x1
c0025915:	eb ac                	jmp    c00258c3 <__udivdi3+0x27>
c0025917:	90                   	nop
c0025918:	31 db                	xor    ebx,ebx
c002591a:	31 c0                	xor    eax,eax
c002591c:	89 da                	mov    edx,ebx
c002591e:	83 c4 1c             	add    esp,0x1c
c0025921:	5b                   	pop    ebx
c0025922:	5e                   	pop    esi
c0025923:	5f                   	pop    edi
c0025924:	5d                   	pop    ebp
c0025925:	c3                   	ret    
c0025926:	66 90                	xchg   ax,ax
c0025928:	b8 20 00 00 00       	mov    eax,0x20
c002592d:	29 d8                	sub    eax,ebx
c002592f:	88 d9                	mov    cl,bl
c0025931:	d3 e2                	shl    edx,cl
c0025933:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0025937:	89 fa                	mov    edx,edi
c0025939:	88 c1                	mov    cl,al
c002593b:	d3 ea                	shr    edx,cl
c002593d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025941:	09 d1                	or     ecx,edx
c0025943:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025947:	88 d9                	mov    cl,bl
c0025949:	d3 e7                	shl    edi,cl
c002594b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002594f:	89 f7                	mov    edi,esi
c0025951:	88 c1                	mov    cl,al
c0025953:	d3 ef                	shr    edi,cl
c0025955:	88 d9                	mov    cl,bl
c0025957:	d3 e6                	shl    esi,cl
c0025959:	89 ea                	mov    edx,ebp
c002595b:	88 c1                	mov    cl,al
c002595d:	d3 ea                	shr    edx,cl
c002595f:	09 d6                	or     esi,edx
c0025961:	89 f0                	mov    eax,esi
c0025963:	89 fa                	mov    edx,edi
c0025965:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0025969:	89 d7                	mov    edi,edx
c002596b:	89 c6                	mov    esi,eax
c002596d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0025971:	39 d7                	cmp    edi,edx
c0025973:	72 13                	jb     c0025988 <__udivdi3+0xec>
c0025975:	74 09                	je     c0025980 <__udivdi3+0xe4>
c0025977:	89 f0                	mov    eax,esi
c0025979:	31 db                	xor    ebx,ebx
c002597b:	e9 43 ff ff ff       	jmp    c00258c3 <__udivdi3+0x27>
c0025980:	88 d9                	mov    cl,bl
c0025982:	d3 e5                	shl    ebp,cl
c0025984:	39 c5                	cmp    ebp,eax
c0025986:	73 ef                	jae    c0025977 <__udivdi3+0xdb>
c0025988:	8d 46 ff             	lea    eax,[esi-0x1]
c002598b:	31 db                	xor    ebx,ebx
c002598d:	e9 31 ff ff ff       	jmp    c00258c3 <__udivdi3+0x27>
c0025992:	66 90                	xchg   ax,ax
c0025994:	31 c0                	xor    eax,eax
c0025996:	e9 28 ff ff ff       	jmp    c00258c3 <__udivdi3+0x27>
c002599b:	90                   	nop

c002599c <__umoddi3>:
c002599c:	55                   	push   ebp
c002599d:	57                   	push   edi
c002599e:	56                   	push   esi
c002599f:	53                   	push   ebx
c00259a0:	83 ec 1c             	sub    esp,0x1c
c00259a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00259a7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00259ab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00259af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00259b3:	89 da                	mov    edx,ebx
c00259b5:	85 c0                	test   eax,eax
c00259b7:	75 37                	jne    c00259f0 <__umoddi3+0x54>
c00259b9:	39 df                	cmp    edi,ebx
c00259bb:	76 13                	jbe    c00259d0 <__umoddi3+0x34>
c00259bd:	89 f0                	mov    eax,esi
c00259bf:	f7 f7                	div    edi
c00259c1:	89 d0                	mov    eax,edx
c00259c3:	31 d2                	xor    edx,edx
c00259c5:	83 c4 1c             	add    esp,0x1c
c00259c8:	5b                   	pop    ebx
c00259c9:	5e                   	pop    esi
c00259ca:	5f                   	pop    edi
c00259cb:	5d                   	pop    ebp
c00259cc:	c3                   	ret    
c00259cd:	8d 76 00             	lea    esi,[esi+0x0]
c00259d0:	89 fd                	mov    ebp,edi
c00259d2:	85 ff                	test   edi,edi
c00259d4:	75 0b                	jne    c00259e1 <__umoddi3+0x45>
c00259d6:	b8 01 00 00 00       	mov    eax,0x1
c00259db:	31 d2                	xor    edx,edx
c00259dd:	f7 f7                	div    edi
c00259df:	89 c5                	mov    ebp,eax
c00259e1:	89 d8                	mov    eax,ebx
c00259e3:	31 d2                	xor    edx,edx
c00259e5:	f7 f5                	div    ebp
c00259e7:	89 f0                	mov    eax,esi
c00259e9:	f7 f5                	div    ebp
c00259eb:	89 d0                	mov    eax,edx
c00259ed:	eb d4                	jmp    c00259c3 <__umoddi3+0x27>
c00259ef:	90                   	nop
c00259f0:	89 f1                	mov    ecx,esi
c00259f2:	39 d8                	cmp    eax,ebx
c00259f4:	76 0a                	jbe    c0025a00 <__umoddi3+0x64>
c00259f6:	89 f0                	mov    eax,esi
c00259f8:	83 c4 1c             	add    esp,0x1c
c00259fb:	5b                   	pop    ebx
c00259fc:	5e                   	pop    esi
c00259fd:	5f                   	pop    edi
c00259fe:	5d                   	pop    ebp
c00259ff:	c3                   	ret    
c0025a00:	0f bd e8             	bsr    ebp,eax
c0025a03:	83 f5 1f             	xor    ebp,0x1f
c0025a06:	75 1c                	jne    c0025a24 <__umoddi3+0x88>
c0025a08:	39 d8                	cmp    eax,ebx
c0025a0a:	72 04                	jb     c0025a10 <__umoddi3+0x74>
c0025a0c:	39 f7                	cmp    edi,esi
c0025a0e:	77 08                	ja     c0025a18 <__umoddi3+0x7c>
c0025a10:	89 da                	mov    edx,ebx
c0025a12:	29 fe                	sub    esi,edi
c0025a14:	19 c2                	sbb    edx,eax
c0025a16:	89 f1                	mov    ecx,esi
c0025a18:	89 c8                	mov    eax,ecx
c0025a1a:	83 c4 1c             	add    esp,0x1c
c0025a1d:	5b                   	pop    ebx
c0025a1e:	5e                   	pop    esi
c0025a1f:	5f                   	pop    edi
c0025a20:	5d                   	pop    ebp
c0025a21:	c3                   	ret    
c0025a22:	66 90                	xchg   ax,ax
c0025a24:	ba 20 00 00 00       	mov    edx,0x20
c0025a29:	29 ea                	sub    edx,ebp
c0025a2b:	89 e9                	mov    ecx,ebp
c0025a2d:	d3 e0                	shl    eax,cl
c0025a2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025a33:	89 f8                	mov    eax,edi
c0025a35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025a39:	88 d1                	mov    cl,dl
c0025a3b:	d3 e8                	shr    eax,cl
c0025a3d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025a41:	09 c1                	or     ecx,eax
c0025a43:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025a47:	89 e9                	mov    ecx,ebp
c0025a49:	d3 e7                	shl    edi,cl
c0025a4b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0025a4f:	89 d8                	mov    eax,ebx
c0025a51:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025a55:	88 d1                	mov    cl,dl
c0025a57:	d3 e8                	shr    eax,cl
c0025a59:	89 c7                	mov    edi,eax
c0025a5b:	89 e9                	mov    ecx,ebp
c0025a5d:	d3 e3                	shl    ebx,cl
c0025a5f:	89 f0                	mov    eax,esi
c0025a61:	88 d1                	mov    cl,dl
c0025a63:	d3 e8                	shr    eax,cl
c0025a65:	09 d8                	or     eax,ebx
c0025a67:	89 e9                	mov    ecx,ebp
c0025a69:	d3 e6                	shl    esi,cl
c0025a6b:	89 f3                	mov    ebx,esi
c0025a6d:	89 fa                	mov    edx,edi
c0025a6f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0025a73:	89 d1                	mov    ecx,edx
c0025a75:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0025a79:	89 c6                	mov    esi,eax
c0025a7b:	89 d7                	mov    edi,edx
c0025a7d:	39 d1                	cmp    ecx,edx
c0025a7f:	72 27                	jb     c0025aa8 <__umoddi3+0x10c>
c0025a81:	74 21                	je     c0025aa4 <__umoddi3+0x108>
c0025a83:	89 ca                	mov    edx,ecx
c0025a85:	29 f3                	sub    ebx,esi
c0025a87:	19 fa                	sbb    edx,edi
c0025a89:	89 d0                	mov    eax,edx
c0025a8b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0025a8f:	d3 e0                	shl    eax,cl
c0025a91:	89 e9                	mov    ecx,ebp
c0025a93:	d3 eb                	shr    ebx,cl
c0025a95:	09 d8                	or     eax,ebx
c0025a97:	d3 ea                	shr    edx,cl
c0025a99:	83 c4 1c             	add    esp,0x1c
c0025a9c:	5b                   	pop    ebx
c0025a9d:	5e                   	pop    esi
c0025a9e:	5f                   	pop    edi
c0025a9f:	5d                   	pop    ebp
c0025aa0:	c3                   	ret    
c0025aa1:	8d 76 00             	lea    esi,[esi+0x0]
c0025aa4:	39 c3                	cmp    ebx,eax
c0025aa6:	73 db                	jae    c0025a83 <__umoddi3+0xe7>
c0025aa8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0025aac:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0025ab0:	89 d7                	mov    edi,edx
c0025ab2:	89 c6                	mov    esi,eax
c0025ab4:	eb cd                	jmp    c0025a83 <__umoddi3+0xe7>

c0025ab6 <__addsf3>:
c0025ab6:	55                   	push   ebp
c0025ab7:	89 e5                	mov    ebp,esp
c0025ab9:	57                   	push   edi
c0025aba:	56                   	push   esi
c0025abb:	53                   	push   ebx
c0025abc:	83 ec 08             	sub    esp,0x8
c0025abf:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025ac2:	89 fa                	mov    edx,edi
c0025ac4:	89 f8                	mov    eax,edi
c0025ac6:	c1 f8 17             	sar    eax,0x17
c0025ac9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025acc:	c1 e2 08             	shl    edx,0x8
c0025acf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025ad5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025ad8:	89 de                	mov    esi,ebx
c0025ada:	c1 fe 17             	sar    esi,0x17
c0025add:	c1 e3 08             	shl    ebx,0x8
c0025ae0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025ae6:	31 f0                	xor    eax,esi
c0025ae8:	0f 88 3b 01 00 00    	js     c0025c29 <__addsf3+0x173>
c0025aee:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0025af1:	29 f1                	sub    ecx,esi
c0025af3:	85 c9                	test   ecx,ecx
c0025af5:	7e 54                	jle    c0025b4b <__addsf3+0x95>
c0025af7:	89 f0                	mov    eax,esi
c0025af9:	84 c0                	test   al,al
c0025afb:	75 10                	jne    c0025b0d <__addsf3+0x57>
c0025afd:	85 db                	test   ebx,ebx
c0025aff:	0f 84 aa 02 00 00    	je     c0025daf <__addsf3+0x2f9>
c0025b05:	49                   	dec    ecx
c0025b06:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025b09:	74 38                	je     c0025b43 <__addsf3+0x8d>
c0025b0b:	eb 13                	jmp    c0025b20 <__addsf3+0x6a>
c0025b0d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025b10:	f7 d0                	not    eax
c0025b12:	84 c0                	test   al,al
c0025b14:	0f 84 95 02 00 00    	je     c0025daf <__addsf3+0x2f9>
c0025b1a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025b20:	83 f9 1f             	cmp    ecx,0x1f
c0025b23:	0f 8f 86 02 00 00    	jg     c0025daf <__addsf3+0x2f9>
c0025b29:	89 de                	mov    esi,ebx
c0025b2b:	d3 ee                	shr    esi,cl
c0025b2d:	b8 20 00 00 00       	mov    eax,0x20
c0025b32:	29 c8                	sub    eax,ecx
c0025b34:	89 c1                	mov    ecx,eax
c0025b36:	d3 e3                	shl    ebx,cl
c0025b38:	31 c0                	xor    eax,eax
c0025b3a:	85 db                	test   ebx,ebx
c0025b3c:	0f 95 c0             	setne  al
c0025b3f:	09 f0                	or     eax,esi
c0025b41:	01 d0                	add    eax,edx
c0025b43:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025b46:	e9 b6 00 00 00       	jmp    c0025c01 <__addsf3+0x14b>
c0025b4b:	74 5c                	je     c0025ba9 <__addsf3+0xf3>
c0025b4d:	89 f1                	mov    ecx,esi
c0025b4f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0025b52:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025b55:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0025b59:	75 14                	jne    c0025b6f <__addsf3+0xb9>
c0025b5b:	85 d2                	test   edx,edx
c0025b5d:	0f 84 4c 02 00 00    	je     c0025daf <__addsf3+0x2f9>
c0025b63:	49                   	dec    ecx
c0025b64:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025b67:	0f 84 94 00 00 00    	je     c0025c01 <__addsf3+0x14b>
c0025b6d:	eb 12                	jmp    c0025b81 <__addsf3+0xcb>
c0025b6f:	89 f0                	mov    eax,esi
c0025b71:	f7 d0                	not    eax
c0025b73:	84 c0                	test   al,al
c0025b75:	0f 84 34 02 00 00    	je     c0025daf <__addsf3+0x2f9>
c0025b7b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025b81:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025b84:	83 f9 1f             	cmp    ecx,0x1f
c0025b87:	0f 8f 22 02 00 00    	jg     c0025daf <__addsf3+0x2f9>
c0025b8d:	89 d7                	mov    edi,edx
c0025b8f:	d3 ef                	shr    edi,cl
c0025b91:	b8 20 00 00 00       	mov    eax,0x20
c0025b96:	29 c8                	sub    eax,ecx
c0025b98:	89 c1                	mov    ecx,eax
c0025b9a:	d3 e2                	shl    edx,cl
c0025b9c:	31 c0                	xor    eax,eax
c0025b9e:	85 d2                	test   edx,edx
c0025ba0:	0f 95 c0             	setne  al
c0025ba3:	09 f8                	or     eax,edi
c0025ba5:	01 d8                	add    eax,ebx
c0025ba7:	eb 58                	jmp    c0025c01 <__addsf3+0x14b>
c0025ba9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025bac:	8d 70 01             	lea    esi,[eax+0x1]
c0025baf:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0025bb5:	75 32                	jne    c0025be9 <__addsf3+0x133>
c0025bb7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0025bbb:	75 1f                	jne    c0025bdc <__addsf3+0x126>
c0025bbd:	85 d2                	test   edx,edx
c0025bbf:	0f 84 e0 01 00 00    	je     c0025da5 <__addsf3+0x2ef>
c0025bc5:	85 db                	test   ebx,ebx
c0025bc7:	0f 84 e2 01 00 00    	je     c0025daf <__addsf3+0x2f9>
c0025bcd:	89 d0                	mov    eax,edx
c0025bcf:	01 d8                	add    eax,ebx
c0025bd1:	0f 89 a9 01 00 00    	jns    c0025d80 <__addsf3+0x2ca>
c0025bd7:	e9 9d 01 00 00       	jmp    c0025d79 <__addsf3+0x2c3>
c0025bdc:	85 d2                	test   edx,edx
c0025bde:	0f 85 cb 01 00 00    	jne    c0025daf <__addsf3+0x2f9>
c0025be4:	e9 bc 01 00 00       	jmp    c0025da5 <__addsf3+0x2ef>
c0025be9:	31 c0                	xor    eax,eax
c0025beb:	89 f1                	mov    ecx,esi
c0025bed:	f7 d1                	not    ecx
c0025bef:	84 c9                	test   cl,cl
c0025bf1:	0f 84 90 01 00 00    	je     c0025d87 <__addsf3+0x2d1>
c0025bf7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025bfa:	d1 e8                	shr    eax,1
c0025bfc:	e9 86 01 00 00       	jmp    c0025d87 <__addsf3+0x2d1>
c0025c01:	85 c0                	test   eax,eax
c0025c03:	0f 89 7e 01 00 00    	jns    c0025d87 <__addsf3+0x2d1>
c0025c09:	46                   	inc    esi
c0025c0a:	89 f2                	mov    edx,esi
c0025c0c:	f7 d2                	not    edx
c0025c0e:	84 d2                	test   dl,dl
c0025c10:	0f 84 6f 01 00 00    	je     c0025d85 <__addsf3+0x2cf>
c0025c16:	89 c2                	mov    edx,eax
c0025c18:	83 e2 01             	and    edx,0x1
c0025c1b:	d1 e8                	shr    eax,1
c0025c1d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0025c22:	09 d0                	or     eax,edx
c0025c24:	e9 5e 01 00 00       	jmp    c0025d87 <__addsf3+0x2d1>
c0025c29:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0025c2d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025c30:	89 f0                	mov    eax,esi
c0025c32:	0f b6 c0             	movzx  eax,al
c0025c35:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025c38:	29 c1                	sub    ecx,eax
c0025c3a:	85 c9                	test   ecx,ecx
c0025c3c:	7e 55                	jle    c0025c93 <__addsf3+0x1dd>
c0025c3e:	85 c0                	test   eax,eax
c0025c40:	75 11                	jne    c0025c53 <__addsf3+0x19d>
c0025c42:	85 db                	test   ebx,ebx
c0025c44:	0f 84 65 01 00 00    	je     c0025daf <__addsf3+0x2f9>
c0025c4a:	49                   	dec    ecx
c0025c4b:	75 19                	jne    c0025c66 <__addsf3+0x1b0>
c0025c4d:	89 d0                	mov    eax,edx
c0025c4f:	29 d8                	sub    eax,ebx
c0025c51:	eb 38                	jmp    c0025c8b <__addsf3+0x1d5>
c0025c53:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c56:	f7 d0                	not    eax
c0025c58:	84 c0                	test   al,al
c0025c5a:	0f 84 4f 01 00 00    	je     c0025daf <__addsf3+0x2f9>
c0025c60:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025c66:	83 f9 1f             	cmp    ecx,0x1f
c0025c69:	0f 8f 40 01 00 00    	jg     c0025daf <__addsf3+0x2f9>
c0025c6f:	89 de                	mov    esi,ebx
c0025c71:	d3 ee                	shr    esi,cl
c0025c73:	b8 20 00 00 00       	mov    eax,0x20
c0025c78:	29 c8                	sub    eax,ecx
c0025c7a:	89 c1                	mov    ecx,eax
c0025c7c:	d3 e3                	shl    ebx,cl
c0025c7e:	31 c0                	xor    eax,eax
c0025c80:	85 db                	test   ebx,ebx
c0025c82:	0f 95 c0             	setne  al
c0025c85:	09 f0                	or     eax,esi
c0025c87:	29 c2                	sub    edx,eax
c0025c89:	89 d0                	mov    eax,edx
c0025c8b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025c8e:	e9 af 00 00 00       	jmp    c0025d42 <__addsf3+0x28c>
c0025c93:	74 5c                	je     c0025cf1 <__addsf3+0x23b>
c0025c95:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0025c98:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025c9b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0025c9f:	75 14                	jne    c0025cb5 <__addsf3+0x1ff>
c0025ca1:	85 d2                	test   edx,edx
c0025ca3:	0f 84 06 01 00 00    	je     c0025daf <__addsf3+0x2f9>
c0025ca9:	48                   	dec    eax
c0025caa:	75 1b                	jne    c0025cc7 <__addsf3+0x211>
c0025cac:	89 d8                	mov    eax,ebx
c0025cae:	29 d0                	sub    eax,edx
c0025cb0:	e9 8d 00 00 00       	jmp    c0025d42 <__addsf3+0x28c>
c0025cb5:	89 f1                	mov    ecx,esi
c0025cb7:	f7 d1                	not    ecx
c0025cb9:	84 c9                	test   cl,cl
c0025cbb:	0f 84 ee 00 00 00    	je     c0025daf <__addsf3+0x2f9>
c0025cc1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025cc7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025cca:	83 f8 1f             	cmp    eax,0x1f
c0025ccd:	0f 8f dc 00 00 00    	jg     c0025daf <__addsf3+0x2f9>
c0025cd3:	89 d7                	mov    edi,edx
c0025cd5:	88 c1                	mov    cl,al
c0025cd7:	d3 ef                	shr    edi,cl
c0025cd9:	b9 20 00 00 00       	mov    ecx,0x20
c0025cde:	29 c1                	sub    ecx,eax
c0025ce0:	d3 e2                	shl    edx,cl
c0025ce2:	31 c0                	xor    eax,eax
c0025ce4:	85 d2                	test   edx,edx
c0025ce6:	0f 95 c0             	setne  al
c0025ce9:	09 f8                	or     eax,edi
c0025ceb:	29 c3                	sub    ebx,eax
c0025ced:	89 d8                	mov    eax,ebx
c0025cef:	eb 51                	jmp    c0025d42 <__addsf3+0x28c>
c0025cf1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025cf4:	40                   	inc    eax
c0025cf5:	a8 fe                	test   al,0xfe
c0025cf7:	75 3d                	jne    c0025d36 <__addsf3+0x280>
c0025cf9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0025cfd:	0f 85 a7 00 00 00    	jne    c0025daa <__addsf3+0x2f4>
c0025d03:	85 d2                	test   edx,edx
c0025d05:	75 12                	jne    c0025d19 <__addsf3+0x263>
c0025d07:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025d0a:	85 db                	test   ebx,ebx
c0025d0c:	0f 85 9d 00 00 00    	jne    c0025daf <__addsf3+0x2f9>
c0025d12:	31 ff                	xor    edi,edi
c0025d14:	e9 96 00 00 00       	jmp    c0025daf <__addsf3+0x2f9>
c0025d19:	85 db                	test   ebx,ebx
c0025d1b:	0f 84 8e 00 00 00    	je     c0025daf <__addsf3+0x2f9>
c0025d21:	89 d0                	mov    eax,edx
c0025d23:	29 d8                	sub    eax,ebx
c0025d25:	79 06                	jns    c0025d2d <__addsf3+0x277>
c0025d27:	89 d8                	mov    eax,ebx
c0025d29:	29 d0                	sub    eax,edx
c0025d2b:	eb 5a                	jmp    c0025d87 <__addsf3+0x2d1>
c0025d2d:	bf 00 00 00 00       	mov    edi,0x0
c0025d32:	74 7b                	je     c0025daf <__addsf3+0x2f9>
c0025d34:	eb 4a                	jmp    c0025d80 <__addsf3+0x2ca>
c0025d36:	89 d0                	mov    eax,edx
c0025d38:	29 d8                	sub    eax,ebx
c0025d3a:	79 12                	jns    c0025d4e <__addsf3+0x298>
c0025d3c:	89 d8                	mov    eax,ebx
c0025d3e:	29 d0                	sub    eax,edx
c0025d40:	eb 09                	jmp    c0025d4b <__addsf3+0x295>
c0025d42:	85 c0                	test   eax,eax
c0025d44:	79 41                	jns    c0025d87 <__addsf3+0x2d1>
c0025d46:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025d4b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0025d4e:	31 f6                	xor    esi,esi
c0025d50:	85 c0                	test   eax,eax
c0025d52:	74 33                	je     c0025d87 <__addsf3+0x2d1>
c0025d54:	0f bd c8             	bsr    ecx,eax
c0025d57:	83 f1 1f             	xor    ecx,0x1f
c0025d5a:	d3 e0                	shl    eax,cl
c0025d5c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0025d60:	39 ca                	cmp    edx,ecx
c0025d62:	7f 10                	jg     c0025d74 <__addsf3+0x2be>
c0025d64:	29 d1                	sub    ecx,edx
c0025d66:	41                   	inc    ecx
c0025d67:	d3 e8                	shr    eax,cl
c0025d69:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025d6c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0025d72:	eb 13                	jmp    c0025d87 <__addsf3+0x2d1>
c0025d74:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025d77:	29 ce                	sub    esi,ecx
c0025d79:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025d7e:	eb 07                	jmp    c0025d87 <__addsf3+0x2d1>
c0025d80:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025d83:	eb 02                	jmp    c0025d87 <__addsf3+0x2d1>
c0025d85:	31 c0                	xor    eax,eax
c0025d87:	89 c2                	mov    edx,eax
c0025d89:	c1 ea 08             	shr    edx,0x8
c0025d8c:	a8 7f                	test   al,0x7f
c0025d8e:	0f 95 c1             	setne  cl
c0025d91:	09 d1                	or     ecx,edx
c0025d93:	83 e1 01             	and    ecx,0x1
c0025d96:	c1 e8 07             	shr    eax,0x7
c0025d99:	21 c8                	and    eax,ecx
c0025d9b:	c1 e6 17             	shl    esi,0x17
c0025d9e:	09 d6                	or     esi,edx
c0025da0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0025da3:	eb 0a                	jmp    c0025daf <__addsf3+0x2f9>
c0025da5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025da8:	eb 05                	jmp    c0025daf <__addsf3+0x2f9>
c0025daa:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0025daf:	89 f8                	mov    eax,edi
c0025db1:	5a                   	pop    edx
c0025db2:	59                   	pop    ecx
c0025db3:	5b                   	pop    ebx
c0025db4:	5e                   	pop    esi
c0025db5:	5f                   	pop    edi
c0025db6:	5d                   	pop    ebp
c0025db7:	c3                   	ret    

c0025db8 <__subsf3>:
c0025db8:	55                   	push   ebp
c0025db9:	89 e5                	mov    ebp,esp
c0025dbb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025dbe:	05 00 00 00 80       	add    eax,0x80000000
c0025dc3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025dc6:	5d                   	pop    ebp
c0025dc7:	e9 ea fc ff ff       	jmp    c0025ab6 <__addsf3>

c0025dcc <__negsf2>:
c0025dcc:	55                   	push   ebp
c0025dcd:	89 e5                	mov    ebp,esp
c0025dcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025dd2:	05 00 00 00 80       	add    eax,0x80000000
c0025dd7:	5d                   	pop    ebp
c0025dd8:	c3                   	ret    

c0025dd9 <__mulsf3>:
c0025dd9:	55                   	push   ebp
c0025dda:	89 e5                	mov    ebp,esp
c0025ddc:	57                   	push   edi
c0025ddd:	56                   	push   esi
c0025dde:	53                   	push   ebx
c0025ddf:	83 ec 1c             	sub    esp,0x1c
c0025de2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0025de5:	89 f0                	mov    eax,esi
c0025de7:	89 f1                	mov    ecx,esi
c0025de9:	c1 f9 17             	sar    ecx,0x17
c0025dec:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0025def:	c1 e0 08             	shl    eax,0x8
c0025df2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025df7:	89 c1                	mov    ecx,eax
c0025df9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025dfc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025dff:	89 c7                	mov    edi,eax
c0025e01:	c1 ff 17             	sar    edi,0x17
c0025e04:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025e08:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025e0b:	89 f8                	mov    eax,edi
c0025e0d:	0f b6 c0             	movzx  eax,al
c0025e10:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0025e13:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0025e17:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025e1a:	42                   	inc    edx
c0025e1b:	80 e2 fe             	and    dl,0xfe
c0025e1e:	75 7b                	jne    c0025e9b <__mulsf3+0xc2>
c0025e20:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025e24:	74 54                	je     c0025e7a <__mulsf3+0xa1>
c0025e26:	85 c9                	test   ecx,ecx
c0025e28:	0f 85 64 01 00 00    	jne    c0025f92 <__mulsf3+0x1b9>
c0025e2e:	8d 57 01             	lea    edx,[edi+0x1]
c0025e31:	80 e2 fe             	and    dl,0xfe
c0025e34:	75 1f                	jne    c0025e55 <__mulsf3+0x7c>
c0025e36:	85 c0                	test   eax,eax
c0025e38:	b8 00 00 00 00       	mov    eax,0x0
c0025e3d:	74 29                	je     c0025e68 <__mulsf3+0x8f>
c0025e3f:	53                   	push   ebx
c0025e40:	53                   	push   ebx
c0025e41:	50                   	push   eax
c0025e42:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025e45:	e8 96 05 00 00       	call   c00263e0 <__nesf2>
c0025e4a:	83 c4 10             	add    esp,0x10
c0025e4d:	85 c0                	test   eax,eax
c0025e4f:	0f 85 3a 01 00 00    	jne    c0025f8f <__mulsf3+0x1b6>
c0025e55:	85 ff                	test   edi,edi
c0025e57:	0f 89 35 01 00 00    	jns    c0025f92 <__mulsf3+0x1b9>
c0025e5d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0025e63:	e9 2a 01 00 00       	jmp    c0025f92 <__mulsf3+0x1b9>
c0025e68:	51                   	push   ecx
c0025e69:	51                   	push   ecx
c0025e6a:	50                   	push   eax
c0025e6b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025e6e:	e8 6d 05 00 00       	call   c00263e0 <__nesf2>
c0025e73:	83 c4 10             	add    esp,0x10
c0025e76:	85 c0                	test   eax,eax
c0025e78:	eb 15                	jmp    c0025e8f <__mulsf3+0xb6>
c0025e7a:	85 c9                	test   ecx,ecx
c0025e7c:	74 0b                	je     c0025e89 <__mulsf3+0xb0>
c0025e7e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0025e81:	01 c9                	add    ecx,ecx
c0025e83:	78 16                	js     c0025e9b <__mulsf3+0xc2>
c0025e85:	89 d3                	mov    ebx,edx
c0025e87:	eb f5                	jmp    c0025e7e <__mulsf3+0xa5>
c0025e89:	89 f8                	mov    eax,edi
c0025e8b:	f7 d0                	not    eax
c0025e8d:	84 c0                	test   al,al
c0025e8f:	75 c4                	jne    c0025e55 <__mulsf3+0x7c>
c0025e91:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0025e96:	e9 f7 00 00 00       	jmp    c0025f92 <__mulsf3+0x1b9>
c0025e9b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0025e9e:	c1 e6 08             	shl    esi,0x8
c0025ea1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0025ea7:	8d 57 01             	lea    edx,[edi+0x1]
c0025eaa:	80 e2 fe             	and    dl,0xfe
c0025ead:	75 63                	jne    c0025f12 <__mulsf3+0x139>
c0025eaf:	85 c0                	test   eax,eax
c0025eb1:	74 2f                	je     c0025ee2 <__mulsf3+0x109>
c0025eb3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025eb7:	0f 89 d2 00 00 00    	jns    c0025f8f <__mulsf3+0x1b6>
c0025ebd:	52                   	push   edx
c0025ebe:	52                   	push   edx
c0025ebf:	6a 00                	push   0x0
c0025ec1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025ec4:	e8 dc 04 00 00       	call   c00263a5 <__eqsf2>
c0025ec9:	83 c4 10             	add    esp,0x10
c0025ecc:	85 c0                	test   eax,eax
c0025ece:	0f 85 bb 00 00 00    	jne    c0025f8f <__mulsf3+0x1b6>
c0025ed4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ed7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0025edd:	e9 b0 00 00 00       	jmp    c0025f92 <__mulsf3+0x1b9>
c0025ee2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025ee5:	50                   	push   eax
c0025ee6:	50                   	push   eax
c0025ee7:	6a 00                	push   0x0
c0025ee9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025eec:	e8 b4 04 00 00       	call   c00263a5 <__eqsf2>
c0025ef1:	83 c4 10             	add    esp,0x10
c0025ef4:	85 c0                	test   eax,eax
c0025ef6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025ef9:	75 0c                	jne    c0025f07 <__mulsf3+0x12e>
c0025efb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025eff:	0f 89 8a 00 00 00    	jns    c0025f8f <__mulsf3+0x1b6>
c0025f05:	eb cd                	jmp    c0025ed4 <__mulsf3+0xfb>
c0025f07:	8d 43 ff             	lea    eax,[ebx-0x1]
c0025f0a:	01 f6                	add    esi,esi
c0025f0c:	78 04                	js     c0025f12 <__mulsf3+0x139>
c0025f0e:	89 c3                	mov    ebx,eax
c0025f10:	eb f5                	jmp    c0025f07 <__mulsf3+0x12e>
c0025f12:	89 c8                	mov    eax,ecx
c0025f14:	0d 00 00 00 80       	or     eax,0x80000000
c0025f19:	81 ce 00 00 00 80    	or     esi,0x80000000
c0025f1f:	f7 e6                	mul    esi
c0025f21:	85 c0                	test   eax,eax
c0025f23:	0f 95 c0             	setne  al
c0025f26:	0f b6 c0             	movzx  eax,al
c0025f29:	09 c2                	or     edx,eax
c0025f2b:	78 03                	js     c0025f30 <__mulsf3+0x157>
c0025f2d:	01 d2                	add    edx,edx
c0025f2f:	4b                   	dec    ebx
c0025f30:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0025f36:	7f 22                	jg     c0025f5a <__mulsf3+0x181>
c0025f38:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025f3e:	85 db                	test   ebx,ebx
c0025f40:	7f 23                	jg     c0025f65 <__mulsf3+0x18c>
c0025f42:	83 fb e9             	cmp    ebx,0xffffffe9
c0025f45:	7c 1a                	jl     c0025f61 <__mulsf3+0x188>
c0025f47:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025f4d:	b9 01 00 00 00       	mov    ecx,0x1
c0025f52:	29 d9                	sub    ecx,ebx
c0025f54:	d3 ea                	shr    edx,cl
c0025f56:	31 db                	xor    ebx,ebx
c0025f58:	eb 0b                	jmp    c0025f65 <__mulsf3+0x18c>
c0025f5a:	bb ff 00 00 00       	mov    ebx,0xff
c0025f5f:	eb 02                	jmp    c0025f63 <__mulsf3+0x18a>
c0025f61:	31 db                	xor    ebx,ebx
c0025f63:	31 d2                	xor    edx,edx
c0025f65:	89 d0                	mov    eax,edx
c0025f67:	c1 e8 08             	shr    eax,0x8
c0025f6a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025f6d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025f73:	09 fb                	or     ebx,edi
c0025f75:	c1 e3 17             	shl    ebx,0x17
c0025f78:	09 c3                	or     ebx,eax
c0025f7a:	f6 c2 7f             	test   dl,0x7f
c0025f7d:	0f 95 c1             	setne  cl
c0025f80:	09 c8                	or     eax,ecx
c0025f82:	83 e0 01             	and    eax,0x1
c0025f85:	c1 ea 07             	shr    edx,0x7
c0025f88:	21 c2                	and    edx,eax
c0025f8a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0025f8d:	eb 03                	jmp    c0025f92 <__mulsf3+0x1b9>
c0025f8f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0025f92:	89 f0                	mov    eax,esi
c0025f94:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025f97:	5b                   	pop    ebx
c0025f98:	5e                   	pop    esi
c0025f99:	5f                   	pop    edi
c0025f9a:	5d                   	pop    ebp
c0025f9b:	c3                   	ret    

c0025f9c <__divsf3>:
c0025f9c:	55                   	push   ebp
c0025f9d:	89 e5                	mov    ebp,esp
c0025f9f:	57                   	push   edi
c0025fa0:	56                   	push   esi
c0025fa1:	53                   	push   ebx
c0025fa2:	83 ec 1c             	sub    esp,0x1c
c0025fa5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025fa8:	89 d8                	mov    eax,ebx
c0025faa:	89 d9                	mov    ecx,ebx
c0025fac:	c1 f9 17             	sar    ecx,0x17
c0025faf:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0025fb2:	c1 e0 08             	shl    eax,0x8
c0025fb5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025fba:	89 c1                	mov    ecx,eax
c0025fbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fbf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025fc2:	89 c7                	mov    edi,eax
c0025fc4:	c1 ff 17             	sar    edi,0x17
c0025fc7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025fcb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025fce:	89 f8                	mov    eax,edi
c0025fd0:	0f b6 c0             	movzx  eax,al
c0025fd3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025fd6:	29 c6                	sub    esi,eax
c0025fd8:	83 c6 7f             	add    esi,0x7f
c0025fdb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025fde:	42                   	inc    edx
c0025fdf:	80 e2 fe             	and    dl,0xfe
c0025fe2:	0f 85 9c 00 00 00    	jne    c0026084 <__divsf3+0xe8>
c0025fe8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025fec:	74 33                	je     c0026021 <__divsf3+0x85>
c0025fee:	85 c9                	test   ecx,ecx
c0025ff0:	0f 85 c7 01 00 00    	jne    c00261bd <__divsf3+0x221>
c0025ff6:	8d 57 01             	lea    edx,[edi+0x1]
c0025ff9:	80 e2 fe             	and    dl,0xfe
c0025ffc:	75 2f                	jne    c002602d <__divsf3+0x91>
c0025ffe:	85 c0                	test   eax,eax
c0026000:	74 2b                	je     c002602d <__divsf3+0x91>
c0026002:	51                   	push   ecx
c0026003:	51                   	push   ecx
c0026004:	6a 00                	push   0x0
c0026006:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026009:	e8 d2 03 00 00       	call   c00263e0 <__nesf2>
c002600e:	83 c4 10             	add    esp,0x10
c0026011:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026014:	85 c0                	test   eax,eax
c0026016:	0f 85 a1 01 00 00    	jne    c00261bd <__divsf3+0x221>
c002601c:	e9 92 01 00 00       	jmp    c00261b3 <__divsf3+0x217>
c0026021:	85 c9                	test   ecx,ecx
c0026023:	75 1b                	jne    c0026040 <__divsf3+0xa4>
c0026025:	8d 57 01             	lea    edx,[edi+0x1]
c0026028:	80 e2 fe             	and    dl,0xfe
c002602b:	74 1e                	je     c002604b <__divsf3+0xaf>
c002602d:	85 ff                	test   edi,edi
c002602f:	0f 89 88 01 00 00    	jns    c00261bd <__divsf3+0x221>
c0026035:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002603b:	e9 7d 01 00 00       	jmp    c00261bd <__divsf3+0x221>
c0026040:	8d 56 ff             	lea    edx,[esi-0x1]
c0026043:	01 c9                	add    ecx,ecx
c0026045:	78 3d                	js     c0026084 <__divsf3+0xe8>
c0026047:	89 d6                	mov    esi,edx
c0026049:	eb f5                	jmp    c0026040 <__divsf3+0xa4>
c002604b:	85 c0                	test   eax,eax
c002604d:	b8 00 00 00 00       	mov    eax,0x0
c0026052:	74 18                	je     c002606c <__divsf3+0xd0>
c0026054:	52                   	push   edx
c0026055:	52                   	push   edx
c0026056:	50                   	push   eax
c0026057:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002605a:	e8 81 03 00 00       	call   c00263e0 <__nesf2>
c002605f:	83 c4 10             	add    esp,0x10
c0026062:	85 c0                	test   eax,eax
c0026064:	0f 85 50 01 00 00    	jne    c00261ba <__divsf3+0x21e>
c002606a:	eb c1                	jmp    c002602d <__divsf3+0x91>
c002606c:	56                   	push   esi
c002606d:	56                   	push   esi
c002606e:	50                   	push   eax
c002606f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026072:	e8 69 03 00 00       	call   c00263e0 <__nesf2>
c0026077:	83 c4 10             	add    esp,0x10
c002607a:	85 c0                	test   eax,eax
c002607c:	0f 84 31 01 00 00    	je     c00261b3 <__divsf3+0x217>
c0026082:	eb a9                	jmp    c002602d <__divsf3+0x91>
c0026084:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026087:	c1 e3 08             	shl    ebx,0x8
c002608a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026090:	8d 57 01             	lea    edx,[edi+0x1]
c0026093:	80 e2 fe             	and    dl,0xfe
c0026096:	75 71                	jne    c0026109 <__divsf3+0x16d>
c0026098:	85 c0                	test   eax,eax
c002609a:	ba 00 00 00 00       	mov    edx,0x0
c002609f:	74 2f                	je     c00260d0 <__divsf3+0x134>
c00260a1:	51                   	push   ecx
c00260a2:	51                   	push   ecx
c00260a3:	52                   	push   edx
c00260a4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00260a7:	e8 f9 02 00 00       	call   c00263a5 <__eqsf2>
c00260ac:	83 c4 10             	add    esp,0x10
c00260af:	85 c0                	test   eax,eax
c00260b1:	0f 85 03 01 00 00    	jne    c00261ba <__divsf3+0x21e>
c00260b7:	31 d2                	xor    edx,edx
c00260b9:	89 d3                	mov    ebx,edx
c00260bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00260be:	31 f8                	xor    eax,edi
c00260c0:	0f 89 f7 00 00 00    	jns    c00261bd <__divsf3+0x221>
c00260c6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00260cb:	e9 ed 00 00 00       	jmp    c00261bd <__divsf3+0x221>
c00260d0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00260d3:	50                   	push   eax
c00260d4:	50                   	push   eax
c00260d5:	52                   	push   edx
c00260d6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00260d9:	e8 c7 02 00 00       	call   c00263a5 <__eqsf2>
c00260de:	83 c4 10             	add    esp,0x10
c00260e1:	85 c0                	test   eax,eax
c00260e3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00260e6:	75 16                	jne    c00260fe <__divsf3+0x162>
c00260e8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00260eb:	31 fb                	xor    ebx,edi
c00260ed:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00260f3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00260f9:	e9 bf 00 00 00       	jmp    c00261bd <__divsf3+0x221>
c00260fe:	8d 46 01             	lea    eax,[esi+0x1]
c0026101:	01 db                	add    ebx,ebx
c0026103:	78 04                	js     c0026109 <__divsf3+0x16d>
c0026105:	89 c6                	mov    esi,eax
c0026107:	eb f5                	jmp    c00260fe <__divsf3+0x162>
c0026109:	89 c8                	mov    eax,ecx
c002610b:	0d 00 00 00 80       	or     eax,0x80000000
c0026110:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026116:	31 d2                	xor    edx,edx
c0026118:	39 d8                	cmp    eax,ebx
c002611a:	72 07                	jb     c0026123 <__divsf3+0x187>
c002611c:	29 d8                	sub    eax,ebx
c002611e:	ba 01 00 00 00       	mov    edx,0x1
c0026123:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002612a:	01 d2                	add    edx,edx
c002612c:	89 c1                	mov    ecx,eax
c002612e:	01 c0                	add    eax,eax
c0026130:	85 c9                	test   ecx,ecx
c0026132:	78 04                	js     c0026138 <__divsf3+0x19c>
c0026134:	39 c3                	cmp    ebx,eax
c0026136:	77 05                	ja     c002613d <__divsf3+0x1a1>
c0026138:	29 d8                	sub    eax,ebx
c002613a:	83 ca 01             	or     edx,0x1
c002613d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026140:	75 e8                	jne    c002612a <__divsf3+0x18e>
c0026142:	85 c0                	test   eax,eax
c0026144:	0f 95 c0             	setne  al
c0026147:	0f b6 c0             	movzx  eax,al
c002614a:	c1 e2 06             	shl    edx,0x6
c002614d:	09 c2                	or     edx,eax
c002614f:	78 03                	js     c0026154 <__divsf3+0x1b8>
c0026151:	01 d2                	add    edx,edx
c0026153:	4e                   	dec    esi
c0026154:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002615a:	7f 22                	jg     c002617e <__divsf3+0x1e2>
c002615c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026162:	85 f6                	test   esi,esi
c0026164:	7f 23                	jg     c0026189 <__divsf3+0x1ed>
c0026166:	83 fe e9             	cmp    esi,0xffffffe9
c0026169:	7c 1a                	jl     c0026185 <__divsf3+0x1e9>
c002616b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026171:	b9 01 00 00 00       	mov    ecx,0x1
c0026176:	29 f1                	sub    ecx,esi
c0026178:	d3 ea                	shr    edx,cl
c002617a:	31 f6                	xor    esi,esi
c002617c:	eb 0b                	jmp    c0026189 <__divsf3+0x1ed>
c002617e:	be ff 00 00 00       	mov    esi,0xff
c0026183:	eb 02                	jmp    c0026187 <__divsf3+0x1eb>
c0026185:	31 f6                	xor    esi,esi
c0026187:	31 d2                	xor    edx,edx
c0026189:	89 d0                	mov    eax,edx
c002618b:	c1 e8 08             	shr    eax,0x8
c002618e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026191:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026197:	09 fe                	or     esi,edi
c0026199:	c1 e6 17             	shl    esi,0x17
c002619c:	09 c6                	or     esi,eax
c002619e:	f6 c2 7f             	test   dl,0x7f
c00261a1:	0f 95 c1             	setne  cl
c00261a4:	09 c8                	or     eax,ecx
c00261a6:	83 e0 01             	and    eax,0x1
c00261a9:	c1 ea 07             	shr    edx,0x7
c00261ac:	21 c2                	and    edx,eax
c00261ae:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00261b1:	eb 0a                	jmp    c00261bd <__divsf3+0x221>
c00261b3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00261b8:	eb 03                	jmp    c00261bd <__divsf3+0x221>
c00261ba:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00261bd:	89 d8                	mov    eax,ebx
c00261bf:	8d 65 f4             	lea    esp,[ebp-0xc]
c00261c2:	5b                   	pop    ebx
c00261c3:	5e                   	pop    esi
c00261c4:	5f                   	pop    edi
c00261c5:	5d                   	pop    ebp
c00261c6:	c3                   	ret    

c00261c7 <__floatsisf>:
c00261c7:	55                   	push   ebp
c00261c8:	89 e5                	mov    ebp,esp
c00261ca:	53                   	push   ebx
c00261cb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00261ce:	85 d2                	test   edx,edx
c00261d0:	7e 2b                	jle    c00261fd <__floatsisf+0x36>
c00261d2:	0f bd ca             	bsr    ecx,edx
c00261d5:	83 f1 1f             	xor    ecx,0x1f
c00261d8:	d3 e2                	shl    edx,cl
c00261da:	89 d0                	mov    eax,edx
c00261dc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00261e1:	89 c3                	mov    ebx,eax
c00261e3:	c1 eb 08             	shr    ebx,0x8
c00261e6:	80 e2 7f             	and    dl,0x7f
c00261e9:	0f 95 c2             	setne  dl
c00261ec:	09 da                	or     edx,ebx
c00261ee:	83 e2 01             	and    edx,0x1
c00261f1:	c1 e8 07             	shr    eax,0x7
c00261f4:	21 c2                	and    edx,eax
c00261f6:	b8 9e 00 00 00       	mov    eax,0x9e
c00261fb:	eb 32                	jmp    c002622f <__floatsisf+0x68>
c00261fd:	b8 00 00 00 00       	mov    eax,0x0
c0026202:	74 34                	je     c0026238 <__floatsisf+0x71>
c0026204:	f7 da                	neg    edx
c0026206:	0f bd ca             	bsr    ecx,edx
c0026209:	83 f1 1f             	xor    ecx,0x1f
c002620c:	d3 e2                	shl    edx,cl
c002620e:	89 d0                	mov    eax,edx
c0026210:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026215:	89 c3                	mov    ebx,eax
c0026217:	c1 eb 08             	shr    ebx,0x8
c002621a:	80 e2 7f             	and    dl,0x7f
c002621d:	0f 95 c2             	setne  dl
c0026220:	09 da                	or     edx,ebx
c0026222:	83 e2 01             	and    edx,0x1
c0026225:	c1 e8 07             	shr    eax,0x7
c0026228:	21 c2                	and    edx,eax
c002622a:	b8 9e 01 00 00       	mov    eax,0x19e
c002622f:	29 c8                	sub    eax,ecx
c0026231:	c1 e0 17             	shl    eax,0x17
c0026234:	09 d8                	or     eax,ebx
c0026236:	01 d0                	add    eax,edx
c0026238:	5b                   	pop    ebx
c0026239:	5d                   	pop    ebp
c002623a:	c3                   	ret    

c002623b <__floatunsisf>:
c002623b:	55                   	push   ebp
c002623c:	89 e5                	mov    ebp,esp
c002623e:	53                   	push   ebx
c002623f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026242:	31 c0                	xor    eax,eax
c0026244:	85 d2                	test   edx,edx
c0026246:	74 32                	je     c002627a <__floatunsisf+0x3f>
c0026248:	0f bd ca             	bsr    ecx,edx
c002624b:	83 f1 1f             	xor    ecx,0x1f
c002624e:	d3 e2                	shl    edx,cl
c0026250:	89 d0                	mov    eax,edx
c0026252:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026257:	89 c3                	mov    ebx,eax
c0026259:	c1 eb 08             	shr    ebx,0x8
c002625c:	80 e2 7f             	and    dl,0x7f
c002625f:	0f 95 c2             	setne  dl
c0026262:	09 da                	or     edx,ebx
c0026264:	83 e2 01             	and    edx,0x1
c0026267:	c1 e8 07             	shr    eax,0x7
c002626a:	21 c2                	and    edx,eax
c002626c:	b8 9e 00 00 00       	mov    eax,0x9e
c0026271:	29 c8                	sub    eax,ecx
c0026273:	c1 e0 17             	shl    eax,0x17
c0026276:	09 d8                	or     eax,ebx
c0026278:	01 d0                	add    eax,edx
c002627a:	5b                   	pop    ebx
c002627b:	5d                   	pop    ebp
c002627c:	c3                   	ret    

c002627d <__fixsfsi>:
c002627d:	55                   	push   ebp
c002627e:	89 e5                	mov    ebp,esp
c0026280:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026283:	89 d1                	mov    ecx,edx
c0026285:	c1 e1 08             	shl    ecx,0x8
c0026288:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002628e:	c1 fa 17             	sar    edx,0x17
c0026291:	78 1c                	js     c00262af <__fixsfsi+0x32>
c0026293:	83 ea 7f             	sub    edx,0x7f
c0026296:	31 c0                	xor    eax,eax
c0026298:	83 fa 1e             	cmp    edx,0x1e
c002629b:	77 40                	ja     c00262dd <__fixsfsi+0x60>
c002629d:	89 c8                	mov    eax,ecx
c002629f:	0d 00 00 00 80       	or     eax,0x80000000
c00262a4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00262a9:	29 d1                	sub    ecx,edx
c00262ab:	d3 e8                	shr    eax,cl
c00262ad:	eb 2e                	jmp    c00262dd <__fixsfsi+0x60>
c00262af:	31 c0                	xor    eax,eax
c00262b1:	81 c2 81 00 00 00    	add    edx,0x81
c00262b7:	78 24                	js     c00262dd <__fixsfsi+0x60>
c00262b9:	83 fa 1e             	cmp    edx,0x1e
c00262bc:	7e 09                	jle    c00262c7 <__fixsfsi+0x4a>
c00262be:	83 fa 1f             	cmp    edx,0x1f
c00262c1:	75 18                	jne    c00262db <__fixsfsi+0x5e>
c00262c3:	85 c9                	test   ecx,ecx
c00262c5:	75 14                	jne    c00262db <__fixsfsi+0x5e>
c00262c7:	89 c8                	mov    eax,ecx
c00262c9:	0d 00 00 00 80       	or     eax,0x80000000
c00262ce:	b9 1f 00 00 00       	mov    ecx,0x1f
c00262d3:	29 d1                	sub    ecx,edx
c00262d5:	d3 e8                	shr    eax,cl
c00262d7:	f7 d8                	neg    eax
c00262d9:	eb 02                	jmp    c00262dd <__fixsfsi+0x60>
c00262db:	31 c0                	xor    eax,eax
c00262dd:	5d                   	pop    ebp
c00262de:	c3                   	ret    

c00262df <__fixunssfsi>:
c00262df:	55                   	push   ebp
c00262e0:	89 e5                	mov    ebp,esp
c00262e2:	53                   	push   ebx
c00262e3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00262e6:	89 d3                	mov    ebx,edx
c00262e8:	c1 fb 17             	sar    ebx,0x17
c00262eb:	83 eb 7f             	sub    ebx,0x7f
c00262ee:	31 c0                	xor    eax,eax
c00262f0:	83 fb 1f             	cmp    ebx,0x1f
c00262f3:	77 18                	ja     c002630d <__fixunssfsi+0x2e>
c00262f5:	89 d0                	mov    eax,edx
c00262f7:	c1 e0 08             	shl    eax,0x8
c00262fa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00262ff:	0d 00 00 00 80       	or     eax,0x80000000
c0026304:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026309:	29 d9                	sub    ecx,ebx
c002630b:	d3 e8                	shr    eax,cl
c002630d:	5b                   	pop    ebx
c002630e:	5d                   	pop    ebp
c002630f:	c3                   	ret    

c0026310 <__cmpsf2>:
c0026310:	55                   	push   ebp
c0026311:	89 e5                	mov    ebp,esp
c0026313:	57                   	push   edi
c0026314:	56                   	push   esi
c0026315:	53                   	push   ebx
c0026316:	83 ec 24             	sub    esp,0x24
c0026319:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002631c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002631f:	e8 4f 10 00 00       	call   c0027373 <__truncdfsf2>
c0026324:	5a                   	pop    edx
c0026325:	59                   	pop    ecx
c0026326:	89 c3                	mov    ebx,eax
c0026328:	c1 e8 17             	shr    eax,0x17
c002632b:	0f b6 f0             	movzx  esi,al
c002632e:	89 d8                	mov    eax,ebx
c0026330:	c1 e8 1f             	shr    eax,0x1f
c0026333:	31 c6                	xor    esi,eax
c0026335:	c1 e3 08             	shl    ebx,0x8
c0026338:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002633b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002633e:	e8 30 10 00 00       	call   c0027373 <__truncdfsf2>
c0026343:	83 c4 10             	add    esp,0x10
c0026346:	89 c1                	mov    ecx,eax
c0026348:	c1 e9 17             	shr    ecx,0x17
c002634b:	0f b6 c9             	movzx  ecx,cl
c002634e:	89 c7                	mov    edi,eax
c0026350:	c1 ef 1f             	shr    edi,0x1f
c0026353:	89 ca                	mov    edx,ecx
c0026355:	31 fa                	xor    edx,edi
c0026357:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002635a:	c1 e0 08             	shl    eax,0x8
c002635d:	89 c2                	mov    edx,eax
c002635f:	89 d8                	mov    eax,ebx
c0026361:	09 d0                	or     eax,edx
c0026363:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026368:	09 f0                	or     eax,esi
c002636a:	75 08                	jne    c0026374 <__cmpsf2+0x64>
c002636c:	31 c0                	xor    eax,eax
c002636e:	39 f9                	cmp    ecx,edi
c0026370:	75 0c                	jne    c002637e <__cmpsf2+0x6e>
c0026372:	eb 29                	jmp    c002639d <__cmpsf2+0x8d>
c0026374:	b8 01 00 00 00       	mov    eax,0x1
c0026379:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002637c:	7f 1f                	jg     c002639d <__cmpsf2+0x8d>
c002637e:	83 c8 ff             	or     eax,0xffffffff
c0026381:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026384:	7c 17                	jl     c002639d <__cmpsf2+0x8d>
c0026386:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002638c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026392:	b8 01 00 00 00       	mov    eax,0x1
c0026397:	39 d3                	cmp    ebx,edx
c0026399:	77 02                	ja     c002639d <__cmpsf2+0x8d>
c002639b:	19 c0                	sbb    eax,eax
c002639d:	8d 65 f4             	lea    esp,[ebp-0xc]
c00263a0:	5b                   	pop    ebx
c00263a1:	5e                   	pop    esi
c00263a2:	5f                   	pop    edi
c00263a3:	5d                   	pop    ebp
c00263a4:	c3                   	ret    

c00263a5 <__eqsf2>:
c00263a5:	55                   	push   ebp
c00263a6:	89 e5                	mov    ebp,esp
c00263a8:	83 ec 24             	sub    esp,0x24
c00263ab:	6a 01                	push   0x1
c00263ad:	83 ec 0c             	sub    esp,0xc
c00263b0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00263b3:	e8 df 10 00 00       	call   c0027497 <__extendsfdf2>
c00263b8:	83 c4 10             	add    esp,0x10
c00263bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00263be:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00263c1:	52                   	push   edx
c00263c2:	50                   	push   eax
c00263c3:	50                   	push   eax
c00263c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263c7:	e8 cb 10 00 00       	call   c0027497 <__extendsfdf2>
c00263cc:	59                   	pop    ecx
c00263cd:	59                   	pop    ecx
c00263ce:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00263d1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00263d4:	52                   	push   edx
c00263d5:	50                   	push   eax
c00263d6:	e8 35 ff ff ff       	call   c0026310 <__cmpsf2>
c00263db:	83 c4 20             	add    esp,0x20
c00263de:	c9                   	leave  
c00263df:	c3                   	ret    

c00263e0 <__nesf2>:
c00263e0:	eb c3                	jmp    c00263a5 <__eqsf2>

c00263e2 <__gtsf2>:
c00263e2:	55                   	push   ebp
c00263e3:	89 e5                	mov    ebp,esp
c00263e5:	83 ec 24             	sub    esp,0x24
c00263e8:	6a ff                	push   0xffffffff
c00263ea:	83 ec 0c             	sub    esp,0xc
c00263ed:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00263f0:	e8 a2 10 00 00       	call   c0027497 <__extendsfdf2>
c00263f5:	83 c4 10             	add    esp,0x10
c00263f8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00263fb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00263fe:	52                   	push   edx
c00263ff:	50                   	push   eax
c0026400:	50                   	push   eax
c0026401:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026404:	e8 8e 10 00 00       	call   c0027497 <__extendsfdf2>
c0026409:	59                   	pop    ecx
c002640a:	59                   	pop    ecx
c002640b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002640e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026411:	52                   	push   edx
c0026412:	50                   	push   eax
c0026413:	e8 f8 fe ff ff       	call   c0026310 <__cmpsf2>
c0026418:	83 c4 20             	add    esp,0x20
c002641b:	c9                   	leave  
c002641c:	c3                   	ret    

c002641d <__gesf2>:
c002641d:	eb c3                	jmp    c00263e2 <__gtsf2>

c002641f <__ltsf2>:
c002641f:	eb 84                	jmp    c00263a5 <__eqsf2>

c0026421 <__lesf2>:
c0026421:	eb 82                	jmp    c00263a5 <__eqsf2>

c0026423 <__adddf3>:
c0026423:	55                   	push   ebp
c0026424:	89 e5                	mov    ebp,esp
c0026426:	57                   	push   edi
c0026427:	56                   	push   esi
c0026428:	53                   	push   ebx
c0026429:	83 ec 24             	sub    esp,0x24
c002642c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002642f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026432:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026435:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026438:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002643b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002643e:	89 c8                	mov    eax,ecx
c0026440:	89 ce                	mov    esi,ecx
c0026442:	c1 fe 14             	sar    esi,0x14
c0026445:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0026448:	89 fb                	mov    ebx,edi
c002644a:	89 fa                	mov    edx,edi
c002644c:	c1 e2 0b             	shl    edx,0xb
c002644f:	c1 e0 0b             	shl    eax,0xb
c0026452:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026457:	c1 eb 15             	shr    ebx,0x15
c002645a:	09 d8                	or     eax,ebx
c002645c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002645f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0026462:	c1 fe 14             	sar    esi,0x14
c0026465:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0026468:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002646b:	89 f3                	mov    ebx,esi
c002646d:	c1 e3 0b             	shl    ebx,0xb
c0026470:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026473:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026476:	c1 e3 0b             	shl    ebx,0xb
c0026479:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002647f:	c1 ee 15             	shr    esi,0x15
c0026482:	09 f3                	or     ebx,esi
c0026484:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0026487:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002648a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002648d:	0f 88 5f 02 00 00    	js     c00266f2 <__adddf3+0x2cf>
c0026493:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026496:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0026499:	85 db                	test   ebx,ebx
c002649b:	0f 8e c7 00 00 00    	jle    c0026568 <__adddf3+0x145>
c00264a1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00264a8:	75 1a                	jne    c00264c4 <__adddf3+0xa1>
c00264aa:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00264ad:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00264b0:	0f 84 b2 05 00 00    	je     c0026a68 <__adddf3+0x645>
c00264b6:	4b                   	dec    ebx
c00264b7:	75 23                	jne    c00264dc <__adddf3+0xb9>
c00264b9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00264bc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00264bf:	e9 99 00 00 00       	jmp    c002655d <__adddf3+0x13a>
c00264c4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00264c7:	f7 d6                	not    esi
c00264c9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00264cf:	0f 84 93 05 00 00    	je     c0026a68 <__adddf3+0x645>
c00264d5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00264dc:	83 fb 1f             	cmp    ebx,0x1f
c00264df:	7e 42                	jle    c0026523 <__adddf3+0x100>
c00264e1:	83 fb 3f             	cmp    ebx,0x3f
c00264e4:	0f 8f 7e 05 00 00    	jg     c0026a68 <__adddf3+0x645>
c00264ea:	83 e3 1f             	and    ebx,0x1f
c00264ed:	89 d9                	mov    ecx,ebx
c00264ef:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00264f2:	d3 ef                	shr    edi,cl
c00264f4:	31 db                	xor    ebx,ebx
c00264f6:	85 c9                	test   ecx,ecx
c00264f8:	74 15                	je     c002650f <__adddf3+0xec>
c00264fa:	be 20 00 00 00       	mov    esi,0x20
c00264ff:	29 ce                	sub    esi,ecx
c0026501:	89 f1                	mov    ecx,esi
c0026503:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026506:	d3 e6                	shl    esi,cl
c0026508:	31 db                	xor    ebx,ebx
c002650a:	85 f6                	test   esi,esi
c002650c:	0f 95 c3             	setne  bl
c002650f:	31 c9                	xor    ecx,ecx
c0026511:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026515:	0f 95 c1             	setne  cl
c0026518:	09 cf                	or     edi,ecx
c002651a:	09 fb                	or     ebx,edi
c002651c:	01 da                	add    edx,ebx
c002651e:	83 d0 00             	adc    eax,0x0
c0026521:	eb 3a                	jmp    c002655d <__adddf3+0x13a>
c0026523:	bf 20 00 00 00       	mov    edi,0x20
c0026528:	29 df                	sub    edi,ebx
c002652a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002652d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026530:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026533:	d3 e6                	shl    esi,cl
c0026535:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026538:	88 d9                	mov    cl,bl
c002653a:	d3 ef                	shr    edi,cl
c002653c:	09 fe                	or     esi,edi
c002653e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026541:	88 d9                	mov    cl,bl
c0026543:	d3 ef                	shr    edi,cl
c0026545:	89 fb                	mov    ebx,edi
c0026547:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002654a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002654d:	d3 e7                	shl    edi,cl
c002654f:	85 ff                	test   edi,edi
c0026551:	0f 95 c1             	setne  cl
c0026554:	0f b6 c9             	movzx  ecx,cl
c0026557:	09 ce                	or     esi,ecx
c0026559:	01 f2                	add    edx,esi
c002655b:	11 d8                	adc    eax,ebx
c002655d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026560:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026563:	e9 52 01 00 00       	jmp    c00266ba <__adddf3+0x297>
c0026568:	0f 84 d5 00 00 00    	je     c0026643 <__adddf3+0x220>
c002656e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026571:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0026574:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026577:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002657a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0026581:	75 20                	jne    c00265a3 <__adddf3+0x180>
c0026583:	89 d6                	mov    esi,edx
c0026585:	09 c6                	or     esi,eax
c0026587:	0f 84 db 04 00 00    	je     c0026a68 <__adddf3+0x645>
c002658d:	4b                   	dec    ebx
c002658e:	75 29                	jne    c00265b9 <__adddf3+0x196>
c0026590:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026593:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026596:	01 d1                	add    ecx,edx
c0026598:	11 c6                	adc    esi,eax
c002659a:	89 f0                	mov    eax,esi
c002659c:	89 ca                	mov    edx,ecx
c002659e:	e9 17 01 00 00       	jmp    c00266ba <__adddf3+0x297>
c00265a3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00265a6:	f7 d6                	not    esi
c00265a8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00265ae:	0f 84 b4 04 00 00    	je     c0026a68 <__adddf3+0x645>
c00265b4:	0d 00 00 00 80       	or     eax,0x80000000
c00265b9:	83 fb 1f             	cmp    ebx,0x1f
c00265bc:	7e 48                	jle    c0026606 <__adddf3+0x1e3>
c00265be:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00265c1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00265c4:	83 fb 3f             	cmp    ebx,0x3f
c00265c7:	0f 8f 9b 04 00 00    	jg     c0026a68 <__adddf3+0x645>
c00265cd:	83 e3 1f             	and    ebx,0x1f
c00265d0:	89 d9                	mov    ecx,ebx
c00265d2:	89 c7                	mov    edi,eax
c00265d4:	d3 ef                	shr    edi,cl
c00265d6:	31 db                	xor    ebx,ebx
c00265d8:	85 c9                	test   ecx,ecx
c00265da:	74 12                	je     c00265ee <__adddf3+0x1cb>
c00265dc:	be 20 00 00 00       	mov    esi,0x20
c00265e1:	29 ce                	sub    esi,ecx
c00265e3:	89 f1                	mov    ecx,esi
c00265e5:	d3 e0                	shl    eax,cl
c00265e7:	31 db                	xor    ebx,ebx
c00265e9:	85 c0                	test   eax,eax
c00265eb:	0f 95 c3             	setne  bl
c00265ee:	31 c0                	xor    eax,eax
c00265f0:	85 d2                	test   edx,edx
c00265f2:	0f 95 c0             	setne  al
c00265f5:	09 c7                	or     edi,eax
c00265f7:	09 fb                	or     ebx,edi
c00265f9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00265fc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00265ff:	01 da                	add    edx,ebx
c0026601:	83 d6 00             	adc    esi,0x0
c0026604:	eb 39                	jmp    c002663f <__adddf3+0x21c>
c0026606:	be 20 00 00 00       	mov    esi,0x20
c002660b:	29 de                	sub    esi,ebx
c002660d:	89 c7                	mov    edi,eax
c002660f:	89 f1                	mov    ecx,esi
c0026611:	d3 e7                	shl    edi,cl
c0026613:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026616:	89 d7                	mov    edi,edx
c0026618:	88 d9                	mov    cl,bl
c002661a:	d3 ef                	shr    edi,cl
c002661c:	89 f9                	mov    ecx,edi
c002661e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026621:	09 cf                	or     edi,ecx
c0026623:	88 d9                	mov    cl,bl
c0026625:	d3 e8                	shr    eax,cl
c0026627:	89 f1                	mov    ecx,esi
c0026629:	d3 e2                	shl    edx,cl
c002662b:	85 d2                	test   edx,edx
c002662d:	0f 95 c2             	setne  dl
c0026630:	0f b6 d2             	movzx  edx,dl
c0026633:	09 d7                	or     edi,edx
c0026635:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026638:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002663b:	01 fa                	add    edx,edi
c002663d:	11 c6                	adc    esi,eax
c002663f:	89 f0                	mov    eax,esi
c0026641:	eb 77                	jmp    c00266ba <__adddf3+0x297>
c0026643:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026646:	46                   	inc    esi
c0026647:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002664a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026650:	75 41                	jne    c0026693 <__adddf3+0x270>
c0026652:	89 d3                	mov    ebx,edx
c0026654:	09 c3                	or     ebx,eax
c0026656:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002665d:	75 27                	jne    c0026686 <__adddf3+0x263>
c002665f:	85 db                	test   ebx,ebx
c0026661:	0f 84 fb 03 00 00    	je     c0026a62 <__adddf3+0x63f>
c0026667:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002666a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002666d:	0f 84 f5 03 00 00    	je     c0026a68 <__adddf3+0x645>
c0026673:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026676:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026679:	85 c0                	test   eax,eax
c002667b:	0f 89 91 03 00 00    	jns    c0026a12 <__adddf3+0x5ef>
c0026681:	e9 85 03 00 00       	jmp    c0026a0b <__adddf3+0x5e8>
c0026686:	85 db                	test   ebx,ebx
c0026688:	0f 85 da 03 00 00    	jne    c0026a68 <__adddf3+0x645>
c002668e:	e9 cf 03 00 00       	jmp    c0026a62 <__adddf3+0x63f>
c0026693:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026696:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026699:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002669c:	f7 d1                	not    ecx
c002669e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00266a4:	0f 84 70 03 00 00    	je     c0026a1a <__adddf3+0x5f7>
c00266aa:	d1 ea                	shr    edx,1
c00266ac:	89 c1                	mov    ecx,eax
c00266ae:	c1 e1 1f             	shl    ecx,0x1f
c00266b1:	09 ca                	or     edx,ecx
c00266b3:	d1 e8                	shr    eax,1
c00266b5:	e9 6f 03 00 00       	jmp    c0026a29 <__adddf3+0x606>
c00266ba:	85 c0                	test   eax,eax
c00266bc:	0f 89 67 03 00 00    	jns    c0026a29 <__adddf3+0x606>
c00266c2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00266c5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00266c8:	f7 d1                	not    ecx
c00266ca:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00266d0:	0f 84 44 03 00 00    	je     c0026a1a <__adddf3+0x5f7>
c00266d6:	89 d1                	mov    ecx,edx
c00266d8:	d1 e9                	shr    ecx,1
c00266da:	83 e2 01             	and    edx,0x1
c00266dd:	09 ca                	or     edx,ecx
c00266df:	89 c1                	mov    ecx,eax
c00266e1:	c1 e1 1f             	shl    ecx,0x1f
c00266e4:	09 ca                	or     edx,ecx
c00266e6:	d1 e8                	shr    eax,1
c00266e8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00266ed:	e9 37 03 00 00       	jmp    c0026a29 <__adddf3+0x606>
c00266f2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00266f5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00266fb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00266fe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026701:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026707:	29 de                	sub    esi,ebx
c0026709:	85 f6                	test   esi,esi
c002670b:	0f 8e bd 00 00 00    	jle    c00267ce <__adddf3+0x3ab>
c0026711:	85 db                	test   ebx,ebx
c0026713:	75 17                	jne    c002672c <__adddf3+0x309>
c0026715:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026718:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002671b:	0f 84 47 03 00 00    	je     c0026a68 <__adddf3+0x645>
c0026721:	4e                   	dec    esi
c0026722:	75 20                	jne    c0026744 <__adddf3+0x321>
c0026724:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026727:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002672a:	eb 5b                	jmp    c0026787 <__adddf3+0x364>
c002672c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002672f:	f7 d3                	not    ebx
c0026731:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026737:	0f 84 2b 03 00 00    	je     c0026a68 <__adddf3+0x645>
c002673d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026744:	83 fe 1f             	cmp    esi,0x1f
c0026747:	7e 49                	jle    c0026792 <__adddf3+0x36f>
c0026749:	83 fe 3f             	cmp    esi,0x3f
c002674c:	0f 8f 16 03 00 00    	jg     c0026a68 <__adddf3+0x645>
c0026752:	83 e6 1f             	and    esi,0x1f
c0026755:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026758:	89 f1                	mov    ecx,esi
c002675a:	d3 ef                	shr    edi,cl
c002675c:	31 db                	xor    ebx,ebx
c002675e:	85 f6                	test   esi,esi
c0026760:	74 13                	je     c0026775 <__adddf3+0x352>
c0026762:	b9 20 00 00 00       	mov    ecx,0x20
c0026767:	29 f1                	sub    ecx,esi
c0026769:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002676c:	d3 e6                	shl    esi,cl
c002676e:	31 db                	xor    ebx,ebx
c0026770:	85 f6                	test   esi,esi
c0026772:	0f 95 c3             	setne  bl
c0026775:	31 c9                	xor    ecx,ecx
c0026777:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002677b:	0f 95 c1             	setne  cl
c002677e:	09 cf                	or     edi,ecx
c0026780:	09 fb                	or     ebx,edi
c0026782:	29 da                	sub    edx,ebx
c0026784:	83 d8 00             	sbb    eax,0x0
c0026787:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002678a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002678d:	e9 aa 01 00 00       	jmp    c002693c <__adddf3+0x519>
c0026792:	bf 20 00 00 00       	mov    edi,0x20
c0026797:	29 f7                	sub    edi,esi
c0026799:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002679c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002679f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00267a2:	d3 e3                	shl    ebx,cl
c00267a4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00267a7:	89 f1                	mov    ecx,esi
c00267a9:	d3 ef                	shr    edi,cl
c00267ab:	09 fb                	or     ebx,edi
c00267ad:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00267b0:	89 f1                	mov    ecx,esi
c00267b2:	d3 ef                	shr    edi,cl
c00267b4:	89 fe                	mov    esi,edi
c00267b6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00267b9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00267bc:	d3 e7                	shl    edi,cl
c00267be:	85 ff                	test   edi,edi
c00267c0:	0f 95 c1             	setne  cl
c00267c3:	0f b6 c9             	movzx  ecx,cl
c00267c6:	09 cb                	or     ebx,ecx
c00267c8:	29 da                	sub    edx,ebx
c00267ca:	19 f0                	sbb    eax,esi
c00267cc:	eb b9                	jmp    c0026787 <__adddf3+0x364>
c00267ce:	0f 84 cd 00 00 00    	je     c00268a1 <__adddf3+0x47e>
c00267d4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00267d7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00267da:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00267dd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00267e1:	75 1b                	jne    c00267fe <__adddf3+0x3db>
c00267e3:	89 d6                	mov    esi,edx
c00267e5:	09 c6                	or     esi,eax
c00267e7:	0f 84 7b 02 00 00    	je     c0026a68 <__adddf3+0x645>
c00267ed:	4b                   	dec    ebx
c00267ee:	75 24                	jne    c0026814 <__adddf3+0x3f1>
c00267f0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00267f3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00267f6:	29 d1                	sub    ecx,edx
c00267f8:	19 c6                	sbb    esi,eax
c00267fa:	89 ca                	mov    edx,ecx
c00267fc:	eb 61                	jmp    c002685f <__adddf3+0x43c>
c00267fe:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026801:	f7 d6                	not    esi
c0026803:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026809:	0f 84 59 02 00 00    	je     c0026a68 <__adddf3+0x645>
c002680f:	0d 00 00 00 80       	or     eax,0x80000000
c0026814:	83 fb 1f             	cmp    ebx,0x1f
c0026817:	7e 4d                	jle    c0026866 <__adddf3+0x443>
c0026819:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002681c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002681f:	83 fb 3f             	cmp    ebx,0x3f
c0026822:	0f 8f 40 02 00 00    	jg     c0026a68 <__adddf3+0x645>
c0026828:	83 e3 1f             	and    ebx,0x1f
c002682b:	89 d9                	mov    ecx,ebx
c002682d:	89 c7                	mov    edi,eax
c002682f:	d3 ef                	shr    edi,cl
c0026831:	31 db                	xor    ebx,ebx
c0026833:	85 c9                	test   ecx,ecx
c0026835:	74 12                	je     c0026849 <__adddf3+0x426>
c0026837:	be 20 00 00 00       	mov    esi,0x20
c002683c:	29 ce                	sub    esi,ecx
c002683e:	89 f1                	mov    ecx,esi
c0026840:	d3 e0                	shl    eax,cl
c0026842:	31 db                	xor    ebx,ebx
c0026844:	85 c0                	test   eax,eax
c0026846:	0f 95 c3             	setne  bl
c0026849:	31 c0                	xor    eax,eax
c002684b:	85 d2                	test   edx,edx
c002684d:	0f 95 c0             	setne  al
c0026850:	09 c7                	or     edi,eax
c0026852:	09 fb                	or     ebx,edi
c0026854:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026857:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002685a:	29 da                	sub    edx,ebx
c002685c:	83 de 00             	sbb    esi,0x0
c002685f:	89 f0                	mov    eax,esi
c0026861:	e9 d6 00 00 00       	jmp    c002693c <__adddf3+0x519>
c0026866:	be 20 00 00 00       	mov    esi,0x20
c002686b:	29 de                	sub    esi,ebx
c002686d:	89 c7                	mov    edi,eax
c002686f:	89 f1                	mov    ecx,esi
c0026871:	d3 e7                	shl    edi,cl
c0026873:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026876:	89 d7                	mov    edi,edx
c0026878:	88 d9                	mov    cl,bl
c002687a:	d3 ef                	shr    edi,cl
c002687c:	89 f9                	mov    ecx,edi
c002687e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026881:	09 cf                	or     edi,ecx
c0026883:	88 d9                	mov    cl,bl
c0026885:	d3 e8                	shr    eax,cl
c0026887:	89 f1                	mov    ecx,esi
c0026889:	d3 e2                	shl    edx,cl
c002688b:	85 d2                	test   edx,edx
c002688d:	0f 95 c2             	setne  dl
c0026890:	0f b6 d2             	movzx  edx,dl
c0026893:	09 d7                	or     edi,edx
c0026895:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026898:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002689b:	29 fa                	sub    edx,edi
c002689d:	19 c6                	sbb    esi,eax
c002689f:	eb be                	jmp    c002685f <__adddf3+0x43c>
c00268a1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00268a4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00268a7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00268ad:	75 6a                	jne    c0026919 <__adddf3+0x4f6>
c00268af:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00268b3:	75 58                	jne    c002690d <__adddf3+0x4ea>
c00268b5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00268b8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00268bb:	89 d6                	mov    esi,edx
c00268bd:	09 c6                	or     esi,eax
c00268bf:	75 17                	jne    c00268d8 <__adddf3+0x4b5>
c00268c1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00268c4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00268c7:	85 db                	test   ebx,ebx
c00268c9:	0f 85 99 01 00 00    	jne    c0026a68 <__adddf3+0x645>
c00268cf:	31 ff                	xor    edi,edi
c00268d1:	31 c9                	xor    ecx,ecx
c00268d3:	e9 90 01 00 00       	jmp    c0026a68 <__adddf3+0x645>
c00268d8:	85 db                	test   ebx,ebx
c00268da:	0f 84 88 01 00 00    	je     c0026a68 <__adddf3+0x645>
c00268e0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00268e3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00268e6:	85 c0                	test   eax,eax
c00268e8:	79 10                	jns    c00268fa <__adddf3+0x4d7>
c00268ea:	31 c9                	xor    ecx,ecx
c00268ec:	f7 da                	neg    edx
c00268ee:	0f 95 c1             	setne  cl
c00268f1:	01 c8                	add    eax,ecx
c00268f3:	f7 d8                	neg    eax
c00268f5:	e9 2f 01 00 00       	jmp    c0026a29 <__adddf3+0x606>
c00268fa:	31 ff                	xor    edi,edi
c00268fc:	31 c9                	xor    ecx,ecx
c00268fe:	89 c3                	mov    ebx,eax
c0026900:	09 d3                	or     ebx,edx
c0026902:	0f 84 60 01 00 00    	je     c0026a68 <__adddf3+0x645>
c0026908:	e9 05 01 00 00       	jmp    c0026a12 <__adddf3+0x5ef>
c002690d:	31 ff                	xor    edi,edi
c002690f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026914:	e9 4f 01 00 00       	jmp    c0026a68 <__adddf3+0x645>
c0026919:	89 c1                	mov    ecx,eax
c002691b:	89 d0                	mov    eax,edx
c002691d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0026920:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0026923:	89 ca                	mov    edx,ecx
c0026925:	85 c9                	test   ecx,ecx
c0026927:	79 2c                	jns    c0026955 <__adddf3+0x532>
c0026929:	31 c9                	xor    ecx,ecx
c002692b:	f7 d8                	neg    eax
c002692d:	0f 95 c1             	setne  cl
c0026930:	01 ca                	add    edx,ecx
c0026932:	f7 da                	neg    edx
c0026934:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026937:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002693a:	eb 19                	jmp    c0026955 <__adddf3+0x532>
c002693c:	85 c0                	test   eax,eax
c002693e:	0f 89 e5 00 00 00    	jns    c0026a29 <__adddf3+0x606>
c0026944:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026949:	89 c1                	mov    ecx,eax
c002694b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002694e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026951:	89 d0                	mov    eax,edx
c0026953:	89 ca                	mov    edx,ecx
c0026955:	85 d2                	test   edx,edx
c0026957:	74 59                	je     c00269b2 <__adddf3+0x58f>
c0026959:	0f bd da             	bsr    ebx,edx
c002695c:	83 f3 1f             	xor    ebx,0x1f
c002695f:	88 d9                	mov    cl,bl
c0026961:	d3 e2                	shl    edx,cl
c0026963:	bf 20 00 00 00       	mov    edi,0x20
c0026968:	89 f9                	mov    ecx,edi
c002696a:	29 d9                	sub    ecx,ebx
c002696c:	89 c6                	mov    esi,eax
c002696e:	d3 ee                	shr    esi,cl
c0026970:	09 d6                	or     esi,edx
c0026972:	88 d9                	mov    cl,bl
c0026974:	d3 e0                	shl    eax,cl
c0026976:	89 c2                	mov    edx,eax
c0026978:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002697b:	25 ff 07 00 00       	and    eax,0x7ff
c0026980:	39 d8                	cmp    eax,ebx
c0026982:	7f 22                	jg     c00269a6 <__adddf3+0x583>
c0026984:	29 c3                	sub    ebx,eax
c0026986:	43                   	inc    ebx
c0026987:	88 d9                	mov    cl,bl
c0026989:	d3 ea                	shr    edx,cl
c002698b:	29 df                	sub    edi,ebx
c002698d:	89 f9                	mov    ecx,edi
c002698f:	89 f0                	mov    eax,esi
c0026991:	d3 e0                	shl    eax,cl
c0026993:	09 c2                	or     edx,eax
c0026995:	89 f0                	mov    eax,esi
c0026997:	88 d9                	mov    cl,bl
c0026999:	d3 e8                	shr    eax,cl
c002699b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002699e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00269a4:	eb 6f                	jmp    c0026a15 <__adddf3+0x5f2>
c00269a6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00269a9:	29 d8                	sub    eax,ebx
c00269ab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00269ae:	89 f0                	mov    eax,esi
c00269b0:	eb 59                	jmp    c0026a0b <__adddf3+0x5e8>
c00269b2:	85 c0                	test   eax,eax
c00269b4:	74 6a                	je     c0026a20 <__adddf3+0x5fd>
c00269b6:	0f bd c8             	bsr    ecx,eax
c00269b9:	83 f1 1f             	xor    ecx,0x1f
c00269bc:	d3 e0                	shl    eax,cl
c00269be:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00269c1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00269c7:	83 c1 20             	add    ecx,0x20
c00269ca:	39 cb                	cmp    ebx,ecx
c00269cc:	7f 35                	jg     c0026a03 <__adddf3+0x5e0>
c00269ce:	29 d9                	sub    ecx,ebx
c00269d0:	8d 71 01             	lea    esi,[ecx+0x1]
c00269d3:	83 fe 1f             	cmp    esi,0x1f
c00269d6:	7e 09                	jle    c00269e1 <__adddf3+0x5be>
c00269d8:	83 e9 1f             	sub    ecx,0x1f
c00269db:	d3 e8                	shr    eax,cl
c00269dd:	89 c3                	mov    ebx,eax
c00269df:	eb 11                	jmp    c00269f2 <__adddf3+0x5cf>
c00269e1:	b9 20 00 00 00       	mov    ecx,0x20
c00269e6:	29 f1                	sub    ecx,esi
c00269e8:	89 c3                	mov    ebx,eax
c00269ea:	d3 e3                	shl    ebx,cl
c00269ec:	89 f1                	mov    ecx,esi
c00269ee:	d3 e8                	shr    eax,cl
c00269f0:	89 c2                	mov    edx,eax
c00269f2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00269f5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00269fa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00269fd:	89 d0                	mov    eax,edx
c00269ff:	89 da                	mov    edx,ebx
c0026a01:	eb 26                	jmp    c0026a29 <__adddf3+0x606>
c0026a03:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026a06:	29 cf                	sub    edi,ecx
c0026a08:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026a0b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026a10:	eb 17                	jmp    c0026a29 <__adddf3+0x606>
c0026a12:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026a15:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026a18:	eb 0f                	jmp    c0026a29 <__adddf3+0x606>
c0026a1a:	31 d2                	xor    edx,edx
c0026a1c:	31 c0                	xor    eax,eax
c0026a1e:	eb 09                	jmp    c0026a29 <__adddf3+0x606>
c0026a20:	89 c2                	mov    edx,eax
c0026a22:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0026a29:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026a2c:	c1 e1 14             	shl    ecx,0x14
c0026a2f:	89 c3                	mov    ebx,eax
c0026a31:	c1 eb 0b             	shr    ebx,0xb
c0026a34:	09 d9                	or     ecx,ebx
c0026a36:	89 d3                	mov    ebx,edx
c0026a38:	c1 eb 0b             	shr    ebx,0xb
c0026a3b:	c1 e0 15             	shl    eax,0x15
c0026a3e:	09 d8                	or     eax,ebx
c0026a40:	89 c7                	mov    edi,eax
c0026a42:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0026a48:	0f 95 c0             	setne  al
c0026a4b:	89 c6                	mov    esi,eax
c0026a4d:	09 f3                	or     ebx,esi
c0026a4f:	83 e3 01             	and    ebx,0x1
c0026a52:	c1 ea 0a             	shr    edx,0xa
c0026a55:	21 da                	and    edx,ebx
c0026a57:	89 f8                	mov    eax,edi
c0026a59:	01 d0                	add    eax,edx
c0026a5b:	83 d1 00             	adc    ecx,0x0
c0026a5e:	89 c7                	mov    edi,eax
c0026a60:	eb 06                	jmp    c0026a68 <__adddf3+0x645>
c0026a62:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026a65:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026a68:	89 f8                	mov    eax,edi
c0026a6a:	89 ca                	mov    edx,ecx
c0026a6c:	83 c4 24             	add    esp,0x24
c0026a6f:	5b                   	pop    ebx
c0026a70:	5e                   	pop    esi
c0026a71:	5f                   	pop    edi
c0026a72:	5d                   	pop    ebp
c0026a73:	c3                   	ret    

c0026a74 <__subdf3>:
c0026a74:	55                   	push   ebp
c0026a75:	89 e5                	mov    ebp,esp
c0026a77:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026a7a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0026a7d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0026a83:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0026a86:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0026a89:	5d                   	pop    ebp
c0026a8a:	e9 94 f9 ff ff       	jmp    c0026423 <__adddf3>

c0026a8f <__negdf2>:
c0026a8f:	55                   	push   ebp
c0026a90:	89 e5                	mov    ebp,esp
c0026a92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026a95:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026a98:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0026a9e:	5d                   	pop    ebp
c0026a9f:	c3                   	ret    

c0026aa0 <__muldf3>:
c0026aa0:	55                   	push   ebp
c0026aa1:	89 e5                	mov    ebp,esp
c0026aa3:	57                   	push   edi
c0026aa4:	56                   	push   esi
c0026aa5:	53                   	push   ebx
c0026aa6:	83 ec 24             	sub    esp,0x24
c0026aa9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026aac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026aaf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026ab2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026ab5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0026ab8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0026abb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026abe:	89 c8                	mov    eax,ecx
c0026ac0:	c1 f8 14             	sar    eax,0x14
c0026ac3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026ac6:	89 f8                	mov    eax,edi
c0026ac8:	89 fb                	mov    ebx,edi
c0026aca:	c1 e3 0b             	shl    ebx,0xb
c0026acd:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0026ad0:	c1 e1 0b             	shl    ecx,0xb
c0026ad3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026ad9:	c1 e8 15             	shr    eax,0x15
c0026adc:	09 c1                	or     ecx,eax
c0026ade:	89 d6                	mov    esi,edx
c0026ae0:	89 d0                	mov    eax,edx
c0026ae2:	c1 f8 14             	sar    eax,0x14
c0026ae5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026ae8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0026aeb:	89 c3                	mov    ebx,eax
c0026aed:	c1 e3 0b             	shl    ebx,0xb
c0026af0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026af3:	c1 e6 0b             	shl    esi,0xb
c0026af6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0026afc:	c1 e8 15             	shr    eax,0x15
c0026aff:	09 c6                	or     esi,eax
c0026b01:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026b04:	25 ff 07 00 00       	and    eax,0x7ff
c0026b09:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026b0c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026b0f:	25 ff 07 00 00       	and    eax,0x7ff
c0026b14:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026b17:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026b1a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0026b1d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0026b24:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026b27:	40                   	inc    eax
c0026b28:	a9 fe 07 00 00       	test   eax,0x7fe
c0026b2d:	0f 85 8d 00 00 00    	jne    c0026bc0 <__muldf3+0x120>
c0026b33:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026b36:	09 c8                	or     eax,ecx
c0026b38:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0026b3c:	74 44                	je     c0026b82 <__muldf3+0xe2>
c0026b3e:	85 c0                	test   eax,eax
c0026b40:	0f 85 31 02 00 00    	jne    c0026d77 <__muldf3+0x2d7>
c0026b46:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026b49:	40                   	inc    eax
c0026b4a:	a9 fe 07 00 00       	test   eax,0x7fe
c0026b4f:	75 13                	jne    c0026b64 <__muldf3+0xc4>
c0026b51:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026b54:	09 f1                	or     ecx,esi
c0026b56:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026b5a:	74 22                	je     c0026b7e <__muldf3+0xde>
c0026b5c:	85 c9                	test   ecx,ecx
c0026b5e:	0f 85 0d 02 00 00    	jne    c0026d71 <__muldf3+0x2d1>
c0026b64:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0026b68:	0f 89 09 02 00 00    	jns    c0026d77 <__muldf3+0x2d7>
c0026b6e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026b71:	05 00 00 00 80       	add    eax,0x80000000
c0026b76:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026b79:	e9 f9 01 00 00       	jmp    c0026d77 <__muldf3+0x2d7>
c0026b7e:	85 c9                	test   ecx,ecx
c0026b80:	eb 2e                	jmp    c0026bb0 <__muldf3+0x110>
c0026b82:	85 c0                	test   eax,eax
c0026b84:	74 20                	je     c0026ba6 <__muldf3+0x106>
c0026b86:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0026b89:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026b8c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026b8f:	c1 ef 1f             	shr    edi,0x1f
c0026b92:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0026b95:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0026b98:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026b9b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026b9e:	09 f9                	or     ecx,edi
c0026ba0:	78 1e                	js     c0026bc0 <__muldf3+0x120>
c0026ba2:	89 c3                	mov    ebx,eax
c0026ba4:	eb e0                	jmp    c0026b86 <__muldf3+0xe6>
c0026ba6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026ba9:	f7 d0                	not    eax
c0026bab:	a9 ff 07 00 00       	test   eax,0x7ff
c0026bb0:	75 b2                	jne    c0026b64 <__muldf3+0xc4>
c0026bb2:	31 ff                	xor    edi,edi
c0026bb4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0026bbb:	e9 b7 01 00 00       	jmp    c0026d77 <__muldf3+0x2d7>
c0026bc0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026bc3:	40                   	inc    eax
c0026bc4:	a9 fe 07 00 00       	test   eax,0x7fe
c0026bc9:	75 57                	jne    c0026c22 <__muldf3+0x182>
c0026bcb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026bce:	09 f0                	or     eax,esi
c0026bd0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026bd4:	74 23                	je     c0026bf9 <__muldf3+0x159>
c0026bd6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0026bda:	0f 89 91 01 00 00    	jns    c0026d71 <__muldf3+0x2d1>
c0026be0:	85 c0                	test   eax,eax
c0026be2:	0f 85 89 01 00 00    	jne    c0026d71 <__muldf3+0x2d1>
c0026be8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0026beb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0026bf1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026bf4:	e9 7e 01 00 00       	jmp    c0026d77 <__muldf3+0x2d7>
c0026bf9:	85 c0                	test   eax,eax
c0026bfb:	75 0c                	jne    c0026c09 <__muldf3+0x169>
c0026bfd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0026c01:	0f 89 6a 01 00 00    	jns    c0026d71 <__muldf3+0x2d1>
c0026c07:	eb df                	jmp    c0026be8 <__muldf3+0x148>
c0026c09:	01 f6                	add    esi,esi
c0026c0b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026c0e:	c1 ea 1f             	shr    edx,0x1f
c0026c11:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026c14:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0026c17:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026c1a:	09 d6                	or     esi,edx
c0026c1c:	78 04                	js     c0026c22 <__muldf3+0x182>
c0026c1e:	89 c3                	mov    ebx,eax
c0026c20:	eb e7                	jmp    c0026c09 <__muldf3+0x169>
c0026c22:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0026c28:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026c2e:	89 c8                	mov    eax,ecx
c0026c30:	f7 e6                	mul    esi
c0026c32:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0026c35:	89 c7                	mov    edi,eax
c0026c37:	89 c8                	mov    eax,ecx
c0026c39:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0026c3c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0026c3f:	89 c1                	mov    ecx,eax
c0026c41:	89 f0                	mov    eax,esi
c0026c43:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0026c46:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0026c49:	89 c6                	mov    esi,eax
c0026c4b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026c4e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0026c51:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026c54:	31 c0                	xor    eax,eax
c0026c56:	01 f1                	add    ecx,esi
c0026c58:	0f 92 c0             	setb   al
c0026c5b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0026c5e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026c61:	83 d6 00             	adc    esi,0x0
c0026c64:	01 c7                	add    edi,eax
c0026c66:	83 d6 00             	adc    esi,0x0
c0026c69:	01 ca                	add    edx,ecx
c0026c6b:	0f 92 c1             	setb   cl
c0026c6e:	0f b6 c9             	movzx  ecx,cl
c0026c71:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0026c74:	83 d6 00             	adc    esi,0x0
c0026c77:	01 cf                	add    edi,ecx
c0026c79:	83 d6 00             	adc    esi,0x0
c0026c7c:	31 c9                	xor    ecx,ecx
c0026c7e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0026c81:	0f 95 c1             	setne  cl
c0026c84:	09 cf                	or     edi,ecx
c0026c86:	85 f6                	test   esi,esi
c0026c88:	78 0c                	js     c0026c96 <__muldf3+0x1f6>
c0026c8a:	01 f6                	add    esi,esi
c0026c8c:	89 f8                	mov    eax,edi
c0026c8e:	c1 e8 1f             	shr    eax,0x1f
c0026c91:	09 c6                	or     esi,eax
c0026c93:	01 ff                	add    edi,edi
c0026c95:	4b                   	dec    ebx
c0026c96:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0026c9c:	0f 8f 85 00 00 00    	jg     c0026d27 <__muldf3+0x287>
c0026ca2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0026ca8:	85 db                	test   ebx,ebx
c0026caa:	0f 8f 84 00 00 00    	jg     c0026d34 <__muldf3+0x294>
c0026cb0:	83 fb cc             	cmp    ebx,0xffffffcc
c0026cb3:	7c 79                	jl     c0026d2e <__muldf3+0x28e>
c0026cb5:	ba 01 00 00 00       	mov    edx,0x1
c0026cba:	29 da                	sub    edx,ebx
c0026cbc:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026cc2:	83 fa 1f             	cmp    edx,0x1f
c0026cc5:	7e 30                	jle    c0026cf7 <__muldf3+0x257>
c0026cc7:	83 fa 20             	cmp    edx,0x20
c0026cca:	75 0b                	jne    c0026cd7 <__muldf3+0x237>
c0026ccc:	31 c0                	xor    eax,eax
c0026cce:	85 ff                	test   edi,edi
c0026cd0:	0f 95 c0             	setne  al
c0026cd3:	89 c7                	mov    edi,eax
c0026cd5:	eb 1a                	jmp    c0026cf1 <__muldf3+0x251>
c0026cd7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0026cda:	89 f0                	mov    eax,esi
c0026cdc:	d3 e0                	shl    eax,cl
c0026cde:	09 f8                	or     eax,edi
c0026ce0:	0f 95 c0             	setne  al
c0026ce3:	0f b6 c0             	movzx  eax,al
c0026ce6:	89 c7                	mov    edi,eax
c0026ce8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0026ced:	29 d9                	sub    ecx,ebx
c0026cef:	d3 ee                	shr    esi,cl
c0026cf1:	09 f7                	or     edi,esi
c0026cf3:	31 db                	xor    ebx,ebx
c0026cf5:	eb 3b                	jmp    c0026d32 <__muldf3+0x292>
c0026cf7:	83 c3 1f             	add    ebx,0x1f
c0026cfa:	89 f0                	mov    eax,esi
c0026cfc:	88 d9                	mov    cl,bl
c0026cfe:	d3 e0                	shl    eax,cl
c0026d00:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026d03:	89 f8                	mov    eax,edi
c0026d05:	88 d1                	mov    cl,dl
c0026d07:	d3 e8                	shr    eax,cl
c0026d09:	89 c1                	mov    ecx,eax
c0026d0b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026d0e:	09 c8                	or     eax,ecx
c0026d10:	88 d9                	mov    cl,bl
c0026d12:	d3 e7                	shl    edi,cl
c0026d14:	31 db                	xor    ebx,ebx
c0026d16:	85 ff                	test   edi,edi
c0026d18:	0f 95 c3             	setne  bl
c0026d1b:	89 df                	mov    edi,ebx
c0026d1d:	09 c7                	or     edi,eax
c0026d1f:	88 d1                	mov    cl,dl
c0026d21:	d3 ee                	shr    esi,cl
c0026d23:	31 db                	xor    ebx,ebx
c0026d25:	eb 0d                	jmp    c0026d34 <__muldf3+0x294>
c0026d27:	bb ff 07 00 00       	mov    ebx,0x7ff
c0026d2c:	eb 02                	jmp    c0026d30 <__muldf3+0x290>
c0026d2e:	31 db                	xor    ebx,ebx
c0026d30:	31 ff                	xor    edi,edi
c0026d32:	31 f6                	xor    esi,esi
c0026d34:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026d37:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0026d3a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0026d3f:	09 c3                	or     ebx,eax
c0026d41:	c1 e3 14             	shl    ebx,0x14
c0026d44:	89 f0                	mov    eax,esi
c0026d46:	c1 e8 0b             	shr    eax,0xb
c0026d49:	09 c3                	or     ebx,eax
c0026d4b:	89 f8                	mov    eax,edi
c0026d4d:	c1 e8 0b             	shr    eax,0xb
c0026d50:	c1 e6 15             	shl    esi,0x15
c0026d53:	09 c6                	or     esi,eax
c0026d55:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0026d5b:	0f 95 c1             	setne  cl
c0026d5e:	09 c8                	or     eax,ecx
c0026d60:	83 e0 01             	and    eax,0x1
c0026d63:	c1 ef 0a             	shr    edi,0xa
c0026d66:	21 c7                	and    edi,eax
c0026d68:	01 f7                	add    edi,esi
c0026d6a:	83 d3 00             	adc    ebx,0x0
c0026d6d:	89 da                	mov    edx,ebx
c0026d6f:	eb 03                	jmp    c0026d74 <__muldf3+0x2d4>
c0026d71:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0026d74:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026d77:	89 f8                	mov    eax,edi
c0026d79:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026d7c:	83 c4 24             	add    esp,0x24
c0026d7f:	5b                   	pop    ebx
c0026d80:	5e                   	pop    esi
c0026d81:	5f                   	pop    edi
c0026d82:	5d                   	pop    ebp
c0026d83:	c3                   	ret    

c0026d84 <__divdf3>:
c0026d84:	55                   	push   ebp
c0026d85:	89 e5                	mov    ebp,esp
c0026d87:	57                   	push   edi
c0026d88:	56                   	push   esi
c0026d89:	53                   	push   ebx
c0026d8a:	83 ec 2c             	sub    esp,0x2c
c0026d8d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026d90:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026d93:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026d96:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026d99:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026d9c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026d9f:	89 ce                	mov    esi,ecx
c0026da1:	89 c8                	mov    eax,ecx
c0026da3:	c1 f8 14             	sar    eax,0x14
c0026da6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026da9:	89 f8                	mov    eax,edi
c0026dab:	89 fb                	mov    ebx,edi
c0026dad:	c1 e3 0b             	shl    ebx,0xb
c0026db0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0026db3:	c1 e6 0b             	shl    esi,0xb
c0026db6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0026dbc:	c1 e8 15             	shr    eax,0x15
c0026dbf:	09 c6                	or     esi,eax
c0026dc1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0026dc4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026dc7:	89 c2                	mov    edx,eax
c0026dc9:	c1 fa 14             	sar    edx,0x14
c0026dcc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0026dcf:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0026dd2:	89 de                	mov    esi,ebx
c0026dd4:	c1 e6 0b             	shl    esi,0xb
c0026dd7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0026dda:	c1 e0 0b             	shl    eax,0xb
c0026ddd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026de2:	c1 eb 15             	shr    ebx,0x15
c0026de5:	09 d8                	or     eax,ebx
c0026de7:	89 c2                	mov    edx,eax
c0026de9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026dec:	25 ff 07 00 00       	and    eax,0x7ff
c0026df1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026df4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026df7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026dfd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0026e00:	29 d8                	sub    eax,ebx
c0026e02:	05 ff 03 00 00       	add    eax,0x3ff
c0026e07:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026e0a:	46                   	inc    esi
c0026e0b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026e11:	0f 85 a5 00 00 00    	jne    c0026ebc <__divdf3+0x138>
c0026e17:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026e1a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0026e1d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0026e21:	74 2a                	je     c0026e4d <__divdf3+0xc9>
c0026e23:	85 f6                	test   esi,esi
c0026e25:	0f 85 cc 02 00 00    	jne    c00270f7 <__divdf3+0x373>
c0026e2b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026e2e:	40                   	inc    eax
c0026e2f:	a9 fe 07 00 00       	test   eax,0x7fe
c0026e34:	75 26                	jne    c0026e5c <__divdf3+0xd8>
c0026e36:	85 db                	test   ebx,ebx
c0026e38:	74 22                	je     c0026e5c <__divdf3+0xd8>
c0026e3a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026e3d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026e40:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026e43:	09 d0                	or     eax,edx
c0026e45:	0f 85 ac 02 00 00    	jne    c00270f7 <__divdf3+0x373>
c0026e4b:	eb 63                	jmp    c0026eb0 <__divdf3+0x12c>
c0026e4d:	85 f6                	test   esi,esi
c0026e4f:	75 22                	jne    c0026e73 <__divdf3+0xef>
c0026e51:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026e54:	40                   	inc    eax
c0026e55:	a9 fe 07 00 00       	test   eax,0x7fe
c0026e5a:	74 36                	je     c0026e92 <__divdf3+0x10e>
c0026e5c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026e60:	0f 89 91 02 00 00    	jns    c00270f7 <__divdf3+0x373>
c0026e66:	89 f8                	mov    eax,edi
c0026e68:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0026e6e:	e9 80 02 00 00       	jmp    c00270f3 <__divdf3+0x36f>
c0026e73:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026e76:	01 f6                	add    esi,esi
c0026e78:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026e7b:	c1 ef 1f             	shr    edi,0x1f
c0026e7e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026e81:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0026e84:	8d 48 ff             	lea    ecx,[eax-0x1]
c0026e87:	09 f7                	or     edi,esi
c0026e89:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0026e8c:	78 2e                	js     c0026ebc <__divdf3+0x138>
c0026e8e:	89 c8                	mov    eax,ecx
c0026e90:	eb e1                	jmp    c0026e73 <__divdf3+0xef>
c0026e92:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026e95:	09 d0                	or     eax,edx
c0026e97:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0026e9b:	74 0f                	je     c0026eac <__divdf3+0x128>
c0026e9d:	85 c0                	test   eax,eax
c0026e9f:	74 bb                	je     c0026e5c <__divdf3+0xd8>
c0026ea1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026ea4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026ea7:	e9 4b 02 00 00       	jmp    c00270f7 <__divdf3+0x373>
c0026eac:	85 c0                	test   eax,eax
c0026eae:	75 ac                	jne    c0026e5c <__divdf3+0xd8>
c0026eb0:	31 ff                	xor    edi,edi
c0026eb2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026eb7:	e9 3b 02 00 00       	jmp    c00270f7 <__divdf3+0x373>
c0026ebc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026ebf:	8d 4f 01             	lea    ecx,[edi+0x1]
c0026ec2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0026ec8:	75 6b                	jne    c0026f35 <__divdf3+0x1b1>
c0026eca:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026ecd:	09 d6                	or     esi,edx
c0026ecf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0026ed3:	74 28                	je     c0026efd <__divdf3+0x179>
c0026ed5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026ed8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026edb:	85 f6                	test   esi,esi
c0026edd:	0f 85 14 02 00 00    	jne    c00270f7 <__divdf3+0x373>
c0026ee3:	31 ff                	xor    edi,edi
c0026ee5:	31 c9                	xor    ecx,ecx
c0026ee7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026eea:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026eed:	0f 89 04 02 00 00    	jns    c00270f7 <__divdf3+0x373>
c0026ef3:	b9 00 00 00 80       	mov    ecx,0x80000000
c0026ef8:	e9 fa 01 00 00       	jmp    c00270f7 <__divdf3+0x373>
c0026efd:	85 f6                	test   esi,esi
c0026eff:	75 1b                	jne    c0026f1c <__divdf3+0x198>
c0026f01:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026f04:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026f07:	25 00 00 00 80       	and    eax,0x80000000
c0026f0c:	31 c9                	xor    ecx,ecx
c0026f0e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0026f13:	89 cf                	mov    edi,ecx
c0026f15:	89 c1                	mov    ecx,eax
c0026f17:	e9 db 01 00 00       	jmp    c00270f7 <__divdf3+0x373>
c0026f1c:	01 d2                	add    edx,edx
c0026f1e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026f21:	c1 eb 1f             	shr    ebx,0x1f
c0026f24:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026f27:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0026f2a:	8d 48 01             	lea    ecx,[eax+0x1]
c0026f2d:	09 da                	or     edx,ebx
c0026f2f:	78 04                	js     c0026f35 <__divdf3+0x1b1>
c0026f31:	89 c8                	mov    eax,ecx
c0026f33:	eb e7                	jmp    c0026f1c <__divdf3+0x198>
c0026f35:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026f38:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026f3e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026f44:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0026f47:	39 d6                	cmp    esi,edx
c0026f49:	77 0d                	ja     c0026f58 <__divdf3+0x1d4>
c0026f4b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026f4e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0026f51:	72 1b                	jb     c0026f6e <__divdf3+0x1ea>
c0026f53:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0026f56:	75 16                	jne    c0026f6e <__divdf3+0x1ea>
c0026f58:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026f5b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026f5e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0026f61:	83 de 00             	sbb    esi,0x0
c0026f64:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0026f67:	ba 01 00 00 00       	mov    edx,0x1
c0026f6c:	eb 02                	jmp    c0026f70 <__divdf3+0x1ec>
c0026f6e:	31 d2                	xor    edx,edx
c0026f70:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0026f77:	31 ff                	xor    edi,edi
c0026f79:	01 ff                	add    edi,edi
c0026f7b:	89 d1                	mov    ecx,edx
c0026f7d:	c1 e9 1f             	shr    ecx,0x1f
c0026f80:	09 cf                	or     edi,ecx
c0026f82:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0026f85:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0026f88:	89 da                	mov    edx,ebx
c0026f8a:	89 f3                	mov    ebx,esi
c0026f8c:	8d 34 36             	lea    esi,[esi+esi*1]
c0026f8f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026f92:	c1 e9 1f             	shr    ecx,0x1f
c0026f95:	09 ce                	or     esi,ecx
c0026f97:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026f9a:	01 c9                	add    ecx,ecx
c0026f9c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0026f9f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026fa2:	85 db                	test   ebx,ebx
c0026fa4:	78 29                	js     c0026fcf <__divdf3+0x24b>
c0026fa6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0026fa9:	72 07                	jb     c0026fb2 <__divdf3+0x22e>
c0026fab:	75 3c                	jne    c0026fe9 <__divdf3+0x265>
c0026fad:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026fb0:	77 37                	ja     c0026fe9 <__divdf3+0x265>
c0026fb2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026fb5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0026fb8:	31 d2                	xor    edx,edx
c0026fba:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0026fbd:	0f 97 c2             	seta   dl
c0026fc0:	29 d6                	sub    esi,edx
c0026fc2:	89 d9                	mov    ecx,ebx
c0026fc4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0026fc7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026fca:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026fcd:	eb 17                	jmp    c0026fe6 <__divdf3+0x262>
c0026fcf:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026fd2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026fd5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026fd8:	0f 97 c1             	seta   cl
c0026fdb:	0f b6 c9             	movzx  ecx,cl
c0026fde:	29 ce                	sub    esi,ecx
c0026fe0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0026fe3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0026fe6:	83 ca 01             	or     edx,0x1
c0026fe9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0026fec:	75 8b                	jne    c0026f79 <__divdf3+0x1f5>
c0026fee:	c1 e7 09             	shl    edi,0x9
c0026ff1:	89 d1                	mov    ecx,edx
c0026ff3:	c1 e9 17             	shr    ecx,0x17
c0026ff6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026ff9:	09 f3                	or     ebx,esi
c0026ffb:	0f 95 c3             	setne  bl
c0026ffe:	0f b6 db             	movzx  ebx,bl
c0027001:	c1 e2 09             	shl    edx,0x9
c0027004:	09 d3                	or     ebx,edx
c0027006:	89 ca                	mov    edx,ecx
c0027008:	09 fa                	or     edx,edi
c002700a:	78 0c                	js     c0027018 <__divdf3+0x294>
c002700c:	01 d2                	add    edx,edx
c002700e:	89 d9                	mov    ecx,ebx
c0027010:	c1 e9 1f             	shr    ecx,0x1f
c0027013:	09 ca                	or     edx,ecx
c0027015:	01 db                	add    ebx,ebx
c0027017:	48                   	dec    eax
c0027018:	3d fe 07 00 00       	cmp    eax,0x7fe
c002701d:	0f 8f 83 00 00 00    	jg     c00270a6 <__divdf3+0x322>
c0027023:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027029:	85 c0                	test   eax,eax
c002702b:	0f 8f 82 00 00 00    	jg     c00270b3 <__divdf3+0x32f>
c0027031:	83 f8 cc             	cmp    eax,0xffffffcc
c0027034:	7c 77                	jl     c00270ad <__divdf3+0x329>
c0027036:	be 01 00 00 00       	mov    esi,0x1
c002703b:	29 c6                	sub    esi,eax
c002703d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027043:	83 fe 1f             	cmp    esi,0x1f
c0027046:	7e 2f                	jle    c0027077 <__divdf3+0x2f3>
c0027048:	83 fe 20             	cmp    esi,0x20
c002704b:	75 0a                	jne    c0027057 <__divdf3+0x2d3>
c002704d:	85 db                	test   ebx,ebx
c002704f:	0f 95 c3             	setne  bl
c0027052:	0f b6 db             	movzx  ebx,bl
c0027055:	eb 1a                	jmp    c0027071 <__divdf3+0x2ed>
c0027057:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002705a:	89 d7                	mov    edi,edx
c002705c:	d3 e7                	shl    edi,cl
c002705e:	89 f9                	mov    ecx,edi
c0027060:	09 d9                	or     ecx,ebx
c0027062:	0f 95 c3             	setne  bl
c0027065:	0f b6 db             	movzx  ebx,bl
c0027068:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002706d:	29 c1                	sub    ecx,eax
c002706f:	d3 ea                	shr    edx,cl
c0027071:	09 d3                	or     ebx,edx
c0027073:	31 c0                	xor    eax,eax
c0027075:	eb 3a                	jmp    c00270b1 <__divdf3+0x32d>
c0027077:	83 c0 1f             	add    eax,0x1f
c002707a:	89 d7                	mov    edi,edx
c002707c:	88 c1                	mov    cl,al
c002707e:	d3 e7                	shl    edi,cl
c0027080:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027083:	89 df                	mov    edi,ebx
c0027085:	89 f1                	mov    ecx,esi
c0027087:	d3 ef                	shr    edi,cl
c0027089:	89 f9                	mov    ecx,edi
c002708b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002708e:	09 cf                	or     edi,ecx
c0027090:	88 c1                	mov    cl,al
c0027092:	d3 e3                	shl    ebx,cl
c0027094:	85 db                	test   ebx,ebx
c0027096:	0f 95 c3             	setne  bl
c0027099:	0f b6 db             	movzx  ebx,bl
c002709c:	09 fb                	or     ebx,edi
c002709e:	89 f1                	mov    ecx,esi
c00270a0:	d3 ea                	shr    edx,cl
c00270a2:	31 c0                	xor    eax,eax
c00270a4:	eb 0d                	jmp    c00270b3 <__divdf3+0x32f>
c00270a6:	b8 ff 07 00 00       	mov    eax,0x7ff
c00270ab:	eb 02                	jmp    c00270af <__divdf3+0x32b>
c00270ad:	31 c0                	xor    eax,eax
c00270af:	31 db                	xor    ebx,ebx
c00270b1:	31 d2                	xor    edx,edx
c00270b3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00270b6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00270b9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00270bf:	09 c8                	or     eax,ecx
c00270c1:	c1 e0 14             	shl    eax,0x14
c00270c4:	89 d1                	mov    ecx,edx
c00270c6:	c1 e9 0b             	shr    ecx,0xb
c00270c9:	09 c8                	or     eax,ecx
c00270cb:	89 c6                	mov    esi,eax
c00270cd:	89 d9                	mov    ecx,ebx
c00270cf:	c1 e9 0b             	shr    ecx,0xb
c00270d2:	c1 e2 15             	shl    edx,0x15
c00270d5:	09 ca                	or     edx,ecx
c00270d7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00270dd:	0f 95 c0             	setne  al
c00270e0:	09 c1                	or     ecx,eax
c00270e2:	83 e1 01             	and    ecx,0x1
c00270e5:	c1 eb 0a             	shr    ebx,0xa
c00270e8:	21 cb                	and    ebx,ecx
c00270ea:	01 d3                	add    ebx,edx
c00270ec:	89 d8                	mov    eax,ebx
c00270ee:	83 d6 00             	adc    esi,0x0
c00270f1:	89 f2                	mov    edx,esi
c00270f3:	89 c7                	mov    edi,eax
c00270f5:	89 d1                	mov    ecx,edx
c00270f7:	89 f8                	mov    eax,edi
c00270f9:	89 ca                	mov    edx,ecx
c00270fb:	83 c4 2c             	add    esp,0x2c
c00270fe:	5b                   	pop    ebx
c00270ff:	5e                   	pop    esi
c0027100:	5f                   	pop    edi
c0027101:	5d                   	pop    ebp
c0027102:	c3                   	ret    

c0027103 <__floatsidf>:
c0027103:	55                   	push   ebp
c0027104:	89 e5                	mov    ebp,esp
c0027106:	56                   	push   esi
c0027107:	53                   	push   ebx
c0027108:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002710b:	85 db                	test   ebx,ebx
c002710d:	7e 15                	jle    c0027124 <__floatsidf+0x21>
c002710f:	0f bd cb             	bsr    ecx,ebx
c0027112:	83 f1 1f             	xor    ecx,0x1f
c0027115:	d3 e3                	shl    ebx,cl
c0027117:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002711d:	b8 1e 04 00 00       	mov    eax,0x41e
c0027122:	eb 21                	jmp    c0027145 <__floatsidf+0x42>
c0027124:	b8 00 00 00 00       	mov    eax,0x0
c0027129:	ba 00 00 00 00       	mov    edx,0x0
c002712e:	74 2a                	je     c002715a <__floatsidf+0x57>
c0027130:	f7 db                	neg    ebx
c0027132:	0f bd cb             	bsr    ecx,ebx
c0027135:	83 f1 1f             	xor    ecx,0x1f
c0027138:	d3 e3                	shl    ebx,cl
c002713a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027140:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027145:	29 c8                	sub    eax,ecx
c0027147:	c1 e0 14             	shl    eax,0x14
c002714a:	89 c1                	mov    ecx,eax
c002714c:	89 de                	mov    esi,ebx
c002714e:	c1 ee 0b             	shr    esi,0xb
c0027151:	09 f1                	or     ecx,esi
c0027153:	89 ca                	mov    edx,ecx
c0027155:	c1 e3 15             	shl    ebx,0x15
c0027158:	89 d8                	mov    eax,ebx
c002715a:	5b                   	pop    ebx
c002715b:	5e                   	pop    esi
c002715c:	5d                   	pop    ebp
c002715d:	c3                   	ret    

c002715e <__floatunsidf>:
c002715e:	55                   	push   ebp
c002715f:	89 e5                	mov    ebp,esp
c0027161:	56                   	push   esi
c0027162:	53                   	push   ebx
c0027163:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027166:	85 db                	test   ebx,ebx
c0027168:	74 2a                	je     c0027194 <__floatunsidf+0x36>
c002716a:	0f bd cb             	bsr    ecx,ebx
c002716d:	83 f1 1f             	xor    ecx,0x1f
c0027170:	d3 e3                	shl    ebx,cl
c0027172:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027178:	b8 1e 04 00 00       	mov    eax,0x41e
c002717d:	29 c8                	sub    eax,ecx
c002717f:	c1 e0 14             	shl    eax,0x14
c0027182:	89 c1                	mov    ecx,eax
c0027184:	89 de                	mov    esi,ebx
c0027186:	c1 ee 0b             	shr    esi,0xb
c0027189:	09 f1                	or     ecx,esi
c002718b:	89 ca                	mov    edx,ecx
c002718d:	c1 e3 15             	shl    ebx,0x15
c0027190:	89 d8                	mov    eax,ebx
c0027192:	eb 04                	jmp    c0027198 <__floatunsidf+0x3a>
c0027194:	31 c0                	xor    eax,eax
c0027196:	31 d2                	xor    edx,edx
c0027198:	5b                   	pop    ebx
c0027199:	5e                   	pop    esi
c002719a:	5d                   	pop    ebp
c002719b:	c3                   	ret    

c002719c <__fixdfsi>:
c002719c:	55                   	push   ebp
c002719d:	89 e5                	mov    ebp,esp
c002719f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00271a2:	89 d1                	mov    ecx,edx
c00271a4:	c1 e1 0b             	shl    ecx,0xb
c00271a7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00271ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00271b0:	c1 e8 15             	shr    eax,0x15
c00271b3:	09 c1                	or     ecx,eax
c00271b5:	c1 fa 14             	sar    edx,0x14
c00271b8:	78 1f                	js     c00271d9 <__fixdfsi+0x3d>
c00271ba:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00271c0:	31 c0                	xor    eax,eax
c00271c2:	83 fa 1e             	cmp    edx,0x1e
c00271c5:	77 40                	ja     c0027207 <__fixdfsi+0x6b>
c00271c7:	89 c8                	mov    eax,ecx
c00271c9:	0d 00 00 00 80       	or     eax,0x80000000
c00271ce:	b9 1f 00 00 00       	mov    ecx,0x1f
c00271d3:	29 d1                	sub    ecx,edx
c00271d5:	d3 e8                	shr    eax,cl
c00271d7:	eb 2e                	jmp    c0027207 <__fixdfsi+0x6b>
c00271d9:	31 c0                	xor    eax,eax
c00271db:	81 c2 01 04 00 00    	add    edx,0x401
c00271e1:	78 24                	js     c0027207 <__fixdfsi+0x6b>
c00271e3:	83 fa 1e             	cmp    edx,0x1e
c00271e6:	7e 09                	jle    c00271f1 <__fixdfsi+0x55>
c00271e8:	83 fa 1f             	cmp    edx,0x1f
c00271eb:	75 18                	jne    c0027205 <__fixdfsi+0x69>
c00271ed:	85 c9                	test   ecx,ecx
c00271ef:	75 14                	jne    c0027205 <__fixdfsi+0x69>
c00271f1:	89 c8                	mov    eax,ecx
c00271f3:	0d 00 00 00 80       	or     eax,0x80000000
c00271f8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00271fd:	29 d1                	sub    ecx,edx
c00271ff:	d3 e8                	shr    eax,cl
c0027201:	f7 d8                	neg    eax
c0027203:	eb 02                	jmp    c0027207 <__fixdfsi+0x6b>
c0027205:	31 c0                	xor    eax,eax
c0027207:	5d                   	pop    ebp
c0027208:	c3                   	ret    

c0027209 <__fixunsdfsi>:
c0027209:	55                   	push   ebp
c002720a:	89 e5                	mov    ebp,esp
c002720c:	53                   	push   ebx
c002720d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027210:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027213:	89 d3                	mov    ebx,edx
c0027215:	c1 fb 14             	sar    ebx,0x14
c0027218:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002721e:	31 c0                	xor    eax,eax
c0027220:	83 fb 1f             	cmp    ebx,0x1f
c0027223:	77 1d                	ja     c0027242 <__fixunsdfsi+0x39>
c0027225:	89 d0                	mov    eax,edx
c0027227:	c1 e0 0b             	shl    eax,0xb
c002722a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002722f:	c1 e9 15             	shr    ecx,0x15
c0027232:	09 c8                	or     eax,ecx
c0027234:	0d 00 00 00 80       	or     eax,0x80000000
c0027239:	b9 1f 00 00 00       	mov    ecx,0x1f
c002723e:	29 d9                	sub    ecx,ebx
c0027240:	d3 e8                	shr    eax,cl
c0027242:	5b                   	pop    ebx
c0027243:	5d                   	pop    ebp
c0027244:	c3                   	ret    

c0027245 <__cmpdf2>:
c0027245:	55                   	push   ebp
c0027246:	89 e5                	mov    ebp,esp
c0027248:	57                   	push   edi
c0027249:	56                   	push   esi
c002724a:	53                   	push   ebx
c002724b:	83 ec 0c             	sub    esp,0xc
c002724e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027251:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027254:	89 ca                	mov    edx,ecx
c0027256:	c1 ea 14             	shr    edx,0x14
c0027259:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002725f:	89 cb                	mov    ebx,ecx
c0027261:	c1 fb 1f             	sar    ebx,0x1f
c0027264:	31 da                	xor    edx,ebx
c0027266:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027269:	89 df                	mov    edi,ebx
c002726b:	c1 e7 0b             	shl    edi,0xb
c002726e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027271:	c1 e1 0b             	shl    ecx,0xb
c0027274:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002727a:	c1 eb 15             	shr    ebx,0x15
c002727d:	09 d9                	or     ecx,ebx
c002727f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0027282:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027285:	89 ce                	mov    esi,ecx
c0027287:	c1 ee 14             	shr    esi,0x14
c002728a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027290:	89 cb                	mov    ebx,ecx
c0027292:	c1 fb 1f             	sar    ebx,0x1f
c0027295:	31 de                	xor    esi,ebx
c0027297:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002729a:	89 df                	mov    edi,ebx
c002729c:	c1 e7 0b             	shl    edi,0xb
c002729f:	c1 e1 0b             	shl    ecx,0xb
c00272a2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00272a8:	c1 eb 15             	shr    ebx,0x15
c00272ab:	09 d9                	or     ecx,ebx
c00272ad:	89 d3                	mov    ebx,edx
c00272af:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00272b5:	43                   	inc    ebx
c00272b6:	83 fb 01             	cmp    ebx,0x1
c00272b9:	77 08                	ja     c00272c3 <__cmpdf2+0x7e>
c00272bb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00272be:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00272c1:	75 68                	jne    c002732b <__cmpdf2+0xe6>
c00272c3:	89 f3                	mov    ebx,esi
c00272c5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00272cb:	43                   	inc    ebx
c00272cc:	83 fb 01             	cmp    ebx,0x1
c00272cf:	77 06                	ja     c00272d7 <__cmpdf2+0x92>
c00272d1:	89 fb                	mov    ebx,edi
c00272d3:	09 cb                	or     ebx,ecx
c00272d5:	75 54                	jne    c002732b <__cmpdf2+0xe6>
c00272d7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00272da:	09 f8                	or     eax,edi
c00272dc:	09 c8                	or     eax,ecx
c00272de:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00272e1:	75 12                	jne    c00272f5 <__cmpdf2+0xb0>
c00272e3:	8d 42 01             	lea    eax,[edx+0x1]
c00272e6:	83 f8 01             	cmp    eax,0x1
c00272e9:	77 0a                	ja     c00272f5 <__cmpdf2+0xb0>
c00272eb:	8d 5e 01             	lea    ebx,[esi+0x1]
c00272ee:	31 c0                	xor    eax,eax
c00272f0:	83 fb 01             	cmp    ebx,0x1
c00272f3:	76 36                	jbe    c002732b <__cmpdf2+0xe6>
c00272f5:	b8 01 00 00 00       	mov    eax,0x1
c00272fa:	39 f2                	cmp    edx,esi
c00272fc:	7f 2d                	jg     c002732b <__cmpdf2+0xe6>
c00272fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027303:	7c 26                	jl     c002732b <__cmpdf2+0xe6>
c0027305:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027308:	77 07                	ja     c0027311 <__cmpdf2+0xcc>
c002730a:	72 16                	jb     c0027322 <__cmpdf2+0xdd>
c002730c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002730f:	76 0a                	jbe    c002731b <__cmpdf2+0xd6>
c0027311:	89 d0                	mov    eax,edx
c0027313:	c1 f8 1f             	sar    eax,0x1f
c0027316:	83 c8 01             	or     eax,0x1
c0027319:	eb 10                	jmp    c002732b <__cmpdf2+0xe6>
c002731b:	b8 00 00 00 00       	mov    eax,0x0
c0027320:	73 09                	jae    c002732b <__cmpdf2+0xe6>
c0027322:	89 d0                	mov    eax,edx
c0027324:	c1 f8 1f             	sar    eax,0x1f
c0027327:	83 e0 02             	and    eax,0x2
c002732a:	48                   	dec    eax
c002732b:	83 c4 0c             	add    esp,0xc
c002732e:	5b                   	pop    ebx
c002732f:	5e                   	pop    esi
c0027330:	5f                   	pop    edi
c0027331:	5d                   	pop    ebp
c0027332:	c3                   	ret    

c0027333 <__eqdf2>:
c0027333:	55                   	push   ebp
c0027334:	89 e5                	mov    ebp,esp
c0027336:	50                   	push   eax
c0027337:	6a 01                	push   0x1
c0027339:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002733c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002733f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027342:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027345:	e8 fb fe ff ff       	call   c0027245 <__cmpdf2>
c002734a:	83 c4 18             	add    esp,0x18
c002734d:	c9                   	leave  
c002734e:	c3                   	ret    

c002734f <__nedf2>:
c002734f:	eb e2                	jmp    c0027333 <__eqdf2>

c0027351 <__gtdf2>:
c0027351:	55                   	push   ebp
c0027352:	89 e5                	mov    ebp,esp
c0027354:	50                   	push   eax
c0027355:	6a ff                	push   0xffffffff
c0027357:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002735a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002735d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027360:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027363:	e8 dd fe ff ff       	call   c0027245 <__cmpdf2>
c0027368:	83 c4 18             	add    esp,0x18
c002736b:	c9                   	leave  
c002736c:	c3                   	ret    

c002736d <__gedf2>:
c002736d:	eb e2                	jmp    c0027351 <__gtdf2>

c002736f <__ltdf2>:
c002736f:	eb c2                	jmp    c0027333 <__eqdf2>

c0027371 <__ledf2>:
c0027371:	eb c0                	jmp    c0027333 <__eqdf2>

c0027373 <__truncdfsf2>:
c0027373:	55                   	push   ebp
c0027374:	89 e5                	mov    ebp,esp
c0027376:	57                   	push   edi
c0027377:	56                   	push   esi
c0027378:	53                   	push   ebx
c0027379:	83 ec 0c             	sub    esp,0xc
c002737c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002737f:	89 d1                	mov    ecx,edx
c0027381:	c1 f9 14             	sar    ecx,0x14
c0027384:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027387:	89 df                	mov    edi,ebx
c0027389:	c1 e7 0b             	shl    edi,0xb
c002738c:	89 d0                	mov    eax,edx
c002738e:	c1 e0 0b             	shl    eax,0xb
c0027391:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027396:	c1 eb 15             	shr    ebx,0x15
c0027399:	09 d8                	or     eax,ebx
c002739b:	89 cb                	mov    ebx,ecx
c002739d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00273a3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00273a9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00273af:	0f 86 9e 00 00 00    	jbe    c0027453 <__truncdfsf2+0xe0>
c00273b5:	85 db                	test   ebx,ebx
c00273b7:	75 0a                	jne    c00273c3 <__truncdfsf2+0x50>
c00273b9:	c1 fa 17             	sar    edx,0x17
c00273bc:	30 d2                	xor    dl,dl
c00273be:	e9 84 00 00 00       	jmp    c0027447 <__truncdfsf2+0xd4>
c00273c3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00273c9:	83 fe 83             	cmp    esi,0xffffff83
c00273cc:	7d 4b                	jge    c0027419 <__truncdfsf2+0xa6>
c00273ce:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00273d3:	29 f1                	sub    ecx,esi
c00273d5:	83 f9 1f             	cmp    ecx,0x1f
c00273d8:	7f 6b                	jg     c0027445 <__truncdfsf2+0xd2>
c00273da:	0d 00 00 00 80       	or     eax,0x80000000
c00273df:	89 c3                	mov    ebx,eax
c00273e1:	d3 eb                	shr    ebx,cl
c00273e3:	be 01 00 00 00       	mov    esi,0x1
c00273e8:	d3 e6                	shl    esi,cl
c00273ea:	4e                   	dec    esi
c00273eb:	21 f0                	and    eax,esi
c00273ed:	09 f8                	or     eax,edi
c00273ef:	0f 95 c0             	setne  al
c00273f2:	0f b6 c0             	movzx  eax,al
c00273f5:	09 c3                	or     ebx,eax
c00273f7:	89 d9                	mov    ecx,ebx
c00273f9:	c1 e9 08             	shr    ecx,0x8
c00273fc:	f6 c3 7f             	test   bl,0x7f
c00273ff:	0f 95 c0             	setne  al
c0027402:	09 c8                	or     eax,ecx
c0027404:	83 e0 01             	and    eax,0x1
c0027407:	c1 eb 07             	shr    ebx,0x7
c002740a:	21 c3                	and    ebx,eax
c002740c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0027412:	09 d1                	or     ecx,edx
c0027414:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0027417:	eb 76                	jmp    c002748f <__truncdfsf2+0x11c>
c0027419:	83 c6 80             	add    esi,0xffffff80
c002741c:	7e 1d                	jle    c002743b <__truncdfsf2+0xc8>
c002741e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0027424:	75 0b                	jne    c0027431 <__truncdfsf2+0xbe>
c0027426:	09 f8                	or     eax,edi
c0027428:	74 09                	je     c0027433 <__truncdfsf2+0xc0>
c002742a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002742f:	eb 02                	jmp    c0027433 <__truncdfsf2+0xc0>
c0027431:	31 c0                	xor    eax,eax
c0027433:	c1 fa 17             	sar    edx,0x17
c0027436:	80 ca ff             	or     dl,0xff
c0027439:	eb 0e                	jmp    c0027449 <__truncdfsf2+0xd6>
c002743b:	c1 fa 1f             	sar    edx,0x1f
c002743e:	c1 e2 08             	shl    edx,0x8
c0027441:	09 ca                	or     edx,ecx
c0027443:	eb 04                	jmp    c0027449 <__truncdfsf2+0xd6>
c0027445:	31 d2                	xor    edx,edx
c0027447:	31 c0                	xor    eax,eax
c0027449:	c1 e2 17             	shl    edx,0x17
c002744c:	c1 e8 08             	shr    eax,0x8
c002744f:	09 d0                	or     eax,edx
c0027451:	eb 3c                	jmp    c002748f <__truncdfsf2+0x11c>
c0027453:	81 e9 80 03 00 00    	sub    ecx,0x380
c0027459:	89 ca                	mov    edx,ecx
c002745b:	c1 fa 0b             	sar    edx,0xb
c002745e:	c1 e2 08             	shl    edx,0x8
c0027461:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027464:	31 db                	xor    ebx,ebx
c0027466:	85 ff                	test   edi,edi
c0027468:	0f 95 c3             	setne  bl
c002746b:	09 d8                	or     eax,ebx
c002746d:	89 c3                	mov    ebx,eax
c002746f:	c1 eb 08             	shr    ebx,0x8
c0027472:	a8 7f                	test   al,0x7f
c0027474:	0f 95 c2             	setne  dl
c0027477:	89 d6                	mov    esi,edx
c0027479:	09 de                	or     esi,ebx
c002747b:	83 e6 01             	and    esi,0x1
c002747e:	c1 e8 07             	shr    eax,0x7
c0027481:	21 f0                	and    eax,esi
c0027483:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027486:	09 ca                	or     edx,ecx
c0027488:	c1 e2 17             	shl    edx,0x17
c002748b:	09 da                	or     edx,ebx
c002748d:	01 d0                	add    eax,edx
c002748f:	83 c4 0c             	add    esp,0xc
c0027492:	5b                   	pop    ebx
c0027493:	5e                   	pop    esi
c0027494:	5f                   	pop    edi
c0027495:	5d                   	pop    ebp
c0027496:	c3                   	ret    

c0027497 <__extendsfdf2>:
c0027497:	55                   	push   ebp
c0027498:	89 e5                	mov    ebp,esp
c002749a:	57                   	push   edi
c002749b:	56                   	push   esi
c002749c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002749f:	89 d1                	mov    ecx,edx
c00274a1:	c1 f9 17             	sar    ecx,0x17
c00274a4:	c1 e2 08             	shl    edx,0x8
c00274a7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00274ad:	89 c8                	mov    eax,ecx
c00274af:	80 e4 f8             	and    ah,0xf8
c00274b2:	8d 71 01             	lea    esi,[ecx+0x1]
c00274b5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00274bb:	75 27                	jne    c00274e4 <__extendsfdf2+0x4d>
c00274bd:	81 e1 ff 00 00 00    	and    ecx,0xff
c00274c3:	75 18                	jne    c00274dd <__extendsfdf2+0x46>
c00274c5:	85 d2                	test   edx,edx
c00274c7:	74 20                	je     c00274e9 <__extendsfdf2+0x52>
c00274c9:	41                   	inc    ecx
c00274ca:	01 d2                	add    edx,edx
c00274cc:	79 fb                	jns    c00274c9 <__extendsfdf2+0x32>
c00274ce:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00274d4:	29 c8                	sub    eax,ecx
c00274d6:	05 81 03 00 00       	add    eax,0x381
c00274db:	eb 0c                	jmp    c00274e9 <__extendsfdf2+0x52>
c00274dd:	05 00 07 00 00       	add    eax,0x700
c00274e2:	eb 05                	jmp    c00274e9 <__extendsfdf2+0x52>
c00274e4:	05 80 03 00 00       	add    eax,0x380
c00274e9:	c1 e0 14             	shl    eax,0x14
c00274ec:	89 c1                	mov    ecx,eax
c00274ee:	89 d0                	mov    eax,edx
c00274f0:	c1 e8 0b             	shr    eax,0xb
c00274f3:	09 c1                	or     ecx,eax
c00274f5:	c1 e2 15             	shl    edx,0x15
c00274f8:	89 d0                	mov    eax,edx
c00274fa:	89 ca                	mov    edx,ecx
c00274fc:	5e                   	pop    esi
c00274fd:	5f                   	pop    edi
c00274fe:	5d                   	pop    ebp
c00274ff:	c3                   	ret    

c0027500 <fabs>:
c0027500:	83 ec 0c             	sub    esp,0xc
c0027503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027507:	89 04 24             	mov    DWORD PTR [esp],eax
c002750a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002750e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027513:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027517:	dd 04 24             	fld    QWORD PTR [esp]
c002751a:	83 c4 0c             	add    esp,0xc
c002751d:	c3                   	ret    
c002751e:	66 90                	xchg   ax,ax

c0027520 <lrint>:
c0027520:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027524:	83 ec 04             	sub    esp,0x4
c0027527:	db 1c 24             	fistp  DWORD PTR [esp]
c002752a:	58                   	pop    eax
c002752b:	c3                   	ret    

c002752c <lrintf>:
c002752c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0027530:	83 ec 04             	sub    esp,0x4
c0027533:	db 1c 24             	fistp  DWORD PTR [esp]
c0027536:	58                   	pop    eax
c0027537:	c3                   	ret    

Disassembly of section .init:

c0027538 <_init>:
c0027538:	55                   	push   ebp
c0027539:	89 e5                	mov    ebp,esp
c002753b:	e8 d8 8b fd ff       	call   c0000118 <frame_dummy>
c0027540:	e8 63 e0 ff ff       	call   c00255a8 <__do_global_ctors_aux>
c0027545:	5d                   	pop    ebp
c0027546:	c3                   	ret    

Disassembly of section .fini:

c0027547 <_fini>:
c0027547:	55                   	push   ebp
c0027548:	89 e5                	mov    ebp,esp
c002754a:	e8 59 8b fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002754f:	5d                   	pop    ebp
c0027550:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0027552 <Computer::~Computer()>:
c0027552:	83 ec 0c             	sub    esp,0xc
c0027555:	ba cc 90 02 c0       	mov    edx,0xc00290cc
c002755a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002755e:	89 10                	mov    DWORD PTR [eax],edx
c0027560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027564:	83 ec 0c             	sub    esp,0xc
c0027567:	50                   	push   eax
c0027568:	e8 b5 c6 fe ff       	call   c0013c22 <Device::~Device()>
c002756d:	83 c4 10             	add    esp,0x10
c0027570:	90                   	nop
c0027571:	83 c4 0c             	add    esp,0xc
c0027574:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0027576 <Computer::~Computer()>:
c0027576:	83 ec 0c             	sub    esp,0xc
c0027579:	83 ec 0c             	sub    esp,0xc
c002757c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027580:	e8 cd ff ff ff       	call   c0027552 <Computer::~Computer()>
c0027585:	83 c4 10             	add    esp,0x10
c0027588:	83 ec 08             	sub    esp,0x8
c002758b:	68 ec 01 00 00       	push   0x1ec
c0027590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027594:	e8 b0 b2 fe ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0027599:	83 c4 10             	add    esp,0x10
c002759c:	83 c4 0c             	add    esp,0xc
c002759f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00275a0 <idleCommon()>:
c00275a0:	83 ec 0c             	sub    esp,0xc
c00275a3:	e8 86 5c ff ff       	call   c001d22e <lockScheduler()>
c00275a8:	e8 bd 5f ff ff       	call   c001d56a <schedule()>
c00275ad:	83 c4 0c             	add    esp,0xc
c00275b0:	e9 7b 5c ff ff       	jmp    c001d230 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00275b6 <LinkedList<UnixFile>::~LinkedList()>:
c00275b6:	90                   	nop
c00275b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00275b8 <LinkedList<UnixFile>::LinkedList()>:
c00275b8:	83 ec 0c             	sub    esp,0xc
c00275bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00275c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00275d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00275db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00275e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00275f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275f4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00275fb:	83 ec 0c             	sub    esp,0xc
c00275fe:	68 8a 93 02 c0       	push   0xc002938a
c0027603:	e8 21 b3 fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0027608:	83 c4 10             	add    esp,0x10
c002760b:	90                   	nop
c002760c:	83 c4 0c             	add    esp,0xc
c002760f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0027610 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0027610:	83 ec 0c             	sub    esp,0xc
c0027613:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027618:	75 10                	jne    c002762a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002761a:	83 ec 0c             	sub    esp,0xc
c002761d:	68 a4 93 02 c0       	push   0xc00293a4
c0027622:	e8 58 26 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c0027627:	83 c4 10             	add    esp,0x10
c002762a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002762e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027630:	85 c0                	test   eax,eax
c0027632:	74 34                	je     c0027668 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027638:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002763b:	85 c0                	test   eax,eax
c002763d:	74 29                	je     c0027668 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002763f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027643:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027646:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002764a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002764d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027651:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027655:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002765c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002765f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027666:	eb 65                	jmp    c00276cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002766c:	8b 00                	mov    eax,DWORD PTR [eax]
c002766e:	85 c0                	test   eax,eax
c0027670:	75 4b                	jne    c00276bd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0027672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027676:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027679:	85 c0                	test   eax,eax
c002767b:	75 40                	jne    c00276bd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002767d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027681:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027685:	89 10                	mov    DWORD PTR [eax],edx
c0027687:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002768b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002768f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027696:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027699:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00276a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00276a7:	85 c0                	test   eax,eax
c00276a9:	74 22                	je     c00276cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00276ab:	83 ec 0c             	sub    esp,0xc
c00276ae:	68 c6 93 02 c0       	push   0xc00293c6
c00276b3:	e8 c7 25 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c00276b8:	83 c4 10             	add    esp,0x10
c00276bb:	eb 10                	jmp    c00276cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00276bd:	83 ec 0c             	sub    esp,0xc
c00276c0:	68 d0 93 02 c0       	push   0xc00293d0
c00276c5:	e8 b5 25 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c00276ca:	83 c4 10             	add    esp,0x10
c00276cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00276d4:	8d 50 01             	lea    edx,[eax+0x1]
c00276d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276db:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00276de:	90                   	nop
c00276df:	83 c4 0c             	add    esp,0xc
c00276e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00276e4 <LinkedList<UnixFile>::getFirstElement()>:
c00276e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00276e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00276ea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00276ec <LinkedList<UnixFile>::removeFirst()>:
c00276ec:	83 ec 0c             	sub    esp,0xc
c00276ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00276f5:	85 c0                	test   eax,eax
c00276f7:	75 12                	jne    c002770b <LinkedList<UnixFile>::removeFirst()+0x1f>
c00276f9:	83 ec 0c             	sub    esp,0xc
c00276fc:	68 dc 93 02 c0       	push   0xc00293dc
c0027701:	e8 79 25 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c0027706:	83 c4 10             	add    esp,0x10
c0027709:	eb 7e                	jmp    c0027789 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002770b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002770f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027712:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027715:	85 c0                	test   eax,eax
c0027717:	74 10                	je     c0027729 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0027719:	83 ec 0c             	sub    esp,0xc
c002771c:	68 27 94 02 c0       	push   0xc0029427
c0027721:	e8 59 25 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c0027726:	83 c4 10             	add    esp,0x10
c0027729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002772d:	8b 00                	mov    eax,DWORD PTR [eax]
c002772f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027732:	85 c0                	test   eax,eax
c0027734:	75 33                	jne    c0027769 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0027736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002773a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027744:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002774b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002774f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027752:	83 f8 01             	cmp    eax,0x1
c0027755:	74 21                	je     c0027778 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027757:	83 ec 0c             	sub    esp,0xc
c002775a:	68 00 94 02 c0       	push   0xc0029400
c002775f:	e8 1b 25 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c0027764:	83 c4 10             	add    esp,0x10
c0027767:	eb 0f                	jmp    c0027778 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002776d:	8b 00                	mov    eax,DWORD PTR [eax]
c002776f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0027772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027776:	89 10                	mov    DWORD PTR [eax],edx
c0027778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002777c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002777f:	8d 50 ff             	lea    edx,[eax-0x1]
c0027782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027786:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027789:	83 c4 0c             	add    esp,0xc
c002778c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002778e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002778e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027792:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027795:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0027796 <DriverlessDevice::~DriverlessDevice()>:
c0027796:	ba 04 9b 02 c0       	mov    edx,0xc0029b04
c002779b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002779f:	89 10                	mov    DWORD PTR [eax],edx
c00277a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00277a5:	50                   	push   eax
c00277a6:	e8 77 c4 fe ff       	call   c0013c22 <Device::~Device()>
c00277ab:	83 c4 04             	add    esp,0x4
c00277ae:	90                   	nop
c00277af:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00277b0 <DriverlessDevice::~DriverlessDevice()>:
c00277b0:	83 ec 0c             	sub    esp,0xc
c00277b3:	83 ec 0c             	sub    esp,0xc
c00277b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277ba:	e8 d7 ff ff ff       	call   c0027796 <DriverlessDevice::~DriverlessDevice()>
c00277bf:	83 c4 10             	add    esp,0x10
c00277c2:	83 ec 08             	sub    esp,0x8
c00277c5:	68 58 01 00 00       	push   0x158
c00277ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277ce:	e8 76 b0 fe ff       	call   c0012849 <operator delete(void*, unsigned long)>
c00277d3:	83 c4 10             	add    esp,0x10
c00277d6:	83 c4 0c             	add    esp,0xc
c00277d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00277da <LinkedList<Device>::addElement(Device*)>:
c00277da:	83 ec 0c             	sub    esp,0xc
c00277dd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00277e2:	75 10                	jne    c00277f4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00277e4:	83 ec 0c             	sub    esp,0xc
c00277e7:	68 a4 93 02 c0       	push   0xc00293a4
c00277ec:	e8 8e 24 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c00277f1:	83 c4 10             	add    esp,0x10
c00277f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00277fa:	85 c0                	test   eax,eax
c00277fc:	74 3a                	je     c0027838 <LinkedList<Device>::addElement(Device*)+0x5e>
c00277fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027802:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027805:	85 c0                	test   eax,eax
c0027807:	74 2f                	je     c0027838 <LinkedList<Device>::addElement(Device*)+0x5e>
c0027809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002780d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027810:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027814:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002781a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002781e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027822:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027829:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002782c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027836:	eb 68                	jmp    c00278a0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002783c:	8b 00                	mov    eax,DWORD PTR [eax]
c002783e:	85 c0                	test   eax,eax
c0027840:	75 4e                	jne    c0027890 <LinkedList<Device>::addElement(Device*)+0xb6>
c0027842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027846:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027849:	85 c0                	test   eax,eax
c002784b:	75 43                	jne    c0027890 <LinkedList<Device>::addElement(Device*)+0xb6>
c002784d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027851:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027855:	89 10                	mov    DWORD PTR [eax],edx
c0027857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002785b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002785f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027866:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027869:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027877:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002787a:	85 c0                	test   eax,eax
c002787c:	74 22                	je     c00278a0 <LinkedList<Device>::addElement(Device*)+0xc6>
c002787e:	83 ec 0c             	sub    esp,0xc
c0027881:	68 c6 93 02 c0       	push   0xc00293c6
c0027886:	e8 f4 23 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c002788b:	83 c4 10             	add    esp,0x10
c002788e:	eb 10                	jmp    c00278a0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027890:	83 ec 0c             	sub    esp,0xc
c0027893:	68 d0 93 02 c0       	push   0xc00293d0
c0027898:	e8 e2 23 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c002789d:	83 c4 10             	add    esp,0x10
c00278a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00278a7:	8d 50 01             	lea    edx,[eax+0x1]
c00278aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00278b1:	90                   	nop
c00278b2:	83 c4 0c             	add    esp,0xc
c00278b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00278b6 <LinkedList<Device>::LinkedList()>:
c00278b6:	83 ec 0c             	sub    esp,0xc
c00278b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00278c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00278ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278d2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00278d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00278e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00278ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278f2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00278f9:	83 ec 0c             	sub    esp,0xc
c00278fc:	68 8a 93 02 c0       	push   0xc002938a
c0027901:	e8 23 b0 fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0027906:	83 c4 10             	add    esp,0x10
c0027909:	90                   	nop
c002790a:	83 c4 0c             	add    esp,0xc
c002790d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002790e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002790e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027912:	8b 00                	mov    eax,DWORD PTR [eax]
c0027914:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0027916 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0027916:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002791a:	8b 00                	mov    eax,DWORD PTR [eax]
c002791c:	85 c0                	test   eax,eax
c002791e:	75 0e                	jne    c002792e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0027920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027924:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027927:	85 c0                	test   eax,eax
c0027929:	75 03                	jne    c002792e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002792b:	b0 01                	mov    al,0x1
c002792d:	c3                   	ret    
c002792e:	b0 00                	mov    al,0x0
c0027930:	90                   	nop
c0027931:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0027932 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0027932:	83 ec 0c             	sub    esp,0xc
c0027935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027939:	8b 00                	mov    eax,DWORD PTR [eax]
c002793b:	85 c0                	test   eax,eax
c002793d:	75 15                	jne    c0027954 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002793f:	83 ec 0c             	sub    esp,0xc
c0027942:	68 dc 93 02 c0       	push   0xc00293dc
c0027947:	e8 33 23 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c002794c:	83 c4 10             	add    esp,0x10
c002794f:	e9 88 00 00 00       	jmp    c00279dc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0027954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027958:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002795b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002795e:	85 c0                	test   eax,eax
c0027960:	0f 95 c0             	setne  al
c0027963:	84 c0                	test   al,al
c0027965:	74 10                	je     c0027977 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0027967:	83 ec 0c             	sub    esp,0xc
c002796a:	68 27 94 02 c0       	push   0xc0029427
c002796f:	e8 0b 23 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c0027974:	83 c4 10             	add    esp,0x10
c0027977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002797b:	8b 00                	mov    eax,DWORD PTR [eax]
c002797d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0027980:	85 c0                	test   eax,eax
c0027982:	0f 94 c0             	sete   al
c0027985:	84 c0                	test   al,al
c0027987:	74 33                	je     c00279bc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0027989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002798d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027997:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002799e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00279a5:	83 f8 01             	cmp    eax,0x1
c00279a8:	74 21                	je     c00279cb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00279aa:	83 ec 0c             	sub    esp,0xc
c00279ad:	68 00 94 02 c0       	push   0xc0029400
c00279b2:	e8 c8 22 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c00279b7:	83 c4 10             	add    esp,0x10
c00279ba:	eb 0f                	jmp    c00279cb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00279bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00279c2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00279c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279c9:	89 10                	mov    DWORD PTR [eax],edx
c00279cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00279d2:	8d 50 ff             	lea    edx,[eax-0x1]
c00279d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279d9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00279dc:	83 c4 0c             	add    esp,0xc
c00279df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00279e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00279e0:	83 ec 0c             	sub    esp,0xc
c00279e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00279e8:	75 10                	jne    c00279fa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00279ea:	83 ec 0c             	sub    esp,0xc
c00279ed:	68 a4 93 02 c0       	push   0xc00293a4
c00279f2:	e8 88 22 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c00279f7:	83 c4 10             	add    esp,0x10
c00279fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0027a00:	85 c0                	test   eax,eax
c0027a02:	74 34                	je     c0027a38 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0027a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027a0b:	85 c0                	test   eax,eax
c0027a0d:	74 29                	je     c0027a38 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0027a0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027a16:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027a1a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0027a1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027a25:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027a2f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027a36:	eb 65                	jmp    c0027a9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0027a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0027a3e:	85 c0                	test   eax,eax
c0027a40:	75 4b                	jne    c0027a8d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0027a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027a49:	85 c0                	test   eax,eax
c0027a4b:	75 40                	jne    c0027a8d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0027a4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027a55:	89 10                	mov    DWORD PTR [eax],edx
c0027a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a5b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027a5f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027a69:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027a77:	85 c0                	test   eax,eax
c0027a79:	74 22                	je     c0027a9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0027a7b:	83 ec 0c             	sub    esp,0xc
c0027a7e:	68 c6 93 02 c0       	push   0xc00293c6
c0027a83:	e8 f7 21 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c0027a88:	83 c4 10             	add    esp,0x10
c0027a8b:	eb 10                	jmp    c0027a9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0027a8d:	83 ec 0c             	sub    esp,0xc
c0027a90:	68 d0 93 02 c0       	push   0xc00293d0
c0027a95:	e8 e5 21 ff ff       	call   c0019c7f <Krnl::panic(char const*)>
c0027a9a:	83 c4 10             	add    esp,0x10
c0027a9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027aa1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027aa4:	8d 50 01             	lea    edx,[eax+0x1]
c0027aa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027aab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027aae:	90                   	nop
c0027aaf:	83 c4 0c             	add    esp,0xc
c0027ab2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0027ab4 <ACPI::~ACPI()>:
c0027ab4:	83 ec 0c             	sub    esp,0xc
c0027ab7:	ba 74 a4 02 c0       	mov    edx,0xc002a474
c0027abc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ac0:	89 10                	mov    DWORD PTR [eax],edx
c0027ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ac6:	83 ec 0c             	sub    esp,0xc
c0027ac9:	50                   	push   eax
c0027aca:	e8 53 c1 fe ff       	call   c0013c22 <Device::~Device()>
c0027acf:	83 c4 10             	add    esp,0x10
c0027ad2:	90                   	nop
c0027ad3:	83 c4 0c             	add    esp,0xc
c0027ad6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0027ad8 <ACPI::~ACPI()>:
c0027ad8:	83 ec 0c             	sub    esp,0xc
c0027adb:	83 ec 0c             	sub    esp,0xc
c0027ade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ae2:	e8 cd ff ff ff       	call   c0027ab4 <ACPI::~ACPI()>
c0027ae7:	83 c4 10             	add    esp,0x10
c0027aea:	83 ec 08             	sub    esp,0x8
c0027aed:	68 68 12 00 00       	push   0x1268
c0027af2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027af6:	e8 4e ad fe ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0027afb:	83 c4 10             	add    esp,0x10
c0027afe:	83 c4 0c             	add    esp,0xc
c0027b01:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0027b02 <CPU::~CPU()>:
c0027b02:	83 ec 0c             	sub    esp,0xc
c0027b05:	ba 64 a8 02 c0       	mov    edx,0xc002a864
c0027b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b0e:	89 10                	mov    DWORD PTR [eax],edx
c0027b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b14:	83 ec 0c             	sub    esp,0xc
c0027b17:	50                   	push   eax
c0027b18:	e8 05 c1 fe ff       	call   c0013c22 <Device::~Device()>
c0027b1d:	83 c4 10             	add    esp,0x10
c0027b20:	90                   	nop
c0027b21:	83 c4 0c             	add    esp,0xc
c0027b24:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0027b26 <CPU::~CPU()>:
c0027b26:	83 ec 0c             	sub    esp,0xc
c0027b29:	83 ec 0c             	sub    esp,0xc
c0027b2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b30:	e8 cd ff ff ff       	call   c0027b02 <CPU::~CPU()>
c0027b35:	83 c4 10             	add    esp,0x10
c0027b38:	83 ec 08             	sub    esp,0x8
c0027b3b:	68 98 11 00 00       	push   0x1198
c0027b40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b44:	e8 00 ad fe ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0027b49:	83 c4 10             	add    esp,0x10
c0027b4c:	83 c4 0c             	add    esp,0xc
c0027b4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0027b50 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0027b50:	90                   	nop
c0027b51:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0027b52 <ThreadControlBlock::ThreadControlBlock()>:
c0027b52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027b56:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027b5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027b61:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0027b68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027b6c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0027b73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027b77:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0027b7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027b82:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0027b86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027b8a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0027b8e:	90                   	nop
c0027b8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0027b90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0027b90:	83 ec 0c             	sub    esp,0xc
c0027b93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ba1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027ba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027bb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bb7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bc1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bcc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027bd3:	83 ec 0c             	sub    esp,0xc
c0027bd6:	68 8a 93 02 c0       	push   0xc002938a
c0027bdb:	e8 49 ad fe ff       	call   c0012929 <Dbg::kprintf(char const*, ...)>
c0027be0:	83 c4 10             	add    esp,0x10
c0027be3:	90                   	nop
c0027be4:	83 c4 0c             	add    esp,0xc
c0027be7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0027be8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0027be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027bec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0027bef:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0027bf0 <Vm::_FPUState::_FPUState()>:
c0027bf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027bf4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0027bfb:	90                   	nop
c0027bfc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0027bfe <PCI::~PCI()>:
c0027bfe:	83 ec 0c             	sub    esp,0xc
c0027c01:	ba 88 b7 02 c0       	mov    edx,0xc002b788
c0027c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c0a:	89 10                	mov    DWORD PTR [eax],edx
c0027c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c10:	83 ec 0c             	sub    esp,0xc
c0027c13:	50                   	push   eax
c0027c14:	e8 e1 b9 fe ff       	call   c00135fa <Bus::~Bus()>
c0027c19:	83 c4 10             	add    esp,0x10
c0027c1c:	90                   	nop
c0027c1d:	83 c4 0c             	add    esp,0xc
c0027c20:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0027c22 <PCI::~PCI()>:
c0027c22:	83 ec 0c             	sub    esp,0xc
c0027c25:	83 ec 0c             	sub    esp,0xc
c0027c28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c2c:	e8 cd ff ff ff       	call   c0027bfe <PCI::~PCI()>
c0027c31:	83 c4 10             	add    esp,0x10
c0027c34:	83 ec 08             	sub    esp,0x8
c0027c37:	68 58 01 00 00       	push   0x158
c0027c3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c40:	e8 04 ac fe ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0027c45:	83 c4 10             	add    esp,0x10
c0027c48:	83 c4 0c             	add    esp,0xc
c0027c4b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0027c4c <IDE::~IDE()>:
c0027c4c:	83 ec 0c             	sub    esp,0xc
c0027c4f:	ba ec b9 02 c0       	mov    edx,0xc002b9ec
c0027c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c58:	89 10                	mov    DWORD PTR [eax],edx
c0027c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c5e:	83 ec 0c             	sub    esp,0xc
c0027c61:	50                   	push   eax
c0027c62:	e8 ab c4 fe ff       	call   c0014112 <HardDiskController::~HardDiskController()>
c0027c67:	83 c4 10             	add    esp,0x10
c0027c6a:	90                   	nop
c0027c6b:	83 c4 0c             	add    esp,0xc
c0027c6e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0027c70 <IDE::~IDE()>:
c0027c70:	83 ec 0c             	sub    esp,0xc
c0027c73:	83 ec 0c             	sub    esp,0xc
c0027c76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c7a:	e8 cd ff ff ff       	call   c0027c4c <IDE::~IDE()>
c0027c7f:	83 c4 10             	add    esp,0x10
c0027c82:	83 ec 08             	sub    esp,0x8
c0027c85:	68 70 02 00 00       	push   0x270
c0027c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c8e:	e8 b6 ab fe ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0027c93:	83 c4 10             	add    esp,0x10
c0027c96:	83 c4 0c             	add    esp,0xc
c0027c99:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0027c9a <SATABus::~SATABus()>:
c0027c9a:	83 ec 0c             	sub    esp,0xc
c0027c9d:	ba cc ba 02 c0       	mov    edx,0xc002bacc
c0027ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ca6:	89 10                	mov    DWORD PTR [eax],edx
c0027ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027cac:	83 ec 0c             	sub    esp,0xc
c0027caf:	50                   	push   eax
c0027cb0:	e8 5d c4 fe ff       	call   c0014112 <HardDiskController::~HardDiskController()>
c0027cb5:	83 c4 10             	add    esp,0x10
c0027cb8:	90                   	nop
c0027cb9:	83 c4 0c             	add    esp,0xc
c0027cbc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0027cbe <SATABus::~SATABus()>:
c0027cbe:	83 ec 0c             	sub    esp,0xc
c0027cc1:	83 ec 0c             	sub    esp,0xc
c0027cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027cc8:	e8 cd ff ff ff       	call   c0027c9a <SATABus::~SATABus()>
c0027ccd:	83 c4 10             	add    esp,0x10
c0027cd0:	83 ec 08             	sub    esp,0x8
c0027cd3:	68 64 01 00 00       	push   0x164
c0027cd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027cdc:	e8 68 ab fe ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0027ce1:	83 c4 10             	add    esp,0x10
c0027ce4:	83 c4 0c             	add    esp,0xc
c0027ce7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0027ce8 <ATA::~ATA()>:
c0027ce8:	83 ec 0c             	sub    esp,0xc
c0027ceb:	ba 0c bb 02 c0       	mov    edx,0xc002bb0c
c0027cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027cf4:	89 10                	mov    DWORD PTR [eax],edx
c0027cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027cfa:	83 ec 0c             	sub    esp,0xc
c0027cfd:	50                   	push   eax
c0027cfe:	e8 ed c4 fe ff       	call   c00141f0 <PhysicalDisk::~PhysicalDisk()>
c0027d03:	83 c4 10             	add    esp,0x10
c0027d06:	90                   	nop
c0027d07:	83 c4 0c             	add    esp,0xc
c0027d0a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0027d0c <ATA::~ATA()>:
c0027d0c:	83 ec 0c             	sub    esp,0xc
c0027d0f:	83 ec 0c             	sub    esp,0xc
c0027d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d16:	e8 cd ff ff ff       	call   c0027ce8 <ATA::~ATA()>
c0027d1b:	83 c4 10             	add    esp,0x10
c0027d1e:	83 ec 08             	sub    esp,0x8
c0027d21:	68 7c 01 00 00       	push   0x17c
c0027d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d2a:	e8 1a ab fe ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0027d2f:	83 c4 10             	add    esp,0x10
c0027d32:	83 c4 0c             	add    esp,0xc
c0027d35:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0027d36 <ATAPI::~ATAPI()>:
c0027d36:	83 ec 0c             	sub    esp,0xc
c0027d39:	ba 78 bb 02 c0       	mov    edx,0xc002bb78
c0027d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d42:	89 10                	mov    DWORD PTR [eax],edx
c0027d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d48:	83 ec 0c             	sub    esp,0xc
c0027d4b:	50                   	push   eax
c0027d4c:	e8 9f c4 fe ff       	call   c00141f0 <PhysicalDisk::~PhysicalDisk()>
c0027d51:	83 c4 10             	add    esp,0x10
c0027d54:	90                   	nop
c0027d55:	83 c4 0c             	add    esp,0xc
c0027d58:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0027d5a <ATAPI::~ATAPI()>:
c0027d5a:	83 ec 0c             	sub    esp,0xc
c0027d5d:	83 ec 0c             	sub    esp,0xc
c0027d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d64:	e8 cd ff ff ff       	call   c0027d36 <ATAPI::~ATAPI()>
c0027d69:	83 c4 10             	add    esp,0x10
c0027d6c:	83 ec 08             	sub    esp,0x8
c0027d6f:	68 80 01 00 00       	push   0x180
c0027d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d78:	e8 cc aa fe ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0027d7d:	83 c4 10             	add    esp,0x10
c0027d80:	83 c4 0c             	add    esp,0xc
c0027d83:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0027d84 <SATA::~SATA()>:
c0027d84:	83 ec 0c             	sub    esp,0xc
c0027d87:	ba 9c bc 02 c0       	mov    edx,0xc002bc9c
c0027d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d90:	89 10                	mov    DWORD PTR [eax],edx
c0027d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d96:	83 ec 0c             	sub    esp,0xc
c0027d99:	50                   	push   eax
c0027d9a:	e8 51 c4 fe ff       	call   c00141f0 <PhysicalDisk::~PhysicalDisk()>
c0027d9f:	83 c4 10             	add    esp,0x10
c0027da2:	90                   	nop
c0027da3:	83 c4 0c             	add    esp,0xc
c0027da6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0027da8 <SATA::~SATA()>:
c0027da8:	83 ec 0c             	sub    esp,0xc
c0027dab:	83 ec 0c             	sub    esp,0xc
c0027dae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027db2:	e8 cd ff ff ff       	call   c0027d84 <SATA::~SATA()>
c0027db7:	83 c4 10             	add    esp,0x10
c0027dba:	83 ec 08             	sub    esp,0x8
c0027dbd:	68 74 01 00 00       	push   0x174
c0027dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027dc6:	e8 7e aa fe ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0027dcb:	83 c4 10             	add    esp,0x10
c0027dce:	83 c4 0c             	add    esp,0xc
c0027dd1:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0027dd2 <AVX::~AVX()>:
c0027dd2:	83 ec 0c             	sub    esp,0xc
c0027dd5:	ba d8 bc 02 c0       	mov    edx,0xc002bcd8
c0027dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027dde:	89 10                	mov    DWORD PTR [eax],edx
c0027de0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027de4:	83 ec 0c             	sub    esp,0xc
c0027de7:	50                   	push   eax
c0027de8:	e8 87 c4 fe ff       	call   c0014274 <FPU::~FPU()>
c0027ded:	83 c4 10             	add    esp,0x10
c0027df0:	90                   	nop
c0027df1:	83 c4 0c             	add    esp,0xc
c0027df4:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0027df6 <AVX::~AVX()>:
c0027df6:	83 ec 0c             	sub    esp,0xc
c0027df9:	83 ec 0c             	sub    esp,0xc
c0027dfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e00:	e8 cd ff ff ff       	call   c0027dd2 <AVX::~AVX()>
c0027e05:	83 c4 10             	add    esp,0x10
c0027e08:	83 ec 08             	sub    esp,0x8
c0027e0b:	68 58 01 00 00       	push   0x158
c0027e10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e14:	e8 30 aa fe ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0027e19:	83 c4 10             	add    esp,0x10
c0027e1c:	83 c4 0c             	add    esp,0xc
c0027e1f:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0027e20 <MMX::~MMX()>:
c0027e20:	83 ec 0c             	sub    esp,0xc
c0027e23:	ba 18 bd 02 c0       	mov    edx,0xc002bd18
c0027e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e2c:	89 10                	mov    DWORD PTR [eax],edx
c0027e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e32:	83 ec 0c             	sub    esp,0xc
c0027e35:	50                   	push   eax
c0027e36:	e8 39 c4 fe ff       	call   c0014274 <FPU::~FPU()>
c0027e3b:	83 c4 10             	add    esp,0x10
c0027e3e:	90                   	nop
c0027e3f:	83 c4 0c             	add    esp,0xc
c0027e42:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0027e44 <MMX::~MMX()>:
c0027e44:	83 ec 0c             	sub    esp,0xc
c0027e47:	83 ec 0c             	sub    esp,0xc
c0027e4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e4e:	e8 cd ff ff ff       	call   c0027e20 <MMX::~MMX()>
c0027e53:	83 c4 10             	add    esp,0x10
c0027e56:	83 ec 08             	sub    esp,0x8
c0027e59:	68 58 01 00 00       	push   0x158
c0027e5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e62:	e8 e2 a9 fe ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0027e67:	83 c4 10             	add    esp,0x10
c0027e6a:	83 c4 0c             	add    esp,0xc
c0027e6d:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0027e6e <SSE::~SSE()>:
c0027e6e:	83 ec 0c             	sub    esp,0xc
c0027e71:	ba 58 bd 02 c0       	mov    edx,0xc002bd58
c0027e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e7a:	89 10                	mov    DWORD PTR [eax],edx
c0027e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e80:	83 ec 0c             	sub    esp,0xc
c0027e83:	50                   	push   eax
c0027e84:	e8 eb c3 fe ff       	call   c0014274 <FPU::~FPU()>
c0027e89:	83 c4 10             	add    esp,0x10
c0027e8c:	90                   	nop
c0027e8d:	83 c4 0c             	add    esp,0xc
c0027e90:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0027e92 <SSE::~SSE()>:
c0027e92:	83 ec 0c             	sub    esp,0xc
c0027e95:	83 ec 0c             	sub    esp,0xc
c0027e98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e9c:	e8 cd ff ff ff       	call   c0027e6e <SSE::~SSE()>
c0027ea1:	83 c4 10             	add    esp,0x10
c0027ea4:	83 ec 08             	sub    esp,0x8
c0027ea7:	68 58 01 00 00       	push   0x158
c0027eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027eb0:	e8 94 a9 fe ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0027eb5:	83 c4 10             	add    esp,0x10
c0027eb8:	83 c4 0c             	add    esp,0xc
c0027ebb:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0027ebc <x87::~x87()>:
c0027ebc:	83 ec 0c             	sub    esp,0xc
c0027ebf:	ba 98 bd 02 c0       	mov    edx,0xc002bd98
c0027ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ec8:	89 10                	mov    DWORD PTR [eax],edx
c0027eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ece:	83 ec 0c             	sub    esp,0xc
c0027ed1:	50                   	push   eax
c0027ed2:	e8 9d c3 fe ff       	call   c0014274 <FPU::~FPU()>
c0027ed7:	83 c4 10             	add    esp,0x10
c0027eda:	90                   	nop
c0027edb:	83 c4 0c             	add    esp,0xc
c0027ede:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0027ee0 <x87::~x87()>:
c0027ee0:	83 ec 0c             	sub    esp,0xc
c0027ee3:	83 ec 0c             	sub    esp,0xc
c0027ee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027eea:	e8 cd ff ff ff       	call   c0027ebc <x87::~x87()>
c0027eef:	83 c4 10             	add    esp,0x10
c0027ef2:	83 ec 08             	sub    esp,0x8
c0027ef5:	68 58 01 00 00       	push   0x158
c0027efa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027efe:	e8 46 a9 fe ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0027f03:	83 c4 10             	add    esp,0x10
c0027f06:	83 c4 0c             	add    esp,0xc
c0027f09:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0027f0a <IOAPIC::~IOAPIC()>:
c0027f0a:	83 ec 0c             	sub    esp,0xc
c0027f0d:	ba f0 be 02 c0       	mov    edx,0xc002bef0
c0027f12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f16:	89 10                	mov    DWORD PTR [eax],edx
c0027f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f1c:	83 ec 0c             	sub    esp,0xc
c0027f1f:	50                   	push   eax
c0027f20:	e8 fd bc fe ff       	call   c0013c22 <Device::~Device()>
c0027f25:	83 c4 10             	add    esp,0x10
c0027f28:	90                   	nop
c0027f29:	83 c4 0c             	add    esp,0xc
c0027f2c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0027f2e <IOAPIC::~IOAPIC()>:
c0027f2e:	83 ec 0c             	sub    esp,0xc
c0027f31:	83 ec 0c             	sub    esp,0xc
c0027f34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f38:	e8 cd ff ff ff       	call   c0027f0a <IOAPIC::~IOAPIC()>
c0027f3d:	83 c4 10             	add    esp,0x10
c0027f40:	83 ec 08             	sub    esp,0x8
c0027f43:	68 68 01 00 00       	push   0x168
c0027f48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f4c:	e8 f8 a8 fe ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0027f51:	83 c4 10             	add    esp,0x10
c0027f54:	83 c4 0c             	add    esp,0xc
c0027f57:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0027f58 <APIC::~APIC()>:
c0027f58:	83 ec 0c             	sub    esp,0xc
c0027f5b:	ba a8 be 02 c0       	mov    edx,0xc002bea8
c0027f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f64:	89 10                	mov    DWORD PTR [eax],edx
c0027f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f6a:	83 ec 0c             	sub    esp,0xc
c0027f6d:	50                   	push   eax
c0027f6e:	e8 cb c7 fe ff       	call   c001473e <InterruptController::~InterruptController()>
c0027f73:	83 c4 10             	add    esp,0x10
c0027f76:	90                   	nop
c0027f77:	83 c4 0c             	add    esp,0xc
c0027f7a:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0027f7c <APIC::~APIC()>:
c0027f7c:	83 ec 0c             	sub    esp,0xc
c0027f7f:	83 ec 0c             	sub    esp,0xc
c0027f82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f86:	e8 cd ff ff ff       	call   c0027f58 <APIC::~APIC()>
c0027f8b:	83 c4 10             	add    esp,0x10
c0027f8e:	83 ec 08             	sub    esp,0x8
c0027f91:	68 58 21 00 00       	push   0x2158
c0027f96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f9a:	e8 aa a8 fe ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0027f9f:	83 c4 10             	add    esp,0x10
c0027fa2:	83 c4 0c             	add    esp,0xc
c0027fa5:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0027fa6 <PIC::~PIC()>:
c0027fa6:	83 ec 0c             	sub    esp,0xc
c0027fa9:	ba 40 bf 02 c0       	mov    edx,0xc002bf40
c0027fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fb2:	89 10                	mov    DWORD PTR [eax],edx
c0027fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fb8:	83 ec 0c             	sub    esp,0xc
c0027fbb:	50                   	push   eax
c0027fbc:	e8 7d c7 fe ff       	call   c001473e <InterruptController::~InterruptController()>
c0027fc1:	83 c4 10             	add    esp,0x10
c0027fc4:	90                   	nop
c0027fc5:	83 c4 0c             	add    esp,0xc
c0027fc8:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0027fca <PIC::~PIC()>:
c0027fca:	83 ec 0c             	sub    esp,0xc
c0027fcd:	83 ec 0c             	sub    esp,0xc
c0027fd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027fd4:	e8 cd ff ff ff       	call   c0027fa6 <PIC::~PIC()>
c0027fd9:	83 c4 10             	add    esp,0x10
c0027fdc:	83 ec 08             	sub    esp,0x8
c0027fdf:	68 58 21 00 00       	push   0x2158
c0027fe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027fe8:	e8 5c a8 fe ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0027fed:	83 c4 10             	add    esp,0x10
c0027ff0:	83 c4 0c             	add    esp,0xc
c0027ff3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0027ff4 <APICTimer::~APICTimer()>:
c0027ff4:	83 ec 0c             	sub    esp,0xc
c0027ff7:	ba 94 bf 02 c0       	mov    edx,0xc002bf94
c0027ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028000:	89 10                	mov    DWORD PTR [eax],edx
c0028002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028006:	83 ec 0c             	sub    esp,0xc
c0028009:	50                   	push   eax
c002800a:	e8 2f e5 fe ff       	call   c001653e <Timer::~Timer()>
c002800f:	83 c4 10             	add    esp,0x10
c0028012:	90                   	nop
c0028013:	83 c4 0c             	add    esp,0xc
c0028016:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028018 <APICTimer::~APICTimer()>:
c0028018:	83 ec 0c             	sub    esp,0xc
c002801b:	83 ec 0c             	sub    esp,0xc
c002801e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028022:	e8 cd ff ff ff       	call   c0027ff4 <APICTimer::~APICTimer()>
c0028027:	83 c4 10             	add    esp,0x10
c002802a:	83 ec 08             	sub    esp,0x8
c002802d:	68 60 01 00 00       	push   0x160
c0028032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028036:	e8 0e a8 fe ff       	call   c0012849 <operator delete(void*, unsigned long)>
c002803b:	83 c4 10             	add    esp,0x10
c002803e:	83 c4 0c             	add    esp,0xc
c0028041:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028042 <PIT::~PIT()>:
c0028042:	83 ec 0c             	sub    esp,0xc
c0028045:	ba e4 bf 02 c0       	mov    edx,0xc002bfe4
c002804a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002804e:	89 10                	mov    DWORD PTR [eax],edx
c0028050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028054:	83 ec 0c             	sub    esp,0xc
c0028057:	50                   	push   eax
c0028058:	e8 e1 e4 fe ff       	call   c001653e <Timer::~Timer()>
c002805d:	83 c4 10             	add    esp,0x10
c0028060:	90                   	nop
c0028061:	83 c4 0c             	add    esp,0xc
c0028064:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028066 <PIT::~PIT()>:
c0028066:	83 ec 0c             	sub    esp,0xc
c0028069:	83 ec 0c             	sub    esp,0xc
c002806c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028070:	e8 cd ff ff ff       	call   c0028042 <PIT::~PIT()>
c0028075:	83 c4 10             	add    esp,0x10
c0028078:	83 ec 08             	sub    esp,0x8
c002807b:	68 5c 01 00 00       	push   0x15c
c0028080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028084:	e8 c0 a7 fe ff       	call   c0012849 <operator delete(void*, unsigned long)>
c0028089:	83 c4 10             	add    esp,0x10
c002808c:	83 c4 0c             	add    esp,0xc
c002808f:	c3                   	ret    
