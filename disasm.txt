
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 e8 7a 00 00       	call   c0007b08 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 84 2e 02 c0       	mov    eax,0xc0022e84
c0000025:	3d 84 2e 02 c0       	cmp    eax,0xc0022e84
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 84 2e 02 c0       	push   0xc0022e84
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 84 2e 02 c0       	mov    eax,0xc0022e84
c0000051:	2d 84 2e 02 c0       	sub    eax,0xc0022e84
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 84 2e 02 c0       	push   0xc0022e84
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 9c f6 01 c0       	mov    ebx,0xc001f69c
c0000097:	81 eb 98 f6 01 c0    	sub    ebx,0xc001f698
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 98 f6 01 c0       	mov    esi,0xc001f698
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 84 2e 02 c0       	push   0xc0022e84
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 84 2e 02 c0       	push   0xc0022e84
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 53 49 01 00       	call   c0014c00 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 3a a4 00 00       	call   c000a6ff <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 31 49 01 00       	call   c0014c00 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 3e 4e 01 00       	call   c001512c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 fd 54 01 00       	call   c00157f4 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 47 08 01 00       	jmp    c0010bc6 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 a0 f6 01 c0 02 	test   BYTE PTR [edx-0x3ffe0960],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 a0 f6 01 c0 01 	test   BYTE PTR [edx-0x3ffe0960],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 a0 f6 01 c0 08 	test   BYTE PTR [edx-0x3ffe0960],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 a0 f6 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0960],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 a0 f6 01 c0 01 	test   BYTE PTR [edx-0x3ffe0960],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000df7:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 a8 6a 00 00       	call   c0007980 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 ed 69 00 00       	call   c0007980 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 d7 69 00 00       	call   c0007980 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 b3 69 00 00       	call   c0007980 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c0001176:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011b2:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011b7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011c5:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c0001216:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c0001231:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c00012eb:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c00012f1:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c00012f8:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013be:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013c4:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c00013cb:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 a4 f7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe085c]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 c0 92 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6d40]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 8e 6f 01 00       	jmp    c0018d30 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 c0 92 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6d40]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 b8 6f 01 00       	jmp    c0018d70 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 c0 92 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6d40]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 d9 6f 01 00       	jmp    c0018db0 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 00 f9 01 c0 	movzx  eax,BYTE PTR [esi-0x3ffe0700]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 00 f9 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0700]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 94 1e 02 c0       	mov    edx,0xc0021e94
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba bc f7 01 c0       	mov    edx,0xc001f7bc
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 c2 f7 01 c0       	mov    eax,0xc001f7c2
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 80 f8 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0780]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 cb f7 01 c0       	mov    eax,0xc001f7cb
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 00 f9 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0700]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 50 f8 01 c0       	mov    eax,0xc001f850
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 40 f8 01 c0       	mov    ebx,0xc001f840
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 20 f8 01 c0       	mov    eax,0xc001f820
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 30 f8 01 c0       	mov    eax,0xc001f830
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba d2 f7 01 c0       	mov    edx,0xc001f7d2
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba de f7 01 c0       	mov    edx,0xc001f7de
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba f2 f7 01 c0       	mov    edx,0xc001f7f2
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 7f 1e 00 00       	call   c0007aae <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 77 1e 00 00       	call   c0007abe <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c 20 fc 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fc20
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 20 fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fc20
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 20 fa 01 c0       	mov    eax,0xc001fa20
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 60 f9 01 c0       	mov    eax,0xc001f960
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 20 f9 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe06e0]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 20 fd 01 c0       	push   0xc001fd20
c000611b:	e8 ac 35 01 00       	call   c00196cc <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 2e fd 01 c0       	push   0xc001fd2e
c0006153:	e8 74 35 01 00       	call   c00196cc <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 dd 34 01 00       	call   c0019670 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 50 02 c0       	mov    eax,0xc0025020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 5e 02 c0    	mov    ebp,DWORD PTR ds:0xc0025eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 3d fd 01 c0       	push   0xc001fd3d
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000655e:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c0006564:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c0006580:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00065f9:	8b 8d 4c 55 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdaab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c00066f1:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000672f:	05 40 55 02 c0       	add    eax,0xc0025540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c00067ee:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 40 fd 01 c0       	push   0xc001fd40
c0006812:	e8 b5 2e 01 00       	call   c00196cc <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 c9 2e 01 00       	call   c00196e8 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 45 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd45
c000682c:	e8 9b 2e 01 00       	call   c00196cc <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006838:	e8 ab 2e 01 00       	call   c00196e8 <iso_kprintfd>
c000683d:	c7 04 24 4b fd 01 c0 	mov    DWORD PTR [esp],0xc001fd4b
c0006844:	e8 83 2e 01 00       	call   c00196cc <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c0006850:	e8 93 2e 01 00       	call   c00196e8 <iso_kprintfd>
c0006855:	c7 04 24 51 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd51
c000685c:	e8 6b 2e 01 00       	call   c00196cc <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006868:	e8 7b 2e 01 00       	call   c00196e8 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068ce:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 55 02 c0    	lea    ebp,[eax-0x3ffdaaa8]
c000692a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 55 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdaaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 3d fd 01 c0       	push   0xc001fd3d
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a06:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a0c:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 55 02 c0       	add    eax,0xc0025550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 5a fd 01 c0       	push   0xc001fd5a
c0006a31:	e8 96 2c 01 00       	call   c00196cc <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a66:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 65 fd 01 c0       	push   0xc001fd65
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 6c fd 01 c0       	push   0xc001fd6c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b27:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 73 fd 01 c0       	push   0xc001fd73
c0006b48:	e8 7f 2b 01 00       	call   c00196cc <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 7e fd 01 c0       	push   0xc001fd7e
c0006b63:	e8 64 2b 01 00       	call   c00196cc <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 55 02 c0       	push   0xc0025540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006b8d:	e8 1c 0f 00 00       	call   c0007aae <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006b9e:	e8 0b 0f 00 00       	call   c0007aae <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 f6 0e 00 00       	call   c0007aae <malloc>
c0006bb8:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 dd 0e 00 00       	call   c0007aae <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006bfe:	e8 bb 0e 00 00       	call   c0007abe <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 ad 0e 00 00       	call   c0007abe <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 93 0e 00 00       	call   c0007abe <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 7e 0e 00 00       	call   c0007abe <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c4d:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c73:	83 ec 0c             	sub    esp,0xc
c0006c76:	50                   	push   eax
c0006c77:	e8 24 55 00 00       	call   c000c1a0 <Device::closeAll()>
c0006c7c:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c82:	83 c4 10             	add    esp,0x10
c0006c85:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c87:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c8b:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c93:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006c9b:	5b                   	pop    ebx
c0006c9c:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006c9f:	5e                   	pop    esi
c0006ca0:	5f                   	pop    edi
c0006ca1:	ff e0                	jmp    eax

c0006ca3 <Krnl::firstTask()>:
c0006ca3:	53                   	push   ebx
c0006ca4:	83 ec 14             	sub    esp,0x14
c0006ca7:	fb                   	sti    
c0006ca8:	68 8f fd 01 c0       	push   0xc001fd8f
c0006cad:	e8 73 98 00 00       	call   c0010525 <KeSetBootMessage(char const*)>
c0006cb2:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cb9:	e8 f0 0d 00 00       	call   c0007aae <malloc>
c0006cbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cc5:	89 c3                	mov    ebx,eax
c0006cc7:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0006ccc:	50                   	push   eax
c0006ccd:	68 a8 fd 01 c0       	push   0xc001fda8
c0006cd2:	6a 01                	push   0x1
c0006cd4:	53                   	push   ebx
c0006cd5:	e8 7e e2 00 00       	call   c0014f58 <Process::Process(bool, char const*, Process*, char**)>
c0006cda:	83 c4 20             	add    esp,0x20
c0006cdd:	68 ff 00 00 00       	push   0xff
c0006ce2:	6a 00                	push   0x0
c0006ce4:	68 f5 74 00 c0       	push   0xc00074f5
c0006ce9:	53                   	push   ebx
c0006cea:	e8 8d e4 00 00       	call   c001517c <Process::createThread(void (*)(void*), void*, int)>
c0006cef:	8b 15 90 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029190
c0006cf5:	6a 7a                	push   0x7a
c0006cf7:	6a 00                	push   0x0
c0006cf9:	68 64 5c 01 c0       	push   0xc0015c64
c0006cfe:	52                   	push   edx
c0006cff:	e8 78 e4 00 00       	call   c001517c <Process::createThread(void (*)(void*), void*, int)>
c0006d04:	83 c4 20             	add    esp,0x20
c0006d07:	a3 48 91 02 c0       	mov    ds:0xc0029148,eax
c0006d0c:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d13:	e8 7c a0 00 00       	call   c0010d94 <KeInitRand()>
c0006d18:	83 ec 0c             	sub    esp,0xc
c0006d1b:	68 a4 fe 01 c0       	push   0xc001fea4
c0006d20:	e8 00 98 00 00       	call   c0010525 <KeSetBootMessage(char const*)>
c0006d25:	e8 5d f3 00 00       	call   c0016087 <Vm::initialise8086()>
c0006d2a:	e8 c1 42 00 00       	call   c000aff0 <Fs::initVFS()>
c0006d2f:	c7 04 24 b5 fd 01 c0 	mov    DWORD PTR [esp],0xc001fdb5
c0006d36:	e8 ea 97 00 00       	call   c0010525 <KeSetBootMessage(char const*)>
c0006d3b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d40:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d46:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d48:	6a 00                	push   0x0
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	50                   	push   eax
c0006d4f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d52:	83 c4 14             	add    esp,0x14
c0006d55:	68 a4 fe 01 c0       	push   0xc001fea4
c0006d5a:	e8 c6 97 00 00       	call   c0010525 <KeSetBootMessage(char const*)>
c0006d5f:	e8 da 9c 00 00       	call   c0010a3e <KeLoadSystemEnv()>
c0006d64:	e8 37 9f 00 00       	call   c0010ca0 <KeSetupPowerManager()>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	6a 3a                	push   0x3a
c0006d6e:	68 cf fd 01 c0       	push   0xc001fdcf
c0006d73:	68 d8 fd 01 c0       	push   0xc001fdd8
c0006d78:	e8 f7 c4 00 00       	call   c0013274 <Reg::readIntWithDefault(char*, char*, int)>
c0006d7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d80:	e8 7b 4d 00 00       	call   c000bb00 <User::loadClockSettings(int)>
c0006d85:	c7 04 24 c8 fe 01 c0 	mov    DWORD PTR [esp],0xc001fec8
c0006d8c:	e8 94 97 00 00       	call   c0010525 <KeSetBootMessage(char const*)>
c0006d91:	59                   	pop    ecx
c0006d92:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d97:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006d9d:	53                   	push   ebx
c0006d9e:	e8 fb 53 00 00       	call   c000c19e <Device::loadDriversForAll()>
c0006da3:	c7 04 24 e0 fd 01 c0 	mov    DWORD PTR [esp],0xc001fde0
c0006daa:	e8 76 97 00 00       	call   c0010525 <KeSetBootMessage(char const*)>
c0006daf:	58                   	pop    eax
c0006db0:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006db6:	5a                   	pop    edx
c0006db7:	6a 01                	push   0x1
c0006db9:	68 f1 fd 01 c0       	push   0xc001fdf1
c0006dbe:	e8 aa db 00 00       	call   c001496d <Thr::loadDLL(char const*, bool)>
c0006dc3:	59                   	pop    ecx
c0006dc4:	5a                   	pop    edx
c0006dc5:	53                   	push   ebx
c0006dc6:	50                   	push   eax
c0006dc7:	e8 d2 dd 00 00       	call   c0014b9e <Thr::executeDLL(unsigned long, void*)>
c0006dcc:	83 c4 10             	add    esp,0x10
c0006dcf:	83 ec 0c             	sub    esp,0xc
c0006dd2:	6a 02                	push   0x2
c0006dd4:	e8 07 e8 00 00       	call   c00155e0 <blockTask(TaskState)>
c0006dd9:	83 c4 10             	add    esp,0x10
c0006ddc:	eb f1                	jmp    c0006dcf <Krnl::firstTask()+0x12c>

c0006dde <Computer::Computer()>:
c0006dde:	83 ec 0c             	sub    esp,0xc
c0006de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006de5:	83 ec 08             	sub    esp,0x8
c0006de8:	68 0d fe 01 c0       	push   0xc001fe0d
c0006ded:	50                   	push   eax
c0006dee:	e8 27 54 00 00       	call   c000c21a <Device::Device(char const*)>
c0006df3:	83 c4 10             	add    esp,0x10
c0006df6:	ba 14 ff 01 c0       	mov    edx,0xc001ff14
c0006dfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dff:	89 10                	mov    DWORD PTR [eax],edx
c0006e01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e05:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e13:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e21:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e27:	83 ca 04             	or     edx,0x4
c0006e2a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e3a:	0f b6 d0             	movzx  edx,al
c0006e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e41:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e52:	0f b6 d0             	movzx  edx,al
c0006e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e59:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e68:	8d 50 01             	lea    edx,[eax+0x1]
c0006e6b:	88 d1                	mov    cl,dl
c0006e6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e71:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e77:	0f b6 d0             	movzx  edx,al
c0006e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e82:	83 e1 3f             	and    ecx,0x3f
c0006e85:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e89:	90                   	nop
c0006e8a:	83 c4 0c             	add    esp,0xc
c0006e8d:	c3                   	ret    

c0006e8e <Computer::setBootMessage(char const*)>:
c0006e8e:	c3                   	ret    
c0006e8f:	90                   	nop

c0006e90 <Computer::detectFeatures()>:
c0006e90:	55                   	push   ebp
c0006e91:	57                   	push   edi
c0006e92:	56                   	push   esi
c0006e93:	53                   	push   ebx
c0006e94:	83 ec 1c             	sub    esp,0x1c
c0006e97:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006e9b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea1:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ea7:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ead:	e8 47 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eb2:	31 d2                	xor    edx,edx
c0006eb4:	85 c0                	test   eax,eax
c0006eb6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ebc:	0f 95 c2             	setne  dl
c0006ebf:	83 e0 fd             	and    eax,0xfffffffd
c0006ec2:	d1 e2                	shl    edx,1
c0006ec4:	09 d0                	or     eax,edx
c0006ec6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ecc:	a8 02                	test   al,0x2
c0006ece:	75 51                	jne    c0006f21 <Computer::detectFeatures()+0x91>
c0006ed0:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006ed7:	74 0f                	je     c0006ee8 <Computer::detectFeatures()+0x58>
c0006ed9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006edf:	83 e0 fb             	and    eax,0xfffffffb
c0006ee2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ee8:	e8 a9 77 01 00       	call   c001e696 <x87Detect>
c0006eed:	83 e0 01             	and    eax,0x1
c0006ef0:	c1 e0 04             	shl    eax,0x4
c0006ef3:	89 c2                	mov    edx,eax
c0006ef5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006efb:	83 e0 ef             	and    eax,0xffffffef
c0006efe:	09 d0                	or     eax,edx
c0006f00:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f06:	88 c2                	mov    dl,al
c0006f08:	a8 10                	test   al,0x10
c0006f0a:	0f 85 33 01 00 00    	jne    c0007043 <Computer::detectFeatures()+0x1b3>
c0006f10:	80 e2 80             	and    dl,0x80
c0006f13:	0f 85 4c 01 00 00    	jne    c0007065 <Computer::detectFeatures()+0x1d5>
c0006f19:	83 c4 1c             	add    esp,0x1c
c0006f1c:	5b                   	pop    ebx
c0006f1d:	5e                   	pop    esi
c0006f1e:	5f                   	pop    edi
c0006f1f:	5d                   	pop    ebp
c0006f20:	c3                   	ret    
c0006f21:	83 ec 0c             	sub    esp,0xc
c0006f24:	6a 20                	push   0x20
c0006f26:	e8 e9 8a 00 00       	call   c000fa14 <CPU::cpuidCheckEDX(unsigned int)>
c0006f2b:	83 e0 01             	and    eax,0x1
c0006f2e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f35:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f3b:	83 e0 f7             	and    eax,0xfffffff7
c0006f3e:	09 d0                	or     eax,edx
c0006f40:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f46:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f4d:	e8 c2 8a 00 00       	call   c000fa14 <CPU::cpuidCheckEDX(unsigned int)>
c0006f52:	89 c2                	mov    edx,eax
c0006f54:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f5a:	83 e2 01             	and    edx,0x1
c0006f5d:	83 e0 fe             	and    eax,0xfffffffe
c0006f60:	09 d0                	or     eax,edx
c0006f62:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f68:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f6f:	e8 a0 8a 00 00       	call   c000fa14 <CPU::cpuidCheckEDX(unsigned int)>
c0006f74:	89 c2                	mov    edx,eax
c0006f76:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f7c:	c1 e2 07             	shl    edx,0x7
c0006f7f:	83 e0 7f             	and    eax,0x7f
c0006f82:	09 d0                	or     eax,edx
c0006f84:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f8a:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f91:	e8 7e 8a 00 00       	call   c000fa14 <CPU::cpuidCheckEDX(unsigned int)>
c0006f96:	83 c4 10             	add    esp,0x10
c0006f99:	83 e0 01             	and    eax,0x1
c0006f9c:	c1 e0 05             	shl    eax,0x5
c0006f9f:	89 c2                	mov    edx,eax
c0006fa1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fa7:	83 e0 df             	and    eax,0xffffffdf
c0006faa:	09 d0                	or     eax,edx
c0006fac:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fb6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fbc:	0f 84 c9 00 00 00    	je     c000708b <Computer::detectFeatures()+0x1fb>
c0006fc2:	83 e0 fe             	and    eax,0xfffffffe
c0006fc5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	89 c2                	mov    edx,eax
c0006fd3:	83 e2 09             	and    edx,0x9
c0006fd6:	83 fa 01             	cmp    edx,0x1
c0006fd9:	75 09                	jne    c0006fe4 <Computer::detectFeatures()+0x154>
c0006fdb:	83 e0 fe             	and    eax,0xfffffffe
c0006fde:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe4:	83 ec 0c             	sub    esp,0xc
c0006fe7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006feb:	50                   	push   eax
c0006fec:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff0:	55                   	push   ebp
c0006ff1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ff5:	57                   	push   edi
c0006ff6:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006ffa:	56                   	push   esi
c0006ffb:	68 00 00 00 80       	push   0x80000000
c0007000:	e8 8b 89 00 00       	call   c000f990 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007005:	83 c4 20             	add    esp,0x20
c0007008:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000700f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007013:	0f 86 b7 fe ff ff    	jbe    c0006ed0 <Computer::detectFeatures()+0x40>
c0007019:	83 ec 0c             	sub    esp,0xc
c000701c:	50                   	push   eax
c000701d:	55                   	push   ebp
c000701e:	57                   	push   edi
c000701f:	56                   	push   esi
c0007020:	68 01 00 00 80       	push   0x80000001
c0007025:	e8 66 89 00 00       	call   c000f990 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007030:	83 c4 20             	add    esp,0x20
c0007033:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007038:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000703e:	e9 8d fe ff ff       	jmp    c0006ed0 <Computer::detectFeatures()+0x40>
c0007043:	e8 08 76 01 00       	call   c001e650 <absolutelyNoChanceInHell>
c0007048:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c000704e:	c1 e0 07             	shl    eax,0x7
c0007051:	83 e2 7f             	and    edx,0x7f
c0007054:	09 c2                	or     edx,eax
c0007056:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c000705c:	80 e2 80             	and    dl,0x80
c000705f:	0f 84 b4 fe ff ff    	je     c0006f19 <Computer::detectFeatures()+0x89>
c0007065:	e8 56 72 01 00       	call   c001e2c0 <avxDetect>
c000706a:	83 e0 01             	and    eax,0x1
c000706d:	c1 e0 05             	shl    eax,0x5
c0007070:	89 c2                	mov    edx,eax
c0007072:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007078:	83 e0 df             	and    eax,0xffffffdf
c000707b:	09 d0                	or     eax,edx
c000707d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007083:	83 c4 1c             	add    esp,0x1c
c0007086:	5b                   	pop    ebx
c0007087:	5e                   	pop    esi
c0007088:	5f                   	pop    edi
c0007089:	5d                   	pop    ebp
c000708a:	c3                   	ret    
c000708b:	83 ec 0c             	sub    esp,0xc
c000708e:	68 00 02 00 00       	push   0x200
c0007093:	e8 7c 89 00 00       	call   c000fa14 <CPU::cpuidCheckEDX(unsigned int)>
c0007098:	83 c4 10             	add    esp,0x10
c000709b:	89 c2                	mov    edx,eax
c000709d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070a3:	83 e2 01             	and    edx,0x1
c00070a6:	83 e0 fe             	and    eax,0xfffffffe
c00070a9:	09 d0                	or     eax,edx
c00070ab:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b1:	e9 15 ff ff ff       	jmp    c0006fcb <Computer::detectFeatures()+0x13b>

c00070b6 <Computer::displayFeatures()>:
c00070b6:	c3                   	ret    
c00070b7:	90                   	nop

c00070b8 <Computer::rdmsr(unsigned int)>:
c00070b8:	83 ec 0c             	sub    esp,0xc
c00070bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070bf:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070c6:	74 0a                	je     c00070d2 <Computer::rdmsr(unsigned int)+0x1a>
c00070c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070cc:	0f 32                	rdmsr  
c00070ce:	83 c4 0c             	add    esp,0xc
c00070d1:	c3                   	ret    
c00070d2:	83 ec 0c             	sub    esp,0xc
c00070d5:	68 16 fe 01 c0       	push   0xc001fe16
c00070da:	e8 fc 9a 00 00       	call   c0010bdb <KePanic(char const*)>
c00070df:	83 c4 10             	add    esp,0x10
c00070e2:	eb e4                	jmp    c00070c8 <Computer::rdmsr(unsigned int)+0x10>

c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070e4:	57                   	push   edi
c00070e5:	56                   	push   esi
c00070e6:	83 ec 04             	sub    esp,0x4
c00070e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070ed:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070f5:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070fc:	74 10                	je     c000710e <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c00070fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007102:	89 f0                	mov    eax,esi
c0007104:	89 fa                	mov    edx,edi
c0007106:	0f 30                	wrmsr  
c0007108:	83 c4 04             	add    esp,0x4
c000710b:	5e                   	pop    esi
c000710c:	5f                   	pop    edi
c000710d:	c3                   	ret    
c000710e:	83 ec 0c             	sub    esp,0xc
c0007111:	68 1c fe 01 c0       	push   0xc001fe1c
c0007116:	e8 c0 9a 00 00       	call   c0010bdb <KePanic(char const*)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	eb de                	jmp    c00070fe <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007120 <Computer::shutdown()>:
c0007120:	83 ec 0c             	sub    esp,0xc
c0007123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007127:	8b 10                	mov    edx,DWORD PTR [eax]
c0007129:	6a 00                	push   0x0
c000712b:	6a 00                	push   0x0
c000712d:	6a 00                	push   0x0
c000712f:	50                   	push   eax
c0007130:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007133:	83 c4 1c             	add    esp,0x1c
c0007136:	c3                   	ret    
c0007137:	90                   	nop

c0007138 <Computer::restart()>:
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000713f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007141:	6a 00                	push   0x0
c0007143:	6a 00                	push   0x0
c0007145:	6a 01                	push   0x1
c0007147:	50                   	push   eax
c0007148:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000714b:	83 c4 1c             	add    esp,0x1c
c000714e:	c3                   	ret    
c000714f:	90                   	nop

c0007150 <Computer::sleep()>:
c0007150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007154:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000715a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000715e:	e9 c9 82 00 00       	jmp    c000f42c <ACPI::sleep()>
c0007163:	90                   	nop

c0007164 <Computer::nmiEnabled()>:
c0007164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007168:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000716e:	c3                   	ret    
c000716f:	90                   	nop

c0007170 <Computer::readCMOS(unsigned char)>:
c0007170:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007174:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007178:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c000717f:	75 09                	jne    c000718a <Computer::readCMOS(unsigned char)+0x1a>
c0007181:	b2 80                	mov    dl,0x80
c0007183:	09 d0                	or     eax,edx
c0007185:	e6 70                	out    0x70,al
c0007187:	e4 71                	in     al,0x71
c0007189:	c3                   	ret    
c000718a:	31 d2                	xor    edx,edx
c000718c:	eb f5                	jmp    c0007183 <Computer::readCMOS(unsigned char)+0x13>

c000718e <Computer::enableNMI(bool)>:
c000718e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007196:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000719c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071a4:	eb ca                	jmp    c0007170 <Computer::readCMOS(unsigned char)>

c00071a6 <Computer::open(int, int, void*)>:
c00071a6:	56                   	push   esi
c00071a7:	53                   	push   ebx
c00071a8:	83 ec 10             	sub    esp,0x10
c00071ab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071af:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071b6:	68 22 fe 01 c0       	push   0xc001fe22
c00071bb:	0f 94 05 e0 26 02 c0 	sete   BYTE PTR ds:0xc00226e0
c00071c2:	e8 5e 93 00 00       	call   c0010525 <KeSetBootMessage(char const*)>
c00071c7:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071ce:	e8 db 08 00 00       	call   c0007aae <malloc>
c00071d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00071d6:	89 c6                	mov    esi,eax
c00071d8:	e8 c3 7d 00 00       	call   c000efa0 <ACPI::ACPI()>
c00071dd:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071e3:	58                   	pop    eax
c00071e4:	5a                   	pop    edx
c00071e5:	56                   	push   esi
c00071e6:	53                   	push   ebx
c00071e7:	e8 96 4e 00 00       	call   c000c082 <Device::addChild(Device*)>
c00071ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071ef:	e8 9c fc ff ff       	call   c0006e90 <Computer::detectFeatures()>
c00071f4:	59                   	pop    ecx
c00071f5:	5e                   	pop    esi
c00071f6:	6a 01                	push   0x1
c00071f8:	53                   	push   ebx
c00071f9:	e8 90 ff ff ff       	call   c000718e <Computer::enableNMI(bool)>
c00071fe:	c7 04 24 3a fe 01 c0 	mov    DWORD PTR [esp],0xc001fe3a
c0007205:	e8 1b 93 00 00       	call   c0010525 <KeSetBootMessage(char const*)>
c000720a:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007211:	e8 98 08 00 00       	call   c0007aae <malloc>
c0007216:	89 04 24             	mov    DWORD PTR [esp],eax
c0007219:	89 c6                	mov    esi,eax
c000721b:	e8 ac 88 00 00       	call   c000facc <CPU::CPU()>
c0007220:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007226:	58                   	pop    eax
c0007227:	5a                   	pop    edx
c0007228:	56                   	push   esi
c0007229:	53                   	push   ebx
c000722a:	e8 53 4e 00 00       	call   c000c082 <Device::addChild(Device*)>
c000722f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007235:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007239:	8b 10                	mov    edx,DWORD PTR [eax]
c000723b:	51                   	push   ecx
c000723c:	6a 00                	push   0x0
c000723e:	6a 00                	push   0x0
c0007240:	50                   	push   eax
c0007241:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007244:	83 c4 14             	add    esp,0x14
c0007247:	68 e8 fe 01 c0       	push   0xc001fee8
c000724c:	e8 d4 92 00 00       	call   c0010525 <KeSetBootMessage(char const*)>
c0007251:	e8 6e 00 01 00       	call   c00172c4 <HalInitialiseCoprocessor()>
c0007256:	c7 04 24 54 fe 01 c0 	mov    DWORD PTR [esp],0xc001fe54
c000725d:	e8 c3 92 00 00       	call   c0010525 <KeSetBootMessage(char const*)>
c0007262:	c7 04 24 a3 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca3
c0007269:	e8 3a e0 00 00       	call   c00152a8 <setupMultitasking(void (*)())>
c000726e:	83 c4 14             	add    esp,0x14
c0007271:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007276:	5b                   	pop    ebx
c0007277:	5e                   	pop    esi
c0007278:	c3                   	ret    
c0007279:	90                   	nop

c000727a <Computer::disableNMI()>:
c000727a:	6a 00                	push   0x0
c000727c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007280:	50                   	push   eax
c0007281:	e8 08 ff ff ff       	call   c000718e <Computer::enableNMI(bool)>
c0007286:	5a                   	pop    edx
c0007287:	59                   	pop    ecx
c0007288:	c3                   	ret    
c0007289:	90                   	nop

c000728a <Computer::writeCMOS(unsigned char, unsigned char)>:
c000728a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000728e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007292:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007296:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c000729d:	75 0b                	jne    c00072aa <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c000729f:	b1 80                	mov    cl,0x80
c00072a1:	09 c8                	or     eax,ecx
c00072a3:	e6 70                	out    0x70,al
c00072a5:	88 d0                	mov    al,dl
c00072a7:	e6 71                	out    0x71,al
c00072a9:	c3                   	ret    
c00072aa:	31 c9                	xor    ecx,ecx
c00072ac:	eb f3                	jmp    c00072a1 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072ae <Computer::handleNMI()>:
c00072ae:	56                   	push   esi
c00072af:	53                   	push   ebx
c00072b0:	83 ec 10             	sub    esp,0x10
c00072b3:	e4 92                	in     al,0x92
c00072b5:	89 c6                	mov    esi,eax
c00072b7:	e4 61                	in     al,0x61
c00072b9:	68 6f fe 01 c0       	push   0xc001fe6f
c00072be:	88 c3                	mov    bl,al
c00072c0:	e8 b2 36 00 00       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c00072c5:	83 c4 10             	add    esp,0x10
c00072c8:	83 e6 10             	and    esi,0x10
c00072cb:	75 10                	jne    c00072dd <Computer::handleNMI()+0x2f>
c00072cd:	f6 c3 40             	test   bl,0x40
c00072d0:	75 20                	jne    c00072f2 <Computer::handleNMI()+0x44>
c00072d2:	80 e3 80             	and    bl,0x80
c00072d5:	75 30                	jne    c0007307 <Computer::handleNMI()+0x59>
c00072d7:	83 c4 04             	add    esp,0x4
c00072da:	5b                   	pop    ebx
c00072db:	5e                   	pop    esi
c00072dc:	c3                   	ret    
c00072dd:	83 ec 0c             	sub    esp,0xc
c00072e0:	68 80 fe 01 c0       	push   0xc001fe80
c00072e5:	e8 f1 98 00 00       	call   c0010bdb <KePanic(char const*)>
c00072ea:	83 c4 10             	add    esp,0x10
c00072ed:	f6 c3 40             	test   bl,0x40
c00072f0:	74 e0                	je     c00072d2 <Computer::handleNMI()+0x24>
c00072f2:	83 ec 0c             	sub    esp,0xc
c00072f5:	68 8d fe 01 c0       	push   0xc001fe8d
c00072fa:	e8 dc 98 00 00       	call   c0010bdb <KePanic(char const*)>
c00072ff:	83 c4 10             	add    esp,0x10
c0007302:	80 e3 80             	and    bl,0x80
c0007305:	74 d0                	je     c00072d7 <Computer::handleNMI()+0x29>
c0007307:	c7 44 24 10 97 fe 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fe97
c000730f:	83 c4 04             	add    esp,0x4
c0007312:	5b                   	pop    ebx
c0007313:	5e                   	pop    esi
c0007314:	e9 c2 98 00 00       	jmp    c0010bdb <KePanic(char const*)>
c0007319:	90                   	nop

c000731a <GDTEntry::setBase(unsigned int)>:
c000731a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000731e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007322:	89 c1                	mov    ecx,eax
c0007324:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007328:	c1 e9 10             	shr    ecx,0x10
c000732b:	c1 e8 18             	shr    eax,0x18
c000732e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007331:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007334:	c3                   	ret    
c0007335:	90                   	nop

c0007336 <GDTEntry::setLimit(unsigned int)>:
c0007336:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000733a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000733e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007341:	66 89 01             	mov    WORD PTR [ecx],ax
c0007344:	83 e2 f0             	and    edx,0xfffffff0
c0007347:	c1 e8 10             	shr    eax,0x10
c000734a:	83 e0 0f             	and    eax,0xf
c000734d:	09 d0                	or     eax,edx
c000734f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007352:	c3                   	ret    
c0007353:	90                   	nop

c0007354 <GDT::GDT()>:
c0007354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007358:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000735e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007362:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007368:	90                   	nop
c0007369:	c3                   	ret    

c000736a <GDT::addEntry(GDTEntry)>:
c000736a:	53                   	push   ebx
c000736b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000736f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007373:	8b 02                	mov    eax,DWORD PTR [edx]
c0007375:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007379:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000737d:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007381:	8d 48 01             	lea    ecx,[eax+0x1]
c0007384:	c1 e0 03             	shl    eax,0x3
c0007387:	89 0a                	mov    DWORD PTR [edx],ecx
c0007389:	5b                   	pop    ebx
c000738a:	c3                   	ret    
c000738b:	90                   	nop

c000738c <GDT::getNumberOfEntries()>:
c000738c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007390:	8b 00                	mov    eax,DWORD PTR [eax]
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::flush()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 10                	mov    edx,DWORD PTR [eax]
c000739a:	83 c0 04             	add    eax,0x4
c000739d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073a4:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073a9:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073b0:	e9 a5 8f ff ff       	jmp    c000035a <loadGDT>
c00073b5:	90                   	nop

c00073b6 <GDT::setup()>:
c00073b6:	57                   	push   edi
c00073b7:	56                   	push   esi
c00073b8:	53                   	push   ebx
c00073b9:	83 ec 30             	sub    esp,0x30
c00073bc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c0:	6a 00                	push   0x0
c00073c2:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073c6:	56                   	push   esi
c00073c7:	e8 4e ff ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c00073cc:	6a 00                	push   0x0
c00073ce:	56                   	push   esi
c00073cf:	e8 62 ff ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c00073d4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073dc:	6a 00                	push   0x0
c00073de:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073e2:	56                   	push   esi
c00073e3:	e8 32 ff ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c00073e8:	68 ff ff ff 00       	push   0xffffff
c00073ed:	56                   	push   esi
c00073ee:	e8 43 ff ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c00073f3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00073fb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00073ff:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007403:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007408:	0d 00 9a c0 00       	or     eax,0xc09a00
c000740d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007411:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007415:	89 f8                	mov    eax,edi
c0007417:	89 fa                	mov    edx,edi
c0007419:	80 e4 f7             	and    ah,0xf7
c000741c:	80 ce 60             	or     dh,0x60
c000741f:	89 c7                	mov    edi,eax
c0007421:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007425:	80 cc 60             	or     ah,0x60
c0007428:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000742c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007430:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007434:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007438:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000743c:	83 c4 20             	add    esp,0x20
c000743f:	6a 00                	push   0x0
c0007441:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007445:	50                   	push   eax
c0007446:	e8 cf fe ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c000744b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000744f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007453:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007457:	83 e0 3f             	and    eax,0x3f
c000745a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000745e:	6a 00                	push   0x0
c0007460:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007464:	50                   	push   eax
c0007465:	e8 b0 fe ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c000746a:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000746e:	83 e0 3f             	and    eax,0x3f
c0007471:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0007475:	83 c4 0c             	add    esp,0xc
c0007478:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000747c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007480:	53                   	push   ebx
c0007481:	e8 e4 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c0007486:	83 c4 0c             	add    esp,0xc
c0007489:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000748d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007491:	53                   	push   ebx
c0007492:	e8 d3 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c0007497:	83 c4 0c             	add    esp,0xc
c000749a:	57                   	push   edi
c000749b:	56                   	push   esi
c000749c:	53                   	push   ebx
c000749d:	e8 c8 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074a2:	83 c4 0c             	add    esp,0xc
c00074a5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074a9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074ad:	53                   	push   ebx
c00074ae:	e8 b7 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074b3:	83 c4 0c             	add    esp,0xc
c00074b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074ba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074be:	53                   	push   ebx
c00074bf:	e8 a6 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074c4:	83 c4 0c             	add    esp,0xc
c00074c7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074cf:	53                   	push   ebx
c00074d0:	e8 95 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074d5:	83 c4 0c             	add    esp,0xc
c00074d8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074dc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e0:	53                   	push   ebx
c00074e1:	e8 84 fe ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00074e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074e9:	e8 a6 fe ff ff       	call   c0007394 <GDT::flush()>
c00074ee:	83 c4 40             	add    esp,0x40
c00074f1:	5b                   	pop    ebx
c00074f2:	5e                   	pop    esi
c00074f3:	5f                   	pop    edi
c00074f4:	c3                   	ret    

c00074f5 <idleFunction(void*)>:
c00074f5:	83 ec 0c             	sub    esp,0xc
c00074f8:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00074fd:	48                   	dec    eax
c00074fe:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0007503:	75 01                	jne    c0007506 <idleFunction(void*)+0x11>
c0007505:	fb                   	sti    
c0007506:	e8 85 fa 00 00       	call   c0016f90 <HalSystemIdle()>
c000750b:	e8 42 77 01 00       	call   c001ec52 <idleCommon()>
c0007510:	eb f4                	jmp    c0007506 <idleFunction(void*)+0x11>
c0007512:	66 90                	xchg   ax,ax

c0007514 <IDTEntry::IDTEntry(bool)>:
c0007514:	53                   	push   ebx
c0007515:	83 ec 04             	sub    esp,0x4
c0007518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000751c:	88 04 24             	mov    BYTE PTR [esp],al
c000751f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007523:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007529:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007538:	83 e2 f0             	and    edx,0xfffffff0
c000753b:	83 ca 0e             	or     edx,0xe
c000753e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007545:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007548:	83 e2 ef             	and    edx,0xffffffef
c000754b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000754e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0007552:	85 c0                	test   eax,eax
c0007554:	74 06                	je     c000755c <IDTEntry::IDTEntry(bool)+0x48>
c0007556:	b2 03                	mov    dl,0x3
c0007558:	eb 06                	jmp    c0007560 <IDTEntry::IDTEntry(bool)+0x4c>
c000755a:	66 90                	xchg   ax,ax
c000755c:	b2 00                	mov    dl,0x0
c000755e:	66 90                	xchg   ax,ax
c0007560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007564:	83 e2 03             	and    edx,0x3
c0007567:	89 d3                	mov    ebx,edx
c0007569:	c1 e3 05             	shl    ebx,0x5
c000756c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000756f:	83 e2 9f             	and    edx,0xffffff9f
c0007572:	88 d1                	mov    cl,dl
c0007574:	88 da                	mov    dl,bl
c0007576:	09 ca                	or     edx,ecx
c0007578:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000757b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000757f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007582:	83 ca 80             	or     edx,0xffffff80
c0007585:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007588:	90                   	nop
c0007589:	83 c4 04             	add    esp,0x4
c000758c:	5b                   	pop    ebx
c000758d:	c3                   	ret    

c000758e <IDTEntry::setOffset(unsigned int)>:
c000758e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007592:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007596:	66 89 02             	mov    WORD PTR [edx],ax
c0007599:	c1 e8 10             	shr    eax,0x10
c000759c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a0:	c3                   	ret    
c00075a1:	90                   	nop
c00075a2:	66 90                	xchg   ax,ax

c00075a4 <IDT::IDT()>:
c00075a4:	90                   	nop
c00075a5:	c3                   	ret    

c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075aa:	83 c0 30             	add    eax,0x30
c00075ad:	c3                   	ret    

c00075ae <IDT::addEntry(IDTEntry, int)>:
c00075ae:	53                   	push   ebx
c00075af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075bf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075c2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075c6:	5b                   	pop    ebx
c00075c7:	c3                   	ret    

c00075c8 <IDT::addEntry(int, void (*)(), bool)>:
c00075c8:	53                   	push   ebx
c00075c9:	83 ec 10             	sub    esp,0x10
c00075cc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d1:	50                   	push   eax
c00075d2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075d6:	53                   	push   ebx
c00075d7:	e8 38 ff ff ff       	call   c0007514 <IDTEntry::IDTEntry(bool)>
c00075dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e0:	53                   	push   ebx
c00075e1:	e8 a8 ff ff ff       	call   c000758e <IDTEntry::setOffset(unsigned int)>
c00075e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075f6:	e8 b3 ff ff ff       	call   c00075ae <IDT::addEntry(IDTEntry, int)>
c00075fb:	83 c4 30             	add    esp,0x30
c00075fe:	5b                   	pop    ebx
c00075ff:	c3                   	ret    

c0007600 <IDT::flush()>:
c0007600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007604:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c000760d:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c0007612:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007619:	c3                   	ret    

c000761a <IDT::setup()>:
c000761a:	57                   	push   edi
c000761b:	56                   	push   esi
c000761c:	53                   	push   ebx
c000761d:	83 ec 10             	sub    esp,0x10
c0007620:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007624:	6a 00                	push   0x0
c0007626:	68 50 e3 01 c0       	push   0xc001e350
c000762b:	6a 00                	push   0x0
c000762d:	53                   	push   ebx
c000762e:	e8 95 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007633:	6a 00                	push   0x0
c0007635:	68 60 e3 01 c0       	push   0xc001e360
c000763a:	6a 01                	push   0x1
c000763c:	53                   	push   ebx
c000763d:	e8 86 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007642:	83 c4 20             	add    esp,0x20
c0007645:	6a 00                	push   0x0
c0007647:	68 6a e3 01 c0       	push   0xc001e36a
c000764c:	6a 02                	push   0x2
c000764e:	53                   	push   ebx
c000764f:	e8 74 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007654:	6a 00                	push   0x0
c0007656:	68 74 e3 01 c0       	push   0xc001e374
c000765b:	6a 03                	push   0x3
c000765d:	53                   	push   ebx
c000765e:	e8 65 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007663:	83 c4 20             	add    esp,0x20
c0007666:	6a 00                	push   0x0
c0007668:	68 7e e3 01 c0       	push   0xc001e37e
c000766d:	6a 04                	push   0x4
c000766f:	53                   	push   ebx
c0007670:	e8 53 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007675:	6a 00                	push   0x0
c0007677:	68 88 e3 01 c0       	push   0xc001e388
c000767c:	6a 05                	push   0x5
c000767e:	53                   	push   ebx
c000767f:	e8 44 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007684:	83 c4 20             	add    esp,0x20
c0007687:	6a 00                	push   0x0
c0007689:	68 92 e3 01 c0       	push   0xc001e392
c000768e:	6a 06                	push   0x6
c0007690:	53                   	push   ebx
c0007691:	e8 32 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007696:	6a 00                	push   0x0
c0007698:	68 9c e3 01 c0       	push   0xc001e39c
c000769d:	6a 07                	push   0x7
c000769f:	53                   	push   ebx
c00076a0:	e8 23 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076a5:	83 c4 20             	add    esp,0x20
c00076a8:	6a 00                	push   0x0
c00076aa:	68 a6 e3 01 c0       	push   0xc001e3a6
c00076af:	6a 08                	push   0x8
c00076b1:	53                   	push   ebx
c00076b2:	e8 11 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076b7:	6a 00                	push   0x0
c00076b9:	68 ae e3 01 c0       	push   0xc001e3ae
c00076be:	6a 09                	push   0x9
c00076c0:	53                   	push   ebx
c00076c1:	e8 02 ff ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076c6:	83 c4 20             	add    esp,0x20
c00076c9:	6a 00                	push   0x0
c00076cb:	68 b8 e3 01 c0       	push   0xc001e3b8
c00076d0:	6a 0a                	push   0xa
c00076d2:	53                   	push   ebx
c00076d3:	e8 f0 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076d8:	6a 00                	push   0x0
c00076da:	68 c0 e3 01 c0       	push   0xc001e3c0
c00076df:	6a 0b                	push   0xb
c00076e1:	53                   	push   ebx
c00076e2:	e8 e1 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076e7:	83 c4 20             	add    esp,0x20
c00076ea:	6a 00                	push   0x0
c00076ec:	68 c8 e3 01 c0       	push   0xc001e3c8
c00076f1:	6a 0c                	push   0xc
c00076f3:	53                   	push   ebx
c00076f4:	e8 cf fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00076f9:	6a 00                	push   0x0
c00076fb:	68 d0 e3 01 c0       	push   0xc001e3d0
c0007700:	6a 0d                	push   0xd
c0007702:	53                   	push   ebx
c0007703:	e8 c0 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007708:	83 c4 20             	add    esp,0x20
c000770b:	6a 00                	push   0x0
c000770d:	68 ea e3 01 c0       	push   0xc001e3ea
c0007712:	6a 0e                	push   0xe
c0007714:	53                   	push   ebx
c0007715:	e8 ae fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000771a:	6a 00                	push   0x0
c000771c:	68 f2 e3 01 c0       	push   0xc001e3f2
c0007721:	6a 0f                	push   0xf
c0007723:	53                   	push   ebx
c0007724:	e8 9f fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007729:	83 c4 20             	add    esp,0x20
c000772c:	6a 00                	push   0x0
c000772e:	68 fc e3 01 c0       	push   0xc001e3fc
c0007733:	6a 10                	push   0x10
c0007735:	53                   	push   ebx
c0007736:	e8 8d fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000773b:	6a 00                	push   0x0
c000773d:	68 06 e4 01 c0       	push   0xc001e406
c0007742:	6a 11                	push   0x11
c0007744:	53                   	push   ebx
c0007745:	e8 7e fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000774a:	83 c4 20             	add    esp,0x20
c000774d:	6a 00                	push   0x0
c000774f:	68 10 e4 01 c0       	push   0xc001e410
c0007754:	6a 12                	push   0x12
c0007756:	53                   	push   ebx
c0007757:	e8 6c fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000775c:	6a 01                	push   0x1
c000775e:	68 aa e4 01 c0       	push   0xc001e4aa
c0007763:	6a 60                	push   0x60
c0007765:	53                   	push   ebx
c0007766:	e8 5d fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000776b:	83 c4 20             	add    esp,0x20
c000776e:	6a 00                	push   0x0
c0007770:	68 b1 e4 01 c0       	push   0xc001e4b1
c0007775:	6a 20                	push   0x20
c0007777:	53                   	push   ebx
c0007778:	e8 4b fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000777d:	6a 00                	push   0x0
c000777f:	68 9c e4 01 c0       	push   0xc001e49c
c0007784:	6a 21                	push   0x21
c0007786:	53                   	push   ebx
c0007787:	e8 3c fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000778c:	83 c4 20             	add    esp,0x20
c000778f:	6a 00                	push   0x0
c0007791:	68 a3 e4 01 c0       	push   0xc001e4a3
c0007796:	6a 22                	push   0x22
c0007798:	53                   	push   ebx
c0007799:	e8 2a fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c000779e:	6a 00                	push   0x0
c00077a0:	68 1a e4 01 c0       	push   0xc001e41a
c00077a5:	6a 23                	push   0x23
c00077a7:	53                   	push   ebx
c00077a8:	e8 1b fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ad:	83 c4 20             	add    esp,0x20
c00077b0:	6a 00                	push   0x0
c00077b2:	68 24 e4 01 c0       	push   0xc001e424
c00077b7:	6a 24                	push   0x24
c00077b9:	53                   	push   ebx
c00077ba:	e8 09 fe ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077bf:	6a 00                	push   0x0
c00077c1:	68 2e e4 01 c0       	push   0xc001e42e
c00077c6:	6a 25                	push   0x25
c00077c8:	53                   	push   ebx
c00077c9:	e8 fa fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ce:	83 c4 20             	add    esp,0x20
c00077d1:	6a 00                	push   0x0
c00077d3:	68 38 e4 01 c0       	push   0xc001e438
c00077d8:	6a 26                	push   0x26
c00077da:	53                   	push   ebx
c00077db:	e8 e8 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077e0:	6a 00                	push   0x0
c00077e2:	68 42 e4 01 c0       	push   0xc001e442
c00077e7:	6a 27                	push   0x27
c00077e9:	53                   	push   ebx
c00077ea:	e8 d9 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00077ef:	83 c4 20             	add    esp,0x20
c00077f2:	6a 00                	push   0x0
c00077f4:	68 4c e4 01 c0       	push   0xc001e44c
c00077f9:	6a 28                	push   0x28
c00077fb:	53                   	push   ebx
c00077fc:	e8 c7 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007801:	6a 00                	push   0x0
c0007803:	68 56 e4 01 c0       	push   0xc001e456
c0007808:	6a 29                	push   0x29
c000780a:	53                   	push   ebx
c000780b:	e8 b8 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007810:	83 c4 20             	add    esp,0x20
c0007813:	6a 00                	push   0x0
c0007815:	68 60 e4 01 c0       	push   0xc001e460
c000781a:	6a 2a                	push   0x2a
c000781c:	53                   	push   ebx
c000781d:	e8 a6 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007822:	6a 00                	push   0x0
c0007824:	68 6a e4 01 c0       	push   0xc001e46a
c0007829:	6a 2b                	push   0x2b
c000782b:	53                   	push   ebx
c000782c:	e8 97 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007831:	83 c4 20             	add    esp,0x20
c0007834:	6a 00                	push   0x0
c0007836:	68 74 e4 01 c0       	push   0xc001e474
c000783b:	6a 2c                	push   0x2c
c000783d:	53                   	push   ebx
c000783e:	e8 85 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007843:	6a 00                	push   0x0
c0007845:	68 7e e4 01 c0       	push   0xc001e47e
c000784a:	6a 2d                	push   0x2d
c000784c:	53                   	push   ebx
c000784d:	e8 76 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007852:	83 c4 20             	add    esp,0x20
c0007855:	6a 00                	push   0x0
c0007857:	68 88 e4 01 c0       	push   0xc001e488
c000785c:	6a 2e                	push   0x2e
c000785e:	53                   	push   ebx
c000785f:	e8 64 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007864:	6a 00                	push   0x0
c0007866:	68 92 e4 01 c0       	push   0xc001e492
c000786b:	6a 2f                	push   0x2f
c000786d:	53                   	push   ebx
c000786e:	e8 55 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007873:	83 c4 20             	add    esp,0x20
c0007876:	6a 00                	push   0x0
c0007878:	68 ec e5 01 c0       	push   0xc001e5ec
c000787d:	6a 30                	push   0x30
c000787f:	53                   	push   ebx
c0007880:	e8 43 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007885:	6a 00                	push   0x0
c0007887:	68 f6 e5 01 c0       	push   0xc001e5f6
c000788c:	6a 31                	push   0x31
c000788e:	53                   	push   ebx
c000788f:	e8 34 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c0007894:	83 c4 20             	add    esp,0x20
c0007897:	6a 00                	push   0x0
c0007899:	68 00 e6 01 c0       	push   0xc001e600
c000789e:	6a 32                	push   0x32
c00078a0:	53                   	push   ebx
c00078a1:	e8 22 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078a6:	6a 00                	push   0x0
c00078a8:	68 0a e6 01 c0       	push   0xc001e60a
c00078ad:	6a 33                	push   0x33
c00078af:	53                   	push   ebx
c00078b0:	e8 13 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078b5:	83 c4 20             	add    esp,0x20
c00078b8:	6a 00                	push   0x0
c00078ba:	68 14 e6 01 c0       	push   0xc001e614
c00078bf:	6a 34                	push   0x34
c00078c1:	53                   	push   ebx
c00078c2:	e8 01 fd ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078c7:	6a 00                	push   0x0
c00078c9:	68 1e e6 01 c0       	push   0xc001e61e
c00078ce:	6a 35                	push   0x35
c00078d0:	53                   	push   ebx
c00078d1:	e8 f2 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078d6:	83 c4 20             	add    esp,0x20
c00078d9:	6a 00                	push   0x0
c00078db:	68 28 e6 01 c0       	push   0xc001e628
c00078e0:	6a 36                	push   0x36
c00078e2:	53                   	push   ebx
c00078e3:	e8 e0 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078e8:	6a 00                	push   0x0
c00078ea:	68 32 e6 01 c0       	push   0xc001e632
c00078ef:	6a 37                	push   0x37
c00078f1:	53                   	push   ebx
c00078f2:	e8 d1 fc ff ff       	call   c00075c8 <IDT::addEntry(int, void (*)(), bool)>
c00078f7:	83 c4 1c             	add    esp,0x1c
c00078fa:	6a 03                	push   0x3
c00078fc:	6a 02                	push   0x2
c00078fe:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007904:	e8 0d 25 00 00       	call   c0009e16 <VAS::allocatePages(int, int)>
c0007909:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007910:	89 c6                	mov    esi,eax
c0007912:	e8 97 01 00 00       	call   c0007aae <malloc>
c0007917:	81 c6 00 20 00 00    	add    esi,0x2000
c000791d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007920:	89 c7                	mov    edi,eax
c0007922:	e8 11 16 00 00       	call   c0008f38 <TSS::TSS()>
c0007927:	83 c4 0c             	add    esp,0xc
c000792a:	68 a6 e3 01 c0       	push   0xc001e3a6
c000792f:	56                   	push   esi
c0007930:	57                   	push   edi
c0007931:	e8 46 16 00 00       	call   c0008f7c <TSS::setup(unsigned long, unsigned long)>
c0007936:	89 c6                	mov    esi,eax
c0007938:	58                   	pop    eax
c0007939:	5a                   	pop    edx
c000793a:	6a 00                	push   0x0
c000793c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007940:	50                   	push   eax
c0007941:	e8 ce fb ff ff       	call   c0007514 <IDTEntry::IDTEntry(bool)>
c0007946:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000794a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000794f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007956:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000795c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007960:	80 ce 05             	or     dh,0x5
c0007963:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007966:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000796a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000796e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007971:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007974:	e8 87 fc ff ff       	call   c0007600 <IDT::flush()>
c0007979:	83 c4 20             	add    esp,0x20
c000797c:	5b                   	pop    ebx
c000797d:	5e                   	pop    esi
c000797e:	5f                   	pop    edi
c000797f:	c3                   	ret    

c0007980 <sbrk>:
c0007980:	55                   	push   ebp
c0007981:	57                   	push   edi
c0007982:	56                   	push   esi
c0007983:	53                   	push   ebx
c0007984:	83 ec 1c             	sub    esp,0x1c
c0007987:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000798b:	85 c0                	test   eax,eax
c000798d:	74 61                	je     c00079f0 <sbrk+0x70>
c000798f:	78 66                	js     c00079f7 <sbrk+0x77>
c0007991:	8b 15 bc 26 02 c0    	mov    edx,DWORD PTR ds:0xc00226bc
c0007997:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000799b:	05 ff 0f 00 00       	add    eax,0xfff
c00079a0:	89 c5                	mov    ebp,eax
c00079a2:	78 6b                	js     c0007a0f <sbrk+0x8f>
c00079a4:	c1 fd 0c             	sar    ebp,0xc
c00079a7:	bb 00 00 00 00       	mov    ebx,0x0
c00079ac:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079b2:	8b 3d bc 26 02 c0    	mov    edi,DWORD PTR ds:0xc00226bc
c00079b8:	e8 f5 03 00 00       	call   c0007db2 <Phys::allocatePage()>
c00079bd:	68 01 04 00 00       	push   0x401
c00079c2:	57                   	push   edi
c00079c3:	50                   	push   eax
c00079c4:	56                   	push   esi
c00079c5:	e8 48 23 00 00       	call   c0009d12 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079ca:	81 05 bc 26 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00226bc,0x1000
c00079d4:	83 c3 01             	add    ebx,0x1
c00079d7:	83 c4 10             	add    esp,0x10
c00079da:	39 dd                	cmp    ebp,ebx
c00079dc:	75 ce                	jne    c00079ac <sbrk+0x2c>
c00079de:	0f 20 d8             	mov    eax,cr3
c00079e1:	0f 22 d8             	mov    cr3,eax
c00079e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079e8:	83 c4 1c             	add    esp,0x1c
c00079eb:	5b                   	pop    ebx
c00079ec:	5e                   	pop    esi
c00079ed:	5f                   	pop    edi
c00079ee:	5d                   	pop    ebp
c00079ef:	c3                   	ret    
c00079f0:	a1 bc 26 02 c0       	mov    eax,ds:0xc00226bc
c00079f5:	eb f1                	jmp    c00079e8 <sbrk+0x68>
c00079f7:	83 ec 08             	sub    esp,0x8
c00079fa:	50                   	push   eax
c00079fb:	68 38 ff 01 c0       	push   0xc001ff38
c0007a00:	e8 72 2f 00 00       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0007a05:	83 c4 10             	add    esp,0x10
c0007a08:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a0d:	eb d9                	jmp    c00079e8 <sbrk+0x68>
c0007a0f:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a15:	eb 8d                	jmp    c00079a4 <sbrk+0x24>

c0007a17 <mmap>:
c0007a17:	83 ec 18             	sub    esp,0x18
c0007a1a:	68 68 ff 01 c0       	push   0xc001ff68
c0007a1f:	e8 b7 91 00 00       	call   c0010bdb <KePanic(char const*)>
c0007a24:	b8 00 00 00 00       	mov    eax,0x0
c0007a29:	83 c4 1c             	add    esp,0x1c
c0007a2c:	c3                   	ret    

c0007a2d <munmap>:
c0007a2d:	83 ec 18             	sub    esp,0x18
c0007a30:	68 6d ff 01 c0       	push   0xc001ff6d
c0007a35:	e8 a1 91 00 00       	call   c0010bdb <KePanic(char const*)>
c0007a3a:	b8 00 00 00 00       	mov    eax,0x0
c0007a3f:	83 c4 1c             	add    esp,0x1c
c0007a42:	c3                   	ret    

c0007a43 <liballoc_lock()>:
c0007a43:	fa                   	cli    
c0007a44:	83 05 68 91 02 c0 01 	add    DWORD PTR ds:0xc0029168,0x1
c0007a4b:	b8 00 00 00 00       	mov    eax,0x0
c0007a50:	c3                   	ret    

c0007a51 <liballoc_unlock()>:
c0007a51:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0007a56:	83 e8 01             	sub    eax,0x1
c0007a59:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0007a5e:	75 01                	jne    c0007a61 <liballoc_unlock()+0x10>
c0007a60:	fb                   	sti    
c0007a61:	b8 00 00 00 00       	mov    eax,0x0
c0007a66:	c3                   	ret    

c0007a67 <liballoc_alloc(int)>:
c0007a67:	83 ec 10             	sub    esp,0x10
c0007a6a:	6a 01                	push   0x1
c0007a6c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a70:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a76:	e8 9b 23 00 00       	call   c0009e16 <VAS::allocatePages(int, int)>
c0007a7b:	83 c4 1c             	add    esp,0x1c
c0007a7e:	c3                   	ret    

c0007a7f <liballoc_free(void*, int)>:
c0007a7f:	83 ec 14             	sub    esp,0x14
c0007a82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a86:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a8c:	e8 c9 1f 00 00       	call   c0009a5a <VAS::freeAllocatedPages(unsigned long)>
c0007a91:	b8 00 00 00 00       	mov    eax,0x0
c0007a96:	83 c4 1c             	add    esp,0x1c
c0007a99:	c3                   	ret    

c0007a9a <realloc>:
c0007a9a:	83 ec 14             	sub    esp,0x14
c0007a9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa5:	e8 3e 9b ff ff       	call   c00015e8 <dlrealloc>
c0007aaa:	83 c4 1c             	add    esp,0x1c
c0007aad:	c3                   	ret    

c0007aae <malloc>:
c0007aae:	83 ec 18             	sub    esp,0x18
c0007ab1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ab5:	e8 f1 95 ff ff       	call   c00010ab <dlmalloc>
c0007aba:	83 c4 1c             	add    esp,0x1c
c0007abd:	c3                   	ret    

c0007abe <free>:
c0007abe:	83 ec 18             	sub    esp,0x18
c0007ac1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac5:	e8 89 92 ff ff       	call   c0000d53 <dlfree>
c0007aca:	83 c4 1c             	add    esp,0x1c
c0007acd:	c3                   	ret    

c0007ace <rfree>:
c0007ace:	83 ec 18             	sub    esp,0x18
c0007ad1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ad5:	e8 79 92 ff ff       	call   c0000d53 <dlfree>
c0007ada:	83 c4 1c             	add    esp,0x1c
c0007add:	c3                   	ret    

c0007ade <calloc>:
c0007ade:	56                   	push   esi
c0007adf:	53                   	push   ebx
c0007ae0:	83 ec 10             	sub    esp,0x10
c0007ae3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007ae7:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007aec:	53                   	push   ebx
c0007aed:	e8 bc ff ff ff       	call   c0007aae <malloc>
c0007af2:	89 c6                	mov    esi,eax
c0007af4:	83 c4 0c             	add    esp,0xc
c0007af7:	53                   	push   ebx
c0007af8:	6a 00                	push   0x0
c0007afa:	50                   	push   eax
c0007afb:	e8 f0 89 ff ff       	call   c00004f0 <memset>
c0007b00:	89 f0                	mov    eax,esi
c0007b02:	83 c4 14             	add    esp,0x14
c0007b05:	5b                   	pop    ebx
c0007b06:	5e                   	pop    esi
c0007b07:	c3                   	ret    

c0007b08 <KeEntryPoint>:
c0007b08:	57                   	push   edi
c0007b09:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b0e:	56                   	push   esi
c0007b0f:	89 fa                	mov    edx,edi
c0007b11:	53                   	push   ebx
c0007b12:	31 f6                	xor    esi,esi
c0007b14:	83 ec 2c             	sub    esp,0x2c
c0007b17:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b1c:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b21:	89 f0                	mov    eax,esi
c0007b23:	ee                   	out    dx,al
c0007b24:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b29:	b0 80                	mov    al,0x80
c0007b2b:	89 da                	mov    edx,ebx
c0007b2d:	ee                   	out    dx,al
c0007b2e:	b1 03                	mov    cl,0x3
c0007b30:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b35:	88 c8                	mov    al,cl
c0007b37:	ee                   	out    dx,al
c0007b38:	89 f0                	mov    eax,esi
c0007b3a:	89 fa                	mov    edx,edi
c0007b3c:	ee                   	out    dx,al
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	89 da                	mov    edx,ebx
c0007b41:	ee                   	out    dx,al
c0007b42:	b0 c7                	mov    al,0xc7
c0007b44:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 0b                	mov    al,0xb
c0007b4c:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b51:	ee                   	out    dx,al
c0007b52:	68 74 ff 01 c0       	push   0xc001ff74
c0007b57:	e8 1b 2e 00 00       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0007b5c:	e8 48 89 00 00       	call   c00104a9 <KeDisplaySplashScreen()>
c0007b61:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b66:	05 ff 0f 00 00       	add    eax,0xfff
c0007b6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b70:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b73:	e8 a8 03 00 00       	call   c0007f20 <Phys::physicalMemorySetup(unsigned int)>
c0007b78:	e8 62 1c 00 00       	call   c00097df <Virt::virtualMemorySetup()>
c0007b7d:	58                   	pop    eax
c0007b7e:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b82:	53                   	push   ebx
c0007b83:	e8 52 1f 00 00       	call   c0009ada <VAS::VAS()>
c0007b88:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007b8e:	e8 57 70 01 00       	call   c001ebea <_init>
c0007b93:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007b9a:	e8 0f ff ff ff       	call   c0007aae <malloc>
c0007b9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ba2:	89 c6                	mov    esi,eax
c0007ba4:	e8 35 f2 ff ff       	call   c0006dde <Computer::Computer()>
c0007ba9:	53                   	push   ebx
c0007baa:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bb0:	6a 00                	push   0x0
c0007bb2:	6a 00                	push   0x0
c0007bb4:	56                   	push   esi
c0007bb5:	e8 ec f5 ff ff       	call   c00071a6 <Computer::open(int, int, void*)>
c0007bba:	83 c4 14             	add    esp,0x14
c0007bbd:	53                   	push   ebx
c0007bbe:	e8 e1 1f 00 00       	call   c0009ba4 <VAS::~VAS()>
c0007bc3:	83 c4 30             	add    esp,0x30
c0007bc6:	5b                   	pop    ebx
c0007bc7:	5e                   	pop    esi
c0007bc8:	5f                   	pop    edi
c0007bc9:	c3                   	ret    

c0007bca <Phys::allocateDMA(unsigned long)>:
c0007bca:	55                   	push   ebp
c0007bcb:	31 ed                	xor    ebp,ebp
c0007bcd:	57                   	push   edi
c0007bce:	56                   	push   esi
c0007bcf:	53                   	push   ebx
c0007bd0:	31 db                	xor    ebx,ebx
c0007bd2:	83 ec 1c             	sub    esp,0x1c
c0007bd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bd9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007be1:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007be7:	31 c0                	xor    eax,eax
c0007be9:	c1 ef 0c             	shr    edi,0xc
c0007bec:	eb 1b                	jmp    c0007c09 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bee:	85 c0                	test   eax,eax
c0007bf0:	75 06                	jne    c0007bf8 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bf2:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007bf6:	89 dd                	mov    ebp,ebx
c0007bf8:	8d 70 01             	lea    esi,[eax+0x1]
c0007bfb:	39 f7                	cmp    edi,esi
c0007bfd:	74 37                	je     c0007c36 <Phys::allocateDMA(unsigned long)+0x6c>
c0007bff:	89 f0                	mov    eax,esi
c0007c01:	83 c3 01             	add    ebx,0x1
c0007c04:	83 fb 0f             	cmp    ebx,0xf
c0007c07:	7f 13                	jg     c0007c1c <Phys::allocateDMA(unsigned long)+0x52>
c0007c09:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c10:	74 dc                	je     c0007bee <Phys::allocateDMA(unsigned long)+0x24>
c0007c12:	31 c0                	xor    eax,eax
c0007c14:	83 c3 01             	add    ebx,0x1
c0007c17:	83 fb 0f             	cmp    ebx,0xf
c0007c1a:	7e ed                	jle    c0007c09 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c1c:	83 ec 0c             	sub    esp,0xc
c0007c1f:	68 8c ff 01 c0       	push   0xc001ff8c
c0007c24:	e8 b2 8f 00 00       	call   c0010bdb <KePanic(char const*)>
c0007c29:	83 c4 10             	add    esp,0x10
c0007c2c:	31 c0                	xor    eax,eax
c0007c2e:	83 c4 1c             	add    esp,0x1c
c0007c31:	5b                   	pop    ebx
c0007c32:	5e                   	pop    esi
c0007c33:	5f                   	pop    edi
c0007c34:	5d                   	pop    ebp
c0007c35:	c3                   	ret    
c0007c36:	89 e9                	mov    ecx,ebp
c0007c38:	c1 f9 04             	sar    ecx,0x4
c0007c3b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c3f:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c43:	89 ca                	mov    edx,ecx
c0007c45:	83 ea 01             	sub    edx,0x1
c0007c48:	79 03                	jns    c0007c4d <Phys::allocateDMA(unsigned long)+0x83>
c0007c4a:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c4d:	c1 fa 04             	sar    edx,0x4
c0007c50:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c54:	74 08                	je     c0007c5e <Phys::allocateDMA(unsigned long)+0x94>
c0007c56:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c5a:	31 c0                	xor    eax,eax
c0007c5c:	eb b6                	jmp    c0007c14 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c5e:	85 f6                	test   esi,esi
c0007c60:	74 17                	je     c0007c79 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c62:	8d 95 ec 5e 02 c0    	lea    edx,[ebp-0x3ffda114]
c0007c68:	8d 84 05 ed 5e 02 c0 	lea    eax,[ebp+eax*1-0x3ffda113]
c0007c6f:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c72:	83 c2 01             	add    edx,0x1
c0007c75:	39 d0                	cmp    eax,edx
c0007c77:	75 f6                	jne    c0007c6f <Phys::allocateDMA(unsigned long)+0xa5>
c0007c79:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007c7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c82:	01 f8                	add    eax,edi
c0007c84:	85 d2                	test   edx,edx
c0007c86:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007c8b:	74 17                	je     c0007ca4 <Phys::allocateDMA(unsigned long)+0xda>
c0007c8d:	83 ec 0c             	sub    esp,0xc
c0007c90:	68 8c ff 01 c0       	push   0xc001ff8c
c0007c95:	e8 41 8f 00 00       	call   c0010bdb <KePanic(char const*)>
c0007c9a:	83 c4 10             	add    esp,0x10
c0007c9d:	89 f0                	mov    eax,esi
c0007c9f:	e9 5d ff ff ff       	jmp    c0007c01 <Phys::allocateDMA(unsigned long)+0x37>
c0007ca4:	c1 e5 0c             	shl    ebp,0xc
c0007ca7:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cad:	e9 7c ff ff ff       	jmp    c0007c2e <Phys::allocateDMA(unsigned long)+0x64>

c0007cb2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cb6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cbc:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cc1:	c1 ea 0c             	shr    edx,0xc
c0007cc4:	29 d0                	sub    eax,edx
c0007cc6:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007ccb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ccf:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007cd4:	c1 e8 0c             	shr    eax,0xc
c0007cd7:	85 d2                	test   edx,edx
c0007cd9:	74 11                	je     c0007cec <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007cdb:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007ce0:	01 c2                	add    edx,eax
c0007ce2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007ce5:	83 c0 01             	add    eax,0x1
c0007ce8:	39 d0                	cmp    eax,edx
c0007cea:	75 f6                	jne    c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cec:	c3                   	ret    

c0007ced <Phys::setPageState(unsigned long, bool)>:
c0007ced:	57                   	push   edi
c0007cee:	56                   	push   esi
c0007cef:	8b 35 c0 26 02 c0    	mov    esi,DWORD PTR ds:0xc00226c0
c0007cf5:	53                   	push   ebx
c0007cf6:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007cfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007cff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d03:	0f b6 c0             	movzx  eax,al
c0007d06:	89 ca                	mov    edx,ecx
c0007d08:	83 e1 07             	and    ecx,0x7
c0007d0b:	c1 ea 03             	shr    edx,0x3
c0007d0e:	d3 c3                	rol    ebx,cl
c0007d10:	01 d6                	add    esi,edx
c0007d12:	d3 e0                	shl    eax,cl
c0007d14:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d17:	21 fb                	and    ebx,edi
c0007d19:	88 1e                	mov    BYTE PTR [esi],bl
c0007d1b:	8b 1d c0 26 02 c0    	mov    ebx,DWORD PTR ds:0xc00226c0
c0007d21:	01 da                	add    edx,ebx
c0007d23:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d25:	09 c8                	or     eax,ecx
c0007d27:	88 02                	mov    BYTE PTR [edx],al
c0007d29:	5b                   	pop    ebx
c0007d2a:	5e                   	pop    esi
c0007d2b:	5f                   	pop    edi
c0007d2c:	c3                   	ret    

c0007d2d <Phys::getPageState(unsigned long)>:
c0007d2d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d31:	8b 15 c0 26 02 c0    	mov    edx,DWORD PTR ds:0xc00226c0
c0007d37:	89 c8                	mov    eax,ecx
c0007d39:	83 e1 07             	and    ecx,0x7
c0007d3c:	c1 e8 03             	shr    eax,0x3
c0007d3f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d43:	d3 f8                	sar    eax,cl
c0007d45:	83 e0 01             	and    eax,0x1
c0007d48:	c3                   	ret    

c0007d49 <Phys::freePage(unsigned long)>:
c0007d49:	53                   	push   ebx
c0007d4a:	83 ec 08             	sub    esp,0x8
c0007d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d51:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d57:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d5d:	76 41                	jbe    c0007da0 <Phys::freePage(unsigned long)+0x57>
c0007d5f:	c1 e8 0c             	shr    eax,0xc
c0007d62:	50                   	push   eax
c0007d63:	89 c3                	mov    ebx,eax
c0007d65:	e8 c3 ff ff ff       	call   c0007d2d <Phys::getPageState(unsigned long)>
c0007d6a:	5a                   	pop    edx
c0007d6b:	84 c0                	test   al,al
c0007d6d:	74 20                	je     c0007d8f <Phys::freePage(unsigned long)+0x46>
c0007d6f:	83 ec 08             	sub    esp,0x8
c0007d72:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007d77:	6a 00                	push   0x0
c0007d79:	83 e8 01             	sub    eax,0x1
c0007d7c:	53                   	push   ebx
c0007d7d:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007d82:	e8 66 ff ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0007d87:	83 c4 10             	add    esp,0x10
c0007d8a:	83 c4 08             	add    esp,0x8
c0007d8d:	5b                   	pop    ebx
c0007d8e:	c3                   	ret    
c0007d8f:	c7 44 24 10 31 00 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020031
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	e9 3b 8e 00 00       	jmp    c0010bdb <KePanic(char const*)>
c0007da0:	68 00 10 00 00       	push   0x1000
c0007da5:	50                   	push   eax
c0007da6:	e8 07 ff ff ff       	call   c0007cb2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007dab:	59                   	pop    ecx
c0007dac:	5b                   	pop    ebx
c0007dad:	83 c4 08             	add    esp,0x8
c0007db0:	5b                   	pop    ebx
c0007db1:	c3                   	ret    

c0007db2 <Phys::allocatePage()>:
c0007db2:	56                   	push   esi
c0007db3:	53                   	push   ebx
c0007db4:	83 ec 14             	sub    esp,0x14
c0007db7:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007dbd:	89 f3                	mov    ebx,esi
c0007dbf:	eb 0a                	jmp    c0007dcb <Phys::allocatePage()+0x19>
c0007dc1:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007dc7:	39 de                	cmp    esi,ebx
c0007dc9:	74 26                	je     c0007df1 <Phys::allocatePage()+0x3f>
c0007dcb:	53                   	push   ebx
c0007dcc:	e8 5c ff ff ff       	call   c0007d2d <Phys::getPageState(unsigned long)>
c0007dd1:	5a                   	pop    edx
c0007dd2:	84 c0                	test   al,al
c0007dd4:	74 67                	je     c0007e3d <Phys::allocatePage()+0x8b>
c0007dd6:	83 c3 01             	add    ebx,0x1
c0007dd9:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ddf:	75 e0                	jne    c0007dc1 <Phys::allocatePage()+0xf>
c0007de1:	31 db                	xor    ebx,ebx
c0007de3:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007ded:	39 de                	cmp    esi,ebx
c0007def:	75 da                	jne    c0007dcb <Phys::allocatePage()+0x19>
c0007df1:	83 ec 0c             	sub    esp,0xc
c0007df4:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007df9:	83 f0 01             	xor    eax,0x1
c0007dfc:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e09:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e0f:	50                   	push   eax
c0007e10:	e8 e7 27 00 00       	call   c000a5fc <VAS::scanForEviction()>
c0007e15:	83 c4 10             	add    esp,0x10
c0007e18:	85 c0                	test   eax,eax
c0007e1a:	75 48                	jne    c0007e64 <Phys::allocatePage()+0xb2>
c0007e1c:	83 ec 0c             	sub    esp,0xc
c0007e1f:	68 b4 ff 01 c0       	push   0xc001ffb4
c0007e24:	e8 b2 8d 00 00       	call   c0010bdb <KePanic(char const*)>
c0007e29:	83 c4 10             	add    esp,0x10
c0007e2c:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e32:	53                   	push   ebx
c0007e33:	e8 f5 fe ff ff       	call   c0007d2d <Phys::getPageState(unsigned long)>
c0007e38:	5a                   	pop    edx
c0007e39:	84 c0                	test   al,al
c0007e3b:	75 99                	jne    c0007dd6 <Phys::allocatePage()+0x24>
c0007e3d:	6a 01                	push   0x1
c0007e3f:	53                   	push   ebx
c0007e40:	e8 a8 fe ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0007e45:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e4b:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e50:	83 c2 01             	add    edx,0x1
c0007e53:	59                   	pop    ecx
c0007e54:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e5a:	c1 e0 0c             	shl    eax,0xc
c0007e5d:	5b                   	pop    ebx
c0007e5e:	83 c4 14             	add    esp,0x14
c0007e61:	5b                   	pop    ebx
c0007e62:	5e                   	pop    esi
c0007e63:	c3                   	ret    
c0007e64:	83 ec 08             	sub    esp,0x8
c0007e67:	89 c2                	mov    edx,eax
c0007e69:	6a 01                	push   0x1
c0007e6b:	c1 ea 0c             	shr    edx,0xc
c0007e6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e72:	52                   	push   edx
c0007e73:	e8 75 fe ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0007e78:	83 c4 10             	add    esp,0x10
c0007e7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e7f:	eb dd                	jmp    c0007e5e <Phys::allocatePage()+0xac>

c0007e81 <Phys::allocateContiguousPages(int)>:
c0007e81:	57                   	push   edi
c0007e82:	56                   	push   esi
c0007e83:	53                   	push   ebx
c0007e84:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e88:	fa                   	cli    
c0007e89:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0007e8e:	31 db                	xor    ebx,ebx
c0007e90:	83 c0 01             	add    eax,0x1
c0007e93:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0007e98:	85 db                	test   ebx,ebx
c0007e9a:	75 11                	jne    c0007ead <Phys::allocateContiguousPages(int)+0x2c>
c0007e9c:	e8 11 ff ff ff       	call   c0007db2 <Phys::allocatePage()>
c0007ea1:	83 fe 01             	cmp    esi,0x1
c0007ea4:	89 c7                	mov    edi,eax
c0007ea6:	74 21                	je     c0007ec9 <Phys::allocateContiguousPages(int)+0x48>
c0007ea8:	bb 01 00 00 00       	mov    ebx,0x1
c0007ead:	e8 00 ff ff ff       	call   c0007db2 <Phys::allocatePage()>
c0007eb2:	89 da                	mov    edx,ebx
c0007eb4:	c1 e2 0c             	shl    edx,0xc
c0007eb7:	01 fa                	add    edx,edi
c0007eb9:	39 c2                	cmp    edx,eax
c0007ebb:	74 22                	je     c0007edf <Phys::allocateContiguousPages(int)+0x5e>
c0007ebd:	bb 01 00 00 00       	mov    ebx,0x1
c0007ec2:	89 c7                	mov    edi,eax
c0007ec4:	83 fe 01             	cmp    esi,0x1
c0007ec7:	75 e4                	jne    c0007ead <Phys::allocateContiguousPages(int)+0x2c>
c0007ec9:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0007ece:	83 e8 01             	sub    eax,0x1
c0007ed1:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0007ed6:	75 01                	jne    c0007ed9 <Phys::allocateContiguousPages(int)+0x58>
c0007ed8:	fb                   	sti    
c0007ed9:	89 f8                	mov    eax,edi
c0007edb:	5b                   	pop    ebx
c0007edc:	5e                   	pop    esi
c0007edd:	5f                   	pop    edi
c0007ede:	c3                   	ret    
c0007edf:	83 c3 01             	add    ebx,0x1
c0007ee2:	39 f3                	cmp    ebx,esi
c0007ee4:	75 b2                	jne    c0007e98 <Phys::allocateContiguousPages(int)+0x17>
c0007ee6:	eb e1                	jmp    c0007ec9 <Phys::allocateContiguousPages(int)+0x48>

c0007ee8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ee8:	56                   	push   esi
c0007ee9:	53                   	push   ebx
c0007eea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007eee:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007ef4:	73 06                	jae    c0007efc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007ef6:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007efc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f00:	c1 eb 0c             	shr    ebx,0xc
c0007f03:	c1 e8 0c             	shr    eax,0xc
c0007f06:	39 d8                	cmp    eax,ebx
c0007f08:	73 13                	jae    c0007f1d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f0a:	6a 00                	push   0x0
c0007f0c:	8d 70 01             	lea    esi,[eax+0x1]
c0007f0f:	50                   	push   eax
c0007f10:	e8 d8 fd ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0007f15:	5a                   	pop    edx
c0007f16:	89 f0                	mov    eax,esi
c0007f18:	59                   	pop    ecx
c0007f19:	39 f3                	cmp    ebx,esi
c0007f1b:	75 ed                	jne    c0007f0a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f1d:	5b                   	pop    ebx
c0007f1e:	5e                   	pop    esi
c0007f1f:	c3                   	ret    

c0007f20 <Phys::physicalMemorySetup(unsigned int)>:
c0007f20:	55                   	push   ebp
c0007f21:	57                   	push   edi
c0007f22:	56                   	push   esi
c0007f23:	53                   	push   ebx
c0007f24:	83 ec 40             	sub    esp,0x40
c0007f27:	6a 10                	push   0x10
c0007f29:	6a 00                	push   0x0
c0007f2b:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f30:	e8 bb 85 ff ff       	call   c00004f0 <memset>
c0007f35:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f39:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f3e:	05 00 10 00 00       	add    eax,0x1000
c0007f43:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f47:	5b                   	pop    ebx
c0007f48:	31 db                	xor    ebx,ebx
c0007f4a:	5e                   	pop    esi
c0007f4b:	50                   	push   eax
c0007f4c:	68 47 00 02 c0       	push   0xc0020047
c0007f51:	e8 21 2a 00 00       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0007f56:	83 c4 10             	add    esp,0x10
c0007f59:	83 ec 08             	sub    esp,0x8
c0007f5c:	6a 01                	push   0x1
c0007f5e:	53                   	push   ebx
c0007f5f:	83 c3 01             	add    ebx,0x1
c0007f62:	e8 86 fd ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0007f67:	83 c4 10             	add    esp,0x10
c0007f6a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f70:	75 e7                	jne    c0007f59 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f72:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f79:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f80:	c1 e0 08             	shl    eax,0x8
c0007f83:	09 c2                	or     edx,eax
c0007f85:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f89:	0f 84 98 01 00 00    	je     c0008127 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007f93:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007f9b:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fa0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fa4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fac:	eb 1c                	jmp    c0007fca <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fb2:	83 c3 18             	add    ebx,0x18
c0007fb5:	83 c6 01             	add    esi,0x1
c0007fb8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fc0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fc4:	0f 84 6d 01 00 00    	je     c0008137 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fca:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fcd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fd0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fdb:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fdd:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fe0:	01 f0                	add    eax,esi
c0007fe2:	55                   	push   ebp
c0007fe3:	11 fa                	adc    edx,edi
c0007fe5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007fe9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007fed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ff1:	51                   	push   ecx
c0007ff2:	56                   	push   esi
c0007ff3:	68 e4 ff 01 c0       	push   0xc001ffe4
c0007ff8:	e8 7a 29 00 00       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0007ffd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008001:	83 c4 10             	add    esp,0x10
c0008004:	09 f8                	or     eax,edi
c0008006:	0f 85 2b 01 00 00    	jne    c0008137 <Phys::physicalMemorySetup(unsigned int)+0x217>
c000800c:	83 fd 01             	cmp    ebp,0x1
c000800f:	75 9d                	jne    c0007fae <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008011:	ba 00 00 08 00       	mov    edx,0x80000
c0008016:	89 c1                	mov    ecx,eax
c0008018:	39 f2                	cmp    edx,esi
c000801a:	19 f9                	sbb    ecx,edi
c000801c:	0f 82 ab 00 00 00    	jb     c00080cd <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0008022:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008026:	89 c1                	mov    ecx,eax
c0008028:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000802c:	0f 83 9b 00 00 00    	jae    c00080cd <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0008032:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008037:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000803b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000803f:	39 fa                	cmp    edx,edi
c0008041:	19 e8                	sbb    eax,ebp
c0008043:	0f 82 b0 01 00 00    	jb     c00081f9 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008049:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000804d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008051:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008057:	ba ff 1f 00 00       	mov    edx,0x1fff
c000805c:	83 d5 ff             	adc    ebp,0xffffffff
c000805f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008063:	31 c0                	xor    eax,eax
c0008065:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008069:	39 fa                	cmp    edx,edi
c000806b:	89 c1                	mov    ecx,eax
c000806d:	19 e9                	sbb    ecx,ebp
c000806f:	0f 83 39 ff ff ff    	jae    c0007fae <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008075:	be 00 00 08 00       	mov    esi,0x80000
c000807a:	83 ec 04             	sub    esp,0x4
c000807d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008081:	57                   	push   edi
c0008082:	56                   	push   esi
c0008083:	68 08 00 02 c0       	push   0xc0020008
c0008088:	e8 ea 28 00 00       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000808d:	5d                   	pop    ebp
c000808e:	58                   	pop    eax
c000808f:	57                   	push   edi
c0008090:	56                   	push   esi
c0008091:	e8 52 fe ff ff       	call   c0007ee8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008096:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000809a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000809e:	83 c4 0c             	add    esp,0xc
c00080a1:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080a5:	8b 15 e8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee8
c00080ab:	01 d0                	add    eax,edx
c00080ad:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080b4:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00080b9:	52                   	push   edx
c00080ba:	50                   	push   eax
c00080bb:	68 6d 00 02 c0       	push   0xc002006d
c00080c0:	e8 b2 28 00 00       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c00080c5:	83 c4 10             	add    esp,0x10
c00080c8:	e9 e1 fe ff ff       	jmp    c0007fae <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080cd:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080d9:	39 ea                	cmp    edx,ebp
c00080db:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080df:	0f 82 c9 fe ff ff    	jb     c0007fae <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080e5:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080ea:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080ee:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080f2:	0f 83 b6 fe ff ff    	jae    c0007fae <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f8:	39 ee                	cmp    esi,ebp
c00080fa:	89 f8                	mov    eax,edi
c00080fc:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0008100:	0f 83 74 ff ff ff    	jae    c000807a <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008106:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000810a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000810e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0008112:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008116:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000811a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000811e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008122:	e9 53 ff ff ff       	jmp    c000807a <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008127:	83 ec 0c             	sub    esp,0xc
c000812a:	68 5f 00 02 c0       	push   0xc002005f
c000812f:	e8 a7 8a 00 00       	call   c0010bdb <KePanic(char const*)>
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 ec 08             	sub    esp,0x8
c000813a:	bb 60 00 00 00       	mov    ebx,0x60
c000813f:	6a 00                	push   0x0
c0008141:	6a 06                	push   0x6
c0008143:	e8 a5 fb ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0008148:	58                   	pop    eax
c0008149:	5a                   	pop    edx
c000814a:	6a 00                	push   0x0
c000814c:	6a 07                	push   0x7
c000814e:	e8 9a fb ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0008153:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008159:	83 c4 10             	add    esp,0x10
c000815c:	83 c1 02             	add    ecx,0x2
c000815f:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008165:	83 ec 08             	sub    esp,0x8
c0008168:	6a 00                	push   0x0
c000816a:	53                   	push   ebx
c000816b:	83 c3 01             	add    ebx,0x1
c000816e:	e8 7a fb ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c0008173:	83 c4 10             	add    esp,0x10
c0008176:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000817c:	75 e7                	jne    c0008165 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000817e:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008183:	bb 40 01 00 00       	mov    ebx,0x140
c0008188:	83 c0 20             	add    eax,0x20
c000818b:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c0008190:	eb 26                	jmp    c00081b8 <Phys::physicalMemorySetup(unsigned int)+0x298>
c0008192:	83 ec 08             	sub    esp,0x8
c0008195:	6a 00                	push   0x0
c0008197:	53                   	push   ebx
c0008198:	83 c3 01             	add    ebx,0x1
c000819b:	e8 4d fb ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c00081a0:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081a5:	83 c4 10             	add    esp,0x10
c00081a8:	83 c0 01             	add    eax,0x1
c00081ab:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081b1:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081b6:	74 07                	je     c00081bf <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081b8:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081bd:	7e d3                	jle    c0008192 <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081bf:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081c4:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081c9:	7f 26                	jg     c00081f1 <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081cb:	83 ec 08             	sub    esp,0x8
c00081ce:	6a 00                	push   0x0
c00081d0:	53                   	push   ebx
c00081d1:	83 c3 01             	add    ebx,0x1
c00081d4:	e8 14 fb ff ff       	call   c0007ced <Phys::setPageState(unsigned long, bool)>
c00081d9:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081de:	83 c4 10             	add    esp,0x10
c00081e1:	83 c0 01             	add    eax,0x1
c00081e4:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081ea:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081ef:	75 d3                	jne    c00081c4 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081f1:	83 c4 3c             	add    esp,0x3c
c00081f4:	5b                   	pop    ebx
c00081f5:	5e                   	pop    esi
c00081f6:	5f                   	pop    edi
c00081f7:	5d                   	pop    ebp
c00081f8:	c3                   	ret    
c00081f9:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0008201:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008209:	e9 3b fe ff ff       	jmp    c0008049 <Phys::physicalMemorySetup(unsigned int)+0x129>

c000820e <Pipe::isAtty()>:
c000820e:	31 c0                	xor    eax,eax
c0008210:	c3                   	ret    
c0008211:	90                   	nop

c0008212 <Pipe::~Pipe()>:
c0008212:	83 ec 0c             	sub    esp,0xc
c0008215:	ba cc 00 02 c0       	mov    edx,0xc00200cc
c000821a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000821e:	89 10                	mov    DWORD PTR [eax],edx
c0008220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008224:	83 ec 0c             	sub    esp,0xc
c0008227:	50                   	push   eax
c0008228:	e8 6b 11 00 00       	call   c0009398 <UnixFile::~UnixFile()>
c000822d:	83 c4 10             	add    esp,0x10
c0008230:	90                   	nop
c0008231:	83 c4 0c             	add    esp,0xc
c0008234:	c3                   	ret    
c0008235:	90                   	nop

c0008236 <Pipe::~Pipe()>:
c0008236:	83 ec 0c             	sub    esp,0xc
c0008239:	83 ec 0c             	sub    esp,0xc
c000823c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008240:	e8 cd ff ff ff       	call   c0008212 <Pipe::~Pipe()>
c0008245:	83 c4 10             	add    esp,0x10
c0008248:	83 ec 08             	sub    esp,0x8
c000824b:	6a 20                	push   0x20
c000824d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008251:	e8 f4 25 00 00       	call   c000a84a <operator delete(void*, unsigned long)>
c0008256:	83 c4 10             	add    esp,0x10
c0008259:	83 c4 0c             	add    esp,0xc
c000825c:	c3                   	ret    
c000825d:	90                   	nop

c000825e <Pipe::write(unsigned long long, void*, int*)>:
c000825e:	55                   	push   ebp
c000825f:	57                   	push   edi
c0008260:	56                   	push   esi
c0008261:	53                   	push   ebx
c0008262:	83 ec 1c             	sub    esp,0x1c
c0008265:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008269:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000826d:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008270:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008274:	89 04 24             	mov    DWORD PTR [esp],eax
c0008277:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000827b:	89 d8                	mov    eax,ebx
c000827d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0008280:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008284:	89 d6                	mov    esi,edx
c0008286:	89 d7                	mov    edi,edx
c0008288:	c1 ff 1f             	sar    edi,0x1f
c000828b:	03 34 24             	add    esi,DWORD PTR [esp]
c000828e:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0008292:	c1 f8 1f             	sar    eax,0x1f
c0008295:	39 f3                	cmp    ebx,esi
c0008297:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000829b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000829f:	19 f8                	sbb    eax,edi
c00082a1:	b8 01 00 00 00       	mov    eax,0x1
c00082a6:	72 6e                	jb     c0008316 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082a8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082ab:	01 d0                	add    eax,edx
c00082ad:	99                   	cdq    
c00082ae:	f7 fb                	idiv   ebx
c00082b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082b4:	29 d3                	sub    ebx,edx
c00082b6:	89 d7                	mov    edi,edx
c00082b8:	89 de                	mov    esi,ebx
c00082ba:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082bd:	c1 fb 1f             	sar    ebx,0x1f
c00082c0:	39 f2                	cmp    edx,esi
c00082c2:	19 d8                	sbb    eax,ebx
c00082c4:	b8 00 00 00 00       	mov    eax,0x0
c00082c9:	72 04                	jb     c00082cf <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082cb:	89 d0                	mov    eax,edx
c00082cd:	29 f0                	sub    eax,esi
c00082cf:	89 d3                	mov    ebx,edx
c00082d1:	29 c3                	sub    ebx,eax
c00082d3:	74 0b                	je     c00082e0 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082d5:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082d8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082dc:	89 d9                	mov    ecx,ebx
c00082de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082e0:	85 c0                	test   eax,eax
c00082e2:	74 0d                	je     c00082f1 <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082e4:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082e8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082eb:	89 de                	mov    esi,ebx
c00082ed:	89 c1                	mov    ecx,eax
c00082ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082f1:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00082f4:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00082f9:	75 10                	jne    c000830b <Pipe::write(unsigned long long, void*, int*)+0xad>
c00082fb:	83 ec 0c             	sub    esp,0xc
c00082fe:	68 89 00 02 c0       	push   0xc0020089
c0008303:	e8 d3 88 00 00       	call   c0010bdb <KePanic(char const*)>
c0008308:	83 c4 10             	add    esp,0x10
c000830b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000830f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008312:	89 08                	mov    DWORD PTR [eax],ecx
c0008314:	31 c0                	xor    eax,eax
c0008316:	83 c4 1c             	add    esp,0x1c
c0008319:	5b                   	pop    ebx
c000831a:	5e                   	pop    esi
c000831b:	5f                   	pop    edi
c000831c:	5d                   	pop    ebp
c000831d:	c3                   	ret    

c000831e <Pipe::read(unsigned long long, void*, int*)>:
c000831e:	55                   	push   ebp
c000831f:	57                   	push   edi
c0008320:	56                   	push   esi
c0008321:	53                   	push   ebx
c0008322:	83 ec 1c             	sub    esp,0x1c
c0008325:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008329:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000832d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008331:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008334:	89 c8                	mov    eax,ecx
c0008336:	99                   	cdq    
c0008337:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000833b:	74 24                	je     c0008361 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000833d:	39 f9                	cmp    ecx,edi
c000833f:	89 d1                	mov    ecx,edx
c0008341:	19 f1                	sbb    ecx,esi
c0008343:	73 1c                	jae    c0008361 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008345:	fa                   	cli    
c0008346:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c000834c:	e8 7b d0 00 00       	call   c00153cc <schedule()>
c0008351:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0008356:	48                   	dec    eax
c0008357:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000835c:	75 d3                	jne    c0008331 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000835e:	fb                   	sti    
c000835f:	eb d0                	jmp    c0008331 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008361:	39 f8                	cmp    eax,edi
c0008363:	89 d1                	mov    ecx,edx
c0008365:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008368:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000836c:	19 f1                	sbb    ecx,esi
c000836e:	73 07                	jae    c0008377 <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008370:	89 04 24             	mov    DWORD PTR [esp],eax
c0008373:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008377:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000837a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000837d:	29 f7                	sub    edi,esi
c000837f:	89 f8                	mov    eax,edi
c0008381:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008385:	99                   	cdq    
c0008386:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008389:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000838d:	19 d0                	sbb    eax,edx
c000838f:	73 07                	jae    c0008398 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008391:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008394:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008398:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000839b:	89 ea                	mov    edx,ebp
c000839d:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083a1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083a6:	74 0d                	je     c00083b5 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083a8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083ab:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083b5:	85 d2                	test   edx,edx
c00083b7:	74 11                	je     c00083ca <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083bd:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083c0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083c4:	89 d1                	mov    ecx,edx
c00083c6:	89 c7                	mov    edi,eax
c00083c8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ca:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083cd:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083d0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083d3:	99                   	cdq    
c00083d4:	89 f7                	mov    edi,esi
c00083d6:	03 04 24             	add    eax,DWORD PTR [esp]
c00083d9:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083dd:	c1 ff 1f             	sar    edi,0x1f
c00083e0:	57                   	push   edi
c00083e1:	56                   	push   esi
c00083e2:	52                   	push   edx
c00083e3:	50                   	push   eax
c00083e4:	e8 e7 66 01 00       	call   c001ead0 <__umoddi3>
c00083e9:	83 c4 10             	add    esp,0x10
c00083ec:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083ef:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00083f4:	75 10                	jne    c0008406 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00083f6:	83 ec 0c             	sub    esp,0xc
c00083f9:	68 a6 00 02 c0       	push   0xc00200a6
c00083fe:	e8 d8 87 00 00       	call   c0010bdb <KePanic(char const*)>
c0008403:	83 c4 10             	add    esp,0x10
c0008406:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000840a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000840d:	89 10                	mov    DWORD PTR [eax],edx
c000840f:	83 c4 1c             	add    esp,0x1c
c0008412:	31 c0                	xor    eax,eax
c0008414:	5b                   	pop    ebx
c0008415:	5e                   	pop    esi
c0008416:	5f                   	pop    edi
c0008417:	5d                   	pop    ebp
c0008418:	c3                   	ret    
c0008419:	90                   	nop

c000841a <Pipe::Pipe(int)>:
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008421:	83 ec 08             	sub    esp,0x8
c0008424:	6a 00                	push   0x0
c0008426:	50                   	push   eax
c0008427:	e8 86 0d 00 00       	call   c00091b2 <UnixFile::UnixFile(int)>
c000842c:	83 c4 10             	add    esp,0x10
c000842f:	ba cc 00 02 c0       	mov    edx,0xc00200cc
c0008434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008438:	89 10                	mov    DWORD PTR [eax],edx
c000843a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000843e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008442:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008449:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008454:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000845b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000845f:	83 ec 0c             	sub    esp,0xc
c0008462:	50                   	push   eax
c0008463:	e8 46 f6 ff ff       	call   c0007aae <malloc>
c0008468:	83 c4 10             	add    esp,0x10
c000846b:	89 c2                	mov    edx,eax
c000846d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008471:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000847c:	90                   	nop
c000847d:	83 c4 0c             	add    esp,0xc
c0008480:	c3                   	ret    
c0008481:	90                   	nop

c0008482 <VgaText::isAtty()>:
c0008482:	b0 01                	mov    al,0x1
c0008484:	c3                   	ret    
c0008485:	90                   	nop

c0008486 <VgaText::~VgaText()>:
c0008486:	83 ec 0c             	sub    esp,0xc
c0008489:	ba 14 01 02 c0       	mov    edx,0xc0020114
c000848e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008492:	89 10                	mov    DWORD PTR [eax],edx
c0008494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008498:	83 ec 0c             	sub    esp,0xc
c000849b:	50                   	push   eax
c000849c:	e8 f7 0e 00 00       	call   c0009398 <UnixFile::~UnixFile()>
c00084a1:	83 c4 10             	add    esp,0x10
c00084a4:	90                   	nop
c00084a5:	83 c4 0c             	add    esp,0xc
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 cd ff ff ff       	call   c0008486 <VgaText::~VgaText()>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	83 ec 08             	sub    esp,0x8
c00084bf:	68 84 01 00 00       	push   0x184
c00084c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c8:	e8 7d 23 00 00       	call   c000a84a <operator delete(void*, unsigned long)>
c00084cd:	83 c4 10             	add    esp,0x10
c00084d0:	83 c4 0c             	add    esp,0xc
c00084d3:	c3                   	ret    

c00084d4 <VgaText::read(unsigned long long, void*, int*)>:
c00084d4:	83 ec 10             	sub    esp,0x10
c00084d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084e3:	e8 74 4a 00 00       	call   c000cf5c <readKeyboard(VgaText*, char*, unsigned long)>
c00084e8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084ec:	89 02                	mov    DWORD PTR [edx],eax
c00084ee:	31 c0                	xor    eax,eax
c00084f0:	83 c4 1c             	add    esp,0x1c
c00084f3:	c3                   	ret    

c00084f4 <setTerminalScrollLock(bool)>:
c00084f4:	c3                   	ret    

c00084f5 <doTerminalCycle()>:
c00084f5:	c3                   	ret    

c00084f6 <addToTerminalCycle(VgaText*)>:
c00084f6:	c3                   	ret    

c00084f7 <scrollTerminalScrollLock(int)>:
c00084f7:	c3                   	ret    

c00084f8 <VgaText::updateTitle()>:
c00084f8:	c3                   	ret    
c00084f9:	90                   	nop

c00084fa <VgaText::load()>:
c00084fa:	c3                   	ret    
c00084fb:	90                   	nop

c00084fc <VgaText::updateCursor()>:
c00084fc:	83 ec 14             	sub    esp,0x14
c00084ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008503:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008506:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008509:	e8 76 fc 00 00       	call   c0018184 <HalConsoleCursorUpdate(int, int)>
c000850e:	83 c4 1c             	add    esp,0x1c
c0008511:	c3                   	ret    

c0008512 <VgaText::doANSI_SGR(int)>:
c0008512:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008516:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000851a:	85 d2                	test   edx,edx
c000851c:	75 0b                	jne    c0008529 <VgaText::doANSI_SGR(int)+0x17>
c000851e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008521:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008524:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008527:	eb 59                	jmp    c0008582 <VgaText::doANSI_SGR(int)+0x70>
c0008529:	83 fa 07             	cmp    edx,0x7
c000852c:	75 0b                	jne    c0008539 <VgaText::doANSI_SGR(int)+0x27>
c000852e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008531:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008534:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008537:	eb 49                	jmp    c0008582 <VgaText::doANSI_SGR(int)+0x70>
c0008539:	83 fa 1b             	cmp    edx,0x1b
c000853c:	74 e0                	je     c000851e <VgaText::doANSI_SGR(int)+0xc>
c000853e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008541:	83 f9 07             	cmp    ecx,0x7
c0008544:	77 09                	ja     c000854f <VgaText::doANSI_SGR(int)+0x3d>
c0008546:	8b 14 8d 00 27 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd900]
c000854d:	eb 20                	jmp    c000856f <VgaText::doANSI_SGR(int)+0x5d>
c000854f:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008552:	83 f9 07             	cmp    ecx,0x7
c0008555:	77 09                	ja     c0008560 <VgaText::doANSI_SGR(int)+0x4e>
c0008557:	8b 14 8d 00 27 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd900]
c000855e:	eb 22                	jmp    c0008582 <VgaText::doANSI_SGR(int)+0x70>
c0008560:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008563:	83 f9 07             	cmp    ecx,0x7
c0008566:	77 0b                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x61>
c0008568:	8b 14 95 b8 25 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdda48]
c000856f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008572:	c3                   	ret    
c0008573:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 0a                	ja     c0008585 <VgaText::doANSI_SGR(int)+0x73>
c000857b:	8b 14 95 90 25 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdda70]
c0008582:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008585:	c3                   	ret    

c0008586 <VgaText::setDefaultBgColour(VgaColour)>:
c0008586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000858a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000858e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008591:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008594:	c3                   	ret    
c0008595:	90                   	nop

c0008596 <VgaText::setDefaultFgColour(VgaColour)>:
c0008596:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000859a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085a1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085a4:	c3                   	ret    
c00085a5:	90                   	nop

c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085a6:	53                   	push   ebx
c00085a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085af:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085b3:	51                   	push   ecx
c00085b4:	e8 cd ff ff ff       	call   c0008586 <VgaText::setDefaultBgColour(VgaColour)>
c00085b9:	58                   	pop    eax
c00085ba:	5a                   	pop    edx
c00085bb:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085bf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085c3:	5b                   	pop    ebx
c00085c4:	eb d0                	jmp    c0008596 <VgaText::setDefaultFgColour(VgaColour)>

c00085c6 <VgaText::setTitleTextColour(VgaColour)>:
c00085c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ce:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085d1:	c3                   	ret    

c00085d2 <VgaText::setTitleColour(VgaColour)>:
c00085d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085da:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085dd:	c3                   	ret    

c00085de <VgaText::setTitle(char*)>:
c00085de:	c3                   	ret    
c00085df:	90                   	nop

c00085e0 <VgaText::combineColours(unsigned char, unsigned char)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085e9:	83 e0 0f             	and    eax,0xf
c00085ec:	c1 e2 04             	shl    edx,0x4
c00085ef:	09 d0                	or     eax,edx
c00085f1:	c3                   	ret    

c00085f2 <VgaText::scrollScreen()>:
c00085f2:	55                   	push   ebp
c00085f3:	57                   	push   edi
c00085f4:	56                   	push   esi
c00085f5:	be 01 00 00 00       	mov    esi,0x1
c00085fa:	53                   	push   ebx
c00085fb:	83 ec 0c             	sub    esp,0xc
c00085fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008602:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008605:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000860b:	31 ff                	xor    edi,edi
c000860d:	01 e9                	add    ecx,ebp
c000860f:	8a 01                	mov    al,BYTE PTR [ecx]
c0008611:	83 fe 18             	cmp    esi,0x18
c0008614:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000861a:	75 20                	jne    c000863c <VgaText::scrollScreen()+0x4a>
c000861c:	f7 c7 01 00 00 00    	test   edi,0x1
c0008622:	74 15                	je     c0008639 <VgaText::scrollScreen()+0x47>
c0008624:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008628:	50                   	push   eax
c0008629:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000862d:	50                   	push   eax
c000862e:	e8 ad ff ff ff       	call   c00085e0 <VgaText::combineColours(unsigned char, unsigned char)>
c0008633:	5a                   	pop    edx
c0008634:	5a                   	pop    edx
c0008635:	88 01                	mov    BYTE PTR [ecx],al
c0008637:	eb 03                	jmp    c000863c <VgaText::scrollScreen()+0x4a>
c0008639:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000863c:	47                   	inc    edi
c000863d:	41                   	inc    ecx
c000863e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008644:	75 c9                	jne    c000860f <VgaText::scrollScreen()+0x1d>
c0008646:	46                   	inc    esi
c0008647:	83 fe 19             	cmp    esi,0x19
c000864a:	75 b9                	jne    c0008605 <VgaText::scrollScreen()+0x13>
c000864c:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008652:	75 1f                	jne    c0008673 <VgaText::scrollScreen()+0x81>
c0008654:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008658:	74 05                	je     c000865f <VgaText::scrollScreen()+0x6d>
c000865a:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000865d:	eb 14                	jmp    c0008673 <VgaText::scrollScreen()+0x81>
c000865f:	50                   	push   eax
c0008660:	50                   	push   eax
c0008661:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008665:	50                   	push   eax
c0008666:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000866a:	50                   	push   eax
c000866b:	e8 a8 f9 00 00       	call   c0018018 <HalConsoleScroll(int, int)>
c0008670:	83 c4 10             	add    esp,0x10
c0008673:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008677:	83 c4 0c             	add    esp,0xc
c000867a:	5b                   	pop    ebx
c000867b:	5e                   	pop    esi
c000867c:	5f                   	pop    edi
c000867d:	5d                   	pop    ebp
c000867e:	e9 79 fe ff ff       	jmp    c00084fc <VgaText::updateCursor()>
c0008683:	90                   	nop

c0008684 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008684:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008689:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000868e:	c1 e0 08             	shl    eax,0x8
c0008691:	09 d0                	or     eax,edx
c0008693:	c3                   	ret    

c0008694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008694:	55                   	push   ebp
c0008695:	57                   	push   edi
c0008696:	56                   	push   esi
c0008697:	53                   	push   ebx
c0008698:	83 ec 1c             	sub    esp,0x1c
c000869b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000869f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086a3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086ab:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086af:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086b3:	0f b6 c3             	movzx  eax,bl
c00086b6:	50                   	push   eax
c00086b7:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086bc:	50                   	push   eax
c00086bd:	e8 1e ff ff ff       	call   c00085e0 <VgaText::combineColours(unsigned char, unsigned char)>
c00086c2:	5a                   	pop    edx
c00086c3:	0f b6 c0             	movzx  eax,al
c00086c6:	59                   	pop    ecx
c00086c7:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086cc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086d0:	50                   	push   eax
c00086d1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086d5:	e8 aa ff ff ff       	call   c0008684 <VgaText::combineCharAndColour(char, unsigned char)>
c00086da:	5a                   	pop    edx
c00086db:	6b d7 50             	imul   edx,edi,0x50
c00086de:	59                   	pop    ecx
c00086df:	01 f2                	add    edx,esi
c00086e1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086e4:	0f b7 d2             	movzx  edx,dx
c00086e7:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086eb:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c00086f1:	75 28                	jne    c000871b <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00086f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086f7:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00086fb:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00086ff:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008703:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008707:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000870b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000870f:	83 c4 1c             	add    esp,0x1c
c0008712:	5b                   	pop    ebx
c0008713:	5e                   	pop    esi
c0008714:	5f                   	pop    edi
c0008715:	5d                   	pop    ebp
c0008716:	e9 05 fa 00 00       	jmp    c0018120 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000871b:	83 c4 1c             	add    esp,0x1c
c000871e:	5b                   	pop    ebx
c000871f:	5e                   	pop    esi
c0008720:	5f                   	pop    edi
c0008721:	5d                   	pop    ebp
c0008722:	c3                   	ret    
c0008723:	90                   	nop

c0008724 <VgaText::getCursorX()>:
c0008724:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008728:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000872b:	c3                   	ret    

c000872c <VgaText::getCursorY()>:
c000872c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008730:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008733:	c3                   	ret    

c0008734 <VgaText::setCursor(int, int)>:
c0008734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008738:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000873c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000873f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008743:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008746:	e9 b1 fd ff ff       	jmp    c00084fc <VgaText::updateCursor()>

c000874b <setActiveTerminal(VgaText*)>:
c000874b:	53                   	push   ebx
c000874c:	83 ec 08             	sub    esp,0x8
c000874f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008753:	85 db                	test   ebx,ebx
c0008755:	75 11                	jne    c0008768 <setActiveTerminal(VgaText*)+0x1d>
c0008757:	c7 44 24 10 e0 00 02 c0 	mov    DWORD PTR [esp+0x10],0xc00200e0
c000875f:	83 c4 08             	add    esp,0x8
c0008762:	5b                   	pop    ebx
c0008763:	e9 73 84 00 00       	jmp    c0010bdb <KePanic(char const*)>
c0008768:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000876d:	85 c0                	test   eax,eax
c000876f:	74 0c                	je     c000877d <setActiveTerminal(VgaText*)+0x32>
c0008771:	83 ec 0c             	sub    esp,0xc
c0008774:	50                   	push   eax
c0008775:	e8 82 fd ff ff       	call   c00084fc <VgaText::updateCursor()>
c000877a:	83 c4 10             	add    esp,0x10
c000877d:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c0008783:	50                   	push   eax
c0008784:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008787:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000878a:	53                   	push   ebx
c000878b:	e8 a4 ff ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c0008790:	83 c4 18             	add    esp,0x18
c0008793:	5b                   	pop    ebx
c0008794:	c3                   	ret    
c0008795:	90                   	nop

c0008796 <VgaText::clearScreen()>:
c0008796:	57                   	push   edi
c0008797:	56                   	push   esi
c0008798:	31 f6                	xor    esi,esi
c000879a:	53                   	push   ebx
c000879b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000879f:	52                   	push   edx
c00087a0:	6a 00                	push   0x0
c00087a2:	6a 00                	push   0x0
c00087a4:	53                   	push   ebx
c00087a5:	e8 8a ff ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c00087aa:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087b1:	83 c4 10             	add    esp,0x10
c00087b4:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087b7:	7e 20                	jle    c00087d9 <VgaText::clearScreen()+0x43>
c00087b9:	31 ff                	xor    edi,edi
c00087bb:	50                   	push   eax
c00087bc:	50                   	push   eax
c00087bd:	56                   	push   esi
c00087be:	57                   	push   edi
c00087bf:	47                   	inc    edi
c00087c0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087c3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087c6:	6a 20                	push   0x20
c00087c8:	53                   	push   ebx
c00087c9:	e8 c6 fe ff ff       	call   c0008694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087ce:	83 c4 20             	add    esp,0x20
c00087d1:	83 ff 50             	cmp    edi,0x50
c00087d4:	75 e5                	jne    c00087bb <VgaText::clearScreen()+0x25>
c00087d6:	46                   	inc    esi
c00087d7:	eb db                	jmp    c00087b4 <VgaText::clearScreen()+0x1e>
c00087d9:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087e0:	5b                   	pop    ebx
c00087e1:	5e                   	pop    esi
c00087e2:	5f                   	pop    edi
c00087e3:	c3                   	ret    

c00087e4 <VgaText::setCursorX(int)>:
c00087e4:	83 ec 10             	sub    esp,0x10
c00087e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087eb:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087f2:	50                   	push   eax
c00087f3:	e8 3c ff ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c00087f8:	83 c4 1c             	add    esp,0x1c
c00087fb:	c3                   	ret    

c00087fc <VgaText::setCursorY(int)>:
c00087fc:	83 ec 10             	sub    esp,0x10
c00087ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008807:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000880a:	50                   	push   eax
c000880b:	e8 24 ff ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c0008810:	83 c4 1c             	add    esp,0x1c
c0008813:	c3                   	ret    

c0008814 <VgaText::incrementCursor(bool)>:
c0008814:	56                   	push   esi
c0008815:	53                   	push   ebx
c0008816:	51                   	push   ecx
c0008817:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000881b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000881f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008822:	40                   	inc    eax
c0008823:	83 f8 50             	cmp    eax,0x50
c0008826:	74 05                	je     c000882d <VgaText::incrementCursor(bool)+0x19>
c0008828:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000882b:	eb 24                	jmp    c0008851 <VgaText::incrementCursor(bool)+0x3d>
c000882d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008830:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008837:	8d 50 01             	lea    edx,[eax+0x1]
c000883a:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000883d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008840:	75 0f                	jne    c0008851 <VgaText::incrementCursor(bool)+0x3d>
c0008842:	83 ec 0c             	sub    esp,0xc
c0008845:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008848:	53                   	push   ebx
c0008849:	e8 a4 fd ff ff       	call   c00085f2 <VgaText::scrollScreen()>
c000884e:	83 c4 10             	add    esp,0x10
c0008851:	89 f0                	mov    eax,esi
c0008853:	84 c0                	test   al,al
c0008855:	74 0c                	je     c0008863 <VgaText::incrementCursor(bool)+0x4f>
c0008857:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000885b:	5a                   	pop    edx
c000885c:	5b                   	pop    ebx
c000885d:	5e                   	pop    esi
c000885e:	e9 99 fc ff ff       	jmp    c00084fc <VgaText::updateCursor()>
c0008863:	58                   	pop    eax
c0008864:	5b                   	pop    ebx
c0008865:	5e                   	pop    esi
c0008866:	c3                   	ret    
c0008867:	90                   	nop

c0008868 <VgaText::decrementCursor(bool)>:
c0008868:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000886c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008870:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008873:	85 c0                	test   eax,eax
c0008875:	74 04                	je     c000887b <VgaText::decrementCursor(bool)+0x13>
c0008877:	48                   	dec    eax
c0008878:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000887b:	84 c9                	test   cl,cl
c000887d:	74 09                	je     c0008888 <VgaText::decrementCursor(bool)+0x20>
c000887f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008883:	e9 74 fc ff ff       	jmp    c00084fc <VgaText::updateCursor()>
c0008888:	c3                   	ret    
c0008889:	90                   	nop

c000888a <VgaText::putchar(char, VgaColour, VgaColour)>:
c000888a:	53                   	push   ebx
c000888b:	83 ec 08             	sub    esp,0x8
c000888e:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0008893:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008897:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000889b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000889f:	83 f8 07             	cmp    eax,0x7
c00088a2:	75 21                	jne    c00088c5 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088a4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ac:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088b4:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088bc:	83 c4 08             	add    esp,0x8
c00088bf:	5b                   	pop    ebx
c00088c0:	e9 e2 31 00 00       	jmp    c000baa7 <Krnl::beep(int, int, bool)>
c00088c5:	83 f8 0d             	cmp    eax,0xd
c00088c8:	75 09                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ca:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088d1:	eb 2d                	jmp    c0008900 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088d3:	83 f8 0a             	cmp    eax,0xa
c00088d6:	75 31                	jne    c0008909 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088d8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088db:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088e2:	8d 50 01             	lea    edx,[eax+0x1]
c00088e5:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088e8:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088eb:	75 0f                	jne    c00088fc <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088ed:	83 ec 0c             	sub    esp,0xc
c00088f0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088f3:	53                   	push   ebx
c00088f4:	e8 f9 fc ff ff       	call   c00085f2 <VgaText::scrollScreen()>
c00088f9:	83 c4 10             	add    esp,0x10
c00088fc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008900:	83 c4 08             	add    esp,0x8
c0008903:	5b                   	pop    ebx
c0008904:	e9 f3 fb ff ff       	jmp    c00084fc <VgaText::updateCursor()>
c0008909:	83 f8 08             	cmp    eax,0x8
c000890c:	75 25                	jne    c0008933 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000890e:	50                   	push   eax
c000890f:	50                   	push   eax
c0008910:	6a 01                	push   0x1
c0008912:	53                   	push   ebx
c0008913:	e8 50 ff ff ff       	call   c0008868 <VgaText::decrementCursor(bool)>
c0008918:	5a                   	pop    edx
c0008919:	59                   	pop    ecx
c000891a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000891d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008920:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008923:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008926:	6a 20                	push   0x20
c0008928:	53                   	push   ebx
c0008929:	e8 66 fd ff ff       	call   c0008694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000892e:	83 c4 28             	add    esp,0x28
c0008931:	5b                   	pop    ebx
c0008932:	c3                   	ret    
c0008933:	83 ec 08             	sub    esp,0x8
c0008936:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008939:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000893c:	51                   	push   ecx
c000893d:	52                   	push   edx
c000893e:	50                   	push   eax
c000893f:	53                   	push   ebx
c0008940:	e8 4f fd ff ff       	call   c0008694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008945:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008949:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008951:	83 c4 28             	add    esp,0x28
c0008954:	5b                   	pop    ebx
c0008955:	e9 ba fe ff ff       	jmp    c0008814 <VgaText::incrementCursor(bool)>

c000895a <VgaText::putchar(char)>:
c000895a:	57                   	push   edi
c000895b:	56                   	push   esi
c000895c:	53                   	push   ebx
c000895d:	83 ec 10             	sub    esp,0x10
c0008960:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008964:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008968:	89 f8                	mov    eax,edi
c000896a:	0f be c0             	movsx  eax,al
c000896d:	83 f8 5b             	cmp    eax,0x5b
c0008970:	75 18                	jne    c000898a <VgaText::putchar(char)+0x30>
c0008972:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008976:	74 20                	je     c0008998 <VgaText::putchar(char)+0x3e>
c0008978:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000897e:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008985:	e9 c1 00 00 00       	jmp    c0008a4b <VgaText::putchar(char)+0xf1>
c000898a:	83 f8 1b             	cmp    eax,0x1b
c000898d:	75 09                	jne    c0008998 <VgaText::putchar(char)+0x3e>
c000898f:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008993:	e9 b3 00 00 00       	jmp    c0008a4b <VgaText::putchar(char)+0xf1>
c0008998:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000899b:	84 c9                	test   cl,cl
c000899d:	0f 84 98 00 00 00    	je     c0008a3b <VgaText::putchar(char)+0xe1>
c00089a3:	8d 77 c0             	lea    esi,[edi-0x40]
c00089a6:	89 f2                	mov    edx,esi
c00089a8:	80 fa 3e             	cmp    dl,0x3e
c00089ab:	77 78                	ja     c0008a25 <VgaText::putchar(char)+0xcb>
c00089ad:	83 f8 6d             	cmp    eax,0x6d
c00089b0:	75 47                	jne    c00089f9 <VgaText::putchar(char)+0x9f>
c00089b2:	31 f6                	xor    esi,esi
c00089b4:	31 d2                	xor    edx,edx
c00089b6:	31 c0                	xor    eax,eax
c00089b8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089bb:	7e 2d                	jle    c00089ea <VgaText::putchar(char)+0x90>
c00089bd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089c2:	83 fa 3b             	cmp    edx,0x3b
c00089c5:	75 17                	jne    c00089de <VgaText::putchar(char)+0x84>
c00089c7:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089cb:	50                   	push   eax
c00089cc:	53                   	push   ebx
c00089cd:	e8 40 fb ff ff       	call   c0008512 <VgaText::doANSI_SGR(int)>
c00089d2:	59                   	pop    ecx
c00089d3:	31 d2                	xor    edx,edx
c00089d5:	5f                   	pop    edi
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089dc:	eb 09                	jmp    c00089e7 <VgaText::putchar(char)+0x8d>
c00089de:	6b c0 0a             	imul   eax,eax,0xa
c00089e1:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089e5:	88 ca                	mov    dl,cl
c00089e7:	46                   	inc    esi
c00089e8:	eb ce                	jmp    c00089b8 <VgaText::putchar(char)+0x5e>
c00089ea:	84 d2                	test   dl,dl
c00089ec:	74 2f                	je     c0008a1d <VgaText::putchar(char)+0xc3>
c00089ee:	50                   	push   eax
c00089ef:	53                   	push   ebx
c00089f0:	e8 1d fb ff ff       	call   c0008512 <VgaText::doANSI_SGR(int)>
c00089f5:	58                   	pop    eax
c00089f6:	5a                   	pop    edx
c00089f7:	eb 24                	jmp    c0008a1d <VgaText::putchar(char)+0xc3>
c00089f9:	83 f8 4a             	cmp    eax,0x4a
c00089fc:	75 1f                	jne    c0008a1d <VgaText::putchar(char)+0xc3>
c00089fe:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a02:	75 19                	jne    c0008a1d <VgaText::putchar(char)+0xc3>
c0008a04:	83 ec 0c             	sub    esp,0xc
c0008a07:	53                   	push   ebx
c0008a08:	e8 89 fd ff ff       	call   c0008796 <VgaText::clearScreen()>
c0008a0d:	83 c4 0c             	add    esp,0xc
c0008a10:	6a 00                	push   0x0
c0008a12:	6a 00                	push   0x0
c0008a14:	53                   	push   ebx
c0008a15:	e8 1a fd ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c0008a1a:	83 c4 10             	add    esp,0x10
c0008a1d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a23:	eb 26                	jmp    c0008a4b <VgaText::putchar(char)+0xf1>
c0008a25:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a28:	83 f8 0e             	cmp    eax,0xe
c0008a2b:	7f 1e                	jg     c0008a4b <VgaText::putchar(char)+0xf1>
c0008a2d:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a30:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a33:	89 f9                	mov    ecx,edi
c0008a35:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a39:	eb 10                	jmp    c0008a4b <VgaText::putchar(char)+0xf1>
c0008a3b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a3e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a41:	50                   	push   eax
c0008a42:	53                   	push   ebx
c0008a43:	e8 42 fe ff ff       	call   c000888a <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a48:	83 c4 10             	add    esp,0x10
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	5b                   	pop    ebx
c0008a4f:	5e                   	pop    esi
c0008a50:	5f                   	pop    edi
c0008a51:	c3                   	ret    

c0008a52 <VgaText::putx(unsigned int)>:
c0008a52:	57                   	push   edi
c0008a53:	b9 11 00 00 00       	mov    ecx,0x11
c0008a58:	56                   	push   esi
c0008a59:	be ee 00 02 c0       	mov    esi,0xc00200ee
c0008a5e:	53                   	push   ebx
c0008a5f:	83 ec 20             	sub    esp,0x20
c0008a62:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a66:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a6a:	fc                   	cld    
c0008a6b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a6d:	be 08 00 00 00       	mov    esi,0x8
c0008a72:	50                   	push   eax
c0008a73:	50                   	push   eax
c0008a74:	89 d8                	mov    eax,ebx
c0008a76:	c1 e3 04             	shl    ebx,0x4
c0008a79:	c1 e8 1c             	shr    eax,0x1c
c0008a7c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a81:	50                   	push   eax
c0008a82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a86:	e8 cf fe ff ff       	call   c000895a <VgaText::putchar(char)>
c0008a8b:	83 c4 10             	add    esp,0x10
c0008a8e:	4e                   	dec    esi
c0008a8f:	75 e1                	jne    c0008a72 <VgaText::putx(unsigned int)+0x20>
c0008a91:	83 c4 20             	add    esp,0x20
c0008a94:	5b                   	pop    ebx
c0008a95:	5e                   	pop    esi
c0008a96:	5f                   	pop    edi
c0008a97:	c3                   	ret    

c0008a98 <VgaText::puts(char const*)>:
c0008a98:	53                   	push   ebx
c0008a99:	83 ec 08             	sub    esp,0x8
c0008a9c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aa0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008aa3:	85 c0                	test   eax,eax
c0008aa5:	74 12                	je     c0008ab9 <VgaText::puts(char const*)+0x21>
c0008aa7:	43                   	inc    ebx
c0008aa8:	51                   	push   ecx
c0008aa9:	51                   	push   ecx
c0008aaa:	50                   	push   eax
c0008aab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aaf:	e8 a6 fe ff ff       	call   c000895a <VgaText::putchar(char)>
c0008ab4:	83 c4 10             	add    esp,0x10
c0008ab7:	eb e7                	jmp    c0008aa0 <VgaText::puts(char const*)+0x8>
c0008ab9:	83 c4 08             	add    esp,0x8
c0008abc:	5b                   	pop    ebx
c0008abd:	c3                   	ret    

c0008abe <VgaText::write(unsigned long long, void*, int*)>:
c0008abe:	55                   	push   ebp
c0008abf:	57                   	push   edi
c0008ac0:	56                   	push   esi
c0008ac1:	53                   	push   ebx
c0008ac2:	83 ec 0c             	sub    esp,0xc
c0008ac5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ac9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008acd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ad1:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ad8:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008adb:	39 eb                	cmp    ebx,ebp
c0008add:	74 13                	je     c0008af2 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008adf:	43                   	inc    ebx
c0008ae0:	50                   	push   eax
c0008ae1:	50                   	push   eax
c0008ae2:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008ae6:	50                   	push   eax
c0008ae7:	56                   	push   esi
c0008ae8:	e8 6d fe ff ff       	call   c000895a <VgaText::putchar(char)>
c0008aed:	83 c4 10             	add    esp,0x10
c0008af0:	eb e9                	jmp    c0008adb <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008af2:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008af9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008afd:	89 38                	mov    DWORD PTR [eax],edi
c0008aff:	83 c4 0c             	add    esp,0xc
c0008b02:	31 c0                	xor    eax,eax
c0008b04:	5b                   	pop    ebx
c0008b05:	5e                   	pop    esi
c0008b06:	5f                   	pop    edi
c0008b07:	5d                   	pop    ebp
c0008b08:	c3                   	ret    
c0008b09:	90                   	nop

c0008b0a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b0a:	55                   	push   ebp
c0008b0b:	57                   	push   edi
c0008b0c:	56                   	push   esi
c0008b0d:	53                   	push   ebx
c0008b0e:	83 ec 0c             	sub    esp,0xc
c0008b11:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b1a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b21:	50                   	push   eax
c0008b22:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b27:	50                   	push   eax
c0008b28:	e8 b3 fa ff ff       	call   c00085e0 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b2d:	5a                   	pop    edx
c0008b2e:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b32:	59                   	pop    ecx
c0008b33:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b36:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b3a:	0f b7 f6             	movzx  esi,si
c0008b3d:	0f b6 e8             	movzx  ebp,al
c0008b40:	01 f6                	add    esi,esi
c0008b42:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b45:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b48:	85 c0                	test   eax,eax
c0008b4a:	0f 84 ef 00 00 00    	je     c0008c3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b50:	83 f8 0d             	cmp    eax,0xd
c0008b53:	75 0c                	jne    c0008b61 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b55:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b5c:	e9 d8 00 00 00       	jmp    c0008c39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b61:	83 f8 0a             	cmp    eax,0xa
c0008b64:	75 44                	jne    c0008baa <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b66:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b69:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b70:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b73:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b76:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b79:	75 0f                	jne    c0008b8a <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b7b:	83 ec 0c             	sub    esp,0xc
c0008b7e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b81:	53                   	push   ebx
c0008b82:	e8 6b fa ff ff       	call   c00085f2 <VgaText::scrollScreen()>
c0008b87:	83 c4 10             	add    esp,0x10
c0008b8a:	83 ec 0c             	sub    esp,0xc
c0008b8d:	53                   	push   ebx
c0008b8e:	e8 69 f9 ff ff       	call   c00084fc <VgaText::updateCursor()>
c0008b93:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b97:	83 c4 10             	add    esp,0x10
c0008b9a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b9d:	0f b7 f6             	movzx  esi,si
c0008ba0:	01 f6                	add    esi,esi
c0008ba2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008ba5:	e9 8f 00 00 00       	jmp    c0008c39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008baa:	83 f8 08             	cmp    eax,0x8
c0008bad:	75 34                	jne    c0008be3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008baf:	51                   	push   ecx
c0008bb0:	51                   	push   ecx
c0008bb1:	6a 01                	push   0x1
c0008bb3:	53                   	push   ebx
c0008bb4:	e8 af fc ff ff       	call   c0008868 <VgaText::decrementCursor(bool)>
c0008bb9:	5e                   	pop    esi
c0008bba:	58                   	pop    eax
c0008bbb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bbe:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bc1:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bc4:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bc7:	6a 20                	push   0x20
c0008bc9:	53                   	push   ebx
c0008bca:	e8 c5 fa ff ff       	call   c0008694 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bcf:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bd3:	83 c4 20             	add    esp,0x20
c0008bd6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bd9:	0f b7 f6             	movzx  esi,si
c0008bdc:	01 f6                	add    esi,esi
c0008bde:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008be1:	eb 56                	jmp    c0008c39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008be3:	52                   	push   edx
c0008be4:	52                   	push   edx
c0008be5:	55                   	push   ebp
c0008be6:	50                   	push   eax
c0008be7:	e8 98 fa ff ff       	call   c0008684 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bec:	83 c4 10             	add    esp,0x10
c0008bef:	66 89 06             	mov    WORD PTR [esi],ax
c0008bf2:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008bf8:	75 1d                	jne    c0008c17 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008bfa:	83 ec 0c             	sub    esp,0xc
c0008bfd:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c00:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c03:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c07:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c0b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c0e:	50                   	push   eax
c0008c0f:	e8 0c f5 00 00       	call   c0018120 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c14:	83 c4 20             	add    esp,0x20
c0008c17:	83 c6 02             	add    esi,0x2
c0008c1a:	50                   	push   eax
c0008c1b:	50                   	push   eax
c0008c1c:	6a 00                	push   0x0
c0008c1e:	53                   	push   ebx
c0008c1f:	e8 f0 fb ff ff       	call   c0008814 <VgaText::incrementCursor(bool)>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c2b:	75 0c                	jne    c0008c39 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c2d:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c31:	0f b7 f6             	movzx  esi,si
c0008c34:	01 f6                	add    esi,esi
c0008c36:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c39:	47                   	inc    edi
c0008c3a:	e9 06 ff ff ff       	jmp    c0008b45 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c3f:	83 ec 0c             	sub    esp,0xc
c0008c42:	53                   	push   ebx
c0008c43:	e8 b4 f8 ff ff       	call   c00084fc <VgaText::updateCursor()>
c0008c48:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c4f:	83 c4 1c             	add    esp,0x1c
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	5f                   	pop    edi
c0008c55:	5d                   	pop    ebp
c0008c56:	c3                   	ret    
c0008c57:	90                   	nop

c0008c58 <VgaText::VgaText(char const*)>:
c0008c58:	56                   	push   esi
c0008c59:	53                   	push   ebx
c0008c5a:	83 ec 04             	sub    esp,0x4
c0008c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c61:	83 ec 08             	sub    esp,0x8
c0008c64:	6a 00                	push   0x0
c0008c66:	50                   	push   eax
c0008c67:	e8 46 05 00 00       	call   c00091b2 <UnixFile::UnixFile(int)>
c0008c6c:	83 c4 10             	add    esp,0x10
c0008c6f:	ba 14 01 02 c0       	mov    edx,0xc0020114
c0008c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c78:	89 10                	mov    DWORD PTR [eax],edx
c0008c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c89:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c94:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9c:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008ca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca4:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caf:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cba:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc5:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd0:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008cd7:	83 ec 0c             	sub    esp,0xc
c0008cda:	6a 01                	push   0x1
c0008cdc:	e8 20 09 00 00       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c0008ce1:	83 c4 10             	add    esp,0x10
c0008ce4:	89 c2                	mov    edx,eax
c0008ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cea:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008ced:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cfa:	89 c6                	mov    esi,eax
c0008cfc:	e8 b1 f0 ff ff       	call   c0007db2 <Phys::allocatePage()>
c0008d01:	68 05 0c 00 00       	push   0xc05
c0008d06:	56                   	push   esi
c0008d07:	50                   	push   eax
c0008d08:	53                   	push   ebx
c0008d09:	e8 04 10 00 00       	call   c0009d12 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d0e:	83 c4 10             	add    esp,0x10
c0008d11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d18:	83 ec 04             	sub    esp,0x4
c0008d1b:	68 a0 0f 00 00       	push   0xfa0
c0008d20:	6a 00                	push   0x0
c0008d22:	50                   	push   eax
c0008d23:	e8 c8 77 ff ff       	call   c00004f0 <memset>
c0008d28:	83 c4 10             	add    esp,0x10
c0008d2b:	83 ec 04             	sub    esp,0x4
c0008d2e:	6a 00                	push   0x0
c0008d30:	6a 07                	push   0x7
c0008d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d36:	e8 6b f8 ff ff       	call   c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d3b:	83 c4 10             	add    esp,0x10
c0008d3e:	83 ec 04             	sub    esp,0x4
c0008d41:	6a 00                	push   0x0
c0008d43:	6a 00                	push   0x0
c0008d45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d49:	e8 e6 f9 ff ff       	call   c0008734 <VgaText::setCursor(int, int)>
c0008d4e:	83 c4 10             	add    esp,0x10
c0008d51:	83 ec 0c             	sub    esp,0xc
c0008d54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d58:	e8 39 fa ff ff       	call   c0008796 <VgaText::clearScreen()>
c0008d5d:	83 c4 10             	add    esp,0x10
c0008d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d64:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d6c:	05 82 00 00 00       	add    eax,0x82
c0008d71:	83 ec 04             	sub    esp,0x4
c0008d74:	68 80 00 00 00       	push   0x80
c0008d79:	6a 00                	push   0x0
c0008d7b:	50                   	push   eax
c0008d7c:	e8 6f 77 ff ff       	call   c00004f0 <memset>
c0008d81:	83 c4 10             	add    esp,0x10
c0008d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d88:	05 02 01 00 00       	add    eax,0x102
c0008d8d:	83 ec 04             	sub    esp,0x4
c0008d90:	68 80 00 00 00       	push   0x80
c0008d95:	6a 00                	push   0x0
c0008d97:	50                   	push   eax
c0008d98:	e8 53 77 ff ff       	call   c00004f0 <memset>
c0008d9d:	83 c4 10             	add    esp,0x10
c0008da0:	90                   	nop
c0008da1:	83 c4 04             	add    esp,0x4
c0008da4:	5b                   	pop    ebx
c0008da5:	5e                   	pop    esi
c0008da6:	c3                   	ret    
c0008da7:	90                   	nop

c0008da8 <VgaText::receiveKey(unsigned char)>:
c0008da8:	55                   	push   ebp
c0008da9:	57                   	push   edi
c0008daa:	56                   	push   esi
c0008dab:	53                   	push   ebx
c0008dac:	83 ec 2c             	sub    esp,0x2c
c0008daf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008db3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008db7:	89 ef                	mov    edi,ebp
c0008db9:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dbf:	0f 84 66 01 00 00    	je     c0008f2b <VgaText::receiveKey(unsigned char)+0x183>
c0008dc5:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dcb:	83 ff 08             	cmp    edi,0x8
c0008dce:	75 73                	jne    c0008e43 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dd0:	83 ec 0c             	sub    esp,0xc
c0008dd3:	56                   	push   esi
c0008dd4:	e8 97 77 ff ff       	call   c0000570 <strlen>
c0008dd9:	83 c4 10             	add    esp,0x10
c0008ddc:	85 c0                	test   eax,eax
c0008dde:	0f 84 02 01 00 00    	je     c0008ee6 <VgaText::receiveKey(unsigned char)+0x13e>
c0008de4:	50                   	push   eax
c0008de5:	50                   	push   eax
c0008de6:	6a 08                	push   0x8
c0008de8:	53                   	push   ebx
c0008de9:	e8 6c fb ff ff       	call   c000895a <VgaText::putchar(char)>
c0008dee:	89 34 24             	mov    DWORD PTR [esp],esi
c0008df1:	e8 7a 77 ff ff       	call   c0000570 <strlen>
c0008df6:	83 c4 10             	add    esp,0x10
c0008df9:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e01:	83 fa 0d             	cmp    edx,0xd
c0008e04:	89 d0                	mov    eax,edx
c0008e06:	0f 95 c1             	setne  cl
c0008e09:	83 fa 1f             	cmp    edx,0x1f
c0008e0c:	0f 9e c2             	setle  dl
c0008e0f:	0f b6 d2             	movzx  edx,dl
c0008e12:	85 ca                	test   edx,ecx
c0008e14:	74 17                	je     c0008e2d <VgaText::receiveKey(unsigned char)+0x85>
c0008e16:	83 e8 08             	sub    eax,0x8
c0008e19:	3c 02                	cmp    al,0x2
c0008e1b:	76 10                	jbe    c0008e2d <VgaText::receiveKey(unsigned char)+0x85>
c0008e1d:	55                   	push   ebp
c0008e1e:	55                   	push   ebp
c0008e1f:	68 ff 00 02 c0       	push   0xc00200ff
c0008e24:	53                   	push   ebx
c0008e25:	e8 6e fc ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0008e2a:	83 c4 10             	add    esp,0x10
c0008e2d:	83 ec 0c             	sub    esp,0xc
c0008e30:	56                   	push   esi
c0008e31:	e8 3a 77 ff ff       	call   c0000570 <strlen>
c0008e36:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e3e:	e9 a0 00 00 00       	jmp    c0008ee3 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e43:	83 ec 0c             	sub    esp,0xc
c0008e46:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e4c:	50                   	push   eax
c0008e4d:	e8 1e 77 ff ff       	call   c0000570 <strlen>
c0008e52:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e59:	e8 12 77 ff ff       	call   c0000570 <strlen>
c0008e5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e62:	83 c4 10             	add    esp,0x10
c0008e65:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e69:	3d 80 00 00 00       	cmp    eax,0x80
c0008e6e:	0f 87 b7 00 00 00    	ja     c0008f2b <VgaText::receiveKey(unsigned char)+0x183>
c0008e74:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e77:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e7a:	3c 1e                	cmp    al,0x1e
c0008e7c:	0f 96 c0             	setbe  al
c0008e7f:	80 fa 01             	cmp    dl,0x1
c0008e82:	0f 97 c2             	seta   dl
c0008e85:	0f b6 d2             	movzx  edx,dl
c0008e88:	85 c2                	test   edx,eax
c0008e8a:	74 2e                	je     c0008eba <VgaText::receiveKey(unsigned char)+0x112>
c0008e8c:	83 ff 0d             	cmp    edi,0xd
c0008e8f:	74 29                	je     c0008eba <VgaText::receiveKey(unsigned char)+0x112>
c0008e91:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e94:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e97:	68 05 01 02 c0       	push   0xc0020105
c0008e9c:	53                   	push   ebx
c0008e9d:	e8 68 fc ff ff       	call   c0008b0a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea5:	8d 45 40             	lea    eax,[ebp+0x40]
c0008ea8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eab:	0f b6 c0             	movzx  eax,al
c0008eae:	50                   	push   eax
c0008eaf:	53                   	push   ebx
c0008eb0:	e8 d5 f9 ff ff       	call   c000888a <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb5:	83 c4 20             	add    esp,0x20
c0008eb8:	eb 11                	jmp    c0008ecb <VgaText::receiveKey(unsigned char)+0x123>
c0008eba:	89 e8                	mov    eax,ebp
c0008ebc:	51                   	push   ecx
c0008ebd:	0f be c0             	movsx  eax,al
c0008ec0:	51                   	push   ecx
c0008ec1:	50                   	push   eax
c0008ec2:	53                   	push   ebx
c0008ec3:	e8 92 fa ff ff       	call   c000895a <VgaText::putchar(char)>
c0008ec8:	83 c4 10             	add    esp,0x10
c0008ecb:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed0:	89 e8                	mov    eax,ebp
c0008ed2:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed6:	52                   	push   edx
c0008ed7:	52                   	push   edx
c0008ed8:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edc:	50                   	push   eax
c0008edd:	56                   	push   esi
c0008ede:	e8 5d 79 ff ff       	call   c0000840 <strcat>
c0008ee3:	83 c4 10             	add    esp,0x10
c0008ee6:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008eec:	b0 01                	mov    al,0x1
c0008eee:	83 ff 1c             	cmp    edi,0x1c
c0008ef1:	77 0e                	ja     c0008f01 <VgaText::receiveKey(unsigned char)+0x159>
c0008ef3:	b8 08 04 00 10       	mov    eax,0x10000408
c0008ef8:	89 f9                	mov    ecx,edi
c0008efa:	d3 e8                	shr    eax,cl
c0008efc:	f7 d0                	not    eax
c0008efe:	83 e0 01             	and    eax,0x1
c0008f01:	84 c0                	test   al,al
c0008f03:	74 04                	je     c0008f09 <VgaText::receiveKey(unsigned char)+0x161>
c0008f05:	84 d2                	test   dl,dl
c0008f07:	74 22                	je     c0008f2b <VgaText::receiveKey(unsigned char)+0x183>
c0008f09:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f0f:	50                   	push   eax
c0008f10:	50                   	push   eax
c0008f11:	56                   	push   esi
c0008f12:	53                   	push   ebx
c0008f13:	e8 28 79 ff ff       	call   c0000840 <strcat>
c0008f18:	83 c4 0c             	add    esp,0xc
c0008f1b:	68 80 00 00 00       	push   0x80
c0008f20:	6a 00                	push   0x0
c0008f22:	56                   	push   esi
c0008f23:	e8 c8 75 ff ff       	call   c00004f0 <memset>
c0008f28:	83 c4 10             	add    esp,0x10
c0008f2b:	83 c4 2c             	add    esp,0x2c
c0008f2e:	5b                   	pop    ebx
c0008f2f:	5e                   	pop    esi
c0008f30:	5f                   	pop    edi
c0008f31:	5d                   	pop    ebp
c0008f32:	c3                   	ret    
c0008f33:	90                   	nop

c0008f34 <VgaText::doUpdate()>:
c0008f34:	c3                   	ret    
c0008f35:	66 90                	xchg   ax,ax
c0008f37:	90                   	nop

c0008f38 <TSS::TSS()>:
c0008f38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f3c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f43:	90                   	nop
c0008f44:	c3                   	ret    
c0008f45:	90                   	nop
c0008f46:	66 90                	xchg   ax,ax

c0008f48 <TSS::setESP(unsigned long)>:
c0008f48:	55                   	push   ebp
c0008f49:	89 e5                	mov    ebp,esp
c0008f4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f51:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f54:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f57:	90                   	nop
c0008f58:	5d                   	pop    ebp
c0008f59:	c3                   	ret    
c0008f5a:	66 90                	xchg   ax,ax

c0008f5c <TSS::flush()>:
c0008f5c:	55                   	push   ebp
c0008f5d:	89 e5                	mov    ebp,esp
c0008f5f:	83 ec 10             	sub    esp,0x10
c0008f62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f65:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f67:	83 c8 03             	or     eax,0x3
c0008f6a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f6e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f72:	66 89 d0             	mov    ax,dx
c0008f75:	0f 00 d8             	ltr    ax
c0008f78:	90                   	nop
c0008f79:	c9                   	leave  
c0008f7a:	c3                   	ret    
c0008f7b:	90                   	nop

c0008f7c <TSS::setup(unsigned long, unsigned long)>:
c0008f7c:	55                   	push   ebp
c0008f7d:	89 e5                	mov    ebp,esp
c0008f7f:	83 ec 18             	sub    esp,0x18
c0008f82:	83 ec 0c             	sub    esp,0xc
c0008f85:	6a 68                	push   0x68
c0008f87:	e8 22 eb ff ff       	call   c0007aae <malloc>
c0008f8c:	83 c4 10             	add    esp,0x10
c0008f8f:	89 c2                	mov    edx,eax
c0008f91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f94:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f9d:	83 ec 04             	sub    esp,0x4
c0008fa0:	6a 68                	push   0x68
c0008fa2:	6a 00                	push   0x0
c0008fa4:	50                   	push   eax
c0008fa5:	e8 46 75 ff ff       	call   c00004f0 <memset>
c0008faa:	83 c4 10             	add    esp,0x10
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fce:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009022:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000902e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000903e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009041:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009044:	0f 20 da             	mov    edx,cr3
c0009047:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000904a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000904d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009050:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009053:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009056:	83 ec 08             	sub    esp,0x8
c0009059:	50                   	push   eax
c000905a:	8d 45 ec             	lea    eax,[ebp-0x14]
c000905d:	50                   	push   eax
c000905e:	e8 b7 e2 ff ff       	call   c000731a <GDTEntry::setBase(unsigned int)>
c0009063:	83 c4 10             	add    esp,0x10
c0009066:	83 ec 08             	sub    esp,0x8
c0009069:	6a 68                	push   0x68
c000906b:	8d 45 ec             	lea    eax,[ebp-0x14]
c000906e:	50                   	push   eax
c000906f:	e8 c2 e2 ff ff       	call   c0007336 <GDTEntry::setLimit(unsigned int)>
c0009074:	83 c4 10             	add    esp,0x10
c0009077:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000907b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907e:	83 e0 0f             	and    eax,0xf
c0009081:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009084:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009087:	83 c8 40             	or     eax,0x40
c000908a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000908d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009092:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009098:	05 78 01 00 00       	add    eax,0x178
c000909d:	83 ec 04             	sub    esp,0x4
c00090a0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090a3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090a6:	50                   	push   eax
c00090a7:	e8 be e2 ff ff       	call   c000736a <GDT::addEntry(GDTEntry)>
c00090ac:	83 c4 10             	add    esp,0x10
c00090af:	89 c2                	mov    edx,eax
c00090b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090b4:	89 10                	mov    DWORD PTR [eax],edx
c00090b6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090bb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090c1:	05 78 01 00 00       	add    eax,0x178
c00090c6:	83 ec 0c             	sub    esp,0xc
c00090c9:	50                   	push   eax
c00090ca:	e8 c5 e2 ff ff       	call   c0007394 <GDT::flush()>
c00090cf:	83 c4 10             	add    esp,0x10
c00090d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00090d7:	c9                   	leave  
c00090d8:	c3                   	ret    
c00090d9:	90                   	nop

c00090da <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090e5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090ea:	75 08                	jne    c00090f4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090ec:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090f2:	eb 38                	jmp    c000912c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090f4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090f9:	75 17                	jne    c0009112 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009100:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009103:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009109:	8b 10                	mov    edx,DWORD PTR [eax]
c000910b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000910f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009112:	89 c1                	mov    ecx,eax
c0009114:	83 e1 fd             	and    ecx,0xfffffffd
c0009117:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000911d:	74 cd                	je     c00090ec <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000911f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009124:	83 e0 ef             	and    eax,0xffffffef
c0009127:	83 f8 08             	cmp    eax,0x8
c000912a:	76 c0                	jbe    c00090ec <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912c:	31 c0                	xor    eax,eax
c000912e:	c3                   	ret    
c000912f:	90                   	nop

c0009130 <ReservedFilename::isAtty()>:
c0009130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009134:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009137:	31 c0                	xor    eax,eax
c0009139:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000913f:	74 09                	je     c000914a <ReservedFilename::isAtty()+0x1a>
c0009141:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009147:	0f 94 c0             	sete   al
c000914a:	c3                   	ret    
c000914b:	90                   	nop

c000914c <ReservedFilename::write(unsigned long long, void*, int*)>:
c000914c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009150:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009154:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009157:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000915b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009160:	75 08                	jne    c000916a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009162:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009168:	eb 3d                	jmp    c00091a7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000916a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000916f:	75 17                	jne    c0009188 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009171:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009176:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009179:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000917f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009181:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009185:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009188:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000918d:	75 04                	jne    c0009193 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000918f:	89 0a                	mov    DWORD PTR [edx],ecx
c0009191:	eb 14                	jmp    c00091a7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009193:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0009198:	74 c8                	je     c0009162 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000919f:	83 e0 ef             	and    eax,0xffffffef
c00091a2:	83 f8 08             	cmp    eax,0x8
c00091a5:	76 bb                	jbe    c0009162 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a7:	31 c0                	xor    eax,eax
c00091a9:	c3                   	ret    

c00091aa <UnixFile::getFileDescriptor()>:
c00091aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091b1:	c3                   	ret    

c00091b2 <UnixFile::UnixFile(int)>:
c00091b2:	53                   	push   ebx
c00091b3:	83 ec 28             	sub    esp,0x28
c00091b6:	ba dc 01 02 c0       	mov    edx,0xc00201dc
c00091bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091bf:	89 10                	mov    DWORD PTR [eax],edx
c00091c1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091c9:	0f 8f 90 01 00 00    	jg     c000935f <UnixFile::UnixFile(int)+0x1ad>
c00091cf:	a1 40 27 02 c0       	mov    eax,ds:0xc0022740
c00091d4:	8d 50 01             	lea    edx,[eax+0x1]
c00091d7:	89 15 40 27 02 c0    	mov    DWORD PTR ds:0xc0022740,edx
c00091dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091e1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091e4:	83 ec 08             	sub    esp,0x8
c00091e7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091eb:	68 98 5f 02 c0       	push   0xc0025f98
c00091f0:	e8 c3 5a 01 00       	call   c001ecb8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091f5:	83 c4 10             	add    esp,0x10
c00091f8:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c00091fd:	83 f0 01             	xor    eax,0x1
c0009200:	0f b6 c0             	movzx  eax,al
c0009203:	85 c0                	test   eax,eax
c0009205:	0f 84 55 01 00 00    	je     c0009360 <UnixFile::UnixFile(int)+0x1ae>
c000920b:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c0009212:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000921a:	83 ec 0c             	sub    esp,0xc
c000921d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009221:	e8 88 e8 ff ff       	call   c0007aae <malloc>
c0009226:	83 c4 10             	add    esp,0x10
c0009229:	89 c3                	mov    ebx,eax
c000922b:	83 ec 08             	sub    esp,0x8
c000922e:	68 03 ff ff 0f       	push   0xfffff03
c0009233:	53                   	push   ebx
c0009234:	e8 2d 01 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c0009239:	83 c4 10             	add    esp,0x10
c000923c:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c0009242:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000924a:	83 ec 0c             	sub    esp,0xc
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	e8 58 e8 ff ff       	call   c0007aae <malloc>
c0009256:	83 c4 10             	add    esp,0x10
c0009259:	89 c3                	mov    ebx,eax
c000925b:	83 ec 08             	sub    esp,0x8
c000925e:	68 01 ff ff 0f       	push   0xfffff01
c0009263:	53                   	push   ebx
c0009264:	e8 fd 00 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c0009269:	83 c4 10             	add    esp,0x10
c000926c:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c0009272:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000927a:	83 ec 0c             	sub    esp,0xc
c000927d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009281:	e8 28 e8 ff ff       	call   c0007aae <malloc>
c0009286:	83 c4 10             	add    esp,0x10
c0009289:	89 c3                	mov    ebx,eax
c000928b:	83 ec 08             	sub    esp,0x8
c000928e:	68 00 ff ff 0f       	push   0xfffff00
c0009293:	53                   	push   ebx
c0009294:	e8 cd 00 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c0009299:	83 c4 10             	add    esp,0x10
c000929c:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c00092a2:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092aa:	83 ec 0c             	sub    esp,0xc
c00092ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092b1:	e8 f8 e7 ff ff       	call   c0007aae <malloc>
c00092b6:	83 c4 10             	add    esp,0x10
c00092b9:	89 c3                	mov    ebx,eax
c00092bb:	83 ec 08             	sub    esp,0x8
c00092be:	68 02 ff ff 0f       	push   0xfffff02
c00092c3:	53                   	push   ebx
c00092c4:	e8 9d 00 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c00092c9:	83 c4 10             	add    esp,0x10
c00092cc:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092d2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092da:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092df:	7f 7f                	jg     c0009360 <UnixFile::UnixFile(int)+0x1ae>
c00092e1:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092e9:	83 ec 0c             	sub    esp,0xc
c00092ec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092f0:	e8 b9 e7 ff ff       	call   c0007aae <malloc>
c00092f5:	83 c4 10             	add    esp,0x10
c00092f8:	89 c3                	mov    ebx,eax
c00092fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092fe:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009303:	83 ec 08             	sub    esp,0x8
c0009306:	50                   	push   eax
c0009307:	53                   	push   ebx
c0009308:	e8 59 00 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c000930d:	83 c4 10             	add    esp,0x10
c0009310:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009314:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c000931b:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009323:	83 ec 0c             	sub    esp,0xc
c0009326:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000932a:	e8 7f e7 ff ff       	call   c0007aae <malloc>
c000932f:	83 c4 10             	add    esp,0x10
c0009332:	89 c3                	mov    ebx,eax
c0009334:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009338:	05 20 ff ff 0f       	add    eax,0xfffff20
c000933d:	83 ec 08             	sub    esp,0x8
c0009340:	50                   	push   eax
c0009341:	53                   	push   ebx
c0009342:	e8 1f 00 00 00       	call   c0009366 <ReservedFilename::ReservedFilename(int)>
c0009347:	83 c4 10             	add    esp,0x10
c000934a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000934e:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009355:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000935a:	e9 7b ff ff ff       	jmp    c00092da <UnixFile::UnixFile(int)+0x128>
c000935f:	90                   	nop
c0009360:	83 c4 28             	add    esp,0x28
c0009363:	5b                   	pop    ebx
c0009364:	c3                   	ret    
c0009365:	90                   	nop

c0009366 <ReservedFilename::ReservedFilename(int)>:
c0009366:	83 ec 0c             	sub    esp,0xc
c0009369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000936d:	83 ec 08             	sub    esp,0x8
c0009370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009374:	50                   	push   eax
c0009375:	e8 38 fe ff ff       	call   c00091b2 <UnixFile::UnixFile(int)>
c000937a:	83 c4 10             	add    esp,0x10
c000937d:	ba f8 01 02 c0       	mov    edx,0xc00201f8
c0009382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009386:	89 10                	mov    DWORD PTR [eax],edx
c0009388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000938c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009390:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009393:	90                   	nop
c0009394:	83 c4 0c             	add    esp,0xc
c0009397:	c3                   	ret    

c0009398 <UnixFile::~UnixFile()>:
c0009398:	83 ec 1c             	sub    esp,0x1c
c000939b:	ba dc 01 02 c0       	mov    edx,0xc00201dc
c00093a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093a4:	89 10                	mov    DWORD PTR [eax],edx
c00093a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093ad:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093b2:	7f 76                	jg     c000942a <UnixFile::~UnixFile()+0x92>
c00093b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093bc:	83 ec 0c             	sub    esp,0xc
c00093bf:	68 98 5f 02 c0       	push   0xc0025f98
c00093c4:	e8 c3 59 01 00       	call   c001ed8c <LinkedList<UnixFile>::getFirstElement()>
c00093c9:	83 c4 10             	add    esp,0x10
c00093cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093d0:	83 ec 0c             	sub    esp,0xc
c00093d3:	68 98 5f 02 c0       	push   0xc0025f98
c00093d8:	e8 b7 59 01 00       	call   c001ed94 <LinkedList<UnixFile>::removeFirst()>
c00093dd:	83 c4 10             	add    esp,0x10
c00093e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093e4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093e8:	74 43                	je     c000942d <UnixFile::~UnixFile()+0x95>
c00093ea:	83 ec 08             	sub    esp,0x8
c00093ed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093f1:	68 98 5f 02 c0       	push   0xc0025f98
c00093f6:	e8 bd 58 01 00       	call   c001ecb8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093fb:	83 c4 10             	add    esp,0x10
c00093fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009402:	8d 50 01             	lea    edx,[eax+0x1]
c0009405:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009409:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000940e:	0f 94 c0             	sete   al
c0009411:	0f b6 c0             	movzx  eax,al
c0009414:	85 c0                	test   eax,eax
c0009416:	74 a4                	je     c00093bc <UnixFile::~UnixFile()+0x24>
c0009418:	83 ec 0c             	sub    esp,0xc
c000941b:	68 b4 01 02 c0       	push   0xc00201b4
c0009420:	e8 b6 77 00 00       	call   c0010bdb <KePanic(char const*)>
c0009425:	83 c4 10             	add    esp,0x10
c0009428:	eb 92                	jmp    c00093bc <UnixFile::~UnixFile()+0x24>
c000942a:	90                   	nop
c000942b:	eb 01                	jmp    c000942e <UnixFile::~UnixFile()+0x96>
c000942d:	90                   	nop
c000942e:	90                   	nop
c000942f:	83 c4 1c             	add    esp,0x1c
c0009432:	c3                   	ret    
c0009433:	90                   	nop

c0009434 <UnixFile::~UnixFile()>:
c0009434:	83 ec 0c             	sub    esp,0xc
c0009437:	83 ec 0c             	sub    esp,0xc
c000943a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000943e:	e8 55 ff ff ff       	call   c0009398 <UnixFile::~UnixFile()>
c0009443:	83 c4 10             	add    esp,0x10
c0009446:	83 ec 08             	sub    esp,0x8
c0009449:	6a 0c                	push   0xc
c000944b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944f:	e8 f6 13 00 00       	call   c000a84a <operator delete(void*, unsigned long)>
c0009454:	83 c4 10             	add    esp,0x10
c0009457:	83 c4 0c             	add    esp,0xc
c000945a:	c3                   	ret    
c000945b:	90                   	nop

c000945c <ReservedFilename::~ReservedFilename()>:
c000945c:	83 ec 0c             	sub    esp,0xc
c000945f:	ba f8 01 02 c0       	mov    edx,0xc00201f8
c0009464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009468:	89 10                	mov    DWORD PTR [eax],edx
c000946a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000946e:	83 ec 0c             	sub    esp,0xc
c0009471:	50                   	push   eax
c0009472:	e8 21 ff ff ff       	call   c0009398 <UnixFile::~UnixFile()>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	90                   	nop
c000947b:	83 c4 0c             	add    esp,0xc
c000947e:	c3                   	ret    
c000947f:	90                   	nop

c0009480 <ReservedFilename::~ReservedFilename()>:
c0009480:	83 ec 0c             	sub    esp,0xc
c0009483:	83 ec 0c             	sub    esp,0xc
c0009486:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948a:	e8 cd ff ff ff       	call   c000945c <ReservedFilename::~ReservedFilename()>
c000948f:	83 c4 10             	add    esp,0x10
c0009492:	83 ec 08             	sub    esp,0x8
c0009495:	6a 0c                	push   0xc
c0009497:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000949b:	e8 aa 13 00 00       	call   c000a84a <operator delete(void*, unsigned long)>
c00094a0:	83 c4 10             	add    esp,0x10
c00094a3:	83 c4 0c             	add    esp,0xc
c00094a6:	c3                   	ret    

c00094a7 <KeGetFileFromDescriptor(int)>:
c00094a7:	53                   	push   ebx
c00094a8:	83 ec 08             	sub    esp,0x8
c00094ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094af:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094b5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094bb:	7f 2c                	jg     c00094e9 <KeGetFileFromDescriptor(int)+0x42>
c00094bd:	83 ec 0c             	sub    esp,0xc
c00094c0:	68 98 5f 02 c0       	push   0xc0025f98
c00094c5:	e8 c2 58 01 00       	call   c001ed8c <LinkedList<UnixFile>::getFirstElement()>
c00094ca:	83 c4 10             	add    esp,0x10
c00094cd:	85 c0                	test   eax,eax
c00094cf:	75 04                	jne    c00094d5 <KeGetFileFromDescriptor(int)+0x2e>
c00094d1:	31 c0                	xor    eax,eax
c00094d3:	eb 6e                	jmp    c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c00094d5:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094d8:	74 69                	je     c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c00094da:	52                   	push   edx
c00094db:	52                   	push   edx
c00094dc:	50                   	push   eax
c00094dd:	68 98 5f 02 c0       	push   0xc0025f98
c00094e2:	e8 4f 59 01 00       	call   c001ee36 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094e7:	eb e1                	jmp    c00094ca <KeGetFileFromDescriptor(int)+0x23>
c00094e9:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094ee:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094f4:	74 4d                	je     c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c00094f6:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c00094fb:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009501:	74 40                	je     c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c0009503:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009508:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000950e:	74 33                	je     c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c0009510:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c0009515:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000951b:	74 26                	je     c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c000951d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009523:	83 f8 08             	cmp    eax,0x8
c0009526:	77 09                	ja     c0009531 <KeGetFileFromDescriptor(int)+0x8a>
c0009528:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c000952f:	eb 12                	jmp    c0009543 <KeGetFileFromDescriptor(int)+0x9c>
c0009531:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009537:	83 fb 08             	cmp    ebx,0x8
c000953a:	77 95                	ja     c00094d1 <KeGetFileFromDescriptor(int)+0x2a>
c000953c:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c0009543:	83 c4 08             	add    esp,0x8
c0009546:	5b                   	pop    ebx
c0009547:	c3                   	ret    

c0009548 <__static_initialization_and_destruction_0(int, int)>:
c0009548:	83 ec 0c             	sub    esp,0xc
c000954b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009550:	75 34                	jne    c0009586 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009552:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000955a:	75 2a                	jne    c0009586 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955c:	83 ec 0c             	sub    esp,0xc
c000955f:	68 98 5f 02 c0       	push   0xc0025f98
c0009564:	e8 0d 57 01 00       	call   c001ec76 <LinkedList<UnixFile>::LinkedList()>
c0009569:	83 c4 10             	add    esp,0x10
c000956c:	83 ec 04             	sub    esp,0x4
c000956f:	68 b8 26 02 c0       	push   0xc00226b8
c0009574:	68 98 5f 02 c0       	push   0xc0025f98
c0009579:	68 74 ec 01 c0       	push   0xc001ec74
c000957e:	e8 77 12 00 00       	call   c000a7fa <__cxa_atexit>
c0009583:	83 c4 10             	add    esp,0x10
c0009586:	90                   	nop
c0009587:	83 c4 0c             	add    esp,0xc
c000958a:	c3                   	ret    

c000958b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000958b:	83 ec 0c             	sub    esp,0xc
c000958e:	83 ec 08             	sub    esp,0x8
c0009591:	68 ff ff 00 00       	push   0xffff
c0009596:	6a 01                	push   0x1
c0009598:	e8 ab ff ff ff       	call   c0009548 <__static_initialization_and_destruction_0(int, int)>
c000959d:	83 c4 10             	add    esp,0x10
c00095a0:	83 c4 0c             	add    esp,0xc
c00095a3:	c3                   	ret    

c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095a4:	53                   	push   ebx
c00095a5:	8b 15 48 27 02 c0    	mov    edx,DWORD PTR ds:0xc0022748
c00095ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095b3:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095b9:	89 d8                	mov    eax,ebx
c00095bb:	d1 e8                	shr    eax,1
c00095bd:	01 d0                	add    eax,edx
c00095bf:	80 e3 01             	and    bl,0x1
c00095c2:	8a 10                	mov    dl,BYTE PTR [eax]
c00095c4:	75 09                	jne    c00095cf <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095c6:	83 e2 f0             	and    edx,0xfffffff0
c00095c9:	09 ca                	or     edx,ecx
c00095cb:	88 10                	mov    BYTE PTR [eax],dl
c00095cd:	5b                   	pop    ebx
c00095ce:	c3                   	ret    
c00095cf:	83 e2 0f             	and    edx,0xf
c00095d2:	0f b6 c9             	movzx  ecx,cl
c00095d5:	c1 e1 04             	shl    ecx,0x4
c00095d8:	09 ca                	or     edx,ecx
c00095da:	88 10                	mov    BYTE PTR [eax],dl
c00095dc:	5b                   	pop    ebx
c00095dd:	c3                   	ret    

c00095de <Virt::getPageState(unsigned long)>:
c00095de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095e2:	8b 0d 48 27 02 c0    	mov    ecx,DWORD PTR ds:0xc0022748
c00095e8:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095ee:	89 d0                	mov    eax,edx
c00095f0:	d1 e8                	shr    eax,1
c00095f2:	80 e2 01             	and    dl,0x1
c00095f5:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095f8:	74 03                	je     c00095fd <Virt::getPageState(unsigned long)+0x1f>
c00095fa:	c1 e8 04             	shr    eax,0x4
c00095fd:	83 e0 0f             	and    eax,0xf
c0009600:	c3                   	ret    

c0009601 <Virt::allocateKernelVirtualPages(int)>:
c0009601:	55                   	push   ebp
c0009602:	31 ed                	xor    ebp,ebp
c0009604:	57                   	push   edi
c0009605:	31 ff                	xor    edi,edi
c0009607:	56                   	push   esi
c0009608:	53                   	push   ebx
c0009609:	31 db                	xor    ebx,ebx
c000960b:	83 ec 0c             	sub    esp,0xc
c000960e:	8b 35 44 27 02 c0    	mov    esi,DWORD PTR ds:0xc0022744
c0009614:	56                   	push   esi
c0009615:	e8 c4 ff ff ff       	call   c00095de <Virt::getPageState(unsigned long)>
c000961a:	5a                   	pop    edx
c000961b:	84 c0                	test   al,al
c000961d:	75 41                	jne    c0009660 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000961f:	85 db                	test   ebx,ebx
c0009621:	75 02                	jne    c0009625 <Virt::allocateKernelVirtualPages(int)+0x24>
c0009623:	89 f5                	mov    ebp,esi
c0009625:	83 c3 01             	add    ebx,0x1
c0009628:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000962c:	74 5f                	je     c000968d <Virt::allocateKernelVirtualPages(int)+0x8c>
c000962e:	83 c6 01             	add    esi,0x1
c0009631:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009637:	76 34                	jbe    c000966d <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009639:	c7 05 44 27 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022744,0xc8000
c0009643:	f7 c7 01 00 00 00    	test   edi,0x1
c0009649:	75 2a                	jne    c0009675 <Virt::allocateKernelVirtualPages(int)+0x74>
c000964b:	be 00 80 0c 00       	mov    esi,0xc8000
c0009650:	bf 01 00 00 00       	mov    edi,0x1
c0009655:	56                   	push   esi
c0009656:	e8 83 ff ff ff       	call   c00095de <Virt::getPageState(unsigned long)>
c000965b:	5a                   	pop    edx
c000965c:	84 c0                	test   al,al
c000965e:	74 bf                	je     c000961f <Virt::allocateKernelVirtualPages(int)+0x1e>
c0009660:	31 db                	xor    ebx,ebx
c0009662:	83 c6 01             	add    esi,0x1
c0009665:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c000966b:	77 cc                	ja     c0009639 <Virt::allocateKernelVirtualPages(int)+0x38>
c000966d:	89 35 44 27 02 c0    	mov    DWORD PTR ds:0xc0022744,esi
c0009673:	eb 9f                	jmp    c0009614 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009675:	83 ec 0c             	sub    esp,0xc
c0009678:	68 0c 02 02 c0       	push   0xc002020c
c000967d:	e8 59 75 00 00       	call   c0010bdb <KePanic(char const*)>
c0009682:	8b 35 44 27 02 c0    	mov    esi,DWORD PTR ds:0xc0022744
c0009688:	83 c4 10             	add    esp,0x10
c000968b:	eb 87                	jmp    c0009614 <Virt::allocateKernelVirtualPages(int)+0x13>
c000968d:	89 2d 44 27 02 c0    	mov    DWORD PTR ds:0xc0022744,ebp
c0009693:	83 fb 01             	cmp    ebx,0x1
c0009696:	74 6f                	je     c0009707 <Virt::allocateKernelVirtualPages(int)+0x106>
c0009698:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000969c:	85 c9                	test   ecx,ecx
c000969e:	74 49                	je     c00096e9 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096a0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a4:	89 e8                	mov    eax,ebp
c00096a6:	31 db                	xor    ebx,ebx
c00096a8:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096ab:	eb 18                	jmp    c00096c5 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096ad:	6a 01                	push   0x1
c00096af:	83 c3 01             	add    ebx,0x1
c00096b2:	50                   	push   eax
c00096b3:	e8 ec fe ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096b8:	58                   	pop    eax
c00096b9:	5a                   	pop    edx
c00096ba:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096be:	74 29                	je     c00096e9 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096c0:	a1 44 27 02 c0       	mov    eax,ds:0xc0022744
c00096c5:	8d 50 01             	lea    edx,[eax+0x1]
c00096c8:	85 db                	test   ebx,ebx
c00096ca:	89 15 44 27 02 c0    	mov    DWORD PTR ds:0xc0022744,edx
c00096d0:	74 24                	je     c00096f6 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096d2:	39 df                	cmp    edi,ebx
c00096d4:	75 d7                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xac>
c00096d6:	6a 03                	push   0x3
c00096d8:	83 c3 01             	add    ebx,0x1
c00096db:	50                   	push   eax
c00096dc:	e8 c3 fe ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096e1:	59                   	pop    ecx
c00096e2:	5e                   	pop    esi
c00096e3:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096e7:	75 d7                	jne    c00096c0 <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096e9:	83 c4 0c             	add    esp,0xc
c00096ec:	89 e8                	mov    eax,ebp
c00096ee:	5b                   	pop    ebx
c00096ef:	c1 e0 0c             	shl    eax,0xc
c00096f2:	5e                   	pop    esi
c00096f3:	5f                   	pop    edi
c00096f4:	5d                   	pop    ebp
c00096f5:	c3                   	ret    
c00096f6:	6a 02                	push   0x2
c00096f8:	bb 01 00 00 00       	mov    ebx,0x1
c00096fd:	50                   	push   eax
c00096fe:	e8 a1 fe ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009703:	58                   	pop    eax
c0009704:	5a                   	pop    edx
c0009705:	eb b9                	jmp    c00096c0 <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009707:	6a 04                	push   0x4
c0009709:	8d 45 01             	lea    eax,[ebp+0x1]
c000970c:	55                   	push   ebp
c000970d:	a3 44 27 02 c0       	mov    ds:0xc0022744,eax
c0009712:	e8 8d fe ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009717:	5b                   	pop    ebx
c0009718:	89 e8                	mov    eax,ebp
c000971a:	5e                   	pop    esi
c000971b:	c1 e0 0c             	shl    eax,0xc
c000971e:	83 c4 0c             	add    esp,0xc
c0009721:	5b                   	pop    ebx
c0009722:	5e                   	pop    esi
c0009723:	5f                   	pop    edi
c0009724:	5d                   	pop    ebp
c0009725:	c3                   	ret    

c0009726 <Virt::freeSwapfilePage(unsigned long)>:
c0009726:	53                   	push   ebx
c0009727:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c000972d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009731:	b8 01 00 00 00       	mov    eax,0x1
c0009736:	89 cb                	mov    ebx,ecx
c0009738:	d3 e0                	shl    eax,cl
c000973a:	c1 eb 05             	shr    ebx,0x5
c000973d:	f7 d0                	not    eax
c000973f:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0009742:	21 c1                	and    ecx,eax
c0009744:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009747:	5b                   	pop    ebx
c0009748:	c3                   	ret    

c0009749 <Virt::swapIDToSector(unsigned long)>:
c0009749:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000974d:	8b 15 4c 27 02 c0    	mov    edx,DWORD PTR ds:0xc002274c
c0009753:	8b 0d 54 27 02 c0    	mov    ecx,DWORD PTR ds:0xc0022754
c0009759:	0f af c2             	imul   eax,edx
c000975c:	01 c8                	add    eax,ecx
c000975e:	c3                   	ret    

c000975f <Virt::allocateSwapfilePage()>:
c000975f:	55                   	push   ebp
c0009760:	31 d2                	xor    edx,edx
c0009762:	57                   	push   edi
c0009763:	56                   	push   esi
c0009764:	53                   	push   ebx
c0009765:	83 ec 0c             	sub    esp,0xc
c0009768:	8b 0d 4c 27 02 c0    	mov    ecx,DWORD PTR ds:0xc002274c
c000976e:	a1 50 27 02 c0       	mov    eax,ds:0xc0022750
c0009773:	f7 f1                	div    ecx
c0009775:	39 0d 50 27 02 c0    	cmp    DWORD PTR ds:0xc0022750,ecx
c000977b:	72 2f                	jb     c00097ac <Virt::allocateSwapfilePage()+0x4d>
c000977d:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c0009783:	8b 16                	mov    edx,DWORD PTR [esi]
c0009785:	f6 c2 01             	test   dl,0x1
c0009788:	74 3e                	je     c00097c8 <Virt::allocateSwapfilePage()+0x69>
c000978a:	31 c9                	xor    ecx,ecx
c000978c:	bf 01 00 00 00       	mov    edi,0x1
c0009791:	eb 12                	jmp    c00097a5 <Virt::allocateSwapfilePage()+0x46>
c0009793:	89 fd                	mov    ebp,edi
c0009795:	89 ca                	mov    edx,ecx
c0009797:	d3 e5                	shl    ebp,cl
c0009799:	c1 ea 05             	shr    edx,0x5
c000979c:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000979f:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097a1:	85 ea                	test   edx,ebp
c00097a3:	74 2c                	je     c00097d1 <Virt::allocateSwapfilePage()+0x72>
c00097a5:	83 c1 01             	add    ecx,0x1
c00097a8:	39 c8                	cmp    eax,ecx
c00097aa:	77 e7                	ja     c0009793 <Virt::allocateSwapfilePage()+0x34>
c00097ac:	83 ec 0c             	sub    esp,0xc
c00097af:	68 a0 04 02 c0       	push   0xc00204a0
c00097b4:	e8 22 74 00 00       	call   c0010bdb <KePanic(char const*)>
c00097b9:	83 c4 10             	add    esp,0x10
c00097bc:	31 c9                	xor    ecx,ecx
c00097be:	83 c4 0c             	add    esp,0xc
c00097c1:	89 c8                	mov    eax,ecx
c00097c3:	5b                   	pop    ebx
c00097c4:	5e                   	pop    esi
c00097c5:	5f                   	pop    edi
c00097c6:	5d                   	pop    ebp
c00097c7:	c3                   	ret    
c00097c8:	89 f3                	mov    ebx,esi
c00097ca:	bd 01 00 00 00       	mov    ebp,0x1
c00097cf:	31 c9                	xor    ecx,ecx
c00097d1:	09 ea                	or     edx,ebp
c00097d3:	89 c8                	mov    eax,ecx
c00097d5:	89 13                	mov    DWORD PTR [ebx],edx
c00097d7:	83 c4 0c             	add    esp,0xc
c00097da:	5b                   	pop    ebx
c00097db:	5e                   	pop    esi
c00097dc:	5f                   	pop    edi
c00097dd:	5d                   	pop    ebp
c00097de:	c3                   	ret    

c00097df <Virt::virtualMemorySetup()>:
c00097df:	53                   	push   ebx
c00097e0:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e5:	6a 0f                	push   0xf
c00097e7:	53                   	push   ebx
c00097e8:	83 c3 01             	add    ebx,0x1
c00097eb:	e8 b4 fd ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f0:	58                   	pop    eax
c00097f1:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097f7:	5a                   	pop    edx
c00097f8:	75 eb                	jne    c00097e5 <Virt::virtualMemorySetup()+0x6>
c00097fa:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097ff:	6a 00                	push   0x0
c0009801:	53                   	push   ebx
c0009802:	83 c3 01             	add    ebx,0x1
c0009805:	e8 9a fd ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980a:	59                   	pop    ecx
c000980b:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009811:	58                   	pop    eax
c0009812:	75 eb                	jne    c00097ff <Virt::virtualMemorySetup()+0x20>
c0009814:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009819:	6a 0f                	push   0xf
c000981b:	53                   	push   ebx
c000981c:	83 c3 01             	add    ebx,0x1
c000981f:	e8 80 fd ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009824:	58                   	pop    eax
c0009825:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000982b:	5a                   	pop    edx
c000982c:	75 eb                	jne    c0009819 <Virt::virtualMemorySetup()+0x3a>
c000982e:	5b                   	pop    ebx
c000982f:	c3                   	ret    

c0009830 <Virt::setupPageSwapping(int)>:
c0009830:	53                   	push   ebx
c0009831:	83 ec 0c             	sub    esp,0xc
c0009834:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009838:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000983d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0009843:	8b 10                	mov    edx,DWORD PTR [eax]
c0009845:	53                   	push   ebx
c0009846:	c1 e3 0b             	shl    ebx,0xb
c0009849:	68 b7 04 02 c0       	push   0xc00204b7
c000984e:	50                   	push   eax
c000984f:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009852:	89 1d 50 27 02 c0    	mov    DWORD PTR ds:0xc0022750,ebx
c0009858:	c6 05 58 27 02 c0 43 	mov    BYTE PTR ds:0xc0022758,0x43
c000985f:	c1 eb 08             	shr    ebx,0x8
c0009862:	a3 54 27 02 c0       	mov    ds:0xc0022754,eax
c0009867:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000986a:	c7 05 4c 27 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002274c,0x8
c0009874:	e8 35 e2 ff ff       	call   c0007aae <malloc>
c0009879:	83 c4 0c             	add    esp,0xc
c000987c:	89 c1                	mov    ecx,eax
c000987e:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c0009883:	31 d2                	xor    edx,edx
c0009885:	a1 50 27 02 c0       	mov    eax,ds:0xc0022750
c000988a:	f7 35 4c 27 02 c0    	div    DWORD PTR ds:0xc002274c
c0009890:	c1 e8 05             	shr    eax,0x5
c0009893:	50                   	push   eax
c0009894:	6a 00                	push   0x0
c0009896:	51                   	push   ecx
c0009897:	e8 54 6c ff ff       	call   c00004f0 <memset>
c000989c:	83 c4 18             	add    esp,0x18
c000989f:	5b                   	pop    ebx
c00098a0:	c3                   	ret    
c00098a1:	90                   	nop

c00098a2 <VAS::VAS(VAS*)>:
c00098a2:	83 ec 0c             	sub    esp,0xc
c00098a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098bb:	83 ec 0c             	sub    esp,0xc
c00098be:	68 2c 02 02 c0       	push   0xc002022c
c00098c3:	e8 13 73 00 00       	call   c0010bdb <KePanic(char const*)>
c00098c8:	83 c4 10             	add    esp,0x10
c00098cb:	90                   	nop
c00098cc:	83 c4 0c             	add    esp,0xc
c00098cf:	c3                   	ret    

c00098d0 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098d4:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098d9:	89 c2                	mov    edx,eax
c00098db:	c1 e8 0a             	shr    eax,0xa
c00098de:	c1 ea 16             	shr    edx,0x16
c00098e1:	83 f9 01             	cmp    ecx,0x1
c00098e4:	19 c9                	sbb    ecx,ecx
c00098e6:	c1 e2 0c             	shl    edx,0xc
c00098e9:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098ef:	25 fc 0f 00 00       	and    eax,0xffc
c00098f4:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098fb:	01 d0                	add    eax,edx
c00098fd:	c3                   	ret    

c00098fe <VAS::getPageTableEntry(unsigned long)>:
c00098fe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009902:	89 ca                	mov    edx,ecx
c0009904:	c1 e9 0a             	shr    ecx,0xa
c0009907:	c1 ea 16             	shr    edx,0x16
c000990a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009910:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009916:	c1 e0 0c             	shl    eax,0xc
c0009919:	8d 04 08             	lea    eax,[eax+ecx*1]
c000991c:	c3                   	ret    

c000991d <Virt::freeKernelVirtualPages(unsigned long)>:
c000991d:	55                   	push   ebp
c000991e:	57                   	push   edi
c000991f:	bf 01 00 00 00       	mov    edi,0x1
c0009924:	56                   	push   esi
c0009925:	53                   	push   ebx
c0009926:	83 ec 1c             	sub    esp,0x1c
c0009929:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000992d:	c1 ee 0c             	shr    esi,0xc
c0009930:	eb 48                	jmp    c000997a <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009932:	83 ec 08             	sub    esp,0x8
c0009935:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000993a:	55                   	push   ebp
c000993b:	50                   	push   eax
c000993c:	e8 bd ff ff ff       	call   c00098fe <VAS::getPageTableEntry(unsigned long)>
c0009941:	83 c4 10             	add    esp,0x10
c0009944:	8b 10                	mov    edx,DWORD PTR [eax]
c0009946:	f6 c6 04             	test   dh,0x4
c0009949:	75 70                	jne    c00099bb <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000994b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009951:	83 fb 04             	cmp    ebx,0x4
c0009954:	0f 84 8a 00 00 00    	je     c00099e4 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000995a:	83 fb 02             	cmp    ebx,0x2
c000995d:	0f 84 9a 00 00 00    	je     c00099fd <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009963:	83 fb 03             	cmp    ebx,0x3
c0009966:	0f 84 be 00 00 00    	je     c0009a2a <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000996c:	83 fb 01             	cmp    ebx,0x1
c000996f:	0f 84 a2 00 00 00    	je     c0009a17 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009975:	83 c6 01             	add    esi,0x1
c0009978:	31 ff                	xor    edi,edi
c000997a:	56                   	push   esi
c000997b:	89 f5                	mov    ebp,esi
c000997d:	e8 5c fc ff ff       	call   c00095de <Virt::getPageState(unsigned long)>
c0009982:	c1 e5 0c             	shl    ebp,0xc
c0009985:	0f b6 d8             	movzx  ebx,al
c0009988:	5a                   	pop    edx
c0009989:	85 db                	test   ebx,ebx
c000998b:	75 a5                	jne    c0009932 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000998d:	83 ec 0c             	sub    esp,0xc
c0009990:	68 ce 04 02 c0       	push   0xc00204ce
c0009995:	e8 41 72 00 00       	call   c0010bdb <KePanic(char const*)>
c000999a:	5a                   	pop    edx
c000999b:	59                   	pop    ecx
c000999c:	55                   	push   ebp
c000999d:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c00099a3:	55                   	push   ebp
c00099a4:	e8 55 ff ff ff       	call   c00098fe <VAS::getPageTableEntry(unsigned long)>
c00099a9:	83 c4 10             	add    esp,0x10
c00099ac:	8b 10                	mov    edx,DWORD PTR [eax]
c00099ae:	f6 c6 04             	test   dh,0x4
c00099b1:	75 08                	jne    c00099bb <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099b3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099b9:	eb ba                	jmp    c0009975 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099bf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099c5:	83 ec 0c             	sub    esp,0xc
c00099c8:	52                   	push   edx
c00099c9:	e8 7b e3 ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	83 fb 04             	cmp    ebx,0x4
c00099d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099de:	0f 85 76 ff ff ff    	jne    c000995a <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099e4:	83 e7 01             	and    edi,0x1
c00099e7:	75 46                	jne    c0009a2f <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099e9:	c7 44 24 30 50 02 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020250
c00099f1:	83 c4 1c             	add    esp,0x1c
c00099f4:	5b                   	pop    ebx
c00099f5:	5e                   	pop    esi
c00099f6:	5f                   	pop    edi
c00099f7:	5d                   	pop    ebp
c00099f8:	e9 de 71 00 00       	jmp    c0010bdb <KePanic(char const*)>
c00099fd:	83 e7 01             	and    edi,0x1
c0009a00:	75 15                	jne    c0009a17 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a02:	83 ec 0c             	sub    esp,0xc
c0009a05:	68 ea 04 02 c0       	push   0xc00204ea
c0009a0a:	e8 cc 71 00 00       	call   c0010bdb <KePanic(char const*)>
c0009a0f:	83 c4 10             	add    esp,0x10
c0009a12:	e9 5e ff ff ff       	jmp    c0009975 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a17:	83 ec 08             	sub    esp,0x8
c0009a1a:	6a 00                	push   0x0
c0009a1c:	56                   	push   esi
c0009a1d:	e8 82 fb ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	e9 4b ff ff ff       	jmp    c0009975 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a2a:	83 e7 01             	and    edi,0x1
c0009a2d:	75 16                	jne    c0009a45 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a2f:	83 ec 08             	sub    esp,0x8
c0009a32:	6a 00                	push   0x0
c0009a34:	56                   	push   esi
c0009a35:	e8 6a fb ff ff       	call   c00095a4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a3a:	83 c4 10             	add    esp,0x10
c0009a3d:	83 c4 1c             	add    esp,0x1c
c0009a40:	5b                   	pop    ebx
c0009a41:	5e                   	pop    esi
c0009a42:	5f                   	pop    edi
c0009a43:	5d                   	pop    ebp
c0009a44:	c3                   	ret    
c0009a45:	c7 44 24 30 06 05 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020506
c0009a4d:	83 c4 1c             	add    esp,0x1c
c0009a50:	5b                   	pop    ebx
c0009a51:	5e                   	pop    esi
c0009a52:	5f                   	pop    edi
c0009a53:	5d                   	pop    ebp
c0009a54:	e9 82 71 00 00       	jmp    c0010bdb <KePanic(char const*)>
c0009a59:	90                   	nop

c0009a5a <VAS::freeAllocatedPages(unsigned long)>:
c0009a5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a62:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a66:	74 09                	je     c0009a71 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a68:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a6c:	e9 ac fe ff ff       	jmp    c000991d <Virt::freeKernelVirtualPages(unsigned long)>
c0009a71:	c7 44 24 04 74 02 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020274
c0009a79:	e9 f9 0e 00 00       	jmp    c000a977 <Dbg::kprintf(char const*, ...)>

c0009a7e <VAS::virtualToPhysical(unsigned long)>:
c0009a7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a82:	50                   	push   eax
c0009a83:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a87:	52                   	push   edx
c0009a88:	e8 71 fe ff ff       	call   c00098fe <VAS::getPageTableEntry(unsigned long)>
c0009a8d:	59                   	pop    ecx
c0009a8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a90:	5a                   	pop    edx
c0009a91:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a96:	c3                   	ret    
c0009a97:	90                   	nop

c0009a98 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a98:	55                   	push   ebp
c0009a99:	57                   	push   edi
c0009a9a:	56                   	push   esi
c0009a9b:	53                   	push   ebx
c0009a9c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aa0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009aa4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009aa8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aac:	85 db                	test   ebx,ebx
c0009aae:	7e 24                	jle    c0009ad4 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009ab0:	c1 e3 0c             	shl    ebx,0xc
c0009ab3:	01 f3                	add    ebx,esi
c0009ab5:	56                   	push   esi
c0009ab6:	81 c6 00 10 00 00    	add    esi,0x1000
c0009abc:	55                   	push   ebp
c0009abd:	e8 3c fe ff ff       	call   c00098fe <VAS::getPageTableEntry(unsigned long)>
c0009ac2:	5a                   	pop    edx
c0009ac3:	59                   	pop    ecx
c0009ac4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ac6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009aca:	21 f9                	and    ecx,edi
c0009acc:	09 d1                	or     ecx,edx
c0009ace:	39 f3                	cmp    ebx,esi
c0009ad0:	89 08                	mov    DWORD PTR [eax],ecx
c0009ad2:	75 e1                	jne    c0009ab5 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ad4:	5b                   	pop    ebx
c0009ad5:	5e                   	pop    esi
c0009ad6:	5f                   	pop    edi
c0009ad7:	5d                   	pop    ebp
c0009ad8:	c3                   	ret    
c0009ad9:	90                   	nop

c0009ada <VAS::VAS()>:
c0009ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ade:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009af0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af4:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009af9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009afd:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b05:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0c:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b13:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b18:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b1d:	29 c2                	sub    edx,eax
c0009b1f:	89 d0                	mov    eax,edx
c0009b21:	05 ff 0f 00 00       	add    eax,0xfff
c0009b26:	c1 e8 0c             	shr    eax,0xc
c0009b29:	89 c2                	mov    edx,eax
c0009b2b:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b30:	6a 04                	push   0x4
c0009b32:	6a ff                	push   0xffffffff
c0009b34:	52                   	push   edx
c0009b35:	50                   	push   eax
c0009b36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b3a:	e8 59 ff ff ff       	call   c0009a98 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b3f:	83 c4 14             	add    esp,0x14
c0009b42:	90                   	nop
c0009b43:	c3                   	ret    

c0009b44 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b44:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b49:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b4f:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b56:	75 01                	jne    c0009b59 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b58:	c3                   	ret    
c0009b59:	68 80 00 00 00       	push   0x80
c0009b5e:	6a ff                	push   0xffffffff
c0009b60:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b64:	50                   	push   eax
c0009b65:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b69:	52                   	push   edx
c0009b6a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b6e:	51                   	push   ecx
c0009b6f:	e8 24 ff ff ff       	call   c0009a98 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b74:	83 c4 14             	add    esp,0x14
c0009b77:	c3                   	ret    

c0009b78 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b7c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b83:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b86:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b8b:	83 f8 01             	cmp    eax,0x1
c0009b8e:	19 c0                	sbb    eax,eax
c0009b90:	83 ca 03             	or     edx,0x3
c0009b93:	83 e0 fc             	and    eax,0xfffffffc
c0009b96:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b9d:	0f 20 d8             	mov    eax,cr3
c0009ba0:	0f 22 d8             	mov    cr3,eax
c0009ba3:	c3                   	ret    

c0009ba4 <VAS::~VAS()>:
c0009ba4:	83 ec 2c             	sub    esp,0x2c
c0009ba7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009baf:	fa                   	cli    
c0009bb0:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0009bb5:	83 c0 01             	add    eax,0x1
c0009bb8:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0009bbd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bc2:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bc4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bc7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bcd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bd1:	6a 01                	push   0x1
c0009bd3:	50                   	push   eax
c0009bd4:	e8 9f ff ff ff       	call   c0009b78 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bd9:	83 c4 0c             	add    esp,0xc
c0009bdc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009be4:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bec:	0f 8f d8 00 00 00    	jg     c0009cca <VAS::~VAS()+0x126>
c0009bf2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bf6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009bf9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009bfd:	c1 e2 02             	shl    edx,0x2
c0009c00:	01 d0                	add    eax,edx
c0009c02:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c0c:	83 e0 01             	and    eax,0x1
c0009c0f:	0f 84 ab 00 00 00    	je     c0009cc0 <VAS::~VAS()+0x11c>
c0009c15:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c1d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c25:	7f 74                	jg     c0009c9b <VAS::~VAS()+0xf7>
c0009c27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c2b:	c1 e0 0a             	shl    eax,0xa
c0009c2e:	89 c2                	mov    edx,eax
c0009c30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c34:	01 d0                	add    eax,edx
c0009c36:	c1 e0 0c             	shl    eax,0xc
c0009c39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c3d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c42:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c44:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c47:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c4d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c51:	6a 01                	push   0x1
c0009c53:	50                   	push   eax
c0009c54:	e8 77 fc ff ff       	call   c00098d0 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c59:	83 c4 0c             	add    esp,0xc
c0009c5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c64:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c66:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6e:	25 01 04 00 00       	and    eax,0x401
c0009c73:	3d 01 04 00 00       	cmp    eax,0x401
c0009c78:	75 1a                	jne    c0009c94 <VAS::~VAS()+0xf0>
c0009c7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c83:	83 ec 0c             	sub    esp,0xc
c0009c86:	50                   	push   eax
c0009c87:	e8 bd e0 ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c0009c8c:	83 c4 10             	add    esp,0x10
c0009c8f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c94:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c99:	eb 82                	jmp    c0009c1d <VAS::~VAS()+0x79>
c0009c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c9f:	25 00 04 00 00       	and    eax,0x400
c0009ca4:	74 1a                	je     c0009cc0 <VAS::~VAS()+0x11c>
c0009ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009caa:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009caf:	83 ec 0c             	sub    esp,0xc
c0009cb2:	50                   	push   eax
c0009cb3:	e8 91 e0 ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c0009cb8:	83 c4 10             	add    esp,0x10
c0009cbb:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cc0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cc5:	e9 1a ff ff ff       	jmp    c0009be4 <VAS::~VAS()+0x40>
c0009cca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cce:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cd1:	83 ec 0c             	sub    esp,0xc
c0009cd4:	50                   	push   eax
c0009cd5:	e8 43 fc ff ff       	call   c000991d <Virt::freeKernelVirtualPages(unsigned long)>
c0009cda:	83 c4 10             	add    esp,0x10
c0009cdd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ce1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009ce4:	83 ec 0c             	sub    esp,0xc
c0009ce7:	50                   	push   eax
c0009ce8:	e8 5c e0 ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c0009ced:	83 c4 10             	add    esp,0x10
c0009cf0:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cf5:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0009cfa:	83 e8 01             	sub    eax,0x1
c0009cfd:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0009d02:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0009d07:	85 c0                	test   eax,eax
c0009d09:	75 01                	jne    c0009d0c <VAS::~VAS()+0x168>
c0009d0b:	fb                   	sti    
c0009d0c:	90                   	nop
c0009d0d:	83 c4 2c             	add    esp,0x2c
c0009d10:	c3                   	ret    
c0009d11:	90                   	nop

c0009d12 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d12:	55                   	push   ebp
c0009d13:	57                   	push   edi
c0009d14:	56                   	push   esi
c0009d15:	53                   	push   ebx
c0009d16:	83 ec 1c             	sub    esp,0x1c
c0009d19:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d1d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d21:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d27:	77 08                	ja     c0009d31 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d29:	0f 20 d8             	mov    eax,cr3
c0009d2c:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d2f:	75 49                	jne    c0009d7a <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d31:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d35:	09 d8                	or     eax,ebx
c0009d37:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d3c:	75 59                	jne    c0009d97 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d3e:	89 de                	mov    esi,ebx
c0009d40:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d43:	c1 ee 16             	shr    esi,0x16
c0009d46:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d4d:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d51:	74 56                	je     c0009da9 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d53:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d57:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d5b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d61:	c1 eb 0a             	shr    ebx,0xa
c0009d64:	c1 e6 0c             	shl    esi,0xc
c0009d67:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d6d:	09 d0                	or     eax,edx
c0009d6f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d72:	83 c4 1c             	add    esp,0x1c
c0009d75:	5b                   	pop    ebx
c0009d76:	5e                   	pop    esi
c0009d77:	5f                   	pop    edi
c0009d78:	5d                   	pop    ebp
c0009d79:	c3                   	ret    
c0009d7a:	83 ec 0c             	sub    esp,0xc
c0009d7d:	68 98 02 02 c0       	push   0xc0020298
c0009d82:	e8 f0 0b 00 00       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0009d87:	83 c4 10             	add    esp,0x10
c0009d8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d8e:	09 d8                	or     eax,ebx
c0009d90:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d95:	74 a7                	je     c0009d3e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009d97:	83 ec 0c             	sub    esp,0xc
c0009d9a:	68 00 03 02 c0       	push   0xc0020300
c0009d9f:	e8 37 6e 00 00       	call   c0010bdb <KePanic(char const*)>
c0009da4:	83 c4 10             	add    esp,0x10
c0009da7:	eb 95                	jmp    c0009d3e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dad:	e8 00 e0 ff ff       	call   c0007db2 <Phys::allocatePage()>
c0009db2:	83 ec 0c             	sub    esp,0xc
c0009db5:	89 c5                	mov    ebp,eax
c0009db7:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009dbd:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dc1:	6a 01                	push   0x1
c0009dc3:	e8 39 f8 ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c0009dc8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dcf:	6a 01                	push   0x1
c0009dd1:	50                   	push   eax
c0009dd2:	55                   	push   ebp
c0009dd3:	81 cd 07 04 00 00    	or     ebp,0x407
c0009dd9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009ddd:	51                   	push   ecx
c0009dde:	e8 47 01 00 00       	call   c0009f2a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009de3:	83 c4 1c             	add    esp,0x1c
c0009de6:	68 00 10 00 00       	push   0x1000
c0009deb:	6a 00                	push   0x0
c0009ded:	50                   	push   eax
c0009dee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009df2:	e8 f9 66 ff ff       	call   c00004f0 <memset>
c0009df7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dfb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009dfe:	e8 1a fb ff ff       	call   c000991d <Virt::freeKernelVirtualPages(unsigned long)>
c0009e03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e07:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e0a:	83 c4 10             	add    esp,0x10
c0009e0d:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e10:	e9 3e ff ff ff       	jmp    c0009d53 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e15:	90                   	nop

c0009e16 <VAS::allocatePages(int, int)>:
c0009e16:	55                   	push   ebp
c0009e17:	57                   	push   edi
c0009e18:	56                   	push   esi
c0009e19:	53                   	push   ebx
c0009e1a:	83 ec 1c             	sub    esp,0x1c
c0009e1d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e21:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e25:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e29:	75 71                	jne    c0009e9c <VAS::allocatePages(int, int)+0x86>
c0009e2b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e32:	85 c0                	test   eax,eax
c0009e34:	74 4d                	je     c0009e83 <VAS::allocatePages(int, int)+0x6d>
c0009e36:	89 dd                	mov    ebp,ebx
c0009e38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e3c:	c1 e5 0c             	shl    ebp,0xc
c0009e3f:	01 c5                	add    ebp,eax
c0009e41:	85 db                	test   ebx,ebx
c0009e43:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e46:	7e 29                	jle    c0009e71 <VAS::allocatePages(int, int)+0x5b>
c0009e48:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e4c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e50:	81 cf 00 04 00 00    	or     edi,0x400
c0009e56:	e8 57 df ff ff       	call   c0007db2 <Phys::allocatePage()>
c0009e5b:	57                   	push   edi
c0009e5c:	53                   	push   ebx
c0009e5d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e63:	50                   	push   eax
c0009e64:	56                   	push   esi
c0009e65:	e8 a8 fe ff ff       	call   c0009d12 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e6a:	83 c4 10             	add    esp,0x10
c0009e6d:	39 dd                	cmp    ebp,ebx
c0009e6f:	75 e5                	jne    c0009e56 <VAS::allocatePages(int, int)+0x40>
c0009e71:	0f 20 d8             	mov    eax,cr3
c0009e74:	0f 22 d8             	mov    cr3,eax
c0009e77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e7b:	83 c4 1c             	add    esp,0x1c
c0009e7e:	5b                   	pop    ebx
c0009e7f:	5e                   	pop    esi
c0009e80:	5f                   	pop    edi
c0009e81:	5d                   	pop    ebp
c0009e82:	c3                   	ret    
c0009e83:	83 ec 0c             	sub    esp,0xc
c0009e86:	68 24 03 02 c0       	push   0xc0020324
c0009e8b:	e8 4b 6d 00 00       	call   c0010bdb <KePanic(char const*)>
c0009e90:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e93:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	eb 9a                	jmp    c0009e36 <VAS::allocatePages(int, int)+0x20>
c0009e9c:	83 ec 0c             	sub    esp,0xc
c0009e9f:	53                   	push   ebx
c0009ea0:	e8 5c f7 ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c0009ea5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea9:	83 c4 10             	add    esp,0x10
c0009eac:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009eb1:	77 37                	ja     c0009eea <VAS::allocatePages(int, int)+0xd4>
c0009eb3:	85 db                	test   ebx,ebx
c0009eb5:	7e ba                	jle    c0009e71 <VAS::allocatePages(int, int)+0x5b>
c0009eb7:	c1 e3 0c             	shl    ebx,0xc
c0009eba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ebe:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ec2:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ec5:	81 cf 00 04 00 00    	or     edi,0x400
c0009ecb:	89 c3                	mov    ebx,eax
c0009ecd:	e8 e0 de ff ff       	call   c0007db2 <Phys::allocatePage()>
c0009ed2:	57                   	push   edi
c0009ed3:	53                   	push   ebx
c0009ed4:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009eda:	50                   	push   eax
c0009edb:	56                   	push   esi
c0009edc:	e8 31 fe ff ff       	call   c0009d12 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ee1:	83 c4 10             	add    esp,0x10
c0009ee4:	39 dd                	cmp    ebp,ebx
c0009ee6:	75 e5                	jne    c0009ecd <VAS::allocatePages(int, int)+0xb7>
c0009ee8:	eb 87                	jmp    c0009e71 <VAS::allocatePages(int, int)+0x5b>
c0009eea:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009eef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef5:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009efc:	74 b5                	je     c0009eb3 <VAS::allocatePages(int, int)+0x9d>
c0009efe:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f02:	80 ce 01             	or     dh,0x1
c0009f05:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f09:	eb a8                	jmp    c0009eb3 <VAS::allocatePages(int, int)+0x9d>
c0009f0b:	90                   	nop

c0009f0c <VAS::setCPUSpecific(unsigned long)>:
c0009f0c:	83 ec 0c             	sub    esp,0xc
c0009f0f:	6a 05                	push   0x5
c0009f11:	68 00 00 40 c2       	push   0xc2400000
c0009f16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009f1a:	50                   	push   eax
c0009f1b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009f1f:	52                   	push   edx
c0009f20:	e8 ed fd ff ff       	call   c0009d12 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f25:	83 c4 1c             	add    esp,0x1c
c0009f28:	c3                   	ret    
c0009f29:	90                   	nop

c0009f2a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f2a:	55                   	push   ebp
c0009f2b:	57                   	push   edi
c0009f2c:	56                   	push   esi
c0009f2d:	53                   	push   ebx
c0009f2e:	83 ec 0c             	sub    esp,0xc
c0009f31:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f35:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f39:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f3d:	85 db                	test   ebx,ebx
c0009f3f:	7e 2f                	jle    c0009f70 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f41:	c1 e3 0c             	shl    ebx,0xc
c0009f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f48:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f4c:	01 d3                	add    ebx,edx
c0009f4e:	55                   	push   ebp
c0009f4f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f57:	29 c2                	sub    edx,eax
c0009f59:	01 f2                	add    edx,esi
c0009f5b:	52                   	push   edx
c0009f5c:	56                   	push   esi
c0009f5d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f63:	57                   	push   edi
c0009f64:	e8 a9 fd ff ff       	call   c0009d12 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f69:	83 c4 10             	add    esp,0x10
c0009f6c:	39 de                	cmp    esi,ebx
c0009f6e:	75 de                	jne    c0009f4e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f70:	0f 20 d8             	mov    eax,cr3
c0009f73:	0f 22 d8             	mov    cr3,eax
c0009f76:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f7a:	83 c4 0c             	add    esp,0xc
c0009f7d:	5b                   	pop    ebx
c0009f7e:	5e                   	pop    esi
c0009f7f:	5f                   	pop    edi
c0009f80:	5d                   	pop    ebp
c0009f81:	c3                   	ret    

c0009f82 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f82:	55                   	push   ebp
c0009f83:	57                   	push   edi
c0009f84:	56                   	push   esi
c0009f85:	53                   	push   ebx
c0009f86:	83 ec 1c             	sub    esp,0x1c
c0009f89:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f8d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f91:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f95:	09 f8                	or     eax,edi
c0009f97:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f9b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009fa0:	75 4f                	jne    c0009ff1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009fa2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009fa6:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009fa9:	c1 eb 16             	shr    ebx,0x16
c0009fac:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fb3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fb7:	74 52                	je     c000a00b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fb9:	0f b6 f2             	movzx  esi,dl
c0009fbc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fc0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fc4:	c1 e8 0a             	shr    eax,0xa
c0009fc7:	83 fe 01             	cmp    esi,0x1
c0009fca:	19 d2                	sbb    edx,edx
c0009fcc:	c1 e3 0c             	shl    ebx,0xc
c0009fcf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fd5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fda:	01 d8                	add    eax,ebx
c0009fdc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fe0:	09 d9                	or     ecx,ebx
c0009fe2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fe9:	83 c4 1c             	add    esp,0x1c
c0009fec:	5b                   	pop    ebx
c0009fed:	5e                   	pop    esi
c0009fee:	5f                   	pop    edi
c0009fef:	5d                   	pop    ebp
c0009ff0:	c3                   	ret    
c0009ff1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009ff5:	83 ec 0c             	sub    esp,0xc
c0009ff8:	68 50 03 02 c0       	push   0xc0020350
c0009ffd:	e8 d9 6b 00 00       	call   c0010bdb <KePanic(char const*)>
c000a002:	83 c4 10             	add    esp,0x10
c000a005:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a009:	eb 97                	jmp    c0009fa2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000a00b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a00f:	e8 9e dd ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a014:	83 ec 0c             	sub    esp,0xc
c000a017:	89 c5                	mov    ebp,eax
c000a019:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c000a01f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a023:	6a 01                	push   0x1
c000a025:	e8 d7 f5 ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000a02a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a031:	6a 01                	push   0x1
c000a033:	50                   	push   eax
c000a034:	55                   	push   ebp
c000a035:	81 cd 07 04 00 00    	or     ebp,0x407
c000a03b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a03f:	51                   	push   ecx
c000a040:	e8 e5 fe ff ff       	call   c0009f2a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a045:	83 c4 1c             	add    esp,0x1c
c000a048:	68 00 10 00 00       	push   0x1000
c000a04d:	6a 00                	push   0x0
c000a04f:	50                   	push   eax
c000a050:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a054:	e8 97 64 ff ff       	call   c00004f0 <memset>
c000a059:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a05d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a060:	e8 b8 f8 ff ff       	call   c000991d <Virt::freeKernelVirtualPages(unsigned long)>
c000a065:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a068:	83 c4 10             	add    esp,0x10
c000a06b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a06e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a072:	e9 42 ff ff ff       	jmp    c0009fb9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a077:	90                   	nop

c000a078 <VAS::VAS(bool)>:
c000a078:	53                   	push   ebx
c000a079:	83 ec 28             	sub    esp,0x28
c000a07c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a080:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a084:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a088:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a08f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a093:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a09a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a09e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a0a2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a0a5:	e8 08 dd ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a0aa:	89 c2                	mov    edx,eax
c000a0ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0b3:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a0b9:	83 ec 0c             	sub    esp,0xc
c000a0bc:	6a 01                	push   0x1
c000a0be:	e8 3e f5 ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000a0c3:	83 c4 10             	add    esp,0x10
c000a0c6:	89 c2                	mov    edx,eax
c000a0c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0cf:	83 ec 0c             	sub    esp,0xc
c000a0d2:	6a 03                	push   0x3
c000a0d4:	6a 01                	push   0x1
c000a0d6:	52                   	push   edx
c000a0d7:	50                   	push   eax
c000a0d8:	53                   	push   ebx
c000a0d9:	e8 4c fe ff ff       	call   c0009f2a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0de:	83 c4 20             	add    esp,0x20
c000a0e1:	89 c2                	mov    edx,eax
c000a0e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0e7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0ea:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0f2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0fa:	7f 1d                	jg     c000a119 <VAS::VAS(bool)+0xa1>
c000a0fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a100:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a103:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a107:	c1 e2 02             	shl    edx,0x2
c000a10a:	01 d0                	add    eax,edx
c000a10c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a112:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a117:	eb d9                	jmp    c000a0f2 <VAS::VAS(bool)+0x7a>
c000a119:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a121:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a129:	7f 7e                	jg     c000a1a9 <VAS::VAS(bool)+0x131>
c000a12b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a12f:	2d 00 02 00 00       	sub    eax,0x200
c000a134:	c1 e0 0c             	shl    eax,0xc
c000a137:	83 c8 05             	or     eax,0x5
c000a13a:	89 c2                	mov    edx,eax
c000a13c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a141:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a147:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a14d:	83 e0 10             	and    eax,0x10
c000a150:	0f b6 c0             	movzx  eax,al
c000a153:	85 c0                	test   eax,eax
c000a155:	74 07                	je     c000a15e <VAS::VAS(bool)+0xe6>
c000a157:	b8 00 01 00 00       	mov    eax,0x100
c000a15c:	eb 05                	jmp    c000a163 <VAS::VAS(bool)+0xeb>
c000a15e:	b8 00 00 00 00       	mov    eax,0x0
c000a163:	09 d0                	or     eax,edx
c000a165:	89 c1                	mov    ecx,eax
c000a167:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a16b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a172:	c1 e2 02             	shl    edx,0x2
c000a175:	01 d0                	add    eax,edx
c000a177:	89 ca                	mov    edx,ecx
c000a179:	89 10                	mov    DWORD PTR [eax],edx
c000a17b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a17f:	2d 40 03 00 00       	sub    eax,0x340
c000a184:	83 f8 7f             	cmp    eax,0x7f
c000a187:	77 16                	ja     c000a19f <VAS::VAS(bool)+0x127>
c000a189:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a18d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a190:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a194:	c1 e2 02             	shl    edx,0x2
c000a197:	01 d0                	add    eax,edx
c000a199:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a19f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a1a4:	e9 78 ff ff ff       	jmp    c000a121 <VAS::VAS(bool)+0xa9>
c000a1a9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1b4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1ba:	83 e0 10             	and    eax,0x10
c000a1bd:	0f b6 c0             	movzx  eax,al
c000a1c0:	85 c0                	test   eax,eax
c000a1c2:	74 07                	je     c000a1cb <VAS::VAS(bool)+0x153>
c000a1c4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1c9:	eb 05                	jmp    c000a1d0 <VAS::VAS(bool)+0x158>
c000a1cb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1d0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1d4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1d7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1dd:	89 02                	mov    DWORD PTR [edx],eax
c000a1df:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1ea:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a1f0:	83 ec 08             	sub    esp,0x8
c000a1f3:	50                   	push   eax
c000a1f4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a1f8:	e8 0f fd ff ff       	call   c0009f0c <VAS::setCPUSpecific(unsigned long)>
c000a1fd:	83 c4 10             	add    esp,0x10
c000a200:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a204:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a207:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a20c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a212:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a218:	83 e0 10             	and    eax,0x10
c000a21b:	0f b6 c0             	movzx  eax,al
c000a21e:	85 c0                	test   eax,eax
c000a220:	74 07                	je     c000a229 <VAS::VAS(bool)+0x1b1>
c000a222:	b8 00 01 00 00       	mov    eax,0x100
c000a227:	eb 05                	jmp    c000a22e <VAS::VAS(bool)+0x1b6>
c000a229:	b8 00 00 00 00       	mov    eax,0x0
c000a22e:	09 c2                	or     edx,eax
c000a230:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a234:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a237:	05 fc 0f 00 00       	add    eax,0xffc
c000a23c:	83 ca 03             	or     edx,0x3
c000a23f:	89 10                	mov    DWORD PTR [eax],edx
c000a241:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a246:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a24c:	83 ec 0c             	sub    esp,0xc
c000a24f:	50                   	push   eax
c000a250:	e8 c1 20 00 00       	call   c000c316 <Device::getName()>
c000a255:	83 c4 10             	add    esp,0x10
c000a258:	83 ec 08             	sub    esp,0x8
c000a25b:	68 20 05 02 c0       	push   0xc0020520
c000a260:	50                   	push   eax
c000a261:	e8 ea 64 ff ff       	call   c0000750 <strcmp>
c000a266:	83 c4 10             	add    esp,0x10
c000a269:	85 c0                	test   eax,eax
c000a26b:	0f 94 c0             	sete   al
c000a26e:	0f b6 c0             	movzx  eax,al
c000a271:	85 c0                	test   eax,eax
c000a273:	74 68                	je     c000a2dd <VAS::VAS(bool)+0x265>
c000a275:	fa                   	cli    
c000a276:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a27b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a281:	05 7c 09 00 00       	add    eax,0x97c
c000a286:	83 ec 0c             	sub    esp,0xc
c000a289:	50                   	push   eax
c000a28a:	e8 17 d3 ff ff       	call   c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a28f:	83 c4 10             	add    esp,0x10
c000a292:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a297:	89 c3                	mov    ebx,eax
c000a299:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a29e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2a4:	05 7c 09 00 00       	add    eax,0x97c
c000a2a9:	83 ec 0c             	sub    esp,0xc
c000a2ac:	50                   	push   eax
c000a2ad:	e8 f4 d2 ff ff       	call   c00075a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a2b2:	83 c4 10             	add    esp,0x10
c000a2b5:	83 ec 08             	sub    esp,0x8
c000a2b8:	50                   	push   eax
c000a2b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2bd:	e8 3c f6 ff ff       	call   c00098fe <VAS::getPageTableEntry(unsigned long)>
c000a2c2:	83 c4 10             	add    esp,0x10
c000a2c5:	8b 00                	mov    eax,DWORD PTR [eax]
c000a2c7:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2cc:	6a 11                	push   0x11
c000a2ce:	53                   	push   ebx
c000a2cf:	50                   	push   eax
c000a2d0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2d4:	e8 39 fa ff ff       	call   c0009d12 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2d9:	83 c4 10             	add    esp,0x10
c000a2dc:	fb                   	sti    
c000a2dd:	90                   	nop
c000a2de:	83 c4 28             	add    esp,0x28
c000a2e1:	5b                   	pop    ebx
c000a2e2:	c3                   	ret    
c000a2e3:	90                   	nop

c000a2e4 <VAS::evict(unsigned long)>:
c000a2e4:	55                   	push   ebp
c000a2e5:	57                   	push   edi
c000a2e6:	56                   	push   esi
c000a2e7:	53                   	push   ebx
c000a2e8:	83 ec 1c             	sub    esp,0x1c
c000a2eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2ef:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2f7:	e8 63 f4 ff ff       	call   c000975f <Virt::allocateSwapfilePage()>
c000a2fc:	89 c7                	mov    edi,eax
c000a2fe:	a1 4c 27 02 c0       	mov    eax,ds:0xc002274c
c000a303:	85 c0                	test   eax,eax
c000a305:	7e 40                	jle    c000a347 <VAS::evict(unsigned long)+0x63>
c000a307:	89 ee                	mov    esi,ebp
c000a309:	31 db                	xor    ebx,ebx
c000a30b:	83 ec 0c             	sub    esp,0xc
c000a30e:	57                   	push   edi
c000a30f:	e8 35 f4 ff ff       	call   c0009749 <Virt::swapIDToSector(unsigned long)>
c000a314:	89 34 24             	mov    DWORD PTR [esp],esi
c000a317:	01 d8                	add    eax,ebx
c000a319:	6a 01                	push   0x1
c000a31b:	31 d2                	xor    edx,edx
c000a31d:	83 c3 01             	add    ebx,0x1
c000a320:	52                   	push   edx
c000a321:	81 c6 00 02 00 00    	add    esi,0x200
c000a327:	50                   	push   eax
c000a328:	0f be 05 58 27 02 c0 	movsx  eax,BYTE PTR ds:0xc0022758
c000a32f:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c000a336:	50                   	push   eax
c000a337:	e8 94 31 00 00       	call   c000d4d0 <LogicalDisk::write(unsigned long long, int, void*)>
c000a33c:	83 c4 20             	add    esp,0x20
c000a33f:	39 1d 4c 27 02 c0    	cmp    DWORD PTR ds:0xc002274c,ebx
c000a345:	7f c4                	jg     c000a30b <VAS::evict(unsigned long)+0x27>
c000a347:	83 ec 08             	sub    esp,0x8
c000a34a:	c1 e7 0c             	shl    edi,0xc
c000a34d:	55                   	push   ebp
c000a34e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a352:	50                   	push   eax
c000a353:	e8 a6 f5 ff ff       	call   c00098fe <VAS::getPageTableEntry(unsigned long)>
c000a358:	8b 10                	mov    edx,DWORD PTR [eax]
c000a35a:	89 d3                	mov    ebx,edx
c000a35c:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a362:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a368:	09 d7                	or     edi,edx
c000a36a:	89 38                	mov    DWORD PTR [eax],edi
c000a36c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a36f:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a375:	83 c2 01             	add    edx,0x1
c000a378:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a37e:	e8 c6 d9 ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c000a383:	0f 20 d8             	mov    eax,cr3
c000a386:	0f 22 d8             	mov    cr3,eax
c000a389:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a38f:	51                   	push   ecx
c000a390:	55                   	push   ebp
c000a391:	53                   	push   ebx
c000a392:	68 74 03 02 c0       	push   0xc0020374
c000a397:	e8 db 05 00 00       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000a39c:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a3a1:	c7 44 24 50 2e 05 02 c0 	mov    DWORD PTR [esp+0x50],0xc002052e
c000a3a9:	8d 50 01             	lea    edx,[eax+0x1]
c000a3ac:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a3b0:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a3b6:	83 c4 3c             	add    esp,0x3c
c000a3b9:	5b                   	pop    ebx
c000a3ba:	5e                   	pop    esi
c000a3bb:	5f                   	pop    edi
c000a3bc:	5d                   	pop    ebp
c000a3bd:	e9 b5 05 00 00       	jmp    c000a977 <Dbg::kprintf(char const*, ...)>

c000a3c2 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a3c2:	55                   	push   ebp
c000a3c3:	57                   	push   edi
c000a3c4:	56                   	push   esi
c000a3c5:	53                   	push   ebx
c000a3c6:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a3cc:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3d3:	89 f3                	mov    ebx,esi
c000a3d5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3db:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3e1:	77 22                	ja     c000a405 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3e3:	83 ec 08             	sub    esp,0x8
c000a3e6:	56                   	push   esi
c000a3e7:	68 51 05 02 c0       	push   0xc0020551
c000a3ec:	e8 86 05 00 00       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000a3f1:	83 c4 10             	add    esp,0x10
c000a3f4:	85 db                	test   ebx,ebx
c000a3f6:	75 2a                	jne    c000a422 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3f8:	31 c0                	xor    eax,eax
c000a3fa:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a400:	5b                   	pop    ebx
c000a401:	5e                   	pop    esi
c000a402:	5f                   	pop    edi
c000a403:	5d                   	pop    ebp
c000a404:	c3                   	ret    
c000a405:	83 ec 0c             	sub    esp,0xc
c000a408:	68 3f 05 02 c0       	push   0xc002053f
c000a40d:	e8 c9 67 00 00       	call   c0010bdb <KePanic(char const*)>
c000a412:	5f                   	pop    edi
c000a413:	5d                   	pop    ebp
c000a414:	56                   	push   esi
c000a415:	68 51 05 02 c0       	push   0xc0020551
c000a41a:	e8 58 05 00 00       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000a41f:	83 c4 10             	add    esp,0x10
c000a422:	83 ec 08             	sub    esp,0x8
c000a425:	53                   	push   ebx
c000a426:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a42d:	51                   	push   ecx
c000a42e:	e8 cb f4 ff ff       	call   c00098fe <VAS::getPageTableEntry(unsigned long)>
c000a433:	83 c4 10             	add    esp,0x10
c000a436:	89 c2                	mov    edx,eax
c000a438:	85 c0                	test   eax,eax
c000a43a:	74 bc                	je     c000a3f8 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a43c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a43e:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a444:	0f 85 c0 00 00 00    	jne    c000a50a <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a44a:	89 e8                	mov    eax,ebp
c000a44c:	25 01 04 00 00       	and    eax,0x401
c000a451:	3d 00 04 00 00       	cmp    eax,0x400
c000a456:	75 a0                	jne    c000a3f8 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a458:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a45c:	c1 ed 0c             	shr    ebp,0xc
c000a45f:	e8 4e d9 ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a464:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a468:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a46a:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a470:	09 c1                	or     ecx,eax
c000a472:	81 c9 01 08 00 00    	or     ecx,0x801
c000a478:	89 0a                	mov    DWORD PTR [edx],ecx
c000a47a:	8b 15 4c 27 02 c0    	mov    edx,DWORD PTR ds:0xc002274c
c000a480:	85 d2                	test   edx,edx
c000a482:	7e 40                	jle    c000a4c4 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a484:	89 df                	mov    edi,ebx
c000a486:	31 f6                	xor    esi,esi
c000a488:	83 ec 0c             	sub    esp,0xc
c000a48b:	55                   	push   ebp
c000a48c:	e8 b8 f2 ff ff       	call   c0009749 <Virt::swapIDToSector(unsigned long)>
c000a491:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a494:	01 f0                	add    eax,esi
c000a496:	6a 01                	push   0x1
c000a498:	31 d2                	xor    edx,edx
c000a49a:	83 c6 01             	add    esi,0x1
c000a49d:	52                   	push   edx
c000a49e:	81 c7 00 02 00 00    	add    edi,0x200
c000a4a4:	50                   	push   eax
c000a4a5:	0f be 05 58 27 02 c0 	movsx  eax,BYTE PTR ds:0xc0022758
c000a4ac:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c000a4b3:	50                   	push   eax
c000a4b4:	e8 ab 2f 00 00       	call   c000d464 <LogicalDisk::read(unsigned long long, int, void*)>
c000a4b9:	83 c4 20             	add    esp,0x20
c000a4bc:	39 35 4c 27 02 c0    	cmp    DWORD PTR ds:0xc002274c,esi
c000a4c2:	7f c4                	jg     c000a488 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a4c4:	83 ec 04             	sub    esp,0x4
c000a4c7:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a4cc:	83 e8 01             	sub    eax,0x1
c000a4cf:	50                   	push   eax
c000a4d0:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4d5:	53                   	push   ebx
c000a4d6:	68 64 05 02 c0       	push   0xc0020564
c000a4db:	e8 97 04 00 00       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000a4e0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4e3:	e8 3e f2 ff ff       	call   c0009726 <Virt::freeSwapfilePage(unsigned long)>
c000a4e8:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000a4ed:	83 c4 10             	add    esp,0x10
c000a4f0:	83 e8 01             	sub    eax,0x1
c000a4f3:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000a4f8:	85 c0                	test   eax,eax
c000a4fa:	75 01                	jne    c000a4fd <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4fc:	fb                   	sti    
c000a4fd:	0f 20 d8             	mov    eax,cr3
c000a500:	0f 22 d8             	mov    cr3,eax
c000a503:	b0 01                	mov    al,0x1
c000a505:	e9 f0 fe ff ff       	jmp    c000a3fa <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a50a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a50e:	bd 00 10 00 00       	mov    ebp,0x1000
c000a513:	83 ec 0c             	sub    esp,0xc
c000a516:	89 de                	mov    esi,ebx
c000a518:	68 a4 03 02 c0       	push   0xc00203a4
c000a51d:	e8 55 04 00 00       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000a522:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a526:	e8 87 d8 ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a52b:	89 e9                	mov    ecx,ebp
c000a52d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a52f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a533:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a535:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a53b:	09 c8                	or     eax,ecx
c000a53d:	83 c8 02             	or     eax,0x2
c000a540:	89 02                	mov    DWORD PTR [edx],eax
c000a542:	0f 20 d8             	mov    eax,cr3
c000a545:	0f 22 d8             	mov    cr3,eax
c000a548:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a54c:	89 df                	mov    edi,ebx
c000a54e:	89 e9                	mov    ecx,ebp
c000a550:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a552:	b0 01                	mov    al,0x1
c000a554:	83 c4 10             	add    esp,0x10
c000a557:	e9 9e fe ff ff       	jmp    c000a3fa <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a55c <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a55c:	55                   	push   ebp
c000a55d:	57                   	push   edi
c000a55e:	56                   	push   esi
c000a55f:	53                   	push   ebx
c000a560:	83 ec 28             	sub    esp,0x28
c000a563:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a567:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a56b:	50                   	push   eax
c000a56c:	e8 90 f0 ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000a571:	83 c4 0c             	add    esp,0xc
c000a574:	89 c5                	mov    ebp,eax
c000a576:	6a 07                	push   0x7
c000a578:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a57c:	52                   	push   edx
c000a57d:	56                   	push   esi
c000a57e:	e8 93 f8 ff ff       	call   c0009e16 <VAS::allocatePages(int, int)>
c000a583:	83 c4 10             	add    esp,0x10
c000a586:	89 c7                	mov    edi,eax
c000a588:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a58c:	85 c9                	test   ecx,ecx
c000a58e:	74 2f                	je     c000a5bf <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a590:	31 db                	xor    ebx,ebx
c000a592:	e8 1b d8 ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a597:	83 c3 01             	add    ebx,0x1
c000a59a:	6a 03                	push   0x3
c000a59c:	55                   	push   ebp
c000a59d:	50                   	push   eax
c000a59e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5a2:	56                   	push   esi
c000a5a3:	e8 6a f7 ff ff       	call   c0009d12 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a5a8:	6a 07                	push   0x7
c000a5aa:	57                   	push   edi
c000a5ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a5af:	50                   	push   eax
c000a5b0:	56                   	push   esi
c000a5b1:	e8 5c f7 ff ff       	call   c0009d12 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a5b6:	83 c4 20             	add    esp,0x20
c000a5b9:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a5bd:	75 d3                	jne    c000a592 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a5bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a5c3:	89 28                	mov    DWORD PTR [eax],ebp
c000a5c5:	83 c4 1c             	add    esp,0x1c
c000a5c8:	89 f8                	mov    eax,edi
c000a5ca:	5b                   	pop    ebx
c000a5cb:	5e                   	pop    esi
c000a5cc:	5f                   	pop    edi
c000a5cd:	5d                   	pop    ebp
c000a5ce:	c3                   	ret    
c000a5cf:	90                   	nop

c000a5d0 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a5d0:	53                   	push   ebx
c000a5d1:	83 ec 14             	sub    esp,0x14
c000a5d4:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5d8:	68 c4 03 02 c0       	push   0xc00203c4
c000a5dd:	e8 95 03 00 00       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000a5e2:	c7 04 24 24 04 02 c0 	mov    DWORD PTR [esp],0xc0020424
c000a5e9:	e8 89 03 00 00       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000a5ee:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5f2:	83 c4 18             	add    esp,0x18
c000a5f5:	5b                   	pop    ebx
c000a5f6:	e9 22 f3 ff ff       	jmp    c000991d <Virt::freeKernelVirtualPages(unsigned long)>
c000a5fb:	90                   	nop

c000a5fc <VAS::scanForEviction()>:
c000a5fc:	57                   	push   edi
c000a5fd:	56                   	push   esi
c000a5fe:	31 f6                	xor    esi,esi
c000a600:	53                   	push   ebx
c000a601:	83 ec 10             	sub    esp,0x10
c000a604:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a608:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a60b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a611:	75 0e                	jne    c000a621 <VAS::scanForEviction()+0x25>
c000a613:	89 da                	mov    edx,ebx
c000a615:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a618:	c1 ea 16             	shr    edx,0x16
c000a61b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a61f:	74 57                	je     c000a678 <VAS::scanForEviction()+0x7c>
c000a621:	53                   	push   ebx
c000a622:	57                   	push   edi
c000a623:	e8 d6 f2 ff ff       	call   c00098fe <VAS::getPageTableEntry(unsigned long)>
c000a628:	5a                   	pop    edx
c000a629:	8b 10                	mov    edx,DWORD PTR [eax]
c000a62b:	59                   	pop    ecx
c000a62c:	89 d1                	mov    ecx,edx
c000a62e:	c1 e9 0c             	shr    ecx,0xc
c000a631:	74 10                	je     c000a643 <VAS::scanForEviction()+0x47>
c000a633:	89 d1                	mov    ecx,edx
c000a635:	81 e1 01 08 00 00    	and    ecx,0x801
c000a63b:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a641:	74 40                	je     c000a683 <VAS::scanForEviction()+0x87>
c000a643:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a649:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a64f:	76 2d                	jbe    c000a67e <VAS::scanForEviction()+0x82>
c000a651:	83 c6 01             	add    esi,0x1
c000a654:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a65b:	83 fe 03             	cmp    esi,0x3
c000a65e:	74 32                	je     c000a692 <VAS::scanForEviction()+0x96>
c000a660:	31 db                	xor    ebx,ebx
c000a662:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a668:	75 b7                	jne    c000a621 <VAS::scanForEviction()+0x25>
c000a66a:	89 da                	mov    edx,ebx
c000a66c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a66f:	c1 ea 16             	shr    edx,0x16
c000a672:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a676:	75 a9                	jne    c000a621 <VAS::scanForEviction()+0x25>
c000a678:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a67e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a681:	eb 88                	jmp    c000a60b <VAS::scanForEviction()+0xf>
c000a683:	f6 c2 20             	test   dl,0x20
c000a686:	74 13                	je     c000a69b <VAS::scanForEviction()+0x9f>
c000a688:	83 e2 df             	and    edx,0xffffffdf
c000a68b:	89 10                	mov    DWORD PTR [eax],edx
c000a68d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a690:	eb b1                	jmp    c000a643 <VAS::scanForEviction()+0x47>
c000a692:	83 c4 10             	add    esp,0x10
c000a695:	31 c0                	xor    eax,eax
c000a697:	5b                   	pop    ebx
c000a698:	5e                   	pop    esi
c000a699:	5f                   	pop    edi
c000a69a:	c3                   	ret    
c000a69b:	83 ec 08             	sub    esp,0x8
c000a69e:	89 d0                	mov    eax,edx
c000a6a0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a6a9:	53                   	push   ebx
c000a6aa:	68 79 05 02 c0       	push   0xc0020579
c000a6af:	e8 c3 02 00 00       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000a6b4:	58                   	pop    eax
c000a6b5:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b8:	5a                   	pop    edx
c000a6b9:	51                   	push   ecx
c000a6ba:	57                   	push   edi
c000a6bb:	e8 24 fc ff ff       	call   c000a2e4 <VAS::evict(unsigned long)>
c000a6c0:	5b                   	pop    ebx
c000a6c1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a6c4:	5e                   	pop    esi
c000a6c5:	50                   	push   eax
c000a6c6:	68 8d 05 02 c0       	push   0xc002058d
c000a6cb:	e8 a7 02 00 00       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000a6d0:	58                   	pop    eax
c000a6d1:	5a                   	pop    edx
c000a6d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6d6:	50                   	push   eax
c000a6d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6db:	68 a0 05 02 c0       	push   0xc00205a0
c000a6e0:	e8 92 02 00 00       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000a6e5:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6e8:	83 c4 10             	add    esp,0x10
c000a6eb:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6f5:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6f8:	83 c4 10             	add    esp,0x10
c000a6fb:	5b                   	pop    ebx
c000a6fc:	5e                   	pop    esi
c000a6fd:	5f                   	pop    edi
c000a6fe:	c3                   	ret    

c000a6ff <mapVASFirstTime>:
c000a6ff:	55                   	push   ebp
c000a700:	57                   	push   edi
c000a701:	56                   	push   esi
c000a702:	53                   	push   ebx
c000a703:	83 ec 0c             	sub    esp,0xc
c000a706:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a70b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a70e:	83 fa 01             	cmp    edx,0x1
c000a711:	0f 84 cb 00 00 00    	je     c000a7e2 <mapVASFirstTime+0xe3>
c000a717:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a71a:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a71d:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a722:	c1 e5 15             	shl    ebp,0x15
c000a725:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a72a:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 79 d6 ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a739:	83 ec 0c             	sub    esp,0xc
c000a73c:	68 03 04 00 00       	push   0x403
c000a741:	6a 01                	push   0x1
c000a743:	53                   	push   ebx
c000a744:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74a:	50                   	push   eax
c000a74b:	56                   	push   esi
c000a74c:	e8 d9 f7 ff ff       	call   c0009f2a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a751:	83 c4 20             	add    esp,0x20
c000a754:	39 fb                	cmp    ebx,edi
c000a756:	75 dc                	jne    c000a734 <mapVASFirstTime+0x35>
c000a758:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a75d:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a762:	29 eb                	sub    ebx,ebp
c000a764:	29 ef                	sub    edi,ebp
c000a766:	e8 47 d6 ff ff       	call   c0007db2 <Phys::allocatePage()>
c000a76b:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a76f:	83 fa 01             	cmp    edx,0x1
c000a772:	19 d2                	sbb    edx,edx
c000a774:	83 ec 0c             	sub    esp,0xc
c000a777:	83 e2 04             	and    edx,0x4
c000a77a:	81 c2 03 04 00 00    	add    edx,0x403
c000a780:	52                   	push   edx
c000a781:	6a 01                	push   0x1
c000a783:	53                   	push   ebx
c000a784:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a78a:	50                   	push   eax
c000a78b:	56                   	push   esi
c000a78c:	e8 99 f7 ff ff       	call   c0009f2a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a791:	83 c4 20             	add    esp,0x20
c000a794:	39 df                	cmp    edi,ebx
c000a796:	75 ce                	jne    c000a766 <mapVASFirstTime+0x67>
c000a798:	83 ec 0c             	sub    esp,0xc
c000a79b:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a7a0:	6a 04                	push   0x4
c000a7a2:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a7a8:	6a ff                	push   0xffffffff
c000a7aa:	c1 eb 0c             	shr    ebx,0xc
c000a7ad:	53                   	push   ebx
c000a7ae:	68 00 40 02 c0       	push   0xc0024000
c000a7b3:	56                   	push   esi
c000a7b4:	e8 df f2 ff ff       	call   c0009a98 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a7b9:	83 c4 14             	add    esp,0x14
c000a7bc:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a7c1:	6a 04                	push   0x4
c000a7c3:	6a ff                	push   0xffffffff
c000a7c5:	53                   	push   ebx
c000a7c6:	68 00 40 02 c0       	push   0xc0024000
c000a7cb:	50                   	push   eax
c000a7cc:	e8 c7 f2 ff ff       	call   c0009a98 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a7d1:	0f 20 d8             	mov    eax,cr3
c000a7d4:	0f 22 d8             	mov    cr3,eax
c000a7d7:	83 c4 20             	add    esp,0x20
c000a7da:	83 c4 0c             	add    esp,0xc
c000a7dd:	5b                   	pop    ebx
c000a7de:	5e                   	pop    esi
c000a7df:	5f                   	pop    edi
c000a7e0:	5d                   	pop    ebp
c000a7e1:	c3                   	ret    
c000a7e2:	83 ec 0c             	sub    esp,0xc
c000a7e5:	68 ad 05 02 c0       	push   0xc00205ad
c000a7ea:	e8 88 01 00 00       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000a7ef:	83 c4 10             	add    esp,0x10
c000a7f2:	83 c4 0c             	add    esp,0xc
c000a7f5:	5b                   	pop    ebx
c000a7f6:	5e                   	pop    esi
c000a7f7:	5f                   	pop    edi
c000a7f8:	5d                   	pop    ebp
c000a7f9:	c3                   	ret    

c000a7fa <__cxa_atexit>:
c000a7fa:	31 c0                	xor    eax,eax
c000a7fc:	c3                   	ret    

c000a7fd <__cxa_finalize>:
c000a7fd:	c3                   	ret    

c000a7fe <__stack_chk_fail>:
c000a7fe:	55                   	push   ebp
c000a7ff:	89 e5                	mov    ebp,esp
c000a801:	83 ec 10             	sub    esp,0x10
c000a804:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a807:	68 c6 05 02 c0       	push   0xc00205c6
c000a80c:	e8 66 01 00 00       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000a811:	58                   	pop    eax
c000a812:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a815:	5a                   	pop    edx
c000a816:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a819:	68 c6 05 02 c0       	push   0xc00205c6
c000a81e:	e8 54 01 00 00       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000a823:	c7 04 24 ce 05 02 c0 	mov    DWORD PTR [esp],0xc00205ce
c000a82a:	e8 ac 63 00 00       	call   c0010bdb <KePanic(char const*)>
c000a82f:	83 c4 10             	add    esp,0x10
c000a832:	c9                   	leave  
c000a833:	c3                   	ret    

c000a834 <__cxa_pure_virtual>:
c000a834:	83 ec 18             	sub    esp,0x18
c000a837:	68 e6 05 02 c0       	push   0xc00205e6
c000a83c:	e8 9a 63 00 00       	call   c0010bdb <KePanic(char const*)>
c000a841:	83 c4 1c             	add    esp,0x1c
c000a844:	c3                   	ret    

c000a845 <operator new[](unsigned long)>:
c000a845:	e9 64 d2 ff ff       	jmp    c0007aae <malloc>

c000a84a <operator delete(void*, unsigned long)>:
c000a84a:	e9 7f d2 ff ff       	jmp    c0007ace <rfree>

c000a84f <operator delete[](void*)>:
c000a84f:	e9 7a d2 ff ff       	jmp    c0007ace <rfree>

c000a854 <operator delete[](void*, unsigned long)>:
c000a854:	e9 75 d2 ff ff       	jmp    c0007ace <rfree>

c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a859:	55                   	push   ebp
c000a85a:	57                   	push   edi
c000a85b:	56                   	push   esi
c000a85c:	be ef 00 02 c0       	mov    esi,0xc00200ef
c000a861:	53                   	push   ebx
c000a862:	83 ec 20             	sub    esp,0x20
c000a865:	a0 ee 00 02 c0       	mov    al,ds:0xc00200ee
c000a86a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a86e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a872:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a876:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a87a:	b8 10 00 00 00       	mov    eax,0x10
c000a87f:	f7 c7 02 00 00 00    	test   edi,0x2
c000a885:	75 60                	jne    c000a8e7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a887:	89 c1                	mov    ecx,eax
c000a889:	c1 e9 02             	shr    ecx,0x2
c000a88c:	fc                   	cld    
c000a88d:	31 d2                	xor    edx,edx
c000a88f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a891:	a8 02                	test   al,0x2
c000a893:	74 0b                	je     c000a8a0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a895:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a898:	66 89 17             	mov    WORD PTR [edi],dx
c000a89b:	ba 02 00 00 00       	mov    edx,0x2
c000a8a0:	a8 01                	test   al,0x1
c000a8a2:	74 06                	je     c000a8aa <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a8a4:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a8a7:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a8aa:	89 ee                	mov    esi,ebp
c000a8ac:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a8b0:	eb 02                	jmp    c000a8b4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a8b2:	89 c6                	mov    esi,eax
c000a8b4:	31 d2                	xor    edx,edx
c000a8b6:	83 c1 01             	add    ecx,0x1
c000a8b9:	89 f0                	mov    eax,esi
c000a8bb:	f7 f3                	div    ebx
c000a8bd:	39 de                	cmp    esi,ebx
c000a8bf:	73 f1                	jae    c000a8b2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a8c1:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a8c4:	eb 02                	jmp    c000a8c8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a8c6:	89 c5                	mov    ebp,eax
c000a8c8:	31 d2                	xor    edx,edx
c000a8ca:	83 e9 01             	sub    ecx,0x1
c000a8cd:	89 e8                	mov    eax,ebp
c000a8cf:	f7 f3                	div    ebx
c000a8d1:	39 dd                	cmp    ebp,ebx
c000a8d3:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8d7:	88 11                	mov    BYTE PTR [ecx],dl
c000a8d9:	73 eb                	jae    c000a8c6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8df:	83 c4 20             	add    esp,0x20
c000a8e2:	5b                   	pop    ebx
c000a8e3:	5e                   	pop    esi
c000a8e4:	5f                   	pop    edi
c000a8e5:	5d                   	pop    ebp
c000a8e6:	c3                   	ret    
c000a8e7:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8ea:	83 c7 02             	add    edi,0x2
c000a8ed:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8f1:	83 c6 02             	add    esi,0x2
c000a8f4:	83 e8 02             	sub    eax,0x2
c000a8f7:	eb 8e                	jmp    c000a887 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8f9 <Dbg::logc(char)>:
c000a8f9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8fd:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a904:	75 12                	jne    c000a918 <Dbg::logc(char)+0x1f>
c000a906:	ba fd 03 00 00       	mov    edx,0x3fd
c000a90b:	ec                   	in     al,dx
c000a90c:	a8 20                	test   al,0x20
c000a90e:	74 fb                	je     c000a90b <Dbg::logc(char)+0x12>
c000a910:	ba f8 03 00 00       	mov    edx,0x3f8
c000a915:	88 c8                	mov    al,cl
c000a917:	ee                   	out    dx,al
c000a918:	c3                   	ret    

c000a919 <Dbg::logs(char*)>:
c000a919:	53                   	push   ebx
c000a91a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a91e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a921:	85 c0                	test   eax,eax
c000a923:	74 11                	je     c000a936 <Dbg::logs(char*)+0x1d>
c000a925:	83 c3 01             	add    ebx,0x1
c000a928:	50                   	push   eax
c000a929:	e8 cb ff ff ff       	call   c000a8f9 <Dbg::logc(char)>
c000a92e:	58                   	pop    eax
c000a92f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a932:	85 c0                	test   eax,eax
c000a934:	75 ef                	jne    c000a925 <Dbg::logs(char*)+0xc>
c000a936:	5b                   	pop    ebx
c000a937:	c3                   	ret    

c000a938 <Dbg::logWriteInt(unsigned int)>:
c000a938:	83 ec 10             	sub    esp,0x10
c000a93b:	6a 0a                	push   0xa
c000a93d:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a941:	50                   	push   eax
c000a942:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a946:	50                   	push   eax
c000a947:	e8 0d ff ff ff       	call   c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a94c:	50                   	push   eax
c000a94d:	e8 c7 ff ff ff       	call   c000a919 <Dbg::logs(char*)>
c000a952:	83 c4 20             	add    esp,0x20
c000a955:	c3                   	ret    

c000a956 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a956:	83 ec 10             	sub    esp,0x10
c000a959:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a95d:	50                   	push   eax
c000a95e:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a962:	50                   	push   eax
c000a963:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a967:	52                   	push   edx
c000a968:	e8 ec fe ff ff       	call   c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a96d:	50                   	push   eax
c000a96e:	e8 a6 ff ff ff       	call   c000a919 <Dbg::logs(char*)>
c000a973:	83 c4 20             	add    esp,0x20
c000a976:	c3                   	ret    

c000a977 <Dbg::kprintf(char const*, ...)>:
c000a977:	55                   	push   ebp
c000a978:	57                   	push   edi
c000a979:	56                   	push   esi
c000a97a:	53                   	push   ebx
c000a97b:	83 ec 0c             	sub    esp,0xc
c000a97e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a982:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a989:	74 08                	je     c000a993 <Dbg::kprintf(char const*, ...)+0x1c>
c000a98b:	83 c4 0c             	add    esp,0xc
c000a98e:	5b                   	pop    ebx
c000a98f:	5e                   	pop    esi
c000a990:	5f                   	pop    edi
c000a991:	5d                   	pop    ebp
c000a992:	c3                   	ret    
c000a993:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a997:	31 ff                	xor    edi,edi
c000a999:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a99d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a9a0:	85 c0                	test   eax,eax
c000a9a2:	74 e7                	je     c000a98b <Dbg::kprintf(char const*, ...)+0x14>
c000a9a4:	8d 77 01             	lea    esi,[edi+0x1]
c000a9a7:	83 f8 25             	cmp    eax,0x25
c000a9aa:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9ad:	75 47                	jne    c000a9f6 <Dbg::kprintf(char const*, ...)+0x7f>
c000a9af:	83 c7 02             	add    edi,0x2
c000a9b2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a9b5:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a9b8:	83 e8 25             	sub    eax,0x25
c000a9bb:	0f b6 c0             	movzx  eax,al
c000a9be:	83 f8 53             	cmp    eax,0x53
c000a9c1:	0f 87 ce 00 00 00    	ja     c000aa95 <Dbg::kprintf(char const*, ...)+0x11e>
c000a9c7:	ff 24 85 fc 05 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfa04]
c000a9ce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d2:	89 c8                	mov    eax,ecx
c000a9d4:	83 c1 04             	add    ecx,0x4
c000a9d7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9db:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9dd:	55                   	push   ebp
c000a9de:	e8 55 ff ff ff       	call   c000a938 <Dbg::logWriteInt(unsigned int)>
c000a9e3:	58                   	pop    eax
c000a9e4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9e7:	85 c0                	test   eax,eax
c000a9e9:	74 a0                	je     c000a98b <Dbg::kprintf(char const*, ...)+0x14>
c000a9eb:	8d 77 01             	lea    esi,[edi+0x1]
c000a9ee:	83 f8 25             	cmp    eax,0x25
c000a9f1:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9f4:	74 b9                	je     c000a9af <Dbg::kprintf(char const*, ...)+0x38>
c000a9f6:	50                   	push   eax
c000a9f7:	89 f7                	mov    edi,esi
c000a9f9:	e8 fb fe ff ff       	call   c000a8f9 <Dbg::logc(char)>
c000a9fe:	89 ee                	mov    esi,ebp
c000aa00:	58                   	pop    eax
c000aa01:	eb e1                	jmp    c000a9e4 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa03:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa07:	89 c8                	mov    eax,ecx
c000aa09:	83 c1 04             	add    ecx,0x4
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa12:	50                   	push   eax
c000aa13:	e8 01 ff ff ff       	call   c000a919 <Dbg::logs(char*)>
c000aa18:	58                   	pop    eax
c000aa19:	eb c9                	jmp    c000a9e4 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa1f:	89 d0                	mov    eax,edx
c000aa21:	83 c2 04             	add    edx,0x4
c000aa24:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa28:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa2a:	50                   	push   eax
c000aa2b:	e8 08 ff ff ff       	call   c000a938 <Dbg::logWriteInt(unsigned int)>
c000aa30:	58                   	pop    eax
c000aa31:	eb b1                	jmp    c000a9e4 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa37:	89 d0                	mov    eax,edx
c000aa39:	83 c2 04             	add    edx,0x4
c000aa3c:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa3f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa43:	50                   	push   eax
c000aa44:	e8 b0 fe ff ff       	call   c000a8f9 <Dbg::logc(char)>
c000aa49:	58                   	pop    eax
c000aa4a:	eb 98                	jmp    c000a9e4 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa4c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa50:	89 c8                	mov    eax,ecx
c000aa52:	83 c1 04             	add    ecx,0x4
c000aa55:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa59:	6a 10                	push   0x10
c000aa5b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa5d:	51                   	push   ecx
c000aa5e:	e8 f3 fe ff ff       	call   c000a956 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa63:	5d                   	pop    ebp
c000aa64:	58                   	pop    eax
c000aa65:	e9 7a ff ff ff       	jmp    c000a9e4 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa6a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa6e:	89 d0                	mov    eax,edx
c000aa70:	83 c2 08             	add    edx,0x8
c000aa73:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa77:	6a 10                	push   0x10
c000aa79:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa7b:	50                   	push   eax
c000aa7c:	e8 d5 fe ff ff       	call   c000a956 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa81:	58                   	pop    eax
c000aa82:	5a                   	pop    edx
c000aa83:	e9 5c ff ff ff       	jmp    c000a9e4 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa88:	6a 25                	push   0x25
c000aa8a:	e8 6a fe ff ff       	call   c000a8f9 <Dbg::logc(char)>
c000aa8f:	5a                   	pop    edx
c000aa90:	e9 4f ff ff ff       	jmp    c000a9e4 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa95:	6a 25                	push   0x25
c000aa97:	e8 5d fe ff ff       	call   c000a8f9 <Dbg::logc(char)>
c000aa9c:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aaa0:	50                   	push   eax
c000aaa1:	e8 53 fe ff ff       	call   c000a8f9 <Dbg::logc(char)>
c000aaa6:	5a                   	pop    edx
c000aaa7:	59                   	pop    ecx
c000aaa8:	e9 37 ff ff ff       	jmp    c000a9e4 <Dbg::kprintf(char const*, ...)+0x6d>
c000aaad:	66 90                	xchg   ax,ax
c000aaaf:	90                   	nop

c000aab0 <KiUbsanPrintDetails(char const*, void*)>:
c000aab0:	83 ec 1c             	sub    esp,0x1c
c000aab3:	83 ec 08             	sub    esp,0x8
c000aab6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aaba:	68 4c 07 02 c0       	push   0xc002074c
c000aabf:	e8 b3 fe ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000aac4:	83 c4 10             	add    esp,0x10
c000aac7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aacb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aacf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aad3:	8b 00                	mov    eax,DWORD PTR [eax]
c000aad5:	83 ec 08             	sub    esp,0x8
c000aad8:	50                   	push   eax
c000aad9:	68 60 07 02 c0       	push   0xc0020760
c000aade:	e8 94 fe ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000aae3:	83 c4 10             	add    esp,0x10
c000aae6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aaea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aaed:	83 ec 08             	sub    esp,0x8
c000aaf0:	50                   	push   eax
c000aaf1:	68 6a 07 02 c0       	push   0xc002076a
c000aaf6:	e8 7c fe ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000aafb:	83 c4 10             	add    esp,0x10
c000aafe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ab02:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ab05:	83 ec 08             	sub    esp,0x8
c000ab08:	50                   	push   eax
c000ab09:	68 74 07 02 c0       	push   0xc0020774
c000ab0e:	e8 64 fe ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	90                   	nop
c000ab17:	83 c4 1c             	add    esp,0x1c
c000ab1a:	c3                   	ret    
c000ab1b:	90                   	nop

c000ab1c <__ubsan_handle_type_mismatch_v1>:
c000ab1c:	83 ec 0c             	sub    esp,0xc
c000ab1f:	83 ec 08             	sub    esp,0x8
c000ab22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab26:	68 b8 08 02 c0       	push   0xc00208b8
c000ab2b:	e8 80 ff ff ff       	call   c000aab0 <KiUbsanPrintDetails(char const*, void*)>
c000ab30:	83 c4 10             	add    esp,0x10
c000ab33:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab38:	75 16                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x34>
c000ab3a:	83 ec 0c             	sub    esp,0xc
c000ab3d:	68 7e 07 02 c0       	push   0xc002077e
c000ab42:	e8 30 fe ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000ab47:	83 c4 10             	add    esp,0x10
c000ab4a:	e9 91 00 00 00       	jmp    c000abe0 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4f:	90                   	nop
c000ab50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab54:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab57:	85 c0                	test   eax,eax
c000ab59:	74 29                	je     c000ab84 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab5f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab62:	83 e8 01             	sub    eax,0x1
c000ab65:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab69:	75 19                	jne    c000ab84 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab6b:	83 ec 08             	sub    esp,0x8
c000ab6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab72:	68 d8 08 02 c0       	push   0xc00208d8
c000ab77:	e8 fb fd ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000ab7c:	83 c4 10             	add    esp,0x10
c000ab7f:	eb 5f                	jmp    c000abe0 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab81:	8d 76 00             	lea    esi,[esi+0x0]
c000ab84:	83 ec 0c             	sub    esp,0xc
c000ab87:	68 93 07 02 c0       	push   0xc0020793
c000ab8c:	e8 e6 fd ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000ab91:	83 c4 10             	add    esp,0x10
c000ab94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab98:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab9b:	0f b6 c0             	movzx  eax,al
c000ab9e:	83 ec 08             	sub    esp,0x8
c000aba1:	50                   	push   eax
c000aba2:	68 ad 07 02 c0       	push   0xc00207ad
c000aba7:	e8 cb fd ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000abb6:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000abb9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000abbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc1:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000abc4:	0f b6 c0             	movzx  eax,al
c000abc7:	8b 04 85 60 27 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd8a0]
c000abce:	51                   	push   ecx
c000abcf:	52                   	push   edx
c000abd0:	50                   	push   eax
c000abd1:	68 00 09 02 c0       	push   0xc0020900
c000abd6:	e8 9c fd ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000abdb:	83 c4 10             	add    esp,0x10
c000abde:	66 90                	xchg   ax,ax
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	68 b8 08 02 c0       	push   0xc00208b8
c000abe8:	e8 ee 5f 00 00       	call   c0010bdb <KePanic(char const*)>
c000abed:	83 c4 10             	add    esp,0x10
c000abf0:	90                   	nop
c000abf1:	83 c4 0c             	add    esp,0xc
c000abf4:	c3                   	ret    
c000abf5:	8d 76 00             	lea    esi,[esi+0x0]

c000abf8 <__ubsan_handle_pointer_overflow>:
c000abf8:	83 ec 0c             	sub    esp,0xc
c000abfb:	83 ec 08             	sub    esp,0x8
c000abfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac02:	68 48 09 02 c0       	push   0xc0020948
c000ac07:	e8 a4 fe ff ff       	call   c000aab0 <KiUbsanPrintDetails(char const*, void*)>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	83 ec 0c             	sub    esp,0xc
c000ac12:	68 48 09 02 c0       	push   0xc0020948
c000ac17:	e8 bf 5f 00 00       	call   c0010bdb <KePanic(char const*)>
c000ac1c:	83 c4 10             	add    esp,0x10
c000ac1f:	90                   	nop
c000ac20:	83 c4 0c             	add    esp,0xc
c000ac23:	c3                   	ret    

c000ac24 <__ubsan_handle_out_of_bounds>:
c000ac24:	83 ec 0c             	sub    esp,0xc
c000ac27:	83 ec 08             	sub    esp,0x8
c000ac2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac2e:	68 b8 07 02 c0       	push   0xc00207b8
c000ac33:	e8 78 fe ff ff       	call   c000aab0 <KiUbsanPrintDetails(char const*, void*)>
c000ac38:	83 c4 10             	add    esp,0x10
c000ac3b:	83 ec 0c             	sub    esp,0xc
c000ac3e:	68 b8 07 02 c0       	push   0xc00207b8
c000ac43:	e8 93 5f 00 00       	call   c0010bdb <KePanic(char const*)>
c000ac48:	83 c4 10             	add    esp,0x10
c000ac4b:	90                   	nop
c000ac4c:	83 c4 0c             	add    esp,0xc
c000ac4f:	c3                   	ret    

c000ac50 <__ubsan_handle_add_overflow>:
c000ac50:	83 ec 0c             	sub    esp,0xc
c000ac53:	83 ec 08             	sub    esp,0x8
c000ac56:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac5a:	68 d5 07 02 c0       	push   0xc00207d5
c000ac5f:	e8 4c fe ff ff       	call   c000aab0 <KiUbsanPrintDetails(char const*, void*)>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	83 ec 0c             	sub    esp,0xc
c000ac6a:	68 d5 07 02 c0       	push   0xc00207d5
c000ac6f:	e8 67 5f 00 00       	call   c0010bdb <KePanic(char const*)>
c000ac74:	83 c4 10             	add    esp,0x10
c000ac77:	90                   	nop
c000ac78:	83 c4 0c             	add    esp,0xc
c000ac7b:	c3                   	ret    

c000ac7c <__ubsan_handle_load_invalid_value>:
c000ac7c:	83 ec 0c             	sub    esp,0xc
c000ac7f:	83 ec 08             	sub    esp,0x8
c000ac82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac86:	68 68 09 02 c0       	push   0xc0020968
c000ac8b:	e8 20 fe ff ff       	call   c000aab0 <KiUbsanPrintDetails(char const*, void*)>
c000ac90:	83 c4 10             	add    esp,0x10
c000ac93:	83 ec 0c             	sub    esp,0xc
c000ac96:	68 68 09 02 c0       	push   0xc0020968
c000ac9b:	e8 3b 5f 00 00       	call   c0010bdb <KePanic(char const*)>
c000aca0:	83 c4 10             	add    esp,0x10
c000aca3:	90                   	nop
c000aca4:	83 c4 0c             	add    esp,0xc
c000aca7:	c3                   	ret    

c000aca8 <__ubsan_handle_divrem_overflow>:
c000aca8:	83 ec 0c             	sub    esp,0xc
c000acab:	83 ec 08             	sub    esp,0x8
c000acae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acb2:	68 8c 09 02 c0       	push   0xc002098c
c000acb7:	e8 f4 fd ff ff       	call   c000aab0 <KiUbsanPrintDetails(char const*, void*)>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	83 ec 0c             	sub    esp,0xc
c000acc2:	68 8c 09 02 c0       	push   0xc002098c
c000acc7:	e8 0f 5f 00 00       	call   c0010bdb <KePanic(char const*)>
c000accc:	83 c4 10             	add    esp,0x10
c000accf:	90                   	nop
c000acd0:	83 c4 0c             	add    esp,0xc
c000acd3:	c3                   	ret    

c000acd4 <__ubsan_handle_mul_overflow>:
c000acd4:	83 ec 0c             	sub    esp,0xc
c000acd7:	83 ec 08             	sub    esp,0x8
c000acda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acde:	68 f1 07 02 c0       	push   0xc00207f1
c000ace3:	e8 c8 fd ff ff       	call   c000aab0 <KiUbsanPrintDetails(char const*, void*)>
c000ace8:	83 c4 10             	add    esp,0x10
c000aceb:	83 ec 0c             	sub    esp,0xc
c000acee:	68 f1 07 02 c0       	push   0xc00207f1
c000acf3:	e8 e3 5e 00 00       	call   c0010bdb <KePanic(char const*)>
c000acf8:	83 c4 10             	add    esp,0x10
c000acfb:	90                   	nop
c000acfc:	83 c4 0c             	add    esp,0xc
c000acff:	c3                   	ret    

c000ad00 <__ubsan_handle_sub_overflow>:
c000ad00:	83 ec 0c             	sub    esp,0xc
c000ad03:	83 ec 08             	sub    esp,0x8
c000ad06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad0a:	68 0d 08 02 c0       	push   0xc002080d
c000ad0f:	e8 9c fd ff ff       	call   c000aab0 <KiUbsanPrintDetails(char const*, void*)>
c000ad14:	83 c4 10             	add    esp,0x10
c000ad17:	83 ec 0c             	sub    esp,0xc
c000ad1a:	68 0d 08 02 c0       	push   0xc002080d
c000ad1f:	e8 b7 5e 00 00       	call   c0010bdb <KePanic(char const*)>
c000ad24:	83 c4 10             	add    esp,0x10
c000ad27:	90                   	nop
c000ad28:	83 c4 0c             	add    esp,0xc
c000ad2b:	c3                   	ret    

c000ad2c <__ubsan_handle_shift_out_of_bounds>:
c000ad2c:	83 ec 0c             	sub    esp,0xc
c000ad2f:	83 ec 08             	sub    esp,0x8
c000ad32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad36:	68 ac 09 02 c0       	push   0xc00209ac
c000ad3b:	e8 70 fd ff ff       	call   c000aab0 <KiUbsanPrintDetails(char const*, void*)>
c000ad40:	83 c4 10             	add    esp,0x10
c000ad43:	83 ec 0c             	sub    esp,0xc
c000ad46:	68 ac 09 02 c0       	push   0xc00209ac
c000ad4b:	e8 8b 5e 00 00       	call   c0010bdb <KePanic(char const*)>
c000ad50:	83 c4 10             	add    esp,0x10
c000ad53:	90                   	nop
c000ad54:	83 c4 0c             	add    esp,0xc
c000ad57:	c3                   	ret    

c000ad58 <__ubsan_handle_negate_overflow>:
c000ad58:	83 ec 0c             	sub    esp,0xc
c000ad5b:	83 ec 08             	sub    esp,0x8
c000ad5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad62:	68 d0 09 02 c0       	push   0xc00209d0
c000ad67:	e8 44 fd ff ff       	call   c000aab0 <KiUbsanPrintDetails(char const*, void*)>
c000ad6c:	83 c4 10             	add    esp,0x10
c000ad6f:	83 ec 0c             	sub    esp,0xc
c000ad72:	68 d0 09 02 c0       	push   0xc00209d0
c000ad77:	e8 5f 5e 00 00       	call   c0010bdb <KePanic(char const*)>
c000ad7c:	83 c4 10             	add    esp,0x10
c000ad7f:	90                   	nop
c000ad80:	83 c4 0c             	add    esp,0xc
c000ad83:	c3                   	ret    

c000ad84 <File::read(unsigned long long, void*, int*)>:
c000ad84:	53                   	push   ebx
c000ad85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad89:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ad8d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ad94:	83 f8 19             	cmp    eax,0x19
c000ad97:	77 35                	ja     c000adce <File::read(unsigned long long, void*, int*)+0x4a>
c000ad99:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000ada0:	85 c0                	test   eax,eax
c000ada2:	74 2a                	je     c000adce <File::read(unsigned long long, void*, int*)+0x4a>
c000ada4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000adaa:	85 c0                	test   eax,eax
c000adac:	74 20                	je     c000adce <File::read(unsigned long long, void*, int*)+0x4a>
c000adae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adb2:	74 21                	je     c000add5 <File::read(unsigned long long, void*, int*)+0x51>
c000adb4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000adb6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000adba:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000adc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000adc8:	5b                   	pop    ebx
c000adc9:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000adcc:	ff e0                	jmp    eax
c000adce:	b8 0b 00 00 00       	mov    eax,0xb
c000add3:	eb 05                	jmp    c000adda <File::read(unsigned long long, void*, int*)+0x56>
c000add5:	b8 05 00 00 00       	mov    eax,0x5
c000adda:	5b                   	pop    ebx
c000addb:	c3                   	ret    

c000addc <File::write(unsigned long long, void*, int*)>:
c000addc:	53                   	push   ebx
c000addd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ade1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ade5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000adec:	83 f8 19             	cmp    eax,0x19
c000adef:	77 35                	ja     c000ae26 <File::write(unsigned long long, void*, int*)+0x4a>
c000adf1:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000adf8:	85 c0                	test   eax,eax
c000adfa:	74 2a                	je     c000ae26 <File::write(unsigned long long, void*, int*)+0x4a>
c000adfc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ae02:	85 c0                	test   eax,eax
c000ae04:	74 20                	je     c000ae26 <File::write(unsigned long long, void*, int*)+0x4a>
c000ae06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae0a:	74 21                	je     c000ae2d <File::write(unsigned long long, void*, int*)+0x51>
c000ae0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ae0e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ae12:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ae18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae20:	5b                   	pop    ebx
c000ae21:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ae24:	ff e0                	jmp    eax
c000ae26:	b8 0b 00 00 00       	mov    eax,0xb
c000ae2b:	eb 05                	jmp    c000ae32 <File::write(unsigned long long, void*, int*)+0x56>
c000ae2d:	b8 05 00 00 00       	mov    eax,0x5
c000ae32:	5b                   	pop    ebx
c000ae33:	c3                   	ret    

c000ae34 <Directory::read(unsigned long long, void*, int*)>:
c000ae34:	53                   	push   ebx
c000ae35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ae39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ae3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ae44:	83 f8 19             	cmp    eax,0x19
c000ae47:	77 35                	ja     c000ae7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ae49:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000ae50:	85 c0                	test   eax,eax
c000ae52:	74 2a                	je     c000ae7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ae54:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ae5a:	85 c0                	test   eax,eax
c000ae5c:	74 20                	je     c000ae7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ae5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae62:	74 21                	je     c000ae85 <Directory::read(unsigned long long, void*, int*)+0x51>
c000ae64:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ae66:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ae6a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ae70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ae74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ae78:	5b                   	pop    ebx
c000ae79:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ae7c:	ff e0                	jmp    eax
c000ae7e:	b8 0b 00 00 00       	mov    eax,0xb
c000ae83:	eb 05                	jmp    c000ae8a <Directory::read(unsigned long long, void*, int*)+0x56>
c000ae85:	b8 05 00 00 00       	mov    eax,0x5
c000ae8a:	5b                   	pop    ebx
c000ae8b:	c3                   	ret    

c000ae8c <Directory::write(unsigned long long, void*, int*)>:
c000ae8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae90:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ae97:	b8 0b 00 00 00       	mov    eax,0xb
c000ae9c:	83 fa 19             	cmp    edx,0x19
c000ae9f:	77 18                	ja     c000aeb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000aea1:	8b 14 95 20 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7be0]
c000aea8:	85 d2                	test   edx,edx
c000aeaa:	74 0d                	je     c000aeb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000aeac:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000aeb3:	19 c0                	sbb    eax,eax
c000aeb5:	83 e0 0a             	and    eax,0xa
c000aeb8:	40                   	inc    eax
c000aeb9:	c3                   	ret    

c000aeba <File::isAtty()>:
c000aeba:	31 c0                	xor    eax,eax
c000aebc:	c3                   	ret    
c000aebd:	90                   	nop

c000aebe <Directory::isAtty()>:
c000aebe:	31 c0                	xor    eax,eax
c000aec0:	c3                   	ret    
c000aec1:	90                   	nop

c000aec2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000aec2:	b8 0a 00 00 00       	mov    eax,0xa
c000aec7:	c3                   	ret    

c000aec8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000aec8:	b8 0a 00 00 00       	mov    eax,0xa
c000aecd:	c3                   	ret    

c000aece <Filesystem::allocateSwapfile(char const*, int)>:
c000aece:	31 c0                	xor    eax,eax
c000aed0:	31 d2                	xor    edx,edx
c000aed2:	c3                   	ret    
c000aed3:	90                   	nop

c000aed4 <File::~File()>:
c000aed4:	83 ec 0c             	sub    esp,0xc
c000aed7:	ba 60 0a 02 c0       	mov    edx,0xc0020a60
c000aedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee0:	89 10                	mov    DWORD PTR [eax],edx
c000aee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee6:	83 ec 0c             	sub    esp,0xc
c000aee9:	50                   	push   eax
c000aeea:	e8 a9 e4 ff ff       	call   c0009398 <UnixFile::~UnixFile()>
c000aeef:	83 c4 10             	add    esp,0x10
c000aef2:	90                   	nop
c000aef3:	83 c4 0c             	add    esp,0xc
c000aef6:	c3                   	ret    
c000aef7:	90                   	nop

c000aef8 <File::~File()>:
c000aef8:	83 ec 0c             	sub    esp,0xc
c000aefb:	83 ec 0c             	sub    esp,0xc
c000aefe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af02:	e8 cd ff ff ff       	call   c000aed4 <File::~File()>
c000af07:	83 c4 10             	add    esp,0x10
c000af0a:	83 ec 08             	sub    esp,0x8
c000af0d:	68 14 01 00 00       	push   0x114
c000af12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af16:	e8 2f f9 ff ff       	call   c000a84a <operator delete(void*, unsigned long)>
c000af1b:	83 c4 10             	add    esp,0x10
c000af1e:	83 c4 0c             	add    esp,0xc
c000af21:	c3                   	ret    

c000af22 <Directory::~Directory()>:
c000af22:	83 ec 0c             	sub    esp,0xc
c000af25:	ba 7c 0a 02 c0       	mov    edx,0xc0020a7c
c000af2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af2e:	89 10                	mov    DWORD PTR [eax],edx
c000af30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af34:	83 ec 0c             	sub    esp,0xc
c000af37:	50                   	push   eax
c000af38:	e8 5b e4 ff ff       	call   c0009398 <UnixFile::~UnixFile()>
c000af3d:	83 c4 10             	add    esp,0x10
c000af40:	90                   	nop
c000af41:	83 c4 0c             	add    esp,0xc
c000af44:	c3                   	ret    
c000af45:	90                   	nop

c000af46 <Directory::~Directory()>:
c000af46:	83 ec 0c             	sub    esp,0xc
c000af49:	83 ec 0c             	sub    esp,0xc
c000af4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af50:	e8 cd ff ff ff       	call   c000af22 <Directory::~Directory()>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	83 ec 08             	sub    esp,0x8
c000af5b:	68 14 01 00 00       	push   0x114
c000af60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af64:	e8 e1 f8 ff ff       	call   c000a84a <operator delete(void*, unsigned long)>
c000af69:	83 c4 10             	add    esp,0x10
c000af6c:	83 c4 0c             	add    esp,0xc
c000af6f:	c3                   	ret    

c000af70 <Filesystem::Filesystem()>:
c000af70:	ba f8 09 02 c0       	mov    edx,0xc00209f8
c000af75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af79:	89 10                	mov    DWORD PTR [eax],edx
c000af7b:	8b 15 b4 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fb4
c000af81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000af88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af8c:	a3 b4 5f 02 c0       	mov    ds:0xc0025fb4,eax
c000af91:	90                   	nop
c000af92:	c3                   	ret    
c000af93:	90                   	nop

c000af94 <Filesystem::~Filesystem()>:
c000af94:	ba f8 09 02 c0       	mov    edx,0xc00209f8
c000af99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af9d:	89 10                	mov    DWORD PTR [eax],edx
c000af9f:	90                   	nop
c000afa0:	c3                   	ret    
c000afa1:	90                   	nop

c000afa2 <Filesystem::~Filesystem()>:
c000afa2:	83 ec 0c             	sub    esp,0xc
c000afa5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afa9:	e8 e6 ff ff ff       	call   c000af94 <Filesystem::~Filesystem()>
c000afae:	83 c4 04             	add    esp,0x4
c000afb1:	83 ec 08             	sub    esp,0x8
c000afb4:	6a 08                	push   0x8
c000afb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afba:	e8 8b f8 ff ff       	call   c000a84a <operator delete(void*, unsigned long)>
c000afbf:	83 c4 10             	add    esp,0x10
c000afc2:	83 c4 0c             	add    esp,0xc
c000afc5:	c3                   	ret    

c000afc6 <Fs::getcwd(Process*, char*, int)>:
c000afc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000afca:	31 c0                	xor    eax,eax
c000afcc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000afcf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000afd3:	7d 15                	jge    c000afea <Fs::getcwd(Process*, char*, int)+0x24>
c000afd5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000afd9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000afe0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000afe3:	84 c9                	test   cl,cl
c000afe5:	74 06                	je     c000afed <Fs::getcwd(Process*, char*, int)+0x27>
c000afe7:	40                   	inc    eax
c000afe8:	eb e2                	jmp    c000afcc <Fs::getcwd(Process*, char*, int)+0x6>
c000afea:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000afed:	31 c0                	xor    eax,eax
c000afef:	c3                   	ret    

c000aff0 <Fs::initVFS()>:
c000aff0:	83 ec 18             	sub    esp,0x18
c000aff3:	6a 08                	push   0x8
c000aff5:	e8 b4 ca ff ff       	call   c0007aae <malloc>
c000affa:	89 04 24             	mov    DWORD PTR [esp],eax
c000affd:	e8 ca de 00 00       	call   c0018ecc <FAT::FAT()>
c000b002:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b009:	e8 a0 ca ff ff       	call   c0007aae <malloc>
c000b00e:	89 04 24             	mov    DWORD PTR [esp],eax
c000b011:	e8 dc ed 00 00       	call   c0019df2 <ISO9660::ISO9660()>
c000b016:	83 c4 1c             	add    esp,0x1c
c000b019:	c3                   	ret    

c000b01a <Fs::standardiseFiles(char*, char const*, char const*)>:
c000b01a:	55                   	push   ebp
c000b01b:	57                   	push   edi
c000b01c:	56                   	push   esi
c000b01d:	53                   	push   ebx
c000b01e:	81 ec 10 04 00 00    	sub    esp,0x410
c000b024:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000b02b:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000b032:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000b039:	68 00 04 00 00       	push   0x400
c000b03e:	6a 00                	push   0x0
c000b040:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000b044:	56                   	push   esi
c000b045:	e8 a6 54 ff ff       	call   c00004f0 <memset>
c000b04a:	83 c4 10             	add    esp,0x10
c000b04d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000b051:	75 0b                	jne    c000b05e <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000b053:	50                   	push   eax
c000b054:	50                   	push   eax
c000b055:	57                   	push   edi
c000b056:	56                   	push   esi
c000b057:	e8 e4 55 ff ff       	call   c0000640 <strcpy>
c000b05c:	eb 44                	jmp    c000b0a2 <Fs::standardiseFiles(char*, char const*, char const*)+0x88>
c000b05e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b061:	83 f8 5c             	cmp    eax,0x5c
c000b064:	74 05                	je     c000b06b <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000b066:	83 f8 2f             	cmp    eax,0x2f
c000b069:	75 18                	jne    c000b083 <Fs::standardiseFiles(char*, char const*, char const*)+0x69>
c000b06b:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b06e:	3c 60                	cmp    al,0x60
c000b070:	7e 03                	jle    c000b075 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000b072:	83 e8 20             	sub    eax,0x20
c000b075:	88 04 24             	mov    BYTE PTR [esp],al
c000b078:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b07f:	50                   	push   eax
c000b080:	50                   	push   eax
c000b081:	eb 18                	jmp    c000b09b <Fs::standardiseFiles(char*, char const*, char const*)+0x81>
c000b083:	50                   	push   eax
c000b084:	50                   	push   eax
c000b085:	55                   	push   ebp
c000b086:	56                   	push   esi
c000b087:	e8 b4 55 ff ff       	call   c0000640 <strcpy>
c000b08c:	5a                   	pop    edx
c000b08d:	59                   	pop    ecx
c000b08e:	68 b1 19 02 c0       	push   0xc00219b1
c000b093:	56                   	push   esi
c000b094:	e8 a7 57 ff ff       	call   c0000840 <strcat>
c000b099:	5d                   	pop    ebp
c000b09a:	58                   	pop    eax
c000b09b:	57                   	push   edi
c000b09c:	56                   	push   esi
c000b09d:	e8 9e 57 ff ff       	call   c0000840 <strcat>
c000b0a2:	83 c4 10             	add    esp,0x10
c000b0a5:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b0a8:	3c 60                	cmp    al,0x60
c000b0aa:	7e 03                	jle    c000b0af <Fs::standardiseFiles(char*, char const*, char const*)+0x95>
c000b0ac:	83 e8 20             	sub    eax,0x20
c000b0af:	88 04 24             	mov    BYTE PTR [esp],al
c000b0b2:	88 03                	mov    BYTE PTR [ebx],al
c000b0b4:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b0bb:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b0c1:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b0c5:	bf 03 00 00 00       	mov    edi,0x3
c000b0ca:	b8 03 00 00 00       	mov    eax,0x3
c000b0cf:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b0d3:	89 ea                	mov    edx,ebp
c000b0d5:	85 ed                	test   ebp,ebp
c000b0d7:	0f 84 97 00 00 00    	je     c000b174 <Fs::standardiseFiles(char*, char const*, char const*)+0x15a>
c000b0dd:	8d 4f 01             	lea    ecx,[edi+0x1]
c000b0e0:	83 fd 5c             	cmp    ebp,0x5c
c000b0e3:	74 05                	je     c000b0ea <Fs::standardiseFiles(char*, char const*, char const*)+0xd0>
c000b0e5:	83 fd 2f             	cmp    ebp,0x2f
c000b0e8:	75 12                	jne    c000b0fc <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000b0ea:	89 c5                	mov    ebp,eax
c000b0ec:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b0f1:	74 09                	je     c000b0fc <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000b0f3:	40                   	inc    eax
c000b0f4:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b0f8:	89 cf                	mov    edi,ecx
c000b0fa:	eb d3                	jmp    c000b0cf <Fs::standardiseFiles(char*, char const*, char const*)+0xb5>
c000b0fc:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b101:	0f be ea             	movsx  ebp,dl
c000b104:	75 5e                	jne    c000b164 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b106:	83 fd 2e             	cmp    ebp,0x2e
c000b109:	75 59                	jne    c000b164 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b10b:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000b10f:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b114:	74 18                	je     c000b12e <Fs::standardiseFiles(char*, char const*, char const*)+0x114>
c000b116:	83 fd 2e             	cmp    ebp,0x2e
c000b119:	74 53                	je     c000b16e <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000b11b:	89 f9                	mov    ecx,edi
c000b11d:	41                   	inc    ecx
c000b11e:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000b122:	83 fa 2f             	cmp    edx,0x2f
c000b125:	74 f6                	je     c000b11d <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000b127:	83 fa 5c             	cmp    edx,0x5c
c000b12a:	74 f1                	je     c000b11d <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000b12c:	eb ca                	jmp    c000b0f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b12e:	83 fd 2e             	cmp    ebp,0x2e
c000b131:	74 3b                	je     c000b16e <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000b133:	83 f8 03             	cmp    eax,0x3
c000b136:	74 c0                	je     c000b0f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b138:	41                   	inc    ecx
c000b139:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000b13d:	83 fa 2f             	cmp    edx,0x2f
c000b140:	74 f6                	je     c000b138 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000b142:	83 fa 5c             	cmp    edx,0x5c
c000b145:	74 f1                	je     c000b138 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000b147:	48                   	dec    eax
c000b148:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b14c:	75 06                	jne    c000b154 <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000b14e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b152:	eb f3                	jmp    c000b147 <Fs::standardiseFiles(char*, char const*, char const*)+0x12d>
c000b154:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b158:	74 07                	je     c000b161 <Fs::standardiseFiles(char*, char const*, char const*)+0x147>
c000b15a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b15e:	48                   	dec    eax
c000b15f:	eb f3                	jmp    c000b154 <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000b161:	40                   	inc    eax
c000b162:	eb 94                	jmp    c000b0f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b164:	83 fd 2f             	cmp    ebp,0x2f
c000b167:	74 8f                	je     c000b0f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b169:	83 fd 5c             	cmp    ebp,0x5c
c000b16c:	74 8a                	je     c000b0f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b16e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000b171:	40                   	inc    eax
c000b172:	eb 84                	jmp    c000b0f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b174:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b178:	83 ec 0c             	sub    esp,0xc
c000b17b:	53                   	push   ebx
c000b17c:	e8 ef 53 ff ff       	call   c0000570 <strlen>
c000b181:	83 c4 10             	add    esp,0x10
c000b184:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b189:	75 26                	jne    c000b1b1 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000b18b:	83 ec 0c             	sub    esp,0xc
c000b18e:	53                   	push   ebx
c000b18f:	e8 dc 53 ff ff       	call   c0000570 <strlen>
c000b194:	83 c4 10             	add    esp,0x10
c000b197:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b19c:	74 26                	je     c000b1c4 <Fs::standardiseFiles(char*, char const*, char const*)+0x1aa>
c000b19e:	83 ec 0c             	sub    esp,0xc
c000b1a1:	53                   	push   ebx
c000b1a2:	e8 c9 53 ff ff       	call   c0000570 <strlen>
c000b1a7:	83 c4 10             	add    esp,0x10
c000b1aa:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b1af:	eb c7                	jmp    c000b178 <Fs::standardiseFiles(char*, char const*, char const*)+0x15e>
c000b1b1:	83 ec 0c             	sub    esp,0xc
c000b1b4:	53                   	push   ebx
c000b1b5:	e8 b6 53 ff ff       	call   c0000570 <strlen>
c000b1ba:	83 c4 10             	add    esp,0x10
c000b1bd:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b1c2:	74 c7                	je     c000b18b <Fs::standardiseFiles(char*, char const*, char const*)+0x171>
c000b1c4:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b1ca:	5b                   	pop    ebx
c000b1cb:	5e                   	pop    esi
c000b1cc:	5f                   	pop    edi
c000b1cd:	5d                   	pop    ebp
c000b1ce:	c3                   	ret    
c000b1cf:	90                   	nop

c000b1d0 <File::File(char const*, Process*)>:
c000b1d0:	83 ec 0c             	sub    esp,0xc
c000b1d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1d7:	83 ec 08             	sub    esp,0x8
c000b1da:	6a 00                	push   0x0
c000b1dc:	50                   	push   eax
c000b1dd:	e8 d0 df ff ff       	call   c00091b2 <UnixFile::UnixFile(int)>
c000b1e2:	83 c4 10             	add    esp,0x10
c000b1e5:	ba 60 0a 02 c0       	mov    edx,0xc0020a60
c000b1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ee:	89 10                	mov    DWORD PTR [eax],edx
c000b1f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b1f4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b1fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1fe:	83 c0 0d             	add    eax,0xd
c000b201:	83 ec 04             	sub    esp,0x4
c000b204:	52                   	push   edx
c000b205:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b209:	50                   	push   eax
c000b20a:	e8 0b fe ff ff       	call   c000b01a <Fs::standardiseFiles(char*, char const*, char const*)>
c000b20f:	83 c4 10             	add    esp,0x10
c000b212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b216:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b219:	83 e8 41             	sub    eax,0x41
c000b21c:	88 c2                	mov    dl,al
c000b21e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b222:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b22c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b234:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b23a:	0f b6 c0             	movzx  eax,al
c000b23d:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b244:	85 c0                	test   eax,eax
c000b246:	74 3e                	je     c000b286 <File::File(char const*, Process*)+0xb6>
c000b248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b24c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b252:	0f b6 c0             	movzx  eax,al
c000b255:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b25c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b262:	85 c0                	test   eax,eax
c000b264:	75 20                	jne    c000b286 <File::File(char const*, Process*)+0xb6>
c000b266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b26a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b270:	0f b6 c0             	movzx  eax,al
c000b273:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b27a:	83 ec 0c             	sub    esp,0xc
c000b27d:	50                   	push   eax
c000b27e:	e8 1f 21 00 00       	call   c000d3a2 <LogicalDisk::mount()>
c000b283:	83 c4 10             	add    esp,0x10
c000b286:	90                   	nop
c000b287:	83 c4 0c             	add    esp,0xc
c000b28a:	c3                   	ret    
c000b28b:	90                   	nop

c000b28c <File::open(FileOpenMode)>:
c000b28c:	53                   	push   ebx
c000b28d:	b8 0b 00 00 00       	mov    eax,0xb
c000b292:	83 ec 08             	sub    esp,0x8
c000b295:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b299:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b2a0:	83 fa 19             	cmp    edx,0x19
c000b2a3:	77 40                	ja     c000b2e5 <File::open(FileOpenMode)+0x59>
c000b2a5:	8b 14 95 20 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7be0]
c000b2ac:	85 d2                	test   edx,edx
c000b2ae:	74 35                	je     c000b2e5 <File::open(FileOpenMode)+0x59>
c000b2b0:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b2b6:	85 d2                	test   edx,edx
c000b2b8:	74 2b                	je     c000b2e5 <File::open(FileOpenMode)+0x59>
c000b2ba:	b8 06 00 00 00       	mov    eax,0x6
c000b2bf:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b2c3:	75 20                	jne    c000b2e5 <File::open(FileOpenMode)+0x59>
c000b2c5:	8b 02                	mov    eax,DWORD PTR [edx]
c000b2c7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b2cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d1:	51                   	push   ecx
c000b2d2:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b2d5:	51                   	push   ecx
c000b2d6:	52                   	push   edx
c000b2d7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b2da:	83 c4 10             	add    esp,0x10
c000b2dd:	85 c0                	test   eax,eax
c000b2df:	75 04                	jne    c000b2e5 <File::open(FileOpenMode)+0x59>
c000b2e1:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b2e5:	83 c4 08             	add    esp,0x8
c000b2e8:	5b                   	pop    ebx
c000b2e9:	c3                   	ret    

c000b2ea <File::close()>:
c000b2ea:	53                   	push   ebx
c000b2eb:	b8 0b 00 00 00       	mov    eax,0xb
c000b2f0:	83 ec 08             	sub    esp,0x8
c000b2f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2f7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2fe:	83 f9 19             	cmp    ecx,0x19
c000b301:	77 41                	ja     c000b344 <File::close()+0x5a>
c000b303:	8b 1c 8d 20 84 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b30a:	85 db                	test   ebx,ebx
c000b30c:	74 36                	je     c000b344 <File::close()+0x5a>
c000b30e:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b315:	74 2d                	je     c000b344 <File::close()+0x5a>
c000b317:	b8 05 00 00 00       	mov    eax,0x5
c000b31c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b320:	74 22                	je     c000b344 <File::close()+0x5a>
c000b322:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b326:	8b 04 8d 20 84 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7be0]
c000b32d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b333:	53                   	push   ebx
c000b334:	53                   	push   ebx
c000b335:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b337:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b33d:	50                   	push   eax
c000b33e:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b341:	83 c4 10             	add    esp,0x10
c000b344:	83 c4 08             	add    esp,0x8
c000b347:	5b                   	pop    ebx
c000b348:	c3                   	ret    
c000b349:	90                   	nop

c000b34a <File::seek(unsigned long long)>:
c000b34a:	56                   	push   esi
c000b34b:	53                   	push   ebx
c000b34c:	b8 0b 00 00 00       	mov    eax,0xb
c000b351:	51                   	push   ecx
c000b352:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b356:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b35a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b361:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b365:	83 fa 19             	cmp    edx,0x19
c000b368:	77 31                	ja     c000b39b <File::seek(unsigned long long)+0x51>
c000b36a:	8b 14 95 20 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7be0]
c000b371:	85 d2                	test   edx,edx
c000b373:	74 26                	je     c000b39b <File::seek(unsigned long long)+0x51>
c000b375:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b37b:	85 d2                	test   edx,edx
c000b37d:	74 1c                	je     c000b39b <File::seek(unsigned long long)+0x51>
c000b37f:	b8 05 00 00 00       	mov    eax,0x5
c000b384:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b388:	74 11                	je     c000b39b <File::seek(unsigned long long)+0x51>
c000b38a:	8b 02                	mov    eax,DWORD PTR [edx]
c000b38c:	53                   	push   ebx
c000b38d:	51                   	push   ecx
c000b38e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b394:	52                   	push   edx
c000b395:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b398:	83 c4 10             	add    esp,0x10
c000b39b:	5a                   	pop    edx
c000b39c:	5b                   	pop    ebx
c000b39d:	5e                   	pop    esi
c000b39e:	c3                   	ret    
c000b39f:	90                   	nop

c000b3a0 <File::tell(unsigned long long*)>:
c000b3a0:	83 ec 0c             	sub    esp,0xc
c000b3a3:	b8 0b 00 00 00       	mov    eax,0xb
c000b3a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b3ac:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b3b3:	83 fa 19             	cmp    edx,0x19
c000b3b6:	77 34                	ja     c000b3ec <File::tell(unsigned long long*)+0x4c>
c000b3b8:	8b 14 95 20 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7be0]
c000b3bf:	85 d2                	test   edx,edx
c000b3c1:	74 29                	je     c000b3ec <File::tell(unsigned long long*)+0x4c>
c000b3c3:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b3c9:	85 d2                	test   edx,edx
c000b3cb:	74 1f                	je     c000b3ec <File::tell(unsigned long long*)+0x4c>
c000b3cd:	b8 05 00 00 00       	mov    eax,0x5
c000b3d2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b3d6:	74 14                	je     c000b3ec <File::tell(unsigned long long*)+0x4c>
c000b3d8:	50                   	push   eax
c000b3d9:	8b 02                	mov    eax,DWORD PTR [edx]
c000b3db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b3df:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b3e5:	52                   	push   edx
c000b3e6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b3e9:	83 c4 10             	add    esp,0x10
c000b3ec:	83 c4 0c             	add    esp,0xc
c000b3ef:	c3                   	ret    

c000b3f0 <File::rewind()>:
c000b3f0:	83 ec 10             	sub    esp,0x10
c000b3f3:	6a 00                	push   0x0
c000b3f5:	6a 00                	push   0x0
c000b3f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3fb:	e8 4a ff ff ff       	call   c000b34a <File::seek(unsigned long long)>
c000b400:	83 c4 1c             	add    esp,0x1c
c000b403:	c3                   	ret    

c000b404 <File::unlink()>:
c000b404:	83 ec 0c             	sub    esp,0xc
c000b407:	b8 0b 00 00 00       	mov    eax,0xb
c000b40c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b410:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b417:	83 f9 19             	cmp    ecx,0x19
c000b41a:	77 2f                	ja     c000b44b <File::unlink()+0x47>
c000b41c:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b423:	85 c9                	test   ecx,ecx
c000b425:	74 24                	je     c000b44b <File::unlink()+0x47>
c000b427:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b42d:	85 c9                	test   ecx,ecx
c000b42f:	74 1a                	je     c000b44b <File::unlink()+0x47>
c000b431:	b8 06 00 00 00       	mov    eax,0x6
c000b436:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b43a:	75 0f                	jne    c000b44b <File::unlink()+0x47>
c000b43c:	83 c2 0d             	add    edx,0xd
c000b43f:	50                   	push   eax
c000b440:	50                   	push   eax
c000b441:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b443:	52                   	push   edx
c000b444:	51                   	push   ecx
c000b445:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b448:	83 c4 10             	add    esp,0x10
c000b44b:	83 c4 0c             	add    esp,0xc
c000b44e:	c3                   	ret    
c000b44f:	90                   	nop

c000b450 <File::rename(char const*)>:
c000b450:	83 ec 0c             	sub    esp,0xc
c000b453:	b8 0b 00 00 00       	mov    eax,0xb
c000b458:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b45c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b463:	83 f9 19             	cmp    ecx,0x19
c000b466:	77 32                	ja     c000b49a <File::rename(char const*)+0x4a>
c000b468:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b46f:	85 c9                	test   ecx,ecx
c000b471:	74 27                	je     c000b49a <File::rename(char const*)+0x4a>
c000b473:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b479:	85 c9                	test   ecx,ecx
c000b47b:	74 1d                	je     c000b49a <File::rename(char const*)+0x4a>
c000b47d:	b8 06 00 00 00       	mov    eax,0x6
c000b482:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b486:	75 12                	jne    c000b49a <File::rename(char const*)+0x4a>
c000b488:	83 c2 0d             	add    edx,0xd
c000b48b:	50                   	push   eax
c000b48c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b48e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b492:	52                   	push   edx
c000b493:	51                   	push   ecx
c000b494:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b497:	83 c4 10             	add    esp,0x10
c000b49a:	83 c4 0c             	add    esp,0xc
c000b49d:	c3                   	ret    

c000b49e <File::chfatattr(unsigned char, unsigned char)>:
c000b49e:	57                   	push   edi
c000b49f:	b8 0b 00 00 00       	mov    eax,0xb
c000b4a4:	56                   	push   esi
c000b4a5:	53                   	push   ebx
c000b4a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b4aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b4ae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b4b5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b4b9:	83 f9 19             	cmp    ecx,0x19
c000b4bc:	77 37                	ja     c000b4f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b4be:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b4c5:	85 c9                	test   ecx,ecx
c000b4c7:	74 2c                	je     c000b4f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b4c9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b4cf:	85 c9                	test   ecx,ecx
c000b4d1:	74 22                	je     c000b4f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b4d3:	b8 06 00 00 00       	mov    eax,0x6
c000b4d8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b4dc:	75 17                	jne    c000b4f5 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b4de:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b4e0:	89 f0                	mov    eax,esi
c000b4e2:	83 c2 0d             	add    edx,0xd
c000b4e5:	0f b6 f0             	movzx  esi,al
c000b4e8:	0f b6 db             	movzx  ebx,bl
c000b4eb:	56                   	push   esi
c000b4ec:	53                   	push   ebx
c000b4ed:	52                   	push   edx
c000b4ee:	51                   	push   ecx
c000b4ef:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b4f2:	83 c4 10             	add    esp,0x10
c000b4f5:	5b                   	pop    ebx
c000b4f6:	5e                   	pop    esi
c000b4f7:	5f                   	pop    edi
c000b4f8:	c3                   	ret    
c000b4f9:	90                   	nop

c000b4fa <File::exists()>:
c000b4fa:	83 ec 0c             	sub    esp,0xc
c000b4fd:	31 c0                	xor    eax,eax
c000b4ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b503:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b50a:	83 f9 19             	cmp    ecx,0x19
c000b50d:	77 24                	ja     c000b533 <File::exists()+0x39>
c000b50f:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b516:	85 c9                	test   ecx,ecx
c000b518:	74 19                	je     c000b533 <File::exists()+0x39>
c000b51a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b520:	85 c9                	test   ecx,ecx
c000b522:	74 0f                	je     c000b533 <File::exists()+0x39>
c000b524:	83 c2 0d             	add    edx,0xd
c000b527:	50                   	push   eax
c000b528:	50                   	push   eax
c000b529:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b52b:	52                   	push   edx
c000b52c:	51                   	push   ecx
c000b52d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b530:	83 c4 10             	add    esp,0x10
c000b533:	83 c4 0c             	add    esp,0xc
c000b536:	c3                   	ret    
c000b537:	90                   	nop

c000b538 <File::stat(unsigned long long*, bool*)>:
c000b538:	56                   	push   esi
c000b539:	53                   	push   ebx
c000b53a:	50                   	push   eax
c000b53b:	b8 0b 00 00 00       	mov    eax,0xb
c000b540:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b544:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b548:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b54f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b553:	83 f9 19             	cmp    ecx,0x19
c000b556:	77 3d                	ja     c000b595 <File::stat(unsigned long long*, bool*)+0x5d>
c000b558:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b55f:	85 c9                	test   ecx,ecx
c000b561:	74 32                	je     c000b595 <File::stat(unsigned long long*, bool*)+0x5d>
c000b563:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b569:	85 c9                	test   ecx,ecx
c000b56b:	74 28                	je     c000b595 <File::stat(unsigned long long*, bool*)+0x5d>
c000b56d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b56f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b573:	74 13                	je     c000b588 <File::stat(unsigned long long*, bool*)+0x50>
c000b575:	83 ec 04             	sub    esp,0x4
c000b578:	56                   	push   esi
c000b579:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b57f:	51                   	push   ecx
c000b580:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b583:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b586:	eb 0a                	jmp    c000b592 <File::stat(unsigned long long*, bool*)+0x5a>
c000b588:	53                   	push   ebx
c000b589:	83 c2 0d             	add    edx,0xd
c000b58c:	56                   	push   esi
c000b58d:	52                   	push   edx
c000b58e:	51                   	push   ecx
c000b58f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b592:	83 c4 10             	add    esp,0x10
c000b595:	5a                   	pop    edx
c000b596:	5b                   	pop    ebx
c000b597:	5e                   	pop    esi
c000b598:	c3                   	ret    

c000b599 <Fs::setcwd(Process*, char*)>:
c000b599:	55                   	push   ebp
c000b59a:	57                   	push   edi
c000b59b:	56                   	push   esi
c000b59c:	53                   	push   ebx
c000b59d:	81 ec 20 02 00 00    	sub    esp,0x220
c000b5a3:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b5aa:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b5b0:	57                   	push   edi
c000b5b1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b5b8:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b5bc:	56                   	push   esi
c000b5bd:	e8 58 fa ff ff       	call   c000b01a <Fs::standardiseFiles(char*, char const*, char const*)>
c000b5c2:	89 34 24             	mov    DWORD PTR [esp],esi
c000b5c5:	e8 a6 4f ff ff       	call   c0000570 <strlen>
c000b5ca:	83 c4 10             	add    esp,0x10
c000b5cd:	83 f8 02             	cmp    eax,0x2
c000b5d0:	77 15                	ja     c000b5e7 <Fs::setcwd(Process*, char*)+0x4e>
c000b5d2:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b5d7:	83 eb 41             	sub    ebx,0x41
c000b5da:	8b 04 9d 20 84 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7be0]
c000b5e1:	85 c0                	test   eax,eax
c000b5e3:	75 1c                	jne    c000b601 <Fs::setcwd(Process*, char*)+0x68>
c000b5e5:	eb 2f                	jmp    c000b616 <Fs::setcwd(Process*, char*)+0x7d>
c000b5e7:	83 ec 0c             	sub    esp,0xc
c000b5ea:	56                   	push   esi
c000b5eb:	e8 80 4f ff ff       	call   c0000570 <strlen>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	83 f8 03             	cmp    eax,0x3
c000b5f6:	75 57                	jne    c000b64f <Fs::setcwd(Process*, char*)+0xb6>
c000b5f8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b5fd:	75 50                	jne    c000b64f <Fs::setcwd(Process*, char*)+0xb6>
c000b5ff:	eb d1                	jmp    c000b5d2 <Fs::setcwd(Process*, char*)+0x39>
c000b601:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b608:	75 0c                	jne    c000b616 <Fs::setcwd(Process*, char*)+0x7d>
c000b60a:	83 ec 0c             	sub    esp,0xc
c000b60d:	50                   	push   eax
c000b60e:	e8 8f 1d 00 00       	call   c000d3a2 <LogicalDisk::mount()>
c000b613:	83 c4 10             	add    esp,0x10
c000b616:	b8 03 00 00 00       	mov    eax,0x3
c000b61b:	83 fb 19             	cmp    ebx,0x19
c000b61e:	0f 87 c6 00 00 00    	ja     c000b6ea <Fs::setcwd(Process*, char*)+0x151>
c000b624:	8b 14 9d 20 84 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7be0]
c000b62b:	b8 05 00 00 00       	mov    eax,0x5
c000b630:	85 d2                	test   edx,edx
c000b632:	0f 84 b2 00 00 00    	je     c000b6ea <Fs::setcwd(Process*, char*)+0x151>
c000b638:	b8 06 00 00 00       	mov    eax,0x6
c000b63d:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b644:	0f 85 92 00 00 00    	jne    c000b6dc <Fs::setcwd(Process*, char*)+0x143>
c000b64a:	e9 9b 00 00 00       	jmp    c000b6ea <Fs::setcwd(Process*, char*)+0x151>
c000b64f:	83 ec 0c             	sub    esp,0xc
c000b652:	68 14 01 00 00       	push   0x114
c000b657:	e8 52 c4 ff ff       	call   c0007aae <malloc>
c000b65c:	83 c4 0c             	add    esp,0xc
c000b65f:	89 c3                	mov    ebx,eax
c000b661:	55                   	push   ebp
c000b662:	56                   	push   esi
c000b663:	50                   	push   eax
c000b664:	e8 67 fb ff ff       	call   c000b1d0 <File::File(char const*, Process*)>
c000b669:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b66e:	83 c4 0c             	add    esp,0xc
c000b671:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b675:	50                   	push   eax
c000b676:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b67a:	50                   	push   eax
c000b67b:	53                   	push   ebx
c000b67c:	e8 b7 fe ff ff       	call   c000b538 <File::stat(unsigned long long*, bool*)>
c000b681:	83 c4 10             	add    esp,0x10
c000b684:	83 f8 02             	cmp    eax,0x2
c000b687:	74 27                	je     c000b6b0 <Fs::setcwd(Process*, char*)+0x117>
c000b689:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b68e:	75 1c                	jne    c000b6ac <Fs::setcwd(Process*, char*)+0x113>
c000b690:	b8 02 00 00 00       	mov    eax,0x2
c000b695:	85 db                	test   ebx,ebx
c000b697:	74 51                	je     c000b6ea <Fs::setcwd(Process*, char*)+0x151>
c000b699:	83 ec 0c             	sub    esp,0xc
c000b69c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b69e:	53                   	push   ebx
c000b69f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b6a2:	83 c4 10             	add    esp,0x10
c000b6a5:	b8 02 00 00 00       	mov    eax,0x2
c000b6aa:	eb 3e                	jmp    c000b6ea <Fs::setcwd(Process*, char*)+0x151>
c000b6ac:	85 c0                	test   eax,eax
c000b6ae:	74 1c                	je     c000b6cc <Fs::setcwd(Process*, char*)+0x133>
c000b6b0:	b8 01 00 00 00       	mov    eax,0x1
c000b6b5:	85 db                	test   ebx,ebx
c000b6b7:	74 31                	je     c000b6ea <Fs::setcwd(Process*, char*)+0x151>
c000b6b9:	83 ec 0c             	sub    esp,0xc
c000b6bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b6be:	53                   	push   ebx
c000b6bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b6c2:	83 c4 10             	add    esp,0x10
c000b6c5:	b8 01 00 00 00       	mov    eax,0x1
c000b6ca:	eb 1e                	jmp    c000b6ea <Fs::setcwd(Process*, char*)+0x151>
c000b6cc:	85 db                	test   ebx,ebx
c000b6ce:	74 0c                	je     c000b6dc <Fs::setcwd(Process*, char*)+0x143>
c000b6d0:	83 ec 0c             	sub    esp,0xc
c000b6d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b6d5:	53                   	push   ebx
c000b6d6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b6d9:	83 c4 10             	add    esp,0x10
c000b6dc:	50                   	push   eax
c000b6dd:	50                   	push   eax
c000b6de:	56                   	push   esi
c000b6df:	57                   	push   edi
c000b6e0:	e8 5b 4f ff ff       	call   c0000640 <strcpy>
c000b6e5:	83 c4 10             	add    esp,0x10
c000b6e8:	31 c0                	xor    eax,eax
c000b6ea:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b6f0:	5b                   	pop    ebx
c000b6f1:	5e                   	pop    esi
c000b6f2:	5f                   	pop    edi
c000b6f3:	5d                   	pop    ebp
c000b6f4:	c3                   	ret    
c000b6f5:	90                   	nop

c000b6f6 <Directory::Directory(char const*, Process*)>:
c000b6f6:	83 ec 0c             	sub    esp,0xc
c000b6f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6fd:	83 ec 08             	sub    esp,0x8
c000b700:	6a 00                	push   0x0
c000b702:	50                   	push   eax
c000b703:	e8 aa da ff ff       	call   c00091b2 <UnixFile::UnixFile(int)>
c000b708:	83 c4 10             	add    esp,0x10
c000b70b:	ba 7c 0a 02 c0       	mov    edx,0xc0020a7c
c000b710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b714:	89 10                	mov    DWORD PTR [eax],edx
c000b716:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b71a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b724:	83 c0 0d             	add    eax,0xd
c000b727:	83 ec 04             	sub    esp,0x4
c000b72a:	52                   	push   edx
c000b72b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b72f:	50                   	push   eax
c000b730:	e8 e5 f8 ff ff       	call   c000b01a <Fs::standardiseFiles(char*, char const*, char const*)>
c000b735:	83 c4 10             	add    esp,0x10
c000b738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b73c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b73f:	83 e8 41             	sub    eax,0x41
c000b742:	88 c2                	mov    dl,al
c000b744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b748:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b752:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b75a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b760:	0f b6 c0             	movzx  eax,al
c000b763:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b76a:	85 c0                	test   eax,eax
c000b76c:	74 3e                	je     c000b7ac <Directory::Directory(char const*, Process*)+0xb6>
c000b76e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b772:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b778:	0f b6 c0             	movzx  eax,al
c000b77b:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b782:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b788:	85 c0                	test   eax,eax
c000b78a:	75 20                	jne    c000b7ac <Directory::Directory(char const*, Process*)+0xb6>
c000b78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b790:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b796:	0f b6 c0             	movzx  eax,al
c000b799:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c000b7a0:	83 ec 0c             	sub    esp,0xc
c000b7a3:	50                   	push   eax
c000b7a4:	e8 f9 1b 00 00       	call   c000d3a2 <LogicalDisk::mount()>
c000b7a9:	83 c4 10             	add    esp,0x10
c000b7ac:	90                   	nop
c000b7ad:	83 c4 0c             	add    esp,0xc
c000b7b0:	c3                   	ret    
c000b7b1:	90                   	nop

c000b7b2 <Directory::open()>:
c000b7b2:	53                   	push   ebx
c000b7b3:	b8 0b 00 00 00       	mov    eax,0xb
c000b7b8:	83 ec 08             	sub    esp,0x8
c000b7bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b7bf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b7c6:	83 fa 19             	cmp    edx,0x19
c000b7c9:	77 3d                	ja     c000b808 <Directory::open()+0x56>
c000b7cb:	8b 14 95 20 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7be0]
c000b7d2:	85 d2                	test   edx,edx
c000b7d4:	74 32                	je     c000b808 <Directory::open()+0x56>
c000b7d6:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b7dc:	85 d2                	test   edx,edx
c000b7de:	74 28                	je     c000b808 <Directory::open()+0x56>
c000b7e0:	b8 06 00 00 00       	mov    eax,0x6
c000b7e5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b7e9:	75 1d                	jne    c000b808 <Directory::open()+0x56>
c000b7eb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b7f1:	50                   	push   eax
c000b7f2:	8b 02                	mov    eax,DWORD PTR [edx]
c000b7f4:	51                   	push   ecx
c000b7f5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b7f8:	51                   	push   ecx
c000b7f9:	52                   	push   edx
c000b7fa:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b7fd:	83 c4 10             	add    esp,0x10
c000b800:	85 c0                	test   eax,eax
c000b802:	75 04                	jne    c000b808 <Directory::open()+0x56>
c000b804:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b808:	83 c4 08             	add    esp,0x8
c000b80b:	5b                   	pop    ebx
c000b80c:	c3                   	ret    
c000b80d:	90                   	nop

c000b80e <Directory::close()>:
c000b80e:	53                   	push   ebx
c000b80f:	b8 0b 00 00 00       	mov    eax,0xb
c000b814:	83 ec 08             	sub    esp,0x8
c000b817:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b81b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b822:	83 f9 19             	cmp    ecx,0x19
c000b825:	77 41                	ja     c000b868 <Directory::close()+0x5a>
c000b827:	8b 1c 8d 20 84 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b82e:	85 db                	test   ebx,ebx
c000b830:	74 36                	je     c000b868 <Directory::close()+0x5a>
c000b832:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b839:	74 2d                	je     c000b868 <Directory::close()+0x5a>
c000b83b:	b8 05 00 00 00       	mov    eax,0x5
c000b840:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b844:	74 22                	je     c000b868 <Directory::close()+0x5a>
c000b846:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b84a:	8b 04 8d 20 84 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7be0]
c000b851:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b857:	53                   	push   ebx
c000b858:	53                   	push   ebx
c000b859:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b85b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b861:	50                   	push   eax
c000b862:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000b865:	83 c4 10             	add    esp,0x10
c000b868:	83 c4 08             	add    esp,0x8
c000b86b:	5b                   	pop    ebx
c000b86c:	c3                   	ret    
c000b86d:	90                   	nop

c000b86e <Directory::unlink()>:
c000b86e:	83 ec 0c             	sub    esp,0xc
c000b871:	b8 0b 00 00 00       	mov    eax,0xb
c000b876:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b87a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b881:	83 f9 19             	cmp    ecx,0x19
c000b884:	77 2f                	ja     c000b8b5 <Directory::unlink()+0x47>
c000b886:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b88d:	85 c9                	test   ecx,ecx
c000b88f:	74 24                	je     c000b8b5 <Directory::unlink()+0x47>
c000b891:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b897:	85 c9                	test   ecx,ecx
c000b899:	74 1a                	je     c000b8b5 <Directory::unlink()+0x47>
c000b89b:	b8 06 00 00 00       	mov    eax,0x6
c000b8a0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b8a4:	75 0f                	jne    c000b8b5 <Directory::unlink()+0x47>
c000b8a6:	83 c2 0d             	add    edx,0xd
c000b8a9:	50                   	push   eax
c000b8aa:	50                   	push   eax
c000b8ab:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b8ad:	52                   	push   edx
c000b8ae:	51                   	push   ecx
c000b8af:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b8b2:	83 c4 10             	add    esp,0x10
c000b8b5:	83 c4 0c             	add    esp,0xc
c000b8b8:	c3                   	ret    
c000b8b9:	90                   	nop

c000b8ba <Directory::rename(char const*)>:
c000b8ba:	83 ec 0c             	sub    esp,0xc
c000b8bd:	b8 0b 00 00 00       	mov    eax,0xb
c000b8c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b8cd:	83 f9 19             	cmp    ecx,0x19
c000b8d0:	77 32                	ja     c000b904 <Directory::rename(char const*)+0x4a>
c000b8d2:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b8d9:	85 c9                	test   ecx,ecx
c000b8db:	74 27                	je     c000b904 <Directory::rename(char const*)+0x4a>
c000b8dd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b8e3:	85 c9                	test   ecx,ecx
c000b8e5:	74 1d                	je     c000b904 <Directory::rename(char const*)+0x4a>
c000b8e7:	b8 06 00 00 00       	mov    eax,0x6
c000b8ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b8f0:	75 12                	jne    c000b904 <Directory::rename(char const*)+0x4a>
c000b8f2:	83 c2 0d             	add    edx,0xd
c000b8f5:	50                   	push   eax
c000b8f6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b8f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b8fc:	52                   	push   edx
c000b8fd:	51                   	push   ecx
c000b8fe:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b901:	83 c4 10             	add    esp,0x10
c000b904:	83 c4 0c             	add    esp,0xc
c000b907:	c3                   	ret    

c000b908 <Directory::exists()>:
c000b908:	83 ec 0c             	sub    esp,0xc
c000b90b:	31 c0                	xor    eax,eax
c000b90d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b911:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b918:	83 f9 19             	cmp    ecx,0x19
c000b91b:	77 24                	ja     c000b941 <Directory::exists()+0x39>
c000b91d:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b924:	85 c9                	test   ecx,ecx
c000b926:	74 19                	je     c000b941 <Directory::exists()+0x39>
c000b928:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b92e:	85 c9                	test   ecx,ecx
c000b930:	74 0f                	je     c000b941 <Directory::exists()+0x39>
c000b932:	83 c2 0d             	add    edx,0xd
c000b935:	50                   	push   eax
c000b936:	50                   	push   eax
c000b937:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b939:	52                   	push   edx
c000b93a:	51                   	push   ecx
c000b93b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b93e:	83 c4 10             	add    esp,0x10
c000b941:	83 c4 0c             	add    esp,0xc
c000b944:	c3                   	ret    
c000b945:	90                   	nop

c000b946 <Directory::read(dirent*)>:
c000b946:	83 ec 1c             	sub    esp,0x1c
c000b949:	b8 0b 00 00 00       	mov    eax,0xb
c000b94e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b952:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b959:	83 f9 19             	cmp    ecx,0x19
c000b95c:	77 30                	ja     c000b98e <Directory::read(dirent*)+0x48>
c000b95e:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b965:	85 c9                	test   ecx,ecx
c000b967:	74 25                	je     c000b98e <Directory::read(dirent*)+0x48>
c000b969:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000b970:	74 1c                	je     c000b98e <Directory::read(dirent*)+0x48>
c000b972:	83 ec 0c             	sub    esp,0xc
c000b975:	8b 02                	mov    eax,DWORD PTR [edx]
c000b977:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000b97b:	51                   	push   ecx
c000b97c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b980:	6a 00                	push   0x0
c000b982:	68 10 01 00 00       	push   0x110
c000b987:	52                   	push   edx
c000b988:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b98b:	83 c4 20             	add    esp,0x20
c000b98e:	83 c4 1c             	add    esp,0x1c
c000b991:	c3                   	ret    

c000b992 <Directory::create()>:
c000b992:	83 ec 0c             	sub    esp,0xc
c000b995:	b8 0b 00 00 00       	mov    eax,0xb
c000b99a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b99e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b9a5:	83 f9 19             	cmp    ecx,0x19
c000b9a8:	77 2f                	ja     c000b9d9 <Directory::create()+0x47>
c000b9aa:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c000b9b1:	85 c9                	test   ecx,ecx
c000b9b3:	74 24                	je     c000b9d9 <Directory::create()+0x47>
c000b9b5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b9bb:	85 c9                	test   ecx,ecx
c000b9bd:	74 1a                	je     c000b9d9 <Directory::create()+0x47>
c000b9bf:	b8 06 00 00 00       	mov    eax,0x6
c000b9c4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b9c8:	75 0f                	jne    c000b9d9 <Directory::create()+0x47>
c000b9ca:	83 c2 0d             	add    edx,0xd
c000b9cd:	50                   	push   eax
c000b9ce:	50                   	push   eax
c000b9cf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9d1:	52                   	push   edx
c000b9d2:	51                   	push   ecx
c000b9d3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b9d6:	83 c4 10             	add    esp,0x10
c000b9d9:	83 c4 0c             	add    esp,0xc
c000b9dc:	c3                   	ret    
c000b9dd:	90                   	nop

c000b9de <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b9de:	b8 0a 00 00 00       	mov    eax,0xa
c000b9e3:	c3                   	ret    

c000b9e4 <Bus::Bus(char const*)>:
c000b9e4:	83 ec 0c             	sub    esp,0xc
c000b9e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9eb:	83 ec 08             	sub    esp,0x8
c000b9ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9f2:	50                   	push   eax
c000b9f3:	e8 22 08 00 00       	call   c000c21a <Device::Device(char const*)>
c000b9f8:	83 c4 10             	add    esp,0x10
c000b9fb:	ba 98 0a 02 c0       	mov    edx,0xc0020a98
c000ba00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba04:	89 10                	mov    DWORD PTR [eax],edx
c000ba06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba0a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ba14:	90                   	nop
c000ba15:	83 c4 0c             	add    esp,0xc
c000ba18:	c3                   	ret    
c000ba19:	90                   	nop
c000ba1a:	66 90                	xchg   ax,ax

c000ba1c <Bus::~Bus()>:
c000ba1c:	83 ec 0c             	sub    esp,0xc
c000ba1f:	ba 98 0a 02 c0       	mov    edx,0xc0020a98
c000ba24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba28:	89 10                	mov    DWORD PTR [eax],edx
c000ba2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba2e:	83 ec 0c             	sub    esp,0xc
c000ba31:	50                   	push   eax
c000ba32:	e8 4d 05 00 00       	call   c000bf84 <Device::~Device()>
c000ba37:	83 c4 10             	add    esp,0x10
c000ba3a:	90                   	nop
c000ba3b:	83 c4 0c             	add    esp,0xc
c000ba3e:	c3                   	ret    
c000ba3f:	90                   	nop

c000ba40 <Bus::~Bus()>:
c000ba40:	83 ec 0c             	sub    esp,0xc
c000ba43:	83 ec 0c             	sub    esp,0xc
c000ba46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba4a:	e8 cd ff ff ff       	call   c000ba1c <Bus::~Bus()>
c000ba4f:	83 c4 10             	add    esp,0x10
c000ba52:	83 ec 08             	sub    esp,0x8
c000ba55:	68 58 01 00 00       	push   0x158
c000ba5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba5e:	e8 e7 ed ff ff       	call   c000a84a <operator delete(void*, unsigned long)>
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	83 c4 0c             	add    esp,0xc
c000ba69:	c3                   	ret    

c000ba6a <beepThread(void*)>:
c000ba6a:	83 ec 0c             	sub    esp,0xc
c000ba6d:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000ba72:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba76:	48                   	dec    eax
c000ba77:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000ba7c:	75 01                	jne    c000ba7f <beepThread(void*)+0x15>
c000ba7e:	fb                   	sti    
c000ba7f:	83 ec 0c             	sub    esp,0xc
c000ba82:	6b c2 0a             	imul   eax,edx,0xa
c000ba85:	50                   	push   eax
c000ba86:	e8 71 9c 00 00       	call   c00156fc <milliTenthSleep(unsigned int)>
c000ba8b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000ba92:	e8 c0 bb 00 00       	call   c0017657 <HalMakeBeep(int)>
c000ba97:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ba9f:	83 c4 1c             	add    esp,0x1c
c000baa2:	e9 39 9b 00 00       	jmp    c00155e0 <blockTask(TaskState)>

c000baa7 <Krnl::beep(int, int, bool)>:
c000baa7:	56                   	push   esi
c000baa8:	53                   	push   ebx
c000baa9:	83 ec 10             	sub    esp,0x10
c000baac:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000bab0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 9a bb 00 00       	call   c0017657 <HalMakeBeep(int)>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	89 f0                	mov    eax,esi
c000bac2:	84 c0                	test   al,al
c000bac4:	74 1e                	je     c000bae4 <Krnl::beep(int, int, bool)+0x3d>
c000bac6:	83 ec 0c             	sub    esp,0xc
c000bac9:	6b db 0a             	imul   ebx,ebx,0xa
c000bacc:	53                   	push   ebx
c000bacd:	e8 2a 9c 00 00       	call   c00156fc <milliTenthSleep(unsigned int)>
c000bad2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000bada:	83 c4 14             	add    esp,0x14
c000badd:	5b                   	pop    ebx
c000bade:	5e                   	pop    esi
c000badf:	e9 73 bb 00 00       	jmp    c0017657 <HalMakeBeep(int)>
c000bae4:	68 e6 00 00 00       	push   0xe6
c000bae9:	53                   	push   ebx
c000baea:	68 6a ba 00 c0       	push   0xc000ba6a
c000baef:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c000baf5:	e8 82 96 00 00       	call   c001517c <Process::createThread(void (*)(void*), void*, int)>
c000bafa:	83 c4 14             	add    esp,0x14
c000bafd:	5b                   	pop    ebx
c000bafe:	5e                   	pop    esi
c000baff:	c3                   	ret    

c000bb00 <User::loadClockSettings(int)>:
c000bb00:	53                   	push   ebx
c000bb01:	83 ec 14             	sub    esp,0x14
c000bb04:	68 14 01 00 00       	push   0x114
c000bb09:	e8 a0 bf ff ff       	call   c0007aae <malloc>
c000bb0e:	83 c4 0c             	add    esp,0xc
c000bb11:	89 c3                	mov    ebx,eax
c000bb13:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c000bb19:	68 bc 0a 02 c0       	push   0xc0020abc
c000bb1e:	50                   	push   eax
c000bb1f:	e8 ac f6 ff ff       	call   c000b1d0 <File::File(char const*, Process*)>
c000bb24:	58                   	pop    eax
c000bb25:	5a                   	pop    edx
c000bb26:	6a 01                	push   0x1
c000bb28:	53                   	push   ebx
c000bb29:	e8 5e f7 ff ff       	call   c000b28c <File::open(FileOpenMode)>
c000bb2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bb31:	e8 b4 f7 ff ff       	call   c000b2ea <File::close()>
c000bb36:	83 c4 10             	add    esp,0x10
c000bb39:	85 db                	test   ebx,ebx
c000bb3b:	74 0f                	je     c000bb4c <User::loadClockSettings(int)+0x4c>
c000bb3d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb3f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000bb43:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bb46:	83 c4 08             	add    esp,0x8
c000bb49:	5b                   	pop    ebx
c000bb4a:	ff e0                	jmp    eax
c000bb4c:	83 c4 08             	add    esp,0x8
c000bb4f:	5b                   	pop    ebx
c000bb50:	c3                   	ret    
c000bb51:	90                   	nop

c000bb52 <Clock::Clock(char const*)>:
c000bb52:	83 ec 0c             	sub    esp,0xc
c000bb55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb59:	83 ec 08             	sub    esp,0x8
c000bb5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb60:	50                   	push   eax
c000bb61:	e8 b4 06 00 00       	call   c000c21a <Device::Device(char const*)>
c000bb66:	83 c4 10             	add    esp,0x10
c000bb69:	ba e4 0a 02 c0       	mov    edx,0xc0020ae4
c000bb6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb72:	89 10                	mov    DWORD PTR [eax],edx
c000bb74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb78:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000bb82:	90                   	nop
c000bb83:	83 c4 0c             	add    esp,0xc
c000bb86:	c3                   	ret    
c000bb87:	90                   	nop

c000bb88 <Clock::~Clock()>:
c000bb88:	83 ec 0c             	sub    esp,0xc
c000bb8b:	ba e4 0a 02 c0       	mov    edx,0xc0020ae4
c000bb90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb94:	89 10                	mov    DWORD PTR [eax],edx
c000bb96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb9a:	83 ec 0c             	sub    esp,0xc
c000bb9d:	50                   	push   eax
c000bb9e:	e8 e1 03 00 00       	call   c000bf84 <Device::~Device()>
c000bba3:	83 c4 10             	add    esp,0x10
c000bba6:	90                   	nop
c000bba7:	83 c4 0c             	add    esp,0xc
c000bbaa:	c3                   	ret    
c000bbab:	90                   	nop

c000bbac <Clock::~Clock()>:
c000bbac:	83 ec 0c             	sub    esp,0xc
c000bbaf:	83 ec 0c             	sub    esp,0xc
c000bbb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbb6:	e8 cd ff ff ff       	call   c000bb88 <Clock::~Clock()>
c000bbbb:	83 c4 10             	add    esp,0x10
c000bbbe:	83 ec 08             	sub    esp,0x8
c000bbc1:	68 58 01 00 00       	push   0x158
c000bbc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbca:	e8 7b ec ff ff       	call   c000a84a <operator delete(void*, unsigned long)>
c000bbcf:	83 c4 10             	add    esp,0x10
c000bbd2:	83 c4 0c             	add    esp,0xc
c000bbd5:	c3                   	ret    

c000bbd6 <Clock::timeInSecondsLocal()>:
c000bbd6:	53                   	push   ebx
c000bbd7:	83 ec 14             	sub    esp,0x14
c000bbda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bbde:	8b 10                	mov    edx,DWORD PTR [eax]
c000bbe0:	50                   	push   eax
c000bbe1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bbe4:	0f b6 0d b8 5f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0025fb8
c000bbeb:	03 0d bc 5f 02 c0    	add    ecx,DWORD PTR ds:0xc0025fbc
c000bbf1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bbf7:	89 cb                	mov    ebx,ecx
c000bbf9:	c1 fb 1f             	sar    ebx,0x1f
c000bbfc:	01 c8                	add    eax,ecx
c000bbfe:	11 da                	adc    edx,ebx
c000bc00:	83 c4 10             	add    esp,0x10
c000bc03:	31 c9                	xor    ecx,ecx
c000bc05:	80 3d b9 5f 02 c0 00 	cmp    BYTE PTR ds:0xc0025fb9,0x0
c000bc0c:	74 05                	je     c000bc13 <Clock::timeInSecondsLocal()+0x3d>
c000bc0e:	b9 08 07 00 00       	mov    ecx,0x708
c000bc13:	31 db                	xor    ebx,ebx
c000bc15:	01 c8                	add    eax,ecx
c000bc17:	11 da                	adc    edx,ebx
c000bc19:	83 c4 08             	add    esp,0x8
c000bc1c:	5b                   	pop    ebx
c000bc1d:	c3                   	ret    

c000bc1e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000bc1e:	57                   	push   edi
c000bc1f:	56                   	push   esi
c000bc20:	53                   	push   ebx
c000bc21:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bc25:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bc29:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bc2b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bc2f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000bc32:	0f b6 05 b8 5f 02 c0 	movzx  eax,BYTE PTR ds:0xc0025fb8
c000bc39:	03 05 bc 5f 02 c0    	add    eax,DWORD PTR ds:0xc0025fbc
c000bc3f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000bc45:	99                   	cdq    
c000bc46:	29 c6                	sub    esi,eax
c000bc48:	19 d7                	sbb    edi,edx
c000bc4a:	89 f0                	mov    eax,esi
c000bc4c:	89 fa                	mov    edx,edi
c000bc4e:	31 f6                	xor    esi,esi
c000bc50:	80 3d b9 5f 02 c0 00 	cmp    BYTE PTR ds:0xc0025fb9,0x0
c000bc57:	74 05                	je     c000bc5e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000bc59:	be 08 07 00 00       	mov    esi,0x708
c000bc5e:	31 ff                	xor    edi,edi
c000bc60:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000bc64:	29 f0                	sub    eax,esi
c000bc66:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bc6a:	19 fa                	sbb    edx,edi
c000bc6c:	89 d8                	mov    eax,ebx
c000bc6e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc72:	5b                   	pop    ebx
c000bc73:	5e                   	pop    esi
c000bc74:	5f                   	pop    edi
c000bc75:	ff e0                	jmp    eax

c000bc77 <datetimeToSeconds(datetime_t)>:
c000bc77:	55                   	push   ebp
c000bc78:	57                   	push   edi
c000bc79:	56                   	push   esi
c000bc7a:	53                   	push   ebx
c000bc7b:	83 ec 0c             	sub    esp,0xc
c000bc7e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bc82:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000bc86:	89 d6                	mov    esi,edx
c000bc88:	0f b6 c7             	movzx  eax,bh
c000bc8b:	c1 ee 10             	shr    esi,0x10
c000bc8e:	6b e8 3c             	imul   ebp,eax,0x3c
c000bc91:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000bc97:	0f b6 ce             	movzx  ecx,dh
c000bc9a:	89 df                	mov    edi,ebx
c000bc9c:	49                   	dec    ecx
c000bc9d:	c1 ef 10             	shr    edi,0x10
c000bca0:	0f b6 db             	movzx  ebx,bl
c000bca3:	89 f8                	mov    eax,edi
c000bca5:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000bcab:	0f b6 f8             	movzx  edi,al
c000bcae:	0f b6 d2             	movzx  edx,dl
c000bcb1:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000bcb5:	01 d8                	add    eax,ebx
c000bcb7:	0f b7 de             	movzx  ebx,si
c000bcba:	89 04 24             	mov    DWORD PTR [esp],eax
c000bcbd:	c1 f8 1f             	sar    eax,0x1f
c000bcc0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bcc4:	0f b6 c1             	movzx  eax,cl
c000bcc7:	8b 0c 85 20 0b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdf4e0]
c000bcce:	83 f8 01             	cmp    eax,0x1
c000bcd1:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000bcd5:	76 27                	jbe    c000bcfe <datetimeToSeconds(datetime_t)+0x87>
c000bcd7:	83 e6 03             	and    esi,0x3
c000bcda:	75 22                	jne    c000bcfe <datetimeToSeconds(datetime_t)+0x87>
c000bcdc:	31 d2                	xor    edx,edx
c000bcde:	be 64 00 00 00       	mov    esi,0x64
c000bce3:	89 d8                	mov    eax,ebx
c000bce5:	f7 f6                	div    esi
c000bce7:	85 d2                	test   edx,edx
c000bce9:	75 12                	jne    c000bcfd <datetimeToSeconds(datetime_t)+0x86>
c000bceb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000bcf1:	be 90 01 00 00       	mov    esi,0x190
c000bcf6:	99                   	cdq    
c000bcf7:	f7 fe                	idiv   esi
c000bcf9:	85 d2                	test   edx,edx
c000bcfb:	75 01                	jne    c000bcfe <datetimeToSeconds(datetime_t)+0x87>
c000bcfd:	41                   	inc    ecx
c000bcfe:	83 fb 46             	cmp    ebx,0x46
c000bd01:	76 48                	jbe    c000bd4b <datetimeToSeconds(datetime_t)+0xd4>
c000bd03:	be 46 00 00 00       	mov    esi,0x46
c000bd08:	bf 64 00 00 00       	mov    edi,0x64
c000bd0d:	bd 90 01 00 00       	mov    ebp,0x190
c000bd12:	b8 6d 01 00 00       	mov    eax,0x16d
c000bd17:	f7 c6 03 00 00 00    	test   esi,0x3
c000bd1d:	75 23                	jne    c000bd42 <datetimeToSeconds(datetime_t)+0xcb>
c000bd1f:	89 f0                	mov    eax,esi
c000bd21:	99                   	cdq    
c000bd22:	f7 ff                	idiv   edi
c000bd24:	b8 6e 01 00 00       	mov    eax,0x16e
c000bd29:	85 d2                	test   edx,edx
c000bd2b:	75 15                	jne    c000bd42 <datetimeToSeconds(datetime_t)+0xcb>
c000bd2d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bd33:	99                   	cdq    
c000bd34:	f7 fd                	idiv   ebp
c000bd36:	83 fa 01             	cmp    edx,0x1
c000bd39:	19 c0                	sbb    eax,eax
c000bd3b:	f7 d0                	not    eax
c000bd3d:	05 6e 01 00 00       	add    eax,0x16e
c000bd42:	01 c1                	add    ecx,eax
c000bd44:	46                   	inc    esi
c000bd45:	39 de                	cmp    esi,ebx
c000bd47:	7c c9                	jl     c000bd12 <datetimeToSeconds(datetime_t)+0x9b>
c000bd49:	eb 34                	jmp    c000bd7f <datetimeToSeconds(datetime_t)+0x108>
c000bd4b:	74 32                	je     c000bd7f <datetimeToSeconds(datetime_t)+0x108>
c000bd4d:	b8 45 00 00 00       	mov    eax,0x45
c000bd52:	89 c2                	mov    edx,eax
c000bd54:	83 e2 03             	and    edx,0x3
c000bd57:	39 d8                	cmp    eax,ebx
c000bd59:	7e 0f                	jle    c000bd6a <datetimeToSeconds(datetime_t)+0xf3>
c000bd5b:	83 fa 01             	cmp    edx,0x1
c000bd5e:	19 d2                	sbb    edx,edx
c000bd60:	48                   	dec    eax
c000bd61:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000bd68:	eb e8                	jmp    c000bd52 <datetimeToSeconds(datetime_t)+0xdb>
c000bd6a:	b8 6d 01 00 00       	mov    eax,0x16d
c000bd6f:	85 d2                	test   edx,edx
c000bd71:	75 0a                	jne    c000bd7d <datetimeToSeconds(datetime_t)+0x106>
c000bd73:	83 fb 01             	cmp    ebx,0x1
c000bd76:	19 c0                	sbb    eax,eax
c000bd78:	05 6e 01 00 00       	add    eax,0x16e
c000bd7d:	29 c1                	sub    ecx,eax
c000bd7f:	b8 80 51 01 00       	mov    eax,0x15180
c000bd84:	f7 e9                	imul   ecx
c000bd86:	03 04 24             	add    eax,DWORD PTR [esp]
c000bd89:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000bd8d:	83 c4 0c             	add    esp,0xc
c000bd90:	5b                   	pop    ebx
c000bd91:	5e                   	pop    esi
c000bd92:	5f                   	pop    edi
c000bd93:	5d                   	pop    ebp
c000bd94:	c3                   	ret    
c000bd95:	90                   	nop

c000bd96 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bd96:	57                   	push   edi
c000bd97:	56                   	push   esi
c000bd98:	53                   	push   ebx
c000bd99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd9d:	8b 06                	mov    eax,DWORD PTR [esi]
c000bd9f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bda2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bda6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bdaa:	e8 c8 fe ff ff       	call   c000bc77 <datetimeToSeconds(datetime_t)>
c000bdaf:	59                   	pop    ecx
c000bdb0:	0f b6 0d b8 5f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0025fb8
c000bdb7:	5b                   	pop    ebx
c000bdb8:	03 0d bc 5f 02 c0    	add    ecx,DWORD PTR ds:0xc0025fbc
c000bdbe:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bdc4:	89 cb                	mov    ebx,ecx
c000bdc6:	c1 fb 1f             	sar    ebx,0x1f
c000bdc9:	29 c8                	sub    eax,ecx
c000bdcb:	19 da                	sbb    edx,ebx
c000bdcd:	31 c9                	xor    ecx,ecx
c000bdcf:	80 3d b9 5f 02 c0 00 	cmp    BYTE PTR ds:0xc0025fb9,0x0
c000bdd6:	74 05                	je     c000bddd <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bdd8:	b9 08 07 00 00       	mov    ecx,0x708
c000bddd:	31 db                	xor    ebx,ebx
c000bddf:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bde3:	29 c8                	sub    eax,ecx
c000bde5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bde9:	19 da                	sbb    edx,ebx
c000bdeb:	89 f8                	mov    eax,edi
c000bded:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bdf1:	5b                   	pop    ebx
c000bdf2:	5e                   	pop    esi
c000bdf3:	5f                   	pop    edi
c000bdf4:	ff e0                	jmp    eax

c000bdf6 <secondsToDatetime(unsigned long long)>:
c000bdf6:	55                   	push   ebp
c000bdf7:	57                   	push   edi
c000bdf8:	56                   	push   esi
c000bdf9:	53                   	push   ebx
c000bdfa:	83 ec 1c             	sub    esp,0x1c
c000bdfd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000be01:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000be05:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000be09:	6a 00                	push   0x0
c000be0b:	68 80 51 01 00       	push   0x15180
c000be10:	55                   	push   ebp
c000be11:	57                   	push   edi
c000be12:	e8 b9 2b 01 00       	call   c001e9d0 <__udivdi3>
c000be17:	83 c4 10             	add    esp,0x10
c000be1a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000be20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be24:	6a 00                	push   0x0
c000be26:	68 80 51 01 00       	push   0x15180
c000be2b:	55                   	push   ebp
c000be2c:	57                   	push   edi
c000be2d:	bf 10 0e 00 00       	mov    edi,0xe10
c000be32:	e8 99 2c 01 00       	call   c001ead0 <__umoddi3>
c000be37:	83 c4 10             	add    esp,0x10
c000be3a:	99                   	cdq    
c000be3b:	f7 ff                	idiv   edi
c000be3d:	bf 3c 00 00 00       	mov    edi,0x3c
c000be42:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000be45:	89 d0                	mov    eax,edx
c000be47:	99                   	cdq    
c000be48:	f7 ff                	idiv   edi
c000be4a:	85 db                	test   ebx,ebx
c000be4c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000be4f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000be52:	79 11                	jns    c000be65 <secondsToDatetime(unsigned long long)+0x6f>
c000be54:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be58:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000be5e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be63:	eb 07                	jmp    c000be6c <secondsToDatetime(unsigned long long)+0x76>
c000be65:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000be6a:	89 d8                	mov    eax,ebx
c000be6c:	bf b4 05 00 00       	mov    edi,0x5b4
c000be71:	99                   	cdq    
c000be72:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000be77:	f7 f9                	idiv   ecx
c000be79:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000be7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be82:	31 d2                	xor    edx,edx
c000be84:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000be8c:	01 c3                	add    ebx,eax
c000be8e:	89 d8                	mov    eax,ebx
c000be90:	f7 f1                	div    ecx
c000be92:	31 d2                	xor    edx,edx
c000be94:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000be97:	89 d8                	mov    eax,ebx
c000be99:	f7 f7                	div    edi
c000be9b:	31 d2                	xor    edx,edx
c000be9d:	29 c1                	sub    ecx,eax
c000be9f:	89 d8                	mov    eax,ebx
c000bea1:	f7 f5                	div    ebp
c000bea3:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bea8:	29 c1                	sub    ecx,eax
c000beaa:	31 d2                	xor    edx,edx
c000beac:	89 c8                	mov    eax,ecx
c000beae:	f7 f5                	div    ebp
c000beb0:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000beb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000beb9:	31 d2                	xor    edx,edx
c000bebb:	89 c8                	mov    eax,ecx
c000bebd:	f7 f5                	div    ebp
c000bebf:	31 d2                	xor    edx,edx
c000bec1:	01 c3                	add    ebx,eax
c000bec3:	89 c8                	mov    eax,ecx
c000bec5:	f7 f7                	div    edi
c000bec7:	bf 99 00 00 00       	mov    edi,0x99
c000becc:	29 c3                	sub    ebx,eax
c000bece:	31 d2                	xor    edx,edx
c000bed0:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bed8:	29 c3                	sub    ebx,eax
c000beda:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bedd:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bee0:	bb 05 00 00 00       	mov    ebx,0x5
c000bee5:	83 c1 02             	add    ecx,0x2
c000bee8:	89 c8                	mov    eax,ecx
c000beea:	f7 f7                	div    edi
c000beec:	31 d2                	xor    edx,edx
c000beee:	89 c7                	mov    edi,eax
c000bef0:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bef6:	83 c0 02             	add    eax,0x2
c000bef9:	f7 f3                	div    ebx
c000befb:	89 eb                	mov    ebx,ebp
c000befd:	29 c3                	sub    ebx,eax
c000beff:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bf05:	88 1e                	mov    BYTE PTR [esi],bl
c000bf07:	19 c0                	sbb    eax,eax
c000bf09:	31 d2                	xor    edx,edx
c000bf0b:	83 e0 0c             	and    eax,0xc
c000bf0e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bf12:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bf1a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bf1e:	83 f9 01             	cmp    ecx,0x1
c000bf21:	0f 96 c2             	setbe  dl
c000bf24:	41                   	inc    ecx
c000bf25:	01 d0                	add    eax,edx
c000bf27:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bf2a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bf2e:	83 c4 1c             	add    esp,0x1c
c000bf31:	89 f0                	mov    eax,esi
c000bf33:	5b                   	pop    ebx
c000bf34:	5e                   	pop    esi
c000bf35:	5f                   	pop    edi
c000bf36:	5d                   	pop    ebp
c000bf37:	c2 04 00             	ret    0x4

c000bf3a <Clock::timeInDatetimeLocal()>:
c000bf3a:	53                   	push   ebx
c000bf3b:	83 ec 14             	sub    esp,0x14
c000bf3e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bf42:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf46:	e8 8b fc ff ff       	call   c000bbd6 <Clock::timeInSecondsLocal()>
c000bf4b:	83 c4 0c             	add    esp,0xc
c000bf4e:	52                   	push   edx
c000bf4f:	50                   	push   eax
c000bf50:	53                   	push   ebx
c000bf51:	e8 a0 fe ff ff       	call   c000bdf6 <secondsToDatetime(unsigned long long)>
c000bf56:	89 d8                	mov    eax,ebx
c000bf58:	83 c4 14             	add    esp,0x14
c000bf5b:	5b                   	pop    ebx
c000bf5c:	c2 04 00             	ret    0x4
c000bf5f:	90                   	nop

c000bf60 <Device::hibernate()>:
c000bf60:	c3                   	ret    
c000bf61:	90                   	nop

c000bf62 <Device::wake()>:
c000bf62:	c3                   	ret    
c000bf63:	90                   	nop

c000bf64 <Device::detect()>:
c000bf64:	c3                   	ret    
c000bf65:	90                   	nop

c000bf66 <Device::disableLegacy()>:
c000bf66:	c3                   	ret    
c000bf67:	90                   	nop

c000bf68 <Device::powerSaving(PowerSavingLevel)>:
c000bf68:	c3                   	ret    
c000bf69:	90                   	nop

c000bf6a <DriverlessDevice::close(int, int, void*)>:
c000bf6a:	31 c0                	xor    eax,eax
c000bf6c:	c3                   	ret    
c000bf6d:	90                   	nop

c000bf6e <DriverlessDevice::detect()>:
c000bf6e:	c3                   	ret    
c000bf6f:	90                   	nop

c000bf70 <DriverlessDevice::open(int, int, void*)>:
c000bf70:	83 ec 18             	sub    esp,0x18
c000bf73:	68 50 0b 02 c0       	push   0xc0020b50
c000bf78:	e8 5e 4c 00 00       	call   c0010bdb <KePanic(char const*)>
c000bf7d:	83 c8 ff             	or     eax,0xffffffff
c000bf80:	83 c4 1c             	add    esp,0x1c
c000bf83:	c3                   	ret    

c000bf84 <Device::~Device()>:
c000bf84:	ba b0 0b 02 c0       	mov    edx,0xc0020bb0
c000bf89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf8d:	89 10                	mov    DWORD PTR [eax],edx
c000bf8f:	90                   	nop
c000bf90:	c3                   	ret    
c000bf91:	90                   	nop

c000bf92 <Device::~Device()>:
c000bf92:	83 ec 0c             	sub    esp,0xc
c000bf95:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bf99:	e8 e6 ff ff ff       	call   c000bf84 <Device::~Device()>
c000bf9e:	83 c4 04             	add    esp,0x4
c000bfa1:	83 ec 08             	sub    esp,0x8
c000bfa4:	68 58 01 00 00       	push   0x158
c000bfa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfad:	e8 98 e8 ff ff       	call   c000a84a <operator delete(void*, unsigned long)>
c000bfb2:	83 c4 10             	add    esp,0x10
c000bfb5:	83 c4 0c             	add    esp,0xc
c000bfb8:	c3                   	ret    
c000bfb9:	90                   	nop

c000bfba <Device::findAndLoadDriver()>:
c000bfba:	c7 44 24 04 6e 0b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020b6e
c000bfc2:	e9 b0 e9 ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)>
c000bfc7:	90                   	nop

c000bfc8 <Device::preOpenPCI(PCIDeviceInfo)>:
c000bfc8:	57                   	push   edi
c000bfc9:	b9 09 00 00 00       	mov    ecx,0x9
c000bfce:	56                   	push   esi
c000bfcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bfd3:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bfd7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bfe1:	81 c7 18 01 00 00    	add    edi,0x118
c000bfe7:	fc                   	cld    
c000bfe8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bfea:	5e                   	pop    esi
c000bfeb:	5f                   	pop    edi
c000bfec:	c3                   	ret    
c000bfed:	90                   	nop

c000bfee <Device::preOpenACPI(void*, char*, char*)>:
c000bfee:	57                   	push   edi
c000bfef:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bff4:	56                   	push   esi
c000bff5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bff9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bffd:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c007:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c00d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c013:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c017:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c019:	b9 0e 00 00 00       	mov    ecx,0xe
c000c01e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c024:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c028:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c02a:	5e                   	pop    esi
c000c02b:	5f                   	pop    edi
c000c02c:	c3                   	ret    
c000c02d:	90                   	nop

c000c02e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c02e:	53                   	push   ebx
c000c02f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c033:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c037:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c03b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c03f:	0f b6 c0             	movzx  eax,al
c000c042:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c046:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c04a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c04e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c052:	5b                   	pop    ebx
c000c053:	e9 a8 05 00 00       	jmp    c000c600 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c058 <Device::getParent()>:
c000c058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c05c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c062:	c3                   	ret    
c000c063:	90                   	nop

c000c064 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c064:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c068:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c06c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c071:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c075:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c079:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c07d:	e9 e6 06 00 00       	jmp    c000c768 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c082 <Device::addChild(Device*)>:
c000c082:	53                   	push   ebx
c000c083:	83 ec 08             	sub    esp,0x8
c000c086:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c08a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c08e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c094:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c09a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c09c:	85 d2                	test   edx,edx
c000c09e:	74 04                	je     c000c0a4 <Device::addChild(Device*)+0x22>
c000c0a0:	89 d3                	mov    ebx,edx
c000c0a2:	eb f6                	jmp    c000c09a <Device::addChild(Device*)+0x18>
c000c0a4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c0a7:	83 ec 0c             	sub    esp,0xc
c000c0aa:	6a 08                	push   0x8
c000c0ac:	e8 fd b9 ff ff       	call   c0007aae <malloc>
c000c0b1:	89 03                	mov    DWORD PTR [ebx],eax
c000c0b3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c0b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c0c0:	83 c4 18             	add    esp,0x18
c000c0c3:	5b                   	pop    ebx
c000c0c4:	c3                   	ret    
c000c0c5:	90                   	nop

c000c0c6 <Device::removeAllChildren()>:
c000c0c6:	56                   	push   esi
c000c0c7:	53                   	push   ebx
c000c0c8:	52                   	push   edx
c000c0c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c0cd:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c0d3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0d6:	74 17                	je     c000c0ef <Device::removeAllChildren()+0x29>
c000c0d8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c0db:	85 c0                	test   eax,eax
c000c0dd:	74 0c                	je     c000c0eb <Device::removeAllChildren()+0x25>
c000c0df:	83 ec 0c             	sub    esp,0xc
c000c0e2:	8b 10                	mov    edx,DWORD PTR [eax]
c000c0e4:	50                   	push   eax
c000c0e5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c0e8:	83 c4 10             	add    esp,0x10
c000c0eb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0ed:	eb e4                	jmp    c000c0d3 <Device::removeAllChildren()+0xd>
c000c0ef:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c0f5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c0fb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c101:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c108:	58                   	pop    eax
c000c109:	5b                   	pop    ebx
c000c10a:	5e                   	pop    esi
c000c10b:	c3                   	ret    

c000c10c <Device::hibernateAll()>:
c000c10c:	53                   	push   ebx
c000c10d:	83 ec 14             	sub    esp,0x14
c000c110:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c114:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c116:	53                   	push   ebx
c000c117:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c11a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c120:	83 c4 10             	add    esp,0x10
c000c123:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c126:	74 0f                	je     c000c137 <Device::hibernateAll()+0x2b>
c000c128:	83 ec 0c             	sub    esp,0xc
c000c12b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c12e:	e8 d9 ff ff ff       	call   c000c10c <Device::hibernateAll()>
c000c133:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c135:	eb e9                	jmp    c000c120 <Device::hibernateAll()+0x14>
c000c137:	83 c4 08             	add    esp,0x8
c000c13a:	5b                   	pop    ebx
c000c13b:	c3                   	ret    

c000c13c <Device::wakeAll()>:
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 14             	sub    esp,0x14
c000c140:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c144:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c146:	53                   	push   ebx
c000c147:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c14a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c150:	83 c4 10             	add    esp,0x10
c000c153:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c156:	74 0f                	je     c000c167 <Device::wakeAll()+0x2b>
c000c158:	83 ec 0c             	sub    esp,0xc
c000c15b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c15e:	e8 d9 ff ff ff       	call   c000c13c <Device::wakeAll()>
c000c163:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c165:	eb e9                	jmp    c000c150 <Device::wakeAll()+0x14>
c000c167:	83 c4 08             	add    esp,0x8
c000c16a:	5b                   	pop    ebx
c000c16b:	c3                   	ret    

c000c16c <Device::detectAll()>:
c000c16c:	53                   	push   ebx
c000c16d:	83 ec 14             	sub    esp,0x14
c000c170:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c174:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c176:	53                   	push   ebx
c000c177:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c17a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c180:	83 c4 10             	add    esp,0x10
c000c183:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c186:	74 0f                	je     c000c197 <Device::detectAll()+0x2b>
c000c188:	83 ec 0c             	sub    esp,0xc
c000c18b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c18e:	e8 d9 ff ff ff       	call   c000c16c <Device::detectAll()>
c000c193:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c195:	eb e9                	jmp    c000c180 <Device::detectAll()+0x14>
c000c197:	83 c4 08             	add    esp,0x8
c000c19a:	5b                   	pop    ebx
c000c19b:	c3                   	ret    

c000c19c <Device::disableLegacyAll()>:
c000c19c:	c3                   	ret    
c000c19d:	90                   	nop

c000c19e <Device::loadDriversForAll()>:
c000c19e:	c3                   	ret    
c000c19f:	90                   	nop

c000c1a0 <Device::closeAll()>:
c000c1a0:	53                   	push   ebx
c000c1a1:	83 ec 08             	sub    esp,0x8
c000c1a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c1a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c1aa:	6a 00                	push   0x0
c000c1ac:	6a 00                	push   0x0
c000c1ae:	6a 00                	push   0x0
c000c1b0:	53                   	push   ebx
c000c1b1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c1b4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c1ba:	83 c4 10             	add    esp,0x10
c000c1bd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c1c0:	74 0f                	je     c000c1d1 <Device::closeAll()+0x31>
c000c1c2:	83 ec 0c             	sub    esp,0xc
c000c1c5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c1c8:	e8 d3 ff ff ff       	call   c000c1a0 <Device::closeAll()>
c000c1cd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c1cf:	eb e9                	jmp    c000c1ba <Device::closeAll()+0x1a>
c000c1d1:	83 c4 08             	add    esp,0x8
c000c1d4:	5b                   	pop    ebx
c000c1d5:	c3                   	ret    

c000c1d6 <Device::powerSavingAll(PowerSavingLevel)>:
c000c1d6:	56                   	push   esi
c000c1d7:	53                   	push   ebx
c000c1d8:	83 ec 0c             	sub    esp,0xc
c000c1db:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c1df:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c1e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c1e5:	56                   	push   esi
c000c1e6:	53                   	push   ebx
c000c1e7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c1ea:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c1f0:	83 c4 10             	add    esp,0x10
c000c1f3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c1f6:	74 0f                	je     c000c207 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c1f8:	52                   	push   edx
c000c1f9:	52                   	push   edx
c000c1fa:	56                   	push   esi
c000c1fb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c1fe:	e8 d3 ff ff ff       	call   c000c1d6 <Device::powerSavingAll(PowerSavingLevel)>
c000c203:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c205:	eb e9                	jmp    c000c1f0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c207:	58                   	pop    eax
c000c208:	5b                   	pop    ebx
c000c209:	5e                   	pop    esi
c000c20a:	c3                   	ret    
c000c20b:	90                   	nop

c000c20c <Device::setName(char const*)>:
c000c20c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c214:	e9 27 44 ff ff       	jmp    c0000640 <strcpy>
c000c219:	90                   	nop

c000c21a <Device::Device(char const*)>:
c000c21a:	83 ec 1c             	sub    esp,0x1c
c000c21d:	ba b0 0b 02 c0       	mov    edx,0xc0020bb0
c000c222:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c226:	89 10                	mov    DWORD PTR [eax],edx
c000c228:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c22c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c236:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c23a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c244:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c248:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c252:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c256:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c260:	83 ec 08             	sub    esp,0x8
c000c263:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c267:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26b:	e8 9c ff ff ff       	call   c000c20c <Device::setName(char const*)>
c000c270:	83 c4 10             	add    esp,0x10
c000c273:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c27b:	83 ec 0c             	sub    esp,0xc
c000c27e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c282:	e8 27 b8 ff ff       	call   c0007aae <malloc>
c000c287:	83 c4 10             	add    esp,0x10
c000c28a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c290:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c297:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c29b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c2a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2a5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c2ab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c2b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2b5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c2bb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c2c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2c6:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c2cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2d1:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c2d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2dc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c2e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2ea:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c2f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2f8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c302:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c306:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c310:	90                   	nop
c000c311:	83 c4 1c             	add    esp,0x1c
c000c314:	c3                   	ret    
c000c315:	90                   	nop

c000c316 <Device::getName()>:
c000c316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c31a:	05 d0 00 00 00       	add    eax,0xd0
c000c31f:	c3                   	ret    

c000c320 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c320:	83 ec 0c             	sub    esp,0xc
c000c323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c327:	83 ec 08             	sub    esp,0x8
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	50                   	push   eax
c000c32f:	e8 e6 fe ff ff       	call   c000c21a <Device::Device(char const*)>
c000c334:	83 c4 10             	add    esp,0x10
c000c337:	ba dc 0b 02 c0       	mov    edx,0xc0020bdc
c000c33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c340:	89 10                	mov    DWORD PTR [eax],edx
c000c342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c346:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c350:	90                   	nop
c000c351:	83 c4 0c             	add    esp,0xc
c000c354:	c3                   	ret    
c000c355:	90                   	nop

c000c356 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c356:	57                   	push   edi
c000c357:	56                   	push   esi
c000c358:	53                   	push   ebx
c000c359:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c35d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c361:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c365:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c36b:	75 0c                	jne    c000c379 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c36d:	52                   	push   edx
c000c36e:	52                   	push   edx
c000c36f:	53                   	push   ebx
c000c370:	56                   	push   esi
c000c371:	e8 0c 2b 01 00       	call   c001ee82 <LinkedList<Device>::addElement(Device*)>
c000c376:	83 c4 10             	add    esp,0x10
c000c379:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c37f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c382:	74 12                	je     c000c396 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c384:	50                   	push   eax
c000c385:	57                   	push   edi
c000c386:	56                   	push   esi
c000c387:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c38a:	e8 c7 ff ff ff       	call   c000c356 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c38f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c391:	83 c4 10             	add    esp,0x10
c000c394:	eb e9                	jmp    c000c37f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c396:	5b                   	pop    ebx
c000c397:	5e                   	pop    esi
c000c398:	5f                   	pop    edi
c000c399:	c3                   	ret    

c000c39a <getDevicesOfType(DeviceType)>:
c000c39a:	53                   	push   ebx
c000c39b:	83 ec 14             	sub    esp,0x14
c000c39e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c3a2:	53                   	push   ebx
c000c3a3:	e8 b6 2b 01 00       	call   c001ef5e <LinkedList<Device>::LinkedList()>
c000c3a8:	83 c4 0c             	add    esp,0xc
c000c3ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c3af:	53                   	push   ebx
c000c3b0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000c3b6:	e8 9b ff ff ff       	call   c000c356 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c3bb:	89 d8                	mov    eax,ebx
c000c3bd:	83 c4 18             	add    esp,0x18
c000c3c0:	5b                   	pop    ebx
c000c3c1:	c2 04 00             	ret    0x4

c000c3c4 <HardDiskController::HardDiskController(char const*)>:
c000c3c4:	83 ec 0c             	sub    esp,0xc
c000c3c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3cb:	83 ec 08             	sub    esp,0x8
c000c3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3d2:	50                   	push   eax
c000c3d3:	e8 42 fe ff ff       	call   c000c21a <Device::Device(char const*)>
c000c3d8:	83 c4 10             	add    esp,0x10
c000c3db:	ba 08 0c 02 c0       	mov    edx,0xc0020c08
c000c3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3e4:	89 10                	mov    DWORD PTR [eax],edx
c000c3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3ea:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c3f4:	90                   	nop
c000c3f5:	83 c4 0c             	add    esp,0xc
c000c3f8:	c3                   	ret    
c000c3f9:	90                   	nop
c000c3fa:	66 90                	xchg   ax,ax

c000c3fc <HardDiskController::~HardDiskController()>:
c000c3fc:	83 ec 0c             	sub    esp,0xc
c000c3ff:	ba 08 0c 02 c0       	mov    edx,0xc0020c08
c000c404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c408:	89 10                	mov    DWORD PTR [eax],edx
c000c40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c40e:	83 ec 0c             	sub    esp,0xc
c000c411:	50                   	push   eax
c000c412:	e8 6d fb ff ff       	call   c000bf84 <Device::~Device()>
c000c417:	83 c4 10             	add    esp,0x10
c000c41a:	90                   	nop
c000c41b:	83 c4 0c             	add    esp,0xc
c000c41e:	c3                   	ret    
c000c41f:	90                   	nop

c000c420 <HardDiskController::~HardDiskController()>:
c000c420:	83 ec 0c             	sub    esp,0xc
c000c423:	83 ec 0c             	sub    esp,0xc
c000c426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c42a:	e8 cd ff ff ff       	call   c000c3fc <HardDiskController::~HardDiskController()>
c000c42f:	83 c4 10             	add    esp,0x10
c000c432:	83 ec 08             	sub    esp,0x8
c000c435:	68 58 01 00 00       	push   0x158
c000c43a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c43e:	e8 07 e4 ff ff       	call   c000a84a <operator delete(void*, unsigned long)>
c000c443:	83 c4 10             	add    esp,0x10
c000c446:	83 c4 0c             	add    esp,0xc
c000c449:	c3                   	ret    

c000c44a <PhysicalDisk::eject()>:
c000c44a:	83 c8 ff             	or     eax,0xffffffff
c000c44d:	c3                   	ret    

c000c44e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c44e:	83 ec 0c             	sub    esp,0xc
c000c451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c455:	83 ec 08             	sub    esp,0x8
c000c458:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c45c:	50                   	push   eax
c000c45d:	e8 b8 fd ff ff       	call   c000c21a <Device::Device(char const*)>
c000c462:	83 c4 10             	add    esp,0x10
c000c465:	ba 34 0c 02 c0       	mov    edx,0xc0020c34
c000c46a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c46e:	89 10                	mov    DWORD PTR [eax],edx
c000c470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c474:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c47b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c47f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c48a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c498:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c49c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4a6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c4b0:	90                   	nop
c000c4b1:	83 c4 0c             	add    esp,0xc
c000c4b4:	c3                   	ret    
c000c4b5:	90                   	nop

c000c4b6 <PhysicalDisk::startCache()>:
c000c4b6:	56                   	push   esi
c000c4b7:	53                   	push   ebx
c000c4b8:	83 ec 10             	sub    esp,0x10
c000c4bb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c4bf:	6a 44                	push   0x44
c000c4c1:	e8 e8 b5 ff ff       	call   c0007aae <malloc>
c000c4c6:	89 c6                	mov    esi,eax
c000c4c8:	58                   	pop    eax
c000c4c9:	5a                   	pop    edx
c000c4ca:	53                   	push   ebx
c000c4cb:	56                   	push   esi
c000c4cc:	e8 7b 17 00 00       	call   c000dc4c <VCache::VCache(PhysicalDisk*)>
c000c4d1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c4d7:	83 c4 14             	add    esp,0x14
c000c4da:	5b                   	pop    ebx
c000c4db:	5e                   	pop    esi
c000c4dc:	c3                   	ret    
c000c4dd:	90                   	nop

c000c4de <PhysicalDisk::~PhysicalDisk()>:
c000c4de:	83 ec 0c             	sub    esp,0xc
c000c4e1:	ba 34 0c 02 c0       	mov    edx,0xc0020c34
c000c4e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4ea:	89 10                	mov    DWORD PTR [eax],edx
c000c4ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4f0:	83 ec 0c             	sub    esp,0xc
c000c4f3:	50                   	push   eax
c000c4f4:	e8 8b fa ff ff       	call   c000bf84 <Device::~Device()>
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	90                   	nop
c000c4fd:	83 c4 0c             	add    esp,0xc
c000c500:	c3                   	ret    
c000c501:	90                   	nop

c000c502 <PhysicalDisk::~PhysicalDisk()>:
c000c502:	83 ec 0c             	sub    esp,0xc
c000c505:	83 ec 0c             	sub    esp,0xc
c000c508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c50c:	e8 cd ff ff ff       	call   c000c4de <PhysicalDisk::~PhysicalDisk()>
c000c511:	83 c4 10             	add    esp,0x10
c000c514:	83 ec 08             	sub    esp,0x8
c000c517:	68 6c 01 00 00       	push   0x16c
c000c51c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c520:	e8 25 e3 ff ff       	call   c000a84a <operator delete(void*, unsigned long)>
c000c525:	83 c4 10             	add    esp,0x10
c000c528:	83 c4 0c             	add    esp,0xc
c000c52b:	c3                   	ret    

c000c52c <int_handler>:
c000c52c:	55                   	push   ebp
c000c52d:	57                   	push   edi
c000c52e:	56                   	push   esi
c000c52f:	53                   	push   ebx
c000c530:	83 ec 0c             	sub    esp,0xc
c000c533:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c537:	80 3d 38 89 02 c0 00 	cmp    BYTE PTR ds:0xc0028938,0x0
c000c53e:	74 0b                	je     c000c54b <int_handler+0x1f>
c000c540:	fa                   	cli    
c000c541:	f4                   	hlt    
c000c542:	80 3d 38 89 02 c0 00 	cmp    BYTE PTR ds:0xc0028938,0x0
c000c549:	75 f5                	jne    c000c540 <int_handler+0x14>
c000c54b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c54e:	8d 46 e0             	lea    eax,[esi-0x20]
c000c551:	83 f8 17             	cmp    eax,0x17
c000c554:	76 40                	jbe    c000c596 <int_handler+0x6a>
c000c556:	c1 e6 04             	shl    esi,0x4
c000c559:	31 db                	xor    ebx,ebx
c000c55b:	8d ae c0 6f 02 c0    	lea    ebp,[esi-0x3ffd9040]
c000c561:	81 c6 c0 5f 02 c0    	add    esi,0xc0025fc0
c000c567:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c56b:	85 c0                	test   eax,eax
c000c56d:	74 13                	je     c000c582 <int_handler+0x56>
c000c56f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c572:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c576:	74 2c                	je     c000c5a4 <int_handler+0x78>
c000c578:	83 ec 08             	sub    esp,0x8
c000c57b:	52                   	push   edx
c000c57c:	57                   	push   edi
c000c57d:	ff d0                	call   eax
c000c57f:	83 c4 10             	add    esp,0x10
c000c582:	83 c3 01             	add    ebx,0x1
c000c585:	83 fb 04             	cmp    ebx,0x4
c000c588:	75 dd                	jne    c000c567 <int_handler+0x3b>
c000c58a:	83 c4 0c             	add    esp,0xc
c000c58d:	31 c0                	xor    eax,eax
c000c58f:	5b                   	pop    ebx
c000c590:	31 d2                	xor    edx,edx
c000c592:	5e                   	pop    esi
c000c593:	5f                   	pop    edi
c000c594:	5d                   	pop    ebp
c000c595:	c3                   	ret    
c000c596:	83 ec 0c             	sub    esp,0xc
c000c599:	50                   	push   eax
c000c59a:	e8 f5 b0 00 00       	call   c0017694 <HalEndOfInterrupt(int)>
c000c59f:	83 c4 10             	add    esp,0x10
c000c5a2:	eb b2                	jmp    c000c556 <int_handler+0x2a>
c000c5a4:	83 ec 08             	sub    esp,0x8
c000c5a7:	52                   	push   edx
c000c5a8:	57                   	push   edi
c000c5a9:	ff d0                	call   eax
c000c5ab:	83 c4 10             	add    esp,0x10
c000c5ae:	83 c4 0c             	add    esp,0xc
c000c5b1:	5b                   	pop    ebx
c000c5b2:	5e                   	pop    esi
c000c5b3:	5f                   	pop    edi
c000c5b4:	5d                   	pop    ebp
c000c5b5:	c3                   	ret    

c000c5b6 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c5b6:	56                   	push   esi
c000c5b7:	31 c0                	xor    eax,eax
c000c5b9:	53                   	push   ebx
c000c5ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c5be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c5c2:	89 ca                	mov    edx,ecx
c000c5c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c5c8:	c1 e2 04             	shl    edx,0x4
c000c5cb:	83 bc 82 c0 6f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd9040],0x0
c000c5d3:	74 17                	je     c000c5ec <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000c5d5:	83 c0 01             	add    eax,0x1
c000c5d8:	83 f8 04             	cmp    eax,0x4
c000c5db:	75 ee                	jne    c000c5cb <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c5dd:	c7 44 24 0c 64 0c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020c64
c000c5e5:	5b                   	pop    ebx
c000c5e6:	5e                   	pop    esi
c000c5e7:	e9 ef 45 00 00       	jmp    c0010bdb <KePanic(char const*)>
c000c5ec:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c5ef:	89 1c 85 c0 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9040],ebx
c000c5f6:	89 34 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],esi
c000c5fd:	5b                   	pop    ebx
c000c5fe:	5e                   	pop    esi
c000c5ff:	c3                   	ret    

c000c600 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c600:	57                   	push   edi
c000c601:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000c607:	56                   	push   esi
c000c608:	53                   	push   ebx
c000c609:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c60d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c611:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c618:	74 54                	je     c000c66e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000c61a:	89 c7                	mov    edi,eax
c000c61c:	84 c0                	test   al,al
c000c61e:	74 1d                	je     c000c63d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000c620:	83 fe 0f             	cmp    esi,0xf
c000c623:	0f 8f d5 00 00 00    	jg     c000c6fe <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000c629:	0f b6 b6 88 27 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd878]
c000c630:	0f b7 bc 36 60 87 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd78a0]
c000c638:	d1 ef                	shr    edi,1
c000c63a:	83 e7 01             	and    edi,0x1
c000c63d:	83 ec 08             	sub    esp,0x8
c000c640:	a1 60 9b 02 c0       	mov    eax,ds:0xc0029b60
c000c645:	31 db                	xor    ebx,ebx
c000c647:	50                   	push   eax
c000c648:	68 71 0c 02 c0       	push   0xc0020c71
c000c64d:	e8 25 e3 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000c652:	83 c4 10             	add    esp,0x10
c000c655:	a1 60 9b 02 c0       	mov    eax,ds:0xc0029b60
c000c65a:	85 c0                	test   eax,eax
c000c65c:	7f 55                	jg     c000c6b3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000c65e:	83 ec 0c             	sub    esp,0xc
c000c661:	68 88 0c 02 c0       	push   0xc0020c88
c000c666:	e8 70 45 00 00       	call   c0010bdb <KePanic(char const*)>
c000c66b:	83 c4 10             	add    esp,0x10
c000c66e:	8d 7e 20             	lea    edi,[esi+0x20]
c000c671:	89 f8                	mov    eax,edi
c000c673:	31 d2                	xor    edx,edx
c000c675:	c1 e0 04             	shl    eax,0x4
c000c678:	8b 8c 90 c0 6f 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd9040]
c000c67f:	85 c9                	test   ecx,ecx
c000c681:	0f 84 8e 00 00 00    	je     c000c715 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000c687:	83 c2 01             	add    edx,0x1
c000c68a:	83 fa 04             	cmp    edx,0x4
c000c68d:	75 e9                	jne    c000c678 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c68f:	83 ec 0c             	sub    esp,0xc
c000c692:	68 dc 0c 02 c0       	push   0xc0020cdc
c000c697:	e8 3f 45 00 00       	call   c0010bdb <KePanic(char const*)>
c000c69c:	83 c4 10             	add    esp,0x10
c000c69f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c6a4:	5b                   	pop    ebx
c000c6a5:	5e                   	pop    esi
c000c6a6:	5f                   	pop    edi
c000c6a7:	c3                   	ret    
c000c6a8:	83 c3 01             	add    ebx,0x1
c000c6ab:	39 1d 60 9b 02 c0    	cmp    DWORD PTR ds:0xc0029b60,ebx
c000c6b1:	7e ab                	jle    c000c65e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000c6b3:	83 ec 08             	sub    esp,0x8
c000c6b6:	8b 04 9d 80 9b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6480]
c000c6bd:	56                   	push   esi
c000c6be:	50                   	push   eax
c000c6bf:	e8 ea 16 01 00       	call   c001ddae <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c6c4:	83 c4 10             	add    esp,0x10
c000c6c7:	84 c0                	test   al,al
c000c6c9:	74 dd                	je     c000c6a8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000c6cb:	83 ec 04             	sub    esp,0x4
c000c6ce:	89 f8                	mov    eax,edi
c000c6d0:	8b 1c 9d 80 9b 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd6480]
c000c6d7:	0f b6 f8             	movzx  edi,al
c000c6da:	57                   	push   edi
c000c6db:	8d 7e 20             	lea    edi,[esi+0x20]
c000c6de:	6a 00                	push   0x0
c000c6e0:	89 f8                	mov    eax,edi
c000c6e2:	0f b6 c0             	movzx  eax,al
c000c6e5:	50                   	push   eax
c000c6e6:	89 f0                	mov    eax,esi
c000c6e8:	6a 00                	push   0x0
c000c6ea:	0f b6 c0             	movzx  eax,al
c000c6ed:	6a 00                	push   0x0
c000c6ef:	50                   	push   eax
c000c6f0:	53                   	push   ebx
c000c6f1:	e8 24 18 01 00       	call   c001df1a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c6f6:	83 c4 20             	add    esp,0x20
c000c6f9:	e9 73 ff ff ff       	jmp    c000c671 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000c6fe:	83 ec 0c             	sub    esp,0xc
c000c701:	31 ff                	xor    edi,edi
c000c703:	68 a4 0c 02 c0       	push   0xc0020ca4
c000c708:	e8 ce 44 00 00       	call   c0010bdb <KePanic(char const*)>
c000c70d:	83 c4 10             	add    esp,0x10
c000c710:	e9 28 ff ff ff       	jmp    c000c63d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000c715:	8d 04 ba             	lea    eax,[edx+edi*4]
c000c718:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c71c:	89 14 85 c0 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9040],edx
c000c723:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c727:	5b                   	pop    ebx
c000c728:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c72f:	89 f0                	mov    eax,esi
c000c731:	5e                   	pop    esi
c000c732:	5f                   	pop    edi
c000c733:	c3                   	ret    

c000c734 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c738:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c73c:	c1 e0 04             	shl    eax,0x4
c000c73f:	8d 50 10             	lea    edx,[eax+0x10]
c000c742:	39 88 c0 6f 02 c0    	cmp    DWORD PTR [eax-0x3ffd9040],ecx
c000c748:	74 08                	je     c000c752 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c74a:	83 c0 04             	add    eax,0x4
c000c74d:	39 d0                	cmp    eax,edx
c000c74f:	75 f1                	jne    c000c742 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c751:	c3                   	ret    
c000c752:	c7 80 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9040],0x0
c000c75c:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c766:	eb e2                	jmp    c000c74a <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c768 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c768:	53                   	push   ebx
c000c769:	83 ec 08             	sub    esp,0x8
c000c76c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c770:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c775:	74 0e                	je     c000c785 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c777:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000c77c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c783:	75 37                	jne    c000c7bc <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c789:	83 c0 20             	add    eax,0x20
c000c78c:	c1 e0 04             	shl    eax,0x4
c000c78f:	8d 50 10             	lea    edx,[eax+0x10]
c000c792:	39 98 c0 6f 02 c0    	cmp    DWORD PTR [eax-0x3ffd9040],ebx
c000c798:	74 0c                	je     c000c7a6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c79a:	83 c0 04             	add    eax,0x4
c000c79d:	39 d0                	cmp    eax,edx
c000c79f:	75 f1                	jne    c000c792 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c7a1:	83 c4 08             	add    esp,0x8
c000c7a4:	5b                   	pop    ebx
c000c7a5:	c3                   	ret    
c000c7a6:	c7 80 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9040],0x0
c000c7b0:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c7ba:	eb de                	jmp    c000c79a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c7bc:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c7c1:	7f 11                	jg     c000c7d4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000c7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7c7:	0f b6 80 88 27 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd878]
c000c7ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c7d2:	eb b1                	jmp    c000c785 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c7d4:	83 ec 0c             	sub    esp,0xc
c000c7d7:	68 95 0c 02 c0       	push   0xc0020c95
c000c7dc:	e8 fa 43 00 00       	call   c0010bdb <KePanic(char const*)>
c000c7e1:	83 c4 10             	add    esp,0x10
c000c7e4:	eb 9f                	jmp    c000c785 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c7e6 <setupINTS()>:
c000c7e6:	31 c0                	xor    eax,eax
c000c7e8:	c7 80 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9040],0x0
c000c7f2:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c7fc:	c7 80 c4 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd903c],0x0
c000c806:	c7 80 c4 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda03c],0x0
c000c810:	c7 80 c8 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9038],0x0
c000c81a:	c7 80 c8 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda038],0x0
c000c824:	c7 80 cc 6f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9034],0x0
c000c82e:	c7 80 cc 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda034],0x0
c000c838:	83 c0 10             	add    eax,0x10
c000c83b:	3d 00 10 00 00       	cmp    eax,0x1000
c000c840:	75 a6                	jne    c000c7e8 <setupINTS()+0x2>
c000c842:	c3                   	ret    

c000c843 <convertLegacyIRQNumber(int)>:
c000c843:	83 ec 0c             	sub    esp,0xc
c000c846:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000c84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c850:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c857:	74 0c                	je     c000c865 <convertLegacyIRQNumber(int)+0x22>
c000c859:	83 f8 0f             	cmp    eax,0xf
c000c85c:	7f 0b                	jg     c000c869 <convertLegacyIRQNumber(int)+0x26>
c000c85e:	0f b6 80 88 27 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd878]
c000c865:	83 c4 0c             	add    esp,0xc
c000c868:	c3                   	ret    
c000c869:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c86d:	83 ec 0c             	sub    esp,0xc
c000c870:	68 a4 0c 02 c0       	push   0xc0020ca4
c000c875:	e8 61 43 00 00       	call   c0010bdb <KePanic(char const*)>
c000c87a:	83 c4 10             	add    esp,0x10
c000c87d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c881:	83 c4 0c             	add    esp,0xc
c000c884:	c3                   	ret    
c000c885:	90                   	nop

c000c886 <startGUI(void*)>:
c000c886:	55                   	push   ebp
c000c887:	89 e5                	mov    ebp,esp
c000c889:	53                   	push   ebx
c000c88a:	83 ec 04             	sub    esp,0x4
c000c88d:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000c892:	83 e8 01             	sub    eax,0x1
c000c895:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000c89a:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000c89f:	85 c0                	test   eax,eax
c000c8a1:	75 01                	jne    c000c8a4 <startGUI(void*)+0x1e>
c000c8a3:	fb                   	sti    
c000c8a4:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000c8aa:	83 ec 08             	sub    esp,0x8
c000c8ad:	6a 01                	push   0x1
c000c8af:	68 01 0d 02 c0       	push   0xc0020d01
c000c8b4:	e8 b4 80 00 00       	call   c001496d <Thr::loadDLL(char const*, bool)>
c000c8b9:	83 c4 10             	add    esp,0x10
c000c8bc:	83 ec 08             	sub    esp,0x8
c000c8bf:	53                   	push   ebx
c000c8c0:	50                   	push   eax
c000c8c1:	e8 d8 82 00 00       	call   c0014b9e <Thr::executeDLL(unsigned long, void*)>
c000c8c6:	83 c4 10             	add    esp,0x10
c000c8c9:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000c8cf:	83 ec 08             	sub    esp,0x8
c000c8d2:	6a 01                	push   0x1
c000c8d4:	68 1b 0d 02 c0       	push   0xc0020d1b
c000c8d9:	e8 8f 80 00 00       	call   c001496d <Thr::loadDLL(char const*, bool)>
c000c8de:	83 c4 10             	add    esp,0x10
c000c8e1:	83 ec 08             	sub    esp,0x8
c000c8e4:	53                   	push   ebx
c000c8e5:	50                   	push   eax
c000c8e6:	e8 b3 82 00 00       	call   c0014b9e <Thr::executeDLL(unsigned long, void*)>
c000c8eb:	83 c4 10             	add    esp,0x10
c000c8ee:	90                   	nop
c000c8ef:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c8f2:	c9                   	leave  
c000c8f3:	c3                   	ret    

c000c8f4 <startGUIVESA(void*)>:
c000c8f4:	55                   	push   ebp
c000c8f5:	89 e5                	mov    ebp,esp
c000c8f7:	53                   	push   ebx
c000c8f8:	83 ec 04             	sub    esp,0x4
c000c8fb:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000c900:	83 e8 01             	sub    eax,0x1
c000c903:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000c908:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000c90d:	85 c0                	test   eax,eax
c000c90f:	75 01                	jne    c000c912 <startGUIVESA(void*)+0x1e>
c000c911:	fb                   	sti    
c000c912:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000c918:	83 ec 08             	sub    esp,0x8
c000c91b:	6a 01                	push   0x1
c000c91d:	68 39 0d 02 c0       	push   0xc0020d39
c000c922:	e8 46 80 00 00       	call   c001496d <Thr::loadDLL(char const*, bool)>
c000c927:	83 c4 10             	add    esp,0x10
c000c92a:	83 ec 08             	sub    esp,0x8
c000c92d:	53                   	push   ebx
c000c92e:	50                   	push   eax
c000c92f:	e8 6a 82 00 00       	call   c0014b9e <Thr::executeDLL(unsigned long, void*)>
c000c934:	83 c4 10             	add    esp,0x10
c000c937:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000c93d:	83 ec 08             	sub    esp,0x8
c000c940:	6a 01                	push   0x1
c000c942:	68 1b 0d 02 c0       	push   0xc0020d1b
c000c947:	e8 21 80 00 00       	call   c001496d <Thr::loadDLL(char const*, bool)>
c000c94c:	83 c4 10             	add    esp,0x10
c000c94f:	83 ec 08             	sub    esp,0x8
c000c952:	53                   	push   ebx
c000c953:	50                   	push   eax
c000c954:	e8 45 82 00 00       	call   c0014b9e <Thr::executeDLL(unsigned long, void*)>
c000c959:	83 c4 10             	add    esp,0x10
c000c95c:	90                   	nop
c000c95d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c960:	c9                   	leave  
c000c961:	c3                   	ret    

c000c962 <sendKeyToTerminal(unsigned char)>:
c000c962:	55                   	push   ebp
c000c963:	89 e5                	mov    ebp,esp
c000c965:	83 ec 28             	sub    esp,0x28
c000c968:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c96e:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000c973:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c977:	83 ec 08             	sub    esp,0x8
c000c97a:	52                   	push   edx
c000c97b:	50                   	push   eax
c000c97c:	e8 27 c4 ff ff       	call   c0008da8 <VgaText::receiveKey(unsigned char)>
c000c981:	83 c4 10             	add    esp,0x10
c000c984:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c988:	83 f8 0a             	cmp    eax,0xa
c000c98b:	74 16                	je     c000c9a3 <sendKeyToTerminal(unsigned char)+0x41>
c000c98d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c991:	83 f8 03             	cmp    eax,0x3
c000c994:	74 0d                	je     c000c9a3 <sendKeyToTerminal(unsigned char)+0x41>
c000c996:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c99a:	83 f8 1c             	cmp    eax,0x1c
c000c99d:	0f 85 97 00 00 00    	jne    c000ca3a <sendKeyToTerminal(unsigned char)+0xd8>
c000c9a3:	fa                   	cli    
c000c9a4:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000c9a9:	83 c0 01             	add    eax,0x1
c000c9ac:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000c9b1:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c000c9b6:	83 c0 01             	add    eax,0x1
c000c9b9:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c000c9be:	a1 c0 7f 02 c0       	mov    eax,ds:0xc0027fc0
c000c9c3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c9c6:	c7 05 c0 7f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027fc0,0x0
c000c9d0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c9d4:	74 1f                	je     c000c9f5 <sendKeyToTerminal(unsigned char)+0x93>
c000c9d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c9d9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c9dc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c9df:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c9e2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c9e5:	83 ec 0c             	sub    esp,0xc
c000c9e8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c9eb:	e8 f4 8e 00 00       	call   c00158e4 <unblockTask(ThreadControlBlock*)>
c000c9f0:	83 c4 10             	add    esp,0x10
c000c9f3:	eb db                	jmp    c000c9d0 <sendKeyToTerminal(unsigned char)+0x6e>
c000c9f5:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c000c9fa:	83 e8 01             	sub    eax,0x1
c000c9fd:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c000ca02:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c000ca07:	85 c0                	test   eax,eax
c000ca09:	75 18                	jne    c000ca23 <sendKeyToTerminal(unsigned char)+0xc1>
c000ca0b:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c000ca10:	85 c0                	test   eax,eax
c000ca12:	74 0f                	je     c000ca23 <sendKeyToTerminal(unsigned char)+0xc1>
c000ca14:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c000ca1e:	e8 a9 89 00 00       	call   c00153cc <schedule()>
c000ca23:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000ca28:	83 e8 01             	sub    eax,0x1
c000ca2b:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000ca30:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000ca35:	85 c0                	test   eax,eax
c000ca37:	75 01                	jne    c000ca3a <sendKeyToTerminal(unsigned char)+0xd8>
c000ca39:	fb                   	sti    
c000ca3a:	90                   	nop
c000ca3b:	c9                   	leave  
c000ca3c:	c3                   	ret    

c000ca3d <sendKeyboardToken(KeyboardToken)>:
c000ca3d:	55                   	push   ebp
c000ca3e:	89 e5                	mov    ebp,esp
c000ca40:	83 ec 18             	sub    esp,0x18
c000ca43:	e8 e3 41 00 00       	call   c0010c2b <KeUserIOReceived()>
c000ca48:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000ca4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca4e:	0f b7 c0             	movzx  eax,ax
c000ca51:	83 f2 01             	xor    edx,0x1
c000ca54:	88 90 e0 7f 02 c0    	mov    BYTE PTR [eax-0x3ffd8020],dl
c000ca5a:	a1 c8 7f 02 c0       	mov    eax,ds:0xc0027fc8
c000ca5f:	85 c0                	test   eax,eax
c000ca61:	74 24                	je     c000ca87 <sendKeyboardToken(KeyboardToken)+0x4a>
c000ca63:	8b 0d c8 7f 02 c0    	mov    ecx,DWORD PTR ds:0xc0027fc8
c000ca69:	83 ec 04             	sub    esp,0x4
c000ca6c:	68 e0 7f 02 c0       	push   0xc0027fe0
c000ca71:	83 ec 08             	sub    esp,0x8
c000ca74:	89 e2                	mov    edx,esp
c000ca76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca79:	89 02                	mov    DWORD PTR [edx],eax
c000ca7b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ca7e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ca82:	ff d1                	call   ecx
c000ca84:	83 c4 10             	add    esp,0x10
c000ca87:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ca8b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000ca8e:	a0 e8 83 02 c0       	mov    al,ds:0xc00283e8
c000ca93:	0f b6 d2             	movzx  edx,dl
c000ca96:	0f b6 c0             	movzx  eax,al
c000ca99:	39 c2                	cmp    edx,eax
c000ca9b:	74 1c                	je     c000cab9 <sendKeyboardToken(KeyboardToken)+0x7c>
c000ca9d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000caa0:	a2 e8 83 02 c0       	mov    ds:0xc00283e8,al
c000caa5:	a0 e8 83 02 c0       	mov    al,ds:0xc00283e8
c000caaa:	0f b6 c0             	movzx  eax,al
c000caad:	83 ec 0c             	sub    esp,0xc
c000cab0:	50                   	push   eax
c000cab1:	e8 3e ba ff ff       	call   c00084f4 <setTerminalScrollLock(bool)>
c000cab6:	83 c4 10             	add    esp,0x10
c000cab9:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000cabc:	0f b6 c0             	movzx  eax,al
c000cabf:	85 c0                	test   eax,eax
c000cac1:	0f 84 da 00 00 00    	je     c000cba1 <sendKeyboardToken(KeyboardToken)+0x164>
c000cac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caca:	0f b7 c0             	movzx  eax,ax
c000cacd:	3d 18 03 00 00       	cmp    eax,0x318
c000cad2:	75 06                	jne    c000cada <sendKeyboardToken(KeyboardToken)+0x9d>
c000cad4:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000cada:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cadd:	0f b7 c0             	movzx  eax,ax
c000cae0:	3d 19 03 00 00       	cmp    eax,0x319
c000cae5:	75 06                	jne    c000caed <sendKeyboardToken(KeyboardToken)+0xb0>
c000cae7:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000caed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000caf0:	0f b7 c0             	movzx  eax,ax
c000caf3:	3d 1a 03 00 00       	cmp    eax,0x31a
c000caf8:	75 06                	jne    c000cb00 <sendKeyboardToken(KeyboardToken)+0xc3>
c000cafa:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000cb00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb03:	0f b7 c0             	movzx  eax,ax
c000cb06:	3d 1b 03 00 00       	cmp    eax,0x31b
c000cb0b:	75 06                	jne    c000cb13 <sendKeyboardToken(KeyboardToken)+0xd6>
c000cb0d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000cb13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb16:	0f b7 c0             	movzx  eax,ax
c000cb19:	3d 1c 03 00 00       	cmp    eax,0x31c
c000cb1e:	75 06                	jne    c000cb26 <sendKeyboardToken(KeyboardToken)+0xe9>
c000cb20:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000cb26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb29:	0f b7 c0             	movzx  eax,ax
c000cb2c:	3d 1d 03 00 00       	cmp    eax,0x31d
c000cb31:	75 06                	jne    c000cb39 <sendKeyboardToken(KeyboardToken)+0xfc>
c000cb33:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cb39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb3c:	0f b7 c0             	movzx  eax,ax
c000cb3f:	3d 1e 03 00 00       	cmp    eax,0x31e
c000cb44:	75 06                	jne    c000cb4c <sendKeyboardToken(KeyboardToken)+0x10f>
c000cb46:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000cb4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb4f:	0f b7 c0             	movzx  eax,ax
c000cb52:	3d 1f 03 00 00       	cmp    eax,0x31f
c000cb57:	75 06                	jne    c000cb5f <sendKeyboardToken(KeyboardToken)+0x122>
c000cb59:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000cb5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb62:	0f b7 c0             	movzx  eax,ax
c000cb65:	3d 20 03 00 00       	cmp    eax,0x320
c000cb6a:	75 06                	jne    c000cb72 <sendKeyboardToken(KeyboardToken)+0x135>
c000cb6c:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000cb72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb75:	0f b7 c0             	movzx  eax,ax
c000cb78:	3d 21 03 00 00       	cmp    eax,0x321
c000cb7d:	75 06                	jne    c000cb85 <sendKeyboardToken(KeyboardToken)+0x148>
c000cb7f:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000cb85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb88:	0f b7 c0             	movzx  eax,ax
c000cb8b:	3d 22 03 00 00       	cmp    eax,0x322
c000cb90:	0f 85 f1 00 00 00    	jne    c000cc87 <sendKeyboardToken(KeyboardToken)+0x24a>
c000cb96:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000cb9c:	e9 e6 00 00 00       	jmp    c000cc87 <sendKeyboardToken(KeyboardToken)+0x24a>
c000cba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cba4:	0f b7 c0             	movzx  eax,ax
c000cba7:	3d 18 03 00 00       	cmp    eax,0x318
c000cbac:	75 0a                	jne    c000cbb8 <sendKeyboardToken(KeyboardToken)+0x17b>
c000cbae:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000cbb4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbbb:	0f b7 c0             	movzx  eax,ax
c000cbbe:	3d 19 03 00 00       	cmp    eax,0x319
c000cbc3:	75 0a                	jne    c000cbcf <sendKeyboardToken(KeyboardToken)+0x192>
c000cbc5:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000cbcb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbd2:	0f b7 c0             	movzx  eax,ax
c000cbd5:	3d 1a 03 00 00       	cmp    eax,0x31a
c000cbda:	75 0a                	jne    c000cbe6 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000cbdc:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000cbe2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbe6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbe9:	0f b7 c0             	movzx  eax,ax
c000cbec:	3d 1b 03 00 00       	cmp    eax,0x31b
c000cbf1:	75 0a                	jne    c000cbfd <sendKeyboardToken(KeyboardToken)+0x1c0>
c000cbf3:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000cbf9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cbfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc00:	0f b7 c0             	movzx  eax,ax
c000cc03:	3d 1c 03 00 00       	cmp    eax,0x31c
c000cc08:	75 0a                	jne    c000cc14 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000cc0a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000cc10:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc17:	0f b7 c0             	movzx  eax,ax
c000cc1a:	3d 1d 03 00 00       	cmp    eax,0x31d
c000cc1f:	75 0a                	jne    c000cc2b <sendKeyboardToken(KeyboardToken)+0x1ee>
c000cc21:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000cc27:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc2e:	0f b7 c0             	movzx  eax,ax
c000cc31:	3d 1e 03 00 00       	cmp    eax,0x31e
c000cc36:	75 0a                	jne    c000cc42 <sendKeyboardToken(KeyboardToken)+0x205>
c000cc38:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000cc3e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc45:	0f b7 c0             	movzx  eax,ax
c000cc48:	3d 1f 03 00 00       	cmp    eax,0x31f
c000cc4d:	75 0a                	jne    c000cc59 <sendKeyboardToken(KeyboardToken)+0x21c>
c000cc4f:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000cc55:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc5c:	0f b7 c0             	movzx  eax,ax
c000cc5f:	3d 20 03 00 00       	cmp    eax,0x320
c000cc64:	75 0a                	jne    c000cc70 <sendKeyboardToken(KeyboardToken)+0x233>
c000cc66:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000cc6c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc73:	0f b7 c0             	movzx  eax,ax
c000cc76:	3d 21 03 00 00       	cmp    eax,0x321
c000cc7b:	75 0a                	jne    c000cc87 <sendKeyboardToken(KeyboardToken)+0x24a>
c000cc7d:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000cc83:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cc87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc8a:	0f b7 c0             	movzx  eax,ax
c000cc8d:	3d 00 02 00 00       	cmp    eax,0x200
c000cc92:	75 2f                	jne    c000ccc3 <sendKeyboardToken(KeyboardToken)+0x286>
c000cc94:	a0 e0 83 02 c0       	mov    al,ds:0xc00283e0
c000cc99:	83 f0 01             	xor    eax,0x1
c000cc9c:	0f b6 c0             	movzx  eax,al
c000cc9f:	85 c0                	test   eax,eax
c000cca1:	74 20                	je     c000ccc3 <sendKeyboardToken(KeyboardToken)+0x286>
c000cca3:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c000cca8:	6a 01                	push   0x1
c000ccaa:	6a 00                	push   0x0
c000ccac:	68 86 c8 00 c0       	push   0xc000c886
c000ccb1:	50                   	push   eax
c000ccb2:	e8 c5 84 00 00       	call   c001517c <Process::createThread(void (*)(void*), void*, int)>
c000ccb7:	83 c4 10             	add    esp,0x10
c000ccba:	c6 05 e0 83 02 c0 01 	mov    BYTE PTR ds:0xc00283e0,0x1
c000ccc1:	eb 3a                	jmp    c000ccfd <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ccc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccc6:	0f b7 c0             	movzx  eax,ax
c000ccc9:	3d 01 02 00 00       	cmp    eax,0x201
c000ccce:	75 2d                	jne    c000ccfd <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ccd0:	a0 e0 83 02 c0       	mov    al,ds:0xc00283e0
c000ccd5:	83 f0 01             	xor    eax,0x1
c000ccd8:	0f b6 c0             	movzx  eax,al
c000ccdb:	85 c0                	test   eax,eax
c000ccdd:	74 1e                	je     c000ccfd <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ccdf:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c000cce4:	6a 01                	push   0x1
c000cce6:	6a 00                	push   0x0
c000cce8:	68 f4 c8 00 c0       	push   0xc000c8f4
c000cced:	50                   	push   eax
c000ccee:	e8 89 84 00 00       	call   c001517c <Process::createThread(void (*)(void*), void*, int)>
c000ccf3:	83 c4 10             	add    esp,0x10
c000ccf6:	c6 05 e0 83 02 c0 01 	mov    BYTE PTR ds:0xc00283e0,0x1
c000ccfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd00:	0f b7 c0             	movzx  eax,ax
c000cd03:	3d 25 03 00 00       	cmp    eax,0x325
c000cd08:	75 06                	jne    c000cd10 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000cd0a:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000cd10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd13:	0f b7 c0             	movzx  eax,ax
c000cd16:	3d 24 03 00 00       	cmp    eax,0x324
c000cd1b:	75 06                	jne    c000cd23 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000cd1d:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cd23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd26:	0f b7 c0             	movzx  eax,ax
c000cd29:	3d 23 03 00 00       	cmp    eax,0x323
c000cd2e:	75 06                	jne    c000cd36 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000cd30:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000cd36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd39:	0f b7 c0             	movzx  eax,ax
c000cd3c:	3d 26 03 00 00       	cmp    eax,0x326
c000cd41:	75 06                	jne    c000cd49 <sendKeyboardToken(KeyboardToken)+0x30c>
c000cd43:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cd49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd4c:	0f b7 c0             	movzx  eax,ax
c000cd4f:	3d 27 03 00 00       	cmp    eax,0x327
c000cd54:	75 06                	jne    c000cd5c <sendKeyboardToken(KeyboardToken)+0x31f>
c000cd56:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cd5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd5f:	0f b7 c0             	movzx  eax,ax
c000cd62:	3d 22 03 00 00       	cmp    eax,0x322
c000cd67:	75 06                	jne    c000cd6f <sendKeyboardToken(KeyboardToken)+0x332>
c000cd69:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cd6f:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cd73:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cd76:	83 f0 01             	xor    eax,0x1
c000cd79:	0f b6 c0             	movzx  eax,al
c000cd7c:	85 c0                	test   eax,eax
c000cd7e:	74 7c                	je     c000cdfc <sendKeyboardToken(KeyboardToken)+0x3bf>
c000cd80:	a0 e1 80 02 c0       	mov    al,ds:0xc00280e1
c000cd85:	0f b6 c0             	movzx  eax,al
c000cd88:	85 c0                	test   eax,eax
c000cd8a:	74 43                	je     c000cdcf <sendKeyboardToken(KeyboardToken)+0x392>
c000cd8c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cd90:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000cd94:	85 c0                	test   eax,eax
c000cd96:	74 2b                	je     c000cdc3 <sendKeyboardToken(KeyboardToken)+0x386>
c000cd98:	8b 15 e4 83 02 c0    	mov    edx,DWORD PTR ds:0xc00283e4
c000cd9e:	89 d0                	mov    eax,edx
c000cda0:	c1 e0 02             	shl    eax,0x2
c000cda3:	01 d0                	add    eax,edx
c000cda5:	01 c0                	add    eax,eax
c000cda7:	a3 e4 83 02 c0       	mov    ds:0xc00283e4,eax
c000cdac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdaf:	0f b7 c0             	movzx  eax,ax
c000cdb2:	8d 50 d0             	lea    edx,[eax-0x30]
c000cdb5:	a1 e4 83 02 c0       	mov    eax,ds:0xc00283e4
c000cdba:	01 d0                	add    eax,edx
c000cdbc:	a3 e4 83 02 c0       	mov    ds:0xc00283e4,eax
c000cdc1:	eb 71                	jmp    c000ce34 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cdc3:	c7 05 e4 83 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00283e4,0x0
c000cdcd:	eb 65                	jmp    c000ce34 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cdcf:	a1 e4 83 02 c0       	mov    eax,ds:0xc00283e4
c000cdd4:	85 c0                	test   eax,eax
c000cdd6:	74 18                	je     c000cdf0 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000cdd8:	a1 e4 83 02 c0       	mov    eax,ds:0xc00283e4
c000cddd:	0f b6 c0             	movzx  eax,al
c000cde0:	83 ec 0c             	sub    esp,0xc
c000cde3:	50                   	push   eax
c000cde4:	e8 79 fb ff ff       	call   c000c962 <sendKeyToTerminal(unsigned char)>
c000cde9:	83 c4 10             	add    esp,0x10
c000cdec:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cdf0:	c7 05 e4 83 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00283e4,0x0
c000cdfa:	eb 38                	jmp    c000ce34 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cdfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdff:	0f b7 c0             	movzx  eax,ax
c000ce02:	3d 01 01 00 00       	cmp    eax,0x101
c000ce07:	75 2b                	jne    c000ce34 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000ce09:	a1 e4 83 02 c0       	mov    eax,ds:0xc00283e4
c000ce0e:	85 c0                	test   eax,eax
c000ce10:	74 18                	je     c000ce2a <sendKeyboardToken(KeyboardToken)+0x3ed>
c000ce12:	a1 e4 83 02 c0       	mov    eax,ds:0xc00283e4
c000ce17:	0f b6 c0             	movzx  eax,al
c000ce1a:	83 ec 0c             	sub    esp,0xc
c000ce1d:	50                   	push   eax
c000ce1e:	e8 3f fb ff ff       	call   c000c962 <sendKeyToTerminal(unsigned char)>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ce2a:	c7 05 e4 83 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00283e4,0x0
c000ce34:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ce37:	83 f0 01             	xor    eax,0x1
c000ce3a:	0f b6 c0             	movzx  eax,al
c000ce3d:	85 c0                	test   eax,eax
c000ce3f:	74 5a                	je     c000ce9b <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce41:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ce44:	83 f0 01             	xor    eax,0x1
c000ce47:	0f b6 c0             	movzx  eax,al
c000ce4a:	85 c0                	test   eax,eax
c000ce4c:	74 4d                	je     c000ce9b <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce4e:	a0 e0 80 02 c0       	mov    al,ds:0xc00280e0
c000ce53:	83 f0 01             	xor    eax,0x1
c000ce56:	0f b6 c0             	movzx  eax,al
c000ce59:	85 c0                	test   eax,eax
c000ce5b:	74 3e                	je     c000ce9b <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce60:	0f b7 c0             	movzx  eax,ax
c000ce63:	83 f8 1f             	cmp    eax,0x1f
c000ce66:	76 0b                	jbe    c000ce73 <sendKeyboardToken(KeyboardToken)+0x436>
c000ce68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce6b:	0f b7 c0             	movzx  eax,ax
c000ce6e:	83 f8 7e             	cmp    eax,0x7e
c000ce71:	76 16                	jbe    c000ce89 <sendKeyboardToken(KeyboardToken)+0x44c>
c000ce73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce76:	0f b7 c0             	movzx  eax,ax
c000ce79:	83 f8 0a             	cmp    eax,0xa
c000ce7c:	74 0b                	je     c000ce89 <sendKeyboardToken(KeyboardToken)+0x44c>
c000ce7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce81:	0f b7 c0             	movzx  eax,ax
c000ce84:	83 f8 08             	cmp    eax,0x8
c000ce87:	75 12                	jne    c000ce9b <sendKeyboardToken(KeyboardToken)+0x45e>
c000ce89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce8c:	0f b6 c0             	movzx  eax,al
c000ce8f:	83 ec 0c             	sub    esp,0xc
c000ce92:	50                   	push   eax
c000ce93:	e8 ca fa ff ff       	call   c000c962 <sendKeyToTerminal(unsigned char)>
c000ce98:	83 c4 10             	add    esp,0x10
c000ce9b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ce9e:	83 f0 01             	xor    eax,0x1
c000cea1:	0f b6 c0             	movzx  eax,al
c000cea4:	85 c0                	test   eax,eax
c000cea6:	74 5d                	je     c000cf05 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cea8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ceab:	83 f0 01             	xor    eax,0x1
c000ceae:	0f b6 c0             	movzx  eax,al
c000ceb1:	85 c0                	test   eax,eax
c000ceb3:	74 50                	je     c000cf05 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000ceb5:	a0 e0 80 02 c0       	mov    al,ds:0xc00280e0
c000ceba:	0f b6 c0             	movzx  eax,al
c000cebd:	85 c0                	test   eax,eax
c000cebf:	74 44                	je     c000cf05 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cec1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cec4:	0f b7 c0             	movzx  eax,ax
c000cec7:	83 f8 3f             	cmp    eax,0x3f
c000ceca:	76 39                	jbe    c000cf05 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cecc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cecf:	0f b7 c0             	movzx  eax,ax
c000ced2:	83 f8 7f             	cmp    eax,0x7f
c000ced5:	77 2e                	ja     c000cf05 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000ced7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ceda:	88 c2                	mov    dl,al
c000cedc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cedf:	0f b7 c0             	movzx  eax,ax
c000cee2:	83 f8 5f             	cmp    eax,0x5f
c000cee5:	76 04                	jbe    c000ceeb <sendKeyboardToken(KeyboardToken)+0x4ae>
c000cee7:	b0 20                	mov    al,0x20
c000cee9:	eb 02                	jmp    c000ceed <sendKeyboardToken(KeyboardToken)+0x4b0>
c000ceeb:	b0 00                	mov    al,0x0
c000ceed:	89 d1                	mov    ecx,edx
c000ceef:	29 c1                	sub    ecx,eax
c000cef1:	89 c8                	mov    eax,ecx
c000cef3:	83 e8 40             	sub    eax,0x40
c000cef6:	0f b6 c0             	movzx  eax,al
c000cef9:	83 ec 0c             	sub    esp,0xc
c000cefc:	50                   	push   eax
c000cefd:	e8 60 fa ff ff       	call   c000c962 <sendKeyToTerminal(unsigned char)>
c000cf02:	83 c4 10             	add    esp,0x10
c000cf05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cf08:	0f b7 c0             	movzx  eax,ax
c000cf0b:	3d 00 03 00 00       	cmp    eax,0x300
c000cf10:	75 12                	jne    c000cf24 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cf12:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cf15:	83 f0 01             	xor    eax,0x1
c000cf18:	0f b6 c0             	movzx  eax,al
c000cf1b:	85 c0                	test   eax,eax
c000cf1d:	74 05                	je     c000cf24 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cf1f:	e8 d1 b5 ff ff       	call   c00084f5 <doTerminalCycle()>
c000cf24:	90                   	nop
c000cf25:	c9                   	leave  
c000cf26:	c3                   	ret    

c000cf27 <clearInternalKeybuffer(VgaText*)>:
c000cf27:	55                   	push   ebp
c000cf28:	89 e5                	mov    ebp,esp
c000cf2a:	83 ec 08             	sub    esp,0x8
c000cf2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cf30:	05 02 01 00 00       	add    eax,0x102
c000cf35:	83 ec 0c             	sub    esp,0xc
c000cf38:	50                   	push   eax
c000cf39:	e8 32 36 ff ff       	call   c0000570 <strlen>
c000cf3e:	83 c4 10             	add    esp,0x10
c000cf41:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cf44:	81 c2 02 01 00 00    	add    edx,0x102
c000cf4a:	83 ec 04             	sub    esp,0x4
c000cf4d:	50                   	push   eax
c000cf4e:	6a 00                	push   0x0
c000cf50:	52                   	push   edx
c000cf51:	e8 9a 35 ff ff       	call   c00004f0 <memset>
c000cf56:	83 c4 10             	add    esp,0x10
c000cf59:	90                   	nop
c000cf5a:	c9                   	leave  
c000cf5b:	c3                   	ret    

c000cf5c <readKeyboard(VgaText*, char*, unsigned long)>:
c000cf5c:	55                   	push   ebp
c000cf5d:	89 e5                	mov    ebp,esp
c000cf5f:	83 ec 18             	sub    esp,0x18
c000cf62:	a1 c8 7f 02 c0       	mov    eax,ds:0xc0027fc8
c000cf67:	85 c0                	test   eax,eax
c000cf69:	74 2a                	je     c000cf95 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000cf6b:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cf71:	8b 0d c8 7f 02 c0    	mov    ecx,DWORD PTR ds:0xc0027fc8
c000cf77:	83 ec 04             	sub    esp,0x4
c000cf7a:	68 e0 7f 02 c0       	push   0xc0027fe0
c000cf7f:	83 ec 08             	sub    esp,0x8
c000cf82:	89 e2                	mov    edx,esp
c000cf84:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000cf87:	89 02                	mov    DWORD PTR [edx],eax
c000cf89:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cf8c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000cf90:	ff d1                	call   ecx
c000cf92:	83 c4 10             	add    esp,0x10
c000cf95:	fb                   	sti    
c000cf96:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cf9d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cfa1:	0f 84 0d 01 00 00    	je     c000d0b4 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000cfa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cfaa:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cfb0:	0f be c0             	movsx  eax,al
c000cfb3:	85 c0                	test   eax,eax
c000cfb5:	75 2c                	jne    c000cfe3 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000cfb7:	fa                   	cli    
c000cfb8:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000cfbd:	83 c0 01             	add    eax,0x1
c000cfc0:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000cfc5:	e8 02 84 00 00       	call   c00153cc <schedule()>
c000cfca:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000cfcf:	83 e8 01             	sub    eax,0x1
c000cfd2:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000cfd7:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	75 c7                	jne    c000cfa7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cfe0:	fb                   	sti    
c000cfe1:	eb c4                	jmp    c000cfa7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cfe3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cfe6:	8d 50 01             	lea    edx,[eax+0x1]
c000cfe9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cfec:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cfef:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000cff5:	88 10                	mov    BYTE PTR [eax],dl
c000cff7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cffa:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d000:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d003:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d007:	83 f8 03             	cmp    eax,0x3
c000d00a:	75 1e                	jne    c000d02a <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d00c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d011:	8b 00                	mov    eax,DWORD PTR [eax]
c000d013:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d016:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d01c:	83 ec 08             	sub    esp,0x8
c000d01f:	6a 02                	push   0x2
c000d021:	50                   	push   eax
c000d022:	e8 57 40 00 00       	call   c001107e <KeRaiseSignal(SigHandlerBlock*, int)>
c000d027:	83 c4 10             	add    esp,0x10
c000d02a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d02e:	83 f8 1c             	cmp    eax,0x1c
c000d031:	75 1e                	jne    c000d051 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d033:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d038:	8b 00                	mov    eax,DWORD PTR [eax]
c000d03a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d03d:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d043:	83 ec 08             	sub    esp,0x8
c000d046:	6a 09                	push   0x9
c000d048:	50                   	push   eax
c000d049:	e8 30 40 00 00       	call   c001107e <KeRaiseSignal(SigHandlerBlock*, int)>
c000d04e:	83 c4 10             	add    esp,0x10
c000d051:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d054:	05 02 01 00 00       	add    eax,0x102
c000d059:	83 ec 0c             	sub    esp,0xc
c000d05c:	50                   	push   eax
c000d05d:	e8 0e 35 ff ff       	call   c0000570 <strlen>
c000d062:	83 c4 10             	add    esp,0x10
c000d065:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d068:	81 c2 02 01 00 00    	add    edx,0x102
c000d06e:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d071:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d074:	81 c2 02 01 00 00    	add    edx,0x102
c000d07a:	83 ec 04             	sub    esp,0x4
c000d07d:	50                   	push   eax
c000d07e:	51                   	push   ecx
c000d07f:	52                   	push   edx
c000d080:	e8 4b 33 ff ff       	call   c00003d0 <memmove>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d08c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d090:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d094:	83 f8 0a             	cmp    eax,0xa
c000d097:	74 16                	je     c000d0af <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d099:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d09d:	83 f8 03             	cmp    eax,0x3
c000d0a0:	74 0d                	je     c000d0af <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d0a2:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d0a6:	83 f8 1c             	cmp    eax,0x1c
c000d0a9:	0f 85 ee fe ff ff    	jne    c000cf9d <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d0af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d0b2:	eb 03                	jmp    c000d0b7 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d0b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d0b7:	c9                   	leave  
c000d0b8:	c3                   	ret    
c000d0b9:	90                   	nop

c000d0ba <Keyboard::Keyboard(char const*)>:
c000d0ba:	83 ec 0c             	sub    esp,0xc
c000d0bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0c1:	83 ec 08             	sub    esp,0x8
c000d0c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0c8:	50                   	push   eax
c000d0c9:	e8 4c f1 ff ff       	call   c000c21a <Device::Device(char const*)>
c000d0ce:	83 c4 10             	add    esp,0x10
c000d0d1:	ba 5c 0d 02 c0       	mov    edx,0xc0020d5c
c000d0d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0da:	89 10                	mov    DWORD PTR [eax],edx
c000d0dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0e0:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d0ea:	c6 05 c4 7f 02 c0 01 	mov    BYTE PTR ds:0xc0027fc4,0x1
c000d0f1:	90                   	nop
c000d0f2:	83 c4 0c             	add    esp,0xc
c000d0f5:	c3                   	ret    

c000d0f6 <Keyboard::~Keyboard()>:
c000d0f6:	83 ec 0c             	sub    esp,0xc
c000d0f9:	ba 5c 0d 02 c0       	mov    edx,0xc0020d5c
c000d0fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d102:	89 10                	mov    DWORD PTR [eax],edx
c000d104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d108:	83 ec 0c             	sub    esp,0xc
c000d10b:	50                   	push   eax
c000d10c:	e8 73 ee ff ff       	call   c000bf84 <Device::~Device()>
c000d111:	83 c4 10             	add    esp,0x10
c000d114:	90                   	nop
c000d115:	83 c4 0c             	add    esp,0xc
c000d118:	c3                   	ret    
c000d119:	90                   	nop

c000d11a <Keyboard::~Keyboard()>:
c000d11a:	83 ec 0c             	sub    esp,0xc
c000d11d:	83 ec 0c             	sub    esp,0xc
c000d120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d124:	e8 cd ff ff ff       	call   c000d0f6 <Keyboard::~Keyboard()>
c000d129:	83 c4 10             	add    esp,0x10
c000d12c:	83 ec 08             	sub    esp,0x8
c000d12f:	68 5c 01 00 00       	push   0x15c
c000d134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d138:	e8 0d d7 ff ff       	call   c000a84a <operator delete(void*, unsigned long)>
c000d13d:	83 c4 10             	add    esp,0x10
c000d140:	83 c4 0c             	add    esp,0xc
c000d143:	c3                   	ret    

c000d144 <LogicalDisk::close(int, int, void*)>:
c000d144:	83 c8 ff             	or     eax,0xffffffff
c000d147:	c3                   	ret    

c000d148 <LogicalDisk::~LogicalDisk()>:
c000d148:	83 ec 0c             	sub    esp,0xc
c000d14b:	ba d4 0d 02 c0       	mov    edx,0xc0020dd4
c000d150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d154:	89 10                	mov    DWORD PTR [eax],edx
c000d156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d15a:	83 ec 0c             	sub    esp,0xc
c000d15d:	50                   	push   eax
c000d15e:	e8 21 ee ff ff       	call   c000bf84 <Device::~Device()>
c000d163:	83 c4 10             	add    esp,0x10
c000d166:	90                   	nop
c000d167:	83 c4 0c             	add    esp,0xc
c000d16a:	c3                   	ret    
c000d16b:	90                   	nop

c000d16c <LogicalDisk::~LogicalDisk()>:
c000d16c:	83 ec 0c             	sub    esp,0xc
c000d16f:	83 ec 0c             	sub    esp,0xc
c000d172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d176:	e8 cd ff ff ff       	call   c000d148 <LogicalDisk::~LogicalDisk()>
c000d17b:	83 c4 10             	add    esp,0x10
c000d17e:	83 ec 08             	sub    esp,0x8
c000d181:	68 78 01 00 00       	push   0x178
c000d186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d18a:	e8 bb d6 ff ff       	call   c000a84a <operator delete(void*, unsigned long)>
c000d18f:	83 c4 10             	add    esp,0x10
c000d192:	83 c4 0c             	add    esp,0xc
c000d195:	c3                   	ret    

c000d196 <LogicalDisk::open(int, int, void*)>:
c000d196:	83 ec 18             	sub    esp,0x18
c000d199:	68 88 0d 02 c0       	push   0xc0020d88
c000d19e:	e8 38 3a 00 00       	call   c0010bdb <KePanic(char const*)>
c000d1a3:	83 c8 ff             	or     eax,0xffffffff
c000d1a6:	83 c4 1c             	add    esp,0x1c
c000d1a9:	c3                   	ret    

c000d1aa <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d1aa:	53                   	push   ebx
c000d1ab:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d1af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d1b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d1b7:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d1bd:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d1c3:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d1c9:	77 10                	ja     c000d1db <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d1cb:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d1d1:	89 d3                	mov    ebx,edx
c000d1d3:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d1d9:	72 05                	jb     c000d1e0 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d1db:	83 c8 ff             	or     eax,0xffffffff
c000d1de:	89 c2                	mov    edx,eax
c000d1e0:	5b                   	pop    ebx
c000d1e1:	c3                   	ret    

c000d1e2 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d1e2:	56                   	push   esi
c000d1e3:	83 c8 ff             	or     eax,0xffffffff
c000d1e6:	53                   	push   ebx
c000d1e7:	89 c2                	mov    edx,eax
c000d1e9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d1ed:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d1f1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d1f5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d1fb:	77 27                	ja     c000d224 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d1fd:	89 d8                	mov    eax,ebx
c000d1ff:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d205:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d20b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d210:	89 c2                	mov    edx,eax
c000d212:	73 10                	jae    c000d224 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d214:	89 c8                	mov    eax,ecx
c000d216:	89 da                	mov    edx,ebx
c000d218:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d21e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d224:	5b                   	pop    ebx
c000d225:	5e                   	pop    esi
c000d226:	c3                   	ret    
c000d227:	90                   	nop

c000d228 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d228:	83 ec 1c             	sub    esp,0x1c
c000d22b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d22f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d233:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d237:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d23b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d23f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d242:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d246:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d24a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d24e:	83 ec 08             	sub    esp,0x8
c000d251:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d255:	50                   	push   eax
c000d256:	e8 bf ef ff ff       	call   c000c21a <Device::Device(char const*)>
c000d25b:	83 c4 10             	add    esp,0x10
c000d25e:	ba d4 0d 02 c0       	mov    edx,0xc0020dd4
c000d263:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d267:	89 10                	mov    DWORD PTR [eax],edx
c000d269:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d26d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d274:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d278:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d27f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d283:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d28a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d28e:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d298:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d29c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d2a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d2a4:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d2aa:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d2b0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d2b4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d2b7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d2bb:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d2c1:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d2c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2cb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d2cf:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d2d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2d9:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d2e3:	90                   	nop
c000d2e4:	83 c4 1c             	add    esp,0x1c
c000d2e7:	c3                   	ret    

c000d2e8 <LogicalDisk::assignDriveLetter()>:
c000d2e8:	55                   	push   ebp
c000d2e9:	57                   	push   edi
c000d2ea:	56                   	push   esi
c000d2eb:	53                   	push   ebx
c000d2ec:	83 ec 14             	sub    esp,0x14
c000d2ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d2f3:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d2f9:	b0 41                	mov    al,0x41
c000d2fb:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d301:	84 d2                	test   dl,dl
c000d303:	75 02                	jne    c000d307 <LogicalDisk::assignDriveLetter()+0x1f>
c000d305:	b0 43                	mov    al,0x43
c000d307:	8b 3d 00 84 02 c0    	mov    edi,DWORD PTR ds:0xc0028400
c000d30d:	0f b6 ca             	movzx  ecx,dl
c000d310:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d314:	0f be e8             	movsx  ebp,al
c000d317:	8b 3d 04 84 02 c0    	mov    edi,DWORD PTR ds:0xc0028404
c000d31d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d321:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d325:	3c 43                	cmp    al,0x43
c000d327:	75 10                	jne    c000d339 <LogicalDisk::assignDriveLetter()+0x51>
c000d329:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d330:	75 5a                	jne    c000d38c <LogicalDisk::assignDriveLetter()+0xa4>
c000d332:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d337:	75 53                	jne    c000d38c <LogicalDisk::assignDriveLetter()+0xa4>
c000d339:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d33c:	ba 01 00 00 00       	mov    edx,0x1
c000d341:	89 34 24             	mov    DWORD PTR [esp],esi
c000d344:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d347:	d3 e2                	shl    edx,cl
c000d349:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d34d:	89 d7                	mov    edi,edx
c000d34f:	89 d6                	mov    esi,edx
c000d351:	c1 ff 1f             	sar    edi,0x1f
c000d354:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d358:	21 f9                	and    ecx,edi
c000d35a:	09 d1                	or     ecx,edx
c000d35c:	75 2e                	jne    c000d38c <LogicalDisk::assignDriveLetter()+0xa4>
c000d35e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d362:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d366:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d36c:	09 f2                	or     edx,esi
c000d36e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d371:	89 15 00 84 02 c0    	mov    DWORD PTR ds:0xc0028400,edx
c000d377:	89 1c b5 20 84 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7be0],ebx
c000d37e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d382:	09 fa                	or     edx,edi
c000d384:	89 15 04 84 02 c0    	mov    DWORD PTR ds:0xc0028404,edx
c000d38a:	eb 0d                	jmp    c000d399 <LogicalDisk::assignDriveLetter()+0xb1>
c000d38c:	8d 50 01             	lea    edx,[eax+0x1]
c000d38f:	45                   	inc    ebp
c000d390:	88 d0                	mov    al,dl
c000d392:	80 fa 5b             	cmp    dl,0x5b
c000d395:	75 8e                	jne    c000d325 <LogicalDisk::assignDriveLetter()+0x3d>
c000d397:	31 c0                	xor    eax,eax
c000d399:	83 c4 14             	add    esp,0x14
c000d39c:	5b                   	pop    ebx
c000d39d:	5e                   	pop    esi
c000d39e:	5f                   	pop    edi
c000d39f:	5d                   	pop    ebp
c000d3a0:	c3                   	ret    
c000d3a1:	90                   	nop

c000d3a2 <LogicalDisk::mount()>:
c000d3a2:	56                   	push   esi
c000d3a3:	53                   	push   ebx
c000d3a4:	53                   	push   ebx
c000d3a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d3a9:	8b 1d b4 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb4
c000d3af:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d3b9:	85 db                	test   ebx,ebx
c000d3bb:	74 27                	je     c000d3e4 <LogicalDisk::mount()+0x42>
c000d3bd:	51                   	push   ecx
c000d3be:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d3c5:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d3c7:	83 e8 41             	sub    eax,0x41
c000d3ca:	50                   	push   eax
c000d3cb:	56                   	push   esi
c000d3cc:	53                   	push   ebx
c000d3cd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d3d0:	83 c4 10             	add    esp,0x10
c000d3d3:	84 c0                	test   al,al
c000d3d5:	74 08                	je     c000d3df <LogicalDisk::mount()+0x3d>
c000d3d7:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d3dd:	eb 07                	jmp    c000d3e6 <LogicalDisk::mount()+0x44>
c000d3df:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d3e2:	eb d5                	jmp    c000d3b9 <LogicalDisk::mount()+0x17>
c000d3e4:	31 c0                	xor    eax,eax
c000d3e6:	5a                   	pop    edx
c000d3e7:	5b                   	pop    ebx
c000d3e8:	5e                   	pop    esi
c000d3e9:	c3                   	ret    

c000d3ea <LogicalDisk::unmount()>:
c000d3ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3ee:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d3f8:	c3                   	ret    
c000d3f9:	90                   	nop

c000d3fa <LogicalDisk::eject()>:
c000d3fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3fe:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d404:	8b 10                	mov    edx,DWORD PTR [eax]
c000d406:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d40a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d40d:	90                   	nop

c000d40e <LogicalDisk::unassignDriveLetter()>:
c000d40e:	57                   	push   edi
c000d40f:	56                   	push   esi
c000d410:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d414:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d41b:	85 c9                	test   ecx,ecx
c000d41d:	75 0f                	jne    c000d42e <LogicalDisk::unassignDriveLetter()+0x20>
c000d41f:	c7 44 24 0c ac 0d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020dac
c000d427:	5e                   	pop    esi
c000d428:	5f                   	pop    edi
c000d429:	e9 ad 37 00 00       	jmp    c0010bdb <KePanic(char const*)>
c000d42e:	83 e9 41             	sub    ecx,0x41
c000d431:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d438:	b8 01 00 00 00       	mov    eax,0x1
c000d43d:	c7 04 8d 20 84 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7be0],0x0
c000d448:	d3 e0                	shl    eax,cl
c000d44a:	89 c7                	mov    edi,eax
c000d44c:	f7 d0                	not    eax
c000d44e:	c1 ff 1f             	sar    edi,0x1f
c000d451:	21 05 00 84 02 c0    	and    DWORD PTR ds:0xc0028400,eax
c000d457:	89 fe                	mov    esi,edi
c000d459:	f7 d6                	not    esi
c000d45b:	21 35 04 84 02 c0    	and    DWORD PTR ds:0xc0028404,esi
c000d461:	5e                   	pop    esi
c000d462:	5f                   	pop    edi
c000d463:	c3                   	ret    

c000d464 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d464:	57                   	push   edi
c000d465:	56                   	push   esi
c000d466:	53                   	push   ebx
c000d467:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d46b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d46f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d473:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d477:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d47d:	77 41                	ja     c000d4c0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d47f:	99                   	cdq    
c000d480:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d486:	01 c8                	add    eax,ecx
c000d488:	11 da                	adc    edx,ebx
c000d48a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d490:	19 d7                	sbb    edi,edx
c000d492:	72 33                	jb     c000d4c7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d494:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d49a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d4a0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d4a4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d4a8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d4ae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d4b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d4b8:	5b                   	pop    ebx
c000d4b9:	5e                   	pop    esi
c000d4ba:	5f                   	pop    edi
c000d4bb:	e9 c6 0a 00 00       	jmp    c000df86 <VCache::read(unsigned long long, int, void*)>
c000d4c0:	b8 05 00 00 00       	mov    eax,0x5
c000d4c5:	eb 05                	jmp    c000d4cc <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d4c7:	b8 07 00 00 00       	mov    eax,0x7
c000d4cc:	5b                   	pop    ebx
c000d4cd:	5e                   	pop    esi
c000d4ce:	5f                   	pop    edi
c000d4cf:	c3                   	ret    

c000d4d0 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d4d0:	57                   	push   edi
c000d4d1:	56                   	push   esi
c000d4d2:	53                   	push   ebx
c000d4d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d4d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d4db:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d4df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d4e3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d4e9:	77 41                	ja     c000d52c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d4eb:	99                   	cdq    
c000d4ec:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d4f2:	01 c8                	add    eax,ecx
c000d4f4:	11 da                	adc    edx,ebx
c000d4f6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d4fc:	19 d7                	sbb    edi,edx
c000d4fe:	72 33                	jb     c000d533 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d500:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d506:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d50c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d510:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d514:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d51a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d520:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d524:	5b                   	pop    ebx
c000d525:	5e                   	pop    esi
c000d526:	5f                   	pop    edi
c000d527:	e9 6c 09 00 00       	jmp    c000de98 <VCache::write(unsigned long long, int, void*)>
c000d52c:	b8 05 00 00 00       	mov    eax,0x5
c000d531:	eb 05                	jmp    c000d538 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d533:	b8 07 00 00 00       	mov    eax,0x7
c000d538:	5b                   	pop    ebx
c000d539:	5e                   	pop    esi
c000d53a:	5f                   	pop    edi
c000d53b:	c3                   	ret    

c000d53c <Mouse::Mouse(char const*)>:
c000d53c:	83 ec 0c             	sub    esp,0xc
c000d53f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d543:	83 ec 08             	sub    esp,0x8
c000d546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d54a:	50                   	push   eax
c000d54b:	e8 ca ec ff ff       	call   c000c21a <Device::Device(char const*)>
c000d550:	83 c4 10             	add    esp,0x10
c000d553:	ba 00 0e 02 c0       	mov    edx,0xc0020e00
c000d558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d55c:	89 10                	mov    DWORD PTR [eax],edx
c000d55e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d562:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d56c:	90                   	nop
c000d56d:	83 c4 0c             	add    esp,0xc
c000d570:	c3                   	ret    
c000d571:	90                   	nop
c000d572:	66 90                	xchg   ax,ax

c000d574 <Mouse::~Mouse()>:
c000d574:	83 ec 0c             	sub    esp,0xc
c000d577:	ba 00 0e 02 c0       	mov    edx,0xc0020e00
c000d57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d580:	89 10                	mov    DWORD PTR [eax],edx
c000d582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d586:	83 ec 0c             	sub    esp,0xc
c000d589:	50                   	push   eax
c000d58a:	e8 f5 e9 ff ff       	call   c000bf84 <Device::~Device()>
c000d58f:	83 c4 10             	add    esp,0x10
c000d592:	90                   	nop
c000d593:	83 c4 0c             	add    esp,0xc
c000d596:	c3                   	ret    
c000d597:	90                   	nop

c000d598 <Mouse::~Mouse()>:
c000d598:	83 ec 0c             	sub    esp,0xc
c000d59b:	83 ec 0c             	sub    esp,0xc
c000d59e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a2:	e8 cd ff ff ff       	call   c000d574 <Mouse::~Mouse()>
c000d5a7:	83 c4 10             	add    esp,0x10
c000d5aa:	83 ec 08             	sub    esp,0x8
c000d5ad:	68 58 01 00 00       	push   0x158
c000d5b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5b6:	e8 8f d2 ff ff       	call   c000a84a <operator delete(void*, unsigned long)>
c000d5bb:	83 c4 10             	add    esp,0x10
c000d5be:	83 c4 0c             	add    esp,0xc
c000d5c1:	c3                   	ret    

c000d5c2 <NIC::getMAC()>:
c000d5c2:	31 c0                	xor    eax,eax
c000d5c4:	31 d2                	xor    edx,edx
c000d5c6:	c3                   	ret    
c000d5c7:	90                   	nop

c000d5c8 <NIC::write(int, unsigned char*, int*)>:
c000d5c8:	b8 01 00 00 00       	mov    eax,0x1
c000d5cd:	c3                   	ret    

c000d5ce <NIC::NIC(char const*)>:
c000d5ce:	83 ec 0c             	sub    esp,0xc
c000d5d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d5:	83 ec 08             	sub    esp,0x8
c000d5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5dc:	50                   	push   eax
c000d5dd:	e8 38 ec ff ff       	call   c000c21a <Device::Device(char const*)>
c000d5e2:	83 c4 10             	add    esp,0x10
c000d5e5:	ba 2c 0e 02 c0       	mov    edx,0xc0020e2c
c000d5ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5ee:	89 10                	mov    DWORD PTR [eax],edx
c000d5f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5f4:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d5fe:	90                   	nop
c000d5ff:	83 c4 0c             	add    esp,0xc
c000d602:	c3                   	ret    
c000d603:	90                   	nop

c000d604 <NIC::~NIC()>:
c000d604:	83 ec 0c             	sub    esp,0xc
c000d607:	ba 2c 0e 02 c0       	mov    edx,0xc0020e2c
c000d60c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d610:	89 10                	mov    DWORD PTR [eax],edx
c000d612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d616:	83 ec 0c             	sub    esp,0xc
c000d619:	50                   	push   eax
c000d61a:	e8 65 e9 ff ff       	call   c000bf84 <Device::~Device()>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	90                   	nop
c000d623:	83 c4 0c             	add    esp,0xc
c000d626:	c3                   	ret    
c000d627:	90                   	nop

c000d628 <NIC::~NIC()>:
c000d628:	83 ec 0c             	sub    esp,0xc
c000d62b:	83 ec 0c             	sub    esp,0xc
c000d62e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d632:	e8 cd ff ff ff       	call   c000d604 <NIC::~NIC()>
c000d637:	83 c4 10             	add    esp,0x10
c000d63a:	83 ec 08             	sub    esp,0x8
c000d63d:	68 58 01 00 00       	push   0x158
c000d642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d646:	e8 ff d1 ff ff       	call   c000a84a <operator delete(void*, unsigned long)>
c000d64b:	83 c4 10             	add    esp,0x10
c000d64e:	83 c4 0c             	add    esp,0xc
c000d651:	c3                   	ret    

c000d652 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d652:	55                   	push   ebp
c000d653:	57                   	push   edi
c000d654:	56                   	push   esi
c000d655:	53                   	push   ebx
c000d656:	81 ec 28 01 00 00    	sub    esp,0x128
c000d65c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d663:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d66a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d671:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d678:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d67c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d680:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d687:	e8 8a ec ff ff       	call   c000c316 <Device::getName()>
c000d68c:	5a                   	pop    edx
c000d68d:	59                   	pop    ecx
c000d68e:	50                   	push   eax
c000d68f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d693:	55                   	push   ebp
c000d694:	e8 a7 2f ff ff       	call   c0000640 <strcpy>
c000d699:	5b                   	pop    ebx
c000d69a:	58                   	pop    eax
c000d69b:	68 58 0e 02 c0       	push   0xc0020e58
c000d6a0:	55                   	push   ebp
c000d6a1:	e8 9a 31 ff ff       	call   c0000840 <strcat>
c000d6a6:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d6ad:	e8 fc a3 ff ff       	call   c0007aae <malloc>
c000d6b2:	83 c4 0c             	add    esp,0xc
c000d6b5:	89 c3                	mov    ebx,eax
c000d6b7:	57                   	push   edi
c000d6b8:	56                   	push   esi
c000d6b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d6c1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d6c8:	55                   	push   ebp
c000d6c9:	50                   	push   eax
c000d6ca:	e8 59 fb ff ff       	call   c000d228 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d6cf:	83 c4 14             	add    esp,0x14
c000d6d2:	53                   	push   ebx
c000d6d3:	e8 10 fc ff ff       	call   c000d2e8 <LogicalDisk::assignDriveLetter()>
c000d6d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d6db:	e8 c2 fc ff ff       	call   c000d3a2 <LogicalDisk::mount()>
c000d6e0:	58                   	pop    eax
c000d6e1:	5a                   	pop    edx
c000d6e2:	53                   	push   ebx
c000d6e3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d6ea:	e8 93 e9 ff ff       	call   c000c082 <Device::addChild(Device*)>
c000d6ef:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d6f5:	5b                   	pop    ebx
c000d6f6:	5e                   	pop    esi
c000d6f7:	5f                   	pop    edi
c000d6f8:	5d                   	pop    ebp
c000d6f9:	c3                   	ret    

c000d6fa <createPartitionsForDisk(PhysicalDisk*)>:
c000d6fa:	55                   	push   ebp
c000d6fb:	57                   	push   edi
c000d6fc:	56                   	push   esi
c000d6fd:	53                   	push   ebx
c000d6fe:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d704:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d70b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d711:	3d 00 02 00 00       	cmp    eax,0x200
c000d716:	74 27                	je     c000d73f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d718:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d71e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d724:	83 ec 10             	sub    esp,0x10
c000d727:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d72b:	99                   	cdq    
c000d72c:	c1 e6 0a             	shl    esi,0xa
c000d72f:	52                   	push   edx
c000d730:	89 fd                	mov    ebp,edi
c000d732:	50                   	push   eax
c000d733:	55                   	push   ebp
c000d734:	56                   	push   esi
c000d735:	e8 96 12 01 00       	call   c001e9d0 <__udivdi3>
c000d73a:	e9 b9 00 00 00       	jmp    c000d7f8 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d73f:	83 ec 0c             	sub    esp,0xc
c000d742:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d744:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d748:	56                   	push   esi
c000d749:	6a 01                	push   0x1
c000d74b:	6a 00                	push   0x0
c000d74d:	6a 00                	push   0x0
c000d74f:	53                   	push   ebx
c000d750:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d753:	83 c4 20             	add    esp,0x20
c000d756:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d75e:	75 0a                	jne    c000d76a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d760:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d768:	74 2c                	je     c000d796 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d76a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d770:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d776:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d77c:	83 ec 10             	sub    esp,0x10
c000d77f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d783:	89 f7                	mov    edi,esi
c000d785:	c1 e0 0a             	shl    eax,0xa
c000d788:	c1 ff 1f             	sar    edi,0x1f
c000d78b:	57                   	push   edi
c000d78c:	56                   	push   esi
c000d78d:	52                   	push   edx
c000d78e:	50                   	push   eax
c000d78f:	e8 3c 12 01 00       	call   c001e9d0 <__udivdi3>
c000d794:	eb 62                	jmp    c000d7f8 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d796:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d79d:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000d7a4:	89 cf                	mov    edi,ecx
c000d7a6:	83 e2 7f             	and    edx,0x7f
c000d7a9:	83 e7 7f             	and    edi,0x7f
c000d7ac:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d7b3:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000d7b6:	83 e0 7f             	and    eax,0x7f
c000d7b9:	8d 14 01             	lea    edx,[ecx+eax*1]
c000d7bc:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d7c3:	83 e0 7f             	and    eax,0x7f
c000d7c6:	01 d0                	add    eax,edx
c000d7c8:	89 c5                	mov    ebp,eax
c000d7ca:	84 c0                	test   al,al
c000d7cc:	74 41                	je     c000d80f <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000d7ce:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d7d4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d7da:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d7e0:	83 ec 10             	sub    esp,0x10
c000d7e3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d7e7:	89 f7                	mov    edi,esi
c000d7e9:	c1 e0 0a             	shl    eax,0xa
c000d7ec:	c1 ff 1f             	sar    edi,0x1f
c000d7ef:	57                   	push   edi
c000d7f0:	56                   	push   esi
c000d7f1:	52                   	push   edx
c000d7f2:	50                   	push   eax
c000d7f3:	e8 d8 11 01 00       	call   c001e9d0 <__udivdi3>
c000d7f8:	83 c4 14             	add    esp,0x14
c000d7fb:	52                   	push   edx
c000d7fc:	50                   	push   eax
c000d7fd:	6a 00                	push   0x0
c000d7ff:	6a 00                	push   0x0
c000d801:	53                   	push   ebx
c000d802:	e8 4b fe ff ff       	call   c000d652 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d807:	83 c4 20             	add    esp,0x20
c000d80a:	e9 73 01 00 00       	jmp    c000d982 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000d80f:	89 f0                	mov    eax,esi
c000d811:	31 c9                	xor    ecx,ecx
c000d813:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d81a:	75 02                	jne    c000d81e <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000d81c:	89 cd                	mov    ebp,ecx
c000d81e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d825:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000d82c:	c1 e2 08             	shl    edx,0x8
c000d82f:	c1 e6 10             	shl    esi,0x10
c000d832:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d83a:	09 f2                	or     edx,esi
c000d83c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d844:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000d84b:	83 c0 10             	add    eax,0x10
c000d84e:	09 f2                	or     edx,esi
c000d850:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d857:	c1 e6 18             	shl    esi,0x18
c000d85a:	09 f2                	or     edx,esi
c000d85c:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d863:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d867:	c1 e6 10             	shl    esi,0x10
c000d86a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d871:	c1 e2 08             	shl    edx,0x8
c000d874:	09 f2                	or     edx,esi
c000d876:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d87d:	09 f2                	or     edx,esi
c000d87f:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d886:	c1 e6 18             	shl    esi,0x18
c000d889:	09 f2                	or     edx,esi
c000d88b:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d88f:	41                   	inc    ecx
c000d890:	83 f9 04             	cmp    ecx,0x4
c000d893:	0f 85 7a ff ff ff    	jne    c000d813 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d89d:	83 f0 01             	xor    eax,0x1
c000d8a0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d8a4:	75 4f                	jne    c000d8f5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d8a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d8aa:	83 f0 01             	xor    eax,0x1
c000d8ad:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d8b1:	75 42                	jne    c000d8f5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d8b3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d8bb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d8c3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d8c9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d8cf:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d8d5:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d8d9:	89 f7                	mov    edi,esi
c000d8db:	c1 e0 0a             	shl    eax,0xa
c000d8de:	c1 ff 1f             	sar    edi,0x1f
c000d8e1:	57                   	push   edi
c000d8e2:	56                   	push   esi
c000d8e3:	52                   	push   edx
c000d8e4:	50                   	push   eax
c000d8e5:	e8 e6 10 01 00       	call   c001e9d0 <__udivdi3>
c000d8ea:	83 c4 10             	add    esp,0x10
c000d8ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f5:	89 e8                	mov    eax,ebp
c000d8f7:	0f b6 e8             	movzx  ebp,al
c000d8fa:	85 ed                	test   ebp,ebp
c000d8fc:	74 50                	je     c000d94e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d8fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d902:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d906:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d90a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d90e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d912:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d916:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d91a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d91e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d922:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d926:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d92a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000d92e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000d932:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d936:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d93a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d93e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d942:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d946:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000d94a:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000d94e:	31 ed                	xor    ebp,ebp
c000d950:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d954:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d958:	89 f8                	mov    eax,edi
c000d95a:	09 f0                	or     eax,esi
c000d95c:	74 1e                	je     c000d97c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d95e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d962:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d966:	89 d1                	mov    ecx,edx
c000d968:	09 c1                	or     ecx,eax
c000d96a:	74 10                	je     c000d97c <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d96c:	83 ec 0c             	sub    esp,0xc
c000d96f:	57                   	push   edi
c000d970:	56                   	push   esi
c000d971:	52                   	push   edx
c000d972:	50                   	push   eax
c000d973:	53                   	push   ebx
c000d974:	e8 d9 fc ff ff       	call   c000d652 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d979:	83 c4 20             	add    esp,0x20
c000d97c:	45                   	inc    ebp
c000d97d:	83 fd 04             	cmp    ebp,0x4
c000d980:	75 ce                	jne    c000d950 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000d982:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d988:	5b                   	pop    ebx
c000d989:	5e                   	pop    esi
c000d98a:	5f                   	pop    edi
c000d98b:	5d                   	pop    ebp
c000d98c:	c3                   	ret    
c000d98d:	66 90                	xchg   ax,ax
c000d98f:	90                   	nop

c000d990 <Serial::Serial(char const*)>:
c000d990:	83 ec 0c             	sub    esp,0xc
c000d993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d997:	83 ec 08             	sub    esp,0x8
c000d99a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d99e:	50                   	push   eax
c000d99f:	e8 76 e8 ff ff       	call   c000c21a <Device::Device(char const*)>
c000d9a4:	83 c4 10             	add    esp,0x10
c000d9a7:	ba 6c 0e 02 c0       	mov    edx,0xc0020e6c
c000d9ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9b0:	89 10                	mov    DWORD PTR [eax],edx
c000d9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9b6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d9c0:	90                   	nop
c000d9c1:	83 c4 0c             	add    esp,0xc
c000d9c4:	c3                   	ret    
c000d9c5:	90                   	nop
c000d9c6:	66 90                	xchg   ax,ax

c000d9c8 <Serial::~Serial()>:
c000d9c8:	83 ec 0c             	sub    esp,0xc
c000d9cb:	ba 6c 0e 02 c0       	mov    edx,0xc0020e6c
c000d9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9d4:	89 10                	mov    DWORD PTR [eax],edx
c000d9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9da:	83 ec 0c             	sub    esp,0xc
c000d9dd:	50                   	push   eax
c000d9de:	e8 a1 e5 ff ff       	call   c000bf84 <Device::~Device()>
c000d9e3:	83 c4 10             	add    esp,0x10
c000d9e6:	90                   	nop
c000d9e7:	83 c4 0c             	add    esp,0xc
c000d9ea:	c3                   	ret    
c000d9eb:	90                   	nop

c000d9ec <Serial::~Serial()>:
c000d9ec:	83 ec 0c             	sub    esp,0xc
c000d9ef:	83 ec 0c             	sub    esp,0xc
c000d9f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9f6:	e8 cd ff ff ff       	call   c000d9c8 <Serial::~Serial()>
c000d9fb:	83 c4 10             	add    esp,0x10
c000d9fe:	83 ec 08             	sub    esp,0x8
c000da01:	68 58 01 00 00       	push   0x158
c000da06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da0a:	e8 3b ce ff ff       	call   c000a84a <operator delete(void*, unsigned long)>
c000da0f:	83 c4 10             	add    esp,0x10
c000da12:	83 c4 0c             	add    esp,0xc
c000da15:	c3                   	ret    
c000da16:	66 90                	xchg   ax,ax

c000da18 <Timer::Timer(char const*)>:
c000da18:	83 ec 0c             	sub    esp,0xc
c000da1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da1f:	83 ec 08             	sub    esp,0x8
c000da22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da26:	50                   	push   eax
c000da27:	e8 ee e7 ff ff       	call   c000c21a <Device::Device(char const*)>
c000da2c:	83 c4 10             	add    esp,0x10
c000da2f:	ba b0 0e 02 c0       	mov    edx,0xc0020eb0
c000da34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da38:	89 10                	mov    DWORD PTR [eax],edx
c000da3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da3e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000da48:	90                   	nop
c000da49:	83 c4 0c             	add    esp,0xc
c000da4c:	c3                   	ret    
c000da4d:	90                   	nop
c000da4e:	66 90                	xchg   ax,ax

c000da50 <Timer::~Timer()>:
c000da50:	83 ec 0c             	sub    esp,0xc
c000da53:	ba b0 0e 02 c0       	mov    edx,0xc0020eb0
c000da58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da5c:	89 10                	mov    DWORD PTR [eax],edx
c000da5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da62:	83 ec 0c             	sub    esp,0xc
c000da65:	50                   	push   eax
c000da66:	e8 19 e5 ff ff       	call   c000bf84 <Device::~Device()>
c000da6b:	83 c4 10             	add    esp,0x10
c000da6e:	90                   	nop
c000da6f:	83 c4 0c             	add    esp,0xc
c000da72:	c3                   	ret    
c000da73:	90                   	nop

c000da74 <Timer::~Timer()>:
c000da74:	83 ec 0c             	sub    esp,0xc
c000da77:	83 ec 0c             	sub    esp,0xc
c000da7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da7e:	e8 cd ff ff ff       	call   c000da50 <Timer::~Timer()>
c000da83:	83 c4 10             	add    esp,0x10
c000da86:	83 ec 08             	sub    esp,0x8
c000da89:	68 5c 01 00 00       	push   0x15c
c000da8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da92:	e8 b3 cd ff ff       	call   c000a84a <operator delete(void*, unsigned long)>
c000da97:	83 c4 10             	add    esp,0x10
c000da9a:	83 c4 0c             	add    esp,0xc
c000da9d:	c3                   	ret    

c000da9e <Timer::read()>:
c000da9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000daa2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000daa8:	c3                   	ret    

c000daa9 <setupTimer(int)>:
c000daa9:	53                   	push   ebx
c000daaa:	83 ec 14             	sub    esp,0x14
c000daad:	68 5c 01 00 00       	push   0x15c
c000dab2:	e8 f7 9f ff ff       	call   c0007aae <malloc>
c000dab7:	89 04 24             	mov    DWORD PTR [esp],eax
c000daba:	89 c3                	mov    ebx,eax
c000dabc:	e8 77 07 01 00       	call   c001e238 <PIT::PIT()>
c000dac1:	58                   	pop    eax
c000dac2:	5a                   	pop    edx
c000dac3:	53                   	push   ebx
c000dac4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000daca:	e8 b3 e5 ff ff       	call   c000c082 <Device::addChild(Device*)>
c000dacf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dad1:	6a 00                	push   0x0
c000dad3:	6a 00                	push   0x0
c000dad5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dad9:	53                   	push   ebx
c000dada:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dadd:	89 d8                	mov    eax,ebx
c000dadf:	83 c4 28             	add    esp,0x28
c000dae2:	5b                   	pop    ebx
c000dae3:	c3                   	ret    

c000dae4 <timerHandler(unsigned int)>:
c000dae4:	56                   	push   esi
c000dae5:	53                   	push   ebx
c000dae6:	51                   	push   ecx
c000dae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daeb:	01 05 8c 84 02 c0    	add    DWORD PTR ds:0xc002848c,eax
c000daf1:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000daf8:	0f 84 4a 01 00 00    	je     c000dc48 <timerHandler(unsigned int)+0x164>
c000dafe:	fa                   	cli    
c000daff:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c000db05:	83 ec 0c             	sub    esp,0xc
c000db08:	ff 05 64 91 02 c0    	inc    DWORD PTR ds:0xc0029164
c000db0e:	68 78 91 02 c0       	push   0xc0029178
c000db13:	e8 88 14 01 00       	call   c001efa0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	84 c0                	test   al,al
c000db1d:	0f 85 a1 00 00 00    	jne    c000dbc4 <timerHandler(unsigned int)+0xe0>
c000db23:	83 ec 0c             	sub    esp,0xc
c000db26:	68 78 91 02 c0       	push   0xc0029178
c000db2b:	e8 8c 14 01 00       	call   c001efbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000db30:	83 c4 10             	add    esp,0x10
c000db33:	89 c6                	mov    esi,eax
c000db35:	8d 76 00             	lea    esi,[esi+0x0]
c000db38:	83 ec 0c             	sub    esp,0xc
c000db3b:	68 78 91 02 c0       	push   0xc0029178
c000db40:	e8 77 14 01 00       	call   c001efbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000db45:	c7 04 24 78 91 02 c0 	mov    DWORD PTR [esp],0xc0029178
c000db4c:	89 c3                	mov    ebx,eax
c000db4e:	e8 71 14 01 00       	call   c001efc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000db53:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000db56:	83 c4 10             	add    esp,0x10
c000db59:	3b 05 8c 84 02 c0    	cmp    eax,DWORD PTR ds:0xc002848c
c000db5f:	77 23                	ja     c000db84 <timerHandler(unsigned int)+0xa0>
c000db61:	83 ec 0c             	sub    esp,0xc
c000db64:	53                   	push   ebx
c000db65:	e8 7a 7d 00 00       	call   c00158e4 <unblockTask(ThreadControlBlock*)>
c000db6a:	83 c4 10             	add    esp,0x10
c000db6d:	39 de                	cmp    esi,ebx
c000db6f:	75 27                	jne    c000db98 <timerHandler(unsigned int)+0xb4>
c000db71:	83 ec 0c             	sub    esp,0xc
c000db74:	68 78 91 02 c0       	push   0xc0029178
c000db79:	e8 3e 14 01 00       	call   c001efbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000db7e:	89 c6                	mov    esi,eax
c000db80:	eb 12                	jmp    c000db94 <timerHandler(unsigned int)+0xb0>
c000db82:	66 90                	xchg   ax,ax
c000db84:	52                   	push   edx
c000db85:	52                   	push   edx
c000db86:	53                   	push   ebx
c000db87:	68 78 91 02 c0       	push   0xc0029178
c000db8c:	e8 ef 14 01 00       	call   c001f080 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000db91:	8d 76 00             	lea    esi,[esi+0x0]
c000db94:	83 c4 10             	add    esp,0x10
c000db97:	90                   	nop
c000db98:	83 ec 0c             	sub    esp,0xc
c000db9b:	68 78 91 02 c0       	push   0xc0029178
c000dba0:	e8 fb 13 01 00       	call   c001efa0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000dba5:	83 c4 10             	add    esp,0x10
c000dba8:	84 c0                	test   al,al
c000dbaa:	75 18                	jne    c000dbc4 <timerHandler(unsigned int)+0xe0>
c000dbac:	83 ec 0c             	sub    esp,0xc
c000dbaf:	68 78 91 02 c0       	push   0xc0029178
c000dbb4:	e8 03 14 01 00       	call   c001efbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000dbb9:	83 c4 10             	add    esp,0x10
c000dbbc:	39 f0                	cmp    eax,esi
c000dbbe:	0f 85 74 ff ff ff    	jne    c000db38 <timerHandler(unsigned int)+0x54>
c000dbc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dbc9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000dbcd:	74 41                	je     c000dc10 <timerHandler(unsigned int)+0x12c>
c000dbcf:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000dbd6:	74 38                	je     c000dc10 <timerHandler(unsigned int)+0x12c>
c000dbd8:	fa                   	cli    
c000dbd9:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c000dbdf:	a1 8c 84 02 c0       	mov    eax,ds:0xc002848c
c000dbe4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000dbea:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000dbed:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000dbf3:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000dbf6:	72 08                	jb     c000dc00 <timerHandler(unsigned int)+0x11c>
c000dbf8:	e8 cf 77 00 00       	call   c00153cc <schedule()>
c000dbfd:	8d 76 00             	lea    esi,[esi+0x0]
c000dc00:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000dc05:	48                   	dec    eax
c000dc06:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000dc0b:	75 03                	jne    c000dc10 <timerHandler(unsigned int)+0x12c>
c000dc0d:	fb                   	sti    
c000dc0e:	66 90                	xchg   ax,ax
c000dc10:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c000dc15:	48                   	dec    eax
c000dc16:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c000dc1b:	75 1b                	jne    c000dc38 <timerHandler(unsigned int)+0x154>
c000dc1d:	83 3d 60 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029160,0x0
c000dc24:	74 12                	je     c000dc38 <timerHandler(unsigned int)+0x154>
c000dc26:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c000dc30:	e8 97 77 00 00       	call   c00153cc <schedule()>
c000dc35:	8d 76 00             	lea    esi,[esi+0x0]
c000dc38:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c000dc3d:	48                   	dec    eax
c000dc3e:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c000dc43:	75 03                	jne    c000dc48 <timerHandler(unsigned int)+0x164>
c000dc45:	fb                   	sti    
c000dc46:	66 90                	xchg   ax,ax
c000dc48:	58                   	pop    eax
c000dc49:	5b                   	pop    ebx
c000dc4a:	5e                   	pop    esi
c000dc4b:	c3                   	ret    

c000dc4c <VCache::VCache(PhysicalDisk*)>:
c000dc4c:	53                   	push   ebx
c000dc4d:	83 ec 18             	sub    esp,0x18
c000dc50:	ba e0 0e 02 c0       	mov    edx,0xc0020ee0
c000dc55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc59:	89 10                	mov    DWORD PTR [eax],edx
c000dc5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc5f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000dc66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc6a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000dc71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc75:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000dc7c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000dc83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc87:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000dc8e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000dc95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc99:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000dca0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dca4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000dca8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcac:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000dcb3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000dcba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcbe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000dcc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcc6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000dcca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcce:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000dcd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcd6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dcdd:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000dce5:	83 ec 0c             	sub    esp,0xc
c000dce8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dcec:	e8 bd 9d ff ff       	call   c0007aae <malloc>
c000dcf1:	83 c4 10             	add    esp,0x10
c000dcf4:	89 c3                	mov    ebx,eax
c000dcf6:	83 ec 0c             	sub    esp,0xc
c000dcf9:	53                   	push   ebx
c000dcfa:	e8 69 74 00 00       	call   c0015168 <Mutex::Mutex()>
c000dcff:	83 c4 10             	add    esp,0x10
c000dd02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd06:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000dd09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd0d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dd11:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000dd14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd18:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000dd1f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dd23:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dd29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd2d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dd30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dd34:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000dd3a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000dd40:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dd44:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000dd47:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000dd4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd4e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000dd52:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dd56:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dd5c:	05 00 02 00 00       	add    eax,0x200
c000dd61:	c1 e0 03             	shl    eax,0x3
c000dd64:	83 ec 0c             	sub    esp,0xc
c000dd67:	50                   	push   eax
c000dd68:	e8 41 9d ff ff       	call   c0007aae <malloc>
c000dd6d:	83 c4 10             	add    esp,0x10
c000dd70:	89 c2                	mov    edx,eax
c000dd72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd76:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dd79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd7d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dd84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd88:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000dd8c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dd90:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dd96:	89 d0                	mov    eax,edx
c000dd98:	c1 e0 02             	shl    eax,0x2
c000dd9b:	01 d0                	add    eax,edx
c000dd9d:	c1 e0 04             	shl    eax,0x4
c000dda0:	83 ec 0c             	sub    esp,0xc
c000dda3:	50                   	push   eax
c000dda4:	e8 05 9d ff ff       	call   c0007aae <malloc>
c000dda9:	83 c4 10             	add    esp,0x10
c000ddac:	89 c2                	mov    edx,eax
c000ddae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddb2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ddb5:	90                   	nop
c000ddb6:	83 c4 18             	add    esp,0x18
c000ddb9:	5b                   	pop    ebx
c000ddba:	c3                   	ret    
c000ddbb:	90                   	nop

c000ddbc <VCache::invalidateReadBuffer()>:
c000ddbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddc0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000ddc6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000ddca:	c3                   	ret    
c000ddcb:	90                   	nop

c000ddcc <VCache::writeWriteBuffer()>:
c000ddcc:	53                   	push   ebx
c000ddcd:	83 ec 08             	sub    esp,0x8
c000ddd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ddd4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ddd8:	74 1e                	je     c000ddf8 <VCache::writeWriteBuffer()+0x2c>
c000ddda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dddd:	83 ec 0c             	sub    esp,0xc
c000dde0:	8b 10                	mov    edx,DWORD PTR [eax]
c000dde2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000dde5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000dde8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000ddeb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ddee:	50                   	push   eax
c000ddef:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ddf2:	83 c4 20             	add    esp,0x20
c000ddf5:	8d 76 00             	lea    esi,[esi+0x0]
c000ddf8:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ddff:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000de06:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000de0a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000de11:	83 c4 08             	add    esp,0x8
c000de14:	5b                   	pop    ebx
c000de15:	c3                   	ret    
c000de16:	66 90                	xchg   ax,ax

c000de18 <VCache::~VCache()>:
c000de18:	83 ec 0c             	sub    esp,0xc
c000de1b:	ba e0 0e 02 c0       	mov    edx,0xc0020ee0
c000de20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de24:	89 10                	mov    DWORD PTR [eax],edx
c000de26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de2a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000de2d:	0f b6 c0             	movzx  eax,al
c000de30:	85 c0                	test   eax,eax
c000de32:	74 10                	je     c000de44 <VCache::~VCache()+0x2c>
c000de34:	83 ec 0c             	sub    esp,0xc
c000de37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de3b:	e8 8c ff ff ff       	call   c000ddcc <VCache::writeWriteBuffer()>
c000de40:	83 c4 10             	add    esp,0x10
c000de43:	90                   	nop
c000de44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de48:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000de4b:	83 ec 0c             	sub    esp,0xc
c000de4e:	50                   	push   eax
c000de4f:	e8 6a 9c ff ff       	call   c0007abe <free>
c000de54:	83 c4 10             	add    esp,0x10
c000de57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de5b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000de5e:	83 ec 0c             	sub    esp,0xc
c000de61:	50                   	push   eax
c000de62:	e8 57 9c ff ff       	call   c0007abe <free>
c000de67:	83 c4 10             	add    esp,0x10
c000de6a:	90                   	nop
c000de6b:	83 c4 0c             	add    esp,0xc
c000de6e:	c3                   	ret    
c000de6f:	90                   	nop

c000de70 <VCache::~VCache()>:
c000de70:	83 ec 0c             	sub    esp,0xc
c000de73:	83 ec 0c             	sub    esp,0xc
c000de76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de7a:	e8 99 ff ff ff       	call   c000de18 <VCache::~VCache()>
c000de7f:	83 c4 10             	add    esp,0x10
c000de82:	83 ec 08             	sub    esp,0x8
c000de85:	6a 44                	push   0x44
c000de87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de8b:	e8 ba c9 ff ff       	call   c000a84a <operator delete(void*, unsigned long)>
c000de90:	83 c4 10             	add    esp,0x10
c000de93:	83 c4 0c             	add    esp,0xc
c000de96:	c3                   	ret    
c000de97:	90                   	nop

c000de98 <VCache::write(unsigned long long, int, void*)>:
c000de98:	55                   	push   ebp
c000de99:	57                   	push   edi
c000de9a:	56                   	push   esi
c000de9b:	53                   	push   ebx
c000de9c:	83 ec 1c             	sub    esp,0x1c
c000de9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dea3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dea7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000deab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000deaf:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000deb3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000deb7:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000debb:	74 07                	je     c000dec4 <VCache::write(unsigned long long, int, void*)+0x2c>
c000debd:	53                   	push   ebx
c000debe:	e8 f9 fe ff ff       	call   c000ddbc <VCache::invalidateReadBuffer()>
c000dec3:	58                   	pop    eax
c000dec4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dec8:	74 62                	je     c000df2c <VCache::write(unsigned long long, int, void*)+0x94>
c000deca:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000decd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ded1:	99                   	cdq    
c000ded2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ded6:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000ded9:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dedc:	31 c1                	xor    ecx,eax
c000dede:	89 d0                	mov    eax,edx
c000dee0:	89 ca                	mov    edx,ecx
c000dee2:	31 e8                	xor    eax,ebp
c000dee4:	09 c2                	or     edx,eax
c000dee6:	75 38                	jne    c000df20 <VCache::write(unsigned long long, int, void*)+0x88>
c000dee8:	83 ff 01             	cmp    edi,0x1
c000deeb:	75 33                	jne    c000df20 <VCache::write(unsigned long long, int, void*)+0x88>
c000deed:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000def0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000def4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000defa:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000defd:	0f af c8             	imul   ecx,eax
c000df00:	01 cf                	add    edi,ecx
c000df02:	89 c1                	mov    ecx,eax
c000df04:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df06:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000df09:	40                   	inc    eax
c000df0a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000df0d:	83 f8 50             	cmp    eax,0x50
c000df10:	75 6a                	jne    c000df7c <VCache::write(unsigned long long, int, void*)+0xe4>
c000df12:	83 ec 0c             	sub    esp,0xc
c000df15:	53                   	push   ebx
c000df16:	e8 b1 fe ff ff       	call   c000ddcc <VCache::writeWriteBuffer()>
c000df1b:	83 c4 10             	add    esp,0x10
c000df1e:	eb 5c                	jmp    c000df7c <VCache::write(unsigned long long, int, void*)+0xe4>
c000df20:	83 ec 0c             	sub    esp,0xc
c000df23:	53                   	push   ebx
c000df24:	e8 a3 fe ff ff       	call   c000ddcc <VCache::writeWriteBuffer()>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000df2f:	83 ff 4f             	cmp    edi,0x4f
c000df32:	7f 20                	jg     c000df54 <VCache::write(unsigned long long, int, void*)+0xbc>
c000df34:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000df37:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000df3b:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000df3e:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000df41:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000df45:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000df48:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000df4e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df50:	eb 2a                	jmp    c000df7c <VCache::write(unsigned long long, int, void*)+0xe4>
c000df52:	66 90                	xchg   ax,ax
c000df54:	8b 10                	mov    edx,DWORD PTR [eax]
c000df56:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000df5a:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000df5e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000df62:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000df66:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000df6a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df6e:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000df71:	83 c4 1c             	add    esp,0x1c
c000df74:	5b                   	pop    ebx
c000df75:	5e                   	pop    esi
c000df76:	5f                   	pop    edi
c000df77:	5d                   	pop    ebp
c000df78:	ff e0                	jmp    eax
c000df7a:	66 90                	xchg   ax,ax
c000df7c:	83 c4 1c             	add    esp,0x1c
c000df7f:	31 c0                	xor    eax,eax
c000df81:	5b                   	pop    ebx
c000df82:	5e                   	pop    esi
c000df83:	5f                   	pop    edi
c000df84:	5d                   	pop    ebp
c000df85:	c3                   	ret    

c000df86 <VCache::read(unsigned long long, int, void*)>:
c000df86:	55                   	push   ebp
c000df87:	57                   	push   edi
c000df88:	56                   	push   esi
c000df89:	53                   	push   ebx
c000df8a:	83 ec 1c             	sub    esp,0x1c
c000df8d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000df91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df95:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000df99:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000df9d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dfa1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dfa5:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000dfa9:	74 0d                	je     c000dfb8 <VCache::read(unsigned long long, int, void*)+0x32>
c000dfab:	83 ec 0c             	sub    esp,0xc
c000dfae:	57                   	push   edi
c000dfaf:	e8 18 fe ff ff       	call   c000ddcc <VCache::writeWriteBuffer()>
c000dfb4:	83 c4 10             	add    esp,0x10
c000dfb7:	90                   	nop
c000dfb8:	83 fd 01             	cmp    ebp,0x1
c000dfbb:	0f 85 93 00 00 00    	jne    c000e054 <VCache::read(unsigned long long, int, void*)+0xce>
c000dfc1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dfc4:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc7:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dfce:	0f 85 80 00 00 00    	jne    c000e054 <VCache::read(unsigned long long, int, void*)+0xce>
c000dfd4:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000dfd7:	89 e9                	mov    ecx,ebp
c000dfd9:	f7 d9                	neg    ecx
c000dfdb:	89 c8                	mov    eax,ecx
c000dfdd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dfe1:	c1 f8 1f             	sar    eax,0x1f
c000dfe4:	21 d9                	and    ecx,ebx
c000dfe6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dfea:	89 c8                	mov    eax,ecx
c000dfec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dff0:	21 f1                	and    ecx,esi
c000dff2:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dff6:	89 ca                	mov    edx,ecx
c000dff8:	74 2e                	je     c000e028 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dffa:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000dffd:	75 29                	jne    c000e028 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dfff:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e002:	75 24                	jne    c000e028 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e004:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e007:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e00d:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e010:	8d 70 ff             	lea    esi,[eax-0x1]
c000e013:	21 f3                	and    ebx,esi
c000e015:	0f af d9             	imul   ebx,ecx
c000e018:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e01b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e01f:	89 de                	mov    esi,ebx
c000e021:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e023:	31 c0                	xor    eax,eax
c000e025:	eb 61                	jmp    c000e088 <VCache::read(unsigned long long, int, void*)+0x102>
c000e027:	90                   	nop
c000e028:	83 ec 0c             	sub    esp,0xc
c000e02b:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e02f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e033:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e036:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e039:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e03b:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e03e:	55                   	push   ebp
c000e03f:	52                   	push   edx
c000e040:	50                   	push   eax
c000e041:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e045:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e048:	83 c4 20             	add    esp,0x20
c000e04b:	85 c0                	test   eax,eax
c000e04d:	75 39                	jne    c000e088 <VCache::read(unsigned long long, int, void*)+0x102>
c000e04f:	eb b3                	jmp    c000e004 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e051:	8d 76 00             	lea    esi,[esi+0x0]
c000e054:	83 ec 0c             	sub    esp,0xc
c000e057:	57                   	push   edi
c000e058:	e8 5f fd ff ff       	call   c000ddbc <VCache::invalidateReadBuffer()>
c000e05d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e060:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e064:	8b 10                	mov    edx,DWORD PTR [eax]
c000e066:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e06a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e06e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e072:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e076:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e07a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e07d:	83 c4 2c             	add    esp,0x2c
c000e080:	5b                   	pop    ebx
c000e081:	5e                   	pop    esi
c000e082:	5f                   	pop    edi
c000e083:	5d                   	pop    ebp
c000e084:	ff e0                	jmp    eax
c000e086:	66 90                	xchg   ax,ax
c000e088:	83 c4 1c             	add    esp,0x1c
c000e08b:	5b                   	pop    ebx
c000e08c:	5e                   	pop    esi
c000e08d:	5f                   	pop    edi
c000e08e:	5d                   	pop    ebp
c000e08f:	c3                   	ret    

c000e090 <Video::putrect(int, int, int, int, unsigned int)>:
c000e090:	55                   	push   ebp
c000e091:	57                   	push   edi
c000e092:	56                   	push   esi
c000e093:	53                   	push   ebx
c000e094:	83 ec 1c             	sub    esp,0x1c
c000e097:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e09b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e09f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e0a3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e0a7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e0ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0af:	01 df                	add    edi,ebx
c000e0b1:	39 fb                	cmp    ebx,edi
c000e0b3:	7d 1f                	jge    c000e0d4 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e0b5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e0b9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e0bd:	7d 12                	jge    c000e0d1 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e0bf:	8b 16                	mov    edx,DWORD PTR [esi]
c000e0c1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e0c5:	53                   	push   ebx
c000e0c6:	55                   	push   ebp
c000e0c7:	45                   	inc    ebp
c000e0c8:	56                   	push   esi
c000e0c9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e0cc:	83 c4 10             	add    esp,0x10
c000e0cf:	eb e8                	jmp    c000e0b9 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e0d1:	43                   	inc    ebx
c000e0d2:	eb dd                	jmp    c000e0b1 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e0d4:	83 c4 1c             	add    esp,0x1c
c000e0d7:	5b                   	pop    ebx
c000e0d8:	5e                   	pop    esi
c000e0d9:	5f                   	pop    edi
c000e0da:	5d                   	pop    ebp
c000e0db:	c3                   	ret    

c000e0dc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e0dc:	55                   	push   ebp
c000e0dd:	57                   	push   edi
c000e0de:	31 ff                	xor    edi,edi
c000e0e0:	56                   	push   esi
c000e0e1:	53                   	push   ebx
c000e0e2:	83 ec 1c             	sub    esp,0x1c
c000e0e5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e0e9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e0ed:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e0f4:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e0f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e0fd:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e101:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e105:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e108:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e10c:	01 f9                	add    ecx,edi
c000e10e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e112:	7d 2f                	jge    c000e143 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e114:	31 f6                	xor    esi,esi
c000e116:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e11a:	01 f2                	add    edx,esi
c000e11c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e120:	7d 1a                	jge    c000e13c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e122:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e125:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e128:	46                   	inc    esi
c000e129:	51                   	push   ecx
c000e12a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e12e:	52                   	push   edx
c000e12f:	55                   	push   ebp
c000e130:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e133:	83 c4 10             	add    esp,0x10
c000e136:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e13a:	eb da                	jmp    c000e116 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e13c:	47                   	inc    edi
c000e13d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e141:	eb c5                	jmp    c000e108 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e143:	83 c4 1c             	add    esp,0x1c
c000e146:	5b                   	pop    ebx
c000e147:	5e                   	pop    esi
c000e148:	5f                   	pop    edi
c000e149:	5d                   	pop    ebp
c000e14a:	c3                   	ret    
c000e14b:	90                   	nop

c000e14c <Video::blit(unsigned int*, int, int, int, int)>:
c000e14c:	55                   	push   ebp
c000e14d:	57                   	push   edi
c000e14e:	56                   	push   esi
c000e14f:	53                   	push   ebx
c000e150:	83 ec 1c             	sub    esp,0x1c
c000e153:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e157:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e15b:	85 c0                	test   eax,eax
c000e15d:	79 02                	jns    c000e161 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000e15f:	31 c0                	xor    eax,eax
c000e161:	c1 e0 02             	shl    eax,0x2
c000e164:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000e168:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e16c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e170:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000e174:	39 d8                	cmp    eax,ebx
c000e176:	7e 49                	jle    c000e1c1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e178:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e17e:	7c 41                	jl     c000e1c1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e180:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e184:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e188:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e18c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000e190:	39 f9                	cmp    ecx,edi
c000e192:	7e 22                	jle    c000e1b6 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000e194:	83 c5 04             	add    ebp,0x4
c000e197:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e19d:	7c 14                	jl     c000e1b3 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000e19f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e1a1:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000e1a4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e1a8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e1ac:	56                   	push   esi
c000e1ad:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e1b0:	83 c4 10             	add    esp,0x10
c000e1b3:	47                   	inc    edi
c000e1b4:	eb d2                	jmp    c000e188 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000e1b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1ba:	43                   	inc    ebx
c000e1bb:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e1bf:	eb ab                	jmp    c000e16c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000e1c1:	83 c4 1c             	add    esp,0x1c
c000e1c4:	5b                   	pop    ebx
c000e1c5:	5e                   	pop    esi
c000e1c6:	5f                   	pop    edi
c000e1c7:	5d                   	pop    ebp
c000e1c8:	c3                   	ret    
c000e1c9:	90                   	nop

c000e1ca <Video::clearScreen(unsigned int)>:
c000e1ca:	57                   	push   edi
c000e1cb:	56                   	push   esi
c000e1cc:	53                   	push   ebx
c000e1cd:	31 db                	xor    ebx,ebx
c000e1cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e1d3:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e1d9:	7e 1f                	jle    c000e1fa <Video::clearScreen(unsigned int)+0x30>
c000e1db:	31 ff                	xor    edi,edi
c000e1dd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e1e3:	7e 12                	jle    c000e1f7 <Video::clearScreen(unsigned int)+0x2d>
c000e1e5:	8b 06                	mov    eax,DWORD PTR [esi]
c000e1e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e1eb:	53                   	push   ebx
c000e1ec:	57                   	push   edi
c000e1ed:	47                   	inc    edi
c000e1ee:	56                   	push   esi
c000e1ef:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e1f2:	83 c4 10             	add    esp,0x10
c000e1f5:	eb e6                	jmp    c000e1dd <Video::clearScreen(unsigned int)+0x13>
c000e1f7:	43                   	inc    ebx
c000e1f8:	eb d9                	jmp    c000e1d3 <Video::clearScreen(unsigned int)+0x9>
c000e1fa:	5b                   	pop    ebx
c000e1fb:	5e                   	pop    esi
c000e1fc:	5f                   	pop    edi
c000e1fd:	c3                   	ret    

c000e1fe <Video::putpixel(int, int, unsigned int)>:
c000e1fe:	c7 44 24 04 e8 0e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020ee8
c000e206:	e9 d0 29 00 00       	jmp    c0010bdb <KePanic(char const*)>
c000e20b:	90                   	nop

c000e20c <Video::readPixelApprox(int, int)>:
c000e20c:	83 ec 18             	sub    esp,0x18
c000e20f:	68 09 0f 02 c0       	push   0xc0020f09
c000e214:	e8 c2 29 00 00       	call   c0010bdb <KePanic(char const*)>
c000e219:	31 c0                	xor    eax,eax
c000e21b:	83 c4 1c             	add    esp,0x1c
c000e21e:	c3                   	ret    
c000e21f:	90                   	nop

c000e220 <Video::Video(char const*)>:
c000e220:	83 ec 0c             	sub    esp,0xc
c000e223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e227:	83 ec 08             	sub    esp,0x8
c000e22a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e22e:	50                   	push   eax
c000e22f:	e8 e6 df ff ff       	call   c000c21a <Device::Device(char const*)>
c000e234:	83 c4 10             	add    esp,0x10
c000e237:	ba 84 0f 02 c0       	mov    edx,0xc0020f84
c000e23c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e240:	89 10                	mov    DWORD PTR [eax],edx
c000e242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e246:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e250:	90                   	nop
c000e251:	83 c4 0c             	add    esp,0xc
c000e254:	c3                   	ret    
c000e255:	90                   	nop

c000e256 <Video::~Video()>:
c000e256:	83 ec 0c             	sub    esp,0xc
c000e259:	ba 84 0f 02 c0       	mov    edx,0xc0020f84
c000e25e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e262:	89 10                	mov    DWORD PTR [eax],edx
c000e264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e268:	83 ec 0c             	sub    esp,0xc
c000e26b:	50                   	push   eax
c000e26c:	e8 13 dd ff ff       	call   c000bf84 <Device::~Device()>
c000e271:	83 c4 10             	add    esp,0x10
c000e274:	90                   	nop
c000e275:	83 c4 0c             	add    esp,0xc
c000e278:	c3                   	ret    
c000e279:	90                   	nop

c000e27a <Video::~Video()>:
c000e27a:	83 ec 0c             	sub    esp,0xc
c000e27d:	83 ec 0c             	sub    esp,0xc
c000e280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e284:	e8 cd ff ff ff       	call   c000e256 <Video::~Video()>
c000e289:	83 c4 10             	add    esp,0x10
c000e28c:	83 ec 08             	sub    esp,0x8
c000e28f:	68 64 01 00 00       	push   0x164
c000e294:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e298:	e8 ad c5 ff ff       	call   c000a84a <operator delete(void*, unsigned long)>
c000e29d:	83 c4 10             	add    esp,0x10
c000e2a0:	83 c4 0c             	add    esp,0xc
c000e2a3:	c3                   	ret    

c000e2a4 <Video::isMonochrome()>:
c000e2a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2a8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e2ae:	c3                   	ret    
c000e2af:	90                   	nop

c000e2b0 <Video::getWidth()>:
c000e2b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2b4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e2ba:	c3                   	ret    
c000e2bb:	90                   	nop

c000e2bc <Video::getHeight()>:
c000e2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2c0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e2c6:	c3                   	ret    
c000e2c7:	90                   	nop

c000e2c8 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e2c8:	55                   	push   ebp
c000e2c9:	57                   	push   edi
c000e2ca:	56                   	push   esi
c000e2cb:	53                   	push   ebx
c000e2cc:	83 ec 2c             	sub    esp,0x2c
c000e2cf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e2d3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e2d7:	83 f8 01             	cmp    eax,0x1
c000e2da:	19 c9                	sbb    ecx,ecx
c000e2dc:	31 db                	xor    ebx,ebx
c000e2de:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e2e2:	89 cd                	mov    ebp,ecx
c000e2e4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e2ec:	f7 d5                	not    ebp
c000e2ee:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e2f4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e2f8:	01 d8                	add    eax,ebx
c000e2fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e2fe:	56                   	push   esi
c000e2ff:	e8 b8 ff ff ff       	call   c000e2bc <Video::getHeight()>
c000e304:	59                   	pop    ecx
c000e305:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e309:	7e 70                	jle    c000e37b <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e30b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e30f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e313:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e316:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e31a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e31e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e325:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e329:	89 f8                	mov    eax,edi
c000e32b:	83 c0 20             	add    eax,0x20
c000e32e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e332:	56                   	push   esi
c000e333:	e8 78 ff ff ff       	call   c000e2b0 <Video::getWidth()>
c000e338:	5a                   	pop    edx
c000e339:	39 c7                	cmp    edi,eax
c000e33b:	7d 34                	jge    c000e371 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e33d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e342:	74 05                	je     c000e349 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e344:	8b 06                	mov    eax,DWORD PTR [esi]
c000e346:	55                   	push   ebp
c000e347:	eb 0d                	jmp    c000e356 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e349:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e34e:	74 12                	je     c000e362 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e350:	8b 06                	mov    eax,DWORD PTR [esi]
c000e352:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e356:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e35a:	57                   	push   edi
c000e35b:	56                   	push   esi
c000e35c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e35f:	83 c4 10             	add    esp,0x10
c000e362:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e366:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e36a:	47                   	inc    edi
c000e36b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e36f:	75 c1                	jne    c000e332 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e371:	43                   	inc    ebx
c000e372:	83 fb 20             	cmp    ebx,0x20
c000e375:	0f 85 79 ff ff ff    	jne    c000e2f4 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e37b:	83 c4 2c             	add    esp,0x2c
c000e37e:	5b                   	pop    ebx
c000e37f:	5e                   	pop    esi
c000e380:	5f                   	pop    edi
c000e381:	5d                   	pop    ebp
c000e382:	c3                   	ret    
c000e383:	90                   	nop

c000e384 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e384:	55                   	push   ebp
c000e385:	57                   	push   edi
c000e386:	56                   	push   esi
c000e387:	53                   	push   ebx
c000e388:	83 ec 28             	sub    esp,0x28
c000e38b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e38f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e393:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e397:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e39b:	c1 e6 08             	shl    esi,0x8
c000e39e:	01 c6                	add    esi,eax
c000e3a0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e3a4:	c1 e0 08             	shl    eax,0x8
c000e3a7:	01 d0                	add    eax,edx
c000e3a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e3ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3b1:	0f af c6             	imul   eax,esi
c000e3b4:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e3bb:	50                   	push   eax
c000e3bc:	e8 ed 96 ff ff       	call   c0007aae <malloc>
c000e3c1:	83 c4 10             	add    esp,0x10
c000e3c4:	89 c7                	mov    edi,eax
c000e3c6:	85 c0                	test   eax,eax
c000e3c8:	75 10                	jne    c000e3da <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e3ca:	83 ec 0c             	sub    esp,0xc
c000e3cd:	68 34 0f 02 c0       	push   0xc0020f34
c000e3d2:	e8 04 28 00 00       	call   c0010bdb <KePanic(char const*)>
c000e3d7:	83 c4 10             	add    esp,0x10
c000e3da:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e3de:	ba 12 00 00 00       	mov    edx,0x12
c000e3e3:	85 c0                	test   eax,eax
c000e3e5:	74 11                	je     c000e3f8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e3e7:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e3eb:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e3ef:	c1 fa 03             	sar    edx,0x3
c000e3f2:	0f af d1             	imul   edx,ecx
c000e3f5:	83 c2 12             	add    edx,0x12
c000e3f8:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e3fc:	74 04                	je     c000e402 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e3fe:	85 f6                	test   esi,esi
c000e400:	75 12                	jne    c000e414 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e402:	83 ec 0c             	sub    esp,0xc
c000e405:	68 44 0f 02 c0       	push   0xc0020f44
c000e40a:	e8 68 c5 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000e40f:	e9 b8 00 00 00       	jmp    c000e4cc <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e414:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e418:	83 f9 02             	cmp    ecx,0x2
c000e41b:	0f 85 96 00 00 00    	jne    c000e4b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e421:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e426:	75 0e                	jne    c000e436 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e428:	85 c0                	test   eax,eax
c000e42a:	75 0a                	jne    c000e436 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e42c:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e42f:	83 e8 18             	sub    eax,0x18
c000e432:	a8 f7                	test   al,0xf7
c000e434:	74 0a                	je     c000e440 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e436:	83 ec 0c             	sub    esp,0xc
c000e439:	68 59 0f 02 c0       	push   0xc0020f59
c000e43e:	eb 7f                	jmp    c000e4bf <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e440:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e448:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e450:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e454:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e45c:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e460:	75 0c                	jne    c000e46e <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e462:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e467:	c1 e0 18             	shl    eax,0x18
c000e46a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e46e:	45                   	inc    ebp
c000e46f:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e474:	c1 e1 10             	shl    ecx,0x10
c000e477:	89 c8                	mov    eax,ecx
c000e479:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e47e:	c1 e1 08             	shl    ecx,0x8
c000e481:	09 c1                	or     ecx,eax
c000e483:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e487:	09 c1                	or     ecx,eax
c000e489:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e48d:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e491:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e495:	c1 f8 03             	sar    eax,0x3
c000e498:	01 c2                	add    edx,eax
c000e49a:	89 e8                	mov    eax,ebp
c000e49c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e4a0:	39 c6                	cmp    esi,eax
c000e4a2:	7f b0                	jg     c000e454 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000e4a4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e4a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e4ac:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e4af:	7e 22                	jle    c000e4d3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e4b1:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e4b5:	eb 99                	jmp    c000e450 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000e4b7:	50                   	push   eax
c000e4b8:	50                   	push   eax
c000e4b9:	51                   	push   ecx
c000e4ba:	68 67 0f 02 c0       	push   0xc0020f67
c000e4bf:	e8 b3 c4 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c000e4c4:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e4c7:	e8 f2 95 ff ff       	call   c0007abe <free>
c000e4cc:	83 c4 10             	add    esp,0x10
c000e4cf:	31 ff                	xor    edi,edi
c000e4d1:	eb 0f                	jmp    c000e4e2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000e4d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e4d7:	89 30                	mov    DWORD PTR [eax],esi
c000e4d9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e4dd:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e4e0:	89 30                	mov    DWORD PTR [eax],esi
c000e4e2:	83 c4 1c             	add    esp,0x1c
c000e4e5:	89 f8                	mov    eax,edi
c000e4e7:	5b                   	pop    ebx
c000e4e8:	5e                   	pop    esi
c000e4e9:	5f                   	pop    edi
c000e4ea:	5d                   	pop    ebp
c000e4eb:	c3                   	ret    

c000e4ec <Video::putTGA(int, int, unsigned char*, int)>:
c000e4ec:	55                   	push   ebp
c000e4ed:	57                   	push   edi
c000e4ee:	56                   	push   esi
c000e4ef:	53                   	push   ebx
c000e4f0:	83 ec 28             	sub    esp,0x28
c000e4f3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e4f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e4fb:	50                   	push   eax
c000e4fc:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e500:	50                   	push   eax
c000e501:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e505:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e509:	56                   	push   esi
c000e50a:	e8 75 fe ff ff       	call   c000e384 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e50f:	83 c4 20             	add    esp,0x20
c000e512:	85 c0                	test   eax,eax
c000e514:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e518:	74 35                	je     c000e54f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e51a:	89 c7                	mov    edi,eax
c000e51c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e520:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e524:	39 d8                	cmp    eax,ebx
c000e526:	7e 27                	jle    c000e54f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e528:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e52c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e530:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e534:	39 e8                	cmp    eax,ebp
c000e536:	7e 14                	jle    c000e54c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e538:	8b 06                	mov    eax,DWORD PTR [esi]
c000e53a:	83 c7 04             	add    edi,0x4
c000e53d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e540:	53                   	push   ebx
c000e541:	55                   	push   ebp
c000e542:	45                   	inc    ebp
c000e543:	56                   	push   esi
c000e544:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e547:	83 c4 10             	add    esp,0x10
c000e54a:	eb e0                	jmp    c000e52c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e54c:	43                   	inc    ebx
c000e54d:	eb cd                	jmp    c000e51c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e54f:	83 c4 1c             	add    esp,0x1c
c000e552:	5b                   	pop    ebx
c000e553:	5e                   	pop    esi
c000e554:	5f                   	pop    edi
c000e555:	5d                   	pop    ebp
c000e556:	c3                   	ret    
c000e557:	90                   	nop

c000e558 <ACPI::close(int, int, void*)>:
c000e558:	83 ec 1c             	sub    esp,0x1c
c000e55b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e563:	74 0b                	je     c000e570 <ACPI::close(int, int, void*)+0x18>
c000e565:	b8 00 00 00 00       	mov    eax,0x0
c000e56a:	e9 99 00 00 00       	jmp    c000e608 <ACPI::close(int, int, void*)+0xb0>
c000e56f:	90                   	nop
c000e570:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e575:	75 29                	jne    c000e5a0 <ACPI::close(int, int, void*)+0x48>
c000e577:	a1 a8 84 02 c0       	mov    eax,ds:0xc00284a8
c000e57c:	85 c0                	test   eax,eax
c000e57e:	74 08                	je     c000e588 <ACPI::close(int, int, void*)+0x30>
c000e580:	a1 a8 84 02 c0       	mov    eax,ds:0xc00284a8
c000e585:	ff d0                	call   eax
c000e587:	90                   	nop
c000e588:	83 ec 0c             	sub    esp,0xc
c000e58b:	68 c8 0f 02 c0       	push   0xc0020fc8
c000e590:	e8 46 26 00 00       	call   c0010bdb <KePanic(char const*)>
c000e595:	83 c4 10             	add    esp,0x10
c000e598:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e59d:	eb 69                	jmp    c000e608 <ACPI::close(int, int, void*)+0xb0>
c000e59f:	90                   	nop
c000e5a0:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e5a5:	75 59                	jne    c000e600 <ACPI::close(int, int, void*)+0xa8>
c000e5a7:	a1 a4 84 02 c0       	mov    eax,ds:0xc00284a4
c000e5ac:	85 c0                	test   eax,eax
c000e5ae:	74 08                	je     c000e5b8 <ACPI::close(int, int, void*)+0x60>
c000e5b0:	a1 a4 84 02 c0       	mov    eax,ds:0xc00284a4
c000e5b5:	ff d0                	call   eax
c000e5b7:	90                   	nop
c000e5b8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e5bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e5c0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e5c5:	83 e0 02             	and    eax,0x2
c000e5c8:	74 1e                	je     c000e5e8 <ACPI::close(int, int, void*)+0x90>
c000e5ca:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e5d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5d5:	89 c2                	mov    edx,eax
c000e5d7:	ec                   	in     al,dx
c000e5d8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e5dc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e5e0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e5e4:	eb da                	jmp    c000e5c0 <ACPI::close(int, int, void*)+0x68>
c000e5e6:	66 90                	xchg   ax,ax
c000e5e8:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e5ef:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e5f4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e5f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5fc:	ee                   	out    dx,al
c000e5fd:	8d 76 00             	lea    esi,[esi+0x0]
c000e600:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e605:	8d 76 00             	lea    esi,[esi+0x0]
c000e608:	83 c4 1c             	add    esp,0x1c
c000e60b:	c3                   	ret    

c000e60c <findRSDP()>:
c000e60c:	83 ec 1c             	sub    esp,0x1c
c000e60f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000e614:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e61a:	83 e0 04             	and    eax,0x4
c000e61d:	0f b6 c0             	movzx  eax,al
c000e620:	85 c0                	test   eax,eax
c000e622:	75 08                	jne    c000e62c <findRSDP()+0x20>
c000e624:	b8 00 00 00 00       	mov    eax,0x0
c000e629:	eb 75                	jmp    c000e6a0 <findRSDP()+0x94>
c000e62b:	90                   	nop
c000e62c:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000e631:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e636:	7f 1c                	jg     c000e654 <findRSDP()+0x48>
c000e638:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000e63d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e643:	83 e2 fb             	and    edx,0xfffffffb
c000e646:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e64c:	b8 00 00 00 00       	mov    eax,0x0
c000e651:	eb 4d                	jmp    c000e6a0 <findRSDP()+0x94>
c000e653:	90                   	nop
c000e654:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e65c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e664:	77 32                	ja     c000e698 <findRSDP()+0x8c>
c000e666:	83 ec 04             	sub    esp,0x4
c000e669:	6a 08                	push   0x8
c000e66b:	68 63 10 02 c0       	push   0xc0021063
c000e670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e674:	e8 07 1d ff ff       	call   c0000380 <memcmp>
c000e679:	83 c4 10             	add    esp,0x10
c000e67c:	85 c0                	test   eax,eax
c000e67e:	0f 94 c0             	sete   al
c000e681:	0f b6 c0             	movzx  eax,al
c000e684:	85 c0                	test   eax,eax
c000e686:	74 08                	je     c000e690 <findRSDP()+0x84>
c000e688:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e68c:	eb 12                	jmp    c000e6a0 <findRSDP()+0x94>
c000e68e:	66 90                	xchg   ax,ax
c000e690:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e695:	eb c5                	jmp    c000e65c <findRSDP()+0x50>
c000e697:	90                   	nop
c000e698:	b8 00 00 00 00       	mov    eax,0x0
c000e69d:	8d 76 00             	lea    esi,[esi+0x0]
c000e6a0:	83 c4 1c             	add    esp,0x1c
c000e6a3:	c3                   	ret    

c000e6a4 <loadACPITables(unsigned char*)>:
c000e6a4:	57                   	push   edi
c000e6a5:	56                   	push   esi
c000e6a6:	53                   	push   ebx
c000e6a7:	83 ec 60             	sub    esp,0x60
c000e6aa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000e6af:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e6b5:	83 e0 04             	and    eax,0x4
c000e6b8:	0f b6 c0             	movzx  eax,al
c000e6bb:	85 c0                	test   eax,eax
c000e6bd:	0f 84 41 02 00 00    	je     c000e904 <loadACPITables(unsigned char*)+0x260>
c000e6c3:	a0 c0 86 02 c0       	mov    al,ds:0xc00286c0
c000e6c8:	0f b6 c0             	movzx  eax,al
c000e6cb:	85 c0                	test   eax,eax
c000e6cd:	74 79                	je     c000e748 <loadACPITables(unsigned char*)+0xa4>
c000e6cf:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e6d3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e6d7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e6db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e6de:	83 e8 24             	sub    eax,0x24
c000e6e1:	c1 e8 03             	shr    eax,0x3
c000e6e4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e6e8:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e6f0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e6f4:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e6f8:	0f 8d ba 00 00 00    	jge    c000e7b8 <loadACPITables(unsigned char*)+0x114>
c000e6fe:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e702:	83 c0 24             	add    eax,0x24
c000e705:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e709:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e70d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e711:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e715:	c1 e0 03             	shl    eax,0x3
c000e718:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e71c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e720:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e723:	8b 00                	mov    eax,DWORD PTR [eax]
c000e725:	89 c1                	mov    ecx,eax
c000e727:	a1 ac 84 02 c0       	mov    eax,ds:0xc00284ac
c000e72c:	8d 50 01             	lea    edx,[eax+0x1]
c000e72f:	89 15 ac 84 02 c0    	mov    DWORD PTR ds:0xc00284ac,edx
c000e735:	89 ca                	mov    edx,ecx
c000e737:	89 14 c5 c4 84 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7b3c],edx
c000e73e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000e743:	eb ab                	jmp    c000e6f0 <loadACPITables(unsigned char*)+0x4c>
c000e745:	8d 76 00             	lea    esi,[esi+0x0]
c000e748:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e74c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e750:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e754:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e757:	83 e8 24             	sub    eax,0x24
c000e75a:	c1 e8 02             	shr    eax,0x2
c000e75d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e761:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e769:	8d 76 00             	lea    esi,[esi+0x0]
c000e76c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e770:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e774:	7d 42                	jge    c000e7b8 <loadACPITables(unsigned char*)+0x114>
c000e776:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e77a:	83 c0 24             	add    eax,0x24
c000e77d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e781:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e785:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e789:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e78d:	c1 e0 02             	shl    eax,0x2
c000e790:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e794:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e798:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e79a:	a1 ac 84 02 c0       	mov    eax,ds:0xc00284ac
c000e79f:	8d 50 01             	lea    edx,[eax+0x1]
c000e7a2:	89 15 ac 84 02 c0    	mov    DWORD PTR ds:0xc00284ac,edx
c000e7a8:	89 ca                	mov    edx,ecx
c000e7aa:	89 14 c5 c4 84 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7b3c],edx
c000e7b1:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000e7b6:	eb b4                	jmp    c000e76c <loadACPITables(unsigned char*)+0xc8>
c000e7b8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e7c0:	a1 ac 84 02 c0       	mov    eax,ds:0xc00284ac
c000e7c5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e7c9:	0f 8d 39 01 00 00    	jge    c000e908 <loadACPITables(unsigned char*)+0x264>
c000e7cf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e7d3:	8b 04 c5 c4 84 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7b3c]
c000e7da:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e7de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7e2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e7e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7ea:	25 ff 0f 00 00       	and    eax,0xfff
c000e7ef:	89 c6                	mov    esi,eax
c000e7f1:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000e7f7:	83 ec 0c             	sub    esp,0xc
c000e7fa:	6a 01                	push   0x1
c000e7fc:	e8 00 ae ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000e801:	83 c4 10             	add    esp,0x10
c000e804:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e808:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e80e:	83 ec 0c             	sub    esp,0xc
c000e811:	6a 01                	push   0x1
c000e813:	6a 01                	push   0x1
c000e815:	50                   	push   eax
c000e816:	52                   	push   edx
c000e817:	53                   	push   ebx
c000e818:	e8 0d b7 ff ff       	call   c0009f2a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e81d:	83 c4 20             	add    esp,0x20
c000e820:	09 f0                	or     eax,esi
c000e822:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e826:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e82a:	c1 e0 03             	shl    eax,0x3
c000e82d:	05 c0 84 02 c0       	add    eax,0xc00284c0
c000e832:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e836:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e83a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e83e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e846:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e84a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e84e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e852:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e856:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e85a:	89 c6                	mov    esi,eax
c000e85c:	89 d7                	mov    edi,edx
c000e85e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e860:	89 c8                	mov    eax,ecx
c000e862:	89 fa                	mov    edx,edi
c000e864:	89 f3                	mov    ebx,esi
c000e866:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e86a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e86e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e872:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e876:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e879:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e87d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e881:	05 00 10 00 00       	add    eax,0x1000
c000e886:	c1 e8 0c             	shr    eax,0xc
c000e889:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e88d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e891:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e895:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e899:	25 ff 0f 00 00       	and    eax,0xfff
c000e89e:	89 c6                	mov    esi,eax
c000e8a0:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000e8a6:	83 ec 0c             	sub    esp,0xc
c000e8a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e8ad:	e8 4f ad ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000e8b2:	83 c4 10             	add    esp,0x10
c000e8b5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e8b9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e8bf:	83 ec 0c             	sub    esp,0xc
c000e8c2:	6a 01                	push   0x1
c000e8c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e8c8:	50                   	push   eax
c000e8c9:	52                   	push   edx
c000e8ca:	53                   	push   ebx
c000e8cb:	e8 5a b6 ff ff       	call   c0009f2a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e8d0:	83 c4 20             	add    esp,0x20
c000e8d3:	09 f0                	or     eax,esi
c000e8d5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e8d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8dd:	83 ec 0c             	sub    esp,0xc
c000e8e0:	50                   	push   eax
c000e8e1:	e8 37 b0 ff ff       	call   c000991d <Virt::freeKernelVirtualPages(unsigned long)>
c000e8e6:	83 c4 10             	add    esp,0x10
c000e8e9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e8ed:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e8f1:	89 14 c5 c4 84 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7b3c],edx
c000e8f8:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000e8fd:	e9 be fe ff ff       	jmp    c000e7c0 <loadACPITables(unsigned char*)+0x11c>
c000e902:	66 90                	xchg   ax,ax
c000e904:	90                   	nop
c000e905:	8d 76 00             	lea    esi,[esi+0x0]
c000e908:	83 c4 60             	add    esp,0x60
c000e90b:	5b                   	pop    ebx
c000e90c:	5e                   	pop    esi
c000e90d:	5f                   	pop    edi
c000e90e:	c3                   	ret    
c000e90f:	90                   	nop

c000e910 <findRSDT(unsigned char*)>:
c000e910:	57                   	push   edi
c000e911:	56                   	push   esi
c000e912:	53                   	push   ebx
c000e913:	83 ec 50             	sub    esp,0x50
c000e916:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000e91b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e921:	83 e0 04             	and    eax,0x4
c000e924:	0f b6 c0             	movzx  eax,al
c000e927:	85 c0                	test   eax,eax
c000e929:	75 0d                	jne    c000e938 <findRSDT(unsigned char*)+0x28>
c000e92b:	b8 00 00 00 00       	mov    eax,0x0
c000e930:	e9 2b 01 00 00       	jmp    c000ea60 <findRSDT(unsigned char*)+0x150>
c000e935:	8d 76 00             	lea    esi,[esi+0x0]
c000e938:	89 e0                	mov    eax,esp
c000e93a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e93e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e942:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e946:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e94e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e952:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e956:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e95a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e95e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e962:	89 c6                	mov    esi,eax
c000e964:	89 d7                	mov    edi,edx
c000e966:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e968:	89 c8                	mov    eax,ecx
c000e96a:	89 fa                	mov    edx,edi
c000e96c:	89 f3                	mov    ebx,esi
c000e96e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e972:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e976:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e97a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e97e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e982:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e98a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e98e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e992:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e99a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e99e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e9a2:	25 ff 0f 00 00       	and    eax,0xfff
c000e9a7:	89 c6                	mov    esi,eax
c000e9a9:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000e9af:	83 ec 0c             	sub    esp,0xc
c000e9b2:	6a 02                	push   0x2
c000e9b4:	e8 48 ac ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000e9b9:	83 c4 10             	add    esp,0x10
c000e9bc:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e9c0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e9c6:	83 ec 0c             	sub    esp,0xc
c000e9c9:	6a 01                	push   0x1
c000e9cb:	6a 02                	push   0x2
c000e9cd:	50                   	push   eax
c000e9ce:	52                   	push   edx
c000e9cf:	53                   	push   ebx
c000e9d0:	e8 55 b5 ff ff       	call   c0009f2a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e9d5:	83 c4 20             	add    esp,0x20
c000e9d8:	09 f0                	or     eax,esi
c000e9da:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e9de:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e9e2:	25 ff 0f 00 00       	and    eax,0xfff
c000e9e7:	89 c6                	mov    esi,eax
c000e9e9:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000e9ef:	83 ec 0c             	sub    esp,0xc
c000e9f2:	6a 02                	push   0x2
c000e9f4:	e8 08 ac ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c000e9f9:	83 c4 10             	add    esp,0x10
c000e9fc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ea00:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ea06:	83 ec 0c             	sub    esp,0xc
c000ea09:	6a 01                	push   0x1
c000ea0b:	6a 02                	push   0x2
c000ea0d:	50                   	push   eax
c000ea0e:	52                   	push   edx
c000ea0f:	53                   	push   ebx
c000ea10:	e8 15 b5 ff ff       	call   c0009f2a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ea15:	83 c4 20             	add    esp,0x20
c000ea18:	09 f0                	or     eax,esi
c000ea1a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ea1e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000ea23:	85 c0                	test   eax,eax
c000ea25:	75 11                	jne    c000ea38 <findRSDT(unsigned char*)+0x128>
c000ea27:	c6 05 c0 86 02 c0 00 	mov    BYTE PTR ds:0xc00286c0,0x0
c000ea2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea32:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ea36:	eb 24                	jmp    c000ea5c <findRSDT(unsigned char*)+0x14c>
c000ea38:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000ea3d:	83 f8 02             	cmp    eax,0x2
c000ea40:	75 12                	jne    c000ea54 <findRSDT(unsigned char*)+0x144>
c000ea42:	c6 05 c0 86 02 c0 01 	mov    BYTE PTR ds:0xc00286c0,0x1
c000ea49:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ea4d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ea51:	eb 09                	jmp    c000ea5c <findRSDT(unsigned char*)+0x14c>
c000ea53:	90                   	nop
c000ea54:	b8 00 00 00 00       	mov    eax,0x0
c000ea59:	eb 05                	jmp    c000ea60 <findRSDT(unsigned char*)+0x150>
c000ea5b:	90                   	nop
c000ea5c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ea60:	83 c4 50             	add    esp,0x50
c000ea63:	5b                   	pop    ebx
c000ea64:	5e                   	pop    esi
c000ea65:	5f                   	pop    edi
c000ea66:	c3                   	ret    
c000ea67:	90                   	nop

c000ea68 <findDataTable(unsigned char*, char*)>:
c000ea68:	83 ec 1c             	sub    esp,0x1c
c000ea6b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ea70:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ea76:	83 e0 04             	and    eax,0x4
c000ea79:	0f b6 c0             	movzx  eax,al
c000ea7c:	85 c0                	test   eax,eax
c000ea7e:	75 08                	jne    c000ea88 <findDataTable(unsigned char*, char*)+0x20>
c000ea80:	b8 00 00 00 00       	mov    eax,0x0
c000ea85:	eb 5d                	jmp    c000eae4 <findDataTable(unsigned char*, char*)+0x7c>
c000ea87:	90                   	nop
c000ea88:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ea90:	a1 ac 84 02 c0       	mov    eax,ds:0xc00284ac
c000ea95:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000ea99:	7d 41                	jge    c000eadc <findDataTable(unsigned char*, char*)+0x74>
c000ea9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea9f:	c1 e0 03             	shl    eax,0x3
c000eaa2:	05 c0 84 02 c0       	add    eax,0xc00284c0
c000eaa7:	83 ec 04             	sub    esp,0x4
c000eaaa:	6a 04                	push   0x4
c000eaac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eab0:	50                   	push   eax
c000eab1:	e8 ca 18 ff ff       	call   c0000380 <memcmp>
c000eab6:	83 c4 10             	add    esp,0x10
c000eab9:	85 c0                	test   eax,eax
c000eabb:	0f 94 c0             	sete   al
c000eabe:	0f b6 c0             	movzx  eax,al
c000eac1:	85 c0                	test   eax,eax
c000eac3:	74 0f                	je     c000ead4 <findDataTable(unsigned char*, char*)+0x6c>
c000eac5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eac9:	8b 04 c5 c4 84 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7b3c]
c000ead0:	eb 12                	jmp    c000eae4 <findDataTable(unsigned char*, char*)+0x7c>
c000ead2:	66 90                	xchg   ax,ax
c000ead4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000ead9:	eb b5                	jmp    c000ea90 <findDataTable(unsigned char*, char*)+0x28>
c000eadb:	90                   	nop
c000eadc:	b8 00 00 00 00       	mov    eax,0x0
c000eae1:	8d 76 00             	lea    esi,[esi+0x0]
c000eae4:	83 c4 1c             	add    esp,0x1c
c000eae7:	c3                   	ret    

c000eae8 <scanMADT()>:
c000eae8:	53                   	push   ebx
c000eae9:	83 ec 38             	sub    esp,0x38
c000eaec:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000eaf1:	25 00 04 00 00       	and    eax,0x400
c000eaf6:	74 14                	je     c000eb0c <scanMADT()+0x24>
c000eaf8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eafd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eb03:	83 e2 fb             	and    edx,0xfffffffb
c000eb06:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eb0c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eb11:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eb17:	83 e0 04             	and    eax,0x4
c000eb1a:	0f b6 c0             	movzx  eax,al
c000eb1d:	85 c0                	test   eax,eax
c000eb1f:	0f 84 6b 04 00 00    	je     c000ef90 <scanMADT()+0x4a8>
c000eb25:	e8 e2 fa ff ff       	call   c000e60c <findRSDP()>
c000eb2a:	a3 cc 86 02 c0       	mov    ds:0xc00286cc,eax
c000eb2f:	a1 cc 86 02 c0       	mov    eax,ds:0xc00286cc
c000eb34:	85 c0                	test   eax,eax
c000eb36:	75 1c                	jne    c000eb54 <scanMADT()+0x6c>
c000eb38:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eb3d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eb43:	83 e2 fb             	and    edx,0xfffffffb
c000eb46:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eb4c:	e9 47 04 00 00       	jmp    c000ef98 <scanMADT()+0x4b0>
c000eb51:	8d 76 00             	lea    esi,[esi+0x0]
c000eb54:	a1 cc 86 02 c0       	mov    eax,ds:0xc00286cc
c000eb59:	83 ec 0c             	sub    esp,0xc
c000eb5c:	50                   	push   eax
c000eb5d:	e8 ae fd ff ff       	call   c000e910 <findRSDT(unsigned char*)>
c000eb62:	83 c4 10             	add    esp,0x10
c000eb65:	a3 c8 86 02 c0       	mov    ds:0xc00286c8,eax
c000eb6a:	a1 c8 86 02 c0       	mov    eax,ds:0xc00286c8
c000eb6f:	85 c0                	test   eax,eax
c000eb71:	75 19                	jne    c000eb8c <scanMADT()+0xa4>
c000eb73:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eb78:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eb7e:	83 e2 fb             	and    edx,0xfffffffb
c000eb81:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eb87:	e9 0c 04 00 00       	jmp    c000ef98 <scanMADT()+0x4b0>
c000eb8c:	a1 c8 86 02 c0       	mov    eax,ds:0xc00286c8
c000eb91:	83 ec 0c             	sub    esp,0xc
c000eb94:	50                   	push   eax
c000eb95:	e8 0a fb ff ff       	call   c000e6a4 <loadACPITables(unsigned char*)>
c000eb9a:	83 c4 10             	add    esp,0x10
c000eb9d:	a1 c8 86 02 c0       	mov    eax,ds:0xc00286c8
c000eba2:	83 ec 08             	sub    esp,0x8
c000eba5:	68 6c 10 02 c0       	push   0xc002106c
c000ebaa:	50                   	push   eax
c000ebab:	e8 b8 fe ff ff       	call   c000ea68 <findDataTable(unsigned char*, char*)>
c000ebb0:	83 c4 10             	add    esp,0x10
c000ebb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ebb7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ebbc:	75 1a                	jne    c000ebd8 <scanMADT()+0xf0>
c000ebbe:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ebc3:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ebc9:	83 e2 fe             	and    edx,0xfffffffe
c000ebcc:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ebd2:	e9 c1 03 00 00       	jmp    c000ef98 <scanMADT()+0x4b0>
c000ebd7:	90                   	nop
c000ebd8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000ebe0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ebe7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000ebeb:	0f 87 a7 03 00 00    	ja     c000ef98 <scanMADT()+0x4b0>
c000ebf1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000ebf9:	0f 87 99 03 00 00    	ja     c000ef98 <scanMADT()+0x4b0>
c000ebff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec03:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ec07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec0b:	8d 50 01             	lea    edx,[eax+0x1]
c000ec0e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec12:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec16:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec1a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000ec1e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec22:	8d 50 01             	lea    edx,[eax+0x1]
c000ec25:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec29:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec2d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec31:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000ec35:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000ec3a:	83 f8 02             	cmp    eax,0x2
c000ec3d:	0f 86 51 03 00 00    	jbe    c000ef94 <scanMADT()+0x4ac>
c000ec43:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec48:	85 c0                	test   eax,eax
c000ec4a:	75 58                	jne    c000eca4 <scanMADT()+0x1bc>
c000ec4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec50:	8d 50 01             	lea    edx,[eax+0x1]
c000ec53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec57:	8a 15 c0 88 02 c0    	mov    dl,BYTE PTR ds:0xc00288c0
c000ec5d:	0f b6 d2             	movzx  edx,dl
c000ec60:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ec64:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ec68:	88 82 00 89 02 c0    	mov    BYTE PTR [edx-0x3ffd7700],al
c000ec6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec72:	8d 50 01             	lea    edx,[eax+0x1]
c000ec75:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec79:	8a 15 c0 88 02 c0    	mov    dl,BYTE PTR ds:0xc00288c0
c000ec7f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ec82:	88 0d c0 88 02 c0    	mov    BYTE PTR ds:0xc00288c0,cl
c000ec88:	0f b6 d2             	movzx  edx,dl
c000ec8b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ec8f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ec93:	88 82 e0 88 02 c0    	mov    BYTE PTR [edx-0x3ffd7720],al
c000ec99:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ec9e:	e9 d9 02 00 00       	jmp    c000ef7c <scanMADT()+0x494>
c000eca3:	90                   	nop
c000eca4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eca9:	83 f8 01             	cmp    eax,0x1
c000ecac:	0f 85 1a 01 00 00    	jne    c000edcc <scanMADT()+0x2e4>
c000ecb2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecb6:	8d 50 01             	lea    edx,[eax+0x1]
c000ecb9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ecbd:	8a 15 80 87 02 c0    	mov    dl,BYTE PTR ds:0xc0028780
c000ecc3:	0f b6 d2             	movzx  edx,dl
c000ecc6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ecca:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ecce:	88 82 a0 87 02 c0    	mov    BYTE PTR [edx-0x3ffd7860],al
c000ecd4:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ecd9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ecdd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ece1:	01 d0                	add    eax,edx
c000ece3:	83 c0 2c             	add    eax,0x2c
c000ece6:	8a 00                	mov    al,BYTE PTR [eax]
c000ece8:	0f b6 d0             	movzx  edx,al
c000eceb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ecef:	8d 48 01             	lea    ecx,[eax+0x1]
c000ecf2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ecf6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ecfa:	0f b6 c0             	movzx  eax,al
c000ecfd:	c1 e0 08             	shl    eax,0x8
c000ed00:	89 d1                	mov    ecx,edx
c000ed02:	09 c1                	or     ecx,eax
c000ed04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed08:	8d 50 02             	lea    edx,[eax+0x2]
c000ed0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed0f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ed13:	0f b6 c0             	movzx  eax,al
c000ed16:	c1 e0 10             	shl    eax,0x10
c000ed19:	09 c1                	or     ecx,eax
c000ed1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed1f:	8d 50 03             	lea    edx,[eax+0x3]
c000ed22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed26:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ed2a:	0f b6 c0             	movzx  eax,al
c000ed2d:	c1 e0 18             	shl    eax,0x18
c000ed30:	09 c1                	or     ecx,eax
c000ed32:	89 ca                	mov    edx,ecx
c000ed34:	a0 80 87 02 c0       	mov    al,ds:0xc0028780
c000ed39:	0f b6 c0             	movzx  eax,al
c000ed3c:	89 14 85 c0 87 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7840],edx
c000ed43:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ed48:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ed4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed50:	01 d0                	add    eax,edx
c000ed52:	83 c0 2c             	add    eax,0x2c
c000ed55:	8a 00                	mov    al,BYTE PTR [eax]
c000ed57:	0f b6 d0             	movzx  edx,al
c000ed5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed5e:	8d 48 01             	lea    ecx,[eax+0x1]
c000ed61:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed65:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ed69:	0f b6 c0             	movzx  eax,al
c000ed6c:	c1 e0 08             	shl    eax,0x8
c000ed6f:	89 d1                	mov    ecx,edx
c000ed71:	09 c1                	or     ecx,eax
c000ed73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed77:	8d 50 02             	lea    edx,[eax+0x2]
c000ed7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed7e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ed82:	0f b6 c0             	movzx  eax,al
c000ed85:	c1 e0 10             	shl    eax,0x10
c000ed88:	09 c1                	or     ecx,eax
c000ed8a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ed8e:	8d 50 03             	lea    edx,[eax+0x3]
c000ed91:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ed95:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ed99:	0f b6 c0             	movzx  eax,al
c000ed9c:	c1 e0 18             	shl    eax,0x18
c000ed9f:	09 c1                	or     ecx,eax
c000eda1:	89 ca                	mov    edx,ecx
c000eda3:	a0 80 87 02 c0       	mov    al,ds:0xc0028780
c000eda8:	0f b6 c0             	movzx  eax,al
c000edab:	89 14 85 40 88 02 c0 	mov    DWORD PTR [eax*4-0x3ffd77c0],edx
c000edb2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000edb7:	a0 80 87 02 c0       	mov    al,ds:0xc0028780
c000edbc:	83 c0 01             	add    eax,0x1
c000edbf:	a2 80 87 02 c0       	mov    ds:0xc0028780,al
c000edc4:	e9 b3 01 00 00       	jmp    c000ef7c <scanMADT()+0x494>
c000edc9:	8d 76 00             	lea    esi,[esi+0x0]
c000edcc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000edd1:	83 f8 02             	cmp    eax,0x2
c000edd4:	0f 85 ea 00 00 00    	jne    c000eec4 <scanMADT()+0x3dc>
c000edda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000edde:	8d 50 01             	lea    edx,[eax+0x1]
c000ede1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ede5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ede9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eded:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000edf1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000edf5:	8d 50 01             	lea    edx,[eax+0x1]
c000edf8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000edfc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee00:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ee04:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000ee08:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee10:	01 d0                	add    eax,edx
c000ee12:	83 c0 2c             	add    eax,0x2c
c000ee15:	8a 00                	mov    al,BYTE PTR [eax]
c000ee17:	0f b6 d0             	movzx  edx,al
c000ee1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee1e:	8d 48 01             	lea    ecx,[eax+0x1]
c000ee21:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee25:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ee29:	0f b6 c0             	movzx  eax,al
c000ee2c:	c1 e0 08             	shl    eax,0x8
c000ee2f:	89 d1                	mov    ecx,edx
c000ee31:	09 c1                	or     ecx,eax
c000ee33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee37:	8d 50 02             	lea    edx,[eax+0x2]
c000ee3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee3e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ee42:	0f b6 c0             	movzx  eax,al
c000ee45:	c1 e0 10             	shl    eax,0x10
c000ee48:	09 c1                	or     ecx,eax
c000ee4a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee4e:	8d 50 03             	lea    edx,[eax+0x3]
c000ee51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee55:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ee59:	0f b6 c0             	movzx  eax,al
c000ee5c:	c1 e0 18             	shl    eax,0x18
c000ee5f:	09 c8                	or     eax,ecx
c000ee61:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee65:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ee6a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ee72:	01 d0                	add    eax,edx
c000ee74:	83 c0 2c             	add    eax,0x2c
c000ee77:	8a 00                	mov    al,BYTE PTR [eax]
c000ee79:	0f b6 c0             	movzx  eax,al
c000ee7c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ee80:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ee83:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee87:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000ee8b:	0f b6 d2             	movzx  edx,dl
c000ee8e:	c1 e2 08             	shl    edx,0x8
c000ee91:	09 d0                	or     eax,edx
c000ee93:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ee98:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ee9d:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000eea2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eea6:	88 90 88 27 02 c0    	mov    BYTE PTR [eax-0x3ffdd878],dl
c000eeac:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000eeb1:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000eeb6:	66 89 84 12 60 87 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd78a0],ax
c000eebe:	e9 b9 00 00 00       	jmp    c000ef7c <scanMADT()+0x494>
c000eec3:	90                   	nop
c000eec4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eec9:	83 f8 04             	cmp    eax,0x4
c000eecc:	0f 85 9a 00 00 00    	jne    c000ef6c <scanMADT()+0x484>
c000eed2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eed6:	8d 50 01             	lea    edx,[eax+0x1]
c000eed9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eedd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eee1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eee5:	0f b6 c0             	movzx  eax,al
c000eee8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eeec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eef0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eef4:	01 d0                	add    eax,edx
c000eef6:	83 c0 2c             	add    eax,0x2c
c000eef9:	8a 00                	mov    al,BYTE PTR [eax]
c000eefb:	0f b6 d0             	movzx  edx,al
c000eefe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ef02:	8d 48 01             	lea    ecx,[eax+0x1]
c000ef05:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ef09:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ef0d:	0f b6 c0             	movzx  eax,al
c000ef10:	c1 e0 08             	shl    eax,0x8
c000ef13:	09 d0                	or     eax,edx
c000ef15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ef19:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ef1e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ef22:	8d 50 01             	lea    edx,[eax+0x1]
c000ef25:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ef29:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ef2d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ef31:	0f b6 c0             	movzx  eax,al
c000ef34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ef38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef3c:	c1 e0 08             	shl    eax,0x8
c000ef3f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ef43:	89 c1                	mov    ecx,eax
c000ef45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef49:	c1 e0 18             	shl    eax,0x18
c000ef4c:	89 c3                	mov    ebx,eax
c000ef4e:	a1 d0 86 02 c0       	mov    eax,ds:0xc00286d0
c000ef53:	8d 50 01             	lea    edx,[eax+0x1]
c000ef56:	89 15 d0 86 02 c0    	mov    DWORD PTR ds:0xc00286d0,edx
c000ef5c:	09 d9                	or     ecx,ebx
c000ef5e:	89 ca                	mov    edx,ecx
c000ef60:	89 14 85 e0 86 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7920],edx
c000ef67:	eb 13                	jmp    c000ef7c <scanMADT()+0x494>
c000ef69:	8d 76 00             	lea    esi,[esi+0x0]
c000ef6c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ef71:	83 f8 05             	cmp    eax,0x5
c000ef74:	75 06                	jne    c000ef7c <scanMADT()+0x494>
c000ef76:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ef7b:	90                   	nop
c000ef7c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000ef81:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ef85:	01 d0                	add    eax,edx
c000ef87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ef8b:	e9 50 fc ff ff       	jmp    c000ebe0 <scanMADT()+0xf8>
c000ef90:	90                   	nop
c000ef91:	eb 05                	jmp    c000ef98 <scanMADT()+0x4b0>
c000ef93:	90                   	nop
c000ef94:	90                   	nop
c000ef95:	8d 76 00             	lea    esi,[esi+0x0]
c000ef98:	83 c4 38             	add    esp,0x38
c000ef9b:	5b                   	pop    ebx
c000ef9c:	c3                   	ret    
c000ef9d:	90                   	nop
c000ef9e:	66 90                	xchg   ax,ax

c000efa0 <ACPI::ACPI()>:
c000efa0:	83 ec 0c             	sub    esp,0xc
c000efa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efa7:	83 ec 08             	sub    esp,0x8
c000efaa:	68 71 10 02 c0       	push   0xc0021071
c000efaf:	50                   	push   eax
c000efb0:	e8 65 d2 ff ff       	call   c000c21a <Device::Device(char const*)>
c000efb5:	83 c4 10             	add    esp,0x10
c000efb8:	ba e0 11 02 c0       	mov    edx,0xc00211e0
c000efbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efc1:	89 10                	mov    DWORD PTR [eax],edx
c000efc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efc7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000efce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efd2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000efdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efe0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000efea:	e8 f9 fa ff ff       	call   c000eae8 <scanMADT()>
c000efef:	90                   	nop
c000eff0:	83 c4 0c             	add    esp,0xc
c000eff3:	c3                   	ret    

c000eff4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000eff4:	83 ec 2c             	sub    esp,0x2c
c000eff7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000effb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000efff:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f003:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f007:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f00c:	88 d0                	mov    al,dl
c000f00e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f012:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f017:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f01f:	90                   	nop
c000f020:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f024:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f02a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f02e:	0f 8d b0 00 00 00    	jge    c000f0e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f034:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f038:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f03c:	83 c2 2a             	add    edx,0x2a
c000f03f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f043:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f048:	0f b7 c0             	movzx  eax,ax
c000f04b:	39 c2                	cmp    edx,eax
c000f04d:	0f 85 85 00 00 00    	jne    c000f0d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f053:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f057:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f05b:	83 c2 2a             	add    edx,0x2a
c000f05e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f062:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f067:	0f b6 c0             	movzx  eax,al
c000f06a:	39 c2                	cmp    edx,eax
c000f06c:	75 6a                	jne    c000f0d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f06e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f073:	85 c0                	test   eax,eax
c000f075:	74 3d                	je     c000f0b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f077:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f07b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f07f:	83 c2 2a             	add    edx,0x2a
c000f082:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f08a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f08d:	39 c2                	cmp    edx,eax
c000f08f:	74 13                	je     c000f0a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f091:	83 ec 0c             	sub    esp,0xc
c000f094:	68 ec 0f 02 c0       	push   0xc0020fec
c000f099:	e8 3d 1b 00 00       	call   c0010bdb <KePanic(char const*)>
c000f09e:	83 c4 10             	add    esp,0x10
c000f0a1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0a4:	83 ec 0c             	sub    esp,0xc
c000f0a7:	68 76 10 02 c0       	push   0xc0021076
c000f0ac:	e8 2a 1b 00 00       	call   c0010bdb <KePanic(char const*)>
c000f0b1:	83 c4 10             	add    esp,0x10
c000f0b4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f0b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f0bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f0c0:	83 c2 2a             	add    edx,0x2a
c000f0c3:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f0c7:	8b 02                	mov    eax,DWORD PTR [edx]
c000f0c9:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f0cc:	89 01                	mov    DWORD PTR [ecx],eax
c000f0ce:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f0d1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f0d6:	66 90                	xchg   ax,ax
c000f0d8:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f0dd:	e9 3e ff ff ff       	jmp    c000f020 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f0e2:	66 90                	xchg   ax,ax
c000f0e4:	90                   	nop
c000f0e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0e9:	83 c4 2c             	add    esp,0x2c
c000f0ec:	c2 04 00             	ret    0x4
c000f0ef:	90                   	nop

c000f0f0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f0f0:	83 ec 1c             	sub    esp,0x1c
c000f0f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0f7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f0fb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f0ff:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f104:	88 c8                	mov    al,cl
c000f106:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f10a:	88 d0                	mov    al,dl
c000f10c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f110:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f114:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f11a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f11e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f121:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000f125:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000f129:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f12d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f133:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f137:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000f13a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f13e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000f143:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f147:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f14d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f151:	83 c0 01             	add    eax,0x1
c000f154:	88 c1                	mov    cl,al
c000f156:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f15a:	83 c2 2a             	add    edx,0x2a
c000f15d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f161:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f165:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f16b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f16f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f172:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f176:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f17a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f17e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f184:	8d 50 01             	lea    edx,[eax+0x1]
c000f187:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f18b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f195:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f19b:	3d 00 02 00 00       	cmp    eax,0x200
c000f1a0:	75 12                	jne    c000f1b4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f1a2:	83 ec 0c             	sub    esp,0xc
c000f1a5:	68 85 10 02 c0       	push   0xc0021085
c000f1aa:	e8 2c 1a 00 00       	call   c0010bdb <KePanic(char const*)>
c000f1af:	83 c4 10             	add    esp,0x10
c000f1b2:	66 90                	xchg   ax,ax
c000f1b4:	90                   	nop
c000f1b5:	83 c4 1c             	add    esp,0x1c
c000f1b8:	c3                   	ret    
c000f1b9:	90                   	nop
c000f1ba:	66 90                	xchg   ax,ax

c000f1bc <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f1bc:	b8 00 00 00 00       	mov    eax,0x0
c000f1c1:	c3                   	ret    
c000f1c2:	66 90                	xchg   ax,ax

c000f1c4 <ACPI::detectPCI()>:
c000f1c4:	53                   	push   ebx
c000f1c5:	83 ec 28             	sub    esp,0x28
c000f1c8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f1cd:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f1d2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1d7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f1dd:	83 e0 04             	and    eax,0x4
c000f1e0:	0f b6 c0             	movzx  eax,al
c000f1e3:	85 c0                	test   eax,eax
c000f1e5:	74 2d                	je     c000f214 <ACPI::detectPCI()+0x50>
c000f1e7:	a1 c8 86 02 c0       	mov    eax,ds:0xc00286c8
c000f1ec:	83 ec 08             	sub    esp,0x8
c000f1ef:	68 a2 10 02 c0       	push   0xc00210a2
c000f1f4:	50                   	push   eax
c000f1f5:	e8 6e f8 ff ff       	call   c000ea68 <findDataTable(unsigned char*, char*)>
c000f1fa:	83 c4 10             	add    esp,0x10
c000f1fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f201:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f206:	74 0c                	je     c000f214 <ACPI::detectPCI()+0x50>
c000f208:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f20d:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f212:	66 90                	xchg   ax,ax
c000f214:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f21c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f220:	8a 00                	mov    al,BYTE PTR [eax]
c000f222:	0f b6 c0             	movzx  eax,al
c000f225:	83 f8 01             	cmp    eax,0x1
c000f228:	75 0e                	jne    c000f238 <ACPI::detectPCI()+0x74>
c000f22a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f22f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f234:	eb 2e                	jmp    c000f264 <ACPI::detectPCI()+0xa0>
c000f236:	66 90                	xchg   ax,ax
c000f238:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f23c:	8a 00                	mov    al,BYTE PTR [eax]
c000f23e:	0f b6 c0             	movzx  eax,al
c000f241:	83 f8 02             	cmp    eax,0x2
c000f244:	75 1e                	jne    c000f264 <ACPI::detectPCI()+0xa0>
c000f246:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f24b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f250:	85 c0                	test   eax,eax
c000f252:	74 10                	je     c000f264 <ACPI::detectPCI()+0xa0>
c000f254:	83 ec 0c             	sub    esp,0xc
c000f257:	68 1c 10 02 c0       	push   0xc002101c
c000f25c:	e8 7a 19 00 00       	call   c0010bdb <KePanic(char const*)>
c000f261:	83 c4 10             	add    esp,0x10
c000f264:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f268:	83 f0 01             	xor    eax,0x1
c000f26b:	0f b6 c0             	movzx  eax,al
c000f26e:	85 c0                	test   eax,eax
c000f270:	74 46                	je     c000f2b8 <ACPI::detectPCI()+0xf4>
c000f272:	e8 b9 0e ff ff       	call   c0000130 <manualPCIProbe>
c000f277:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f27b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f280:	75 0e                	jne    c000f290 <ACPI::detectPCI()+0xcc>
c000f282:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f287:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f28c:	eb 2a                	jmp    c000f2b8 <ACPI::detectPCI()+0xf4>
c000f28e:	66 90                	xchg   ax,ax
c000f290:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f295:	75 21                	jne    c000f2b8 <ACPI::detectPCI()+0xf4>
c000f297:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f29c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f2a1:	85 c0                	test   eax,eax
c000f2a3:	74 13                	je     c000f2b8 <ACPI::detectPCI()+0xf4>
c000f2a5:	83 ec 0c             	sub    esp,0xc
c000f2a8:	68 1c 10 02 c0       	push   0xc002101c
c000f2ad:	e8 29 19 00 00       	call   c0010bdb <KePanic(char const*)>
c000f2b2:	83 c4 10             	add    esp,0x10
c000f2b5:	8d 76 00             	lea    esi,[esi+0x0]
c000f2b8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f2bd:	85 c0                	test   eax,eax
c000f2bf:	0f 84 87 00 00 00    	je     c000f34c <ACPI::detectPCI()+0x188>
c000f2c5:	83 ec 0c             	sub    esp,0xc
c000f2c8:	68 a7 10 02 c0       	push   0xc00210a7
c000f2cd:	e8 53 12 00 00       	call   c0010525 <KeSetBootMessage(char const*)>
c000f2d2:	83 c4 10             	add    esp,0x10
c000f2d5:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f2dd:	83 ec 0c             	sub    esp,0xc
c000f2e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f2e4:	e8 c5 87 ff ff       	call   c0007aae <malloc>
c000f2e9:	83 c4 10             	add    esp,0x10
c000f2ec:	89 c3                	mov    ebx,eax
c000f2ee:	83 ec 0c             	sub    esp,0xc
c000f2f1:	53                   	push   ebx
c000f2f2:	e8 3d b1 00 00       	call   c001a434 <PCI::PCI()>
c000f2f7:	83 c4 10             	add    esp,0x10
c000f2fa:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f2fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f302:	83 ec 08             	sub    esp,0x8
c000f305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f309:	50                   	push   eax
c000f30a:	e8 73 cd ff ff       	call   c000c082 <Device::addChild(Device*)>
c000f30f:	83 c4 10             	add    esp,0x10
c000f312:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f316:	8b 00                	mov    eax,DWORD PTR [eax]
c000f318:	83 c0 08             	add    eax,0x8
c000f31b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f31d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f322:	85 d2                	test   edx,edx
c000f324:	74 0a                	je     c000f330 <ACPI::detectPCI()+0x16c>
c000f326:	ba 01 00 00 00       	mov    edx,0x1
c000f32b:	eb 0b                	jmp    c000f338 <ACPI::detectPCI()+0x174>
c000f32d:	8d 76 00             	lea    esi,[esi+0x0]
c000f330:	ba 02 00 00 00       	mov    edx,0x2
c000f335:	8d 76 00             	lea    esi,[esi+0x0]
c000f338:	6a 00                	push   0x0
c000f33a:	6a 00                	push   0x0
c000f33c:	52                   	push   edx
c000f33d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f341:	ff d0                	call   eax
c000f343:	83 c4 10             	add    esp,0x10
c000f346:	e9 91 00 00 00       	jmp    c000f3dc <ACPI::detectPCI()+0x218>
c000f34b:	90                   	nop
c000f34c:	83 ec 0c             	sub    esp,0xc
c000f34f:	68 bf 10 02 c0       	push   0xc00210bf
c000f354:	e8 cc 11 00 00       	call   c0010525 <KeSetBootMessage(char const*)>
c000f359:	83 c4 10             	add    esp,0x10
c000f35c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f363:	83 ec 0c             	sub    esp,0xc
c000f366:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f36a:	e8 3f 87 ff ff       	call   c0007aae <malloc>
c000f36f:	83 c4 10             	add    esp,0x10
c000f372:	89 c3                	mov    ebx,eax
c000f374:	83 ec 0c             	sub    esp,0xc
c000f377:	53                   	push   ebx
c000f378:	e8 51 bc 00 00       	call   c001afce <IDE::IDE()>
c000f37d:	83 c4 10             	add    esp,0x10
c000f380:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f384:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f388:	83 ec 08             	sub    esp,0x8
c000f38b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f38f:	50                   	push   eax
c000f390:	e8 ed cc ff ff       	call   c000c082 <Device::addChild(Device*)>
c000f395:	83 c4 10             	add    esp,0x10
c000f398:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f39c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f3a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3aa:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f3b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3b7:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f3c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3c6:	83 c0 08             	add    eax,0x8
c000f3c9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3cb:	6a 00                	push   0x0
c000f3cd:	6a 00                	push   0x0
c000f3cf:	6a 00                	push   0x0
c000f3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f3d5:	ff d0                	call   eax
c000f3d7:	83 c4 10             	add    esp,0x10
c000f3da:	66 90                	xchg   ax,ax
c000f3dc:	90                   	nop
c000f3dd:	83 c4 28             	add    esp,0x28
c000f3e0:	5b                   	pop    ebx
c000f3e1:	c3                   	ret    
c000f3e2:	66 90                	xchg   ax,ax

c000f3e4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f3e4:	83 ec 1c             	sub    esp,0x1c
c000f3e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f3eb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f3ee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f3f2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f3f7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f3fc:	83 ec 08             	sub    esp,0x8
c000f3ff:	52                   	push   edx
c000f400:	50                   	push   eax
c000f401:	e8 6a 7d ff ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c000f406:	83 c4 10             	add    esp,0x10
c000f409:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f40d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f412:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f417:	83 ec 04             	sub    esp,0x4
c000f41a:	6a 01                	push   0x1
c000f41c:	52                   	push   edx
c000f41d:	50                   	push   eax
c000f41e:	e8 67 7e ff ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c000f423:	83 c4 10             	add    esp,0x10
c000f426:	90                   	nop
c000f427:	83 c4 1c             	add    esp,0x1c
c000f42a:	c3                   	ret    
c000f42b:	90                   	nop

c000f42c <ACPI::sleep()>:
c000f42c:	83 ec 0c             	sub    esp,0xc
c000f42f:	a1 a0 84 02 c0       	mov    eax,ds:0xc00284a0
c000f434:	85 c0                	test   eax,eax
c000f436:	74 08                	je     c000f440 <ACPI::sleep()+0x14>
c000f438:	a1 a0 84 02 c0       	mov    eax,ds:0xc00284a0
c000f43d:	ff d0                	call   eax
c000f43f:	90                   	nop
c000f440:	90                   	nop
c000f441:	83 c4 0c             	add    esp,0xc
c000f444:	c3                   	ret    
c000f445:	90                   	nop
c000f446:	66 90                	xchg   ax,ax

c000f448 <ACPI::open(int, int, void*)>:
c000f448:	57                   	push   edi
c000f449:	56                   	push   esi
c000f44a:	53                   	push   ebx
c000f44b:	81 ec 70 01 00 00    	sub    esp,0x170
c000f451:	83 ec 0c             	sub    esp,0xc
c000f454:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f45b:	e8 64 fd ff ff       	call   c000f1c4 <ACPI::detectPCI()>
c000f460:	83 c4 10             	add    esp,0x10
c000f463:	83 ec 0c             	sub    esp,0xc
c000f466:	68 44 10 02 c0       	push   0xc0021044
c000f46b:	e8 b5 10 00 00       	call   c0010525 <KeSetBootMessage(char const*)>
c000f470:	83 c4 10             	add    esp,0x10
c000f473:	b8 4c 05 00 00       	mov    eax,0x54c
c000f478:	8a 00                	mov    al,BYTE PTR [eax]
c000f47a:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000f481:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000f489:	83 f8 01             	cmp    eax,0x1
c000f48c:	75 12                	jne    c000f4a0 <ACPI::open(int, int, void*)+0x58>
c000f48e:	83 ec 0c             	sub    esp,0xc
c000f491:	68 d4 10 02 c0       	push   0xc00210d4
c000f496:	e8 2d 4a 00 00       	call   c0013ec8 <Thr::loadKernelSymbolTable(char const*)>
c000f49b:	83 c4 10             	add    esp,0x10
c000f49e:	eb 34                	jmp    c000f4d4 <ACPI::open(int, int, void*)+0x8c>
c000f4a0:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000f4a8:	3d bb 00 00 00       	cmp    eax,0xbb
c000f4ad:	75 15                	jne    c000f4c4 <ACPI::open(int, int, void*)+0x7c>
c000f4af:	83 ec 0c             	sub    esp,0xc
c000f4b2:	68 f2 10 02 c0       	push   0xc00210f2
c000f4b7:	e8 0c 4a 00 00       	call   c0013ec8 <Thr::loadKernelSymbolTable(char const*)>
c000f4bc:	83 c4 10             	add    esp,0x10
c000f4bf:	eb 13                	jmp    c000f4d4 <ACPI::open(int, int, void*)+0x8c>
c000f4c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f4c4:	83 ec 0c             	sub    esp,0xc
c000f4c7:	68 10 11 02 c0       	push   0xc0021110
c000f4cc:	e8 0a 17 00 00       	call   c0010bdb <KePanic(char const*)>
c000f4d1:	83 c4 10             	add    esp,0x10
c000f4d4:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f4dc:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f4e7:	83 ec 0c             	sub    esp,0xc
c000f4ea:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f4f1:	e8 b8 85 ff ff       	call   c0007aae <malloc>
c000f4f6:	83 c4 10             	add    esp,0x10
c000f4f9:	89 c3                	mov    ebx,eax
c000f4fb:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c000f500:	83 ec 04             	sub    esp,0x4
c000f503:	50                   	push   eax
c000f504:	68 2a 11 02 c0       	push   0xc002112a
c000f509:	53                   	push   ebx
c000f50a:	e8 c1 bc ff ff       	call   c000b1d0 <File::File(char const*, Process*)>
c000f50f:	83 c4 10             	add    esp,0x10
c000f512:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f519:	83 ec 08             	sub    esp,0x8
c000f51c:	6a 01                	push   0x1
c000f51e:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f525:	e8 62 bd ff ff       	call   c000b28c <File::open(FileOpenMode)>
c000f52a:	83 c4 10             	add    esp,0x10
c000f52d:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f534:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f53c:	75 16                	jne    c000f554 <ACPI::open(int, int, void*)+0x10c>
c000f53e:	83 ec 0c             	sub    esp,0xc
c000f541:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f548:	e8 9d bd ff ff       	call   c000b2ea <File::close()>
c000f54d:	83 c4 10             	add    esp,0x10
c000f550:	eb 0a                	jmp    c000f55c <ACPI::open(int, int, void*)+0x114>
c000f552:	66 90                	xchg   ax,ax
c000f554:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f55c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f564:	74 1e                	je     c000f584 <ACPI::open(int, int, void*)+0x13c>
c000f566:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f56d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f56f:	83 c0 08             	add    eax,0x8
c000f572:	8b 00                	mov    eax,DWORD PTR [eax]
c000f574:	83 ec 0c             	sub    esp,0xc
c000f577:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f57e:	ff d0                	call   eax
c000f580:	83 c4 10             	add    esp,0x10
c000f583:	90                   	nop
c000f584:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f58b:	83 f0 01             	xor    eax,0x1
c000f58e:	0f b6 c0             	movzx  eax,al
c000f591:	85 c0                	test   eax,eax
c000f593:	74 43                	je     c000f5d8 <ACPI::open(int, int, void*)+0x190>
c000f595:	83 ec 0c             	sub    esp,0xc
c000f598:	68 48 11 02 c0       	push   0xc0021148
c000f59d:	e8 83 0f 00 00       	call   c0010525 <KeSetBootMessage(char const*)>
c000f5a2:	83 c4 10             	add    esp,0x10
c000f5a5:	83 ec 04             	sub    esp,0x4
c000f5a8:	6a 0c                	push   0xc
c000f5aa:	68 63 11 02 c0       	push   0xc0021163
c000f5af:	68 74 11 02 c0       	push   0xc0021174
c000f5b4:	e8 bb 3c 00 00       	call   c0013274 <Reg::readIntWithDefault(char*, char*, int)>
c000f5b9:	83 c4 10             	add    esp,0x10
c000f5bc:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f5c3:	83 ec 0c             	sub    esp,0xc
c000f5c6:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f5cd:	e8 5e a2 ff ff       	call   c0009830 <Virt::setupPageSwapping(int)>
c000f5d2:	83 c4 10             	add    esp,0x10
c000f5d5:	8d 76 00             	lea    esi,[esi+0x0]
c000f5d8:	83 ec 0c             	sub    esp,0xc
c000f5db:	68 b5 fd 01 c0       	push   0xc001fdb5
c000f5e0:	e8 40 0f 00 00       	call   c0010525 <KeSetBootMessage(char const*)>
c000f5e5:	83 c4 10             	add    esp,0x10
c000f5e8:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f5ef:	83 ec 08             	sub    esp,0x8
c000f5f2:	6a 13                	push   0x13
c000f5f4:	50                   	push   eax
c000f5f5:	e8 a0 cd ff ff       	call   c000c39a <getDevicesOfType(DeviceType)>
c000f5fa:	83 c4 0c             	add    esp,0xc
c000f5fd:	8d 76 00             	lea    esi,[esi+0x0]
c000f600:	83 ec 0c             	sub    esp,0xc
c000f603:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f60a:	50                   	push   eax
c000f60b:	e8 a0 fb 00 00       	call   c001f1b0 <LinkedList<Device>::isEmpty()>
c000f610:	83 c4 10             	add    esp,0x10
c000f613:	83 f0 01             	xor    eax,0x1
c000f616:	0f b6 c0             	movzx  eax,al
c000f619:	85 c0                	test   eax,eax
c000f61b:	0f 84 47 01 00 00    	je     c000f768 <ACPI::open(int, int, void*)+0x320>
c000f621:	83 ec 0c             	sub    esp,0xc
c000f624:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f62b:	50                   	push   eax
c000f62c:	e8 9b fb 00 00       	call   c001f1cc <LinkedList<Device>::getFirstElement()>
c000f631:	83 c4 10             	add    esp,0x10
c000f634:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f63b:	83 ec 0c             	sub    esp,0xc
c000f63e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f645:	50                   	push   eax
c000f646:	e8 89 fb 00 00       	call   c001f1d4 <LinkedList<Device>::removeFirst()>
c000f64b:	83 c4 10             	add    esp,0x10
c000f64e:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f655:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f65c:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f663:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f667:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f66d:	ba 09 00 00 00       	mov    edx,0x9
c000f672:	fc                   	cld    
c000f673:	89 c7                	mov    edi,eax
c000f675:	89 de                	mov    esi,ebx
c000f677:	89 d1                	mov    ecx,edx
c000f679:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f67b:	83 ec 08             	sub    esp,0x8
c000f67e:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f682:	50                   	push   eax
c000f683:	83 ec 24             	sub    esp,0x24
c000f686:	89 e0                	mov    eax,esp
c000f688:	89 c3                	mov    ebx,eax
c000f68a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f68e:	ba 09 00 00 00       	mov    edx,0x9
c000f693:	89 df                	mov    edi,ebx
c000f695:	89 c6                	mov    esi,eax
c000f697:	89 d1                	mov    ecx,edx
c000f699:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f69b:	e8 7e b2 00 00       	call   c001a91e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f6a0:	83 c4 30             	add    esp,0x30
c000f6a3:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f6aa:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f6b2:	0f 84 48 ff ff ff    	je     c000f600 <ACPI::open(int, int, void*)+0x1b8>
c000f6b8:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f6c3:	83 ec 0c             	sub    esp,0xc
c000f6c6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f6cd:	e8 dc 83 ff ff       	call   c0007aae <malloc>
c000f6d2:	83 c4 10             	add    esp,0x10
c000f6d5:	89 c3                	mov    ebx,eax
c000f6d7:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c000f6dc:	83 ec 04             	sub    esp,0x4
c000f6df:	50                   	push   eax
c000f6e0:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f6e7:	53                   	push   ebx
c000f6e8:	e8 e3 ba ff ff       	call   c000b1d0 <File::File(char const*, Process*)>
c000f6ed:	83 c4 10             	add    esp,0x10
c000f6f0:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f6f7:	83 ec 0c             	sub    esp,0xc
c000f6fa:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f701:	e8 f4 bd ff ff       	call   c000b4fa <File::exists()>
c000f706:	83 c4 10             	add    esp,0x10
c000f709:	0f b6 c0             	movzx  eax,al
c000f70c:	85 c0                	test   eax,eax
c000f70e:	74 28                	je     c000f738 <ACPI::open(int, int, void*)+0x2f0>
c000f710:	83 ec 08             	sub    esp,0x8
c000f713:	6a 01                	push   0x1
c000f715:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f71c:	e8 4c 52 00 00       	call   c001496d <Thr::loadDLL(char const*, bool)>
c000f721:	83 c4 10             	add    esp,0x10
c000f724:	83 ec 08             	sub    esp,0x8
c000f727:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f72e:	50                   	push   eax
c000f72f:	e8 6a 54 00 00       	call   c0014b9e <Thr::executeDLL(unsigned long, void*)>
c000f734:	83 c4 10             	add    esp,0x10
c000f737:	90                   	nop
c000f738:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f740:	0f 84 ba fe ff ff    	je     c000f600 <ACPI::open(int, int, void*)+0x1b8>
c000f746:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f74d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f74f:	83 c0 08             	add    eax,0x8
c000f752:	8b 00                	mov    eax,DWORD PTR [eax]
c000f754:	83 ec 0c             	sub    esp,0xc
c000f757:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f75e:	ff d0                	call   eax
c000f760:	83 c4 10             	add    esp,0x10
c000f763:	e9 98 fe ff ff       	jmp    c000f600 <ACPI::open(int, int, void*)+0x1b8>
c000f768:	83 ec 0c             	sub    esp,0xc
c000f76b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f772:	50                   	push   eax
c000f773:	e8 34 fa 00 00       	call   c001f1ac <LinkedList<Device>::~LinkedList()>
c000f778:	83 c4 10             	add    esp,0x10
c000f77b:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000f781:	83 ec 08             	sub    esp,0x8
c000f784:	6a 01                	push   0x1
c000f786:	68 7b 11 02 c0       	push   0xc002117b
c000f78b:	e8 dd 51 00 00       	call   c001496d <Thr::loadDLL(char const*, bool)>
c000f790:	83 c4 10             	add    esp,0x10
c000f793:	83 ec 08             	sub    esp,0x8
c000f796:	53                   	push   ebx
c000f797:	50                   	push   eax
c000f798:	e8 01 54 00 00       	call   c0014b9e <Thr::executeDLL(unsigned long, void*)>
c000f79d:	83 c4 10             	add    esp,0x10
c000f7a0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f7a5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f7ab:	83 e0 04             	and    eax,0x4
c000f7ae:	0f b6 c0             	movzx  eax,al
c000f7b1:	85 c0                	test   eax,eax
c000f7b3:	0f 84 1b 01 00 00    	je     c000f8d4 <ACPI::open(int, int, void*)+0x48c>
c000f7b9:	83 ec 0c             	sub    esp,0xc
c000f7bc:	68 98 11 02 c0       	push   0xc0021198
c000f7c1:	e8 5f 0d 00 00       	call   c0010525 <KeSetBootMessage(char const*)>
c000f7c6:	83 c4 10             	add    esp,0x10
c000f7c9:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f7d4:	83 ec 0c             	sub    esp,0xc
c000f7d7:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f7de:	e8 cb 82 ff ff       	call   c0007aae <malloc>
c000f7e3:	83 c4 10             	add    esp,0x10
c000f7e6:	89 c3                	mov    ebx,eax
c000f7e8:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c000f7ed:	83 ec 04             	sub    esp,0x4
c000f7f0:	50                   	push   eax
c000f7f1:	68 b5 11 02 c0       	push   0xc00211b5
c000f7f6:	53                   	push   ebx
c000f7f7:	e8 d4 b9 ff ff       	call   c000b1d0 <File::File(char const*, Process*)>
c000f7fc:	83 c4 10             	add    esp,0x10
c000f7ff:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f806:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f80e:	74 20                	je     c000f830 <ACPI::open(int, int, void*)+0x3e8>
c000f810:	83 ec 0c             	sub    esp,0xc
c000f813:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f81a:	e8 db bc ff ff       	call   c000b4fa <File::exists()>
c000f81f:	83 c4 10             	add    esp,0x10
c000f822:	0f b6 c0             	movzx  eax,al
c000f825:	85 c0                	test   eax,eax
c000f827:	74 07                	je     c000f830 <ACPI::open(int, int, void*)+0x3e8>
c000f829:	b0 01                	mov    al,0x1
c000f82b:	eb 07                	jmp    c000f834 <ACPI::open(int, int, void*)+0x3ec>
c000f82d:	8d 76 00             	lea    esi,[esi+0x0]
c000f830:	b0 00                	mov    al,0x0
c000f832:	66 90                	xchg   ax,ax
c000f834:	0f b6 c0             	movzx  eax,al
c000f837:	85 c0                	test   eax,eax
c000f839:	74 25                	je     c000f860 <ACPI::open(int, int, void*)+0x418>
c000f83b:	83 ec 08             	sub    esp,0x8
c000f83e:	6a 01                	push   0x1
c000f840:	68 b5 11 02 c0       	push   0xc00211b5
c000f845:	e8 23 51 00 00       	call   c001496d <Thr::loadDLL(char const*, bool)>
c000f84a:	83 c4 10             	add    esp,0x10
c000f84d:	83 ec 08             	sub    esp,0x8
c000f850:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f857:	50                   	push   eax
c000f858:	e8 41 53 00 00       	call   c0014b9e <Thr::executeDLL(unsigned long, void*)>
c000f85d:	83 c4 10             	add    esp,0x10
c000f860:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f868:	74 2a                	je     c000f894 <ACPI::open(int, int, void*)+0x44c>
c000f86a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f872:	74 20                	je     c000f894 <ACPI::open(int, int, void*)+0x44c>
c000f874:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f87b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f87d:	83 c0 08             	add    eax,0x8
c000f880:	8b 00                	mov    eax,DWORD PTR [eax]
c000f882:	83 ec 0c             	sub    esp,0xc
c000f885:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f88c:	ff d0                	call   eax
c000f88e:	83 c4 10             	add    esp,0x10
c000f891:	8d 76 00             	lea    esi,[esi+0x0]
c000f894:	a1 c8 86 02 c0       	mov    eax,ds:0xc00286c8
c000f899:	83 ec 08             	sub    esp,0x8
c000f89c:	68 d2 11 02 c0       	push   0xc00211d2
c000f8a1:	50                   	push   eax
c000f8a2:	e8 c1 f1 ff ff       	call   c000ea68 <findDataTable(unsigned char*, char*)>
c000f8a7:	83 c4 10             	add    esp,0x10
c000f8aa:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f8b1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f8b9:	74 19                	je     c000f8d4 <ACPI::open(int, int, void*)+0x48c>
c000f8bb:	83 ec 08             	sub    esp,0x8
c000f8be:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f8c5:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f8cc:	e8 13 fb ff ff       	call   c000f3e4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f8d1:	83 c4 10             	add    esp,0x10
c000f8d4:	b8 00 00 00 00       	mov    eax,0x0
c000f8d9:	81 c4 70 01 00 00    	add    esp,0x170
c000f8df:	5b                   	pop    ebx
c000f8e0:	5e                   	pop    esi
c000f8e1:	5f                   	pop    edi
c000f8e2:	c3                   	ret    
c000f8e3:	90                   	nop

c000f8e4 <CPU::close(int, int, void*)>:
c000f8e4:	31 c0                	xor    eax,eax
c000f8e6:	c3                   	ret    
c000f8e7:	90                   	nop

c000f8e8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f8e8:	60                   	pusha  
c000f8e9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f8f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f8f5:	9c                   	pushf  
c000f8f6:	fa                   	cli    
c000f8f7:	0f 09                	wbinvd 
c000f8f9:	0f 30                	wrmsr  
c000f8fb:	9d                   	popf   
c000f8fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f900:	89 02                	mov    DWORD PTR [edx],eax
c000f902:	61                   	popa   
c000f903:	c3                   	ret    

c000f904 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f904:	60                   	pusha  
c000f905:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f909:	9c                   	pushf  
c000f90a:	fa                   	cli    
c000f90b:	0f 09                	wbinvd 
c000f90d:	31 c0                	xor    eax,eax
c000f90f:	31 d2                	xor    edx,edx
c000f911:	0f 32                	rdmsr  
c000f913:	9d                   	popf   
c000f914:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f918:	89 02                	mov    DWORD PTR [edx],eax
c000f91a:	61                   	popa   
c000f91b:	c3                   	ret    

c000f91c <CPU::AMD_K6_writeback(int, int, int)>:
c000f91c:	56                   	push   esi
c000f91d:	53                   	push   ebx
c000f91e:	83 ec 10             	sub    esp,0x10
c000f921:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f925:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f92a:	75 5d                	jne    c000f989 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f92c:	83 f8 08             	cmp    eax,0x8
c000f92f:	75 09                	jne    c000f93a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f931:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f936:	7e 13                	jle    c000f94b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f938:	eb 30                	jmp    c000f96a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f93a:	83 f8 06             	cmp    eax,0x6
c000f93d:	7c 4a                	jl     c000f989 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f93f:	83 f8 07             	cmp    eax,0x7
c000f942:	7e 07                	jle    c000f94b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f944:	83 f8 09             	cmp    eax,0x9
c000f947:	74 21                	je     c000f96a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f949:	eb 3e                	jmp    c000f989 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f94b:	89 e6                	mov    esi,esp
c000f94d:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000f953:	56                   	push   esi
c000f954:	c1 eb 15             	shr    ebx,0x15
c000f957:	68 82 00 00 c0       	push   0xc0000082
c000f95c:	83 e3 7e             	and    ebx,0x7e
c000f95f:	e8 a0 ff ff ff       	call   c000f904 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f964:	56                   	push   esi
c000f965:	6a 00                	push   0x0
c000f967:	53                   	push   ebx
c000f968:	eb 12                	jmp    c000f97c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f96a:	89 e3                	mov    ebx,esp
c000f96c:	53                   	push   ebx
c000f96d:	68 82 00 00 c0       	push   0xc0000082
c000f972:	e8 8d ff ff ff       	call   c000f904 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f977:	53                   	push   ebx
c000f978:	6a 00                	push   0x0
c000f97a:	6a 00                	push   0x0
c000f97c:	68 82 00 00 c0       	push   0xc0000082
c000f981:	e8 62 ff ff ff       	call   c000f8e8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f986:	83 c4 18             	add    esp,0x18
c000f989:	83 c4 10             	add    esp,0x10
c000f98c:	5b                   	pop    ebx
c000f98d:	5e                   	pop    esi
c000f98e:	c3                   	ret    
c000f98f:	90                   	nop

c000f990 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f990:	55                   	push   ebp
c000f991:	57                   	push   edi
c000f992:	56                   	push   esi
c000f993:	53                   	push   ebx
c000f994:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f998:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f99c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f9a0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f9a4:	39 05 98 27 02 c0    	cmp    DWORD PTR ds:0xc0022798,eax
c000f9aa:	75 23                	jne    c000f9cf <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f9ac:	a1 2c 89 02 c0       	mov    eax,ds:0xc002892c
c000f9b1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f9b5:	89 06                	mov    DWORD PTR [esi],eax
c000f9b7:	a1 28 89 02 c0       	mov    eax,ds:0xc0028928
c000f9bc:	89 07                	mov    DWORD PTR [edi],eax
c000f9be:	a1 24 89 02 c0       	mov    eax,ds:0xc0028924
c000f9c3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f9c6:	a1 20 89 02 c0       	mov    eax,ds:0xc0028920
c000f9cb:	89 02                	mov    DWORD PTR [edx],eax
c000f9cd:	eb 3f                	jmp    c000fa0e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f9cf:	31 c9                	xor    ecx,ecx
c000f9d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f9d5:	0f a2                	cpuid  
c000f9d7:	89 06                	mov    DWORD PTR [esi],eax
c000f9d9:	89 1f                	mov    DWORD PTR [edi],ebx
c000f9db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f9df:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f9e2:	89 10                	mov    DWORD PTR [eax],edx
c000f9e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f9e8:	a3 98 27 02 c0       	mov    ds:0xc0022798,eax
c000f9ed:	8b 06                	mov    eax,DWORD PTR [esi]
c000f9ef:	a3 2c 89 02 c0       	mov    ds:0xc002892c,eax
c000f9f4:	8b 07                	mov    eax,DWORD PTR [edi]
c000f9f6:	a3 28 89 02 c0       	mov    ds:0xc0028928,eax
c000f9fb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f9fe:	a3 24 89 02 c0       	mov    ds:0xc0028924,eax
c000fa03:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa07:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa09:	a3 20 89 02 c0       	mov    ds:0xc0028920,eax
c000fa0e:	5b                   	pop    ebx
c000fa0f:	5e                   	pop    esi
c000fa10:	5f                   	pop    edi
c000fa11:	5d                   	pop    ebp
c000fa12:	c3                   	ret    
c000fa13:	90                   	nop

c000fa14 <CPU::cpuidCheckEDX(unsigned int)>:
c000fa14:	83 ec 10             	sub    esp,0x10
c000fa17:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa1b:	50                   	push   eax
c000fa1c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa20:	50                   	push   eax
c000fa21:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa25:	50                   	push   eax
c000fa26:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa2a:	50                   	push   eax
c000fa2b:	6a 01                	push   0x1
c000fa2d:	e8 5e ff ff ff       	call   c000f990 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa36:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000fa3a:	0f 95 c0             	setne  al
c000fa3d:	83 c4 24             	add    esp,0x24
c000fa40:	c3                   	ret    
c000fa41:	90                   	nop

c000fa42 <CPU::cpuidCheckECX(unsigned int)>:
c000fa42:	83 ec 10             	sub    esp,0x10
c000fa45:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa49:	50                   	push   eax
c000fa4a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa4e:	50                   	push   eax
c000fa4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa53:	50                   	push   eax
c000fa54:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa58:	50                   	push   eax
c000fa59:	6a 01                	push   0x1
c000fa5b:	e8 30 ff ff ff       	call   c000f990 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa64:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000fa68:	0f 95 c0             	setne  al
c000fa6b:	83 c4 24             	add    esp,0x24
c000fa6e:	c3                   	ret    
c000fa6f:	90                   	nop

c000fa70 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000fa70:	83 ec 10             	sub    esp,0x10
c000fa73:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa77:	50                   	push   eax
c000fa78:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa7c:	50                   	push   eax
c000fa7d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa81:	50                   	push   eax
c000fa82:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fa86:	50                   	push   eax
c000fa87:	6a 07                	push   0x7
c000fa89:	e8 02 ff ff ff       	call   c000f990 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fa8e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa92:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000fa96:	0f 95 c0             	setne  al
c000fa99:	83 c4 24             	add    esp,0x24
c000fa9c:	c3                   	ret    
c000fa9d:	90                   	nop

c000fa9e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000fa9e:	83 ec 10             	sub    esp,0x10
c000faa1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000faa5:	50                   	push   eax
c000faa6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000faaa:	50                   	push   eax
c000faab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000faaf:	50                   	push   eax
c000fab0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fab4:	50                   	push   eax
c000fab5:	6a 07                	push   0x7
c000fab7:	e8 d4 fe ff ff       	call   c000f990 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fabc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fac0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000fac4:	0f 95 c0             	setne  al
c000fac7:	83 c4 24             	add    esp,0x24
c000faca:	c3                   	ret    
c000facb:	90                   	nop

c000facc <CPU::CPU()>:
c000facc:	83 ec 0c             	sub    esp,0xc
c000facf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fad3:	83 ec 08             	sub    esp,0x8
c000fad6:	68 f5 12 02 c0       	push   0xc00212f5
c000fadb:	50                   	push   eax
c000fadc:	e8 39 c7 ff ff       	call   c000c21a <Device::Device(char const*)>
c000fae1:	83 c4 10             	add    esp,0x10
c000fae4:	ba 88 13 02 c0       	mov    edx,0xc0021388
c000fae9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000faed:	89 10                	mov    DWORD PTR [eax],edx
c000faef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000faf3:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000fafd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb01:	05 78 01 00 00       	add    eax,0x178
c000fb06:	83 ec 0c             	sub    esp,0xc
c000fb09:	50                   	push   eax
c000fb0a:	e8 45 78 ff ff       	call   c0007354 <GDT::GDT()>
c000fb0f:	83 c4 10             	add    esp,0x10
c000fb12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb16:	05 7c 09 00 00       	add    eax,0x97c
c000fb1b:	83 ec 0c             	sub    esp,0xc
c000fb1e:	50                   	push   eax
c000fb1f:	e8 80 7a ff ff       	call   c00075a4 <IDT::IDT()>
c000fb24:	83 c4 10             	add    esp,0x10
c000fb27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb2b:	05 7c 11 00 00       	add    eax,0x117c
c000fb30:	83 ec 0c             	sub    esp,0xc
c000fb33:	50                   	push   eax
c000fb34:	e8 ff 93 ff ff       	call   c0008f38 <TSS::TSS()>
c000fb39:	83 c4 10             	add    esp,0x10
c000fb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb40:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000fb47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb4b:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000fb55:	90                   	nop
c000fb56:	83 c4 0c             	add    esp,0xc
c000fb59:	c3                   	ret    

c000fb5a <CPU::displayFeatures()>:
c000fb5a:	c3                   	ret    
c000fb5b:	90                   	nop

c000fb5c <CPU::detectFeatures()>:
c000fb5c:	55                   	push   ebp
c000fb5d:	57                   	push   edi
c000fb5e:	56                   	push   esi
c000fb5f:	53                   	push   ebx
c000fb60:	83 ec 30             	sub    esp,0x30
c000fb63:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fb67:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000fb71:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000fb78:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000fb7e:	6a 0d                	push   0xd
c000fb80:	6a 00                	push   0x0
c000fb82:	55                   	push   ebp
c000fb83:	e8 68 09 ff ff       	call   c00004f0 <memset>
c000fb88:	83 c4 10             	add    esp,0x10
c000fb8b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fb90:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000fb97:	0f 84 db 05 00 00    	je     c0010178 <CPU::detectFeatures()+0x61c>
c000fb9d:	83 ec 0c             	sub    esp,0xc
c000fba0:	89 ef                	mov    edi,ebp
c000fba2:	6a 10                	push   0x10
c000fba4:	e8 6b fe ff ff       	call   c000fa14 <CPU::cpuidCheckEDX(unsigned int)>
c000fba9:	83 e0 01             	and    eax,0x1
c000fbac:	8d 14 00             	lea    edx,[eax+eax*1]
c000fbaf:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fbb5:	83 e0 fd             	and    eax,0xfffffffd
c000fbb8:	09 d0                	or     eax,edx
c000fbba:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fbc0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000fbc7:	e8 48 fe ff ff       	call   c000fa14 <CPU::cpuidCheckEDX(unsigned int)>
c000fbcc:	83 e0 01             	and    eax,0x1
c000fbcf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fbd6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fbdc:	83 e0 fb             	and    eax,0xfffffffb
c000fbdf:	09 d0                	or     eax,edx
c000fbe1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fbe7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000fbee:	e8 21 fe ff ff       	call   c000fa14 <CPU::cpuidCheckEDX(unsigned int)>
c000fbf3:	83 e0 01             	and    eax,0x1
c000fbf6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fbfd:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc03:	83 e0 f7             	and    eax,0xfffffff7
c000fc06:	09 d0                	or     eax,edx
c000fc08:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc0e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000fc15:	e8 fa fd ff ff       	call   c000fa14 <CPU::cpuidCheckEDX(unsigned int)>
c000fc1a:	83 e0 01             	and    eax,0x1
c000fc1d:	c1 e0 04             	shl    eax,0x4
c000fc20:	89 c2                	mov    edx,eax
c000fc22:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc28:	83 e0 ef             	and    eax,0xffffffef
c000fc2b:	09 d0                	or     eax,edx
c000fc2d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc33:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000fc3a:	e8 d5 fd ff ff       	call   c000fa14 <CPU::cpuidCheckEDX(unsigned int)>
c000fc3f:	83 e0 01             	and    eax,0x1
c000fc42:	c1 e0 05             	shl    eax,0x5
c000fc45:	89 c2                	mov    edx,eax
c000fc47:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc4d:	83 e0 df             	and    eax,0xffffffdf
c000fc50:	09 d0                	or     eax,edx
c000fc52:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc58:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000fc5f:	e8 b0 fd ff ff       	call   c000fa14 <CPU::cpuidCheckEDX(unsigned int)>
c000fc64:	83 e0 01             	and    eax,0x1
c000fc67:	8d 14 00             	lea    edx,[eax+eax*1]
c000fc6a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fc70:	83 e0 fd             	and    eax,0xfffffffd
c000fc73:	09 d0                	or     eax,edx
c000fc75:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fc7b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000fc82:	e8 8d fd ff ff       	call   c000fa14 <CPU::cpuidCheckEDX(unsigned int)>
c000fc87:	83 e0 01             	and    eax,0x1
c000fc8a:	c1 e0 06             	shl    eax,0x6
c000fc8d:	89 c2                	mov    edx,eax
c000fc8f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc95:	83 e0 bf             	and    eax,0xffffffbf
c000fc98:	09 d0                	or     eax,edx
c000fc9a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fca0:	58                   	pop    eax
c000fca1:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fca5:	50                   	push   eax
c000fca6:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcaa:	50                   	push   eax
c000fcab:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fcaf:	56                   	push   esi
c000fcb0:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcb4:	50                   	push   eax
c000fcb5:	6a 00                	push   0x0
c000fcb7:	e8 d4 fc ff ff       	call   c000f990 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fcbc:	b8 04 00 00 00       	mov    eax,0x4
c000fcc1:	89 c1                	mov    ecx,eax
c000fcc3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fcc5:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000fccb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000fccf:	89 c1                	mov    ecx,eax
c000fcd1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fcd3:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000fcd9:	8d 74 24 38          	lea    esi,[esp+0x38]
c000fcdd:	89 c1                	mov    ecx,eax
c000fcdf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fce1:	83 c4 18             	add    esp,0x18
c000fce4:	68 04 12 02 c0       	push   0xc0021204
c000fce9:	55                   	push   ebp
c000fcea:	e8 61 0a ff ff       	call   c0000750 <strcmp>
c000fcef:	83 c4 10             	add    esp,0x10
c000fcf2:	85 c0                	test   eax,eax
c000fcf4:	75 0f                	jne    c000fd05 <CPU::detectFeatures()+0x1a9>
c000fcf6:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000fd00:	e9 22 02 00 00       	jmp    c000ff27 <CPU::detectFeatures()+0x3cb>
c000fd05:	50                   	push   eax
c000fd06:	50                   	push   eax
c000fd07:	68 11 12 02 c0       	push   0xc0021211
c000fd0c:	55                   	push   ebp
c000fd0d:	e8 3e 0a ff ff       	call   c0000750 <strcmp>
c000fd12:	83 c4 10             	add    esp,0x10
c000fd15:	85 c0                	test   eax,eax
c000fd17:	74 dd                	je     c000fcf6 <CPU::detectFeatures()+0x19a>
c000fd19:	50                   	push   eax
c000fd1a:	50                   	push   eax
c000fd1b:	68 1e 12 02 c0       	push   0xc002121e
c000fd20:	55                   	push   ebp
c000fd21:	e8 2a 0a ff ff       	call   c0000750 <strcmp>
c000fd26:	83 c4 10             	add    esp,0x10
c000fd29:	85 c0                	test   eax,eax
c000fd2b:	74 2a                	je     c000fd57 <CPU::detectFeatures()+0x1fb>
c000fd2d:	50                   	push   eax
c000fd2e:	50                   	push   eax
c000fd2f:	68 2b 12 02 c0       	push   0xc002122b
c000fd34:	55                   	push   ebp
c000fd35:	e8 16 0a ff ff       	call   c0000750 <strcmp>
c000fd3a:	83 c4 10             	add    esp,0x10
c000fd3d:	85 c0                	test   eax,eax
c000fd3f:	74 16                	je     c000fd57 <CPU::detectFeatures()+0x1fb>
c000fd41:	50                   	push   eax
c000fd42:	50                   	push   eax
c000fd43:	68 38 12 02 c0       	push   0xc0021238
c000fd48:	55                   	push   ebp
c000fd49:	e8 02 0a ff ff       	call   c0000750 <strcmp>
c000fd4e:	83 c4 10             	add    esp,0x10
c000fd51:	85 c0                	test   eax,eax
c000fd53:	74 48                	je     c000fd9d <CPU::detectFeatures()+0x241>
c000fd55:	eb 0f                	jmp    c000fd66 <CPU::detectFeatures()+0x20a>
c000fd57:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fd61:	e9 c1 01 00 00       	jmp    c000ff27 <CPU::detectFeatures()+0x3cb>
c000fd66:	50                   	push   eax
c000fd67:	50                   	push   eax
c000fd68:	68 45 12 02 c0       	push   0xc0021245
c000fd6d:	55                   	push   ebp
c000fd6e:	e8 dd 09 ff ff       	call   c0000750 <strcmp>
c000fd73:	83 c4 10             	add    esp,0x10
c000fd76:	85 c0                	test   eax,eax
c000fd78:	74 23                	je     c000fd9d <CPU::detectFeatures()+0x241>
c000fd7a:	57                   	push   edi
c000fd7b:	57                   	push   edi
c000fd7c:	68 52 12 02 c0       	push   0xc0021252
c000fd81:	55                   	push   ebp
c000fd82:	e8 c9 09 ff ff       	call   c0000750 <strcmp>
c000fd87:	83 c4 10             	add    esp,0x10
c000fd8a:	85 c0                	test   eax,eax
c000fd8c:	75 1e                	jne    c000fdac <CPU::detectFeatures()+0x250>
c000fd8e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fd98:	e9 8a 01 00 00       	jmp    c000ff27 <CPU::detectFeatures()+0x3cb>
c000fd9d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fda7:	e9 7b 01 00 00       	jmp    c000ff27 <CPU::detectFeatures()+0x3cb>
c000fdac:	56                   	push   esi
c000fdad:	56                   	push   esi
c000fdae:	68 5f 12 02 c0       	push   0xc002125f
c000fdb3:	55                   	push   ebp
c000fdb4:	e8 97 09 ff ff       	call   c0000750 <strcmp>
c000fdb9:	83 c4 10             	add    esp,0x10
c000fdbc:	85 c0                	test   eax,eax
c000fdbe:	75 0f                	jne    c000fdcf <CPU::detectFeatures()+0x273>
c000fdc0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fdca:	e9 58 01 00 00       	jmp    c000ff27 <CPU::detectFeatures()+0x3cb>
c000fdcf:	51                   	push   ecx
c000fdd0:	51                   	push   ecx
c000fdd1:	68 1e 12 02 c0       	push   0xc002121e
c000fdd6:	55                   	push   ebp
c000fdd7:	e8 74 09 ff ff       	call   c0000750 <strcmp>
c000fddc:	83 c4 10             	add    esp,0x10
c000fddf:	85 c0                	test   eax,eax
c000fde1:	75 0f                	jne    c000fdf2 <CPU::detectFeatures()+0x296>
c000fde3:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fded:	e9 35 01 00 00       	jmp    c000ff27 <CPU::detectFeatures()+0x3cb>
c000fdf2:	52                   	push   edx
c000fdf3:	52                   	push   edx
c000fdf4:	68 6c 12 02 c0       	push   0xc002126c
c000fdf9:	55                   	push   ebp
c000fdfa:	e8 51 09 ff ff       	call   c0000750 <strcmp>
c000fdff:	83 c4 10             	add    esp,0x10
c000fe02:	85 c0                	test   eax,eax
c000fe04:	75 0f                	jne    c000fe15 <CPU::detectFeatures()+0x2b9>
c000fe06:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fe10:	e9 12 01 00 00       	jmp    c000ff27 <CPU::detectFeatures()+0x3cb>
c000fe15:	50                   	push   eax
c000fe16:	50                   	push   eax
c000fe17:	68 79 12 02 c0       	push   0xc0021279
c000fe1c:	55                   	push   ebp
c000fe1d:	e8 2e 09 ff ff       	call   c0000750 <strcmp>
c000fe22:	83 c4 10             	add    esp,0x10
c000fe25:	85 c0                	test   eax,eax
c000fe27:	75 0f                	jne    c000fe38 <CPU::detectFeatures()+0x2dc>
c000fe29:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fe33:	e9 ef 00 00 00       	jmp    c000ff27 <CPU::detectFeatures()+0x3cb>
c000fe38:	50                   	push   eax
c000fe39:	50                   	push   eax
c000fe3a:	68 86 12 02 c0       	push   0xc0021286
c000fe3f:	55                   	push   ebp
c000fe40:	e8 0b 09 ff ff       	call   c0000750 <strcmp>
c000fe45:	83 c4 10             	add    esp,0x10
c000fe48:	85 c0                	test   eax,eax
c000fe4a:	75 0f                	jne    c000fe5b <CPU::detectFeatures()+0x2ff>
c000fe4c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fe56:	e9 cc 00 00 00       	jmp    c000ff27 <CPU::detectFeatures()+0x3cb>
c000fe5b:	50                   	push   eax
c000fe5c:	50                   	push   eax
c000fe5d:	68 93 12 02 c0       	push   0xc0021293
c000fe62:	55                   	push   ebp
c000fe63:	e8 e8 08 ff ff       	call   c0000750 <strcmp>
c000fe68:	83 c4 10             	add    esp,0x10
c000fe6b:	85 c0                	test   eax,eax
c000fe6d:	75 0f                	jne    c000fe7e <CPU::detectFeatures()+0x322>
c000fe6f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fe79:	e9 a9 00 00 00       	jmp    c000ff27 <CPU::detectFeatures()+0x3cb>
c000fe7e:	50                   	push   eax
c000fe7f:	50                   	push   eax
c000fe80:	68 a0 12 02 c0       	push   0xc00212a0
c000fe85:	55                   	push   ebp
c000fe86:	e8 c5 08 ff ff       	call   c0000750 <strcmp>
c000fe8b:	83 c4 10             	add    esp,0x10
c000fe8e:	85 c0                	test   eax,eax
c000fe90:	75 0f                	jne    c000fea1 <CPU::detectFeatures()+0x345>
c000fe92:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fe9c:	e9 86 00 00 00       	jmp    c000ff27 <CPU::detectFeatures()+0x3cb>
c000fea1:	50                   	push   eax
c000fea2:	50                   	push   eax
c000fea3:	68 ad 12 02 c0       	push   0xc00212ad
c000fea8:	55                   	push   ebp
c000fea9:	e8 a2 08 ff ff       	call   c0000750 <strcmp>
c000feae:	83 c4 10             	add    esp,0x10
c000feb1:	85 c0                	test   eax,eax
c000feb3:	75 0c                	jne    c000fec1 <CPU::detectFeatures()+0x365>
c000feb5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000febf:	eb 66                	jmp    c000ff27 <CPU::detectFeatures()+0x3cb>
c000fec1:	50                   	push   eax
c000fec2:	50                   	push   eax
c000fec3:	68 ba 12 02 c0       	push   0xc00212ba
c000fec8:	55                   	push   ebp
c000fec9:	e8 82 08 ff ff       	call   c0000750 <strcmp>
c000fece:	83 c4 10             	add    esp,0x10
c000fed1:	85 c0                	test   eax,eax
c000fed3:	75 0c                	jne    c000fee1 <CPU::detectFeatures()+0x385>
c000fed5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fedf:	eb 46                	jmp    c000ff27 <CPU::detectFeatures()+0x3cb>
c000fee1:	57                   	push   edi
c000fee2:	57                   	push   edi
c000fee3:	68 c7 12 02 c0       	push   0xc00212c7
c000fee8:	55                   	push   ebp
c000fee9:	e8 62 08 ff ff       	call   c0000750 <strcmp>
c000feee:	83 c4 10             	add    esp,0x10
c000fef1:	85 c0                	test   eax,eax
c000fef3:	74 e0                	je     c000fed5 <CPU::detectFeatures()+0x379>
c000fef5:	56                   	push   esi
c000fef6:	56                   	push   esi
c000fef7:	68 d4 12 02 c0       	push   0xc00212d4
c000fefc:	55                   	push   ebp
c000fefd:	e8 4e 08 ff ff       	call   c0000750 <strcmp>
c000ff02:	83 c4 10             	add    esp,0x10
c000ff05:	85 c0                	test   eax,eax
c000ff07:	74 cc                	je     c000fed5 <CPU::detectFeatures()+0x379>
c000ff09:	51                   	push   ecx
c000ff0a:	51                   	push   ecx
c000ff0b:	68 e1 12 02 c0       	push   0xc00212e1
c000ff10:	55                   	push   ebp
c000ff11:	e8 3a 08 ff ff       	call   c0000750 <strcmp>
c000ff16:	83 c4 10             	add    esp,0x10
c000ff19:	85 c0                	test   eax,eax
c000ff1b:	74 b8                	je     c000fed5 <CPU::detectFeatures()+0x379>
c000ff1d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000ff27:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000ff2c:	0f 86 be 00 00 00    	jbe    c000fff0 <CPU::detectFeatures()+0x494>
c000ff32:	83 ec 0c             	sub    esp,0xc
c000ff35:	68 80 00 00 00       	push   0x80
c000ff3a:	e8 31 fb ff ff       	call   c000fa70 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000ff3f:	83 e0 01             	and    eax,0x1
c000ff42:	c1 e0 06             	shl    eax,0x6
c000ff45:	89 c2                	mov    edx,eax
c000ff47:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000ff4d:	83 e0 bf             	and    eax,0xffffffbf
c000ff50:	09 d0                	or     eax,edx
c000ff52:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000ff58:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000ff5f:	e8 0c fb ff ff       	call   c000fa70 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000ff64:	83 e0 01             	and    eax,0x1
c000ff67:	c1 e0 04             	shl    eax,0x4
c000ff6a:	89 c2                	mov    edx,eax
c000ff6c:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ff72:	83 e0 ef             	and    eax,0xffffffef
c000ff75:	09 d0                	or     eax,edx
c000ff77:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ff7d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000ff84:	e8 e7 fa ff ff       	call   c000fa70 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000ff89:	89 c2                	mov    edx,eax
c000ff8b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000ff91:	c1 e2 07             	shl    edx,0x7
c000ff94:	83 e0 7f             	and    eax,0x7f
c000ff97:	09 d0                	or     eax,edx
c000ff99:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000ff9f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000ffa6:	e8 f3 fa ff ff       	call   c000fa9e <CPU::cpuidCheckExtendedECX(unsigned int)>
c000ffab:	83 e0 01             	and    eax,0x1
c000ffae:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ffb5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000ffbb:	83 e0 f7             	and    eax,0xfffffff7
c000ffbe:	09 d0                	or     eax,edx
c000ffc0:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000ffc6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000ffcd:	e8 cc fa ff ff       	call   c000fa9e <CPU::cpuidCheckExtendedECX(unsigned int)>
c000ffd2:	83 c4 10             	add    esp,0x10
c000ffd5:	83 e0 01             	and    eax,0x1
c000ffd8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ffdf:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000ffe5:	83 e0 fb             	and    eax,0xfffffffb
c000ffe8:	09 d0                	or     eax,edx
c000ffea:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fff0:	83 ec 0c             	sub    esp,0xc
c000fff3:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fff7:	50                   	push   eax
c000fff8:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fffc:	50                   	push   eax
c000fffd:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010001:	57                   	push   edi
c0010002:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010006:	56                   	push   esi
c0010007:	6a 01                	push   0x1
c0010009:	e8 82 f9 ff ff       	call   c000f990 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001000e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010012:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010018:	89 c1                	mov    ecx,eax
c001001a:	83 e2 f0             	and    edx,0xfffffff0
c001001d:	83 e1 0f             	and    ecx,0xf
c0010020:	09 ca                	or     edx,ecx
c0010022:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010028:	89 c2                	mov    edx,eax
c001002a:	c1 ea 04             	shr    edx,0x4
c001002d:	83 e2 0f             	and    edx,0xf
c0010030:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010034:	89 d1                	mov    ecx,edx
c0010036:	83 c4 20             	add    esp,0x20
c0010039:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001003f:	c1 e1 06             	shl    ecx,0x6
c0010042:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010048:	09 ca                	or     edx,ecx
c001004a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010051:	89 c2                	mov    edx,eax
c0010053:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010059:	c1 ea 08             	shr    edx,0x8
c001005c:	83 e1 3f             	and    ecx,0x3f
c001005f:	83 e2 0f             	and    edx,0xf
c0010062:	89 d5                	mov    ebp,edx
c0010064:	83 e5 03             	and    ebp,0x3
c0010067:	c1 e5 06             	shl    ebp,0x6
c001006a:	09 e9                	or     ecx,ebp
c001006c:	89 d5                	mov    ebp,edx
c001006e:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010074:	c1 ed 02             	shr    ebp,0x2
c0010077:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001007d:	83 e1 c0             	and    ecx,0xffffffc0
c0010080:	09 e9                	or     ecx,ebp
c0010082:	89 c5                	mov    ebp,eax
c0010084:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001008a:	c1 ed 08             	shr    ebp,0x8
c001008d:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0010093:	83 e5 30             	and    ebp,0x30
c0010096:	83 e1 cf             	and    ecx,0xffffffcf
c0010099:	09 e9                	or     ecx,ebp
c001009b:	83 fa 06             	cmp    edx,0x6
c001009e:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00100a4:	74 05                	je     c00100ab <CPU::detectFeatures()+0x54f>
c00100a6:	83 fa 0f             	cmp    edx,0xf
c00100a9:	75 64                	jne    c001010f <CPU::detectFeatures()+0x5b3>
c00100ab:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00100b1:	89 c1                	mov    ecx,eax
c00100b3:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00100b9:	c1 e9 10             	shr    ecx,0x10
c00100bc:	c1 e1 04             	shl    ecx,0x4
c00100bf:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00100c3:	0f b6 c9             	movzx  ecx,cl
c00100c6:	c1 e1 06             	shl    ecx,0x6
c00100c9:	09 e9                	or     ecx,ebp
c00100cb:	83 fa 0f             	cmp    edx,0xf
c00100ce:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c00100d5:	75 38                	jne    c001010f <CPU::detectFeatures()+0x5b3>
c00100d7:	c1 e8 14             	shr    eax,0x14
c00100da:	83 c0 0f             	add    eax,0xf
c00100dd:	0f b6 c0             	movzx  eax,al
c00100e0:	89 c2                	mov    edx,eax
c00100e2:	c1 e8 02             	shr    eax,0x2
c00100e5:	83 e2 03             	and    edx,0x3
c00100e8:	89 d1                	mov    ecx,edx
c00100ea:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00100f0:	c1 e1 06             	shl    ecx,0x6
c00100f3:	83 e2 3f             	and    edx,0x3f
c00100f6:	09 ca                	or     edx,ecx
c00100f8:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00100fe:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010104:	83 e2 c0             	and    edx,0xffffffc0
c0010107:	09 d0                	or     eax,edx
c0010109:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001010f:	83 ec 0c             	sub    esp,0xc
c0010112:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010118:	83 c8 07             	or     eax,0x7
c001011b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010121:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010125:	50                   	push   eax
c0010126:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001012a:	55                   	push   ebp
c001012b:	57                   	push   edi
c001012c:	56                   	push   esi
c001012d:	68 00 00 00 80       	push   0x80000000
c0010132:	e8 59 f8 ff ff       	call   c000f990 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010137:	83 c4 20             	add    esp,0x20
c001013a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010142:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010146:	76 1e                	jbe    c0010166 <CPU::detectFeatures()+0x60a>
c0010148:	83 ec 0c             	sub    esp,0xc
c001014b:	50                   	push   eax
c001014c:	55                   	push   ebp
c001014d:	57                   	push   edi
c001014e:	56                   	push   esi
c001014f:	68 01 00 00 80       	push   0x80000001
c0010154:	e8 37 f8 ff ff       	call   c000f990 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010159:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010163:	83 c4 20             	add    esp,0x20
c0010166:	52                   	push   edx
c0010167:	52                   	push   edx
c0010168:	68 ed 12 02 c0       	push   0xc00212ed
c001016d:	53                   	push   ebx
c001016e:	e8 99 c0 ff ff       	call   c000c20c <Device::setName(char const*)>
c0010173:	83 c4 10             	add    esp,0x10
c0010176:	eb 69                	jmp    c00101e1 <CPU::detectFeatures()+0x685>
c0010178:	50                   	push   eax
c0010179:	50                   	push   eax
c001017a:	68 52 12 02 c0       	push   0xc0021252
c001017f:	55                   	push   ebp
c0010180:	e8 bb 04 ff ff       	call   c0000640 <strcpy>
c0010185:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001018f:	e8 2f 00 ff ff       	call   c00001c3 <is486>
c0010194:	83 c4 10             	add    esp,0x10
c0010197:	85 c0                	test   eax,eax
c0010199:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001019f:	74 1f                	je     c00101c0 <CPU::detectFeatures()+0x664>
c00101a1:	83 c8 07             	or     eax,0x7
c00101a4:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00101aa:	0f 20 c0             	mov    eax,cr0
c00101ad:	83 e0 14             	and    eax,0x14
c00101b0:	83 f8 04             	cmp    eax,0x4
c00101b3:	75 10                	jne    c00101c5 <CPU::detectFeatures()+0x669>
c00101b5:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00101bb:	83 e0 fd             	and    eax,0xfffffffd
c00101be:	eb 1b                	jmp    c00101db <CPU::detectFeatures()+0x67f>
c00101c0:	83 e0 f8             	and    eax,0xfffffff8
c00101c3:	eb df                	jmp    c00101a4 <CPU::detectFeatures()+0x648>
c00101c5:	e8 d4 ff fe ff       	call   c000019e <hasLegacyFPU>
c00101ca:	83 e0 01             	and    eax,0x1
c00101cd:	8d 14 00             	lea    edx,[eax+eax*1]
c00101d0:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00101d6:	83 e0 fd             	and    eax,0xfffffffd
c00101d9:	09 d0                	or     eax,edx
c00101db:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00101e1:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c00101e8:	74 17                	je     c0010201 <CPU::detectFeatures()+0x6a5>
c00101ea:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c00101f0:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c00101f6:	83 c8 10             	or     eax,0x10
c00101f9:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c00101ff:	eb 20                	jmp    c0010221 <CPU::detectFeatures()+0x6c5>
c0010201:	e8 98 ff fe ff       	call   c000019e <hasLegacyFPU>
c0010206:	83 e0 01             	and    eax,0x1
c0010209:	8d 14 00             	lea    edx,[eax+eax*1]
c001020c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010212:	83 e0 fd             	and    eax,0xfffffffd
c0010215:	09 d0                	or     eax,edx
c0010217:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001021d:	a8 02                	test   al,0x2
c001021f:	75 c9                	jne    c00101ea <CPU::detectFeatures()+0x68e>
c0010221:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010228:	83 c4 2c             	add    esp,0x2c
c001022b:	5b                   	pop    ebx
c001022c:	5e                   	pop    esi
c001022d:	5f                   	pop    edi
c001022e:	5d                   	pop    ebp
c001022f:	c3                   	ret    

c0010230 <CPU::setupSMEP()>:
c0010230:	0f 20 e0             	mov    eax,cr4
c0010233:	0d 00 00 10 00       	or     eax,0x100000
c0010238:	0f 22 e0             	mov    cr4,eax
c001023b:	c3                   	ret    

c001023c <CPU::setupUMIP()>:
c001023c:	0f 20 e0             	mov    eax,cr4
c001023f:	80 cc 08             	or     ah,0x8
c0010242:	0f 22 e0             	mov    cr4,eax
c0010245:	c3                   	ret    

c0010246 <CPU::setupTSC()>:
c0010246:	0f 20 e0             	mov    eax,cr4
c0010249:	83 c8 04             	or     eax,0x4
c001024c:	0f 22 e0             	mov    cr4,eax
c001024f:	c3                   	ret    

c0010250 <CPU::setupLargePages()>:
c0010250:	0f 20 e0             	mov    eax,cr4
c0010253:	83 c8 10             	or     eax,0x10
c0010256:	0f 22 e0             	mov    cr4,eax
c0010259:	c3                   	ret    

c001025a <CPU::setupPAT()>:
c001025a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001025f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010266:	74 2c                	je     c0010294 <CPU::setupPAT()+0x3a>
c0010268:	53                   	push   ebx
c0010269:	83 ec 10             	sub    esp,0x10
c001026c:	68 77 02 00 00       	push   0x277
c0010271:	50                   	push   eax
c0010272:	e8 41 6e ff ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c0010277:	83 e2 f8             	and    edx,0xfffffff8
c001027a:	83 ca 01             	or     edx,0x1
c001027d:	52                   	push   edx
c001027e:	50                   	push   eax
c001027f:	68 77 02 00 00       	push   0x277
c0010284:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001028a:	e8 55 6e ff ff       	call   c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>
c001028f:	83 c4 28             	add    esp,0x28
c0010292:	5b                   	pop    ebx
c0010293:	c3                   	ret    
c0010294:	c3                   	ret    
c0010295:	90                   	nop

c0010296 <CPU::setupMTRR()>:
c0010296:	c3                   	ret    
c0010297:	90                   	nop

c0010298 <CPU::setupGlobalPages()>:
c0010298:	0f 20 e0             	mov    eax,cr4
c001029b:	0c 80                	or     al,0x80
c001029d:	0f 22 e0             	mov    cr4,eax
c00102a0:	c3                   	ret    
c00102a1:	90                   	nop

c00102a2 <CPU::allowUsermodeDataAccess()>:
c00102a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102a6:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00102ad:	74 03                	je     c00102b2 <CPU::allowUsermodeDataAccess()+0x10>
c00102af:	0f 01 cb             	stac   
c00102b2:	c3                   	ret    
c00102b3:	90                   	nop

c00102b4 <CPU::prohibitUsermodeDataAccess()>:
c00102b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102b8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00102bf:	74 03                	je     c00102c4 <CPU::prohibitUsermodeDataAccess()+0x10>
c00102c1:	0f 01 ca             	clac   
c00102c4:	c3                   	ret    
c00102c5:	90                   	nop

c00102c6 <CPU::setupSMAP()>:
c00102c6:	0f 20 e0             	mov    eax,cr4
c00102c9:	0d 00 00 20 00       	or     eax,0x200000
c00102ce:	0f 22 e0             	mov    cr4,eax
c00102d1:	eb e1                	jmp    c00102b4 <CPU::prohibitUsermodeDataAccess()>
c00102d3:	90                   	nop

c00102d4 <CPU::setupFeatures()>:
c00102d4:	53                   	push   ebx
c00102d5:	83 ec 08             	sub    esp,0x8
c00102d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102dc:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c00102e3:	74 18                	je     c00102fd <CPU::setupFeatures()+0x29>
c00102e5:	83 ec 0c             	sub    esp,0xc
c00102e8:	68 f9 12 02 c0       	push   0xc00212f9
c00102ed:	e8 85 a6 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c00102f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102f5:	e8 42 ff ff ff       	call   c001023c <CPU::setupUMIP()>
c00102fa:	83 c4 10             	add    esp,0x10
c00102fd:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010304:	74 18                	je     c001031e <CPU::setupFeatures()+0x4a>
c0010306:	83 ec 0c             	sub    esp,0xc
c0010309:	68 03 13 02 c0       	push   0xc0021303
c001030e:	e8 64 a6 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0010313:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010316:	e8 2b ff ff ff       	call   c0010246 <CPU::setupTSC()>
c001031b:	83 c4 10             	add    esp,0x10
c001031e:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010325:	74 18                	je     c001033f <CPU::setupFeatures()+0x6b>
c0010327:	83 ec 0c             	sub    esp,0xc
c001032a:	68 0c 13 02 c0       	push   0xc002130c
c001032f:	e8 43 a6 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0010334:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010337:	e8 14 ff ff ff       	call   c0010250 <CPU::setupLargePages()>
c001033c:	83 c4 10             	add    esp,0x10
c001033f:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010346:	74 18                	je     c0010360 <CPU::setupFeatures()+0x8c>
c0010348:	83 ec 0c             	sub    esp,0xc
c001034b:	68 15 13 02 c0       	push   0xc0021315
c0010350:	e8 22 a6 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0010355:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010358:	e8 3b ff ff ff       	call   c0010298 <CPU::setupGlobalPages()>
c001035d:	83 c4 10             	add    esp,0x10
c0010360:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010367:	74 18                	je     c0010381 <CPU::setupFeatures()+0xad>
c0010369:	83 ec 0c             	sub    esp,0xc
c001036c:	68 27 13 02 c0       	push   0xc0021327
c0010371:	e8 01 a6 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0010376:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010379:	e8 dc fe ff ff       	call   c001025a <CPU::setupPAT()>
c001037e:	83 c4 10             	add    esp,0x10
c0010381:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010388:	74 11                	je     c001039b <CPU::setupFeatures()+0xc7>
c001038a:	c7 44 24 10 30 13 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021330
c0010392:	83 c4 08             	add    esp,0x8
c0010395:	5b                   	pop    ebx
c0010396:	e9 dc a5 ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)>
c001039b:	83 c4 08             	add    esp,0x8
c001039e:	5b                   	pop    ebx
c001039f:	c3                   	ret    

c00103a0 <CPU::open(int, int, void*)>:
c00103a0:	55                   	push   ebp
c00103a1:	57                   	push   edi
c00103a2:	56                   	push   esi
c00103a3:	53                   	push   ebx
c00103a4:	83 ec 18             	sub    esp,0x18
c00103a7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00103ab:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00103af:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00103b3:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00103b9:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c00103bf:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c00103c5:	50                   	push   eax
c00103c6:	e8 eb 6f ff ff       	call   c00073b6 <GDT::setup()>
c00103cb:	83 c4 0c             	add    esp,0xc
c00103ce:	6a 00                	push   0x0
c00103d0:	68 ef be ad de       	push   0xdeadbeef
c00103d5:	55                   	push   ebp
c00103d6:	e8 a1 8b ff ff       	call   c0008f7c <TSS::setup(unsigned long, unsigned long)>
c00103db:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00103de:	e8 79 8b ff ff       	call   c0008f5c <TSS::flush()>
c00103e3:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00103e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00103ec:	e8 29 72 ff ff       	call   c000761a <IDT::setup()>
c00103f1:	b8 00 04 00 00       	mov    eax,0x400
c00103f6:	0f 23 f8             	mov    db7,eax
c00103f9:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010403:	e8 aa 79 ff ff       	call   c0007db2 <Phys::allocatePage()>
c0010408:	83 c4 10             	add    esp,0x10
c001040b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010411:	85 f6                	test   esi,esi
c0010413:	89 38                	mov    DWORD PTR [eax],edi
c0010415:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001041b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001041e:	74 10                	je     c0010430 <CPU::open(int, int, void*)+0x90>
c0010420:	50                   	push   eax
c0010421:	50                   	push   eax
c0010422:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010428:	56                   	push   esi
c0010429:	e8 de 9a ff ff       	call   c0009f0c <VAS::setCPUSpecific(unsigned long)>
c001042e:	eb 0d                	jmp    c001043d <CPU::open(int, int, void*)+0x9d>
c0010430:	83 ec 0c             	sub    esp,0xc
c0010433:	68 3a 13 02 c0       	push   0xc002133a
c0010438:	e8 9e 07 00 00       	call   c0010bdb <KePanic(char const*)>
c001043d:	83 c4 10             	add    esp,0x10
c0010440:	83 ec 0c             	sub    esp,0xc
c0010443:	68 48 13 02 c0       	push   0xc0021348
c0010448:	e8 d8 00 00 00       	call   c0010525 <KeSetBootMessage(char const*)>
c001044d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010450:	e8 07 f7 ff ff       	call   c000fb5c <CPU::detectFeatures()>
c0010455:	c7 04 24 6b 13 02 c0 	mov    DWORD PTR [esp],0xc002136b
c001045c:	e8 c4 00 00 00       	call   c0010525 <KeSetBootMessage(char const*)>
c0010461:	e8 3b 70 00 00       	call   c00174a1 <HalInitialise()>
c0010466:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c001046b:	83 e0 10             	and    eax,0x10
c001046e:	83 f8 01             	cmp    eax,0x1
c0010471:	19 c0                	sbb    eax,eax
c0010473:	83 e0 46             	and    eax,0x46
c0010476:	83 c0 1e             	add    eax,0x1e
c0010479:	89 04 24             	mov    DWORD PTR [esp],eax
c001047c:	e8 28 d6 ff ff       	call   c000daa9 <setupTimer(int)>
c0010481:	83 c4 10             	add    esp,0x10
c0010484:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001048a:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010491:	74 0c                	je     c001049f <CPU::open(int, int, void*)+0xff>
c0010493:	83 ec 0c             	sub    esp,0xc
c0010496:	53                   	push   ebx
c0010497:	e8 38 fe ff ff       	call   c00102d4 <CPU::setupFeatures()>
c001049c:	83 c4 10             	add    esp,0x10
c001049f:	83 c4 0c             	add    esp,0xc
c00104a2:	31 c0                	xor    eax,eax
c00104a4:	5b                   	pop    ebx
c00104a5:	5e                   	pop    esi
c00104a6:	5f                   	pop    edi
c00104a7:	5d                   	pop    ebp
c00104a8:	c3                   	ret    

c00104a9 <KeDisplaySplashScreen()>:
c00104a9:	55                   	push   ebp
c00104aa:	bd 05 00 00 00       	mov    ebp,0x5
c00104af:	57                   	push   edi
c00104b0:	bf 0a 00 00 00       	mov    edi,0xa
c00104b5:	56                   	push   esi
c00104b6:	31 f6                	xor    esi,esi
c00104b8:	53                   	push   ebx
c00104b9:	31 db                	xor    ebx,ebx
c00104bb:	83 ec 0c             	sub    esp,0xc
c00104be:	0f b6 96 a0 27 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdd860]
c00104c5:	89 d0                	mov    eax,edx
c00104c7:	85 d2                	test   edx,edx
c00104c9:	74 52                	je     c001051d <KeDisplaySplashScreen()+0x74>
c00104cb:	80 bb d6 27 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdd82a],0xdb
c00104d2:	75 13                	jne    c00104e7 <KeDisplaySplashScreen()+0x3e>
c00104d4:	0f b6 8b d5 27 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdd82b]
c00104db:	83 e1 fe             	and    ecx,0xfffffffe
c00104de:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c00104e4:	75 01                	jne    c00104e7 <KeDisplaySplashScreen()+0x3e>
c00104e6:	47                   	inc    edi
c00104e7:	83 fa 0d             	cmp    edx,0xd
c00104ea:	74 28                	je     c0010514 <KeDisplaySplashScreen()+0x6b>
c00104ec:	83 fa 0a             	cmp    edx,0xa
c00104ef:	75 0a                	jne    c00104fb <KeDisplaySplashScreen()+0x52>
c00104f1:	45                   	inc    ebp
c00104f2:	bf 0a 00 00 00       	mov    edi,0xa
c00104f7:	31 db                	xor    ebx,ebx
c00104f9:	eb 19                	jmp    c0010514 <KeDisplaySplashScreen()+0x6b>
c00104fb:	83 ec 0c             	sub    esp,0xc
c00104fe:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010501:	55                   	push   ebp
c0010502:	0f be c0             	movsx  eax,al
c0010505:	52                   	push   edx
c0010506:	43                   	inc    ebx
c0010507:	6a 00                	push   0x0
c0010509:	6a 0e                	push   0xe
c001050b:	50                   	push   eax
c001050c:	e8 0f 7c 00 00       	call   c0018120 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010511:	83 c4 20             	add    esp,0x20
c0010514:	46                   	inc    esi
c0010515:	81 fe 42 01 00 00    	cmp    esi,0x142
c001051b:	75 a1                	jne    c00104be <KeDisplaySplashScreen()+0x15>
c001051d:	83 c4 0c             	add    esp,0xc
c0010520:	5b                   	pop    ebx
c0010521:	5e                   	pop    esi
c0010522:	5f                   	pop    edi
c0010523:	5d                   	pop    ebp
c0010524:	c3                   	ret    

c0010525 <KeSetBootMessage(char const*)>:
c0010525:	57                   	push   edi
c0010526:	56                   	push   esi
c0010527:	53                   	push   ebx
c0010528:	81 ec a4 00 00 00    	sub    esp,0xa4
c001052e:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010535:	68 9e 00 00 00       	push   0x9e
c001053a:	6a 00                	push   0x0
c001053c:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010540:	56                   	push   esi
c0010541:	e8 aa ff fe ff       	call   c00004f0 <memset>
c0010546:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010549:	e8 22 00 ff ff       	call   c0000570 <strlen>
c001054e:	ba 50 00 00 00       	mov    edx,0x50
c0010553:	83 c4 10             	add    esp,0x10
c0010556:	29 c2                	sub    edx,eax
c0010558:	31 c9                	xor    ecx,ecx
c001055a:	83 e2 fe             	and    edx,0xfffffffe
c001055d:	01 f2                	add    edx,esi
c001055f:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010564:	84 c0                	test   al,al
c0010566:	74 0a                	je     c0010572 <KeSetBootMessage(char const*)+0x4d>
c0010568:	80 cc 0f             	or     ah,0xf
c001056b:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001056f:	41                   	inc    ecx
c0010570:	eb ed                	jmp    c001055f <KeSetBootMessage(char const*)+0x3a>
c0010572:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010577:	b9 9e 00 00 00       	mov    ecx,0x9e
c001057c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001057e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010584:	5b                   	pop    ebx
c0010585:	5e                   	pop    esi
c0010586:	5f                   	pop    edi
c0010587:	c3                   	ret    

c0010588 <EnvVarContainer::getEnv(char const*)>:
c0010588:	57                   	push   edi
c0010589:	56                   	push   esi
c001058a:	53                   	push   ebx
c001058b:	31 db                	xor    ebx,ebx
c001058d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010591:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010593:	7e 2b                	jle    c00105c0 <EnvVarContainer::getEnv(char const*)+0x38>
c0010595:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001059c:	50                   	push   eax
c001059d:	50                   	push   eax
c001059e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00105a1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00105a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00105a8:	e8 a3 01 ff ff       	call   c0000750 <strcmp>
c00105ad:	83 c4 10             	add    esp,0x10
c00105b0:	85 c0                	test   eax,eax
c00105b2:	75 09                	jne    c00105bd <EnvVarContainer::getEnv(char const*)+0x35>
c00105b4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00105b7:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00105bb:	eb 05                	jmp    c00105c2 <EnvVarContainer::getEnv(char const*)+0x3a>
c00105bd:	43                   	inc    ebx
c00105be:	eb d1                	jmp    c0010591 <EnvVarContainer::getEnv(char const*)+0x9>
c00105c0:	31 c0                	xor    eax,eax
c00105c2:	5b                   	pop    ebx
c00105c3:	5e                   	pop    esi
c00105c4:	5f                   	pop    edi
c00105c5:	c3                   	ret    

c00105c6 <EnvVarContainer::setEnv(char const*, char const*)>:
c00105c6:	55                   	push   ebp
c00105c7:	57                   	push   edi
c00105c8:	56                   	push   esi
c00105c9:	53                   	push   ebx
c00105ca:	83 ec 28             	sub    esp,0x28
c00105cd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00105d1:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00105d5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00105d9:	56                   	push   esi
c00105da:	e8 91 ff fe ff       	call   c0000570 <strlen>
c00105df:	40                   	inc    eax
c00105e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00105e3:	e8 c6 74 ff ff       	call   c0007aae <malloc>
c00105e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00105eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00105ef:	e8 7c ff fe ff       	call   c0000570 <strlen>
c00105f4:	40                   	inc    eax
c00105f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00105f8:	e8 b1 74 ff ff       	call   c0007aae <malloc>
c00105fd:	89 34 24             	mov    DWORD PTR [esp],esi
c0010600:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010604:	e8 67 ff fe ff       	call   c0000570 <strlen>
c0010609:	83 c4 0c             	add    esp,0xc
c001060c:	40                   	inc    eax
c001060d:	50                   	push   eax
c001060e:	6a 00                	push   0x0
c0010610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010614:	e8 d7 fe fe ff       	call   c00004f0 <memset>
c0010619:	89 34 24             	mov    DWORD PTR [esp],esi
c001061c:	e8 4f ff fe ff       	call   c0000570 <strlen>
c0010621:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010625:	8d 48 01             	lea    ecx,[eax+0x1]
c0010628:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001062a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001062d:	89 de                	mov    esi,ebx
c001062f:	e8 3c ff fe ff       	call   c0000570 <strlen>
c0010634:	83 c4 0c             	add    esp,0xc
c0010637:	40                   	inc    eax
c0010638:	50                   	push   eax
c0010639:	6a 00                	push   0x0
c001063b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001063f:	e8 ac fe fe ff       	call   c00004f0 <memset>
c0010644:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010647:	e8 24 ff fe ff       	call   c0000570 <strlen>
c001064c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010650:	8d 48 01             	lea    ecx,[eax+0x1]
c0010653:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010655:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010658:	40                   	inc    eax
c0010659:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001065c:	c1 e0 03             	shl    eax,0x3
c001065f:	5a                   	pop    edx
c0010660:	59                   	pop    ecx
c0010661:	50                   	push   eax
c0010662:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010665:	e8 30 74 ff ff       	call   c0007a9a <realloc>
c001066a:	8d 74 24 18          	lea    esi,[esp+0x18]
c001066e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010671:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010674:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010678:	b9 08 00 00 00       	mov    ecx,0x8
c001067d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001067f:	83 c4 2c             	add    esp,0x2c
c0010682:	5b                   	pop    ebx
c0010683:	5e                   	pop    esi
c0010684:	5f                   	pop    edi
c0010685:	5d                   	pop    ebp
c0010686:	c3                   	ret    
c0010687:	90                   	nop

c0010688 <EnvVarContainer::deleteEnv(char const*)>:
c0010688:	c3                   	ret    
c0010689:	90                   	nop

c001068a <EnvVarContainer::loadFrom(char const*, char const*)>:
c001068a:	55                   	push   ebp
c001068b:	57                   	push   edi
c001068c:	56                   	push   esi
c001068d:	53                   	push   ebx
c001068e:	81 ec 38 01 00 00    	sub    esp,0x138
c0010694:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001069b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00106a2:	68 14 01 00 00       	push   0x114
c00106a7:	e8 02 74 ff ff       	call   c0007aae <malloc>
c00106ac:	83 c4 0c             	add    esp,0xc
c00106af:	89 c3                	mov    ebx,eax
c00106b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00106b4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00106bb:	50                   	push   eax
c00106bc:	e8 0f ab ff ff       	call   c000b1d0 <File::File(char const*, Process*)>
c00106c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106c4:	e8 31 ae ff ff       	call   c000b4fa <File::exists()>
c00106c9:	83 c4 10             	add    esp,0x10
c00106cc:	84 c0                	test   al,al
c00106ce:	75 31                	jne    c0010701 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00106d0:	50                   	push   eax
c00106d1:	50                   	push   eax
c00106d2:	6a 12                	push   0x12
c00106d4:	53                   	push   ebx
c00106d5:	e8 b2 ab ff ff       	call   c000b28c <File::open(FileOpenMode)>
c00106da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106dc:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00106df:	89 34 24             	mov    DWORD PTR [esp],esi
c00106e2:	e8 89 fe fe ff       	call   c0000570 <strlen>
c00106e7:	5a                   	pop    edx
c00106e8:	31 d2                	xor    edx,edx
c00106ea:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00106ee:	51                   	push   ecx
c00106ef:	56                   	push   esi
c00106f0:	52                   	push   edx
c00106f1:	50                   	push   eax
c00106f2:	53                   	push   ebx
c00106f3:	ff d7                	call   edi
c00106f5:	83 c4 14             	add    esp,0x14
c00106f8:	53                   	push   ebx
c00106f9:	e8 ec ab ff ff       	call   c000b2ea <File::close()>
c00106fe:	83 c4 10             	add    esp,0x10
c0010701:	56                   	push   esi
c0010702:	31 f6                	xor    esi,esi
c0010704:	68 00 01 00 00       	push   0x100
c0010709:	6a 00                	push   0x0
c001070b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001070f:	50                   	push   eax
c0010710:	e8 db fd fe ff       	call   c00004f0 <memset>
c0010715:	5f                   	pop    edi
c0010716:	58                   	pop    eax
c0010717:	6a 01                	push   0x1
c0010719:	53                   	push   ebx
c001071a:	e8 6d ab ff ff       	call   c000b28c <File::open(FileOpenMode)>
c001071f:	83 c4 10             	add    esp,0x10
c0010722:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001072a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010732:	83 ec 0c             	sub    esp,0xc
c0010735:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010737:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001073b:	51                   	push   ecx
c001073c:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010740:	52                   	push   edx
c0010741:	6a 00                	push   0x0
c0010743:	6a 01                	push   0x1
c0010745:	53                   	push   ebx
c0010746:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010749:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001074e:	83 c4 20             	add    esp,0x20
c0010751:	89 c2                	mov    edx,eax
c0010753:	85 c0                	test   eax,eax
c0010755:	0f 84 36 01 00 00    	je     c0010891 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001075b:	83 f8 0d             	cmp    eax,0xd
c001075e:	0f 84 22 01 00 00    	je     c0010886 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010764:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010769:	0f 84 f0 00 00 00    	je     c001085f <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001076f:	83 f8 0a             	cmp    eax,0xa
c0010772:	74 13                	je     c0010787 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010774:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010779:	74 0c                	je     c0010787 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001077b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010781:	0f 8e f6 00 00 00    	jle    c001087d <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010787:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001078b:	83 ec 0c             	sub    esp,0xc
c001078e:	8d 78 01             	lea    edi,[eax+0x1]
c0010791:	57                   	push   edi
c0010792:	e8 17 73 ff ff       	call   c0007aae <malloc>
c0010797:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001079b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001079f:	8d 56 04             	lea    edx,[esi+0x4]
c00107a2:	89 14 24             	mov    DWORD PTR [esp],edx
c00107a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00107a9:	e8 00 73 ff ff       	call   c0007aae <malloc>
c00107ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00107b2:	83 c4 0c             	add    esp,0xc
c00107b5:	57                   	push   edi
c00107b6:	6a 00                	push   0x0
c00107b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00107bc:	e8 2f fd fe ff       	call   c00004f0 <memset>
c00107c1:	8d 74 24 30          	lea    esi,[esp+0x30]
c00107c5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00107c9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00107cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107cf:	83 c4 0c             	add    esp,0xc
c00107d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107d6:	52                   	push   edx
c00107d7:	6a 00                	push   0x0
c00107d9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00107dd:	e8 0e fd fe ff       	call   c00004f0 <memset>
c00107e2:	8d 74 24 30          	lea    esi,[esp+0x30]
c00107e6:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00107ea:	89 34 24             	mov    DWORD PTR [esp],esi
c00107ed:	e8 7e fd fe ff       	call   c0000570 <strlen>
c00107f2:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00107f6:	89 c1                	mov    ecx,eax
c00107f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107fa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00107fd:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010800:	40                   	inc    eax
c0010801:	83 c4 10             	add    esp,0x10
c0010804:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010807:	85 d2                	test   edx,edx
c0010809:	75 0c                	jne    c0010817 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001080b:	83 ec 0c             	sub    esp,0xc
c001080e:	6a 08                	push   0x8
c0010810:	e8 99 72 ff ff       	call   c0007aae <malloc>
c0010815:	eb 0c                	jmp    c0010823 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010817:	c1 e0 03             	shl    eax,0x3
c001081a:	51                   	push   ecx
c001081b:	51                   	push   ecx
c001081c:	50                   	push   eax
c001081d:	52                   	push   edx
c001081e:	e8 77 72 ff ff       	call   c0007a9a <realloc>
c0010823:	83 c4 10             	add    esp,0x10
c0010826:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010829:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001082c:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001082f:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010833:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010837:	b9 08 00 00 00       	mov    ecx,0x8
c001083c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001083e:	31 f6                	xor    esi,esi
c0010840:	50                   	push   eax
c0010841:	68 00 01 00 00       	push   0x100
c0010846:	6a 00                	push   0x0
c0010848:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001084c:	50                   	push   eax
c001084d:	e8 9e fc fe ff       	call   c00004f0 <memset>
c0010852:	83 c4 10             	add    esp,0x10
c0010855:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001085d:	eb 27                	jmp    c0010886 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001085f:	83 f8 3d             	cmp    eax,0x3d
c0010862:	74 1e                	je     c0010882 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010864:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001086a:	7f 07                	jg     c0010873 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c001086c:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0010870:	46                   	inc    esi
c0010871:	eb 13                	jmp    c0010886 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010873:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001087b:	eb 09                	jmp    c0010886 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001087d:	83 f8 3d             	cmp    eax,0x3d
c0010880:	75 ea                	jne    c001086c <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010882:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010886:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001088b:	0f 85 99 fe ff ff    	jne    c001072a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010891:	83 ec 0c             	sub    esp,0xc
c0010894:	53                   	push   ebx
c0010895:	e8 50 aa ff ff       	call   c000b2ea <File::close()>
c001089a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001089c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001089f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00108a2:	81 c4 3c 01 00 00    	add    esp,0x13c
c00108a8:	5b                   	pop    ebx
c00108a9:	5e                   	pop    esi
c00108aa:	5f                   	pop    edi
c00108ab:	5d                   	pop    ebp
c00108ac:	c3                   	ret    
c00108ad:	90                   	nop

c00108ae <EnvVarContainer::__loadSystem()>:
c00108ae:	83 ec 10             	sub    esp,0x10
c00108b1:	68 00 29 02 c0       	push   0xc0022900
c00108b6:	68 ac 13 02 c0       	push   0xc00213ac
c00108bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108bf:	e8 c6 fd ff ff       	call   c001068a <EnvVarContainer::loadFrom(char const*, char const*)>
c00108c4:	83 c4 1c             	add    esp,0x1c
c00108c7:	c3                   	ret    

c00108c8 <EnvVarContainer::__loadUser()>:
c00108c8:	c3                   	ret    
c00108c9:	90                   	nop

c00108ca <EnvVarContainer::EnvVarContainer(Process*)>:
c00108ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00108d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108dc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00108df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00108ea:	90                   	nop
c00108eb:	c3                   	ret    

c00108ec <EnvVarContainer::~EnvVarContainer()>:
c00108ec:	83 ec 0c             	sub    esp,0xc
c00108ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00108f6:	85 c0                	test   eax,eax
c00108f8:	74 1d                	je     c0010917 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00108fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0010900:	85 c0                	test   eax,eax
c0010902:	74 13                	je     c0010917 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010908:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001090b:	83 ec 0c             	sub    esp,0xc
c001090e:	50                   	push   eax
c001090f:	e8 aa 71 ff ff       	call   c0007abe <free>
c0010914:	83 c4 10             	add    esp,0x10
c0010917:	90                   	nop
c0010918:	83 c4 0c             	add    esp,0xc
c001091b:	c3                   	ret    

c001091c <KeGetEnv(Process*, char const*)>:
c001091c:	53                   	push   ebx
c001091d:	83 ec 08             	sub    esp,0x8
c0010920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010924:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010928:	39 05 90 91 02 c0    	cmp    DWORD PTR ds:0xc0029190,eax
c001092e:	74 04                	je     c0010934 <KeGetEnv(Process*, char const*)+0x18>
c0010930:	85 c0                	test   eax,eax
c0010932:	75 0b                	jne    c001093f <KeGetEnv(Process*, char const*)+0x23>
c0010934:	a1 30 89 02 c0       	mov    eax,ds:0xc0028930
c0010939:	85 c0                	test   eax,eax
c001093b:	75 19                	jne    c0010956 <KeGetEnv(Process*, char const*)+0x3a>
c001093d:	eb 27                	jmp    c0010966 <KeGetEnv(Process*, char const*)+0x4a>
c001093f:	52                   	push   edx
c0010940:	52                   	push   edx
c0010941:	53                   	push   ebx
c0010942:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010948:	e8 3b fc ff ff       	call   c0010588 <EnvVarContainer::getEnv(char const*)>
c001094d:	83 c4 10             	add    esp,0x10
c0010950:	85 c0                	test   eax,eax
c0010952:	75 28                	jne    c001097c <KeGetEnv(Process*, char const*)+0x60>
c0010954:	eb de                	jmp    c0010934 <KeGetEnv(Process*, char const*)+0x18>
c0010956:	52                   	push   edx
c0010957:	52                   	push   edx
c0010958:	53                   	push   ebx
c0010959:	50                   	push   eax
c001095a:	e8 29 fc ff ff       	call   c0010588 <EnvVarContainer::getEnv(char const*)>
c001095f:	83 c4 10             	add    esp,0x10
c0010962:	85 c0                	test   eax,eax
c0010964:	75 16                	jne    c001097c <KeGetEnv(Process*, char const*)+0x60>
c0010966:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001096a:	a1 34 89 02 c0       	mov    eax,ds:0xc0028934
c001096f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010973:	83 c4 08             	add    esp,0x8
c0010976:	5b                   	pop    ebx
c0010977:	e9 0c fc ff ff       	jmp    c0010588 <EnvVarContainer::getEnv(char const*)>
c001097c:	83 c4 08             	add    esp,0x8
c001097f:	5b                   	pop    ebx
c0010980:	c3                   	ret    

c0010981 <KeSetEnvSystem(char const*, char const*)>:
c0010981:	83 ec 10             	sub    esp,0x10
c0010984:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010988:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001098c:	ff 35 34 89 02 c0    	push   DWORD PTR ds:0xc0028934
c0010992:	e8 2f fc ff ff       	call   c00105c6 <EnvVarContainer::setEnv(char const*, char const*)>
c0010997:	83 c4 1c             	add    esp,0x1c
c001099a:	c3                   	ret    

c001099b <KeSetEnvUser(char const*, char const*)>:
c001099b:	a1 30 89 02 c0       	mov    eax,ds:0xc0028930
c00109a0:	85 c0                	test   eax,eax
c00109a2:	74 15                	je     c00109b9 <KeSetEnvUser(char const*, char const*)+0x1e>
c00109a4:	83 ec 10             	sub    esp,0x10
c00109a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00109ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00109af:	50                   	push   eax
c00109b0:	e8 11 fc ff ff       	call   c00105c6 <EnvVarContainer::setEnv(char const*, char const*)>
c00109b5:	83 c4 1c             	add    esp,0x1c
c00109b8:	c3                   	ret    
c00109b9:	c3                   	ret    

c00109ba <KeSetEnvProcess(Process*, char const*, char const*)>:
c00109ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109be:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00109c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00109c8:	e9 f9 fb ff ff       	jmp    c00105c6 <EnvVarContainer::setEnv(char const*, char const*)>

c00109cd <KeDeleteEnvSystem(char const*)>:
c00109cd:	c3                   	ret    

c00109ce <KeDeleteEnvUser(char const*)>:
c00109ce:	c3                   	ret    

c00109cf <KeDeleteEnvProcess(Process*, char const*)>:
c00109cf:	c3                   	ret    

c00109d0 <KeNewProcessEnv(Process*)>:
c00109d0:	83 ec 28             	sub    esp,0x28
c00109d3:	6a 0c                	push   0xc
c00109d5:	e8 d4 70 ff ff       	call   c0007aae <malloc>
c00109da:	5a                   	pop    edx
c00109db:	59                   	pop    ecx
c00109dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00109e0:	50                   	push   eax
c00109e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00109e5:	e8 e0 fe ff ff       	call   c00108ca <EnvVarContainer::EnvVarContainer(Process*)>
c00109ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00109ee:	83 c4 2c             	add    esp,0x2c
c00109f1:	c3                   	ret    

c00109f2 <KeCopyProcessEnv(Process*, Process*)>:
c00109f2:	57                   	push   edi
c00109f3:	56                   	push   esi
c00109f4:	53                   	push   ebx
c00109f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109f9:	83 ec 0c             	sub    esp,0xc
c00109fc:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010a02:	6a 0c                	push   0xc
c0010a04:	e8 a5 70 ff ff       	call   c0007aae <malloc>
c0010a09:	89 c3                	mov    ebx,eax
c0010a0b:	58                   	pop    eax
c0010a0c:	5a                   	pop    edx
c0010a0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a11:	53                   	push   ebx
c0010a12:	e8 b3 fe ff ff       	call   c00108ca <EnvVarContainer::EnvVarContainer(Process*)>
c0010a17:	8b 07                	mov    eax,DWORD PTR [edi]
c0010a19:	89 03                	mov    DWORD PTR [ebx],eax
c0010a1b:	c1 e0 03             	shl    eax,0x3
c0010a1e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a21:	e8 88 70 ff ff       	call   c0007aae <malloc>
c0010a26:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010a29:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010a2b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010a2e:	c1 e1 03             	shl    ecx,0x3
c0010a31:	89 c7                	mov    edi,eax
c0010a33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010a35:	83 c4 10             	add    esp,0x10
c0010a38:	89 d8                	mov    eax,ebx
c0010a3a:	5b                   	pop    ebx
c0010a3b:	5e                   	pop    esi
c0010a3c:	5f                   	pop    edi
c0010a3d:	c3                   	ret    

c0010a3e <KeLoadSystemEnv()>:
c0010a3e:	53                   	push   ebx
c0010a3f:	83 ec 14             	sub    esp,0x14
c0010a42:	6a 0c                	push   0xc
c0010a44:	e8 65 70 ff ff       	call   c0007aae <malloc>
c0010a49:	89 c3                	mov    ebx,eax
c0010a4b:	58                   	pop    eax
c0010a4c:	5a                   	pop    edx
c0010a4d:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c0010a53:	53                   	push   ebx
c0010a54:	e8 71 fe ff ff       	call   c00108ca <EnvVarContainer::EnvVarContainer(Process*)>
c0010a59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a5c:	89 1d 34 89 02 c0    	mov    DWORD PTR ds:0xc0028934,ebx
c0010a62:	e8 47 fe ff ff       	call   c00108ae <EnvVarContainer::__loadSystem()>
c0010a67:	83 c4 18             	add    esp,0x18
c0010a6a:	5b                   	pop    ebx
c0010a6b:	c3                   	ret    

c0010a6c <KeLoadUserEnv()>:
c0010a6c:	53                   	push   ebx
c0010a6d:	83 ec 14             	sub    esp,0x14
c0010a70:	6a 0c                	push   0xc
c0010a72:	e8 37 70 ff ff       	call   c0007aae <malloc>
c0010a77:	89 c3                	mov    ebx,eax
c0010a79:	58                   	pop    eax
c0010a7a:	5a                   	pop    edx
c0010a7b:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c0010a81:	53                   	push   ebx
c0010a82:	e8 43 fe ff ff       	call   c00108ca <EnvVarContainer::EnvVarContainer(Process*)>
c0010a87:	89 1d 30 89 02 c0    	mov    DWORD PTR ds:0xc0028930,ebx
c0010a8d:	83 c4 18             	add    esp,0x18
c0010a90:	5b                   	pop    ebx
c0010a91:	c3                   	ret    

c0010a92 <KeFlushEnv()>:
c0010a92:	c3                   	ret    

c0010a93 <KeGetProcessTotalEnvCount(Process*)>:
c0010a93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a97:	8b 15 30 89 02 c0    	mov    edx,DWORD PTR ds:0xc0028930
c0010a9d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010aa3:	a1 34 89 02 c0       	mov    eax,ds:0xc0028934
c0010aa8:	8b 00                	mov    eax,DWORD PTR [eax]
c0010aaa:	03 01                	add    eax,DWORD PTR [ecx]
c0010aac:	85 d2                	test   edx,edx
c0010aae:	74 02                	je     c0010ab2 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0010ab0:	03 02                	add    eax,DWORD PTR [edx]
c0010ab2:	c3                   	ret    

c0010ab3 <KeGetProcessEnvPair(Process*, int)>:
c0010ab3:	57                   	push   edi
c0010ab4:	56                   	push   esi
c0010ab5:	8b 35 30 89 02 c0    	mov    esi,DWORD PTR ds:0xc0028930
c0010abb:	53                   	push   ebx
c0010abc:	85 f6                	test   esi,esi
c0010abe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010ac2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ac6:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010acc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010ad0:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010ad2:	75 16                	jne    c0010aea <KeGetProcessEnvPair(Process*, int)+0x37>
c0010ad4:	39 c2                	cmp    edx,eax
c0010ad6:	7c 16                	jl     c0010aee <KeGetProcessEnvPair(Process*, int)+0x3b>
c0010ad8:	8b 0d 34 89 02 c0    	mov    ecx,DWORD PTR ds:0xc0028934
c0010ade:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010ae0:	01 c6                	add    esi,eax
c0010ae2:	39 d6                	cmp    esi,edx
c0010ae4:	7e 3c                	jle    c0010b22 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0010ae6:	29 c2                	sub    edx,eax
c0010ae8:	eb 04                	jmp    c0010aee <KeGetProcessEnvPair(Process*, int)+0x3b>
c0010aea:	39 c2                	cmp    edx,eax
c0010aec:	7d 05                	jge    c0010af3 <KeGetProcessEnvPair(Process*, int)+0x40>
c0010aee:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010af1:	eb 20                	jmp    c0010b13 <KeGetProcessEnvPair(Process*, int)+0x60>
c0010af3:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010af5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010af8:	39 d1                	cmp    ecx,edx
c0010afa:	7e 04                	jle    c0010b00 <KeGetProcessEnvPair(Process*, int)+0x4d>
c0010afc:	29 c2                	sub    edx,eax
c0010afe:	eb 10                	jmp    c0010b10 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0010b00:	8b 35 34 89 02 c0    	mov    esi,DWORD PTR ds:0xc0028934
c0010b06:	03 0e                	add    ecx,DWORD PTR [esi]
c0010b08:	39 d1                	cmp    ecx,edx
c0010b0a:	7e 16                	jle    c0010b22 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0010b0c:	29 c2                	sub    edx,eax
c0010b0e:	29 fa                	sub    edx,edi
c0010b10:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010b13:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010b16:	8b 02                	mov    eax,DWORD PTR [edx]
c0010b18:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010b1b:	89 03                	mov    DWORD PTR [ebx],eax
c0010b1d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010b20:	eb 1d                	jmp    c0010b3f <KeGetProcessEnvPair(Process*, int)+0x8c>
c0010b22:	83 ec 0c             	sub    esp,0xc
c0010b25:	68 ce 13 02 c0       	push   0xc00213ce
c0010b2a:	e8 ac 00 00 00       	call   c0010bdb <KePanic(char const*)>
c0010b2f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010b35:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010b3c:	83 c4 10             	add    esp,0x10
c0010b3f:	89 d8                	mov    eax,ebx
c0010b41:	5b                   	pop    ebx
c0010b42:	5e                   	pop    esi
c0010b43:	5f                   	pop    edi
c0010b44:	c2 04 00             	ret    0x4

c0010b47 <CPU::current()>:
c0010b47:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010b4c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010b52:	c3                   	ret    

c0010b53 <operator new(unsigned long)>:
c0010b53:	e9 56 6f ff ff       	jmp    c0007aae <malloc>

c0010b58 <operator delete(void*)>:
c0010b58:	e9 71 6f ff ff       	jmp    c0007ace <rfree>

c0010b5d <disableIRQs()>:
c0010b5d:	fa                   	cli    
c0010b5e:	c3                   	ret    

c0010b5f <enableIRQs()>:
c0010b5f:	fb                   	sti    
c0010b60:	c3                   	ret    

c0010b61 <lockScheduler()>:
c0010b61:	fa                   	cli    
c0010b62:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0010b68:	c3                   	ret    

c0010b69 <unlockScheduler()>:
c0010b69:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0010b6e:	48                   	dec    eax
c0010b6f:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0010b74:	75 01                	jne    c0010b77 <unlockScheduler()+0xe>
c0010b76:	fb                   	sti    
c0010b77:	c3                   	ret    

c0010b78 <lockStuff()>:
c0010b78:	fa                   	cli    
c0010b79:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0010b7f:	ff 05 64 91 02 c0    	inc    DWORD PTR ds:0xc0029164
c0010b85:	c3                   	ret    

c0010b86 <unlockStuff()>:
c0010b86:	83 ec 0c             	sub    esp,0xc
c0010b89:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0010b8e:	48                   	dec    eax
c0010b8f:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c0010b94:	75 18                	jne    c0010bae <unlockStuff()+0x28>
c0010b96:	83 3d 60 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029160,0x0
c0010b9d:	74 0f                	je     c0010bae <unlockStuff()+0x28>
c0010b9f:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c0010ba9:	e8 1e 48 00 00       	call   c00153cc <schedule()>
c0010bae:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0010bb3:	48                   	dec    eax
c0010bb4:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0010bb9:	75 01                	jne    c0010bbc <unlockStuff()+0x36>
c0010bbb:	fb                   	sti    
c0010bbc:	83 c4 0c             	add    esp,0xc
c0010bbf:	c3                   	ret    

c0010bc0 <Virt::getAKernelVAS()>:
c0010bc0:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0010bc5:	c3                   	ret    

c0010bc6 <__not_memcpy>:
c0010bc6:	57                   	push   edi
c0010bc7:	56                   	push   esi
c0010bc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010bcc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010bd0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010bd4:	89 c7                	mov    edi,eax
c0010bd6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010bd8:	5e                   	pop    esi
c0010bd9:	5f                   	pop    edi
c0010bda:	c3                   	ret    

c0010bdb <KePanic(char const*)>:
c0010bdb:	c6 05 38 89 02 c0 01 	mov    BYTE PTR ds:0xc0028938,0x1
c0010be2:	e9 8b 67 00 00       	jmp    c0017372 <HalPanic(char const*)>

c0010be7 <KePowerThread(void*)>:
c0010be7:	83 ec 0c             	sub    esp,0xc
c0010bea:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0010bef:	48                   	dec    eax
c0010bf0:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0010bf5:	75 01                	jne    c0010bf8 <KePowerThread(void*)+0x11>
c0010bf7:	fb                   	sti    
c0010bf8:	83 ec 0c             	sub    esp,0xc
c0010bfb:	c6 05 40 89 02 c0 00 	mov    BYTE PTR ds:0xc0028940,0x0
c0010c02:	6a 0a                	push   0xa
c0010c04:	e8 07 4b 00 00       	call   c0015710 <sleep(unsigned int)>
c0010c09:	83 05 84 89 02 c0 0a 	add    DWORD PTR ds:0xc0028984,0xa
c0010c10:	83 c4 10             	add    esp,0x10
c0010c13:	eb e3                	jmp    c0010bf8 <KePowerThread(void*)+0x11>

c0010c15 <KeChangePowerSettings(PowerSettings)>:
c0010c15:	57                   	push   edi
c0010c16:	b9 09 00 00 00       	mov    ecx,0x9
c0010c1b:	56                   	push   esi
c0010c1c:	bf 60 89 02 c0       	mov    edi,0xc0028960
c0010c21:	fc                   	cld    
c0010c22:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010c26:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010c28:	5e                   	pop    esi
c0010c29:	5f                   	pop    edi
c0010c2a:	c3                   	ret    

c0010c2b <KeUserIOReceived()>:
c0010c2b:	c7 05 84 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028984,0x0
c0010c35:	c3                   	ret    

c0010c36 <KeHandlePowerButton()>:
c0010c36:	83 ec 0c             	sub    esp,0xc
c0010c39:	a1 60 89 02 c0       	mov    eax,ds:0xc0028960
c0010c3e:	83 f8 02             	cmp    eax,0x2
c0010c41:	75 10                	jne    c0010c53 <KeHandlePowerButton()+0x1d>
c0010c43:	83 ec 0c             	sub    esp,0xc
c0010c46:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010c4c:	e8 cf 64 ff ff       	call   c0007120 <Computer::shutdown()>
c0010c51:	eb 11                	jmp    c0010c64 <KeHandlePowerButton()+0x2e>
c0010c53:	48                   	dec    eax
c0010c54:	75 11                	jne    c0010c67 <KeHandlePowerButton()+0x31>
c0010c56:	83 ec 0c             	sub    esp,0xc
c0010c59:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010c5f:	e8 ec 64 ff ff       	call   c0007150 <Computer::sleep()>
c0010c64:	83 c4 10             	add    esp,0x10
c0010c67:	83 c4 0c             	add    esp,0xc
c0010c6a:	c3                   	ret    

c0010c6b <KeHandleSleepButton()>:
c0010c6b:	83 ec 0c             	sub    esp,0xc
c0010c6e:	a1 64 89 02 c0       	mov    eax,ds:0xc0028964
c0010c73:	83 f8 02             	cmp    eax,0x2
c0010c76:	75 10                	jne    c0010c88 <KeHandleSleepButton()+0x1d>
c0010c78:	83 ec 0c             	sub    esp,0xc
c0010c7b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010c81:	e8 9a 64 ff ff       	call   c0007120 <Computer::shutdown()>
c0010c86:	eb 11                	jmp    c0010c99 <KeHandleSleepButton()+0x2e>
c0010c88:	48                   	dec    eax
c0010c89:	75 11                	jne    c0010c9c <KeHandleSleepButton()+0x31>
c0010c8b:	83 ec 0c             	sub    esp,0xc
c0010c8e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010c94:	e8 b7 64 ff ff       	call   c0007150 <Computer::sleep()>
c0010c99:	83 c4 10             	add    esp,0x10
c0010c9c:	83 c4 0c             	add    esp,0xc
c0010c9f:	c3                   	ret    

c0010ca0 <KeSetupPowerManager()>:
c0010ca0:	83 ec 0c             	sub    esp,0xc
c0010ca3:	c7 05 84 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028984,0x0
c0010cad:	68 f0 00 00 00       	push   0xf0
c0010cb2:	c6 05 40 89 02 c0 00 	mov    BYTE PTR ds:0xc0028940,0x0
c0010cb9:	6a 00                	push   0x0
c0010cbb:	68 e7 0b 01 c0       	push   0xc0010be7
c0010cc0:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c0010cc6:	e8 b1 44 00 00       	call   c001517c <Process::createThread(void (*)(void*), void*, int)>
c0010ccb:	c7 05 60 89 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028960,0x2
c0010cd5:	c7 05 64 89 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028964,0x1
c0010cdf:	c7 05 68 89 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028968,0x3
c0010ce9:	c7 05 6c 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002896c,0x0
c0010cf3:	c7 05 78 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028978,0x0
c0010cfd:	c7 05 70 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028970,0x0
c0010d07:	c7 05 7c 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002897c,0x0
c0010d11:	c7 05 74 89 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028974,0x3c
c0010d1b:	c7 05 80 89 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028980,0x3c
c0010d25:	83 c4 1c             	add    esp,0x1c
c0010d28:	c3                   	ret    

c0010d29 <KeRand()>:
c0010d29:	69 05 88 89 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028988,0x2875
c0010d33:	69 0d 8c 89 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002898c,0xa2e7b175
c0010d3d:	53                   	push   ebx
c0010d3e:	01 c1                	add    ecx,eax
c0010d40:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010d45:	f7 25 88 89 02 c0    	mul    DWORD PTR ds:0xc0028988
c0010d4b:	01 ca                	add    edx,ecx
c0010d4d:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010d52:	83 d2 00             	adc    edx,0x0
c0010d55:	a3 88 89 02 c0       	mov    ds:0xc0028988,eax
c0010d5a:	0f b7 da             	movzx  ebx,dx
c0010d5d:	89 da                	mov    edx,ebx
c0010d5f:	89 1d 8c 89 02 c0    	mov    DWORD PTR ds:0xc002898c,ebx
c0010d65:	0f ac d0 0e          	shrd   eax,edx,0xe
c0010d69:	5b                   	pop    ebx
c0010d6a:	c3                   	ret    

c0010d6b <KeSeedRand(unsigned int)>:
c0010d6b:	53                   	push   ebx
c0010d6c:	83 ec 08             	sub    esp,0x8
c0010d6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d73:	e8 19 69 00 00       	call   c0017691 <HalGetRand()>
c0010d78:	c7 05 8c 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002898c,0x0
c0010d82:	31 d8                	xor    eax,ebx
c0010d84:	a3 88 89 02 c0       	mov    ds:0xc0028988,eax
c0010d89:	e8 9b ff ff ff       	call   c0010d29 <KeRand()>
c0010d8e:	83 c4 08             	add    esp,0x8
c0010d91:	5b                   	pop    ebx
c0010d92:	eb 95                	jmp    c0010d29 <KeRand()>

c0010d94 <KeInitRand()>:
c0010d94:	83 ec 0c             	sub    esp,0xc
c0010d97:	e8 ea 66 00 00       	call   c0017486 <HalQueryPerformanceCounter()>
c0010d9c:	0f 20 da             	mov    edx,cr3
c0010d9f:	0f 22 da             	mov    cr3,edx
c0010da2:	0f 20 da             	mov    edx,cr3
c0010da5:	0f 22 da             	mov    cr3,edx
c0010da8:	0f 20 da             	mov    edx,cr3
c0010dab:	0f 22 da             	mov    cr3,edx
c0010dae:	0f 20 da             	mov    edx,cr3
c0010db1:	0f 22 da             	mov    cr3,edx
c0010db4:	83 ec 0c             	sub    esp,0xc
c0010db7:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010dbc:	50                   	push   eax
c0010dbd:	e8 a9 ff ff ff       	call   c0010d6b <KeSeedRand(unsigned int)>
c0010dc2:	83 c4 1c             	add    esp,0x1c
c0010dc5:	c3                   	ret    
c0010dc6:	66 90                	xchg   ax,ax

c0010dc8 <KeResolveCompatibilitySymbol(char*)>:
c0010dc8:	83 ec 0c             	sub    esp,0xc
c0010dcb:	83 ec 08             	sub    esp,0x8
c0010dce:	68 e8 13 02 c0       	push   0xc00213e8
c0010dd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dd7:	e8 74 f9 fe ff       	call   c0000750 <strcmp>
c0010ddc:	83 c4 10             	add    esp,0x10
c0010ddf:	85 c0                	test   eax,eax
c0010de1:	0f 94 c0             	sete   al
c0010de4:	0f b6 c0             	movzx  eax,al
c0010de7:	85 c0                	test   eax,eax
c0010de9:	74 0d                	je     c0010df8 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010deb:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c0010df0:	e9 8b 01 00 00       	jmp    c0010f80 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010df5:	8d 76 00             	lea    esi,[esi+0x0]
c0010df8:	83 ec 08             	sub    esp,0x8
c0010dfb:	68 f1 13 02 c0       	push   0xc00213f1
c0010e00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e04:	e8 47 f9 fe ff       	call   c0000750 <strcmp>
c0010e09:	83 c4 10             	add    esp,0x10
c0010e0c:	85 c0                	test   eax,eax
c0010e0e:	0f 94 c0             	sete   al
c0010e11:	0f b6 c0             	movzx  eax,al
c0010e14:	85 c0                	test   eax,eax
c0010e16:	74 0c                	je     c0010e24 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010e18:	b8 d0 e9 01 c0       	mov    eax,0xc001e9d0
c0010e1d:	e9 5e 01 00 00       	jmp    c0010f80 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e22:	66 90                	xchg   ax,ax
c0010e24:	83 ec 08             	sub    esp,0x8
c0010e27:	68 fb 13 02 c0       	push   0xc00213fb
c0010e2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e30:	e8 1b f9 fe ff       	call   c0000750 <strcmp>
c0010e35:	83 c4 10             	add    esp,0x10
c0010e38:	85 c0                	test   eax,eax
c0010e3a:	0f 94 c0             	sete   al
c0010e3d:	0f b6 c0             	movzx  eax,al
c0010e40:	85 c0                	test   eax,eax
c0010e42:	74 0c                	je     c0010e50 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010e44:	b8 04 e7 01 c0       	mov    eax,0xc001e704
c0010e49:	e9 32 01 00 00       	jmp    c0010f80 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e4e:	66 90                	xchg   ax,ax
c0010e50:	83 ec 08             	sub    esp,0x8
c0010e53:	68 04 14 02 c0       	push   0xc0021404
c0010e58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e5c:	e8 ef f8 fe ff       	call   c0000750 <strcmp>
c0010e61:	83 c4 10             	add    esp,0x10
c0010e64:	85 c0                	test   eax,eax
c0010e66:	0f 94 c0             	sete   al
c0010e69:	0f b6 c0             	movzx  eax,al
c0010e6c:	85 c0                	test   eax,eax
c0010e6e:	74 0c                	je     c0010e7c <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010e70:	b8 db 0b 01 c0       	mov    eax,0xc0010bdb
c0010e75:	e9 06 01 00 00       	jmp    c0010f80 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010e7a:	66 90                	xchg   ax,ax
c0010e7c:	83 ec 08             	sub    esp,0x8
c0010e7f:	68 17 14 02 c0       	push   0xc0021417
c0010e84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e88:	e8 c3 f8 fe ff       	call   c0000750 <strcmp>
c0010e8d:	83 c4 10             	add    esp,0x10
c0010e90:	85 c0                	test   eax,eax
c0010e92:	0f 94 c0             	sete   al
c0010e95:	0f b6 c0             	movzx  eax,al
c0010e98:	85 c0                	test   eax,eax
c0010e9a:	74 0c                	je     c0010ea8 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010e9c:	b8 25 05 01 c0       	mov    eax,0xc0010525
c0010ea1:	e9 da 00 00 00       	jmp    c0010f80 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ea6:	66 90                	xchg   ax,ax
c0010ea8:	83 ec 08             	sub    esp,0x8
c0010eab:	68 34 14 02 c0       	push   0xc0021434
c0010eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010eb4:	e8 97 f8 fe ff       	call   c0000750 <strcmp>
c0010eb9:	83 c4 10             	add    esp,0x10
c0010ebc:	85 c0                	test   eax,eax
c0010ebe:	0f 94 c0             	sete   al
c0010ec1:	0f b6 c0             	movzx  eax,al
c0010ec4:	85 c0                	test   eax,eax
c0010ec6:	74 0c                	je     c0010ed4 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010ec8:	b8 d0 ea 01 c0       	mov    eax,0xc001ead0
c0010ecd:	e9 ae 00 00 00       	jmp    c0010f80 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ed2:	66 90                	xchg   ax,ax
c0010ed4:	83 ec 08             	sub    esp,0x8
c0010ed7:	68 3e 14 02 c0       	push   0xc002143e
c0010edc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ee0:	e8 6b f8 fe ff       	call   c0000750 <strcmp>
c0010ee5:	83 c4 10             	add    esp,0x10
c0010ee8:	85 c0                	test   eax,eax
c0010eea:	0f 94 c0             	sete   al
c0010eed:	0f b6 c0             	movzx  eax,al
c0010ef0:	85 c0                	test   eax,eax
c0010ef2:	74 0c                	je     c0010f00 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010ef4:	b8 50 e8 01 c0       	mov    eax,0xc001e850
c0010ef9:	e9 82 00 00 00       	jmp    c0010f80 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010efe:	66 90                	xchg   ax,ax
c0010f00:	83 ec 08             	sub    esp,0x8
c0010f03:	68 47 14 02 c0       	push   0xc0021447
c0010f08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f0c:	e8 3f f8 fe ff       	call   c0000750 <strcmp>
c0010f11:	83 c4 10             	add    esp,0x10
c0010f14:	85 c0                	test   eax,eax
c0010f16:	0f 94 c0             	sete   al
c0010f19:	0f b6 c0             	movzx  eax,al
c0010f1c:	85 c0                	test   eax,eax
c0010f1e:	74 08                	je     c0010f28 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010f20:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0010f25:	eb 59                	jmp    c0010f80 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010f27:	90                   	nop
c0010f28:	83 ec 08             	sub    esp,0x8
c0010f2b:	68 5f 14 02 c0       	push   0xc002145f
c0010f30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f34:	e8 17 f8 fe ff       	call   c0000750 <strcmp>
c0010f39:	83 c4 10             	add    esp,0x10
c0010f3c:	85 c0                	test   eax,eax
c0010f3e:	0f 94 c0             	sete   al
c0010f41:	0f b6 c0             	movzx  eax,al
c0010f44:	85 c0                	test   eax,eax
c0010f46:	74 08                	je     c0010f50 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010f48:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0010f4d:	eb 31                	jmp    c0010f80 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010f4f:	90                   	nop
c0010f50:	83 ec 08             	sub    esp,0x8
c0010f53:	68 6c 14 02 c0       	push   0xc002146c
c0010f58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f5c:	e8 ef f7 fe ff       	call   c0000750 <strcmp>
c0010f61:	83 c4 10             	add    esp,0x10
c0010f64:	85 c0                	test   eax,eax
c0010f66:	0f 94 c0             	sete   al
c0010f69:	0f b6 c0             	movzx  eax,al
c0010f6c:	85 c0                	test   eax,eax
c0010f6e:	74 08                	je     c0010f78 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010f70:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c0010f75:	eb 09                	jmp    c0010f80 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010f77:	90                   	nop
c0010f78:	b8 00 00 00 00       	mov    eax,0x0
c0010f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0010f80:	83 c4 0c             	add    esp,0xc
c0010f83:	c3                   	ret    

c0010f84 <KiSigKill(int)>:
c0010f84:	83 ec 0c             	sub    esp,0xc
c0010f87:	6a 00                	push   0x0
c0010f89:	6a 00                	push   0x0
c0010f8b:	6a ff                	push   0xffffffff
c0010f8d:	6a 01                	push   0x1
c0010f8f:	e8 be 30 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010f94:	83 c4 1c             	add    esp,0x1c
c0010f97:	c3                   	ret    

c0010f98 <KiDefaultSignalHandlerIgnore(int)>:
c0010f98:	c3                   	ret    

c0010f99 <KiDefaultSignalHandlerPause(int)>:
c0010f99:	57                   	push   edi
c0010f9a:	b9 07 00 00 00       	mov    ecx,0x7
c0010f9f:	56                   	push   esi
c0010fa0:	be b5 14 02 c0       	mov    esi,0xc00214b5
c0010fa5:	83 ec 24             	sub    esp,0x24
c0010fa8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010fac:	fc                   	cld    
c0010fad:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010faf:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010fb3:	50                   	push   eax
c0010fb4:	6a 00                	push   0x0
c0010fb6:	6a 00                	push   0x0
c0010fb8:	6a 27                	push   0x27
c0010fba:	e8 93 30 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010fbf:	83 c4 34             	add    esp,0x34
c0010fc2:	5e                   	pop    esi
c0010fc3:	5f                   	pop    edi
c0010fc4:	c3                   	ret    

c0010fc5 <KiDefaultSignalHandlerResume(int)>:
c0010fc5:	57                   	push   edi
c0010fc6:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010fcb:	56                   	push   esi
c0010fcc:	be d1 14 02 c0       	mov    esi,0xc00214d1
c0010fd1:	83 ec 24             	sub    esp,0x24
c0010fd4:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010fd8:	fc                   	cld    
c0010fd9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fdb:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010fdf:	50                   	push   eax
c0010fe0:	6a 00                	push   0x0
c0010fe2:	6a 00                	push   0x0
c0010fe4:	6a 27                	push   0x27
c0010fe6:	e8 67 30 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010feb:	83 c4 34             	add    esp,0x34
c0010fee:	5e                   	pop    esi
c0010fef:	5f                   	pop    edi
c0010ff0:	c3                   	ret    

c0010ff1 <KeDeinitSignals(SigHandlerBlock*)>:
c0010ff1:	e9 c8 6a ff ff       	jmp    c0007abe <free>

c0010ff6 <KeInitSignals()>:
c0010ff6:	53                   	push   ebx
c0010ff7:	83 ec 14             	sub    esp,0x14
c0010ffa:	68 c8 00 00 00       	push   0xc8
c0010fff:	e8 aa 6a ff ff       	call   c0007aae <malloc>
c0011004:	83 c4 0c             	add    esp,0xc
c0011007:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011011:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001101b:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011022:	89 c3                	mov    ebx,eax
c0011024:	6a 20                	push   0x20
c0011026:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c001102c:	6a 00                	push   0x0
c001102e:	50                   	push   eax
c001102f:	e8 bc f4 fe ff       	call   c00004f0 <memset>
c0011034:	83 c4 0c             	add    esp,0xc
c0011037:	6a 44                	push   0x44
c0011039:	6a 00                	push   0x0
c001103b:	53                   	push   ebx
c001103c:	e8 af f4 fe ff       	call   c00004f0 <memset>
c0011041:	89 d8                	mov    eax,ebx
c0011043:	83 c4 18             	add    esp,0x18
c0011046:	5b                   	pop    ebx
c0011047:	c3                   	ret    

c0011048 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011048:	53                   	push   ebx
c0011049:	b8 01 00 00 00       	mov    eax,0x1
c001104e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011052:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011056:	83 f9 10             	cmp    ecx,0x10
c0011059:	7f 21                	jg     c001107c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c001105b:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001105e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011062:	89 03                	mov    DWORD PTR [ebx],eax
c0011064:	b8 01 00 00 00       	mov    eax,0x1
c0011069:	d3 e0                	shl    eax,cl
c001106b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001106f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011072:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001107a:	31 c0                	xor    eax,eax
c001107c:	5b                   	pop    ebx
c001107d:	c3                   	ret    

c001107e <KeRaiseSignal(SigHandlerBlock*, int)>:
c001107e:	55                   	push   ebp
c001107f:	57                   	push   edi
c0011080:	bf 08 00 00 00       	mov    edi,0x8
c0011085:	56                   	push   esi
c0011086:	53                   	push   ebx
c0011087:	83 ec 18             	sub    esp,0x18
c001108a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001108e:	68 ee 14 02 c0       	push   0xc00214ee
c0011093:	e8 df 98 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0011098:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001109f:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00110a5:	83 c4 10             	add    esp,0x10
c00110a8:	31 c9                	xor    ecx,ecx
c00110aa:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00110ae:	99                   	cdq    
c00110af:	f7 ff                	idiv   edi
c00110b1:	8d 42 24             	lea    eax,[edx+0x24]
c00110b4:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00110b8:	85 f6                	test   esi,esi
c00110ba:	75 1a                	jne    c00110d6 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00110bc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00110c0:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00110c4:	50                   	push   eax
c00110c5:	50                   	push   eax
c00110c6:	52                   	push   edx
c00110c7:	68 ff 14 02 c0       	push   0xc00214ff
c00110cc:	e8 a6 98 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c00110d1:	83 c4 10             	add    esp,0x10
c00110d4:	eb 1b                	jmp    c00110f1 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00110d6:	41                   	inc    ecx
c00110d7:	83 f9 08             	cmp    ecx,0x8
c00110da:	75 ce                	jne    c00110aa <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00110dc:	83 ec 0c             	sub    esp,0xc
c00110df:	be 01 00 00 00       	mov    esi,0x1
c00110e4:	68 20 15 02 c0       	push   0xc0021520
c00110e9:	e8 89 98 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c00110ee:	83 c4 10             	add    esp,0x10
c00110f1:	83 c4 0c             	add    esp,0xc
c00110f4:	89 f0                	mov    eax,esi
c00110f6:	5b                   	pop    ebx
c00110f7:	5e                   	pop    esi
c00110f8:	5f                   	pop    edi
c00110f9:	5d                   	pop    ebp
c00110fa:	c3                   	ret    

c00110fb <KeCheckSignal(SigHandlerBlock*, int*)>:
c00110fb:	55                   	push   ebp
c00110fc:	57                   	push   edi
c00110fd:	56                   	push   esi
c00110fe:	53                   	push   ebx
c00110ff:	51                   	push   ecx
c0011100:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011104:	85 db                	test   ebx,ebx
c0011106:	0f 84 bc 00 00 00    	je     c00111c8 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001110c:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011113:	0f 84 af 00 00 00    	je     c00111c8 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011119:	31 c9                	xor    ecx,ecx
c001111b:	bf 08 00 00 00       	mov    edi,0x8
c0011120:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011126:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011129:	99                   	cdq    
c001112a:	f7 ff                	idiv   edi
c001112c:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011133:	85 ed                	test   ebp,ebp
c0011135:	0f 84 9e 00 00 00    	je     c00111d9 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c001113b:	89 e9                	mov    ecx,ebp
c001113d:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011143:	bf 01 00 00 00       	mov    edi,0x1
c0011148:	89 04 24             	mov    DWORD PTR [esp],eax
c001114b:	d3 e7                	shl    edi,cl
c001114d:	31 c9                	xor    ecx,ecx
c001114f:	b8 01 00 00 00       	mov    eax,0x1
c0011154:	d3 e0                	shl    eax,cl
c0011156:	85 04 24             	test   DWORD PTR [esp],eax
c0011159:	74 06                	je     c0011161 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c001115b:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c001115f:	75 67                	jne    c00111c8 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011161:	41                   	inc    ecx
c0011162:	83 f9 11             	cmp    ecx,0x11
c0011165:	75 e8                	jne    c001114f <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011167:	46                   	inc    esi
c0011168:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001116b:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011171:	09 f8                	or     eax,edi
c0011173:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c001117e:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011184:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c001118b:	31 c0                	xor    eax,eax
c001118d:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011195:	74 09                	je     c00111a0 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011197:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001119e:	eb 06                	jmp    c00111a6 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c00111a0:	40                   	inc    eax
c00111a1:	83 f8 08             	cmp    eax,0x8
c00111a4:	75 e7                	jne    c001118d <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c00111a6:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00111a9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00111ad:	83 fd 09             	cmp    ebp,0x9
c00111b0:	89 2a                	mov    DWORD PTR [edx],ebp
c00111b2:	75 07                	jne    c00111bb <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c00111b4:	b8 84 0f 01 c0       	mov    eax,0xc0010f84
c00111b9:	eb 31                	jmp    c00111ec <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00111bb:	83 f8 01             	cmp    eax,0x1
c00111be:	75 0c                	jne    c00111cc <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c00111c0:	f7 d7                	not    edi
c00111c2:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00111c8:	31 c0                	xor    eax,eax
c00111ca:	eb 20                	jmp    c00111ec <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00111cc:	85 c0                	test   eax,eax
c00111ce:	75 1c                	jne    c00111ec <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00111d0:	8b 04 ad 60 29 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdd6a0]
c00111d7:	eb 13                	jmp    c00111ec <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00111d9:	46                   	inc    esi
c00111da:	41                   	inc    ecx
c00111db:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00111e1:	83 f9 08             	cmp    ecx,0x8
c00111e4:	0f 85 36 ff ff ff    	jne    c0011120 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c00111ea:	eb dc                	jmp    c00111c8 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00111ec:	5a                   	pop    edx
c00111ed:	5b                   	pop    ebx
c00111ee:	5e                   	pop    esi
c00111ef:	5f                   	pop    edi
c00111f0:	5d                   	pop    ebp
c00111f1:	c3                   	ret    

c00111f2 <KiCheckSignalZ>:
c00111f2:	83 ec 10             	sub    esp,0x10
c00111f5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00111f9:	50                   	push   eax
c00111fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111ff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011202:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011208:	e8 ee fe ff ff       	call   c00110fb <KeCheckSignal(SigHandlerBlock*, int*)>
c001120d:	5a                   	pop    edx
c001120e:	31 d2                	xor    edx,edx
c0011210:	59                   	pop    ecx
c0011211:	85 c0                	test   eax,eax
c0011213:	74 19                	je     c001122e <KiCheckSignalZ+0x3c>
c0011215:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001121b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001121e:	89 02                	mov    DWORD PTR [edx],eax
c0011220:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011227:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001122b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001122e:	89 d0                	mov    eax,edx
c0011230:	83 c4 10             	add    esp,0x10
c0011233:	c3                   	ret    

c0011234 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011234:	56                   	push   esi
c0011235:	53                   	push   ebx
c0011236:	bb 01 00 00 00       	mov    ebx,0x1
c001123b:	52                   	push   edx
c001123c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011240:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011244:	d3 e3                	shl    ebx,cl
c0011246:	83 f9 10             	cmp    ecx,0x10
c0011249:	7f 08                	jg     c0011253 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001124b:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011251:	75 10                	jne    c0011263 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011253:	83 ec 0c             	sub    esp,0xc
c0011256:	68 31 15 02 c0       	push   0xc0021531
c001125b:	e8 7b f9 ff ff       	call   c0010bdb <KePanic(char const*)>
c0011260:	83 c4 10             	add    esp,0x10
c0011263:	f7 d3                	not    ebx
c0011265:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001126b:	58                   	pop    eax
c001126c:	5b                   	pop    ebx
c001126d:	5e                   	pop    esi
c001126e:	c3                   	ret    

c001126f <KiFinishSignalZ>:
c001126f:	53                   	push   ebx
c0011270:	83 ec 10             	sub    esp,0x10
c0011273:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011277:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001127a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001127f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011282:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011288:	e8 a7 ff ff ff       	call   c0011234 <KeCompleteSignal(SigHandlerBlock*, int)>
c001128d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011293:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001129a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00112a1:	83 c4 18             	add    esp,0x18
c00112a4:	5b                   	pop    ebx
c00112a5:	c3                   	ret    

c00112a6 <SysSeekDir(regs*)>:
c00112a6:	31 c0                	xor    eax,eax
c00112a8:	31 d2                	xor    edx,edx
c00112aa:	c3                   	ret    

c00112ab <SysTellDir(regs*)>:
c00112ab:	31 c0                	xor    eax,eax
c00112ad:	31 d2                	xor    edx,edx
c00112af:	c3                   	ret    

c00112b0 <SysVerify(regs*)>:
c00112b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112b4:	31 d2                	xor    edx,edx
c00112b6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00112b9:	c3                   	ret    

c00112ba <SysGetArgc(regs*)>:
c00112ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112bf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00112c2:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00112c8:	89 c2                	mov    edx,eax
c00112ca:	c1 fa 1f             	sar    edx,0x1f
c00112cd:	c3                   	ret    

c00112ce <SysTTYName(regs*)>:
c00112ce:	b8 01 00 00 00       	mov    eax,0x1
c00112d3:	31 d2                	xor    edx,edx
c00112d5:	c3                   	ret    

c00112d6 <SysFormatDisk(regs*)>:
c00112d6:	56                   	push   esi
c00112d7:	53                   	push   ebx
c00112d8:	83 ec 04             	sub    esp,0x4
c00112db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00112df:	8b 1d b4 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb4
c00112e5:	eb 28                	jmp    c001130f <SysFormatDisk(regs*)+0x39>
c00112e7:	83 ec 0c             	sub    esp,0xc
c00112ea:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00112ed:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00112f0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00112f2:	51                   	push   ecx
c00112f3:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00112f6:	51                   	push   ecx
c00112f7:	50                   	push   eax
c00112f8:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c00112ff:	50                   	push   eax
c0011300:	53                   	push   ebx
c0011301:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0011304:	83 c4 20             	add    esp,0x20
c0011307:	83 f8 08             	cmp    eax,0x8
c001130a:	75 14                	jne    c0011320 <SysFormatDisk(regs*)+0x4a>
c001130c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001130f:	85 db                	test   ebx,ebx
c0011311:	75 d4                	jne    c00112e7 <SysFormatDisk(regs*)+0x11>
c0011313:	83 c4 04             	add    esp,0x4
c0011316:	b8 03 00 00 00       	mov    eax,0x3
c001131b:	31 d2                	xor    edx,edx
c001131d:	5b                   	pop    ebx
c001131e:	5e                   	pop    esi
c001131f:	c3                   	ret    
c0011320:	85 c0                	test   eax,eax
c0011322:	74 1f                	je     c0011343 <SysFormatDisk(regs*)+0x6d>
c0011324:	83 f8 09             	cmp    eax,0x9
c0011327:	74 0d                	je     c0011336 <SysFormatDisk(regs*)+0x60>
c0011329:	83 c4 04             	add    esp,0x4
c001132c:	b8 02 00 00 00       	mov    eax,0x2
c0011331:	31 d2                	xor    edx,edx
c0011333:	5b                   	pop    ebx
c0011334:	5e                   	pop    esi
c0011335:	c3                   	ret    
c0011336:	83 c4 04             	add    esp,0x4
c0011339:	b8 01 00 00 00       	mov    eax,0x1
c001133e:	31 d2                	xor    edx,edx
c0011340:	5b                   	pop    ebx
c0011341:	5e                   	pop    esi
c0011342:	c3                   	ret    
c0011343:	83 c4 04             	add    esp,0x4
c0011346:	31 c0                	xor    eax,eax
c0011348:	31 d2                	xor    edx,edx
c001134a:	5b                   	pop    ebx
c001134b:	5e                   	pop    esi
c001134c:	c3                   	ret    

c001134d <SysSetDiskVolumeLabel(regs*)>:
c001134d:	56                   	push   esi
c001134e:	53                   	push   ebx
c001134f:	83 ec 04             	sub    esp,0x4
c0011352:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011356:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011359:	83 f8 19             	cmp    eax,0x19
c001135c:	77 33                	ja     c0011391 <SysSetDiskVolumeLabel(regs*)+0x44>
c001135e:	8b 0c 85 20 84 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7be0]
c0011365:	85 c9                	test   ecx,ecx
c0011367:	74 28                	je     c0011391 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011369:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001136c:	85 db                	test   ebx,ebx
c001136e:	74 21                	je     c0011391 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011370:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011376:	85 d2                	test   edx,edx
c0011378:	74 17                	je     c0011391 <SysSetDiskVolumeLabel(regs*)+0x44>
c001137a:	8b 32                	mov    esi,DWORD PTR [edx]
c001137c:	53                   	push   ebx
c001137d:	50                   	push   eax
c001137e:	51                   	push   ecx
c001137f:	52                   	push   edx
c0011380:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0011383:	83 c4 10             	add    esp,0x10
c0011386:	89 c2                	mov    edx,eax
c0011388:	83 c4 04             	add    esp,0x4
c001138b:	c1 fa 1f             	sar    edx,0x1f
c001138e:	5b                   	pop    ebx
c001138f:	5e                   	pop    esi
c0011390:	c3                   	ret    
c0011391:	83 c4 04             	add    esp,0x4
c0011394:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011399:	ba ff ff ff ff       	mov    edx,0xffffffff
c001139e:	5b                   	pop    ebx
c001139f:	5e                   	pop    esi
c00113a0:	c3                   	ret    

c00113a1 <SysGetDiskVolumeLabel(regs*)>:
c00113a1:	57                   	push   edi
c00113a2:	56                   	push   esi
c00113a3:	53                   	push   ebx
c00113a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113a8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00113ab:	83 fa 19             	cmp    edx,0x19
c00113ae:	77 3c                	ja     c00113ec <SysGetDiskVolumeLabel(regs*)+0x4b>
c00113b0:	8b 0c 95 20 84 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7be0]
c00113b7:	85 c9                	test   ecx,ecx
c00113b9:	74 31                	je     c00113ec <SysGetDiskVolumeLabel(regs*)+0x4b>
c00113bb:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00113be:	85 db                	test   ebx,ebx
c00113c0:	74 2a                	je     c00113ec <SysGetDiskVolumeLabel(regs*)+0x4b>
c00113c2:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00113c5:	85 f6                	test   esi,esi
c00113c7:	74 23                	je     c00113ec <SysGetDiskVolumeLabel(regs*)+0x4b>
c00113c9:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c00113cf:	85 c0                	test   eax,eax
c00113d1:	74 19                	je     c00113ec <SysGetDiskVolumeLabel(regs*)+0x4b>
c00113d3:	83 ec 0c             	sub    esp,0xc
c00113d6:	8b 38                	mov    edi,DWORD PTR [eax]
c00113d8:	56                   	push   esi
c00113d9:	53                   	push   ebx
c00113da:	52                   	push   edx
c00113db:	51                   	push   ecx
c00113dc:	50                   	push   eax
c00113dd:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00113e0:	83 c4 20             	add    esp,0x20
c00113e3:	89 c2                	mov    edx,eax
c00113e5:	5b                   	pop    ebx
c00113e6:	c1 fa 1f             	sar    edx,0x1f
c00113e9:	5e                   	pop    esi
c00113ea:	5f                   	pop    edi
c00113eb:	c3                   	ret    
c00113ec:	5b                   	pop    ebx
c00113ed:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00113f2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113f7:	5e                   	pop    esi
c00113f8:	5f                   	pop    edi
c00113f9:	c3                   	ret    

c00113fa <SysShutdown(regs*)>:
c00113fa:	83 ec 0c             	sub    esp,0xc
c00113fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011401:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011404:	85 c0                	test   eax,eax
c0011406:	74 18                	je     c0011420 <SysShutdown(regs*)+0x26>
c0011408:	83 f8 01             	cmp    eax,0x1
c001140b:	74 38                	je     c0011445 <SysShutdown(regs*)+0x4b>
c001140d:	83 f8 02             	cmp    eax,0x2
c0011410:	74 24                	je     c0011436 <SysShutdown(regs*)+0x3c>
c0011412:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011417:	ba ff ff ff ff       	mov    edx,0xffffffff
c001141c:	83 c4 0c             	add    esp,0xc
c001141f:	c3                   	ret    
c0011420:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011425:	8b 10                	mov    edx,DWORD PTR [eax]
c0011427:	6a 00                	push   0x0
c0011429:	6a 00                	push   0x0
c001142b:	6a 00                	push   0x0
c001142d:	50                   	push   eax
c001142e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011431:	83 c4 10             	add    esp,0x10
c0011434:	eb dc                	jmp    c0011412 <SysShutdown(regs*)+0x18>
c0011436:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001143b:	8b 10                	mov    edx,DWORD PTR [eax]
c001143d:	6a 00                	push   0x0
c001143f:	6a 00                	push   0x0
c0011441:	6a 01                	push   0x1
c0011443:	eb e8                	jmp    c001142d <SysShutdown(regs*)+0x33>
c0011445:	a1 a0 84 02 c0       	mov    eax,ds:0xc00284a0
c001144a:	85 c0                	test   eax,eax
c001144c:	74 02                	je     c0011450 <SysShutdown(regs*)+0x56>
c001144e:	ff d0                	call   eax
c0011450:	31 c0                	xor    eax,eax
c0011452:	31 d2                	xor    edx,edx
c0011454:	83 c4 0c             	add    esp,0xc
c0011457:	c3                   	ret    

c0011458 <SysRealpath(regs*)>:
c0011458:	83 ec 0c             	sub    esp,0xc
c001145b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001145f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011462:	85 d2                	test   edx,edx
c0011464:	74 07                	je     c001146d <SysRealpath(regs*)+0x15>
c0011466:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011469:	85 c0                	test   eax,eax
c001146b:	75 0b                	jne    c0011478 <SysRealpath(regs*)+0x20>
c001146d:	b8 01 00 00 00       	mov    eax,0x1
c0011472:	31 d2                	xor    edx,edx
c0011474:	83 c4 0c             	add    esp,0xc
c0011477:	c3                   	ret    
c0011478:	83 ec 04             	sub    esp,0x4
c001147b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011481:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011484:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001148a:	51                   	push   ecx
c001148b:	52                   	push   edx
c001148c:	50                   	push   eax
c001148d:	e8 88 9b ff ff       	call   c000b01a <Fs::standardiseFiles(char*, char const*, char const*)>
c0011492:	83 c4 10             	add    esp,0x10
c0011495:	31 c0                	xor    eax,eax
c0011497:	31 d2                	xor    edx,edx
c0011499:	83 c4 0c             	add    esp,0xc
c001149c:	c3                   	ret    

c001149d <SysReadDir(regs*)>:
c001149d:	53                   	push   ebx
c001149e:	83 ec 18             	sub    esp,0x18
c00114a1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114a5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00114a8:	83 f8 02             	cmp    eax,0x2
c00114ab:	76 61                	jbe    c001150e <SysReadDir(regs*)+0x71>
c00114ad:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00114b4:	77 49                	ja     c00114ff <SysReadDir(regs*)+0x62>
c00114b6:	83 ec 0c             	sub    esp,0xc
c00114b9:	50                   	push   eax
c00114ba:	e8 e8 7f ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c00114bf:	83 c4 10             	add    esp,0x10
c00114c2:	85 c0                	test   eax,eax
c00114c4:	74 39                	je     c00114ff <SysReadDir(regs*)+0x62>
c00114c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00114ce:	83 ec 0c             	sub    esp,0xc
c00114d1:	8b 10                	mov    edx,DWORD PTR [eax]
c00114d3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00114d7:	51                   	push   ecx
c00114d8:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00114db:	51                   	push   ecx
c00114dc:	6a 00                	push   0x0
c00114de:	68 10 01 00 00       	push   0x110
c00114e3:	50                   	push   eax
c00114e4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00114e7:	83 c4 20             	add    esp,0x20
c00114ea:	85 c0                	test   eax,eax
c00114ec:	74 29                	je     c0011517 <SysReadDir(regs*)+0x7a>
c00114ee:	83 f8 07             	cmp    eax,0x7
c00114f1:	74 1b                	je     c001150e <SysReadDir(regs*)+0x71>
c00114f3:	b8 02 00 00 00       	mov    eax,0x2
c00114f8:	31 d2                	xor    edx,edx
c00114fa:	83 c4 18             	add    esp,0x18
c00114fd:	5b                   	pop    ebx
c00114fe:	c3                   	ret    
c00114ff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011504:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011509:	83 c4 18             	add    esp,0x18
c001150c:	5b                   	pop    ebx
c001150d:	c3                   	ret    
c001150e:	b8 01 00 00 00       	mov    eax,0x1
c0011513:	31 d2                	xor    edx,edx
c0011515:	eb e3                	jmp    c00114fa <SysReadDir(regs*)+0x5d>
c0011517:	31 c0                	xor    eax,eax
c0011519:	31 d2                	xor    edx,edx
c001151b:	eb dd                	jmp    c00114fa <SysReadDir(regs*)+0x5d>

c001151d <SysIsATTY(regs*)>:
c001151d:	83 ec 0c             	sub    esp,0xc
c0011520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011524:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011527:	83 f8 02             	cmp    eax,0x2
c001152a:	76 07                	jbe    c0011533 <SysIsATTY(regs*)+0x16>
c001152c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011531:	75 26                	jne    c0011559 <SysIsATTY(regs*)+0x3c>
c0011533:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011538:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001153b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011541:	85 c0                	test   eax,eax
c0011543:	74 24                	je     c0011569 <SysIsATTY(regs*)+0x4c>
c0011545:	83 ec 0c             	sub    esp,0xc
c0011548:	8b 10                	mov    edx,DWORD PTR [eax]
c001154a:	50                   	push   eax
c001154b:	ff 12                	call   DWORD PTR [edx]
c001154d:	31 d2                	xor    edx,edx
c001154f:	0f b6 c0             	movzx  eax,al
c0011552:	83 c4 10             	add    esp,0x10
c0011555:	83 c4 0c             	add    esp,0xc
c0011558:	c3                   	ret    
c0011559:	83 ec 0c             	sub    esp,0xc
c001155c:	50                   	push   eax
c001155d:	e8 45 7f ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c0011562:	83 c4 10             	add    esp,0x10
c0011565:	85 c0                	test   eax,eax
c0011567:	75 dc                	jne    c0011545 <SysIsATTY(regs*)+0x28>
c0011569:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001156e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011573:	83 c4 0c             	add    esp,0xc
c0011576:	c3                   	ret    

c0011577 <SysSeek(regs*)>:
c0011577:	53                   	push   ebx
c0011578:	83 ec 08             	sub    esp,0x8
c001157b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001157f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011582:	8d 50 fd             	lea    edx,[eax-0x3]
c0011585:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001158b:	77 32                	ja     c00115bf <SysSeek(regs*)+0x48>
c001158d:	83 ec 0c             	sub    esp,0xc
c0011590:	50                   	push   eax
c0011591:	e8 11 7f ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c0011596:	83 c4 0c             	add    esp,0xc
c0011599:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001159c:	31 db                	xor    ebx,ebx
c001159e:	53                   	push   ebx
c001159f:	51                   	push   ecx
c00115a0:	50                   	push   eax
c00115a1:	e8 a4 9d ff ff       	call   c000b34a <File::seek(unsigned long long)>
c00115a6:	83 c4 10             	add    esp,0x10
c00115a9:	85 c0                	test   eax,eax
c00115ab:	0f 95 c0             	setne  al
c00115ae:	31 d2                	xor    edx,edx
c00115b0:	0f b6 c0             	movzx  eax,al
c00115b3:	f7 d8                	neg    eax
c00115b5:	83 d2 00             	adc    edx,0x0
c00115b8:	83 c4 08             	add    esp,0x8
c00115bb:	f7 da                	neg    edx
c00115bd:	5b                   	pop    ebx
c00115be:	c3                   	ret    
c00115bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115c4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115c9:	83 c4 08             	add    esp,0x8
c00115cc:	5b                   	pop    ebx
c00115cd:	c3                   	ret    

c00115ce <SysTell(regs*)>:
c00115ce:	53                   	push   ebx
c00115cf:	83 ec 08             	sub    esp,0x8
c00115d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115d6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115d9:	83 f8 02             	cmp    eax,0x2
c00115dc:	76 4e                	jbe    c001162c <SysTell(regs*)+0x5e>
c00115de:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115e3:	76 19                	jbe    c00115fe <SysTell(regs*)+0x30>
c00115e5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00115e8:	31 d2                	xor    edx,edx
c00115ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00115f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115f7:	31 c0                	xor    eax,eax
c00115f9:	83 c4 08             	add    esp,0x8
c00115fc:	5b                   	pop    ebx
c00115fd:	c3                   	ret    
c00115fe:	83 ec 0c             	sub    esp,0xc
c0011601:	50                   	push   eax
c0011602:	e8 a0 7e ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c0011607:	5a                   	pop    edx
c0011608:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001160b:	59                   	pop    ecx
c001160c:	53                   	push   ebx
c001160d:	50                   	push   eax
c001160e:	e8 8d 9d ff ff       	call   c000b3a0 <File::tell(unsigned long long*)>
c0011613:	83 c4 10             	add    esp,0x10
c0011616:	85 c0                	test   eax,eax
c0011618:	0f 95 c0             	setne  al
c001161b:	31 d2                	xor    edx,edx
c001161d:	0f b6 c0             	movzx  eax,al
c0011620:	f7 d8                	neg    eax
c0011622:	83 d2 00             	adc    edx,0x0
c0011625:	83 c4 08             	add    esp,0x8
c0011628:	f7 da                	neg    edx
c001162a:	5b                   	pop    ebx
c001162b:	c3                   	ret    
c001162c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011631:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011636:	83 c4 08             	add    esp,0x8
c0011639:	5b                   	pop    ebx
c001163a:	c3                   	ret    

c001163b <SysSize(regs*)>:
c001163b:	53                   	push   ebx
c001163c:	83 ec 18             	sub    esp,0x18
c001163f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011643:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011646:	83 f8 02             	cmp    eax,0x2
c0011649:	76 54                	jbe    c001169f <SysSize(regs*)+0x64>
c001164b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011650:	76 19                	jbe    c001166b <SysSize(regs*)+0x30>
c0011652:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011655:	31 d2                	xor    edx,edx
c0011657:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001165d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011664:	31 c0                	xor    eax,eax
c0011666:	83 c4 18             	add    esp,0x18
c0011669:	5b                   	pop    ebx
c001166a:	c3                   	ret    
c001166b:	83 ec 0c             	sub    esp,0xc
c001166e:	50                   	push   eax
c001166f:	e8 33 7e ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c0011674:	83 c4 0c             	add    esp,0xc
c0011677:	8d 54 24 13          	lea    edx,[esp+0x13]
c001167b:	52                   	push   edx
c001167c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001167f:	52                   	push   edx
c0011680:	50                   	push   eax
c0011681:	e8 b2 9e ff ff       	call   c000b538 <File::stat(unsigned long long*, bool*)>
c0011686:	83 c4 10             	add    esp,0x10
c0011689:	85 c0                	test   eax,eax
c001168b:	0f 95 c0             	setne  al
c001168e:	31 d2                	xor    edx,edx
c0011690:	0f b6 c0             	movzx  eax,al
c0011693:	f7 d8                	neg    eax
c0011695:	83 d2 00             	adc    edx,0x0
c0011698:	83 c4 18             	add    esp,0x18
c001169b:	f7 da                	neg    edx
c001169d:	5b                   	pop    ebx
c001169e:	c3                   	ret    
c001169f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116a4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116a9:	83 c4 18             	add    esp,0x18
c00116ac:	5b                   	pop    ebx
c00116ad:	c3                   	ret    

c00116ae <SysSizeFromFilename(regs*)>:
c00116ae:	57                   	push   edi
c00116af:	56                   	push   esi
c00116b0:	53                   	push   ebx
c00116b1:	83 ec 20             	sub    esp,0x20
c00116b4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00116b8:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00116bb:	83 fb 02             	cmp    ebx,0x2
c00116be:	0f 86 8a 00 00 00    	jbe    c001174e <SysSizeFromFilename(regs*)+0xa0>
c00116c4:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00116ca:	76 1b                	jbe    c00116e7 <SysSizeFromFilename(regs*)+0x39>
c00116cc:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00116cf:	31 d2                	xor    edx,edx
c00116d1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00116d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00116de:	83 c4 20             	add    esp,0x20
c00116e1:	31 c0                	xor    eax,eax
c00116e3:	5b                   	pop    ebx
c00116e4:	5e                   	pop    esi
c00116e5:	5f                   	pop    edi
c00116e6:	c3                   	ret    
c00116e7:	83 ec 0c             	sub    esp,0xc
c00116ea:	68 14 01 00 00       	push   0x114
c00116ef:	e8 ba 63 ff ff       	call   c0007aae <malloc>
c00116f4:	83 c4 0c             	add    esp,0xc
c00116f7:	89 c7                	mov    edi,eax
c00116f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011701:	50                   	push   eax
c0011702:	53                   	push   ebx
c0011703:	57                   	push   edi
c0011704:	e8 c7 9a ff ff       	call   c000b1d0 <File::File(char const*, Process*)>
c0011709:	83 c4 0c             	add    esp,0xc
c001170c:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011710:	50                   	push   eax
c0011711:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011714:	52                   	push   edx
c0011715:	57                   	push   edi
c0011716:	e8 1d 9e ff ff       	call   c000b538 <File::stat(unsigned long long*, bool*)>
c001171b:	83 c4 10             	add    esp,0x10
c001171e:	85 ff                	test   edi,edi
c0011720:	74 14                	je     c0011736 <SysSizeFromFilename(regs*)+0x88>
c0011722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011726:	8b 17                	mov    edx,DWORD PTR [edi]
c0011728:	83 ec 0c             	sub    esp,0xc
c001172b:	57                   	push   edi
c001172c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001172f:	83 c4 10             	add    esp,0x10
c0011732:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011736:	85 c0                	test   eax,eax
c0011738:	0f 95 c0             	setne  al
c001173b:	31 d2                	xor    edx,edx
c001173d:	0f b6 c0             	movzx  eax,al
c0011740:	f7 d8                	neg    eax
c0011742:	83 d2 00             	adc    edx,0x0
c0011745:	83 c4 20             	add    esp,0x20
c0011748:	f7 da                	neg    edx
c001174a:	5b                   	pop    ebx
c001174b:	5e                   	pop    esi
c001174c:	5f                   	pop    edi
c001174d:	c3                   	ret    
c001174e:	83 c4 20             	add    esp,0x20
c0011751:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011756:	5b                   	pop    ebx
c0011757:	ba ff ff ff ff       	mov    edx,0xffffffff
c001175c:	5e                   	pop    esi
c001175d:	5f                   	pop    edi
c001175e:	c3                   	ret    

c001175f <SysClose(regs*)>:
c001175f:	53                   	push   ebx
c0011760:	83 ec 08             	sub    esp,0x8
c0011763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011767:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001176a:	83 f8 02             	cmp    eax,0x2
c001176d:	76 41                	jbe    c00117b0 <SysClose(regs*)+0x51>
c001176f:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011775:	83 fa 01             	cmp    edx,0x1
c0011778:	76 2d                	jbe    c00117a7 <SysClose(regs*)+0x48>
c001177a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001177f:	77 2f                	ja     c00117b0 <SysClose(regs*)+0x51>
c0011781:	83 ec 0c             	sub    esp,0xc
c0011784:	50                   	push   eax
c0011785:	e8 1d 7d ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c001178a:	89 c3                	mov    ebx,eax
c001178c:	89 04 24             	mov    DWORD PTR [esp],eax
c001178f:	e8 56 9b ff ff       	call   c000b2ea <File::close()>
c0011794:	83 c4 10             	add    esp,0x10
c0011797:	85 db                	test   ebx,ebx
c0011799:	74 0c                	je     c00117a7 <SysClose(regs*)+0x48>
c001179b:	83 ec 0c             	sub    esp,0xc
c001179e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117a0:	53                   	push   ebx
c00117a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00117a4:	83 c4 10             	add    esp,0x10
c00117a7:	31 c0                	xor    eax,eax
c00117a9:	31 d2                	xor    edx,edx
c00117ab:	83 c4 08             	add    esp,0x8
c00117ae:	5b                   	pop    ebx
c00117af:	c3                   	ret    
c00117b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117ba:	83 c4 08             	add    esp,0x8
c00117bd:	5b                   	pop    ebx
c00117be:	c3                   	ret    

c00117bf <SysOpenDir(regs*)>:
c00117bf:	56                   	push   esi
c00117c0:	53                   	push   ebx
c00117c1:	83 ec 04             	sub    esp,0x4
c00117c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117c8:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00117cb:	85 c9                	test   ecx,ecx
c00117cd:	74 5d                	je     c001182c <SysOpenDir(regs*)+0x6d>
c00117cf:	83 ec 0c             	sub    esp,0xc
c00117d2:	68 14 01 00 00       	push   0x114
c00117d7:	e8 d2 62 ff ff       	call   c0007aae <malloc>
c00117dc:	83 c4 0c             	add    esp,0xc
c00117df:	89 c6                	mov    esi,eax
c00117e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117e6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117e9:	50                   	push   eax
c00117ea:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00117ed:	52                   	push   edx
c00117ee:	56                   	push   esi
c00117ef:	e8 02 9f ff ff       	call   c000b6f6 <Directory::Directory(char const*, Process*)>
c00117f4:	83 c4 10             	add    esp,0x10
c00117f7:	85 f6                	test   esi,esi
c00117f9:	74 31                	je     c001182c <SysOpenDir(regs*)+0x6d>
c00117fb:	83 ec 0c             	sub    esp,0xc
c00117fe:	56                   	push   esi
c00117ff:	e8 ae 9f ff ff       	call   c000b7b2 <Directory::open()>
c0011804:	83 c4 10             	add    esp,0x10
c0011807:	85 c0                	test   eax,eax
c0011809:	75 21                	jne    c001182c <SysOpenDir(regs*)+0x6d>
c001180b:	83 ec 0c             	sub    esp,0xc
c001180e:	56                   	push   esi
c001180f:	e8 96 79 ff ff       	call   c00091aa <UnixFile::getFileDescriptor()>
c0011814:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011817:	83 c4 10             	add    esp,0x10
c001181a:	89 02                	mov    DWORD PTR [edx],eax
c001181c:	c1 f8 1f             	sar    eax,0x1f
c001181f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011822:	83 c4 04             	add    esp,0x4
c0011825:	31 c0                	xor    eax,eax
c0011827:	31 d2                	xor    edx,edx
c0011829:	5b                   	pop    ebx
c001182a:	5e                   	pop    esi
c001182b:	c3                   	ret    
c001182c:	83 c4 04             	add    esp,0x4
c001182f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011834:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011839:	5b                   	pop    ebx
c001183a:	5e                   	pop    esi
c001183b:	c3                   	ret    

c001183c <SysMakeDir(regs*)>:
c001183c:	56                   	push   esi
c001183d:	53                   	push   ebx
c001183e:	83 ec 10             	sub    esp,0x10
c0011841:	68 14 01 00 00       	push   0x114
c0011846:	e8 63 62 ff ff       	call   c0007aae <malloc>
c001184b:	83 c4 0c             	add    esp,0xc
c001184e:	89 c3                	mov    ebx,eax
c0011850:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011855:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011858:	50                   	push   eax
c0011859:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001185d:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011860:	52                   	push   edx
c0011861:	53                   	push   ebx
c0011862:	e8 8f 9e ff ff       	call   c000b6f6 <Directory::Directory(char const*, Process*)>
c0011867:	83 c4 10             	add    esp,0x10
c001186a:	85 db                	test   ebx,ebx
c001186c:	74 2c                	je     c001189a <SysMakeDir(regs*)+0x5e>
c001186e:	83 ec 0c             	sub    esp,0xc
c0011871:	53                   	push   ebx
c0011872:	e8 1b a1 ff ff       	call   c000b992 <Directory::create()>
c0011877:	89 c6                	mov    esi,eax
c0011879:	8b 03                	mov    eax,DWORD PTR [ebx]
c001187b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001187e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011881:	83 c4 10             	add    esp,0x10
c0011884:	31 c0                	xor    eax,eax
c0011886:	85 f6                	test   esi,esi
c0011888:	0f 95 c0             	setne  al
c001188b:	31 d2                	xor    edx,edx
c001188d:	f7 d8                	neg    eax
c001188f:	83 d2 00             	adc    edx,0x0
c0011892:	83 c4 04             	add    esp,0x4
c0011895:	f7 da                	neg    edx
c0011897:	5b                   	pop    ebx
c0011898:	5e                   	pop    esi
c0011899:	c3                   	ret    
c001189a:	83 c4 04             	add    esp,0x4
c001189d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118a2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118a7:	5b                   	pop    ebx
c00118a8:	5e                   	pop    esi
c00118a9:	c3                   	ret    

c00118aa <SysCloseDir(regs*)>:
c00118aa:	53                   	push   ebx
c00118ab:	83 ec 08             	sub    esp,0x8
c00118ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118b5:	8d 50 fd             	lea    edx,[eax-0x3]
c00118b8:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00118be:	77 2f                	ja     c00118ef <SysCloseDir(regs*)+0x45>
c00118c0:	83 ec 0c             	sub    esp,0xc
c00118c3:	50                   	push   eax
c00118c4:	e8 de 7b ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c00118c9:	89 c3                	mov    ebx,eax
c00118cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00118ce:	e8 3b 9f ff ff       	call   c000b80e <Directory::close()>
c00118d3:	83 c4 10             	add    esp,0x10
c00118d6:	85 db                	test   ebx,ebx
c00118d8:	74 0c                	je     c00118e6 <SysCloseDir(regs*)+0x3c>
c00118da:	83 ec 0c             	sub    esp,0xc
c00118dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118df:	53                   	push   ebx
c00118e0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118e3:	83 c4 10             	add    esp,0x10
c00118e6:	31 c0                	xor    eax,eax
c00118e8:	31 d2                	xor    edx,edx
c00118ea:	83 c4 08             	add    esp,0x8
c00118ed:	5b                   	pop    ebx
c00118ee:	c3                   	ret    
c00118ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00118f4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118f9:	83 c4 08             	add    esp,0x8
c00118fc:	5b                   	pop    ebx
c00118fd:	c3                   	ret    

c00118fe <SysWait(regs*)>:
c00118fe:	83 ec 10             	sub    esp,0x10
c0011901:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011905:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011908:	52                   	push   edx
c0011909:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c001190c:	51                   	push   ecx
c001190d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011910:	50                   	push   eax
c0011911:	e8 02 3d 00 00       	call   c0015618 <waitTask(int, int*, int)>
c0011916:	83 c4 1c             	add    esp,0x1c
c0011919:	89 c2                	mov    edx,eax
c001191b:	c1 fa 1f             	sar    edx,0x1f
c001191e:	c3                   	ret    

c001191f <SysNotImpl(regs*)>:
c001191f:	83 ec 18             	sub    esp,0x18
c0011922:	68 42 15 02 c0       	push   0xc0021542
c0011927:	e8 af f2 ff ff       	call   c0010bdb <KePanic(char const*)>
c001192c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011931:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011936:	83 c4 1c             	add    esp,0x1c
c0011939:	c3                   	ret    

c001193a <SysPanic(regs*)>:
c001193a:	83 ec 18             	sub    esp,0x18
c001193d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011941:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011944:	50                   	push   eax
c0011945:	e8 91 f2 ff ff       	call   c0010bdb <KePanic(char const*)>
c001194a:	b8 01 00 00 00       	mov    eax,0x1
c001194f:	31 d2                	xor    edx,edx
c0011951:	83 c4 1c             	add    esp,0x1c
c0011954:	c3                   	ret    

c0011955 <SysRmdir(regs*)>:
c0011955:	56                   	push   esi
c0011956:	53                   	push   ebx
c0011957:	83 ec 20             	sub    esp,0x20
c001195a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001195e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011961:	68 14 01 00 00       	push   0x114
c0011966:	e8 43 61 ff ff       	call   c0007aae <malloc>
c001196b:	83 c4 0c             	add    esp,0xc
c001196e:	89 c3                	mov    ebx,eax
c0011970:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011975:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011978:	50                   	push   eax
c0011979:	56                   	push   esi
c001197a:	53                   	push   ebx
c001197b:	e8 50 98 ff ff       	call   c000b1d0 <File::File(char const*, Process*)>
c0011980:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011983:	e8 7c 9a ff ff       	call   c000b404 <File::unlink()>
c0011988:	83 c4 10             	add    esp,0x10
c001198b:	85 db                	test   ebx,ebx
c001198d:	74 14                	je     c00119a3 <SysRmdir(regs*)+0x4e>
c001198f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011993:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011995:	83 ec 0c             	sub    esp,0xc
c0011998:	53                   	push   ebx
c0011999:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001199c:	83 c4 10             	add    esp,0x10
c001199f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119a3:	85 c0                	test   eax,eax
c00119a5:	0f 95 c0             	setne  al
c00119a8:	31 d2                	xor    edx,edx
c00119aa:	0f b6 c0             	movzx  eax,al
c00119ad:	f7 d8                	neg    eax
c00119af:	83 d2 00             	adc    edx,0x0
c00119b2:	83 c4 14             	add    esp,0x14
c00119b5:	f7 da                	neg    edx
c00119b7:	5b                   	pop    ebx
c00119b8:	5e                   	pop    esi
c00119b9:	c3                   	ret    

c00119ba <SysUnlink(regs*)>:
c00119ba:	56                   	push   esi
c00119bb:	53                   	push   ebx
c00119bc:	83 ec 20             	sub    esp,0x20
c00119bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00119c3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00119c6:	68 14 01 00 00       	push   0x114
c00119cb:	e8 de 60 ff ff       	call   c0007aae <malloc>
c00119d0:	83 c4 0c             	add    esp,0xc
c00119d3:	89 c3                	mov    ebx,eax
c00119d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119dd:	50                   	push   eax
c00119de:	56                   	push   esi
c00119df:	53                   	push   ebx
c00119e0:	e8 eb 97 ff ff       	call   c000b1d0 <File::File(char const*, Process*)>
c00119e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119e8:	e8 17 9a ff ff       	call   c000b404 <File::unlink()>
c00119ed:	83 c4 10             	add    esp,0x10
c00119f0:	85 db                	test   ebx,ebx
c00119f2:	74 14                	je     c0011a08 <SysUnlink(regs*)+0x4e>
c00119f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00119f8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00119fa:	83 ec 0c             	sub    esp,0xc
c00119fd:	53                   	push   ebx
c00119fe:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011a01:	83 c4 10             	add    esp,0x10
c0011a04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a08:	85 c0                	test   eax,eax
c0011a0a:	0f 95 c0             	setne  al
c0011a0d:	31 d2                	xor    edx,edx
c0011a0f:	0f b6 c0             	movzx  eax,al
c0011a12:	f7 d8                	neg    eax
c0011a14:	83 d2 00             	adc    edx,0x0
c0011a17:	83 c4 14             	add    esp,0x14
c0011a1a:	f7 da                	neg    edx
c0011a1c:	5b                   	pop    ebx
c0011a1d:	5e                   	pop    esi
c0011a1e:	c3                   	ret    

c0011a1f <SysGetArgv(regs*)>:
c0011a1f:	83 ec 0c             	sub    esp,0xc
c0011a22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011a26:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011a29:	85 c0                	test   eax,eax
c0011a2b:	78 2c                	js     c0011a59 <SysGetArgv(regs*)+0x3a>
c0011a2d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011a33:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011a36:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011a3c:	7d 1b                	jge    c0011a59 <SysGetArgv(regs*)+0x3a>
c0011a3e:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011a45:	85 c0                	test   eax,eax
c0011a47:	74 18                	je     c0011a61 <SysGetArgv(regs*)+0x42>
c0011a49:	83 ec 08             	sub    esp,0x8
c0011a4c:	50                   	push   eax
c0011a4d:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011a50:	50                   	push   eax
c0011a51:	e8 ea eb fe ff       	call   c0000640 <strcpy>
c0011a56:	83 c4 10             	add    esp,0x10
c0011a59:	31 c0                	xor    eax,eax
c0011a5b:	31 d2                	xor    edx,edx
c0011a5d:	83 c4 0c             	add    esp,0xc
c0011a60:	c3                   	ret    
c0011a61:	b8 01 00 00 00       	mov    eax,0x1
c0011a66:	31 d2                	xor    edx,edx
c0011a68:	83 c4 0c             	add    esp,0xc
c0011a6b:	c3                   	ret    

c0011a6c <SysUSleep(regs*)>:
c0011a6c:	83 ec 1c             	sub    esp,0x1c
c0011a6f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011a73:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011a76:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011a79:	6a 00                	push   0x0
c0011a7b:	6a 64                	push   0x64
c0011a7d:	52                   	push   edx
c0011a7e:	50                   	push   eax
c0011a7f:	e8 4c cf 00 00       	call   c001e9d0 <__udivdi3>
c0011a84:	83 c4 14             	add    esp,0x14
c0011a87:	50                   	push   eax
c0011a88:	e8 6f 3c 00 00       	call   c00156fc <milliTenthSleep(unsigned int)>
c0011a8d:	31 c0                	xor    eax,eax
c0011a8f:	31 d2                	xor    edx,edx
c0011a91:	83 c4 1c             	add    esp,0x1c
c0011a94:	c3                   	ret    

c0011a95 <SysSpawn(regs*)>:
c0011a95:	56                   	push   esi
c0011a96:	53                   	push   ebx
c0011a97:	83 ec 04             	sub    esp,0x4
c0011a9a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a9e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011aa1:	85 f6                	test   esi,esi
c0011aa3:	75 0a                	jne    c0011aaf <SysSpawn(regs*)+0x1a>
c0011aa5:	83 c4 04             	add    esp,0x4
c0011aa8:	31 c0                	xor    eax,eax
c0011aaa:	31 d2                	xor    edx,edx
c0011aac:	5b                   	pop    ebx
c0011aad:	5e                   	pop    esi
c0011aae:	c3                   	ret    
c0011aaf:	83 ec 0c             	sub    esp,0xc
c0011ab2:	68 24 07 00 00       	push   0x724
c0011ab7:	e8 f2 5f ff ff       	call   c0007aae <malloc>
c0011abc:	83 c4 10             	add    esp,0x10
c0011abf:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011ac2:	89 c6                	mov    esi,eax
c0011ac4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011ac7:	85 c9                	test   ecx,ecx
c0011ac9:	75 39                	jne    c0011b04 <SysSpawn(regs*)+0x6f>
c0011acb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ad0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ad3:	52                   	push   edx
c0011ad4:	50                   	push   eax
c0011ad5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ad8:	50                   	push   eax
c0011ad9:	56                   	push   esi
c0011ada:	e8 6d 32 00 00       	call   c0014d4c <Process::Process(char const*, Process*, char**)>
c0011adf:	83 c4 10             	add    esp,0x10
c0011ae2:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011ae9:	75 ba                	jne    c0011aa5 <SysSpawn(regs*)+0x10>
c0011aeb:	83 ec 0c             	sub    esp,0xc
c0011aee:	56                   	push   esi
c0011aef:	e8 94 37 00 00       	call   c0015288 <Process::createUserThread()>
c0011af4:	8b 06                	mov    eax,DWORD PTR [esi]
c0011af6:	83 c4 10             	add    esp,0x10
c0011af9:	89 c2                	mov    edx,eax
c0011afb:	83 c4 04             	add    esp,0x4
c0011afe:	c1 fa 1f             	sar    edx,0x1f
c0011b01:	5b                   	pop    ebx
c0011b02:	5e                   	pop    esi
c0011b03:	c3                   	ret    
c0011b04:	31 c0                	xor    eax,eax
c0011b06:	eb cb                	jmp    c0011ad3 <SysSpawn(regs*)+0x3e>

c0011b08 <SysGetEnv(regs*)>:
c0011b08:	57                   	push   edi
c0011b09:	56                   	push   esi
c0011b0a:	53                   	push   ebx
c0011b0b:	83 ec 1c             	sub    esp,0x1c
c0011b0e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011b12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b17:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011b1a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011b1d:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0011b20:	51                   	push   ecx
c0011b21:	e8 6d ef ff ff       	call   c0010a93 <KeGetProcessTotalEnvCount(Process*)>
c0011b26:	83 c4 10             	add    esp,0x10
c0011b29:	39 c7                	cmp    edi,eax
c0011b2b:	7c 14                	jl     c0011b41 <SysGetEnv(regs*)+0x39>
c0011b2d:	85 f6                	test   esi,esi
c0011b2f:	75 0b                	jne    c0011b3c <SysGetEnv(regs*)+0x34>
c0011b31:	83 c4 10             	add    esp,0x10
c0011b34:	31 c0                	xor    eax,eax
c0011b36:	5b                   	pop    ebx
c0011b37:	31 d2                	xor    edx,edx
c0011b39:	5e                   	pop    esi
c0011b3a:	5f                   	pop    edi
c0011b3b:	c3                   	ret    
c0011b3c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b3f:	eb f0                	jmp    c0011b31 <SysGetEnv(regs*)+0x29>
c0011b41:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011b45:	83 ec 04             	sub    esp,0x4
c0011b48:	57                   	push   edi
c0011b49:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011b4f:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0011b52:	57                   	push   edi
c0011b53:	50                   	push   eax
c0011b54:	e8 5a ef ff ff       	call   c0010ab3 <KeGetProcessEnvPair(Process*, int)>
c0011b59:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011b5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011b60:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011b64:	83 c4 0c             	add    esp,0xc
c0011b67:	85 d2                	test   edx,edx
c0011b69:	75 23                	jne    c0011b8e <SysGetEnv(regs*)+0x86>
c0011b6b:	83 ec 0c             	sub    esp,0xc
c0011b6e:	50                   	push   eax
c0011b6f:	e8 fc e9 fe ff       	call   c0000570 <strlen>
c0011b74:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b77:	89 c3                	mov    ebx,eax
c0011b79:	e8 f2 e9 fe ff       	call   c0000570 <strlen>
c0011b7e:	83 c4 10             	add    esp,0x10
c0011b81:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011b85:	83 c4 10             	add    esp,0x10
c0011b88:	31 d2                	xor    edx,edx
c0011b8a:	5b                   	pop    ebx
c0011b8b:	5e                   	pop    esi
c0011b8c:	5f                   	pop    edi
c0011b8d:	c3                   	ret    
c0011b8e:	83 ec 08             	sub    esp,0x8
c0011b91:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011b94:	50                   	push   eax
c0011b95:	56                   	push   esi
c0011b96:	e8 a5 ea fe ff       	call   c0000640 <strcpy>
c0011b9b:	58                   	pop    eax
c0011b9c:	5a                   	pop    edx
c0011b9d:	68 5c 15 02 c0       	push   0xc002155c
c0011ba2:	56                   	push   esi
c0011ba3:	e8 98 ec fe ff       	call   c0000840 <strcat>
c0011ba8:	59                   	pop    ecx
c0011ba9:	5b                   	pop    ebx
c0011baa:	57                   	push   edi
c0011bab:	56                   	push   esi
c0011bac:	e8 8f ec fe ff       	call   c0000840 <strcat>
c0011bb1:	83 c4 10             	add    esp,0x10
c0011bb4:	e9 78 ff ff ff       	jmp    c0011b31 <SysGetEnv(regs*)+0x29>

c0011bb9 <SysSetFatAttrib(regs*)>:
c0011bb9:	57                   	push   edi
c0011bba:	56                   	push   esi
c0011bbb:	53                   	push   ebx
c0011bbc:	83 ec 1c             	sub    esp,0x1c
c0011bbf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011bc3:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011bc6:	68 14 01 00 00       	push   0x114
c0011bcb:	e8 de 5e ff ff       	call   c0007aae <malloc>
c0011bd0:	83 c4 0c             	add    esp,0xc
c0011bd3:	89 c3                	mov    ebx,eax
c0011bd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bda:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bdd:	50                   	push   eax
c0011bde:	57                   	push   edi
c0011bdf:	53                   	push   ebx
c0011be0:	e8 eb 95 ff ff       	call   c000b1d0 <File::File(char const*, Process*)>
c0011be5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011be8:	83 c4 0c             	add    esp,0xc
c0011beb:	0f b6 d4             	movzx  edx,ah
c0011bee:	0f b6 c0             	movzx  eax,al
c0011bf1:	52                   	push   edx
c0011bf2:	50                   	push   eax
c0011bf3:	53                   	push   ebx
c0011bf4:	e8 a5 98 ff ff       	call   c000b49e <File::chfatattr(unsigned char, unsigned char)>
c0011bf9:	83 c4 10             	add    esp,0x10
c0011bfc:	85 db                	test   ebx,ebx
c0011bfe:	74 14                	je     c0011c14 <SysSetFatAttrib(regs*)+0x5b>
c0011c00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c04:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c06:	83 ec 0c             	sub    esp,0xc
c0011c09:	53                   	push   ebx
c0011c0a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011c0d:	83 c4 10             	add    esp,0x10
c0011c10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c14:	85 c0                	test   eax,eax
c0011c16:	0f 95 c0             	setne  al
c0011c19:	31 d2                	xor    edx,edx
c0011c1b:	0f b6 c0             	movzx  eax,al
c0011c1e:	f7 d8                	neg    eax
c0011c20:	83 d2 00             	adc    edx,0x0
c0011c23:	83 c4 10             	add    esp,0x10
c0011c26:	f7 da                	neg    edx
c0011c28:	5b                   	pop    ebx
c0011c29:	5e                   	pop    esi
c0011c2a:	5f                   	pop    edi
c0011c2b:	c3                   	ret    

c0011c2c <SysPipe(regs*)>:
c0011c2c:	57                   	push   edi
c0011c2d:	56                   	push   esi
c0011c2e:	53                   	push   ebx
c0011c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c33:	83 ec 0c             	sub    esp,0xc
c0011c36:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011c39:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011c3c:	6a 20                	push   0x20
c0011c3e:	e8 6b 5e ff ff       	call   c0007aae <malloc>
c0011c43:	89 c3                	mov    ebx,eax
c0011c45:	58                   	pop    eax
c0011c46:	5a                   	pop    edx
c0011c47:	68 00 50 00 00       	push   0x5000
c0011c4c:	53                   	push   ebx
c0011c4d:	e8 c8 67 ff ff       	call   c000841a <Pipe::Pipe(int)>
c0011c52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c55:	e8 50 75 ff ff       	call   c00091aa <UnixFile::getFileDescriptor()>
c0011c5a:	89 07                	mov    DWORD PTR [edi],eax
c0011c5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c5f:	e8 46 75 ff ff       	call   c00091aa <UnixFile::getFileDescriptor()>
c0011c64:	83 c4 10             	add    esp,0x10
c0011c67:	89 06                	mov    DWORD PTR [esi],eax
c0011c69:	31 d2                	xor    edx,edx
c0011c6b:	5b                   	pop    ebx
c0011c6c:	31 c0                	xor    eax,eax
c0011c6e:	5e                   	pop    esi
c0011c6f:	5f                   	pop    edi
c0011c70:	c3                   	ret    

c0011c71 <SysGetUnixTime(regs*)>:
c0011c71:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011c76:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011c7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c80:	e9 51 9f ff ff       	jmp    c000bbd6 <Clock::timeInSecondsLocal()>

c0011c85 <string_ends_with(char const*, char const*)>:
c0011c85:	57                   	push   edi
c0011c86:	56                   	push   esi
c0011c87:	53                   	push   ebx
c0011c88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c8c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011c90:	83 ec 0c             	sub    esp,0xc
c0011c93:	53                   	push   ebx
c0011c94:	e8 d7 e8 fe ff       	call   c0000570 <strlen>
c0011c99:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011c9c:	89 c6                	mov    esi,eax
c0011c9e:	e8 cd e8 fe ff       	call   c0000570 <strlen>
c0011ca3:	83 c4 10             	add    esp,0x10
c0011ca6:	39 c6                	cmp    esi,eax
c0011ca8:	7d 06                	jge    c0011cb0 <string_ends_with(char const*, char const*)+0x2b>
c0011caa:	5b                   	pop    ebx
c0011cab:	31 c0                	xor    eax,eax
c0011cad:	5e                   	pop    esi
c0011cae:	5f                   	pop    edi
c0011caf:	c3                   	ret    
c0011cb0:	83 ec 08             	sub    esp,0x8
c0011cb3:	29 c6                	sub    esi,eax
c0011cb5:	57                   	push   edi
c0011cb6:	01 f3                	add    ebx,esi
c0011cb8:	53                   	push   ebx
c0011cb9:	e8 92 ea fe ff       	call   c0000750 <strcmp>
c0011cbe:	83 c4 10             	add    esp,0x10
c0011cc1:	85 c0                	test   eax,eax
c0011cc3:	5b                   	pop    ebx
c0011cc4:	0f 94 c0             	sete   al
c0011cc7:	5e                   	pop    esi
c0011cc8:	0f b6 c0             	movzx  eax,al
c0011ccb:	5f                   	pop    edi
c0011ccc:	c3                   	ret    

c0011ccd <SysOpen(regs*)>:
c0011ccd:	56                   	push   esi
c0011cce:	53                   	push   ebx
c0011ccf:	81 ec 04 01 00 00    	sub    esp,0x104
c0011cd5:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011cdc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011cdf:	85 c0                	test   eax,eax
c0011ce1:	0f 84 bd 01 00 00    	je     c0011ea4 <SysOpen(regs*)+0x1d7>
c0011ce7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011cea:	85 c0                	test   eax,eax
c0011cec:	0f 84 b2 01 00 00    	je     c0011ea4 <SysOpen(regs*)+0x1d7>
c0011cf2:	83 ec 04             	sub    esp,0x4
c0011cf5:	68 5e 15 02 c0       	push   0xc002155e
c0011cfa:	50                   	push   eax
c0011cfb:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011cff:	56                   	push   esi
c0011d00:	e8 15 93 ff ff       	call   c000b01a <Fs::standardiseFiles(char*, char const*, char const*)>
c0011d05:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d08:	e8 63 e8 fe ff       	call   c0000570 <strlen>
c0011d0d:	83 c4 10             	add    esp,0x10
c0011d10:	83 e8 01             	sub    eax,0x1
c0011d13:	74 21                	je     c0011d36 <SysOpen(regs*)+0x69>
c0011d15:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011d19:	eb 12                	jmp    c0011d2d <SysOpen(regs*)+0x60>
c0011d1b:	83 fa 3a             	cmp    edx,0x3a
c0011d1e:	74 12                	je     c0011d32 <SysOpen(regs*)+0x65>
c0011d20:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011d24:	83 e8 01             	sub    eax,0x1
c0011d27:	74 0d                	je     c0011d36 <SysOpen(regs*)+0x69>
c0011d29:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011d2d:	83 fa 2e             	cmp    edx,0x2e
c0011d30:	75 e9                	jne    c0011d1b <SysOpen(regs*)+0x4e>
c0011d32:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011d36:	83 ec 08             	sub    esp,0x8
c0011d39:	68 62 15 02 c0       	push   0xc0021562
c0011d3e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d41:	50                   	push   eax
c0011d42:	e8 3e ff ff ff       	call   c0011c85 <string_ends_with(char const*, char const*)>
c0011d47:	83 c4 10             	add    esp,0x10
c0011d4a:	85 c0                	test   eax,eax
c0011d4c:	74 1d                	je     c0011d6b <SysOpen(regs*)+0x9e>
c0011d4e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d51:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011d57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d5e:	81 c4 04 01 00 00    	add    esp,0x104
c0011d64:	31 c0                	xor    eax,eax
c0011d66:	31 d2                	xor    edx,edx
c0011d68:	5b                   	pop    ebx
c0011d69:	5e                   	pop    esi
c0011d6a:	c3                   	ret    
c0011d6b:	83 ec 08             	sub    esp,0x8
c0011d6e:	68 67 15 02 c0       	push   0xc0021567
c0011d73:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d76:	50                   	push   eax
c0011d77:	e8 09 ff ff ff       	call   c0011c85 <string_ends_with(char const*, char const*)>
c0011d7c:	83 c4 10             	add    esp,0x10
c0011d7f:	85 c0                	test   eax,eax
c0011d81:	75 cb                	jne    c0011d4e <SysOpen(regs*)+0x81>
c0011d83:	83 ec 08             	sub    esp,0x8
c0011d86:	68 63 15 02 c0       	push   0xc0021563
c0011d8b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011d8e:	50                   	push   eax
c0011d8f:	e8 bc e9 fe ff       	call   c0000750 <strcmp>
c0011d94:	83 c4 10             	add    esp,0x10
c0011d97:	85 c0                	test   eax,eax
c0011d99:	74 b3                	je     c0011d4e <SysOpen(regs*)+0x81>
c0011d9b:	83 ec 08             	sub    esp,0x8
c0011d9e:	68 62 15 02 c0       	push   0xc0021562
c0011da3:	56                   	push   esi
c0011da4:	e8 dc fe ff ff       	call   c0011c85 <string_ends_with(char const*, char const*)>
c0011da9:	83 c4 10             	add    esp,0x10
c0011dac:	85 c0                	test   eax,eax
c0011dae:	75 9e                	jne    c0011d4e <SysOpen(regs*)+0x81>
c0011db0:	83 ec 08             	sub    esp,0x8
c0011db3:	68 6c 15 02 c0       	push   0xc002156c
c0011db8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011dbb:	50                   	push   eax
c0011dbc:	e8 c4 fe ff ff       	call   c0011c85 <string_ends_with(char const*, char const*)>
c0011dc1:	83 c4 10             	add    esp,0x10
c0011dc4:	85 c0                	test   eax,eax
c0011dc6:	0f 85 eb 00 00 00    	jne    c0011eb7 <SysOpen(regs*)+0x1ea>
c0011dcc:	83 ec 08             	sub    esp,0x8
c0011dcf:	68 71 15 02 c0       	push   0xc0021571
c0011dd4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011dd7:	50                   	push   eax
c0011dd8:	e8 a8 fe ff ff       	call   c0011c85 <string_ends_with(char const*, char const*)>
c0011ddd:	83 c4 10             	add    esp,0x10
c0011de0:	85 c0                	test   eax,eax
c0011de2:	0f 85 cf 00 00 00    	jne    c0011eb7 <SysOpen(regs*)+0x1ea>
c0011de8:	83 ec 08             	sub    esp,0x8
c0011deb:	68 6d 15 02 c0       	push   0xc002156d
c0011df0:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011df3:	51                   	push   ecx
c0011df4:	e8 57 e9 fe ff       	call   c0000750 <strcmp>
c0011df9:	83 c4 10             	add    esp,0x10
c0011dfc:	85 c0                	test   eax,eax
c0011dfe:	0f 84 b3 00 00 00    	je     c0011eb7 <SysOpen(regs*)+0x1ea>
c0011e04:	83 ec 08             	sub    esp,0x8
c0011e07:	68 6c 15 02 c0       	push   0xc002156c
c0011e0c:	56                   	push   esi
c0011e0d:	e8 73 fe ff ff       	call   c0011c85 <string_ends_with(char const*, char const*)>
c0011e12:	83 c4 10             	add    esp,0x10
c0011e15:	85 c0                	test   eax,eax
c0011e17:	0f 85 9a 00 00 00    	jne    c0011eb7 <SysOpen(regs*)+0x1ea>
c0011e1d:	83 ec 0c             	sub    esp,0xc
c0011e20:	68 14 01 00 00       	push   0x114
c0011e25:	e8 84 5c ff ff       	call   c0007aae <malloc>
c0011e2a:	83 c4 0c             	add    esp,0xc
c0011e2d:	89 c6                	mov    esi,eax
c0011e2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e34:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e37:	50                   	push   eax
c0011e38:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011e3b:	52                   	push   edx
c0011e3c:	56                   	push   esi
c0011e3d:	e8 8e 93 ff ff       	call   c000b1d0 <File::File(char const*, Process*)>
c0011e42:	83 c4 10             	add    esp,0x10
c0011e45:	85 f6                	test   esi,esi
c0011e47:	74 5b                	je     c0011ea4 <SysOpen(regs*)+0x1d7>
c0011e49:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e4c:	0f b6 c2             	movzx  eax,dl
c0011e4f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011e52:	89 d0                	mov    eax,edx
c0011e54:	83 e0 01             	and    eax,0x1
c0011e57:	f6 c2 02             	test   dl,0x2
c0011e5a:	74 03                	je     c0011e5f <SysOpen(regs*)+0x192>
c0011e5c:	83 c8 02             	or     eax,0x2
c0011e5f:	f6 c2 04             	test   dl,0x4
c0011e62:	74 03                	je     c0011e67 <SysOpen(regs*)+0x19a>
c0011e64:	83 c8 04             	or     eax,0x4
c0011e67:	f6 c2 08             	test   dl,0x8
c0011e6a:	74 03                	je     c0011e6f <SysOpen(regs*)+0x1a2>
c0011e6c:	83 c8 0a             	or     eax,0xa
c0011e6f:	80 e2 10             	and    dl,0x10
c0011e72:	74 03                	je     c0011e77 <SysOpen(regs*)+0x1aa>
c0011e74:	83 c8 12             	or     eax,0x12
c0011e77:	83 ec 08             	sub    esp,0x8
c0011e7a:	50                   	push   eax
c0011e7b:	56                   	push   esi
c0011e7c:	e8 0b 94 ff ff       	call   c000b28c <File::open(FileOpenMode)>
c0011e81:	83 c4 10             	add    esp,0x10
c0011e84:	85 c0                	test   eax,eax
c0011e86:	75 1c                	jne    c0011ea4 <SysOpen(regs*)+0x1d7>
c0011e88:	83 ec 0c             	sub    esp,0xc
c0011e8b:	56                   	push   esi
c0011e8c:	e8 19 73 ff ff       	call   c00091aa <UnixFile::getFileDescriptor()>
c0011e91:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011e94:	83 c4 10             	add    esp,0x10
c0011e97:	89 02                	mov    DWORD PTR [edx],eax
c0011e99:	c1 f8 1f             	sar    eax,0x1f
c0011e9c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e9f:	e9 ba fe ff ff       	jmp    c0011d5e <SysOpen(regs*)+0x91>
c0011ea4:	81 c4 04 01 00 00    	add    esp,0x104
c0011eaa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011eaf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011eb4:	5b                   	pop    ebx
c0011eb5:	5e                   	pop    esi
c0011eb6:	c3                   	ret    
c0011eb7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011eba:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011ec0:	e9 92 fe ff ff       	jmp    c0011d57 <SysOpen(regs*)+0x8a>

c0011ec5 <KeSystemCall(regs*, void*)>:
c0011ec5:	53                   	push   ebx
c0011ec6:	83 ec 08             	sub    esp,0x8
c0011ec9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ecd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011ed0:	83 f8 3b             	cmp    eax,0x3b
c0011ed3:	77 16                	ja     c0011eeb <KeSystemCall(regs*, void*)+0x26>
c0011ed5:	8b 14 85 c0 29 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd640]
c0011edc:	85 d2                	test   edx,edx
c0011ede:	74 0b                	je     c0011eeb <KeSystemCall(regs*, void*)+0x26>
c0011ee0:	83 ec 0c             	sub    esp,0xc
c0011ee3:	53                   	push   ebx
c0011ee4:	ff d2                	call   edx
c0011ee6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011ee9:	eb 0d                	jmp    c0011ef8 <KeSystemCall(regs*, void*)+0x33>
c0011eeb:	52                   	push   edx
c0011eec:	52                   	push   edx
c0011eed:	50                   	push   eax
c0011eee:	68 76 15 02 c0       	push   0xc0021576
c0011ef3:	e8 7f 8a ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0011ef8:	83 c4 10             	add    esp,0x10
c0011efb:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011f00:	31 d2                	xor    edx,edx
c0011f02:	83 c4 08             	add    esp,0x8
c0011f05:	5b                   	pop    ebx
c0011f06:	c3                   	ret    
c0011f07:	90                   	nop

c0011f08 <KeSwitchEndian16(unsigned short)>:
c0011f08:	83 ec 04             	sub    esp,0x4
c0011f0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f0f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011f13:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011f17:	c1 f8 08             	sar    eax,0x8
c0011f1a:	89 c2                	mov    edx,eax
c0011f1c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011f20:	c1 e0 08             	shl    eax,0x8
c0011f23:	09 d0                	or     eax,edx
c0011f25:	83 c4 04             	add    esp,0x4
c0011f28:	c3                   	ret    
c0011f29:	8d 76 00             	lea    esi,[esi+0x0]

c0011f2c <KeSwitchEndian32(unsigned int)>:
c0011f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f30:	c1 e8 18             	shr    eax,0x18
c0011f33:	89 c2                	mov    edx,eax
c0011f35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f39:	c1 e0 08             	shl    eax,0x8
c0011f3c:	25 00 00 ff 00       	and    eax,0xff0000
c0011f41:	09 c2                	or     edx,eax
c0011f43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f47:	c1 e8 08             	shr    eax,0x8
c0011f4a:	25 00 ff 00 00       	and    eax,0xff00
c0011f4f:	09 c2                	or     edx,eax
c0011f51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f55:	c1 e0 18             	shl    eax,0x18
c0011f58:	09 d0                	or     eax,edx
c0011f5a:	c3                   	ret    
c0011f5b:	90                   	nop

c0011f5c <EthernetCRC32(unsigned char*, int)>:
c0011f5c:	83 ec 10             	sub    esp,0x10
c0011f5f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011f64:	75 0a                	jne    c0011f70 <EthernetCRC32(unsigned char*, int)+0x14>
c0011f66:	b8 00 00 00 00       	mov    eax,0x0
c0011f6b:	e9 8c 00 00 00       	jmp    c0011ffc <EthernetCRC32(unsigned char*, int)+0xa0>
c0011f70:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011f75:	7f 09                	jg     c0011f80 <EthernetCRC32(unsigned char*, int)+0x24>
c0011f77:	b8 00 00 00 00       	mov    eax,0x0
c0011f7c:	eb 7e                	jmp    c0011ffc <EthernetCRC32(unsigned char*, int)+0xa0>
c0011f7e:	66 90                	xchg   ax,ax
c0011f80:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011f88:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011f90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f94:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011f98:	7d 5a                	jge    c0011ff4 <EthernetCRC32(unsigned char*, int)+0x98>
c0011f9a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011f9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011fa2:	01 d0                	add    eax,edx
c0011fa4:	8a 00                	mov    al,BYTE PTR [eax]
c0011fa6:	0f b6 c0             	movzx  eax,al
c0011fa9:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011fad:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0011fb8:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011fbd:	7f 2d                	jg     c0011fec <EthernetCRC32(unsigned char*, int)+0x90>
c0011fbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fc3:	83 e0 01             	and    eax,0x1
c0011fc6:	74 10                	je     c0011fd8 <EthernetCRC32(unsigned char*, int)+0x7c>
c0011fc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fcc:	d1 e8                	shr    eax,1
c0011fce:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011fd3:	eb 0b                	jmp    c0011fe0 <EthernetCRC32(unsigned char*, int)+0x84>
c0011fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0011fd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fdc:	d1 e8                	shr    eax,1
c0011fde:	66 90                	xchg   ax,ax
c0011fe0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011fe4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0011fe9:	eb cd                	jmp    c0011fb8 <EthernetCRC32(unsigned char*, int)+0x5c>
c0011feb:	90                   	nop
c0011fec:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0011ff1:	eb 9d                	jmp    c0011f90 <EthernetCRC32(unsigned char*, int)+0x34>
c0011ff3:	90                   	nop
c0011ff4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ff8:	f7 d0                	not    eax
c0011ffa:	66 90                	xchg   ax,ax
c0011ffc:	83 c4 10             	add    esp,0x10
c0011fff:	c3                   	ret    

c0012000 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012000:	83 ec 2c             	sub    esp,0x2c
c0012003:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012007:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001200c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012010:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012014:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012018:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001201b:	0f b7 c0             	movzx  eax,ax
c001201e:	3d 06 08 00 00       	cmp    eax,0x806
c0012023:	75 13                	jne    c0012038 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012025:	83 ec 0c             	sub    esp,0xc
c0012028:	68 8a 15 02 c0       	push   0xc002158a
c001202d:	e8 45 89 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0012032:	83 c4 10             	add    esp,0x10
c0012035:	eb 25                	jmp    c001205c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012037:	90                   	nop
c0012038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001203c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001203f:	0f b7 c0             	movzx  eax,ax
c0012042:	3d 00 08 00 00       	cmp    eax,0x800
c0012047:	75 13                	jne    c001205c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012049:	83 ec 0c             	sub    esp,0xc
c001204c:	68 a0 15 02 c0       	push   0xc00215a0
c0012051:	e8 21 89 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0012056:	83 c4 10             	add    esp,0x10
c0012059:	8d 76 00             	lea    esi,[esi+0x0]
c001205c:	90                   	nop
c001205d:	83 c4 2c             	add    esp,0x2c
c0012060:	c3                   	ret    

c0012061 <CmOpen(char const*)>:
c0012061:	57                   	push   edi
c0012062:	56                   	push   esi
c0012063:	53                   	push   ebx
c0012064:	83 ec 1c             	sub    esp,0x1c
c0012067:	6a 30                	push   0x30
c0012069:	e8 40 5a ff ff       	call   c0007aae <malloc>
c001206e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012075:	89 c3                	mov    ebx,eax
c0012077:	e8 32 5a ff ff       	call   c0007aae <malloc>
c001207c:	83 c4 0c             	add    esp,0xc
c001207f:	89 c6                	mov    esi,eax
c0012081:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c0012087:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001208b:	50                   	push   eax
c001208c:	e8 3f 91 ff ff       	call   c000b1d0 <File::File(char const*, Process*)>
c0012091:	83 c4 0c             	add    esp,0xc
c0012094:	89 33                	mov    DWORD PTR [ebx],esi
c0012096:	8d 44 24 07          	lea    eax,[esp+0x7]
c001209a:	50                   	push   eax
c001209b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001209f:	50                   	push   eax
c00120a0:	56                   	push   esi
c00120a1:	e8 92 94 ff ff       	call   c000b538 <File::stat(unsigned long long*, bool*)>
c00120a6:	5a                   	pop    edx
c00120a7:	59                   	pop    ecx
c00120a8:	6a 01                	push   0x1
c00120aa:	ff 33                	push   DWORD PTR [ebx]
c00120ac:	e8 db 91 ff ff       	call   c000b28c <File::open(FileOpenMode)>
c00120b1:	5e                   	pop    esi
c00120b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120b6:	e8 f3 59 ff ff       	call   c0007aae <malloc>
c00120bb:	5a                   	pop    edx
c00120bc:	89 c7                	mov    edi,eax
c00120be:	8d 74 24 10          	lea    esi,[esp+0x10]
c00120c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00120c6:	56                   	push   esi
c00120c7:	57                   	push   edi
c00120c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00120cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00120d0:	50                   	push   eax
c00120d1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00120d4:	83 c4 14             	add    esp,0x14
c00120d7:	ff 33                	push   DWORD PTR [ebx]
c00120d9:	e8 0c 92 ff ff       	call   c000b2ea <File::close()>
c00120de:	59                   	pop    ecx
c00120df:	58                   	pop    eax
c00120e0:	6a 13                	push   0x13
c00120e2:	ff 33                	push   DWORD PTR [ebx]
c00120e4:	e8 a3 91 ff ff       	call   c000b28c <File::open(FileOpenMode)>
c00120e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00120ed:	89 34 24             	mov    DWORD PTR [esp],esi
c00120f0:	57                   	push   edi
c00120f1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00120f5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00120f9:	50                   	push   eax
c00120fa:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00120fd:	83 c4 14             	add    esp,0x14
c0012100:	57                   	push   edi
c0012101:	e8 b8 59 ff ff       	call   c0007abe <free>
c0012106:	83 c4 10             	add    esp,0x10
c0012109:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001210c:	75 10                	jne    c001211e <CmOpen(char const*)+0xbd>
c001210e:	83 ec 0c             	sub    esp,0xc
c0012111:	68 b5 15 02 c0       	push   0xc00215b5
c0012116:	e8 c0 ea ff ff       	call   c0010bdb <KePanic(char const*)>
c001211b:	83 c4 10             	add    esp,0x10
c001211e:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012121:	50                   	push   eax
c0012122:	6a 00                	push   0x0
c0012124:	6a 00                	push   0x0
c0012126:	ff 33                	push   DWORD PTR [ebx]
c0012128:	e8 1d 92 ff ff       	call   c000b34a <File::seek(unsigned long long)>
c001212d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001212f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012131:	89 34 24             	mov    DWORD PTR [esp],esi
c0012134:	57                   	push   edi
c0012135:	6a 00                	push   0x0
c0012137:	6a 2b                	push   0x2b
c0012139:	50                   	push   eax
c001213a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001213d:	83 c4 1c             	add    esp,0x1c
c0012140:	6a 00                	push   0x0
c0012142:	6a 00                	push   0x0
c0012144:	ff 33                	push   DWORD PTR [ebx]
c0012146:	e8 ff 91 ff ff       	call   c000b34a <File::seek(unsigned long long)>
c001214b:	83 c4 0c             	add    esp,0xc
c001214e:	6a 08                	push   0x8
c0012150:	68 c6 15 02 c0       	push   0xc00215c6
c0012155:	57                   	push   edi
c0012156:	e8 25 e2 fe ff       	call   c0000380 <memcmp>
c001215b:	83 c4 10             	add    esp,0x10
c001215e:	85 c0                	test   eax,eax
c0012160:	74 10                	je     c0012172 <CmOpen(char const*)+0x111>
c0012162:	83 ec 0c             	sub    esp,0xc
c0012165:	68 cf 15 02 c0       	push   0xc00215cf
c001216a:	e8 6c ea ff ff       	call   c0010bdb <KePanic(char const*)>
c001216f:	83 c4 10             	add    esp,0x10
c0012172:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012176:	89 d8                	mov    eax,ebx
c0012178:	83 c4 10             	add    esp,0x10
c001217b:	5b                   	pop    ebx
c001217c:	5e                   	pop    esi
c001217d:	5f                   	pop    edi
c001217e:	c3                   	ret    

c001217f <CmClose(Reghive_Tag*)>:
c001217f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012183:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012187:	74 0b                	je     c0012194 <CmClose(Reghive_Tag*)+0x15>
c0012189:	8b 00                	mov    eax,DWORD PTR [eax]
c001218b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001218f:	e9 56 91 ff ff       	jmp    c000b2ea <File::close()>
c0012194:	c3                   	ret    

c0012195 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012195:	53                   	push   ebx
c0012196:	83 ec 18             	sub    esp,0x18
c0012199:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001219d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00121a1:	74 29                	je     c00121cc <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00121a3:	50                   	push   eax
c00121a4:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00121a9:	99                   	cdq    
c00121aa:	52                   	push   edx
c00121ab:	50                   	push   eax
c00121ac:	ff 33                	push   DWORD PTR [ebx]
c00121ae:	e8 97 91 ff ff       	call   c000b34a <File::seek(unsigned long long)>
c00121b3:	5a                   	pop    edx
c00121b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00121b6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00121ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00121bc:	51                   	push   ecx
c00121bd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00121c1:	6a 00                	push   0x0
c00121c3:	6a 2b                	push   0x2b
c00121c5:	50                   	push   eax
c00121c6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00121c9:	83 c4 20             	add    esp,0x20
c00121cc:	83 c4 18             	add    esp,0x18
c00121cf:	5b                   	pop    ebx
c00121d0:	c3                   	ret    

c00121d1 <CmGetString(Reghive_Tag*, int, char*)>:
c00121d1:	55                   	push   ebp
c00121d2:	57                   	push   edi
c00121d3:	56                   	push   esi
c00121d4:	53                   	push   ebx
c00121d5:	31 db                	xor    ebx,ebx
c00121d7:	83 ec 70             	sub    esp,0x70
c00121da:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c00121e1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00121e5:	50                   	push   eax
c00121e6:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00121ed:	55                   	push   ebp
c00121ee:	e8 a2 ff ff ff       	call   c0012195 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121f3:	83 c4 10             	add    esp,0x10
c00121f6:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c00121fb:	c1 e0 08             	shl    eax,0x8
c00121fe:	89 c2                	mov    edx,eax
c0012200:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012205:	09 d0                	or     eax,edx
c0012207:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c001220c:	c1 e0 08             	shl    eax,0x8
c001220f:	09 d0                	or     eax,edx
c0012211:	74 25                	je     c0012238 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012213:	6b fb 0d             	imul   edi,ebx,0xd
c0012216:	52                   	push   edx
c0012217:	8d 54 24 39          	lea    edx,[esp+0x39]
c001221b:	52                   	push   edx
c001221c:	50                   	push   eax
c001221d:	55                   	push   ebp
c001221e:	e8 72 ff ff ff       	call   c0012195 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012223:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012227:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c001222e:	b9 27 00 00 00       	mov    ecx,0x27
c0012233:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012235:	83 c4 10             	add    esp,0x10
c0012238:	83 c3 03             	add    ebx,0x3
c001223b:	83 fb 15             	cmp    ebx,0x15
c001223e:	75 b6                	jne    c00121f6 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012240:	83 c4 6c             	add    esp,0x6c
c0012243:	5b                   	pop    ebx
c0012244:	5e                   	pop    esi
c0012245:	5f                   	pop    edi
c0012246:	5d                   	pop    ebp
c0012247:	c3                   	ret    

c0012248 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012248:	83 ec 40             	sub    esp,0x40
c001224b:	8d 44 24 09          	lea    eax,[esp+0x9]
c001224f:	50                   	push   eax
c0012250:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012254:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012258:	e8 38 ff ff ff       	call   c0012195 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001225d:	83 c4 10             	add    esp,0x10
c0012260:	83 c8 ff             	or     eax,0xffffffff
c0012263:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012268:	75 19                	jne    c0012283 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c001226a:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c001226f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012274:	c1 e0 08             	shl    eax,0x8
c0012277:	09 c2                	or     edx,eax
c0012279:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c001227e:	c1 e0 10             	shl    eax,0x10
c0012281:	09 d0                	or     eax,edx
c0012283:	83 c4 3c             	add    esp,0x3c
c0012286:	c3                   	ret    

c0012287 <CmGetNext(Reghive_Tag*, int)>:
c0012287:	83 ec 40             	sub    esp,0x40
c001228a:	8d 44 24 09          	lea    eax,[esp+0x9]
c001228e:	50                   	push   eax
c001228f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012293:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012297:	e8 f9 fe ff ff       	call   c0012195 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001229c:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00122a1:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00122a6:	c1 e0 08             	shl    eax,0x8
c00122a9:	09 c2                	or     edx,eax
c00122ab:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00122b0:	83 c4 4c             	add    esp,0x4c
c00122b3:	c1 e0 10             	shl    eax,0x10
c00122b6:	09 d0                	or     eax,edx
c00122b8:	c3                   	ret    

c00122b9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c00122b9:	53                   	push   ebx
c00122ba:	83 ec 18             	sub    esp,0x18
c00122bd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00122c1:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00122c5:	74 29                	je     c00122f0 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00122c7:	50                   	push   eax
c00122c8:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00122cd:	99                   	cdq    
c00122ce:	52                   	push   edx
c00122cf:	50                   	push   eax
c00122d0:	ff 33                	push   DWORD PTR [ebx]
c00122d2:	e8 73 90 ff ff       	call   c000b34a <File::seek(unsigned long long)>
c00122d7:	5a                   	pop    edx
c00122d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00122da:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00122de:	8b 10                	mov    edx,DWORD PTR [eax]
c00122e0:	51                   	push   ecx
c00122e1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00122e5:	6a 00                	push   0x0
c00122e7:	6a 2b                	push   0x2b
c00122e9:	50                   	push   eax
c00122ea:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00122ed:	83 c4 20             	add    esp,0x20
c00122f0:	83 c4 18             	add    esp,0x18
c00122f3:	5b                   	pop    ebx
c00122f4:	c3                   	ret    

c00122f5 <CmFreeExtent(Reghive_Tag*, int)>:
c00122f5:	53                   	push   ebx
c00122f6:	83 ec 3c             	sub    esp,0x3c
c00122f9:	6a 2b                	push   0x2b
c00122fb:	6a 00                	push   0x0
c00122fd:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012301:	53                   	push   ebx
c0012302:	e8 e9 e1 fe ff       	call   c00004f0 <memset>
c0012307:	83 c4 0c             	add    esp,0xc
c001230a:	53                   	push   ebx
c001230b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001230f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012313:	e8 a1 ff ff ff       	call   c00122b9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012318:	83 c4 48             	add    esp,0x48
c001231b:	5b                   	pop    ebx
c001231c:	c3                   	ret    

c001231d <CmUpdateHeader(Reghive_Tag*)>:
c001231d:	83 ec 0c             	sub    esp,0xc
c0012320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012324:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012328:	74 10                	je     c001233a <CmUpdateHeader(Reghive_Tag*)+0x1d>
c001232a:	52                   	push   edx
c001232b:	8d 50 05             	lea    edx,[eax+0x5]
c001232e:	52                   	push   edx
c001232f:	6a 00                	push   0x0
c0012331:	50                   	push   eax
c0012332:	e8 82 ff ff ff       	call   c00122b9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012337:	83 c4 10             	add    esp,0x10
c001233a:	83 c4 0c             	add    esp,0xc
c001233d:	c3                   	ret    

c001233e <CmExpand(Reghive_Tag*, int)>:
c001233e:	57                   	push   edi
c001233f:	56                   	push   esi
c0012340:	83 ce ff             	or     esi,0xffffffff
c0012343:	53                   	push   ebx
c0012344:	83 ec 30             	sub    esp,0x30
c0012347:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001234b:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c001234f:	74 5f                	je     c00123b0 <CmExpand(Reghive_Tag*, int)+0x72>
c0012351:	31 d2                	xor    edx,edx
c0012353:	31 f6                	xor    esi,esi
c0012355:	50                   	push   eax
c0012356:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c001235a:	52                   	push   edx
c001235b:	50                   	push   eax
c001235c:	ff 33                	push   DWORD PTR [ebx]
c001235e:	e8 e7 8f ff ff       	call   c000b34a <File::seek(unsigned long long)>
c0012363:	83 c4 0c             	add    esp,0xc
c0012366:	6a 2b                	push   0x2b
c0012368:	6a 00                	push   0x0
c001236a:	8d 7c 24 11          	lea    edi,[esp+0x11]
c001236e:	57                   	push   edi
c001236f:	e8 7c e1 fe ff       	call   c00004f0 <memset>
c0012374:	83 c4 10             	add    esp,0x10
c0012377:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001237b:	7d 1b                	jge    c0012398 <CmExpand(Reghive_Tag*, int)+0x5a>
c001237d:	83 ec 0c             	sub    esp,0xc
c0012380:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012382:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012386:	8b 10                	mov    edx,DWORD PTR [eax]
c0012388:	46                   	inc    esi
c0012389:	51                   	push   ecx
c001238a:	57                   	push   edi
c001238b:	6a 00                	push   0x0
c001238d:	6a 2b                	push   0x2b
c001238f:	50                   	push   eax
c0012390:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012393:	83 c4 20             	add    esp,0x20
c0012396:	eb df                	jmp    c0012377 <CmExpand(Reghive_Tag*, int)+0x39>
c0012398:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001239c:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c001239f:	83 ec 0c             	sub    esp,0xc
c00123a2:	01 f2                	add    edx,esi
c00123a4:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c00123a7:	53                   	push   ebx
c00123a8:	e8 70 ff ff ff       	call   c001231d <CmUpdateHeader(Reghive_Tag*)>
c00123ad:	83 c4 10             	add    esp,0x10
c00123b0:	83 c4 30             	add    esp,0x30
c00123b3:	89 f0                	mov    eax,esi
c00123b5:	5b                   	pop    ebx
c00123b6:	5e                   	pop    esi
c00123b7:	5f                   	pop    edi
c00123b8:	c3                   	ret    

c00123b9 <CmFindUnusedExtent(Reghive_Tag*)>:
c00123b9:	55                   	push   ebp
c00123ba:	57                   	push   edi
c00123bb:	56                   	push   esi
c00123bc:	53                   	push   ebx
c00123bd:	83 cb ff             	or     ebx,0xffffffff
c00123c0:	83 ec 1c             	sub    esp,0x1c
c00123c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00123c7:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c00123cb:	74 68                	je     c0012435 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00123cd:	be 2b 00 00 00       	mov    esi,0x2b
c00123d2:	51                   	push   ecx
c00123d3:	31 ff                	xor    edi,edi
c00123d5:	6a 00                	push   0x0
c00123d7:	31 db                	xor    ebx,ebx
c00123d9:	6a 00                	push   0x0
c00123db:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00123de:	e8 67 8f ff ff       	call   c000b34a <File::seek(unsigned long long)>
c00123e3:	83 c4 10             	add    esp,0x10
c00123e6:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c00123e9:	76 3b                	jbe    c0012426 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c00123eb:	83 ec 0c             	sub    esp,0xc
c00123ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00123f1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00123f5:	8b 10                	mov    edx,DWORD PTR [eax]
c00123f7:	51                   	push   ecx
c00123f8:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c00123fc:	51                   	push   ecx
c00123fd:	6a 00                	push   0x0
c00123ff:	6a 01                	push   0x1
c0012401:	50                   	push   eax
c0012402:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012405:	83 c4 20             	add    esp,0x20
c0012408:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001240d:	74 26                	je     c0012435 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c001240f:	43                   	inc    ebx
c0012410:	52                   	push   edx
c0012411:	57                   	push   edi
c0012412:	56                   	push   esi
c0012413:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012416:	e8 2f 8f ff ff       	call   c000b34a <File::seek(unsigned long long)>
c001241b:	83 c6 2b             	add    esi,0x2b
c001241e:	83 d7 00             	adc    edi,0x0
c0012421:	83 c4 10             	add    esp,0x10
c0012424:	eb c0                	jmp    c00123e6 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012426:	50                   	push   eax
c0012427:	50                   	push   eax
c0012428:	6a 40                	push   0x40
c001242a:	55                   	push   ebp
c001242b:	e8 0e ff ff ff       	call   c001233e <CmExpand(Reghive_Tag*, int)>
c0012430:	83 c4 10             	add    esp,0x10
c0012433:	89 c3                	mov    ebx,eax
c0012435:	83 c4 1c             	add    esp,0x1c
c0012438:	89 d8                	mov    eax,ebx
c001243a:	5b                   	pop    ebx
c001243b:	5e                   	pop    esi
c001243c:	5f                   	pop    edi
c001243d:	5d                   	pop    ebp
c001243e:	c3                   	ret    

c001243f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c001243f:	55                   	push   ebp
c0012440:	57                   	push   edi
c0012441:	56                   	push   esi
c0012442:	53                   	push   ebx
c0012443:	81 ec 88 00 00 00    	sub    esp,0x88
c0012449:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012450:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012457:	e8 5d ff ff ff       	call   c00123b9 <CmFindUnusedExtent(Reghive_Tag*)>
c001245c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012460:	83 c4 0c             	add    esp,0xc
c0012463:	6a 2b                	push   0x2b
c0012465:	6a 00                	push   0x0
c0012467:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c001246b:	55                   	push   ebp
c001246c:	e8 7f e0 fe ff       	call   c00004f0 <memset>
c0012471:	83 c4 10             	add    esp,0x10
c0012474:	85 db                	test   ebx,ebx
c0012476:	74 12                	je     c001248a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012478:	51                   	push   ecx
c0012479:	55                   	push   ebp
c001247a:	53                   	push   ebx
c001247b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012482:	e8 0e fd ff ff       	call   c0012195 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012487:	83 c4 10             	add    esp,0x10
c001248a:	8d 7c 24 45          	lea    edi,[esp+0x45]
c001248e:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012495:	b9 2b 00 00 00       	mov    ecx,0x2b
c001249a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001249c:	85 db                	test   ebx,ebx
c001249e:	74 49                	je     c00124e9 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00124a0:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00124a5:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00124aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124ae:	c1 e0 08             	shl    eax,0x8
c00124b1:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00124b7:	09 c8                	or     eax,ecx
c00124b9:	74 11                	je     c00124cc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00124bb:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00124bf:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00124c3:	c1 e8 10             	shr    eax,0x10
c00124c6:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00124ca:	eb 0f                	jmp    c00124db <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c00124cc:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00124d1:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00124d6:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00124db:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c00124df:	c1 ea 08             	shr    edx,0x8
c00124e2:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c00124e7:	eb 0f                	jmp    c00124f8 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c00124e9:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00124ee:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00124f3:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00124f8:	52                   	push   edx
c00124f9:	8d 44 24 49          	lea    eax,[esp+0x49]
c00124fd:	50                   	push   eax
c00124fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012502:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012509:	e8 ab fd ff ff       	call   c00122b9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001250e:	83 c4 10             	add    esp,0x10
c0012511:	85 db                	test   ebx,ebx
c0012513:	74 12                	je     c0012527 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012515:	50                   	push   eax
c0012516:	55                   	push   ebp
c0012517:	53                   	push   ebx
c0012518:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001251f:	e8 95 fd ff ff       	call   c00122b9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012524:	83 c4 10             	add    esp,0x10
c0012527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001252b:	83 c4 7c             	add    esp,0x7c
c001252e:	5b                   	pop    ebx
c001252f:	5e                   	pop    esi
c0012530:	5f                   	pop    edi
c0012531:	5d                   	pop    ebp
c0012532:	c3                   	ret    

c0012533 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012533:	55                   	push   ebp
c0012534:	57                   	push   edi
c0012535:	56                   	push   esi
c0012536:	53                   	push   ebx
c0012537:	bb 27 00 00 00       	mov    ebx,0x27
c001253c:	81 ec 88 00 00 00    	sub    esp,0x88
c0012542:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012549:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012550:	e8 1b e0 fe ff       	call   c0000570 <strlen>
c0012555:	8d 48 26             	lea    ecx,[eax+0x26]
c0012558:	89 c8                	mov    eax,ecx
c001255a:	99                   	cdq    
c001255b:	f7 fb                	idiv   ebx
c001255d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012561:	83 c4 10             	add    esp,0x10
c0012564:	81 f9 37 01 00 00    	cmp    ecx,0x137
c001256a:	7e 10                	jle    c001257c <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c001256c:	83 ec 0c             	sub    esp,0xc
c001256f:	68 e0 15 02 c0       	push   0xc00215e0
c0012574:	e8 62 e6 ff ff       	call   c0010bdb <KePanic(char const*)>
c0012579:	83 c4 10             	add    esp,0x10
c001257c:	31 ff                	xor    edi,edi
c001257e:	50                   	push   eax
c001257f:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012583:	53                   	push   ebx
c0012584:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001258b:	56                   	push   esi
c001258c:	e8 04 fc ff ff       	call   c0012195 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012591:	83 c4 10             	add    esp,0x10
c0012594:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0012598:	89 d0                	mov    eax,edx
c001259a:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c001259e:	c1 e0 08             	shl    eax,0x8
c00125a1:	09 c2                	or     edx,eax
c00125a3:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00125a7:	c1 e2 08             	shl    edx,0x8
c00125aa:	09 c2                	or     edx,eax
c00125ac:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00125b0:	7e 76                	jle    c0012628 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c00125b2:	85 d2                	test   edx,edx
c00125b4:	75 25                	jne    c00125db <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00125b6:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00125bb:	8d 44 24 45          	lea    eax,[esp+0x45]
c00125bf:	50                   	push   eax
c00125c0:	6a 00                	push   0x0
c00125c2:	6a 00                	push   0x0
c00125c4:	56                   	push   esi
c00125c5:	e8 75 fe ff ff       	call   c001243f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00125ca:	83 c4 10             	add    esp,0x10
c00125cd:	89 c2                	mov    edx,eax
c00125cf:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c00125d2:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c00125d5:	c1 f8 10             	sar    eax,0x10
c00125d8:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c00125db:	55                   	push   ebp
c00125dc:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c00125e0:	55                   	push   ebp
c00125e1:	52                   	push   edx
c00125e2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00125e6:	56                   	push   esi
c00125e7:	e8 a9 fb ff ff       	call   c0012195 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00125ec:	83 c4 0c             	add    esp,0xc
c00125ef:	6a 27                	push   0x27
c00125f1:	6a 00                	push   0x0
c00125f3:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00125f7:	51                   	push   ecx
c00125f8:	e8 f3 de fe ff       	call   c00004f0 <memset>
c00125fd:	83 c4 0c             	add    esp,0xc
c0012600:	6b c7 27             	imul   eax,edi,0x27
c0012603:	6a 27                	push   0x27
c0012605:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c001260c:	50                   	push   eax
c001260d:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012611:	51                   	push   ecx
c0012612:	e8 69 e0 fe ff       	call   c0000680 <strncpy>
c0012617:	83 c4 0c             	add    esp,0xc
c001261a:	55                   	push   ebp
c001261b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001261f:	52                   	push   edx
c0012620:	56                   	push   esi
c0012621:	e8 93 fc ff ff       	call   c00122b9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012626:	eb 19                	jmp    c0012641 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0012628:	85 d2                	test   edx,edx
c001262a:	74 18                	je     c0012644 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c001262c:	51                   	push   ecx
c001262d:	51                   	push   ecx
c001262e:	52                   	push   edx
c001262f:	56                   	push   esi
c0012630:	e8 c0 fc ff ff       	call   c00122f5 <CmFreeExtent(Reghive_Tag*, int)>
c0012635:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012639:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c001263d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012641:	83 c4 10             	add    esp,0x10
c0012644:	47                   	inc    edi
c0012645:	83 c3 03             	add    ebx,0x3
c0012648:	83 ff 07             	cmp    edi,0x7
c001264b:	0f 85 43 ff ff ff    	jne    c0012594 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012651:	50                   	push   eax
c0012652:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012656:	50                   	push   eax
c0012657:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001265e:	56                   	push   esi
c001265f:	e8 55 fc ff ff       	call   c00122b9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012664:	81 c4 8c 00 00 00    	add    esp,0x8c
c001266a:	5b                   	pop    ebx
c001266b:	5e                   	pop    esi
c001266c:	5f                   	pop    edi
c001266d:	5d                   	pop    ebp
c001266e:	c3                   	ret    

c001266f <CmGetMatch(char*, char*, bool, bool*)>:
c001266f:	56                   	push   esi
c0012670:	53                   	push   ebx
c0012671:	50                   	push   eax
c0012672:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012676:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001267b:	74 25                	je     c00126a2 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c001267d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012680:	31 db                	xor    ebx,ebx
c0012682:	50                   	push   eax
c0012683:	50                   	push   eax
c0012684:	8d 04 9d c0 2a 02 c0 	lea    eax,[ebx*4-0x3ffdd540]
c001268b:	50                   	push   eax
c001268c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012690:	e8 bb e0 fe ff       	call   c0000750 <strcmp>
c0012695:	83 c4 10             	add    esp,0x10
c0012698:	85 c0                	test   eax,eax
c001269a:	74 2e                	je     c00126ca <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c001269c:	43                   	inc    ebx
c001269d:	83 fb 3f             	cmp    ebx,0x3f
c00126a0:	75 e0                	jne    c0012682 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00126a2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00126a5:	31 db                	xor    ebx,ebx
c00126a7:	8d 04 9d c0 2a 02 c0 	lea    eax,[ebx*4-0x3ffdd540]
c00126ae:	51                   	push   ecx
c00126af:	51                   	push   ecx
c00126b0:	50                   	push   eax
c00126b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126b5:	e8 96 e0 fe ff       	call   c0000750 <strcmp>
c00126ba:	83 c4 10             	add    esp,0x10
c00126bd:	85 c0                	test   eax,eax
c00126bf:	74 09                	je     c00126ca <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00126c1:	43                   	inc    ebx
c00126c2:	83 fb 3f             	cmp    ebx,0x3f
c00126c5:	75 e0                	jne    c00126a7 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00126c7:	83 cb ff             	or     ebx,0xffffffff
c00126ca:	89 d8                	mov    eax,ebx
c00126cc:	5a                   	pop    edx
c00126cd:	5b                   	pop    ebx
c00126ce:	5e                   	pop    esi
c00126cf:	c3                   	ret    

c00126d0 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c00126d0:	55                   	push   ebp
c00126d1:	31 c0                	xor    eax,eax
c00126d3:	57                   	push   edi
c00126d4:	56                   	push   esi
c00126d5:	53                   	push   ebx
c00126d6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00126da:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00126de:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00126e0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00126e4:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00126e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00126eb:	83 fd 1f             	cmp    ebp,0x1f
c00126ee:	7f 0b                	jg     c00126fb <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00126f0:	0f b6 c2             	movzx  eax,dl
c00126f3:	d3 e0                	shl    eax,cl
c00126f5:	09 07                	or     DWORD PTR [edi],eax
c00126f7:	b0 01                	mov    al,0x1
c00126f9:	01 33                	add    DWORD PTR [ebx],esi
c00126fb:	5b                   	pop    ebx
c00126fc:	5e                   	pop    esi
c00126fd:	5f                   	pop    edi
c00126fe:	5d                   	pop    ebp
c00126ff:	c3                   	ret    

c0012700 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012700:	57                   	push   edi
c0012701:	56                   	push   esi
c0012702:	53                   	push   ebx
c0012703:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012707:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001270b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001270f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012713:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012715:	7c 17                	jl     c001272e <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012717:	8b 17                	mov    edx,DWORD PTR [edi]
c0012719:	b8 01 00 00 00       	mov    eax,0x1
c001271e:	d3 e0                	shl    eax,cl
c0012720:	48                   	dec    eax
c0012721:	21 d0                	and    eax,edx
c0012723:	d3 ea                	shr    edx,cl
c0012725:	89 17                	mov    DWORD PTR [edi],edx
c0012727:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012729:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001272c:	eb 05                	jmp    c0012733 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c001272e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012731:	31 c0                	xor    eax,eax
c0012733:	5b                   	pop    ebx
c0012734:	5e                   	pop    esi
c0012735:	5f                   	pop    edi
c0012736:	c3                   	ret    

c0012737 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012737:	83 ec 40             	sub    esp,0x40
c001273a:	8d 44 24 09          	lea    eax,[esp+0x9]
c001273e:	50                   	push   eax
c001273f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012743:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012747:	e8 49 fa ff ff       	call   c0012195 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001274c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012750:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012754:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012758:	89 10                	mov    DWORD PTR [eax],edx
c001275a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001275d:	83 c4 4c             	add    esp,0x4c
c0012760:	c3                   	ret    

c0012761 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012761:	55                   	push   ebp
c0012762:	57                   	push   edi
c0012763:	56                   	push   esi
c0012764:	53                   	push   ebx
c0012765:	83 ec 40             	sub    esp,0x40
c0012768:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001276c:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012770:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012774:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012778:	53                   	push   ebx
c0012779:	56                   	push   esi
c001277a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001277e:	e8 12 fa ff ff       	call   c0012195 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012783:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012787:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c001278b:	83 c4 0c             	add    esp,0xc
c001278e:	53                   	push   ebx
c001278f:	56                   	push   esi
c0012790:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012794:	e8 20 fb ff ff       	call   c00122b9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012799:	83 c4 4c             	add    esp,0x4c
c001279c:	5b                   	pop    ebx
c001279d:	5e                   	pop    esi
c001279e:	5f                   	pop    edi
c001279f:	5d                   	pop    ebp
c00127a0:	c3                   	ret    

c00127a1 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00127a1:	55                   	push   ebp
c00127a2:	57                   	push   edi
c00127a3:	56                   	push   esi
c00127a4:	31 f6                	xor    esi,esi
c00127a6:	53                   	push   ebx
c00127a7:	31 db                	xor    ebx,ebx
c00127a9:	83 ec 40             	sub    esp,0x40
c00127ac:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00127b4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00127bc:	6a 12                	push   0x12
c00127be:	68 ee 00 00 00       	push   0xee
c00127c3:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00127c7:	e8 24 dd fe ff       	call   c00004f0 <memset>
c00127cc:	83 c4 10             	add    esp,0x10
c00127cf:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00127d3:	6a 08                	push   0x8
c00127d5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00127d9:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00127dd:	50                   	push   eax
c00127de:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00127e2:	55                   	push   ebp
c00127e3:	57                   	push   edi
c00127e4:	e8 e7 fe ff ff       	call   c00126d0 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00127e9:	83 c4 10             	add    esp,0x10
c00127ec:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00127f0:	50                   	push   eax
c00127f1:	6a 06                	push   0x6
c00127f3:	55                   	push   ebp
c00127f4:	57                   	push   edi
c00127f5:	e8 06 ff ff ff       	call   c0012700 <CmGetShift(unsigned int*, int*, int, bool*)>
c00127fa:	83 c4 10             	add    esp,0x10
c00127fd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012802:	74 07                	je     c001280b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012804:	46                   	inc    esi
c0012805:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012809:	eb e1                	jmp    c00127ec <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001280b:	43                   	inc    ebx
c001280c:	83 fb 12             	cmp    ebx,0x12
c001280f:	75 c2                	jne    c00127d3 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012811:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012815:	31 db                	xor    ebx,ebx
c0012817:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001281a:	50                   	push   eax
c001281b:	50                   	push   eax
c001281c:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0012821:	43                   	inc    ebx
c0012822:	8d 04 85 c0 2a 02 c0 	lea    eax,[eax*4-0x3ffdd540]
c0012829:	50                   	push   eax
c001282a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001282e:	e8 0d e0 fe ff       	call   c0000840 <strcat>
c0012833:	83 c4 10             	add    esp,0x10
c0012836:	83 fb 18             	cmp    ebx,0x18
c0012839:	75 df                	jne    c001281a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001283b:	83 c4 3c             	add    esp,0x3c
c001283e:	31 c0                	xor    eax,eax
c0012840:	5b                   	pop    ebx
c0012841:	5e                   	pop    esi
c0012842:	5f                   	pop    edi
c0012843:	5d                   	pop    ebp
c0012844:	c3                   	ret    

c0012845 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012845:	83 ec 40             	sub    esp,0x40
c0012848:	8d 44 24 09          	lea    eax,[esp+0x9]
c001284c:	50                   	push   eax
c001284d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012851:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012855:	e8 3b f9 ff ff       	call   c0012195 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001285a:	58                   	pop    eax
c001285b:	5a                   	pop    edx
c001285c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012860:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012864:	50                   	push   eax
c0012865:	e8 37 ff ff ff       	call   c00127a1 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c001286a:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c001286f:	83 c4 4c             	add    esp,0x4c
c0012872:	c3                   	ret    

c0012873 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012873:	55                   	push   ebp
c0012874:	57                   	push   edi
c0012875:	56                   	push   esi
c0012876:	53                   	push   ebx
c0012877:	31 db                	xor    ebx,ebx
c0012879:	83 ec 70             	sub    esp,0x70
c001287c:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012883:	6a 30                	push   0x30
c0012885:	6a 00                	push   0x0
c0012887:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001288b:	56                   	push   esi
c001288c:	e8 5f dc fe ff       	call   c00004f0 <memset>
c0012891:	83 c4 10             	add    esp,0x10
c0012894:	83 ec 0c             	sub    esp,0xc
c0012897:	57                   	push   edi
c0012898:	e8 d3 dc fe ff       	call   c0000570 <strlen>
c001289d:	83 c4 10             	add    esp,0x10
c00128a0:	39 d8                	cmp    eax,ebx
c00128a2:	76 16                	jbe    c00128ba <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00128a4:	83 ec 0c             	sub    esp,0xc
c00128a7:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00128ab:	50                   	push   eax
c00128ac:	e8 7f e0 fe ff       	call   c0000930 <toupper>
c00128b1:	83 c4 10             	add    esp,0x10
c00128b4:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00128b7:	43                   	inc    ebx
c00128b8:	eb da                	jmp    c0012894 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00128ba:	31 f6                	xor    esi,esi
c00128bc:	52                   	push   edx
c00128bd:	31 ff                	xor    edi,edi
c00128bf:	6a 18                	push   0x18
c00128c1:	6a 3f                	push   0x3f
c00128c3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00128c7:	50                   	push   eax
c00128c8:	e8 23 dc fe ff       	call   c00004f0 <memset>
c00128cd:	83 c4 10             	add    esp,0x10
c00128d0:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c00128d4:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c00128d8:	84 c0                	test   al,al
c00128da:	0f 84 b0 00 00 00    	je     c0012990 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00128e0:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00128e4:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00128e9:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00128ed:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c00128f2:	8d 6e 01             	lea    ebp,[esi+0x1]
c00128f5:	83 ec 0c             	sub    esp,0xc
c00128f8:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00128fc:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012900:	53                   	push   ebx
c0012901:	e8 6a dc fe ff       	call   c0000570 <strlen>
c0012906:	83 c4 10             	add    esp,0x10
c0012909:	85 c0                	test   eax,eax
c001290b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001290f:	74 0b                	je     c001291c <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012911:	50                   	push   eax
c0012912:	6a 01                	push   0x1
c0012914:	53                   	push   ebx
c0012915:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012919:	50                   	push   eax
c001291a:	eb 0a                	jmp    c0012926 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c001291c:	50                   	push   eax
c001291d:	6a 00                	push   0x0
c001291f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012923:	50                   	push   eax
c0012924:	6a 00                	push   0x0
c0012926:	e8 44 fd ff ff       	call   c001266f <CmGetMatch(char*, char*, bool, bool*)>
c001292b:	83 c4 10             	add    esp,0x10
c001292e:	83 f8 ff             	cmp    eax,0xffffffff
c0012931:	75 1a                	jne    c001294d <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012933:	83 ec 0c             	sub    esp,0xc
c0012936:	68 f5 15 02 c0       	push   0xc00215f5
c001293b:	e8 9b e2 ff ff       	call   c0010bdb <KePanic(char const*)>
c0012940:	83 c4 10             	add    esp,0x10
c0012943:	b8 02 00 00 00       	mov    eax,0x2
c0012948:	e9 bc 00 00 00       	jmp    c0012a09 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001294d:	83 ff 18             	cmp    edi,0x18
c0012950:	75 1a                	jne    c001296c <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012952:	83 ec 0c             	sub    esp,0xc
c0012955:	68 0a 16 02 c0       	push   0xc002160a
c001295a:	e8 7c e2 ff ff       	call   c0010bdb <KePanic(char const*)>
c001295f:	83 c4 10             	add    esp,0x10
c0012962:	b8 01 00 00 00       	mov    eax,0x1
c0012967:	e9 9d 00 00 00       	jmp    c0012a09 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001296c:	47                   	inc    edi
c001296d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012972:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012976:	74 02                	je     c001297a <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0012978:	89 ee                	mov    esi,ebp
c001297a:	83 ec 0c             	sub    esp,0xc
c001297d:	53                   	push   ebx
c001297e:	e8 ed db fe ff       	call   c0000570 <strlen>
c0012983:	83 c4 10             	add    esp,0x10
c0012986:	85 c0                	test   eax,eax
c0012988:	74 06                	je     c0012990 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001298a:	46                   	inc    esi
c001298b:	e9 40 ff ff ff       	jmp    c00128d0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0012990:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012998:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00129a0:	31 f6                	xor    esi,esi
c00129a2:	50                   	push   eax
c00129a3:	31 ff                	xor    edi,edi
c00129a5:	6a 12                	push   0x12
c00129a7:	68 ee 00 00 00       	push   0xee
c00129ac:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00129b3:	e8 38 db fe ff       	call   c00004f0 <memset>
c00129b8:	83 c4 10             	add    esp,0x10
c00129bb:	83 fe 17             	cmp    esi,0x17
c00129be:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00129c2:	7e 26                	jle    c00129ea <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c00129c4:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00129c8:	50                   	push   eax
c00129c9:	6a 08                	push   0x8
c00129cb:	55                   	push   ebp
c00129cc:	53                   	push   ebx
c00129cd:	e8 2e fd ff ff       	call   c0012700 <CmGetShift(unsigned int*, int*, int, bool*)>
c00129d2:	83 c4 10             	add    esp,0x10
c00129d5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00129da:	74 26                	je     c0012a02 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c00129dc:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00129e3:	4e                   	dec    esi
c00129e4:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00129e7:	47                   	inc    edi
c00129e8:	eb 1c                	jmp    c0012a06 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00129ea:	6a 06                	push   0x6
c00129ec:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c00129f1:	50                   	push   eax
c00129f2:	55                   	push   ebp
c00129f3:	53                   	push   ebx
c00129f4:	e8 d7 fc ff ff       	call   c00126d0 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00129f9:	83 c4 10             	add    esp,0x10
c00129fc:	84 c0                	test   al,al
c00129fe:	75 06                	jne    c0012a06 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0012a00:	eb c2                	jmp    c00129c4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0012a02:	31 c0                	xor    eax,eax
c0012a04:	eb 03                	jmp    c0012a09 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012a06:	46                   	inc    esi
c0012a07:	eb b2                	jmp    c00129bb <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0012a09:	83 c4 6c             	add    esp,0x6c
c0012a0c:	5b                   	pop    ebx
c0012a0d:	5e                   	pop    esi
c0012a0e:	5f                   	pop    edi
c0012a0f:	5d                   	pop    ebp
c0012a10:	c3                   	ret    

c0012a11 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012a11:	53                   	push   ebx
c0012a12:	83 ec 3c             	sub    esp,0x3c
c0012a15:	6a 2b                	push   0x2b
c0012a17:	6a 00                	push   0x0
c0012a19:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012a1d:	53                   	push   ebx
c0012a1e:	e8 cd da fe ff       	call   c00004f0 <memset>
c0012a23:	58                   	pop    eax
c0012a24:	5a                   	pop    edx
c0012a25:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012a29:	50                   	push   eax
c0012a2a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012a2e:	e8 40 fe ff ff       	call   c0012873 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012a33:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0012a38:	83 c4 0c             	add    esp,0xc
c0012a3b:	6a 15                	push   0x15
c0012a3d:	6a 00                	push   0x0
c0012a3f:	8d 44 24 27          	lea    eax,[esp+0x27]
c0012a43:	50                   	push   eax
c0012a44:	e8 a7 da fe ff       	call   c00004f0 <memset>
c0012a49:	53                   	push   ebx
c0012a4a:	6a 00                	push   0x0
c0012a4c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012a50:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012a54:	e8 e6 f9 ff ff       	call   c001243f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012a59:	83 c4 58             	add    esp,0x58
c0012a5c:	5b                   	pop    ebx
c0012a5d:	c3                   	ret    

c0012a5e <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0012a5e:	56                   	push   esi
c0012a5f:	53                   	push   ebx
c0012a60:	83 ec 48             	sub    esp,0x48
c0012a63:	6a 12                	push   0x12
c0012a65:	68 ff 00 00 00       	push   0xff
c0012a6a:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0012a6e:	56                   	push   esi
c0012a6f:	e8 7c da fe ff       	call   c00004f0 <memset>
c0012a74:	5a                   	pop    edx
c0012a75:	59                   	pop    ecx
c0012a76:	56                   	push   esi
c0012a77:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012a7b:	e8 f3 fd ff ff       	call   c0012873 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012a80:	83 c4 10             	add    esp,0x10
c0012a83:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012a87:	85 db                	test   ebx,ebx
c0012a89:	74 42                	je     c0012acd <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0012a8b:	50                   	push   eax
c0012a8c:	8d 44 24 19          	lea    eax,[esp+0x19]
c0012a90:	50                   	push   eax
c0012a91:	53                   	push   ebx
c0012a92:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012a96:	e8 fa f6 ff ff       	call   c0012195 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a9b:	83 c4 0c             	add    esp,0xc
c0012a9e:	6a 12                	push   0x12
c0012aa0:	8d 44 24 21          	lea    eax,[esp+0x21]
c0012aa4:	50                   	push   eax
c0012aa5:	56                   	push   esi
c0012aa6:	e8 d5 d8 fe ff       	call   c0000380 <memcmp>
c0012aab:	83 c4 10             	add    esp,0x10
c0012aae:	85 c0                	test   eax,eax
c0012ab0:	74 1e                	je     c0012ad0 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0012ab2:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0012ab7:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0012abc:	c1 e3 08             	shl    ebx,0x8
c0012abf:	09 d8                	or     eax,ebx
c0012ac1:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012ac6:	c1 e3 10             	shl    ebx,0x10
c0012ac9:	09 c3                	or     ebx,eax
c0012acb:	eb ba                	jmp    c0012a87 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0012acd:	83 cb ff             	or     ebx,0xffffffff
c0012ad0:	89 d8                	mov    eax,ebx
c0012ad2:	83 c4 44             	add    esp,0x44
c0012ad5:	5b                   	pop    ebx
c0012ad6:	5e                   	pop    esi
c0012ad7:	c3                   	ret    

c0012ad8 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0012ad8:	57                   	push   edi
c0012ad9:	56                   	push   esi
c0012ada:	53                   	push   ebx
c0012adb:	83 ec 34             	sub    esp,0x34
c0012ade:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0012ae2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012ae6:	6a 2b                	push   0x2b
c0012ae8:	6a 00                	push   0x0
c0012aea:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012aee:	53                   	push   ebx
c0012aef:	e8 fc d9 fe ff       	call   c00004f0 <memset>
c0012af4:	58                   	pop    eax
c0012af5:	5a                   	pop    edx
c0012af6:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012afa:	50                   	push   eax
c0012afb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012aff:	e8 6f fd ff ff       	call   c0012873 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012b04:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0012b08:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0012b0c:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0012b10:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012b14:	53                   	push   ebx
c0012b15:	6a 00                	push   0x0
c0012b17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012b1b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012b1f:	e8 1b f9 ff ff       	call   c001243f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012b24:	83 c4 50             	add    esp,0x50
c0012b27:	5b                   	pop    ebx
c0012b28:	5e                   	pop    esi
c0012b29:	5f                   	pop    edi
c0012b2a:	c3                   	ret    

c0012b2b <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0012b2b:	55                   	push   ebp
c0012b2c:	57                   	push   edi
c0012b2d:	56                   	push   esi
c0012b2e:	53                   	push   ebx
c0012b2f:	83 ec 40             	sub    esp,0x40
c0012b32:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0012b36:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012b3a:	6a 2b                	push   0x2b
c0012b3c:	6a 00                	push   0x0
c0012b3e:	8d 74 24 11          	lea    esi,[esp+0x11]
c0012b42:	56                   	push   esi
c0012b43:	e8 a8 d9 fe ff       	call   c00004f0 <memset>
c0012b48:	5f                   	pop    edi
c0012b49:	89 ef                	mov    edi,ebp
c0012b4b:	58                   	pop    eax
c0012b4c:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012b50:	50                   	push   eax
c0012b51:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012b55:	e8 19 fd ff ff       	call   c0012873 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012b5a:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0012b5f:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0012b64:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0012b69:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0012b6e:	83 c4 10             	add    esp,0x10
c0012b71:	85 ed                	test   ebp,ebp
c0012b73:	74 14                	je     c0012b89 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012b75:	51                   	push   ecx
c0012b76:	51                   	push   ecx
c0012b77:	57                   	push   edi
c0012b78:	53                   	push   ebx
c0012b79:	e8 09 f7 ff ff       	call   c0012287 <CmGetNext(Reghive_Tag*, int)>
c0012b7e:	83 c4 10             	add    esp,0x10
c0012b81:	85 c0                	test   eax,eax
c0012b83:	74 04                	je     c0012b89 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012b85:	89 c7                	mov    edi,eax
c0012b87:	eb e8                	jmp    c0012b71 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0012b89:	56                   	push   esi
c0012b8a:	6a 00                	push   0x0
c0012b8c:	57                   	push   edi
c0012b8d:	53                   	push   ebx
c0012b8e:	e8 ac f8 ff ff       	call   c001243f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012b93:	83 c4 0c             	add    esp,0xc
c0012b96:	89 c7                	mov    edi,eax
c0012b98:	56                   	push   esi
c0012b99:	50                   	push   eax
c0012b9a:	53                   	push   ebx
c0012b9b:	e8 f5 f5 ff ff       	call   c0012195 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ba0:	58                   	pop    eax
c0012ba1:	5a                   	pop    edx
c0012ba2:	6a 6c                	push   0x6c
c0012ba4:	6a 00                	push   0x0
c0012ba6:	6a 00                	push   0x0
c0012ba8:	68 1b 16 02 c0       	push   0xc002161b
c0012bad:	57                   	push   edi
c0012bae:	53                   	push   ebx
c0012baf:	e8 24 ff ff ff       	call   c0012ad8 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0012bb4:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012bb8:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0012bbc:	c1 e8 10             	shr    eax,0x10
c0012bbf:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0012bc3:	83 c4 1c             	add    esp,0x1c
c0012bc6:	56                   	push   esi
c0012bc7:	57                   	push   edi
c0012bc8:	53                   	push   ebx
c0012bc9:	e8 eb f6 ff ff       	call   c00122b9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012bce:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0012bd3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0012bd8:	c1 e0 08             	shl    eax,0x8
c0012bdb:	09 c2                	or     edx,eax
c0012bdd:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0012be2:	83 c4 4c             	add    esp,0x4c
c0012be5:	c1 e0 10             	shl    eax,0x10
c0012be8:	5b                   	pop    ebx
c0012be9:	09 d0                	or     eax,edx
c0012beb:	5e                   	pop    esi
c0012bec:	5f                   	pop    edi
c0012bed:	5d                   	pop    ebp
c0012bee:	c3                   	ret    

c0012bef <zStrtok(char*, char const*)>:
c0012bef:	55                   	push   ebp
c0012bf0:	57                   	push   edi
c0012bf1:	56                   	push   esi
c0012bf2:	53                   	push   ebx
c0012bf3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012bf7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012bfb:	85 db                	test   ebx,ebx
c0012bfd:	74 2f                	je     c0012c2e <zStrtok(char*, char const*)+0x3f>
c0012bff:	85 c0                	test   eax,eax
c0012c01:	75 09                	jne    c0012c0c <zStrtok(char*, char const*)+0x1d>
c0012c03:	a1 90 89 02 c0       	mov    eax,ds:0xc0028990
c0012c08:	85 c0                	test   eax,eax
c0012c0a:	74 50                	je     c0012c5c <zStrtok(char*, char const*)+0x6d>
c0012c0c:	31 c9                	xor    ecx,ecx
c0012c0e:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0012c12:	74 03                	je     c0012c17 <zStrtok(char*, char const*)+0x28>
c0012c14:	41                   	inc    ecx
c0012c15:	eb f7                	jmp    c0012c0e <zStrtok(char*, char const*)+0x1f>
c0012c17:	31 d2                	xor    edx,edx
c0012c19:	39 ca                	cmp    edx,ecx
c0012c1b:	74 15                	je     c0012c32 <zStrtok(char*, char const*)+0x43>
c0012c1d:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0012c21:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0012c24:	8d 3c 10             	lea    edi,[eax+edx*1]
c0012c27:	39 ee                	cmp    esi,ebp
c0012c29:	74 13                	je     c0012c3e <zStrtok(char*, char const*)+0x4f>
c0012c2b:	42                   	inc    edx
c0012c2c:	eb eb                	jmp    c0012c19 <zStrtok(char*, char const*)+0x2a>
c0012c2e:	31 c0                	xor    eax,eax
c0012c30:	eb 2a                	jmp    c0012c5c <zStrtok(char*, char const*)+0x6d>
c0012c32:	c7 05 90 89 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028990,0x0
c0012c3c:	eb 1e                	jmp    c0012c5c <zStrtok(char*, char const*)+0x6d>
c0012c3e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0012c41:	39 ce                	cmp    esi,ecx
c0012c43:	75 0a                	jne    c0012c4f <zStrtok(char*, char const*)+0x60>
c0012c45:	40                   	inc    eax
c0012c46:	a3 90 89 02 c0       	mov    ds:0xc0028990,eax
c0012c4b:	89 d8                	mov    eax,ebx
c0012c4d:	eb 0d                	jmp    c0012c5c <zStrtok(char*, char const*)+0x6d>
c0012c4f:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0012c53:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0012c56:	89 15 90 89 02 c0    	mov    DWORD PTR ds:0xc0028990,edx
c0012c5c:	5b                   	pop    ebx
c0012c5d:	5e                   	pop    esi
c0012c5e:	5f                   	pop    edi
c0012c5f:	5d                   	pop    ebp
c0012c60:	c3                   	ret    

c0012c61 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0012c61:	57                   	push   edi
c0012c62:	56                   	push   esi
c0012c63:	53                   	push   ebx
c0012c64:	81 ec 08 01 00 00    	sub    esp,0x108
c0012c6a:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0012c71:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0012c78:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0012c7c:	53                   	push   ebx
c0012c7d:	e8 be d9 fe ff       	call   c0000640 <strcpy>
c0012c82:	59                   	pop    ecx
c0012c83:	5e                   	pop    esi
c0012c84:	68 b1 19 02 c0       	push   0xc00219b1
c0012c89:	53                   	push   ebx
c0012c8a:	bb 01 00 00 00       	mov    ebx,0x1
c0012c8f:	e8 5b ff ff ff       	call   c0012bef <zStrtok(char*, char const*)>
c0012c94:	83 c4 10             	add    esp,0x10
c0012c97:	85 c0                	test   eax,eax
c0012c99:	74 3b                	je     c0012cd6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012c9b:	52                   	push   edx
c0012c9c:	50                   	push   eax
c0012c9d:	6a 01                	push   0x1
c0012c9f:	57                   	push   edi
c0012ca0:	e8 b9 fd ff ff       	call   c0012a5e <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0012ca5:	59                   	pop    ecx
c0012ca6:	89 c3                	mov    ebx,eax
c0012ca8:	5e                   	pop    esi
c0012ca9:	68 b1 19 02 c0       	push   0xc00219b1
c0012cae:	6a 00                	push   0x0
c0012cb0:	e8 3a ff ff ff       	call   c0012bef <zStrtok(char*, char const*)>
c0012cb5:	83 c4 10             	add    esp,0x10
c0012cb8:	89 c6                	mov    esi,eax
c0012cba:	85 c0                	test   eax,eax
c0012cbc:	74 18                	je     c0012cd6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012cbe:	52                   	push   edx
c0012cbf:	52                   	push   edx
c0012cc0:	53                   	push   ebx
c0012cc1:	57                   	push   edi
c0012cc2:	e8 81 f5 ff ff       	call   c0012248 <CmEnterDirectory(Reghive_Tag*, int)>
c0012cc7:	83 c4 10             	add    esp,0x10
c0012cca:	89 c3                	mov    ebx,eax
c0012ccc:	83 f8 ff             	cmp    eax,0xffffffff
c0012ccf:	74 05                	je     c0012cd6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012cd1:	50                   	push   eax
c0012cd2:	56                   	push   esi
c0012cd3:	53                   	push   ebx
c0012cd4:	eb c9                	jmp    c0012c9f <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0012cd6:	81 c4 00 01 00 00    	add    esp,0x100
c0012cdc:	89 d8                	mov    eax,ebx
c0012cde:	5b                   	pop    ebx
c0012cdf:	5e                   	pop    esi
c0012ce0:	5f                   	pop    edi
c0012ce1:	c3                   	ret    

c0012ce2 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0012ce2:	55                   	push   ebp
c0012ce3:	57                   	push   edi
c0012ce4:	56                   	push   esi
c0012ce5:	53                   	push   ebx
c0012ce6:	83 ec 5c             	sub    esp,0x5c
c0012ce9:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0012ced:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012cf1:	85 db                	test   ebx,ebx
c0012cf3:	0f 8e 84 00 00 00    	jle    c0012d7d <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012cf9:	31 ed                	xor    ebp,ebp
c0012cfb:	57                   	push   edi
c0012cfc:	6a 32                	push   0x32
c0012cfe:	6a 00                	push   0x0
c0012d00:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012d04:	57                   	push   edi
c0012d05:	e8 e6 d7 fe ff       	call   c00004f0 <memset>
c0012d0a:	83 c4 0c             	add    esp,0xc
c0012d0d:	57                   	push   edi
c0012d0e:	53                   	push   ebx
c0012d0f:	56                   	push   esi
c0012d10:	e8 30 fb ff ff       	call   c0012845 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012d15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012d19:	83 c4 10             	add    esp,0x10
c0012d1c:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0012d20:	7d 13                	jge    c0012d35 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0012d22:	83 ec 0c             	sub    esp,0xc
c0012d25:	45                   	inc    ebp
c0012d26:	68 57 1d 02 c0       	push   0xc0021d57
c0012d2b:	e8 47 7c ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0012d30:	83 c4 10             	add    esp,0x10
c0012d33:	eb e7                	jmp    c0012d1c <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0012d35:	51                   	push   ecx
c0012d36:	57                   	push   edi
c0012d37:	53                   	push   ebx
c0012d38:	68 21 16 02 c0       	push   0xc0021621
c0012d3d:	e8 35 7c ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0012d42:	83 c4 10             	add    esp,0x10
c0012d45:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0012d4a:	75 1e                	jne    c0012d6a <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0012d4c:	52                   	push   edx
c0012d4d:	52                   	push   edx
c0012d4e:	53                   	push   ebx
c0012d4f:	56                   	push   esi
c0012d50:	e8 f3 f4 ff ff       	call   c0012248 <CmEnterDirectory(Reghive_Tag*, int)>
c0012d55:	83 c4 0c             	add    esp,0xc
c0012d58:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0012d5c:	8d 51 04             	lea    edx,[ecx+0x4]
c0012d5f:	52                   	push   edx
c0012d60:	50                   	push   eax
c0012d61:	56                   	push   esi
c0012d62:	e8 7b ff ff ff       	call   c0012ce2 <CmDisplayTree(Reghive_Tag*, int, int)>
c0012d67:	83 c4 10             	add    esp,0x10
c0012d6a:	50                   	push   eax
c0012d6b:	50                   	push   eax
c0012d6c:	53                   	push   ebx
c0012d6d:	56                   	push   esi
c0012d6e:	e8 14 f5 ff ff       	call   c0012287 <CmGetNext(Reghive_Tag*, int)>
c0012d73:	83 c4 10             	add    esp,0x10
c0012d76:	89 c3                	mov    ebx,eax
c0012d78:	e9 74 ff ff ff       	jmp    c0012cf1 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012d7d:	83 c4 5c             	add    esp,0x5c
c0012d80:	5b                   	pop    ebx
c0012d81:	5e                   	pop    esi
c0012d82:	5f                   	pop    edi
c0012d83:	5d                   	pop    ebp
c0012d84:	c3                   	ret    

c0012d85 <CmSplitFinalSlashInPlace(char*)>:
c0012d85:	53                   	push   ebx
c0012d86:	83 ec 14             	sub    esp,0x14
c0012d89:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012d8d:	53                   	push   ebx
c0012d8e:	e8 dd d7 fe ff       	call   c0000570 <strlen>
c0012d93:	83 c4 10             	add    esp,0x10
c0012d96:	48                   	dec    eax
c0012d97:	85 c0                	test   eax,eax
c0012d99:	74 15                	je     c0012db0 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012d9b:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012d9e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012da2:	75 09                	jne    c0012dad <CmSplitFinalSlashInPlace(char*)+0x28>
c0012da4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012da7:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012dab:	eb 05                	jmp    c0012db2 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012dad:	48                   	dec    eax
c0012dae:	eb e7                	jmp    c0012d97 <CmSplitFinalSlashInPlace(char*)+0x12>
c0012db0:	31 c0                	xor    eax,eax
c0012db2:	83 c4 08             	add    esp,0x8
c0012db5:	5b                   	pop    ebx
c0012db6:	c3                   	ret    

c0012db7 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012db7:	55                   	push   ebp
c0012db8:	57                   	push   edi
c0012db9:	56                   	push   esi
c0012dba:	53                   	push   ebx
c0012dbb:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012dc1:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0012dc8:	8a 13                	mov    dl,BYTE PTR [ebx]
c0012dca:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012dcd:	80 fa 40             	cmp    dl,0x40
c0012dd0:	75 1c                	jne    c0012dee <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0012dd2:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0012dd5:	85 c9                	test   ecx,ecx
c0012dd7:	0f 84 09 01 00 00    	je     c0012ee6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012ddd:	8d 43 01             	lea    eax,[ebx+0x1]
c0012de0:	83 f9 3a             	cmp    ecx,0x3a
c0012de3:	74 04                	je     c0012de9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0012de5:	89 c3                	mov    ebx,eax
c0012de7:	eb e9                	jmp    c0012dd2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0012de9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012dec:	89 c3                	mov    ebx,eax
c0012dee:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0012df2:	50                   	push   eax
c0012df3:	6a 40                	push   0x40
c0012df5:	6a 00                	push   0x0
c0012df7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012dfb:	50                   	push   eax
c0012dfc:	e8 ef d6 fe ff       	call   c00004f0 <memset>
c0012e01:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012e08:	31 c0                	xor    eax,eax
c0012e0a:	83 c4 10             	add    esp,0x10
c0012e0d:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0012e12:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0012e15:	89 d1                	mov    ecx,edx
c0012e17:	85 d2                	test   edx,edx
c0012e19:	0f 84 c7 00 00 00    	je     c0012ee6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012e1f:	3d c7 00 00 00       	cmp    eax,0xc7
c0012e24:	0f 8f bc 00 00 00    	jg     c0012ee6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012e2a:	83 fa 0a             	cmp    edx,0xa
c0012e2d:	0f 85 a4 00 00 00    	jne    c0012ed7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0012e33:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012e38:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0012e3d:	89 c8                	mov    eax,ecx
c0012e3f:	a8 df                	test   al,0xdf
c0012e41:	0f 94 c2             	sete   dl
c0012e44:	83 f9 23             	cmp    ecx,0x23
c0012e47:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012e4c:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0012e50:	80 e2 01             	and    dl,0x1
c0012e53:	75 4a                	jne    c0012e9f <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012e55:	83 e8 09             	sub    eax,0x9
c0012e58:	3c 01                	cmp    al,0x1
c0012e5a:	76 43                	jbe    c0012e9f <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012e5c:	83 f9 5b             	cmp    ecx,0x5b
c0012e5f:	75 42                	jne    c0012ea3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0012e61:	83 fe 40             	cmp    esi,0x40
c0012e64:	75 39                	jne    c0012e9f <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012e66:	83 ec 0c             	sub    esp,0xc
c0012e69:	8d 54 24 65          	lea    edx,[esp+0x65]
c0012e6d:	52                   	push   edx
c0012e6e:	e8 fd d6 fe ff       	call   c0000570 <strlen>
c0012e73:	83 c4 10             	add    esp,0x10
c0012e76:	83 f8 3f             	cmp    eax,0x3f
c0012e79:	77 6b                	ja     c0012ee6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012e7b:	50                   	push   eax
c0012e7c:	50                   	push   eax
c0012e7d:	8d 54 24 61          	lea    edx,[esp+0x61]
c0012e81:	52                   	push   edx
c0012e82:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012e86:	52                   	push   edx
c0012e87:	e8 b4 d7 fe ff       	call   c0000640 <strcpy>
c0012e8c:	58                   	pop    eax
c0012e8d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012e91:	52                   	push   edx
c0012e92:	e8 d9 d6 fe ff       	call   c0000570 <strlen>
c0012e97:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012e9c:	83 c4 10             	add    esp,0x10
c0012e9f:	31 d2                	xor    edx,edx
c0012ea1:	eb 3b                	jmp    c0012ede <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0012ea3:	83 fe 40             	cmp    esi,0x40
c0012ea6:	74 06                	je     c0012eae <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0012ea8:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012eac:	eb 20                	jmp    c0012ece <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0012eae:	50                   	push   eax
c0012eaf:	50                   	push   eax
c0012eb0:	55                   	push   ebp
c0012eb1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012eb5:	50                   	push   eax
c0012eb6:	e8 95 d8 fe ff       	call   c0000750 <strcmp>
c0012ebb:	83 c4 10             	add    esp,0x10
c0012ebe:	85 c0                	test   eax,eax
c0012ec0:	75 dd                	jne    c0012e9f <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012ec2:	eb e4                	jmp    c0012ea8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0012ec4:	8d 50 01             	lea    edx,[eax+0x1]
c0012ec7:	83 f9 3d             	cmp    ecx,0x3d
c0012eca:	74 1e                	je     c0012eea <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0012ecc:	89 d0                	mov    eax,edx
c0012ece:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0012ed1:	85 c9                	test   ecx,ecx
c0012ed3:	75 ef                	jne    c0012ec4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0012ed5:	eb 0f                	jmp    c0012ee6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012ed7:	8d 50 01             	lea    edx,[eax+0x1]
c0012eda:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012ede:	47                   	inc    edi
c0012edf:	89 d0                	mov    eax,edx
c0012ee1:	e9 2c ff ff ff       	jmp    c0012e12 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0012ee6:	31 c0                	xor    eax,eax
c0012ee8:	eb 33                	jmp    c0012f1d <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0012eea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012eee:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012ef1:	50                   	push   eax
c0012ef2:	50                   	push   eax
c0012ef3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012ef7:	50                   	push   eax
c0012ef8:	53                   	push   ebx
c0012ef9:	e8 52 d8 fe ff       	call   c0000750 <strcmp>
c0012efe:	83 c4 10             	add    esp,0x10
c0012f01:	85 c0                	test   eax,eax
c0012f03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f07:	75 96                	jne    c0012e9f <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012f09:	51                   	push   ecx
c0012f0a:	51                   	push   ecx
c0012f0b:	52                   	push   edx
c0012f0c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012f13:	e8 28 d7 fe ff       	call   c0000640 <strcpy>
c0012f18:	83 c4 10             	add    esp,0x10
c0012f1b:	b0 01                	mov    al,0x1
c0012f1d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012f23:	5b                   	pop    ebx
c0012f24:	5e                   	pop    esi
c0012f25:	5f                   	pop    edi
c0012f26:	5d                   	pop    ebp
c0012f27:	c3                   	ret    

c0012f28 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012f28:	57                   	push   edi
c0012f29:	56                   	push   esi
c0012f2a:	53                   	push   ebx
c0012f2b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012f31:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012f38:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012f3f:	53                   	push   ebx
c0012f40:	e8 2b d6 fe ff       	call   c0000570 <strlen>
c0012f45:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f48:	89 c7                	mov    edi,eax
c0012f4a:	e8 21 d6 fe ff       	call   c0000570 <strlen>
c0012f4f:	83 c4 10             	add    esp,0x10
c0012f52:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012f56:	3d ff 00 00 00       	cmp    eax,0xff
c0012f5b:	0f 87 d3 00 00 00    	ja     c0013034 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012f61:	57                   	push   edi
c0012f62:	57                   	push   edi
c0012f63:	56                   	push   esi
c0012f64:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012f68:	56                   	push   esi
c0012f69:	e8 d2 d6 fe ff       	call   c0000640 <strcpy>
c0012f6e:	58                   	pop    eax
c0012f6f:	5a                   	pop    edx
c0012f70:	68 b1 19 02 c0       	push   0xc00219b1
c0012f75:	56                   	push   esi
c0012f76:	e8 c5 d8 fe ff       	call   c0000840 <strcat>
c0012f7b:	59                   	pop    ecx
c0012f7c:	5f                   	pop    edi
c0012f7d:	53                   	push   ebx
c0012f7e:	56                   	push   esi
c0012f7f:	e8 bc d8 fe ff       	call   c0000840 <strcat>
c0012f84:	58                   	pop    eax
c0012f85:	5a                   	pop    edx
c0012f86:	68 2b 16 02 c0       	push   0xc002162b
c0012f8b:	56                   	push   esi
c0012f8c:	e8 af d8 fe ff       	call   c0000840 <strcat>
c0012f91:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012f98:	e8 11 4b ff ff       	call   c0007aae <malloc>
c0012f9d:	83 c4 0c             	add    esp,0xc
c0012fa0:	89 c3                	mov    ebx,eax
c0012fa2:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c0012fa8:	56                   	push   esi
c0012fa9:	50                   	push   eax
c0012faa:	e8 21 82 ff ff       	call   c000b1d0 <File::File(char const*, Process*)>
c0012faf:	83 c4 10             	add    esp,0x10
c0012fb2:	85 db                	test   ebx,ebx
c0012fb4:	74 7e                	je     c0013034 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012fb6:	51                   	push   ecx
c0012fb7:	51                   	push   ecx
c0012fb8:	6a 01                	push   0x1
c0012fba:	53                   	push   ebx
c0012fbb:	e8 cc 82 ff ff       	call   c000b28c <File::open(FileOpenMode)>
c0012fc0:	83 c4 10             	add    esp,0x10
c0012fc3:	85 c0                	test   eax,eax
c0012fc5:	74 08                	je     c0012fcf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012fc7:	83 ec 0c             	sub    esp,0xc
c0012fca:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fcc:	53                   	push   ebx
c0012fcd:	eb 5f                	jmp    c001302e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012fcf:	52                   	push   edx
c0012fd0:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012fd4:	50                   	push   eax
c0012fd5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012fd9:	50                   	push   eax
c0012fda:	53                   	push   ebx
c0012fdb:	e8 58 85 ff ff       	call   c000b538 <File::stat(unsigned long long*, bool*)>
c0012fe0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012fe4:	83 c4 10             	add    esp,0x10
c0012fe7:	89 c1                	mov    ecx,eax
c0012fe9:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012fed:	74 31                	je     c0013020 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012fef:	83 ec 0c             	sub    esp,0xc
c0012ff2:	50                   	push   eax
c0012ff3:	e8 b6 4a ff ff       	call   c0007aae <malloc>
c0012ff8:	89 c6                	mov    esi,eax
c0012ffa:	58                   	pop    eax
c0012ffb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ffd:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013001:	52                   	push   edx
c0013002:	56                   	push   esi
c0013003:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013007:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001300b:	53                   	push   ebx
c001300c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001300f:	83 c4 20             	add    esp,0x20
c0013012:	85 c0                	test   eax,eax
c0013014:	75 0a                	jne    c0013020 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013016:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001301a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001301e:	74 18                	je     c0013038 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013020:	83 ec 0c             	sub    esp,0xc
c0013023:	53                   	push   ebx
c0013024:	e8 c1 82 ff ff       	call   c000b2ea <File::close()>
c0013029:	8b 03                	mov    eax,DWORD PTR [ebx]
c001302b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001302e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013031:	83 c4 10             	add    esp,0x10
c0013034:	31 c0                	xor    eax,eax
c0013036:	eb 3b                	jmp    c0013073 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013038:	83 ec 0c             	sub    esp,0xc
c001303b:	53                   	push   ebx
c001303c:	e8 a9 82 ff ff       	call   c000b2ea <File::close()>
c0013041:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013043:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013046:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013049:	83 c4 0c             	add    esp,0xc
c001304c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013053:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001305a:	56                   	push   esi
c001305b:	e8 57 fd ff ff       	call   c0012db7 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013060:	89 34 24             	mov    DWORD PTR [esp],esi
c0013063:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013067:	e8 52 4a ff ff       	call   c0007abe <free>
c001306c:	83 c4 10             	add    esp,0x10
c001306f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013073:	81 c4 20 01 00 00    	add    esp,0x120
c0013079:	5b                   	pop    ebx
c001307a:	5e                   	pop    esi
c001307b:	5f                   	pop    edi
c001307c:	c3                   	ret    

c001307d <Reg::getLine(char*, char*, char*)>:
c001307d:	57                   	push   edi
c001307e:	56                   	push   esi
c001307f:	53                   	push   ebx
c0013080:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013084:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013088:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001308c:	57                   	push   edi
c001308d:	56                   	push   esi
c001308e:	53                   	push   ebx
c001308f:	68 30 16 02 c0       	push   0xc0021630
c0013094:	e8 8f fe ff ff       	call   c0012f28 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013099:	83 c4 10             	add    esp,0x10
c001309c:	84 c0                	test   al,al
c001309e:	75 10                	jne    c00130b0 <Reg::getLine(char*, char*, char*)+0x33>
c00130a0:	57                   	push   edi
c00130a1:	56                   	push   esi
c00130a2:	53                   	push   ebx
c00130a3:	68 55 16 02 c0       	push   0xc0021655
c00130a8:	e8 7b fe ff ff       	call   c0012f28 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00130ad:	83 c4 10             	add    esp,0x10
c00130b0:	5b                   	pop    ebx
c00130b1:	5e                   	pop    esi
c00130b2:	5f                   	pop    edi
c00130b3:	c3                   	ret    

c00130b4 <Reg::readInt(char*, char*, int*)>:
c00130b4:	55                   	push   ebp
c00130b5:	57                   	push   edi
c00130b6:	56                   	push   esi
c00130b7:	53                   	push   ebx
c00130b8:	81 ec f0 00 00 00    	sub    esp,0xf0
c00130be:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00130c2:	55                   	push   ebp
c00130c3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00130ca:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00130d1:	e8 a7 ff ff ff       	call   c001307d <Reg::getLine(char*, char*, char*)>
c00130d6:	83 c4 10             	add    esp,0x10
c00130d9:	84 c0                	test   al,al
c00130db:	0f 84 b6 00 00 00    	je     c0013197 <Reg::readInt(char*, char*, int*)+0xe3>
c00130e1:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c00130e6:	83 fa 2b             	cmp    edx,0x2b
c00130e9:	74 0c                	je     c00130f7 <Reg::readInt(char*, char*, int*)+0x43>
c00130eb:	83 fa 2d             	cmp    edx,0x2d
c00130ee:	75 0e                	jne    c00130fe <Reg::readInt(char*, char*, int*)+0x4a>
c00130f0:	ba 01 00 00 00       	mov    edx,0x1
c00130f5:	eb 0b                	jmp    c0013102 <Reg::readInt(char*, char*, int*)+0x4e>
c00130f7:	ba 01 00 00 00       	mov    edx,0x1
c00130fc:	eb 02                	jmp    c0013100 <Reg::readInt(char*, char*, int*)+0x4c>
c00130fe:	31 d2                	xor    edx,edx
c0013100:	31 c0                	xor    eax,eax
c0013102:	be 0a 00 00 00       	mov    esi,0xa
c0013107:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001310c:	75 21                	jne    c001312f <Reg::readInt(char*, char*, int*)+0x7b>
c001310e:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013113:	83 f9 78             	cmp    ecx,0x78
c0013116:	75 0a                	jne    c0013122 <Reg::readInt(char*, char*, int*)+0x6e>
c0013118:	83 c2 02             	add    edx,0x2
c001311b:	be 10 00 00 00       	mov    esi,0x10
c0013120:	eb 0d                	jmp    c001312f <Reg::readInt(char*, char*, int*)+0x7b>
c0013122:	83 f9 62             	cmp    ecx,0x62
c0013125:	75 08                	jne    c001312f <Reg::readInt(char*, char*, int*)+0x7b>
c0013127:	83 c2 02             	add    edx,0x2
c001312a:	be 02 00 00 00       	mov    esi,0x2
c001312f:	01 d5                	add    ebp,edx
c0013131:	31 d2                	xor    edx,edx
c0013133:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013137:	83 f9 0d             	cmp    ecx,0xd
c001313a:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001313e:	0f 94 c3             	sete   bl
c0013141:	85 c9                	test   ecx,ecx
c0013143:	89 df                	mov    edi,ebx
c0013145:	0f 94 c3             	sete   bl
c0013148:	09 df                	or     edi,ebx
c001314a:	89 fb                	mov    ebx,edi
c001314c:	83 e7 01             	and    edi,0x1
c001314f:	75 35                	jne    c0013186 <Reg::readInt(char*, char*, int*)+0xd2>
c0013151:	0f af d6             	imul   edx,esi
c0013154:	83 fe 10             	cmp    esi,0x10
c0013157:	75 26                	jne    c001317f <Reg::readInt(char*, char*, int*)+0xcb>
c0013159:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001315d:	83 ef 41             	sub    edi,0x41
c0013160:	89 fb                	mov    ebx,edi
c0013162:	80 fb 05             	cmp    bl,0x5
c0013165:	77 06                	ja     c001316d <Reg::readInt(char*, char*, int*)+0xb9>
c0013167:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c001316b:	eb 16                	jmp    c0013183 <Reg::readInt(char*, char*, int*)+0xcf>
c001316d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013171:	83 eb 61             	sub    ebx,0x61
c0013174:	80 fb 05             	cmp    bl,0x5
c0013177:	77 06                	ja     c001317f <Reg::readInt(char*, char*, int*)+0xcb>
c0013179:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c001317d:	eb 04                	jmp    c0013183 <Reg::readInt(char*, char*, int*)+0xcf>
c001317f:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013183:	45                   	inc    ebp
c0013184:	eb ad                	jmp    c0013133 <Reg::readInt(char*, char*, int*)+0x7f>
c0013186:	84 c0                	test   al,al
c0013188:	74 02                	je     c001318c <Reg::readInt(char*, char*, int*)+0xd8>
c001318a:	f7 da                	neg    edx
c001318c:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013193:	89 10                	mov    DWORD PTR [eax],edx
c0013195:	88 d8                	mov    al,bl
c0013197:	81 c4 ec 00 00 00    	add    esp,0xec
c001319d:	5b                   	pop    ebx
c001319e:	5e                   	pop    esi
c001319f:	5f                   	pop    edi
c00131a0:	5d                   	pop    ebp
c00131a1:	c3                   	ret    

c00131a2 <Reg::readString(char*, char*, char*, int)>:
c00131a2:	57                   	push   edi
c00131a3:	56                   	push   esi
c00131a4:	53                   	push   ebx
c00131a5:	81 ec d4 00 00 00    	sub    esp,0xd4
c00131ab:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00131b2:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00131b6:	57                   	push   edi
c00131b7:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00131be:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00131c5:	e8 b3 fe ff ff       	call   c001307d <Reg::getLine(char*, char*, char*)>
c00131ca:	83 c4 10             	add    esp,0x10
c00131cd:	89 c6                	mov    esi,eax
c00131cf:	84 c0                	test   al,al
c00131d1:	74 44                	je     c0013217 <Reg::readString(char*, char*, char*, int)+0x75>
c00131d3:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00131da:	31 c0                	xor    eax,eax
c00131dc:	4a                   	dec    edx
c00131dd:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00131e0:	84 c9                	test   cl,cl
c00131e2:	74 0f                	je     c00131f3 <Reg::readString(char*, char*, char*, int)+0x51>
c00131e4:	39 c2                	cmp    edx,eax
c00131e6:	7e 0b                	jle    c00131f3 <Reg::readString(char*, char*, char*, int)+0x51>
c00131e8:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00131eb:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00131f0:	40                   	inc    eax
c00131f1:	eb ea                	jmp    c00131dd <Reg::readString(char*, char*, char*, int)+0x3b>
c00131f3:	83 ec 0c             	sub    esp,0xc
c00131f6:	53                   	push   ebx
c00131f7:	e8 74 d3 fe ff       	call   c0000570 <strlen>
c00131fc:	83 c4 10             	add    esp,0x10
c00131ff:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013204:	75 11                	jne    c0013217 <Reg::readString(char*, char*, char*, int)+0x75>
c0013206:	83 ec 0c             	sub    esp,0xc
c0013209:	53                   	push   ebx
c001320a:	e8 61 d3 fe ff       	call   c0000570 <strlen>
c001320f:	83 c4 10             	add    esp,0x10
c0013212:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013217:	81 c4 d0 00 00 00    	add    esp,0xd0
c001321d:	89 f0                	mov    eax,esi
c001321f:	5b                   	pop    ebx
c0013220:	5e                   	pop    esi
c0013221:	5f                   	pop    edi
c0013222:	c3                   	ret    

c0013223 <Reg::readBool(char*, char*, bool*)>:
c0013223:	83 ec 20             	sub    esp,0x20
c0013226:	8d 44 24 10          	lea    eax,[esp+0x10]
c001322a:	50                   	push   eax
c001322b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001322f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013233:	e8 7c fe ff ff       	call   c00130b4 <Reg::readInt(char*, char*, int*)>
c0013238:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001323d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013241:	0f 95 02             	setne  BYTE PTR [edx]
c0013244:	83 c4 2c             	add    esp,0x2c
c0013247:	c3                   	ret    

c0013248 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013248:	53                   	push   ebx
c0013249:	83 ec 1c             	sub    esp,0x1c
c001324c:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013250:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013254:	50                   	push   eax
c0013255:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013259:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001325d:	e8 c1 ff ff ff       	call   c0013223 <Reg::readBool(char*, char*, bool*)>
c0013262:	83 c4 10             	add    esp,0x10
c0013265:	84 c0                	test   al,al
c0013267:	74 04                	je     c001326d <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013269:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001326d:	88 d8                	mov    al,bl
c001326f:	83 c4 18             	add    esp,0x18
c0013272:	5b                   	pop    ebx
c0013273:	c3                   	ret    

c0013274 <Reg::readIntWithDefault(char*, char*, int)>:
c0013274:	53                   	push   ebx
c0013275:	83 ec 1c             	sub    esp,0x1c
c0013278:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001327c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013280:	50                   	push   eax
c0013281:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013285:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013289:	e8 26 fe ff ff       	call   c00130b4 <Reg::readInt(char*, char*, int*)>
c001328e:	83 c4 10             	add    esp,0x10
c0013291:	84 c0                	test   al,al
c0013293:	74 04                	je     c0013299 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013295:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013299:	89 d8                	mov    eax,ebx
c001329b:	83 c4 18             	add    esp,0x18
c001329e:	5b                   	pop    ebx
c001329f:	c3                   	ret    

c00132a0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00132a0:	57                   	push   edi
c00132a1:	56                   	push   esi
c00132a2:	56                   	push   esi
c00132a3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00132a7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00132ab:	56                   	push   esi
c00132ac:	57                   	push   edi
c00132ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132b5:	e8 e8 fe ff ff       	call   c00131a2 <Reg::readString(char*, char*, char*, int)>
c00132ba:	83 c4 10             	add    esp,0x10
c00132bd:	84 c0                	test   al,al
c00132bf:	75 1a                	jne    c00132db <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00132c1:	51                   	push   ecx
c00132c2:	56                   	push   esi
c00132c3:	6a 00                	push   0x0
c00132c5:	57                   	push   edi
c00132c6:	e8 25 d2 fe ff       	call   c00004f0 <memset>
c00132cb:	8d 4e ff             	lea    ecx,[esi-0x1]
c00132ce:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00132d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00132d4:	83 c4 10             	add    esp,0x10
c00132d7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00132db:	89 f8                	mov    eax,edi
c00132dd:	5a                   	pop    edx
c00132de:	5e                   	pop    esi
c00132df:	5f                   	pop    edi
c00132e0:	c3                   	ret    

c00132e1 <SysEject(regs*)>:
c00132e1:	83 ec 0c             	sub    esp,0xc
c00132e4:	83 ca ff             	or     edx,0xffffffff
c00132e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132eb:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00132ee:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00132f3:	83 e9 41             	sub    ecx,0x41
c00132f6:	83 f9 19             	cmp    ecx,0x19
c00132f9:	77 18                	ja     c0013313 <SysEject(regs*)+0x32>
c00132fb:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c0013302:	85 c9                	test   ecx,ecx
c0013304:	74 0d                	je     c0013313 <SysEject(regs*)+0x32>
c0013306:	83 ec 0c             	sub    esp,0xc
c0013309:	51                   	push   ecx
c001330a:	e8 eb a0 ff ff       	call   c000d3fa <LogicalDisk::eject()>
c001330f:	83 c4 10             	add    esp,0x10
c0013312:	99                   	cdq    
c0013313:	83 c4 0c             	add    esp,0xc
c0013316:	c3                   	ret    

c0013317 <SysExit(regs*)>:
c0013317:	83 ec 18             	sub    esp,0x18
c001331a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001331e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013321:	e8 46 2a 00 00       	call   c0015d6c <terminateTask(int)>
c0013326:	83 c8 ff             	or     eax,0xffffffff
c0013329:	83 c4 1c             	add    esp,0x1c
c001332c:	89 c2                	mov    edx,eax
c001332e:	c3                   	ret    

c001332f <SysGetCwd(regs*)>:
c001332f:	83 ec 10             	sub    esp,0x10
c0013332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013336:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013339:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001333c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013341:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013344:	e8 7d 7c ff ff       	call   c000afc6 <Fs::getcwd(Process*, char*, int)>
c0013349:	83 c4 1c             	add    esp,0x1c
c001334c:	99                   	cdq    
c001334d:	c3                   	ret    

c001334e <SysGetPID(regs*)>:
c001334e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013353:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013356:	8b 00                	mov    eax,DWORD PTR [eax]
c0013358:	99                   	cdq    
c0013359:	c3                   	ret    

c001335a <SysGetRAMData(regs*)>:
c001335a:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013360:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c001336a:	99                   	cdq    
c001336b:	f7 f9                	idiv   ecx
c001336d:	c1 e0 18             	shl    eax,0x18
c0013370:	09 c8                	or     eax,ecx
c0013372:	99                   	cdq    
c0013373:	c3                   	ret    

c0013374 <SysGetVGAPtr(regs*)>:
c0013374:	55                   	push   ebp
c0013375:	57                   	push   edi
c0013376:	56                   	push   esi
c0013377:	53                   	push   ebx
c0013378:	83 ec 18             	sub    esp,0x18
c001337b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001337f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013382:	e8 b1 24 00 00       	call   c0015838 <Thr::processFromPID(int)>
c0013387:	83 c4 10             	add    esp,0x10
c001338a:	89 c1                	mov    ecx,eax
c001338c:	b8 01 00 00 00       	mov    eax,0x1
c0013391:	85 c9                	test   ecx,ecx
c0013393:	74 57                	je     c00133ec <SysGetVGAPtr(regs*)+0x78>
c0013395:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c001339b:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c001339f:	74 0c                	je     c00133ad <SysGetVGAPtr(regs*)+0x39>
c00133a1:	83 ec 0c             	sub    esp,0xc
c00133a4:	55                   	push   ebp
c00133a5:	e8 a1 53 ff ff       	call   c000874b <setActiveTerminal(VgaText*)>
c00133aa:	83 c4 10             	add    esp,0x10
c00133ad:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00133b0:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00133b3:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00133b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00133ba:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00133bd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00133c0:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00133c6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00133c9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00133cc:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00133d2:	50                   	push   eax
c00133d3:	50                   	push   eax
c00133d4:	68 70 16 02 c0       	push   0xc0021670
c00133d9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00133dc:	05 a8 0f 00 00       	add    eax,0xfa8
c00133e1:	50                   	push   eax
c00133e2:	e8 59 d2 fe ff       	call   c0000640 <strcpy>
c00133e7:	83 c4 10             	add    esp,0x10
c00133ea:	31 c0                	xor    eax,eax
c00133ec:	83 c4 0c             	add    esp,0xc
c00133ef:	31 d2                	xor    edx,edx
c00133f1:	5b                   	pop    ebx
c00133f2:	5e                   	pop    esi
c00133f3:	5f                   	pop    edi
c00133f4:	5d                   	pop    ebp
c00133f5:	c3                   	ret    
c00133f6:	66 90                	xchg   ax,ax

c00133f8 <SysKill(regs*)>:
c00133f8:	53                   	push   ebx
c00133f9:	83 ec 08             	sub    esp,0x8
c00133fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013400:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013404:	75 16                	jne    c001341c <SysKill(regs*)+0x24>
c0013406:	83 ec 0c             	sub    esp,0xc
c0013409:	68 7a 16 02 c0       	push   0xc002167a
c001340e:	e8 c8 d7 ff ff       	call   c0010bdb <KePanic(char const*)>
c0013413:	83 c4 10             	add    esp,0x10
c0013416:	e9 89 00 00 00       	jmp    c00134a4 <SysKill(regs*)+0xac>
c001341b:	90                   	nop
c001341c:	83 ec 0c             	sub    esp,0xc
c001341f:	68 84 91 02 c0       	push   0xc0029184
c0013424:	e8 93 bb 00 00       	call   c001efbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013429:	8d 76 00             	lea    esi,[esi+0x0]
c001342c:	83 c4 10             	add    esp,0x10
c001342f:	85 c0                	test   eax,eax
c0013431:	74 19                	je     c001344c <SysKill(regs*)+0x54>
c0013433:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013436:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013439:	39 0a                	cmp    DWORD PTR [edx],ecx
c001343b:	74 33                	je     c0013470 <SysKill(regs*)+0x78>
c001343d:	52                   	push   edx
c001343e:	52                   	push   edx
c001343f:	50                   	push   eax
c0013440:	68 84 91 02 c0       	push   0xc0029184
c0013445:	e8 92 be 00 00       	call   c001f2dc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001344a:	eb e0                	jmp    c001342c <SysKill(regs*)+0x34>
c001344c:	83 ec 0c             	sub    esp,0xc
c001344f:	68 78 91 02 c0       	push   0xc0029178
c0013454:	e8 63 bb 00 00       	call   c001efbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013459:	8d 76 00             	lea    esi,[esi+0x0]
c001345c:	83 c4 10             	add    esp,0x10
c001345f:	85 c0                	test   eax,eax
c0013461:	74 41                	je     c00134a4 <SysKill(regs*)+0xac>
c0013463:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013466:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013469:	39 0a                	cmp    DWORD PTR [edx],ecx
c001346b:	75 27                	jne    c0013494 <SysKill(regs*)+0x9c>
c001346d:	8d 76 00             	lea    esi,[esi+0x0]
c0013470:	51                   	push   ecx
c0013471:	51                   	push   ecx
c0013472:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013475:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001347a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001347d:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013483:	e8 f6 db ff ff       	call   c001107e <KeRaiseSignal(SigHandlerBlock*, int)>
c0013488:	83 c4 10             	add    esp,0x10
c001348b:	31 c0                	xor    eax,eax
c001348d:	31 d2                	xor    edx,edx
c001348f:	eb 1b                	jmp    c00134ac <SysKill(regs*)+0xb4>
c0013491:	8d 76 00             	lea    esi,[esi+0x0]
c0013494:	52                   	push   edx
c0013495:	52                   	push   edx
c0013496:	50                   	push   eax
c0013497:	68 78 91 02 c0       	push   0xc0029178
c001349c:	e8 3b be 00 00       	call   c001f2dc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00134a1:	eb b9                	jmp    c001345c <SysKill(regs*)+0x64>
c00134a3:	90                   	nop
c00134a4:	83 c8 ff             	or     eax,0xffffffff
c00134a7:	89 c2                	mov    edx,eax
c00134a9:	8d 76 00             	lea    esi,[esi+0x0]
c00134ac:	83 c4 08             	add    esp,0x8
c00134af:	5b                   	pop    ebx
c00134b0:	c3                   	ret    

c00134b1 <SysLoadDLL(regs*)>:
c00134b1:	56                   	push   esi
c00134b2:	53                   	push   ebx
c00134b3:	31 d2                	xor    edx,edx
c00134b5:	51                   	push   ecx
c00134b6:	b8 01 00 00 00       	mov    eax,0x1
c00134bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134bf:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00134c3:	0f 84 8c 00 00 00    	je     c0013555 <SysLoadDLL(regs*)+0xa4>
c00134c9:	83 ec 0c             	sub    esp,0xc
c00134cc:	68 14 01 00 00       	push   0x114
c00134d1:	e8 d8 45 ff ff       	call   c0007aae <malloc>
c00134d6:	83 c4 0c             	add    esp,0xc
c00134d9:	89 c3                	mov    ebx,eax
c00134db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134e0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00134e3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00134e6:	53                   	push   ebx
c00134e7:	e8 e4 7c ff ff       	call   c000b1d0 <File::File(char const*, Process*)>
c00134ec:	83 c4 10             	add    esp,0x10
c00134ef:	31 d2                	xor    edx,edx
c00134f1:	b8 02 00 00 00       	mov    eax,0x2
c00134f6:	85 db                	test   ebx,ebx
c00134f8:	74 5b                	je     c0013555 <SysLoadDLL(regs*)+0xa4>
c00134fa:	83 ec 0c             	sub    esp,0xc
c00134fd:	53                   	push   ebx
c00134fe:	e8 f7 7f ff ff       	call   c000b4fa <File::exists()>
c0013503:	83 c4 10             	add    esp,0x10
c0013506:	84 c0                	test   al,al
c0013508:	8b 03                	mov    eax,DWORD PTR [ebx]
c001350a:	75 11                	jne    c001351d <SysLoadDLL(regs*)+0x6c>
c001350c:	83 ec 0c             	sub    esp,0xc
c001350f:	53                   	push   ebx
c0013510:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013513:	83 c4 10             	add    esp,0x10
c0013516:	b8 03 00 00 00       	mov    eax,0x3
c001351b:	eb 36                	jmp    c0013553 <SysLoadDLL(regs*)+0xa2>
c001351d:	83 ec 0c             	sub    esp,0xc
c0013520:	53                   	push   ebx
c0013521:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013524:	58                   	pop    eax
c0013525:	5a                   	pop    edx
c0013526:	6a 00                	push   0x0
c0013528:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001352b:	e8 3d 14 00 00       	call   c001496d <Thr::loadDLL(char const*, bool)>
c0013530:	83 c4 10             	add    esp,0x10
c0013533:	89 c1                	mov    ecx,eax
c0013535:	31 d2                	xor    edx,edx
c0013537:	b8 04 00 00 00       	mov    eax,0x4
c001353c:	85 c9                	test   ecx,ecx
c001353e:	74 15                	je     c0013555 <SysLoadDLL(regs*)+0xa4>
c0013540:	53                   	push   ebx
c0013541:	53                   	push   ebx
c0013542:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013548:	51                   	push   ecx
c0013549:	e8 50 16 00 00       	call   c0014b9e <Thr::executeDLL(unsigned long, void*)>
c001354e:	83 c4 10             	add    esp,0x10
c0013551:	31 c0                	xor    eax,eax
c0013553:	31 d2                	xor    edx,edx
c0013555:	59                   	pop    ecx
c0013556:	5b                   	pop    ebx
c0013557:	5e                   	pop    esi
c0013558:	c3                   	ret    

c0013559 <SysRead(regs*)>:
c0013559:	57                   	push   edi
c001355a:	56                   	push   esi
c001355b:	53                   	push   ebx
c001355c:	83 ec 10             	sub    esp,0x10
c001355f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013563:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013566:	83 f8 02             	cmp    eax,0x2
c0013569:	77 10                	ja     c001357b <SysRead(regs*)+0x22>
c001356b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013570:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013573:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013579:	eb 0e                	jmp    c0013589 <SysRead(regs*)+0x30>
c001357b:	83 ec 0c             	sub    esp,0xc
c001357e:	50                   	push   eax
c001357f:	e8 23 5f ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c0013584:	83 c4 10             	add    esp,0x10
c0013587:	89 c1                	mov    ecx,eax
c0013589:	83 c8 ff             	or     eax,0xffffffff
c001358c:	85 c9                	test   ecx,ecx
c001358e:	89 c2                	mov    edx,eax
c0013590:	74 28                	je     c00135ba <SysRead(regs*)+0x61>
c0013592:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001359a:	31 ff                	xor    edi,edi
c001359c:	83 ec 0c             	sub    esp,0xc
c001359f:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135a1:	8d 54 24 18          	lea    edx,[esp+0x18]
c00135a5:	52                   	push   edx
c00135a6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00135a9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00135ac:	57                   	push   edi
c00135ad:	56                   	push   esi
c00135ae:	51                   	push   ecx
c00135af:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00135b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00135b6:	83 c4 20             	add    esp,0x20
c00135b9:	99                   	cdq    
c00135ba:	83 c4 10             	add    esp,0x10
c00135bd:	5b                   	pop    ebx
c00135be:	5e                   	pop    esi
c00135bf:	5f                   	pop    edi
c00135c0:	c3                   	ret    

c00135c1 <SysRegisterSignal(regs*)>:
c00135c1:	83 ec 18             	sub    esp,0x18
c00135c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135c8:	6a 00                	push   0x0
c00135ca:	6a 00                	push   0x0
c00135cc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00135cf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00135d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135d7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00135da:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00135e0:	e8 63 da ff ff       	call   c0011048 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00135e5:	83 c4 2c             	add    esp,0x2c
c00135e8:	99                   	cdq    
c00135e9:	c3                   	ret    

c00135ea <SysRegistryGetTypeFromPath(regs*)>:
c00135ea:	57                   	push   edi
c00135eb:	56                   	push   esi
c00135ec:	53                   	push   ebx
c00135ed:	81 ec 38 01 00 00    	sub    esp,0x138
c00135f3:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00135fa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00135fd:	68 9b 16 02 c0       	push   0xc002169b
c0013602:	e8 70 73 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0013607:	5a                   	pop    edx
c0013608:	59                   	pop    ecx
c0013609:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001360c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001360f:	e8 4d f6 ff ff       	call   c0012c61 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013614:	5f                   	pop    edi
c0013615:	89 c6                	mov    esi,eax
c0013617:	5a                   	pop    edx
c0013618:	50                   	push   eax
c0013619:	68 bb 16 02 c0       	push   0xc00216bb
c001361e:	e8 54 73 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0013623:	83 c4 10             	add    esp,0x10
c0013626:	85 f6                	test   esi,esi
c0013628:	74 28                	je     c0013652 <SysRegistryGetTypeFromPath(regs*)+0x68>
c001362a:	50                   	push   eax
c001362b:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001362f:	57                   	push   edi
c0013630:	56                   	push   esi
c0013631:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013634:	e8 0c f2 ff ff       	call   c0012845 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013639:	83 c4 0c             	add    esp,0xc
c001363c:	89 c3                	mov    ebx,eax
c001363e:	57                   	push   edi
c001363f:	50                   	push   eax
c0013640:	68 c3 16 02 c0       	push   0xc00216c3
c0013645:	e8 2d 73 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c001364a:	89 d8                	mov    eax,ebx
c001364c:	83 c4 10             	add    esp,0x10
c001364f:	99                   	cdq    
c0013650:	eb 05                	jmp    c0013657 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013652:	83 c8 ff             	or     eax,0xffffffff
c0013655:	89 c2                	mov    edx,eax
c0013657:	81 c4 30 01 00 00    	add    esp,0x130
c001365d:	5b                   	pop    ebx
c001365e:	5e                   	pop    esi
c001365f:	5f                   	pop    edi
c0013660:	c3                   	ret    

c0013661 <SysRegistryReadExtent(regs*)>:
c0013661:	83 ec 1c             	sub    esp,0x1c
c0013664:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013668:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001366b:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001366e:	85 c0                	test   eax,eax
c0013670:	79 1f                	jns    c0013691 <SysRegistryReadExtent(regs*)+0x30>
c0013672:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013677:	52                   	push   edx
c0013678:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001367c:	52                   	push   edx
c001367d:	50                   	push   eax
c001367e:	51                   	push   ecx
c001367f:	e8 b3 f0 ff ff       	call   c0012737 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013684:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001368c:	83 c4 10             	add    esp,0x10
c001368f:	eb 14                	jmp    c00136a5 <SysRegistryReadExtent(regs*)+0x44>
c0013691:	83 ec 04             	sub    esp,0x4
c0013694:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013697:	50                   	push   eax
c0013698:	51                   	push   ecx
c0013699:	e8 33 eb ff ff       	call   c00121d1 <CmGetString(Reghive_Tag*, int, char*)>
c001369e:	83 c4 10             	add    esp,0x10
c00136a1:	31 c0                	xor    eax,eax
c00136a3:	31 d2                	xor    edx,edx
c00136a5:	83 c4 1c             	add    esp,0x1c
c00136a8:	c3                   	ret    

c00136a9 <SysRegistryPathToExtentLookup(regs*)>:
c00136a9:	53                   	push   ebx
c00136aa:	83 ec 10             	sub    esp,0x10
c00136ad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136b1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00136b4:	68 d9 16 02 c0       	push   0xc00216d9
c00136b9:	e8 b9 72 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c00136be:	58                   	pop    eax
c00136bf:	5a                   	pop    edx
c00136c0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00136c3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00136c6:	e8 96 f5 ff ff       	call   c0012c61 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00136cb:	83 c4 18             	add    esp,0x18
c00136ce:	99                   	cdq    
c00136cf:	5b                   	pop    ebx
c00136d0:	c3                   	ret    

c00136d1 <SysRegistryEnterDirectory(regs*)>:
c00136d1:	53                   	push   ebx
c00136d2:	83 ec 10             	sub    esp,0x10
c00136d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136d9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00136dc:	68 fc 16 02 c0       	push   0xc00216fc
c00136e1:	e8 91 72 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c00136e6:	58                   	pop    eax
c00136e7:	5a                   	pop    edx
c00136e8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00136eb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00136ee:	e8 55 eb ff ff       	call   c0012248 <CmEnterDirectory(Reghive_Tag*, int)>
c00136f3:	83 c4 18             	add    esp,0x18
c00136f6:	99                   	cdq    
c00136f7:	5b                   	pop    ebx
c00136f8:	c3                   	ret    

c00136f9 <SysRegistryGetNext(regs*)>:
c00136f9:	53                   	push   ebx
c00136fa:	83 ec 10             	sub    esp,0x10
c00136fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013701:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013704:	68 1a 17 02 c0       	push   0xc002171a
c0013709:	e8 69 72 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c001370e:	58                   	pop    eax
c001370f:	5a                   	pop    edx
c0013710:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013713:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013716:	e8 6c eb ff ff       	call   c0012287 <CmGetNext(Reghive_Tag*, int)>
c001371b:	83 c4 18             	add    esp,0x18
c001371e:	99                   	cdq    
c001371f:	5b                   	pop    ebx
c0013720:	c3                   	ret    

c0013721 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013721:	57                   	push   edi
c0013722:	56                   	push   esi
c0013723:	53                   	push   ebx
c0013724:	81 ec 34 01 00 00    	sub    esp,0x134
c001372a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013731:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013735:	57                   	push   edi
c0013736:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013739:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001373c:	e8 04 f1 ff ff       	call   c0012845 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013741:	89 c3                	mov    ebx,eax
c0013743:	58                   	pop    eax
c0013744:	5a                   	pop    edx
c0013745:	57                   	push   edi
c0013746:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013749:	e8 f2 ce fe ff       	call   c0000640 <strcpy>
c001374e:	89 d8                	mov    eax,ebx
c0013750:	81 c4 40 01 00 00    	add    esp,0x140
c0013756:	99                   	cdq    
c0013757:	5b                   	pop    ebx
c0013758:	5e                   	pop    esi
c0013759:	5f                   	pop    edi
c001375a:	c3                   	ret    

c001375b <SysRegistryOpen(regs*)>:
c001375b:	83 ec 18             	sub    esp,0x18
c001375e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013762:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013765:	e8 f7 e8 ff ff       	call   c0012061 <CmOpen(char const*)>
c001376a:	83 c4 1c             	add    esp,0x1c
c001376d:	99                   	cdq    
c001376e:	c3                   	ret    

c001376f <SysRegistryClose(regs*)>:
c001376f:	83 ec 18             	sub    esp,0x18
c0013772:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013776:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013779:	e8 01 ea ff ff       	call   c001217f <CmClose(Reghive_Tag*)>
c001377e:	31 c0                	xor    eax,eax
c0013780:	31 d2                	xor    edx,edx
c0013782:	83 c4 1c             	add    esp,0x1c
c0013785:	c3                   	ret    

c0013786 <SysSbrk(regs*)>:
c0013786:	56                   	push   esi
c0013787:	53                   	push   ebx
c0013788:	50                   	push   eax
c0013789:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001378e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013792:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013795:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013798:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001379e:	85 db                	test   ebx,ebx
c00137a0:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00137a3:	74 02                	je     c00137a7 <SysSbrk(regs*)+0x21>
c00137a5:	79 06                	jns    c00137ad <SysSbrk(regs*)+0x27>
c00137a7:	89 f0                	mov    eax,esi
c00137a9:	31 d2                	xor    edx,edx
c00137ab:	eb 2a                	jmp    c00137d7 <SysSbrk(regs*)+0x51>
c00137ad:	83 c8 ff             	or     eax,0xffffffff
c00137b0:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00137b6:	89 c2                	mov    edx,eax
c00137b8:	77 1d                	ja     c00137d7 <SysSbrk(regs*)+0x51>
c00137ba:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00137c0:	50                   	push   eax
c00137c1:	c1 ea 0c             	shr    edx,0xc
c00137c4:	68 07 0c 00 00       	push   0xc07
c00137c9:	52                   	push   edx
c00137ca:	51                   	push   ecx
c00137cb:	e8 46 66 ff ff       	call   c0009e16 <VAS::allocatePages(int, int)>
c00137d0:	89 f0                	mov    eax,esi
c00137d2:	31 d2                	xor    edx,edx
c00137d4:	83 c4 10             	add    esp,0x10
c00137d7:	59                   	pop    ecx
c00137d8:	5b                   	pop    ebx
c00137d9:	5e                   	pop    esi
c00137da:	c3                   	ret    

c00137db <SysSetCwd(regs*)>:
c00137db:	83 ec 14             	sub    esp,0x14
c00137de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137e2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00137e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137ea:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00137ed:	e8 a7 7d ff ff       	call   c000b599 <Fs::setcwd(Process*, char*)>
c00137f2:	83 c4 1c             	add    esp,0x1c
c00137f5:	99                   	cdq    
c00137f6:	c3                   	ret    

c00137f7 <SysSetTime(regs*)>:
c00137f7:	55                   	push   ebp
c00137f8:	31 c9                	xor    ecx,ecx
c00137fa:	57                   	push   edi
c00137fb:	bd 0c 00 00 00       	mov    ebp,0xc
c0013800:	56                   	push   esi
c0013801:	53                   	push   ebx
c0013802:	31 db                	xor    ebx,ebx
c0013804:	83 ec 10             	sub    esp,0x10
c0013807:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001380b:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001380e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013811:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013814:	89 c2                	mov    edx,eax
c0013816:	81 ef 6c 07 00 00    	sub    edi,0x76c
c001381c:	83 e2 1f             	and    edx,0x1f
c001381f:	c1 e7 10             	shl    edi,0x10
c0013822:	42                   	inc    edx
c0013823:	c1 e8 05             	shr    eax,0x5
c0013826:	88 d1                	mov    cl,dl
c0013828:	31 d2                	xor    edx,edx
c001382a:	f7 f5                	div    ebp
c001382c:	89 dd                	mov    ebp,ebx
c001382e:	88 d5                	mov    ch,dl
c0013830:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013836:	0f b7 c1             	movzx  eax,cx
c0013839:	31 d2                	xor    edx,edx
c001383b:	09 f8                	or     eax,edi
c001383d:	bf 3c 00 00 00       	mov    edi,0x3c
c0013842:	89 c1                	mov    ecx,eax
c0013844:	89 f0                	mov    eax,esi
c0013846:	f7 f7                	div    edi
c0013848:	c1 e2 10             	shl    edx,0x10
c001384b:	09 d5                	or     ebp,edx
c001384d:	31 d2                	xor    edx,edx
c001384f:	89 eb                	mov    ebx,ebp
c0013851:	f7 f7                	div    edi
c0013853:	bf 10 0e 00 00       	mov    edi,0xe10
c0013858:	88 d7                	mov    bh,dl
c001385a:	89 f0                	mov    eax,esi
c001385c:	31 d2                	xor    edx,edx
c001385e:	f7 f7                	div    edi
c0013860:	bf 18 00 00 00       	mov    edi,0x18
c0013865:	31 d2                	xor    edx,edx
c0013867:	f7 f7                	div    edi
c0013869:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001386e:	88 d3                	mov    bl,dl
c0013870:	53                   	push   ebx
c0013871:	51                   	push   ecx
c0013872:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013878:	e8 19 85 ff ff       	call   c000bd96 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001387d:	83 c4 1c             	add    esp,0x1c
c0013880:	83 f0 01             	xor    eax,0x1
c0013883:	5b                   	pop    ebx
c0013884:	0f b6 c0             	movzx  eax,al
c0013887:	5e                   	pop    esi
c0013888:	31 d2                	xor    edx,edx
c001388a:	5f                   	pop    edi
c001388b:	5d                   	pop    ebp
c001388c:	c3                   	ret    

c001388d <SysTimezone(regs*)>:
c001388d:	53                   	push   ebx
c001388e:	83 ec 08             	sub    esp,0x8
c0013891:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013895:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013899:	75 17                	jne    c00138b2 <SysTimezone(regs*)+0x25>
c001389b:	83 ec 0c             	sub    esp,0xc
c001389e:	68 31 17 02 c0       	push   0xc0021731
c00138a3:	e8 cf 70 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c00138a8:	83 c8 ff             	or     eax,0xffffffff
c00138ab:	83 c4 10             	add    esp,0x10
c00138ae:	89 c2                	mov    edx,eax
c00138b0:	eb 20                	jmp    c00138d2 <SysTimezone(regs*)+0x45>
c00138b2:	83 ec 0c             	sub    esp,0xc
c00138b5:	68 46 17 02 c0       	push   0xc0021746
c00138ba:	e8 b8 70 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c00138bf:	58                   	pop    eax
c00138c0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00138c3:	e8 38 82 ff ff       	call   c000bb00 <User::loadClockSettings(int)>
c00138c8:	83 c4 10             	add    esp,0x10
c00138cb:	b8 01 00 00 00       	mov    eax,0x1
c00138d0:	31 d2                	xor    edx,edx
c00138d2:	83 c4 08             	add    esp,0x8
c00138d5:	5b                   	pop    ebx
c00138d6:	c3                   	ret    

c00138d7 <SysWrite(regs*)>:
c00138d7:	57                   	push   edi
c00138d8:	56                   	push   esi
c00138d9:	53                   	push   ebx
c00138da:	83 ec 10             	sub    esp,0x10
c00138dd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00138e1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00138e4:	83 f8 02             	cmp    eax,0x2
c00138e7:	77 10                	ja     c00138f9 <SysWrite(regs*)+0x22>
c00138e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00138f1:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00138f7:	eb 0e                	jmp    c0013907 <SysWrite(regs*)+0x30>
c00138f9:	83 ec 0c             	sub    esp,0xc
c00138fc:	50                   	push   eax
c00138fd:	e8 a5 5b ff ff       	call   c00094a7 <KeGetFileFromDescriptor(int)>
c0013902:	83 c4 10             	add    esp,0x10
c0013905:	89 c1                	mov    ecx,eax
c0013907:	83 c8 ff             	or     eax,0xffffffff
c001390a:	85 c9                	test   ecx,ecx
c001390c:	89 c2                	mov    edx,eax
c001390e:	74 28                	je     c0013938 <SysWrite(regs*)+0x61>
c0013910:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013918:	31 ff                	xor    edi,edi
c001391a:	83 ec 0c             	sub    esp,0xc
c001391d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001391f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013923:	52                   	push   edx
c0013924:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013927:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001392a:	57                   	push   edi
c001392b:	56                   	push   esi
c001392c:	51                   	push   ecx
c001392d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013930:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013934:	83 c4 20             	add    esp,0x20
c0013937:	99                   	cdq    
c0013938:	83 c4 10             	add    esp,0x10
c001393b:	5b                   	pop    ebx
c001393c:	5e                   	pop    esi
c001393d:	5f                   	pop    edi
c001393e:	c3                   	ret    

c001393f <SysWsbe(regs*)>:
c001393f:	57                   	push   edi
c0013940:	b9 0b 00 00 00       	mov    ecx,0xb
c0013945:	56                   	push   esi
c0013946:	be 85 17 02 c0       	mov    esi,0xc0021785
c001394b:	53                   	push   ebx
c001394c:	83 ec 30             	sub    esp,0x30
c001394f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0013953:	fc                   	cld    
c0013954:	83 ec 0c             	sub    esp,0xc
c0013957:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013959:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001395d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013962:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013965:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001396b:	8b 06                	mov    eax,DWORD PTR [esi]
c001396d:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0013970:	57                   	push   edi
c0013971:	e8 fa cb fe ff       	call   c0000570 <strlen>
c0013976:	5a                   	pop    edx
c0013977:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001397b:	52                   	push   edx
c001397c:	31 d2                	xor    edx,edx
c001397e:	57                   	push   edi
c001397f:	52                   	push   edx
c0013980:	50                   	push   eax
c0013981:	56                   	push   esi
c0013982:	ff d3                	call   ebx
c0013984:	83 c4 14             	add    esp,0x14
c0013987:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001398b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001398e:	e8 d9 23 00 00       	call   c0015d6c <terminateTask(int)>
c0013993:	83 c4 40             	add    esp,0x40
c0013996:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001399b:	5b                   	pop    ebx
c001399c:	31 d2                	xor    edx,edx
c001399e:	5e                   	pop    esi
c001399f:	5f                   	pop    edi
c00139a0:	c3                   	ret    

c00139a1 <SysYield(regs*)>:
c00139a1:	83 ec 0c             	sub    esp,0xc
c00139a4:	fa                   	cli    
c00139a5:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c00139ab:	e8 1c 1a 00 00       	call   c00153cc <schedule()>
c00139b0:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00139b5:	48                   	dec    eax
c00139b6:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00139bb:	75 01                	jne    c00139be <SysYield(regs*)+0x1d>
c00139bd:	fb                   	sti    
c00139be:	31 c0                	xor    eax,eax
c00139c0:	31 d2                	xor    edx,edx
c00139c2:	83 c4 0c             	add    esp,0xc
c00139c5:	c3                   	ret    

c00139c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00139c6:	55                   	push   ebp
c00139c7:	57                   	push   edi
c00139c8:	56                   	push   esi
c00139c9:	53                   	push   ebx
c00139ca:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00139d0:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00139d8:	0f 95 c0             	setne  al
c00139db:	31 d2                	xor    edx,edx
c00139dd:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00139e5:	0f 94 c2             	sete   dl
c00139e8:	85 c2                	test   edx,eax
c00139ea:	74 34                	je     c0013a20 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00139ec:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00139f7:	74 27                	je     c0013a20 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00139f9:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013a00:	05 00 10 00 00       	add    eax,0x1000
c0013a05:	89 c1                	mov    ecx,eax
c0013a07:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013a0c:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0013a12:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013a19:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0013a20:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0013a27:	83 ec 0c             	sub    esp,0xc
c0013a2a:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013a30:	6a 01                	push   0x1
c0013a32:	e8 ca 5b ff ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c0013a37:	83 c4 10             	add    esp,0x10
c0013a3a:	89 c3                	mov    ebx,eax
c0013a3c:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013a42:	0f 86 25 01 00 00    	jbe    c0013b6d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0013a48:	c1 ee 0c             	shr    esi,0xc
c0013a4b:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013a52:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013a56:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013a5e:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013a65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a69:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013a70:	29 ef                	sub    edi,ebp
c0013a72:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0013a76:	0f 83 f8 00 00 00    	jae    c0013b74 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0013a7c:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013a82:	76 05                	jbe    c0013a89 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0013a84:	bf 00 10 00 00       	mov    edi,0x1000
c0013a89:	83 ec 0c             	sub    esp,0xc
c0013a8c:	31 d2                	xor    edx,edx
c0013a8e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013a95:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a97:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013a9b:	50                   	push   eax
c0013a9c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013aa0:	56                   	push   esi
c0013aa1:	52                   	push   edx
c0013aa2:	57                   	push   edi
c0013aa3:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013aaa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013aad:	83 c4 20             	add    esp,0x20
c0013ab0:	85 c0                	test   eax,eax
c0013ab2:	75 06                	jne    c0013aba <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0013ab4:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013ab8:	74 13                	je     c0013acd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0013aba:	83 ec 0c             	sub    esp,0xc
c0013abd:	53                   	push   ebx
c0013abe:	e8 5a 5e ff ff       	call   c000991d <Virt::freeKernelVirtualPages(unsigned long)>
c0013ac3:	83 c4 10             	add    esp,0x10
c0013ac6:	31 c0                	xor    eax,eax
c0013ac8:	e9 7c 01 00 00       	jmp    c0013c49 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0013acd:	fa                   	cli    
c0013ace:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0013ad4:	e8 d9 42 ff ff       	call   c0007db2 <Phys::allocatePage()>
c0013ad9:	6a 07                	push   0x7
c0013adb:	89 c7                	mov    edi,eax
c0013add:	53                   	push   ebx
c0013ade:	50                   	push   eax
c0013adf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ae4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ae7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013aed:	e8 20 62 ff ff       	call   c0009d12 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013af2:	83 c4 0c             	add    esp,0xc
c0013af5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013afc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b02:	6a 00                	push   0x0
c0013b04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b09:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b0c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b12:	e8 61 60 ff ff       	call   c0009b78 <VAS::mapOtherVASIn(bool, VAS*)>
c0013b17:	58                   	pop    eax
c0013b18:	5a                   	pop    edx
c0013b19:	68 07 0c 00 00       	push   0xc07
c0013b1e:	55                   	push   ebp
c0013b1f:	57                   	push   edi
c0013b20:	89 df                	mov    edi,ebx
c0013b22:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013b29:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b2f:	6a 00                	push   0x0
c0013b31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b39:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b3f:	e8 3e 64 ff ff       	call   c0009f82 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013b44:	b9 00 10 00 00       	mov    ecx,0x1000
c0013b49:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b4b:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0013b50:	83 c4 20             	add    esp,0x20
c0013b53:	48                   	dec    eax
c0013b54:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0013b59:	85 c0                	test   eax,eax
c0013b5b:	75 01                	jne    c0013b5e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0013b5d:	fb                   	sti    
c0013b5e:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013b64:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013b68:	e9 f1 fe ff ff       	jmp    c0013a5e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0013b6d:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013b74:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013b7b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013b81:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013b87:	0f 86 ae 00 00 00    	jbe    c0013c3b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0013b8d:	fa                   	cli    
c0013b8e:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0013b94:	c1 ee 0c             	shr    esi,0xc
c0013b97:	51                   	push   ecx
c0013b98:	31 ff                	xor    edi,edi
c0013b9a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013ba1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ba7:	6a 00                	push   0x0
c0013ba9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013bb1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013bb7:	e8 bc 5f ff ff       	call   c0009b78 <VAS::mapOtherVASIn(bool, VAS*)>
c0013bbc:	83 c4 10             	add    esp,0x10
c0013bbf:	e8 ee 41 ff ff       	call   c0007db2 <Phys::allocatePage()>
c0013bc4:	47                   	inc    edi
c0013bc5:	6a 07                	push   0x7
c0013bc7:	53                   	push   ebx
c0013bc8:	50                   	push   eax
c0013bc9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013bcd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013bd3:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013bd6:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013bdc:	e8 31 61 ff ff       	call   c0009d12 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013be1:	58                   	pop    eax
c0013be2:	5a                   	pop    edx
c0013be3:	68 07 0c 00 00       	push   0xc07
c0013be8:	55                   	push   ebp
c0013be9:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013bef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bf3:	50                   	push   eax
c0013bf4:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013bfb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c01:	6a 00                	push   0x0
c0013c03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c08:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c0b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c11:	e8 6c 63 ff ff       	call   c0009f82 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013c16:	83 c4 1c             	add    esp,0x1c
c0013c19:	68 00 10 00 00       	push   0x1000
c0013c1e:	6a 00                	push   0x0
c0013c20:	53                   	push   ebx
c0013c21:	e8 ca c8 fe ff       	call   c00004f0 <memset>
c0013c26:	83 c4 10             	add    esp,0x10
c0013c29:	39 fe                	cmp    esi,edi
c0013c2b:	77 92                	ja     c0013bbf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0013c2d:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0013c32:	48                   	dec    eax
c0013c33:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0013c38:	75 01                	jne    c0013c3b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0013c3a:	fb                   	sti    
c0013c3b:	83 ec 0c             	sub    esp,0xc
c0013c3e:	53                   	push   ebx
c0013c3f:	e8 d9 5c ff ff       	call   c000991d <Virt::freeKernelVirtualPages(unsigned long)>
c0013c44:	83 c4 10             	add    esp,0x10
c0013c47:	b0 01                	mov    al,0x1
c0013c49:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013c4f:	5b                   	pop    ebx
c0013c50:	5e                   	pop    esi
c0013c51:	5f                   	pop    edi
c0013c52:	5d                   	pop    ebp
c0013c53:	c3                   	ret    

c0013c54 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013c54:	55                   	push   ebp
c0013c55:	57                   	push   edi
c0013c56:	56                   	push   esi
c0013c57:	53                   	push   ebx
c0013c58:	83 ec 48             	sub    esp,0x48
c0013c5b:	68 14 01 00 00       	push   0x114
c0013c60:	e8 49 3e ff ff       	call   c0007aae <malloc>
c0013c65:	83 c4 0c             	add    esp,0xc
c0013c68:	89 c6                	mov    esi,eax
c0013c6a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013c6e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013c72:	50                   	push   eax
c0013c73:	e8 58 75 ff ff       	call   c000b1d0 <File::File(char const*, Process*)>
c0013c78:	58                   	pop    eax
c0013c79:	5a                   	pop    edx
c0013c7a:	6a 01                	push   0x1
c0013c7c:	56                   	push   esi
c0013c7d:	e8 0a 76 ff ff       	call   c000b28c <File::open(FileOpenMode)>
c0013c82:	83 c4 10             	add    esp,0x10
c0013c85:	85 c0                	test   eax,eax
c0013c87:	0f 85 43 01 00 00    	jne    c0013dd0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013c8d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013c95:	83 ec 0c             	sub    esp,0xc
c0013c98:	6a 34                	push   0x34
c0013c9a:	e8 0f 3e ff ff       	call   c0007aae <malloc>
c0013c9f:	89 c3                	mov    ebx,eax
c0013ca1:	58                   	pop    eax
c0013ca2:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ca4:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0013ca8:	57                   	push   edi
c0013ca9:	53                   	push   ebx
c0013caa:	6a 00                	push   0x0
c0013cac:	6a 34                	push   0x34
c0013cae:	56                   	push   esi
c0013caf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013cb2:	83 c4 20             	add    esp,0x20
c0013cb5:	85 c0                	test   eax,eax
c0013cb7:	0f 85 13 01 00 00    	jne    c0013dd0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013cbd:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013cc3:	0f 85 07 01 00 00    	jne    c0013dd0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013cc9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013ccc:	85 c0                	test   eax,eax
c0013cce:	0f 84 fc 00 00 00    	je     c0013dd0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013cd4:	31 d2                	xor    edx,edx
c0013cd6:	55                   	push   ebp
c0013cd7:	52                   	push   edx
c0013cd8:	50                   	push   eax
c0013cd9:	56                   	push   esi
c0013cda:	e8 6b 76 ff ff       	call   c000b34a <File::seek(unsigned long long)>
c0013cdf:	83 c4 10             	add    esp,0x10
c0013ce2:	85 c0                	test   eax,eax
c0013ce4:	0f 85 e6 00 00 00    	jne    c0013dd0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013cea:	83 ec 0c             	sub    esp,0xc
c0013ced:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013cf0:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013cf4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013cf8:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013cfc:	0f af c2             	imul   eax,edx
c0013cff:	50                   	push   eax
c0013d00:	e8 a9 3d ff ff       	call   c0007aae <malloc>
c0013d05:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013d07:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013d0b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013d0e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d12:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013d16:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013d1a:	0f af c2             	imul   eax,edx
c0013d1d:	99                   	cdq    
c0013d1e:	52                   	push   edx
c0013d1f:	50                   	push   eax
c0013d20:	56                   	push   esi
c0013d21:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013d24:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013d27:	83 c4 20             	add    esp,0x20
c0013d2a:	85 c0                	test   eax,eax
c0013d2c:	0f 84 9e 00 00 00    	je     c0013dd0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013d32:	31 d2                	xor    edx,edx
c0013d34:	51                   	push   ecx
c0013d35:	52                   	push   edx
c0013d36:	50                   	push   eax
c0013d37:	56                   	push   esi
c0013d38:	e8 0d 76 ff ff       	call   c000b34a <File::seek(unsigned long long)>
c0013d3d:	83 c4 10             	add    esp,0x10
c0013d40:	85 c0                	test   eax,eax
c0013d42:	0f 85 88 00 00 00    	jne    c0013dd0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013d48:	83 ec 0c             	sub    esp,0xc
c0013d4b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013d4f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013d53:	31 ed                	xor    ebp,ebp
c0013d55:	0f af c2             	imul   eax,edx
c0013d58:	50                   	push   eax
c0013d59:	e8 50 3d ff ff       	call   c0007aae <malloc>
c0013d5e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013d60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d64:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013d67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d6b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013d6f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013d73:	0f af c2             	imul   eax,edx
c0013d76:	99                   	cdq    
c0013d77:	52                   	push   edx
c0013d78:	50                   	push   eax
c0013d79:	56                   	push   esi
c0013d7a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013d7d:	83 c4 20             	add    esp,0x20
c0013d80:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013d88:	0f b7 fd             	movzx  edi,bp
c0013d8b:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0013d8f:	73 7d                	jae    c0013e0e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0013d91:	c1 e7 05             	shl    edi,0x5
c0013d94:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013d98:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013d9b:	75 6b                	jne    c0013e08 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013d9d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013da0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013da4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013da7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013dab:	52                   	push   edx
c0013dac:	31 d2                	xor    edx,edx
c0013dae:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013db1:	52                   	push   edx
c0013db2:	50                   	push   eax
c0013db3:	56                   	push   esi
c0013db4:	e8 91 75 ff ff       	call   c000b34a <File::seek(unsigned long long)>
c0013db9:	83 c4 10             	add    esp,0x10
c0013dbc:	85 c0                	test   eax,eax
c0013dbe:	74 17                	je     c0013dd7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0013dc0:	83 ec 0c             	sub    esp,0xc
c0013dc3:	68 b1 17 02 c0       	push   0xc00217b1
c0013dc8:	e8 aa 6b ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0013dcd:	83 c4 10             	add    esp,0x10
c0013dd0:	31 c0                	xor    eax,eax
c0013dd2:	e9 87 00 00 00       	jmp    c0013e5e <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0013dd7:	83 ec 0c             	sub    esp,0xc
c0013dda:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013ddd:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013de0:	50                   	push   eax
c0013de1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013de5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013de9:	56                   	push   esi
c0013dea:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013dee:	e8 d3 fb ff ff       	call   c00139c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013df3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013df7:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0013dfb:	83 c4 20             	add    esp,0x20
c0013dfe:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0013e02:	73 04                	jae    c0013e08 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013e04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013e08:	45                   	inc    ebp
c0013e09:	e9 7a ff ff ff       	jmp    c0013d88 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013e0e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0013e12:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013e16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013e1a:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0013e20:	83 ec 0c             	sub    esp,0xc
c0013e23:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0013e29:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013e2e:	05 00 10 00 00       	add    eax,0x1000
c0013e33:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013e36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e3a:	e8 7f 3c ff ff       	call   c0007abe <free>
c0013e3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e42:	e8 77 3c ff ff       	call   c0007abe <free>
c0013e47:	58                   	pop    eax
c0013e48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e4c:	e8 6d 3c ff ff       	call   c0007abe <free>
c0013e51:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e54:	e8 91 74 ff ff       	call   c000b2ea <File::close()>
c0013e59:	83 c4 10             	add    esp,0x10
c0013e5c:	b0 01                	mov    al,0x1
c0013e5e:	83 c4 3c             	add    esp,0x3c
c0013e61:	5b                   	pop    ebx
c0013e62:	5e                   	pop    esi
c0013e63:	5f                   	pop    edi
c0013e64:	5d                   	pop    ebp
c0013e65:	c3                   	ret    

c0013e66 <Thr::runtimeReferenceHelper()>:
c0013e66:	83 ec 18             	sub    esp,0x18
c0013e69:	68 b9 17 02 c0       	push   0xc00217b9
c0013e6e:	e8 04 6b ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0013e73:	fa                   	cli    
c0013e74:	83 c4 10             	add    esp,0x10
c0013e77:	eb fe                	jmp    c0013e77 <Thr::runtimeReferenceHelper()+0x11>

c0013e79 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013e79:	57                   	push   edi
c0013e7a:	56                   	push   esi
c0013e7b:	53                   	push   ebx
c0013e7c:	31 db                	xor    ebx,ebx
c0013e7e:	39 1d 40 91 02 c0    	cmp    DWORD PTR ds:0xc0029140,ebx
c0013e84:	7e 3c                	jle    c0013ec2 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013e86:	8b 34 9d c0 90 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd6f40]
c0013e8d:	31 ff                	xor    edi,edi
c0013e8f:	39 3c 9d c0 8f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd7040],edi
c0013e96:	7e 27                	jle    c0013ebf <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013e98:	50                   	push   eax
c0013e99:	50                   	push   eax
c0013e9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e9e:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ea0:	03 04 9d 40 90 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6fc0]
c0013ea7:	50                   	push   eax
c0013ea8:	e8 a3 c8 fe ff       	call   c0000750 <strcmp>
c0013ead:	83 c4 10             	add    esp,0x10
c0013eb0:	85 c0                	test   eax,eax
c0013eb2:	75 05                	jne    c0013eb9 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013eb4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013eb7:	eb 0b                	jmp    c0013ec4 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013eb9:	83 c6 10             	add    esi,0x10
c0013ebc:	47                   	inc    edi
c0013ebd:	eb d0                	jmp    c0013e8f <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013ebf:	43                   	inc    ebx
c0013ec0:	eb bc                	jmp    c0013e7e <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013ec2:	31 c0                	xor    eax,eax
c0013ec4:	5b                   	pop    ebx
c0013ec5:	5e                   	pop    esi
c0013ec6:	5f                   	pop    edi
c0013ec7:	c3                   	ret    

c0013ec8 <Thr::loadKernelSymbolTable(char const*)>:
c0013ec8:	55                   	push   ebp
c0013ec9:	57                   	push   edi
c0013eca:	56                   	push   esi
c0013ecb:	53                   	push   ebx
c0013ecc:	83 ec 68             	sub    esp,0x68
c0013ecf:	8b 35 90 91 02 c0    	mov    esi,DWORD PTR ds:0xc0029190
c0013ed5:	68 14 01 00 00       	push   0x114
c0013eda:	e8 cf 3b ff ff       	call   c0007aae <malloc>
c0013edf:	83 c4 0c             	add    esp,0xc
c0013ee2:	89 c3                	mov    ebx,eax
c0013ee4:	56                   	push   esi
c0013ee5:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013ee9:	50                   	push   eax
c0013eea:	e8 e1 72 ff ff       	call   c000b1d0 <File::File(char const*, Process*)>
c0013eef:	5e                   	pop    esi
c0013ef0:	5f                   	pop    edi
c0013ef1:	6a 01                	push   0x1
c0013ef3:	53                   	push   ebx
c0013ef4:	e8 93 73 ff ff       	call   c000b28c <File::open(FileOpenMode)>
c0013ef9:	83 c4 10             	add    esp,0x10
c0013efc:	85 c0                	test   eax,eax
c0013efe:	74 0a                	je     c0013f0a <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013f00:	83 ec 0c             	sub    esp,0xc
c0013f03:	68 db 17 02 c0       	push   0xc00217db
c0013f08:	eb 34                	jmp    c0013f3e <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013f0a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013f12:	83 ec 0c             	sub    esp,0xc
c0013f15:	6a 34                	push   0x34
c0013f17:	e8 92 3b ff ff       	call   c0007aae <malloc>
c0013f1c:	59                   	pop    ecx
c0013f1d:	89 c7                	mov    edi,eax
c0013f1f:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013f23:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f25:	56                   	push   esi
c0013f26:	57                   	push   edi
c0013f27:	6a 00                	push   0x0
c0013f29:	6a 34                	push   0x34
c0013f2b:	53                   	push   ebx
c0013f2c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013f2f:	83 c4 20             	add    esp,0x20
c0013f32:	85 c0                	test   eax,eax
c0013f34:	74 17                	je     c0013f4d <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013f36:	83 ec 0c             	sub    esp,0xc
c0013f39:	68 f2 17 02 c0       	push   0xc00217f2
c0013f3e:	e8 98 cc ff ff       	call   c0010bdb <KePanic(char const*)>
c0013f43:	83 c4 10             	add    esp,0x10
c0013f46:	31 c0                	xor    eax,eax
c0013f48:	e9 31 02 00 00       	jmp    c001417e <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013f4d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013f53:	75 e1                	jne    c0013f36 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013f55:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013f58:	85 c0                	test   eax,eax
c0013f5a:	74 da                	je     c0013f36 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013f5c:	52                   	push   edx
c0013f5d:	31 d2                	xor    edx,edx
c0013f5f:	52                   	push   edx
c0013f60:	50                   	push   eax
c0013f61:	53                   	push   ebx
c0013f62:	e8 e3 73 ff ff       	call   c000b34a <File::seek(unsigned long long)>
c0013f67:	83 c4 10             	add    esp,0x10
c0013f6a:	85 c0                	test   eax,eax
c0013f6c:	75 c8                	jne    c0013f36 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013f6e:	83 ec 0c             	sub    esp,0xc
c0013f71:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f75:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f79:	31 ed                	xor    ebp,ebp
c0013f7b:	0f af c2             	imul   eax,edx
c0013f7e:	50                   	push   eax
c0013f7f:	e8 2a 3b ff ff       	call   c0007aae <malloc>
c0013f84:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013f86:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f8a:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f8d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f91:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f95:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f99:	0f af c2             	imul   eax,edx
c0013f9c:	99                   	cdq    
c0013f9d:	52                   	push   edx
c0013f9e:	50                   	push   eax
c0013f9f:	53                   	push   ebx
c0013fa0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013fa3:	83 c4 20             	add    esp,0x20
c0013fa6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013fae:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013fb6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013fbe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013fc6:	0f b7 f5             	movzx  esi,bp
c0013fc9:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013fcd:	0f 83 a7 00 00 00    	jae    c001407a <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013fd3:	6b f6 28             	imul   esi,esi,0x28
c0013fd6:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013fda:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013fdd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013fe1:	50                   	push   eax
c0013fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013fe6:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013fea:	8b 16                	mov    edx,DWORD PTR [esi]
c0013fec:	6b c0 28             	imul   eax,eax,0x28
c0013fef:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013ff3:	89 d0                	mov    eax,edx
c0013ff5:	31 d2                	xor    edx,edx
c0013ff7:	52                   	push   edx
c0013ff8:	50                   	push   eax
c0013ff9:	53                   	push   ebx
c0013ffa:	e8 4b 73 ff ff       	call   c000b34a <File::seek(unsigned long long)>
c0013fff:	83 c4 0c             	add    esp,0xc
c0014002:	6a 20                	push   0x20
c0014004:	6a 00                	push   0x0
c0014006:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001400a:	52                   	push   edx
c001400b:	e8 e0 c4 fe ff       	call   c00004f0 <memset>
c0014010:	58                   	pop    eax
c0014011:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014013:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014017:	51                   	push   ecx
c0014018:	8d 54 24 40          	lea    edx,[esp+0x40]
c001401c:	52                   	push   edx
c001401d:	6a 00                	push   0x0
c001401f:	6a 1f                	push   0x1f
c0014021:	53                   	push   ebx
c0014022:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014025:	83 c4 18             	add    esp,0x18
c0014028:	68 09 18 02 c0       	push   0xc0021809
c001402d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014031:	52                   	push   edx
c0014032:	e8 19 c7 fe ff       	call   c0000750 <strcmp>
c0014037:	83 c4 10             	add    esp,0x10
c001403a:	85 c0                	test   eax,eax
c001403c:	75 0f                	jne    c001404d <Thr::loadKernelSymbolTable(char const*)+0x185>
c001403e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014041:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014045:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014049:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001404d:	50                   	push   eax
c001404e:	50                   	push   eax
c001404f:	68 11 18 02 c0       	push   0xc0021811
c0014054:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014058:	50                   	push   eax
c0014059:	e8 f2 c6 fe ff       	call   c0000750 <strcmp>
c001405e:	83 c4 10             	add    esp,0x10
c0014061:	85 c0                	test   eax,eax
c0014063:	75 0f                	jne    c0014074 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014065:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014068:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001406c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014070:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014074:	45                   	inc    ebp
c0014075:	e9 4c ff ff ff       	jmp    c0013fc6 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001407a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001407f:	75 10                	jne    c0014091 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014081:	83 ec 0c             	sub    esp,0xc
c0014084:	68 19 18 02 c0       	push   0xc0021819
c0014089:	e8 4d cb ff ff       	call   c0010bdb <KePanic(char const*)>
c001408e:	83 c4 10             	add    esp,0x10
c0014091:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014096:	75 10                	jne    c00140a8 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014098:	83 ec 0c             	sub    esp,0xc
c001409b:	68 19 18 02 c0       	push   0xc0021819
c00140a0:	e8 36 cb ff ff       	call   c0010bdb <KePanic(char const*)>
c00140a5:	83 c4 10             	add    esp,0x10
c00140a8:	31 d2                	xor    edx,edx
c00140aa:	50                   	push   eax
c00140ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140af:	52                   	push   edx
c00140b0:	50                   	push   eax
c00140b1:	53                   	push   ebx
c00140b2:	e8 93 72 ff ff       	call   c000b34a <File::seek(unsigned long long)>
c00140b7:	5a                   	pop    edx
c00140b8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00140bc:	e8 ed 39 ff ff       	call   c0007aae <malloc>
c00140c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00140c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00140c9:	31 c9                	xor    ecx,ecx
c00140cb:	5e                   	pop    esi
c00140cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140ce:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00140d2:	55                   	push   ebp
c00140d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140d7:	51                   	push   ecx
c00140d8:	52                   	push   edx
c00140d9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00140dd:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00140e1:	53                   	push   ebx
c00140e2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140e5:	83 c4 14             	add    esp,0x14
c00140e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00140ec:	e8 bd 39 ff ff       	call   c0007aae <malloc>
c00140f1:	89 c6                	mov    esi,eax
c00140f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140f5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00140f8:	56                   	push   esi
c00140f9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00140fd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014101:	51                   	push   ecx
c0014102:	52                   	push   edx
c0014103:	53                   	push   ebx
c0014104:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014107:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001410b:	8b 15 40 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029140
c0014111:	83 c4 1c             	add    esp,0x1c
c0014114:	c1 e8 04             	shr    eax,0x4
c0014117:	89 04 95 c0 8f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7040],eax
c001411e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014122:	31 d2                	xor    edx,edx
c0014124:	52                   	push   edx
c0014125:	50                   	push   eax
c0014126:	53                   	push   ebx
c0014127:	e8 1e 72 ff ff       	call   c000b34a <File::seek(unsigned long long)>
c001412c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001412e:	31 d2                	xor    edx,edx
c0014130:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014133:	56                   	push   esi
c0014134:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014138:	52                   	push   edx
c0014139:	50                   	push   eax
c001413a:	53                   	push   ebx
c001413b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001413e:	83 c4 14             	add    esp,0x14
c0014141:	53                   	push   ebx
c0014142:	e8 a3 71 ff ff       	call   c000b2ea <File::close()>
c0014147:	5d                   	pop    ebp
c0014148:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001414c:	e8 6d 39 ff ff       	call   c0007abe <free>
c0014151:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014154:	e8 65 39 ff ff       	call   c0007abe <free>
c0014159:	a1 40 91 02 c0       	mov    eax,ds:0xc0029140
c001415e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014162:	8d 50 01             	lea    edx,[eax+0x1]
c0014165:	89 0c 85 c0 90 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6f40],ecx
c001416c:	89 34 85 40 90 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6fc0],esi
c0014173:	89 15 40 91 02 c0    	mov    DWORD PTR ds:0xc0029140,edx
c0014179:	83 c4 10             	add    esp,0x10
c001417c:	b0 01                	mov    al,0x1
c001417e:	83 c4 5c             	add    esp,0x5c
c0014181:	5b                   	pop    ebx
c0014182:	5e                   	pop    esi
c0014183:	5f                   	pop    edi
c0014184:	5d                   	pop    ebp
c0014185:	c3                   	ret    

c0014186 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014186:	55                   	push   ebp
c0014187:	57                   	push   edi
c0014188:	56                   	push   esi
c0014189:	53                   	push   ebx
c001418a:	81 ec 68 03 00 00    	sub    esp,0x368
c0014190:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014197:	8b 1d 90 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029190
c001419d:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00141a1:	68 14 01 00 00       	push   0x114
c00141a6:	e8 03 39 ff ff       	call   c0007aae <malloc>
c00141ab:	83 c4 0c             	add    esp,0xc
c00141ae:	89 c5                	mov    ebp,eax
c00141b0:	53                   	push   ebx
c00141b1:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00141b8:	50                   	push   eax
c00141b9:	e8 12 70 ff ff       	call   c000b1d0 <File::File(char const*, Process*)>
c00141be:	5e                   	pop    esi
c00141bf:	5f                   	pop    edi
c00141c0:	6a 01                	push   0x1
c00141c2:	55                   	push   ebp
c00141c3:	e8 c4 70 ff ff       	call   c000b28c <File::open(FileOpenMode)>
c00141c8:	83 c4 10             	add    esp,0x10
c00141cb:	85 c0                	test   eax,eax
c00141cd:	0f 85 d5 06 00 00    	jne    c00148a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c00141d3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00141db:	83 ec 0c             	sub    esp,0xc
c00141de:	6a 34                	push   0x34
c00141e0:	e8 c9 38 ff ff       	call   c0007aae <malloc>
c00141e5:	5b                   	pop    ebx
c00141e6:	89 c7                	mov    edi,eax
c00141e8:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00141ec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00141ef:	53                   	push   ebx
c00141f0:	57                   	push   edi
c00141f1:	6a 00                	push   0x0
c00141f3:	6a 34                	push   0x34
c00141f5:	55                   	push   ebp
c00141f6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00141f9:	83 c4 20             	add    esp,0x20
c00141fc:	85 c0                	test   eax,eax
c00141fe:	0f 85 a4 06 00 00    	jne    c00148a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0014204:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001420a:	0f 85 98 06 00 00    	jne    c00148a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0014210:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014213:	85 c0                	test   eax,eax
c0014215:	0f 84 8d 06 00 00    	je     c00148a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c001421b:	31 d2                	xor    edx,edx
c001421d:	51                   	push   ecx
c001421e:	52                   	push   edx
c001421f:	50                   	push   eax
c0014220:	55                   	push   ebp
c0014221:	e8 24 71 ff ff       	call   c000b34a <File::seek(unsigned long long)>
c0014226:	83 c4 10             	add    esp,0x10
c0014229:	85 c0                	test   eax,eax
c001422b:	0f 85 77 06 00 00    	jne    c00148a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0014231:	83 ec 0c             	sub    esp,0xc
c0014234:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014237:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001423b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001423f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014243:	0f af c2             	imul   eax,edx
c0014246:	50                   	push   eax
c0014247:	e8 62 38 ff ff       	call   c0007aae <malloc>
c001424c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001424f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014253:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014256:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001425a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001425e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014262:	0f af c2             	imul   eax,edx
c0014265:	99                   	cdq    
c0014266:	52                   	push   edx
c0014267:	50                   	push   eax
c0014268:	55                   	push   ebp
c0014269:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001426c:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001426f:	83 c4 20             	add    esp,0x20
c0014272:	85 c0                	test   eax,eax
c0014274:	0f 84 2e 06 00 00    	je     c00148a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c001427a:	52                   	push   edx
c001427b:	31 d2                	xor    edx,edx
c001427d:	52                   	push   edx
c001427e:	50                   	push   eax
c001427f:	55                   	push   ebp
c0014280:	e8 c5 70 ff ff       	call   c000b34a <File::seek(unsigned long long)>
c0014285:	83 c4 10             	add    esp,0x10
c0014288:	85 c0                	test   eax,eax
c001428a:	0f 85 18 06 00 00    	jne    c00148a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0014290:	83 ec 0c             	sub    esp,0xc
c0014293:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014297:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001429b:	31 f6                	xor    esi,esi
c001429d:	0f af c2             	imul   eax,edx
c00142a0:	50                   	push   eax
c00142a1:	e8 08 38 ff ff       	call   c0007aae <malloc>
c00142a6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00142a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00142ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142b4:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00142b8:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00142bc:	0f af c2             	imul   eax,edx
c00142bf:	99                   	cdq    
c00142c0:	52                   	push   edx
c00142c1:	50                   	push   eax
c00142c2:	55                   	push   ebp
c00142c3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00142c6:	83 c4 20             	add    esp,0x20
c00142c9:	0f b7 de             	movzx  ebx,si
c00142cc:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c00142d0:	0f 83 85 00 00 00    	jae    c001435b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d5>
c00142d6:	c1 e3 05             	shl    ebx,0x5
c00142d9:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c00142dd:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00142e0:	75 73                	jne    c0014355 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1cf>
c00142e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00142e5:	31 d2                	xor    edx,edx
c00142e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00142ea:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00142ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00142f1:	50                   	push   eax
c00142f2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00142f5:	52                   	push   edx
c00142f6:	50                   	push   eax
c00142f7:	55                   	push   ebp
c00142f8:	e8 4d 70 ff ff       	call   c000b34a <File::seek(unsigned long long)>
c00142fd:	83 c4 10             	add    esp,0x10
c0014300:	85 c0                	test   eax,eax
c0014302:	0f 85 a0 05 00 00    	jne    c00148a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0014308:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001430f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014312:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014316:	31 d2                	xor    edx,edx
c0014318:	03 04 24             	add    eax,DWORD PTR [esp]
c001431b:	83 ec 0c             	sub    esp,0xc
c001431e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014322:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014329:	50                   	push   eax
c001432a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001432e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014332:	52                   	push   edx
c0014333:	50                   	push   eax
c0014334:	55                   	push   ebp
c0014335:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014338:	83 c4 1c             	add    esp,0x1c
c001433b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001433e:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014341:	50                   	push   eax
c0014342:	6a 00                	push   0x0
c0014344:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014348:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001434c:	50                   	push   eax
c001434d:	e8 9e c1 fe ff       	call   c00004f0 <memset>
c0014352:	83 c4 10             	add    esp,0x10
c0014355:	46                   	inc    esi
c0014356:	e9 6e ff ff ff       	jmp    c00142c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001435b:	31 db                	xor    ebx,ebx
c001435d:	50                   	push   eax
c001435e:	68 00 01 00 00       	push   0x100
c0014363:	6a 00                	push   0x0
c0014365:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014369:	50                   	push   eax
c001436a:	e8 81 c1 fe ff       	call   c00004f0 <memset>
c001436f:	83 c4 0c             	add    esp,0xc
c0014372:	68 00 01 00 00       	push   0x100
c0014377:	6a 00                	push   0x0
c0014379:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014380:	50                   	push   eax
c0014381:	e8 6a c1 fe ff       	call   c00004f0 <memset>
c0014386:	83 c4 10             	add    esp,0x10
c0014389:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014390:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014398:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00143a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00143a8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00143b0:	0f b7 f3             	movzx  esi,bx
c00143b3:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c00143b7:	0f 83 27 01 00 00    	jae    c00144e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x35e>
c00143bd:	6b f6 28             	imul   esi,esi,0x28
c00143c0:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c00143c4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00143c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00143cb:	50                   	push   eax
c00143cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00143d0:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00143d4:	8b 06                	mov    eax,DWORD PTR [esi]
c00143d6:	6b d2 28             	imul   edx,edx,0x28
c00143d9:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00143dd:	31 d2                	xor    edx,edx
c00143df:	52                   	push   edx
c00143e0:	50                   	push   eax
c00143e1:	55                   	push   ebp
c00143e2:	e8 63 6f ff ff       	call   c000b34a <File::seek(unsigned long long)>
c00143e7:	83 c4 0c             	add    esp,0xc
c00143ea:	6a 20                	push   0x20
c00143ec:	6a 00                	push   0x0
c00143ee:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00143f5:	51                   	push   ecx
c00143f6:	e8 f5 c0 fe ff       	call   c00004f0 <memset>
c00143fb:	58                   	pop    eax
c00143fc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00143ff:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014403:	52                   	push   edx
c0014404:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001440b:	51                   	push   ecx
c001440c:	6a 00                	push   0x0
c001440e:	6a 1f                	push   0x1f
c0014410:	55                   	push   ebp
c0014411:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014414:	83 c4 1c             	add    esp,0x1c
c0014417:	6a 09                	push   0x9
c0014419:	68 33 18 02 c0       	push   0xc0021833
c001441e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014425:	51                   	push   ecx
c0014426:	e8 55 bf fe ff       	call   c0000380 <memcmp>
c001442b:	83 c4 10             	add    esp,0x10
c001442e:	85 c0                	test   eax,eax
c0014430:	75 1e                	jne    c0014450 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2ca>
c0014432:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014435:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014439:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001443d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0014440:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014443:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001444a:	89 d0                	mov    eax,edx
c001444c:	40                   	inc    eax
c001444d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014450:	51                   	push   ecx
c0014451:	6a 09                	push   0x9
c0014453:	68 3d 18 02 c0       	push   0xc002183d
c0014458:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001445f:	50                   	push   eax
c0014460:	e8 1b bf fe ff       	call   c0000380 <memcmp>
c0014465:	83 c4 10             	add    esp,0x10
c0014468:	85 c0                	test   eax,eax
c001446a:	75 1e                	jne    c001448a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x304>
c001446c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001446f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014473:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014477:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001447a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001447d:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014484:	89 d0                	mov    eax,edx
c0014486:	40                   	inc    eax
c0014487:	89 04 24             	mov    DWORD PTR [esp],eax
c001448a:	52                   	push   edx
c001448b:	52                   	push   edx
c001448c:	68 09 18 02 c0       	push   0xc0021809
c0014491:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014498:	50                   	push   eax
c0014499:	e8 b2 c2 fe ff       	call   c0000750 <strcmp>
c001449e:	83 c4 10             	add    esp,0x10
c00144a1:	85 c0                	test   eax,eax
c00144a3:	75 0f                	jne    c00144b4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32e>
c00144a5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00144a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00144ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00144b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144b4:	50                   	push   eax
c00144b5:	50                   	push   eax
c00144b6:	68 11 18 02 c0       	push   0xc0021811
c00144bb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00144c2:	50                   	push   eax
c00144c3:	e8 88 c2 fe ff       	call   c0000750 <strcmp>
c00144c8:	83 c4 10             	add    esp,0x10
c00144cb:	85 c0                	test   eax,eax
c00144cd:	75 0f                	jne    c00144de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x358>
c00144cf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00144d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00144d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00144da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00144de:	43                   	inc    ebx
c00144df:	e9 cc fe ff ff       	jmp    c00143b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22a>
c00144e4:	31 d2                	xor    edx,edx
c00144e6:	50                   	push   eax
c00144e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00144eb:	52                   	push   edx
c00144ec:	50                   	push   eax
c00144ed:	55                   	push   ebp
c00144ee:	e8 57 6e ff ff       	call   c000b34a <File::seek(unsigned long long)>
c00144f3:	58                   	pop    eax
c00144f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144f8:	e8 b1 35 ff ff       	call   c0007aae <malloc>
c00144fd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014500:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014504:	31 d2                	xor    edx,edx
c0014506:	58                   	pop    eax
c0014507:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001450b:	53                   	push   ebx
c001450c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014510:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014514:	52                   	push   edx
c0014515:	50                   	push   eax
c0014516:	55                   	push   ebp
c0014517:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001451a:	83 c4 14             	add    esp,0x14
c001451d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014521:	e8 88 35 ff ff       	call   c0007aae <malloc>
c0014526:	31 d2                	xor    edx,edx
c0014528:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001452c:	83 c4 0c             	add    esp,0xc
c001452f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014533:	52                   	push   edx
c0014534:	50                   	push   eax
c0014535:	55                   	push   ebp
c0014536:	e8 0f 6e ff ff       	call   c000b34a <File::seek(unsigned long long)>
c001453b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001453e:	31 d2                	xor    edx,edx
c0014540:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014543:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014547:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001454b:	52                   	push   edx
c001454c:	50                   	push   eax
c001454d:	55                   	push   ebp
c001454e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014551:	83 c4 20             	add    esp,0x20
c0014554:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0014559:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014561:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014565:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014569:	39 34 24             	cmp    DWORD PTR [esp],esi
c001456c:	0f 84 3a 03 00 00    	je     c00148ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x726>
c0014572:	8b 84 b4 50 01 00 00 	mov    eax,DWORD PTR [esp+esi*4+0x150]
c0014579:	31 d2                	xor    edx,edx
c001457b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001457f:	c1 e8 03             	shr    eax,0x3
c0014582:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0014586:	56                   	push   esi
c0014587:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001458b:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001458f:	52                   	push   edx
c0014590:	50                   	push   eax
c0014591:	55                   	push   ebp
c0014592:	e8 b3 6d ff ff       	call   c000b34a <File::seek(unsigned long long)>
c0014597:	58                   	pop    eax
c0014598:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001459c:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00145a3:	e8 06 35 ff ff       	call   c0007aae <malloc>
c00145a8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00145ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00145af:	31 d2                	xor    edx,edx
c00145b1:	58                   	pop    eax
c00145b2:	8d 44 24 58          	lea    eax,[esp+0x58]
c00145b6:	50                   	push   eax
c00145b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00145bf:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00145c6:	52                   	push   edx
c00145c7:	50                   	push   eax
c00145c8:	55                   	push   ebp
c00145c9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00145cc:	83 c4 20             	add    esp,0x20
c00145cf:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00145d7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00145db:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00145df:	0f 8d ab 02 00 00    	jge    c0014890 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x70a>
c00145e5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00145e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00145ed:	83 ec 0c             	sub    esp,0xc
c00145f0:	8b 04 f0             	mov    eax,DWORD PTR [eax+esi*8]
c00145f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00145f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145fb:	8b 44 f0 04          	mov    eax,DWORD PTR [eax+esi*8+0x4]
c00145ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014603:	c1 e8 08             	shr    eax,0x8
c0014606:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001460a:	89 c3                	mov    ebx,eax
c001460c:	c1 e3 04             	shl    ebx,0x4
c001460f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0014613:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0014616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001461a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001461e:	52                   	push   edx
c001461f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014623:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0014627:	03 03                	add    eax,DWORD PTR [ebx]
c0014629:	50                   	push   eax
c001462a:	68 47 18 02 c0       	push   0xc0021847
c001462f:	e8 43 63 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0014634:	83 c4 20             	add    esp,0x20
c0014637:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001463b:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014640:	85 d2                	test   edx,edx
c0014642:	0f 85 a6 00 00 00    	jne    c00146ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x568>
c0014648:	83 ec 0c             	sub    esp,0xc
c001464b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001464f:	03 03                	add    eax,DWORD PTR [ebx]
c0014651:	50                   	push   eax
c0014652:	e8 22 f8 ff ff       	call   c0013e79 <Thr::getAddressOfKernelSymbol(char const*)>
c0014657:	83 c4 10             	add    esp,0x10
c001465a:	89 c2                	mov    edx,eax
c001465c:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0014661:	85 c0                	test   eax,eax
c0014663:	0f 85 85 00 00 00    	jne    c00146ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x568>
c0014669:	83 ec 0c             	sub    esp,0xc
c001466c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014670:	03 03                	add    eax,DWORD PTR [ebx]
c0014672:	50                   	push   eax
c0014673:	e8 50 c7 ff ff       	call   c0010dc8 <KeResolveCompatibilitySymbol(char*)>
c0014678:	83 c4 10             	add    esp,0x10
c001467b:	89 c2                	mov    edx,eax
c001467d:	85 c0                	test   eax,eax
c001467f:	75 6d                	jne    c00146ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x568>
c0014681:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014685:	51                   	push   ecx
c0014686:	51                   	push   ecx
c0014687:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001468b:	03 03                	add    eax,DWORD PTR [ebx]
c001468d:	50                   	push   eax
c001468e:	68 79 18 02 c0       	push   0xc0021879
c0014693:	e8 df 62 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0014698:	5e                   	pop    esi
c0014699:	58                   	pop    eax
c001469a:	68 93 18 02 c0       	push   0xc0021893
c001469f:	8d b4 24 5c 02 00 00 	lea    esi,[esp+0x25c]
c00146a6:	56                   	push   esi
c00146a7:	e8 94 bf fe ff       	call   c0000640 <strcpy>
c00146ac:	58                   	pop    eax
c00146ad:	5a                   	pop    edx
c00146ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146b2:	03 03                	add    eax,DWORD PTR [ebx]
c00146b4:	50                   	push   eax
c00146b5:	56                   	push   esi
c00146b6:	e8 85 c1 fe ff       	call   c0000840 <strcat>
c00146bb:	59                   	pop    ecx
c00146bc:	5b                   	pop    ebx
c00146bd:	68 29 19 02 c0       	push   0xc0021929
c00146c2:	56                   	push   esi
c00146c3:	e8 78 c1 fe ff       	call   c0000840 <strcat>
c00146c8:	83 c4 10             	add    esp,0x10
c00146cb:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00146d0:	0f 84 74 01 00 00    	je     c001484a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c00146d6:	83 ec 0c             	sub    esp,0xc
c00146d9:	56                   	push   esi
c00146da:	e8 fc c4 ff ff       	call   c0010bdb <KePanic(char const*)>
c00146df:	83 c4 10             	add    esp,0x10
c00146e2:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00146e6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00146ea:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c00146ee:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00146f3:	83 f8 01             	cmp    eax,0x1
c00146f6:	0f 85 9b 00 00 00    	jne    c0014797 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x611>
c00146fc:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014703:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014707:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c001470b:	01 cb                	add    ebx,ecx
c001470d:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c0014711:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014719:	0f 94 c0             	sete   al
c001471c:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014724:	0f 94 c1             	sete   cl
c0014727:	89 ce                	mov    esi,ecx
c0014729:	09 c6                	or     esi,eax
c001472b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001472d:	89 f1                	mov    ecx,esi
c001472f:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014734:	0f b6 f1             	movzx  esi,cl
c0014737:	74 41                	je     c001477a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0014739:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001473c:	85 f6                	test   esi,esi
c001473e:	75 15                	jne    c0014755 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cf>
c0014740:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014744:	66 83 f8 0c          	cmp    ax,0xc
c0014748:	76 05                	jbe    c001474f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c9>
c001474a:	b8 0c 00 00 00       	mov    eax,0xc
c001474f:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014753:	76 3b                	jbe    c0014790 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60a>
c0014755:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0014759:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001475e:	0f 84 e6 00 00 00    	je     c001484a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c0014764:	83 ec 0c             	sub    esp,0xc
c0014767:	68 aa 18 02 c0       	push   0xc00218aa
c001476c:	e8 6a c4 ff ff       	call   c0010bdb <KePanic(char const*)>
c0014771:	83 c4 10             	add    esp,0x10
c0014774:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014778:	eb 16                	jmp    c0014790 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60a>
c001477a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001477e:	01 c1                	add    ecx,eax
c0014780:	85 f6                	test   esi,esi
c0014782:	75 0c                	jne    c0014790 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60a>
c0014784:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014788:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c001478c:	77 02                	ja     c0014790 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60a>
c001478e:	01 d1                	add    ecx,edx
c0014790:	89 0b                	mov    DWORD PTR [ebx],ecx
c0014792:	e9 f0 00 00 00       	jmp    c0014887 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x701>
c0014797:	83 f8 02             	cmp    eax,0x2
c001479a:	0f 85 81 00 00 00    	jne    c0014821 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x69b>
c00147a0:	8b 9c 24 74 03 00 00 	mov    ebx,DWORD PTR [esp+0x374]
c00147a7:	2b 5c 24 24          	sub    ebx,DWORD PTR [esp+0x24]
c00147ab:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c00147af:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00147b7:	74 21                	je     c00147da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x654>
c00147b9:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00147c1:	74 17                	je     c00147da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x654>
c00147c3:	0f b7 4f 30          	movzx  ecx,WORD PTR [edi+0x30]
c00147c7:	b8 0a 00 00 00       	mov    eax,0xa
c00147cc:	83 f9 0e             	cmp    ecx,0xe
c00147cf:	77 03                	ja     c00147d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64e>
c00147d1:	8d 41 fc             	lea    eax,[ecx-0x4]
c00147d4:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00147d8:	76 1f                	jbe    c00147f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x673>
c00147da:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00147de:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00147e3:	74 65                	je     c001484a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c00147e5:	83 ec 0c             	sub    esp,0xc
c00147e8:	68 c6 18 02 c0       	push   0xc00218c6
c00147ed:	e8 e9 c3 ff ff       	call   c0010bdb <KePanic(char const*)>
c00147f2:	83 c4 10             	add    esp,0x10
c00147f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00147f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147fb:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014800:	74 15                	je     c0014817 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x691>
c0014802:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014806:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001480d:	2b 4c 24 1c          	sub    ecx,DWORD PTR [esp+0x1c]
c0014811:	01 c1                	add    ecx,eax
c0014813:	01 ca                	add    edx,ecx
c0014815:	eb 06                	jmp    c001481d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x697>
c0014817:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001481b:	01 c2                	add    edx,eax
c001481d:	89 13                	mov    DWORD PTR [ebx],edx
c001481f:	eb 66                	jmp    c0014887 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x701>
c0014821:	52                   	push   edx
c0014822:	52                   	push   edx
c0014823:	50                   	push   eax
c0014824:	68 e2 18 02 c0       	push   0xc00218e2
c0014829:	e8 49 61 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c001482e:	83 c4 10             	add    esp,0x10
c0014831:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014836:	74 12                	je     c001484a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c0014838:	83 ec 0c             	sub    esp,0xc
c001483b:	68 ed 18 02 c0       	push   0xc00218ed
c0014840:	e8 96 c3 ff ff       	call   c0010bdb <KePanic(char const*)>
c0014845:	83 c4 10             	add    esp,0x10
c0014848:	eb 3d                	jmp    c0014887 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x701>
c001484a:	83 ec 0c             	sub    esp,0xc
c001484d:	55                   	push   ebp
c001484e:	e8 97 6a ff ff       	call   c000b2ea <File::close()>
c0014853:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014856:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014859:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001485c:	59                   	pop    ecx
c001485d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014861:	e8 58 32 ff ff       	call   c0007abe <free>
c0014866:	5b                   	pop    ebx
c0014867:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001486b:	e8 4e 32 ff ff       	call   c0007abe <free>
c0014870:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014873:	e8 46 32 ff ff       	call   c0007abe <free>
c0014878:	5e                   	pop    esi
c0014879:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001487d:	e8 3c 32 ff ff       	call   c0007abe <free>
c0014882:	83 c4 10             	add    esp,0x10
c0014885:	eb 21                	jmp    c00148a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x722>
c0014887:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001488b:	e9 47 fd ff ff       	jmp    c00145d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x451>
c0014890:	83 ec 0c             	sub    esp,0xc
c0014893:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014897:	e8 22 32 ff ff       	call   c0007abe <free>
c001489c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00148a0:	83 c4 10             	add    esp,0x10
c00148a3:	e9 bd fc ff ff       	jmp    c0014565 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00148a8:	31 c0                	xor    eax,eax
c00148aa:	eb 33                	jmp    c00148df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x759>
c00148ac:	83 ec 0c             	sub    esp,0xc
c00148af:	55                   	push   ebp
c00148b0:	e8 35 6a ff ff       	call   c000b2ea <File::close()>
c00148b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00148b8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00148bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00148be:	58                   	pop    eax
c00148bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00148c3:	e8 f6 31 ff ff       	call   c0007abe <free>
c00148c8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00148cb:	e8 ee 31 ff ff       	call   c0007abe <free>
c00148d0:	5a                   	pop    edx
c00148d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00148d5:	e8 e4 31 ff ff       	call   c0007abe <free>
c00148da:	83 c4 10             	add    esp,0x10
c00148dd:	b0 01                	mov    al,0x1
c00148df:	81 c4 5c 03 00 00    	add    esp,0x35c
c00148e5:	5b                   	pop    ebx
c00148e6:	5e                   	pop    esi
c00148e7:	5f                   	pop    edi
c00148e8:	5d                   	pop    ebp
c00148e9:	c3                   	ret    

c00148ea <Thr::getDriverBaseFromAddress(unsigned long)>:
c00148ea:	56                   	push   esi
c00148eb:	31 d2                	xor    edx,edx
c00148ed:	53                   	push   ebx
c00148ee:	8b 1d a0 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289a0
c00148f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148f8:	39 d3                	cmp    ebx,edx
c00148fa:	7e 1b                	jle    c0014917 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00148fc:	8b 04 95 c0 8b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7440]
c0014903:	39 c8                	cmp    eax,ecx
c0014905:	77 0d                	ja     c0014914 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014907:	8b 34 95 c0 89 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd7640]
c001490e:	01 c6                	add    esi,eax
c0014910:	39 ce                	cmp    esi,ecx
c0014912:	77 05                	ja     c0014919 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014914:	42                   	inc    edx
c0014915:	eb e1                	jmp    c00148f8 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014917:	31 c0                	xor    eax,eax
c0014919:	5b                   	pop    ebx
c001491a:	5e                   	pop    esi
c001491b:	c3                   	ret    

c001491c <Thr::getDriverNameFromAddress(unsigned long)>:
c001491c:	53                   	push   ebx
c001491d:	31 c0                	xor    eax,eax
c001491f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014923:	8b 1d a0 89 02 c0    	mov    ebx,DWORD PTR ds:0xc00289a0
c0014929:	39 c3                	cmp    ebx,eax
c001492b:	7e 22                	jle    c001494f <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001492d:	8b 14 85 c0 8b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7440]
c0014934:	39 ca                	cmp    edx,ecx
c0014936:	77 14                	ja     c001494c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014938:	03 14 85 c0 89 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd7640]
c001493f:	39 ca                	cmp    edx,ecx
c0014941:	76 09                	jbe    c001494c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014943:	8b 04 85 c0 8d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7240]
c001494a:	eb 05                	jmp    c0014951 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001494c:	40                   	inc    eax
c001494d:	eb da                	jmp    c0014929 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001494f:	31 c0                	xor    eax,eax
c0014951:	5b                   	pop    ebx
c0014952:	c3                   	ret    

c0014953 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0014953:	53                   	push   ebx
c0014954:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014958:	53                   	push   ebx
c0014959:	e8 8c ff ff ff       	call   c00148ea <Thr::getDriverBaseFromAddress(unsigned long)>
c001495e:	5a                   	pop    edx
c001495f:	31 d2                	xor    edx,edx
c0014961:	85 c0                	test   eax,eax
c0014963:	74 04                	je     c0014969 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0014965:	89 da                	mov    edx,ebx
c0014967:	29 c2                	sub    edx,eax
c0014969:	89 d0                	mov    eax,edx
c001496b:	5b                   	pop    ebx
c001496c:	c3                   	ret    

c001496d <Thr::loadDLL(char const*, bool)>:
c001496d:	55                   	push   ebp
c001496e:	57                   	push   edi
c001496f:	56                   	push   esi
c0014970:	53                   	push   ebx
c0014971:	81 ec 34 01 00 00    	sub    esp,0x134
c0014977:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001497e:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0014985:	56                   	push   esi
c0014986:	68 05 19 02 c0       	push   0xc0021905
c001498b:	e8 e7 5f ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0014990:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014997:	e8 12 31 ff ff       	call   c0007aae <malloc>
c001499c:	83 c4 0c             	add    esp,0xc
c001499f:	89 c3                	mov    ebx,eax
c00149a1:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c00149a7:	56                   	push   esi
c00149a8:	50                   	push   eax
c00149a9:	e8 22 68 ff ff       	call   c000b1d0 <File::File(char const*, Process*)>
c00149ae:	83 c4 10             	add    esp,0x10
c00149b1:	85 db                	test   ebx,ebx
c00149b3:	75 3c                	jne    c00149f1 <Thr::loadDLL(char const*, bool)+0x84>
c00149b5:	89 f8                	mov    eax,edi
c00149b7:	84 c0                	test   al,al
c00149b9:	0f 84 d2 01 00 00    	je     c0014b91 <Thr::loadDLL(char const*, bool)+0x224>
c00149bf:	55                   	push   ebp
c00149c0:	55                   	push   ebp
c00149c1:	68 16 19 02 c0       	push   0xc0021916
c00149c6:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00149ca:	55                   	push   ebp
c00149cb:	e8 70 bc fe ff       	call   c0000640 <strcpy>
c00149d0:	58                   	pop    eax
c00149d1:	5a                   	pop    edx
c00149d2:	56                   	push   esi
c00149d3:	55                   	push   ebp
c00149d4:	e8 67 be fe ff       	call   c0000840 <strcat>
c00149d9:	59                   	pop    ecx
c00149da:	58                   	pop    eax
c00149db:	68 29 19 02 c0       	push   0xc0021929
c00149e0:	55                   	push   ebp
c00149e1:	e8 5a be fe ff       	call   c0000840 <strcat>
c00149e6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00149e9:	e8 ed c1 ff ff       	call   c0010bdb <KePanic(char const*)>
c00149ee:	83 c4 10             	add    esp,0x10
c00149f1:	51                   	push   ecx
c00149f2:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00149f6:	50                   	push   eax
c00149f7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00149fb:	50                   	push   eax
c00149fc:	53                   	push   ebx
c00149fd:	e8 36 6b ff ff       	call   c000b538 <File::stat(unsigned long long*, bool*)>
c0014a02:	83 c4 10             	add    esp,0x10
c0014a05:	85 db                	test   ebx,ebx
c0014a07:	74 0c                	je     c0014a15 <Thr::loadDLL(char const*, bool)+0xa8>
c0014a09:	83 ec 0c             	sub    esp,0xc
c0014a0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a0e:	53                   	push   ebx
c0014a0f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014a12:	83 c4 10             	add    esp,0x10
c0014a15:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014a1a:	75 0a                	jne    c0014a26 <Thr::loadDLL(char const*, bool)+0xb9>
c0014a1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a20:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014a24:	75 3c                	jne    c0014a62 <Thr::loadDLL(char const*, bool)+0xf5>
c0014a26:	89 f8                	mov    eax,edi
c0014a28:	84 c0                	test   al,al
c0014a2a:	0f 84 49 01 00 00    	je     c0014b79 <Thr::loadDLL(char const*, bool)+0x20c>
c0014a30:	51                   	push   ecx
c0014a31:	51                   	push   ecx
c0014a32:	68 16 19 02 c0       	push   0xc0021916
c0014a37:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014a3b:	53                   	push   ebx
c0014a3c:	e8 ff bb fe ff       	call   c0000640 <strcpy>
c0014a41:	5d                   	pop    ebp
c0014a42:	58                   	pop    eax
c0014a43:	56                   	push   esi
c0014a44:	53                   	push   ebx
c0014a45:	e8 f6 bd fe ff       	call   c0000840 <strcat>
c0014a4a:	58                   	pop    eax
c0014a4b:	5a                   	pop    edx
c0014a4c:	68 29 19 02 c0       	push   0xc0021929
c0014a51:	53                   	push   ebx
c0014a52:	e8 e9 bd fe ff       	call   c0000840 <strcat>
c0014a57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a5a:	e8 7c c1 ff ff       	call   c0010bdb <KePanic(char const*)>
c0014a5f:	83 c4 10             	add    esp,0x10
c0014a62:	52                   	push   edx
c0014a63:	6a 03                	push   0x3
c0014a65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a69:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014a6d:	05 ff 0f 00 00       	add    eax,0xfff
c0014a72:	83 d2 00             	adc    edx,0x0
c0014a75:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014a79:	50                   	push   eax
c0014a7a:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0014a80:	e8 91 53 ff ff       	call   c0009e16 <VAS::allocatePages(int, int)>
c0014a85:	59                   	pop    ecx
c0014a86:	89 c3                	mov    ebx,eax
c0014a88:	5d                   	pop    ebp
c0014a89:	50                   	push   eax
c0014a8a:	68 52 00 02 c0       	push   0xc0020052
c0014a8f:	e8 e3 5e ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0014a94:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a97:	e8 d4 ba fe ff       	call   c0000570 <strlen>
c0014a9c:	8b 2d a0 89 02 c0    	mov    ebp,DWORD PTR ds:0xc00289a0
c0014aa2:	40                   	inc    eax
c0014aa3:	89 04 24             	mov    DWORD PTR [esp],eax
c0014aa6:	e8 03 30 ff ff       	call   c0007aae <malloc>
c0014aab:	89 04 ad c0 8d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd7240],eax
c0014ab2:	58                   	pop    eax
c0014ab3:	a1 a0 89 02 c0       	mov    eax,ds:0xc00289a0
c0014ab8:	5a                   	pop    edx
c0014ab9:	56                   	push   esi
c0014aba:	ff 34 85 c0 8d 02 c0 	push   DWORD PTR [eax*4-0x3ffd7240]
c0014ac1:	e8 7a bb fe ff       	call   c0000640 <strcpy>
c0014ac6:	a1 a0 89 02 c0       	mov    eax,ds:0xc00289a0
c0014acb:	8d 50 01             	lea    edx,[eax+0x1]
c0014ace:	89 1c 85 c0 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7440],ebx
c0014ad5:	89 15 a0 89 02 c0    	mov    DWORD PTR ds:0xc00289a0,edx
c0014adb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014adf:	83 c4 0c             	add    esp,0xc
c0014ae2:	89 14 85 c0 89 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7640],edx
c0014ae9:	6a 01                	push   0x1
c0014aeb:	53                   	push   ebx
c0014aec:	56                   	push   esi
c0014aed:	e8 94 f6 ff ff       	call   c0014186 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014af2:	83 c4 10             	add    esp,0x10
c0014af5:	0f b6 c0             	movzx  eax,al
c0014af8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014afc:	85 c0                	test   eax,eax
c0014afe:	0f 85 89 00 00 00    	jne    c0014b8d <Thr::loadDLL(char const*, bool)+0x220>
c0014b04:	89 f8                	mov    eax,edi
c0014b06:	84 c0                	test   al,al
c0014b08:	74 73                	je     c0014b7d <Thr::loadDLL(char const*, bool)+0x210>
c0014b0a:	83 ec 0c             	sub    esp,0xc
c0014b0d:	68 2b 19 02 c0       	push   0xc002192b
c0014b12:	e8 c4 c0 ff ff       	call   c0010bdb <KePanic(char const*)>
c0014b17:	83 c4 10             	add    esp,0x10
c0014b1a:	eb 61                	jmp    c0014b7d <Thr::loadDLL(char const*, bool)+0x210>
c0014b1c:	50                   	push   eax
c0014b1d:	50                   	push   eax
c0014b1e:	89 e8                	mov    eax,ebp
c0014b20:	c1 e0 0c             	shl    eax,0xc
c0014b23:	01 d8                	add    eax,ebx
c0014b25:	50                   	push   eax
c0014b26:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0014b2c:	e8 cd 4d ff ff       	call   c00098fe <VAS::getPageTableEntry(unsigned long)>
c0014b31:	83 c4 10             	add    esp,0x10
c0014b34:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b36:	a8 60                	test   al,0x60
c0014b38:	75 11                	jne    c0014b4b <Thr::loadDLL(char const*, bool)+0x1de>
c0014b3a:	83 ec 0c             	sub    esp,0xc
c0014b3d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014b42:	50                   	push   eax
c0014b43:	e8 01 32 ff ff       	call   c0007d49 <Phys::freePage(unsigned long)>
c0014b48:	83 c4 10             	add    esp,0x10
c0014b4b:	45                   	inc    ebp
c0014b4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014b54:	05 ff 0f 00 00       	add    eax,0xfff
c0014b59:	bf 00 00 00 00       	mov    edi,0x0
c0014b5e:	83 d2 00             	adc    edx,0x0
c0014b61:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014b65:	c1 ea 0c             	shr    edx,0xc
c0014b68:	39 c5                	cmp    ebp,eax
c0014b6a:	89 d1                	mov    ecx,edx
c0014b6c:	89 f8                	mov    eax,edi
c0014b6e:	19 c8                	sbb    eax,ecx
c0014b70:	72 aa                	jb     c0014b1c <Thr::loadDLL(char const*, bool)+0x1af>
c0014b72:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014b77:	75 18                	jne    c0014b91 <Thr::loadDLL(char const*, bool)+0x224>
c0014b79:	31 db                	xor    ebx,ebx
c0014b7b:	eb 14                	jmp    c0014b91 <Thr::loadDLL(char const*, bool)+0x224>
c0014b7d:	83 ec 0c             	sub    esp,0xc
c0014b80:	68 4a 19 02 c0       	push   0xc002194a
c0014b85:	e8 51 c0 ff ff       	call   c0010bdb <KePanic(char const*)>
c0014b8a:	83 c4 10             	add    esp,0x10
c0014b8d:	31 ed                	xor    ebp,ebp
c0014b8f:	eb bb                	jmp    c0014b4c <Thr::loadDLL(char const*, bool)+0x1df>
c0014b91:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014b97:	89 d8                	mov    eax,ebx
c0014b99:	5b                   	pop    ebx
c0014b9a:	5e                   	pop    esi
c0014b9b:	5f                   	pop    edi
c0014b9c:	5d                   	pop    ebp
c0014b9d:	c3                   	ret    

c0014b9e <Thr::executeDLL(unsigned long, void*)>:
c0014b9e:	56                   	push   esi
c0014b9f:	53                   	push   ebx
c0014ba0:	52                   	push   edx
c0014ba1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014ba5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014ba9:	85 db                	test   ebx,ebx
c0014bab:	75 10                	jne    c0014bbd <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014bad:	83 ec 0c             	sub    esp,0xc
c0014bb0:	68 66 19 02 c0       	push   0xc0021966
c0014bb5:	e8 21 c0 ff ff       	call   c0010bdb <KePanic(char const*)>
c0014bba:	83 c4 10             	add    esp,0x10
c0014bbd:	50                   	push   eax
c0014bbe:	50                   	push   eax
c0014bbf:	53                   	push   ebx
c0014bc0:	68 90 19 02 c0       	push   0xc0021990
c0014bc5:	e8 ad 5d ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0014bca:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014bce:	89 d8                	mov    eax,ebx
c0014bd0:	83 c4 14             	add    esp,0x14
c0014bd3:	5b                   	pop    ebx
c0014bd4:	5e                   	pop    esi
c0014bd5:	ff e0                	jmp    eax
c0014bd7:	90                   	nop

c0014bd8 <userModeEntryPoint(void*)>:
c0014bd8:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0014bdd:	83 e8 01             	sub    eax,0x1
c0014be0:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0014be5:	75 01                	jne    c0014be8 <userModeEntryPoint(void*)+0x10>
c0014be7:	fb                   	sti    
c0014be8:	fb                   	sti    
c0014be9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014bf1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014bf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bfb:	e9 3f b6 fe ff       	jmp    c000023f <goToUsermode>

c0014c00 <changeTSS>:
c0014c00:	83 ec 14             	sub    esp,0x14
c0014c03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c08:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014c0b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014c10:	c1 e2 15             	shl    edx,0x15
c0014c13:	29 d0                	sub    eax,edx
c0014c15:	50                   	push   eax
c0014c16:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0014c1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c21:	05 7c 11 00 00       	add    eax,0x117c
c0014c26:	50                   	push   eax
c0014c27:	e8 1c 43 ff ff       	call   c0008f48 <TSS::setESP(unsigned long)>
c0014c2c:	83 c4 1c             	add    esp,0x1c
c0014c2f:	c3                   	ret    

c0014c30 <switchToThread(ThreadControlBlock*)>:
c0014c30:	57                   	push   edi
c0014c31:	8b 0d 64 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029164
c0014c37:	56                   	push   esi
c0014c38:	85 c9                	test   ecx,ecx
c0014c3a:	53                   	push   ebx
c0014c3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014c3f:	0f 85 8b 00 00 00    	jne    c0014cd0 <switchToThread(ThreadControlBlock*)+0xa0>
c0014c45:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014c49:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014c4f:	74 7b                	je     c0014ccc <switchToThread(ThreadControlBlock*)+0x9c>
c0014c51:	b8 00 04 00 00       	mov    eax,0x400
c0014c56:	29 d0                	sub    eax,edx
c0014c58:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014c5b:	d1 f8                	sar    eax,1
c0014c5d:	01 d0                	add    eax,edx
c0014c5f:	90                   	nop
c0014c60:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014c63:	e8 1e 28 00 00       	call   c0017486 <HalQueryPerformanceCounter()>
c0014c68:	a3 a8 91 02 c0       	mov    ds:0xc00291a8,eax
c0014c6d:	89 15 ac 91 02 c0    	mov    DWORD PTR ds:0xc00291ac,edx
c0014c73:	89 c6                	mov    esi,eax
c0014c75:	89 d7                	mov    edi,edx
c0014c77:	2b 35 98 91 02 c0    	sub    esi,DWORD PTR ds:0xc0029198
c0014c7d:	a3 98 91 02 c0       	mov    ds:0xc0029198,eax
c0014c82:	1b 3d 9c 91 02 c0    	sbb    edi,DWORD PTR ds:0xc002919c
c0014c88:	89 35 a0 91 02 c0    	mov    DWORD PTR ds:0xc00291a0,esi
c0014c8e:	89 3d a4 91 02 c0    	mov    DWORD PTR ds:0xc00291a4,edi
c0014c94:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014c9a:	89 15 9c 91 02 c0    	mov    DWORD PTR ds:0xc002919c,edx
c0014ca0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014ca3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014ca6:	01 c6                	add    esi,eax
c0014ca8:	11 d7                	adc    edi,edx
c0014caa:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014cad:	83 ec 0c             	sub    esp,0xc
c0014cb0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014cb3:	53                   	push   ebx
c0014cb4:	e8 be b5 fe ff       	call   c0000277 <switchToThreadASM>
c0014cb9:	0f 20 c0             	mov    eax,cr0
c0014cbc:	83 c8 08             	or     eax,0x8
c0014cbf:	0f 22 c0             	mov    cr0,eax
c0014cc2:	83 c4 10             	add    esp,0x10
c0014cc5:	5b                   	pop    ebx
c0014cc6:	5e                   	pop    esi
c0014cc7:	5f                   	pop    edi
c0014cc8:	c3                   	ret    
c0014cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0014ccc:	31 c0                	xor    eax,eax
c0014cce:	eb 90                	jmp    c0014c60 <switchToThread(ThreadControlBlock*)+0x30>
c0014cd0:	5b                   	pop    ebx
c0014cd1:	c7 05 60 91 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x1
c0014cdb:	5e                   	pop    esi
c0014cdc:	5f                   	pop    edi
c0014cdd:	c3                   	ret    
c0014cde:	66 90                	xchg   ax,ax

c0014ce0 <Process::addArgs(char**)>:
c0014ce0:	57                   	push   edi
c0014ce1:	56                   	push   esi
c0014ce2:	53                   	push   ebx
c0014ce3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014ce7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0014ceb:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0014cf5:	85 ff                	test   edi,edi
c0014cf7:	74 4f                	je     c0014d48 <Process::addArgs(char**)+0x68>
c0014cf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0014cfb:	85 c0                	test   eax,eax
c0014cfd:	74 49                	je     c0014d48 <Process::addArgs(char**)+0x68>
c0014cff:	31 db                	xor    ebx,ebx
c0014d01:	8d 76 00             	lea    esi,[esi+0x0]
c0014d04:	83 ec 0c             	sub    esp,0xc
c0014d07:	50                   	push   eax
c0014d08:	e8 63 b8 fe ff       	call   c0000570 <strlen>
c0014d0d:	83 c0 01             	add    eax,0x1
c0014d10:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d13:	e8 96 2d ff ff       	call   c0007aae <malloc>
c0014d18:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0014d1f:	5a                   	pop    edx
c0014d20:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014d23:	59                   	pop    ecx
c0014d24:	83 c3 01             	add    ebx,0x1
c0014d27:	52                   	push   edx
c0014d28:	50                   	push   eax
c0014d29:	e8 12 b9 fe ff       	call   c0000640 <strcpy>
c0014d2e:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0014d34:	83 c4 10             	add    esp,0x10
c0014d37:	83 c1 01             	add    ecx,0x1
c0014d3a:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0014d40:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0014d43:	85 c0                	test   eax,eax
c0014d45:	75 bd                	jne    c0014d04 <Process::addArgs(char**)+0x24>
c0014d47:	90                   	nop
c0014d48:	5b                   	pop    ebx
c0014d49:	5e                   	pop    esi
c0014d4a:	5f                   	pop    edi
c0014d4b:	c3                   	ret    

c0014d4c <Process::Process(char const*, Process*, char**)>:
c0014d4c:	56                   	push   esi
c0014d4d:	53                   	push   ebx
c0014d4e:	83 ec 14             	sub    esp,0x14
c0014d51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d55:	05 0c 02 00 00       	add    eax,0x20c
c0014d5a:	bb 07 00 00 00       	mov    ebx,0x7
c0014d5f:	89 c6                	mov    esi,eax
c0014d61:	8d 76 00             	lea    esi,[esi+0x0]
c0014d64:	85 db                	test   ebx,ebx
c0014d66:	78 14                	js     c0014d7c <Process::Process(char const*, Process*, char**)+0x30>
c0014d68:	83 ec 0c             	sub    esp,0xc
c0014d6b:	56                   	push   esi
c0014d6c:	e8 77 a5 00 00       	call   c001f2e8 <ThreadControlBlock::ThreadControlBlock()>
c0014d71:	83 c4 10             	add    esp,0x10
c0014d74:	83 c6 5f             	add    esi,0x5f
c0014d77:	83 eb 01             	sub    ebx,0x1
c0014d7a:	eb e8                	jmp    c0014d64 <Process::Process(char const*, Process*, char**)+0x18>
c0014d7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d80:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d8b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014d92:	83 ec 0c             	sub    esp,0xc
c0014d95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d99:	e8 32 bc ff ff       	call   c00109d0 <KeNewProcessEnv(Process*)>
c0014d9e:	83 c4 10             	add    esp,0x10
c0014da1:	89 c2                	mov    edx,eax
c0014da3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014da7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014dad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014db1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014dba:	a1 c0 2b 02 c0       	mov    eax,ds:0xc0022bc0
c0014dbf:	8d 50 01             	lea    edx,[eax+0x1]
c0014dc2:	89 15 c0 2b 02 c0    	mov    DWORD PTR ds:0xc0022bc0,edx
c0014dc8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014dcc:	89 02                	mov    DWORD PTR [edx],eax
c0014dce:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014dd6:	83 ec 0c             	sub    esp,0xc
c0014dd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ddd:	e8 cc 2c ff ff       	call   c0007aae <malloc>
c0014de2:	83 c4 10             	add    esp,0x10
c0014de5:	89 c3                	mov    ebx,eax
c0014de7:	83 ec 08             	sub    esp,0x8
c0014dea:	6a 00                	push   0x0
c0014dec:	53                   	push   ebx
c0014ded:	e8 86 52 ff ff       	call   c000a078 <VAS::VAS(bool)>
c0014df2:	83 c4 10             	add    esp,0x10
c0014df5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014df9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014dff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e03:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014e0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e11:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014e15:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014e1b:	e8 d6 c1 ff ff       	call   c0010ff6 <KeInitSignals()>
c0014e20:	89 c2                	mov    edx,eax
c0014e22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e26:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014e2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e30:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014e36:	85 c0                	test   eax,eax
c0014e38:	74 42                	je     c0014e7c <Process::Process(char const*, Process*, char**)+0x130>
c0014e3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e3e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014e44:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014e4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e4e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014e54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e58:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014e5e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014e64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e68:	05 0c 01 00 00       	add    eax,0x10c
c0014e6d:	83 ec 08             	sub    esp,0x8
c0014e70:	52                   	push   edx
c0014e71:	50                   	push   eax
c0014e72:	e8 c9 b7 fe ff       	call   c0000640 <strcpy>
c0014e77:	83 c4 10             	add    esp,0x10
c0014e7a:	eb 64                	jmp    c0014ee0 <Process::Process(char const*, Process*, char**)+0x194>
c0014e7c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014e84:	83 ec 0c             	sub    esp,0xc
c0014e87:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014e8b:	e8 1e 2c ff ff       	call   c0007aae <malloc>
c0014e90:	83 c4 10             	add    esp,0x10
c0014e93:	89 c3                	mov    ebx,eax
c0014e95:	83 ec 08             	sub    esp,0x8
c0014e98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e9c:	53                   	push   ebx
c0014e9d:	e8 b6 3d ff ff       	call   c0008c58 <VgaText::VgaText(char const*)>
c0014ea2:	83 c4 10             	add    esp,0x10
c0014ea5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ea9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014eaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014eb3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014eb9:	83 ec 0c             	sub    esp,0xc
c0014ebc:	50                   	push   eax
c0014ebd:	e8 34 36 ff ff       	call   c00084f6 <addToTerminalCycle(VgaText*)>
c0014ec2:	83 c4 10             	add    esp,0x10
c0014ec5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ec9:	05 0c 01 00 00       	add    eax,0x10c
c0014ece:	83 ec 08             	sub    esp,0x8
c0014ed1:	68 af 19 02 c0       	push   0xc00219af
c0014ed6:	50                   	push   eax
c0014ed7:	e8 64 b7 fe ff       	call   c0000640 <strcpy>
c0014edc:	83 c4 10             	add    esp,0x10
c0014edf:	90                   	nop
c0014ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ee4:	83 c0 0c             	add    eax,0xc
c0014ee7:	83 ec 08             	sub    esp,0x8
c0014eea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014eee:	50                   	push   eax
c0014eef:	e8 4c b7 fe ff       	call   c0000640 <strcpy>
c0014ef4:	83 c4 10             	add    esp,0x10
c0014ef7:	83 ec 08             	sub    esp,0x8
c0014efa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014efe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f02:	e8 d9 fd ff ff       	call   c0014ce0 <Process::addArgs(char**)>
c0014f07:	83 c4 10             	add    esp,0x10
c0014f0a:	83 ec 08             	sub    esp,0x8
c0014f0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f15:	e8 3a ed ff ff       	call   c0013c54 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014f1a:	83 c4 10             	add    esp,0x10
c0014f1d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014f21:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014f25:	83 f0 01             	xor    eax,0x1
c0014f28:	88 c2                	mov    dl,al
c0014f2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f2e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014f34:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014f39:	83 ec 04             	sub    esp,0x4
c0014f3c:	50                   	push   eax
c0014f3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f41:	68 08 1a 02 c0       	push   0xc0021a08
c0014f46:	e8 2c 5a ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0014f4b:	83 c4 10             	add    esp,0x10
c0014f4e:	90                   	nop
c0014f4f:	83 c4 14             	add    esp,0x14
c0014f52:	5b                   	pop    ebx
c0014f53:	5e                   	pop    esi
c0014f54:	c3                   	ret    
c0014f55:	90                   	nop
c0014f56:	66 90                	xchg   ax,ax

c0014f58 <Process::Process(bool, char const*, Process*, char**)>:
c0014f58:	56                   	push   esi
c0014f59:	53                   	push   ebx
c0014f5a:	83 ec 24             	sub    esp,0x24
c0014f5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014f61:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014f65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f69:	05 0c 02 00 00       	add    eax,0x20c
c0014f6e:	bb 07 00 00 00       	mov    ebx,0x7
c0014f73:	89 c6                	mov    esi,eax
c0014f75:	8d 76 00             	lea    esi,[esi+0x0]
c0014f78:	85 db                	test   ebx,ebx
c0014f7a:	78 14                	js     c0014f90 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014f7c:	83 ec 0c             	sub    esp,0xc
c0014f7f:	56                   	push   esi
c0014f80:	e8 63 a3 00 00       	call   c001f2e8 <ThreadControlBlock::ThreadControlBlock()>
c0014f85:	83 c4 10             	add    esp,0x10
c0014f88:	83 c6 5f             	add    esi,0x5f
c0014f8b:	83 eb 01             	sub    ebx,0x1
c0014f8e:	eb e8                	jmp    c0014f78 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014f90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f94:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014f9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f9f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014fa6:	83 ec 0c             	sub    esp,0xc
c0014fa9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014fad:	e8 1e ba ff ff       	call   c00109d0 <KeNewProcessEnv(Process*)>
c0014fb2:	83 c4 10             	add    esp,0x10
c0014fb5:	89 c2                	mov    edx,eax
c0014fb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fbb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014fc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fc5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014fce:	a1 c0 2b 02 c0       	mov    eax,ds:0xc0022bc0
c0014fd3:	8d 50 01             	lea    edx,[eax+0x1]
c0014fd6:	89 15 c0 2b 02 c0    	mov    DWORD PTR ds:0xc0022bc0,edx
c0014fdc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014fe0:	89 02                	mov    DWORD PTR [edx],eax
c0014fe2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014fea:	83 ec 0c             	sub    esp,0xc
c0014fed:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014ff1:	e8 b8 2a ff ff       	call   c0007aae <malloc>
c0014ff6:	83 c4 10             	add    esp,0x10
c0014ff9:	89 c3                	mov    ebx,eax
c0014ffb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015000:	83 ec 08             	sub    esp,0x8
c0015003:	50                   	push   eax
c0015004:	53                   	push   ebx
c0015005:	e8 6e 50 ff ff       	call   c000a078 <VAS::VAS(bool)>
c001500a:	83 c4 10             	add    esp,0x10
c001500d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015011:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015017:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001501b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015025:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015029:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001502d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015033:	e8 be bf ff ff       	call   c0010ff6 <KeInitSignals()>
c0015038:	89 c2                	mov    edx,eax
c001503a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001503e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015044:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015048:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001504e:	85 c0                	test   eax,eax
c0015050:	74 42                	je     c0015094 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015052:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015056:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001505c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015062:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015066:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001506c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015070:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015076:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001507c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015080:	05 0c 01 00 00       	add    eax,0x10c
c0015085:	83 ec 08             	sub    esp,0x8
c0015088:	52                   	push   edx
c0015089:	50                   	push   eax
c001508a:	e8 b1 b5 fe ff       	call   c0000640 <strcpy>
c001508f:	83 c4 10             	add    esp,0x10
c0015092:	eb 64                	jmp    c00150f8 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015094:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c001509c:	83 ec 0c             	sub    esp,0xc
c001509f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00150a3:	e8 06 2a ff ff       	call   c0007aae <malloc>
c00150a8:	83 c4 10             	add    esp,0x10
c00150ab:	89 c3                	mov    ebx,eax
c00150ad:	83 ec 08             	sub    esp,0x8
c00150b0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00150b4:	53                   	push   ebx
c00150b5:	e8 9e 3b ff ff       	call   c0008c58 <VgaText::VgaText(char const*)>
c00150ba:	83 c4 10             	add    esp,0x10
c00150bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150c1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00150c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150cb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150d1:	83 ec 0c             	sub    esp,0xc
c00150d4:	50                   	push   eax
c00150d5:	e8 1c 34 ff ff       	call   c00084f6 <addToTerminalCycle(VgaText*)>
c00150da:	83 c4 10             	add    esp,0x10
c00150dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150e1:	05 0c 01 00 00       	add    eax,0x10c
c00150e6:	83 ec 08             	sub    esp,0x8
c00150e9:	68 af 19 02 c0       	push   0xc00219af
c00150ee:	50                   	push   eax
c00150ef:	e8 4c b5 fe ff       	call   c0000640 <strcpy>
c00150f4:	83 c4 10             	add    esp,0x10
c00150f7:	90                   	nop
c00150f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150fc:	83 c0 0c             	add    eax,0xc
c00150ff:	83 ec 08             	sub    esp,0x8
c0015102:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015106:	50                   	push   eax
c0015107:	e8 34 b5 fe ff       	call   c0000640 <strcpy>
c001510c:	83 c4 10             	add    esp,0x10
c001510f:	83 ec 08             	sub    esp,0x8
c0015112:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015116:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001511a:	e8 c1 fb ff ff       	call   c0014ce0 <Process::addArgs(char**)>
c001511f:	83 c4 10             	add    esp,0x10
c0015122:	90                   	nop
c0015123:	83 c4 24             	add    esp,0x24
c0015126:	5b                   	pop    ebx
c0015127:	5e                   	pop    esi
c0015128:	c3                   	ret    
c0015129:	8d 76 00             	lea    esi,[esi+0x0]

c001512c <taskStartupFunction>:
c001512c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015131:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015134:	c3                   	ret    
c0015135:	90                   	nop
c0015136:	66 90                	xchg   ax,ax

c0015138 <Semaphore::Semaphore(int)>:
c0015138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001513c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015140:	89 10                	mov    DWORD PTR [eax],edx
c0015142:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015146:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001514d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015151:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001515c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015163:	90                   	nop
c0015164:	c3                   	ret    
c0015165:	90                   	nop
c0015166:	66 90                	xchg   ax,ax

c0015168 <Mutex::Mutex()>:
c0015168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001516c:	6a 01                	push   0x1
c001516e:	50                   	push   eax
c001516f:	e8 c4 ff ff ff       	call   c0015138 <Semaphore::Semaphore(int)>
c0015174:	83 c4 08             	add    esp,0x8
c0015177:	90                   	nop
c0015178:	c3                   	ret    
c0015179:	90                   	nop
c001517a:	66 90                	xchg   ax,ax

c001517c <Process::createThread(void (*)(void*), void*, int)>:
c001517c:	57                   	push   edi
c001517d:	31 c9                	xor    ecx,ecx
c001517f:	56                   	push   esi
c0015180:	53                   	push   ebx
c0015181:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015185:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c001518c:	89 f2                	mov    edx,esi
c001518e:	66 90                	xchg   ax,ax
c0015190:	0f b7 c2             	movzx  eax,dx
c0015193:	80 e2 01             	and    dl,0x1
c0015196:	74 14                	je     c00151ac <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015198:	d1 f8                	sar    eax,1
c001519a:	83 c1 01             	add    ecx,0x1
c001519d:	89 c2                	mov    edx,eax
c001519f:	83 f9 10             	cmp    ecx,0x10
c00151a2:	75 ec                	jne    c0015190 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00151a4:	31 db                	xor    ebx,ebx
c00151a6:	89 d8                	mov    eax,ebx
c00151a8:	5b                   	pop    ebx
c00151a9:	5e                   	pop    esi
c00151aa:	5f                   	pop    edi
c00151ab:	c3                   	ret    
c00151ac:	b8 01 00 00 00       	mov    eax,0x1
c00151b1:	d3 e0                	shl    eax,cl
c00151b3:	09 c6                	or     esi,eax
c00151b5:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00151b8:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00151bf:	01 c0                	add    eax,eax
c00151c1:	01 c8                	add    eax,ecx
c00151c3:	8d 04 80             	lea    eax,[eax+eax*4]
c00151c6:	01 d8                	add    eax,ebx
c00151c8:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00151cf:	75 0b                	jne    c00151dc <Process::createThread(void (*)(void*), void*, int)+0x60>
c00151d1:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00151db:	90                   	nop
c00151dc:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00151e2:	83 ec 0c             	sub    esp,0xc
c00151e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00151e8:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00151eb:	01 c0                	add    eax,eax
c00151ed:	01 c8                	add    eax,ecx
c00151ef:	8d 3c 80             	lea    edi,[eax+eax*4]
c00151f2:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00151f5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00151fb:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015201:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015205:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001520b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015211:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015217:	89 ca                	mov    edx,ecx
c0015219:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015220:	f7 da                	neg    edx
c0015222:	c1 e2 15             	shl    edx,0x15
c0015225:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001522b:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015231:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015235:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001523f:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015245:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015249:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001524f:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015259:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015263:	68 00 01 00 00       	push   0x100
c0015268:	e8 41 28 ff ff       	call   c0007aae <malloc>
c001526d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015270:	58                   	pop    eax
c0015271:	5a                   	pop    edx
c0015272:	53                   	push   ebx
c0015273:	68 84 91 02 c0       	push   0xc0029184
c0015278:	e8 03 9e 00 00       	call   c001f080 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001527d:	83 c4 10             	add    esp,0x10
c0015280:	89 d8                	mov    eax,ebx
c0015282:	5b                   	pop    ebx
c0015283:	5e                   	pop    esi
c0015284:	5f                   	pop    edi
c0015285:	c3                   	ret    
c0015286:	66 90                	xchg   ax,ax

c0015288 <Process::createUserThread()>:
c0015288:	83 ec 0c             	sub    esp,0xc
c001528b:	68 80 00 00 00       	push   0x80
c0015290:	6a 00                	push   0x0
c0015292:	68 d8 4b 01 c0       	push   0xc0014bd8
c0015297:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001529b:	50                   	push   eax
c001529c:	e8 db fe ff ff       	call   c001517c <Process::createThread(void (*)(void*), void*, int)>
c00152a1:	83 c4 1c             	add    esp,0x1c
c00152a4:	c3                   	ret    
c00152a5:	8d 76 00             	lea    esi,[esi+0x0]

c00152a8 <setupMultitasking(void (*)())>:
c00152a8:	56                   	push   esi
c00152a9:	53                   	push   ebx
c00152aa:	83 ec 04             	sub    esp,0x4
c00152ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00152b1:	eb 11                	jmp    c00152c4 <setupMultitasking(void (*)())+0x1c>
c00152b3:	90                   	nop
c00152b4:	83 ec 0c             	sub    esp,0xc
c00152b7:	68 84 91 02 c0       	push   0xc0029184
c00152bc:	e8 03 9d 00 00       	call   c001efc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00152c1:	83 c4 10             	add    esp,0x10
c00152c4:	83 ec 0c             	sub    esp,0xc
c00152c7:	68 84 91 02 c0       	push   0xc0029184
c00152cc:	e8 cf 9c 00 00       	call   c001efa0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00152d1:	83 c4 10             	add    esp,0x10
c00152d4:	84 c0                	test   al,al
c00152d6:	74 dc                	je     c00152b4 <setupMultitasking(void (*)())+0xc>
c00152d8:	83 ec 0c             	sub    esp,0xc
c00152db:	68 24 07 00 00       	push   0x724
c00152e0:	e8 c9 27 ff ff       	call   c0007aae <malloc>
c00152e5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00152ec:	89 c3                	mov    ebx,eax
c00152ee:	6a 00                	push   0x0
c00152f0:	68 b3 19 02 c0       	push   0xc00219b3
c00152f5:	6a 01                	push   0x1
c00152f7:	50                   	push   eax
c00152f8:	e8 5b fc ff ff       	call   c0014f58 <Process::Process(bool, char const*, Process*, char**)>
c00152fd:	83 c4 14             	add    esp,0x14
c0015300:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015306:	89 1d 90 91 02 c0    	mov    DWORD PTR ds:0xc0029190,ebx
c001530c:	50                   	push   eax
c001530d:	e8 39 34 ff ff       	call   c000874b <setActiveTerminal(VgaText*)>
c0015312:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015319:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015323:	83 c8 01             	or     eax,0x1
c0015326:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c001532d:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015333:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015336:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015340:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015346:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001534c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015356:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015360:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001536a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015370:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001537a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015380:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001538a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015391:	e8 18 27 ff ff       	call   c0007aae <malloc>
c0015396:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c001539c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00153a2:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00153a8:	5a                   	pop    edx
c00153a9:	59                   	pop    ecx
c00153aa:	68 af 19 02 c0       	push   0xc00219af
c00153af:	50                   	push   eax
c00153b0:	e8 8b b2 fe ff       	call   c0000640 <strcpy>
c00153b5:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00153bc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00153c0:	83 c4 14             	add    esp,0x14
c00153c3:	5b                   	pop    ebx
c00153c4:	5e                   	pop    esi
c00153c5:	e9 9f ae fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00153ca:	66 90                	xchg   ax,ax

c00153cc <schedule()>:
c00153cc:	8b 15 64 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029164
c00153d2:	85 d2                	test   edx,edx
c00153d4:	74 0e                	je     c00153e4 <schedule()+0x18>
c00153d6:	c7 05 60 91 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x1
c00153e0:	c3                   	ret    
c00153e1:	8d 76 00             	lea    esi,[esi+0x0]
c00153e4:	53                   	push   ebx
c00153e5:	83 ec 14             	sub    esp,0x14
c00153e8:	68 84 91 02 c0       	push   0xc0029184
c00153ed:	e8 ae 9b 00 00       	call   c001efa0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00153f2:	83 c4 10             	add    esp,0x10
c00153f5:	84 c0                	test   al,al
c00153f7:	75 3f                	jne    c0015438 <schedule()+0x6c>
c00153f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153fe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015401:	83 fa 01             	cmp    edx,0x1
c0015404:	74 3a                	je     c0015440 <schedule()+0x74>
c0015406:	66 90                	xchg   ax,ax
c0015408:	83 ec 0c             	sub    esp,0xc
c001540b:	68 84 91 02 c0       	push   0xc0029184
c0015410:	e8 a7 9b 00 00       	call   c001efbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015415:	c7 04 24 84 91 02 c0 	mov    DWORD PTR [esp],0xc0029184
c001541c:	89 c3                	mov    ebx,eax
c001541e:	e8 a1 9b 00 00       	call   c001efc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015423:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001542a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001542d:	e8 fe f7 ff ff       	call   c0014c30 <switchToThread(ThreadControlBlock*)>
c0015432:	83 c4 10             	add    esp,0x10
c0015435:	8d 76 00             	lea    esi,[esi+0x0]
c0015438:	83 c4 08             	add    esp,0x8
c001543b:	5b                   	pop    ebx
c001543c:	c3                   	ret    
c001543d:	8d 76 00             	lea    esi,[esi+0x0]
c0015440:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015447:	83 ec 08             	sub    esp,0x8
c001544a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001544f:	50                   	push   eax
c0015450:	68 84 91 02 c0       	push   0xc0029184
c0015455:	e8 26 9c 00 00       	call   c001f080 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001545a:	83 c4 10             	add    esp,0x10
c001545d:	eb a9                	jmp    c0015408 <schedule()+0x3c>
c001545f:	90                   	nop

c0015460 <Semaphore::tryAcquire()>:
c0015460:	53                   	push   ebx
c0015461:	83 ec 08             	sub    esp,0x8
c0015464:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015468:	fa                   	cli    
c0015469:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001546e:	8d 50 01             	lea    edx,[eax+0x1]
c0015471:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c0015477:	8b 15 64 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029164
c001547d:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015480:	89 1d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ebx
c0015486:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015489:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001548b:	7c 33                	jl     c00154c0 <Semaphore::tryAcquire()+0x60>
c001548d:	89 15 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,edx
c0015493:	85 d2                	test   edx,edx
c0015495:	75 0d                	jne    c00154a4 <Semaphore::tryAcquire()+0x44>
c0015497:	8b 15 60 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029160
c001549d:	85 d2                	test   edx,edx
c001549f:	75 6f                	jne    c0015510 <Semaphore::tryAcquire()+0xb0>
c00154a1:	8d 76 00             	lea    esi,[esi+0x0]
c00154a4:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00154a9:	85 c0                	test   eax,eax
c00154ab:	74 0b                	je     c00154b8 <Semaphore::tryAcquire()+0x58>
c00154ad:	8d 76 00             	lea    esi,[esi+0x0]
c00154b0:	31 c0                	xor    eax,eax
c00154b2:	83 c4 08             	add    esp,0x8
c00154b5:	5b                   	pop    ebx
c00154b6:	c3                   	ret    
c00154b7:	90                   	nop
c00154b8:	fb                   	sti    
c00154b9:	83 c4 08             	add    esp,0x8
c00154bc:	5b                   	pop    ebx
c00154bd:	c3                   	ret    
c00154be:	66 90                	xchg   ax,ax
c00154c0:	83 c3 01             	add    ebx,0x1
c00154c3:	89 15 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,edx
c00154c9:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00154cc:	85 d2                	test   edx,edx
c00154ce:	75 24                	jne    c00154f4 <Semaphore::tryAcquire()+0x94>
c00154d0:	8b 0d 60 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029160
c00154d6:	85 c9                	test   ecx,ecx
c00154d8:	74 1a                	je     c00154f4 <Semaphore::tryAcquire()+0x94>
c00154da:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c00154e4:	e8 e3 fe ff ff       	call   c00153cc <schedule()>
c00154e9:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00154ee:	83 e8 01             	sub    eax,0x1
c00154f1:	8d 76 00             	lea    esi,[esi+0x0]
c00154f4:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00154f9:	85 c0                	test   eax,eax
c00154fb:	75 0b                	jne    c0015508 <Semaphore::tryAcquire()+0xa8>
c00154fd:	fb                   	sti    
c00154fe:	b0 01                	mov    al,0x1
c0015500:	83 c4 08             	add    esp,0x8
c0015503:	5b                   	pop    ebx
c0015504:	c3                   	ret    
c0015505:	8d 76 00             	lea    esi,[esi+0x0]
c0015508:	b0 01                	mov    al,0x1
c001550a:	83 c4 08             	add    esp,0x8
c001550d:	5b                   	pop    ebx
c001550e:	c3                   	ret    
c001550f:	90                   	nop
c0015510:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c001551a:	e8 ad fe ff ff       	call   c00153cc <schedule()>
c001551f:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015524:	83 e8 01             	sub    eax,0x1
c0015527:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001552c:	85 c0                	test   eax,eax
c001552e:	75 80                	jne    c00154b0 <Semaphore::tryAcquire()+0x50>
c0015530:	eb 86                	jmp    c00154b8 <Semaphore::tryAcquire()+0x58>
c0015532:	66 90                	xchg   ax,ax

c0015534 <Semaphore::assertLocked(char const*)>:
c0015534:	83 ec 0c             	sub    esp,0xc
c0015537:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001553b:	fa                   	cli    
c001553c:	8b 0d 68 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029168
c0015542:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0015547:	83 c1 01             	add    ecx,0x1
c001554a:	89 0d 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,ecx
c0015550:	8d 48 01             	lea    ecx,[eax+0x1]
c0015553:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c0015559:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001555b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001555e:	7c 28                	jl     c0015588 <Semaphore::assertLocked(char const*)+0x54>
c0015560:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c0015565:	85 c0                	test   eax,eax
c0015567:	75 0b                	jne    c0015574 <Semaphore::assertLocked(char const*)+0x40>
c0015569:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c001556e:	85 c0                	test   eax,eax
c0015570:	75 32                	jne    c00155a4 <Semaphore::assertLocked(char const*)+0x70>
c0015572:	66 90                	xchg   ax,ax
c0015574:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015579:	83 e8 01             	sub    eax,0x1
c001557c:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015581:	75 01                	jne    c0015584 <Semaphore::assertLocked(char const*)+0x50>
c0015583:	fb                   	sti    
c0015584:	83 c4 0c             	add    esp,0xc
c0015587:	c3                   	ret    
c0015588:	83 ec 0c             	sub    esp,0xc
c001558b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001558f:	52                   	push   edx
c0015590:	e8 46 b6 ff ff       	call   c0010bdb <KePanic(char const*)>
c0015595:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c001559a:	83 c4 10             	add    esp,0x10
c001559d:	83 e8 01             	sub    eax,0x1
c00155a0:	eb be                	jmp    c0015560 <Semaphore::assertLocked(char const*)+0x2c>
c00155a2:	66 90                	xchg   ax,ax
c00155a4:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c00155ae:	e8 19 fe ff ff       	call   c00153cc <schedule()>
c00155b3:	eb bf                	jmp    c0015574 <Semaphore::assertLocked(char const*)+0x40>
c00155b5:	8d 76 00             	lea    esi,[esi+0x0]

c00155b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00155b8:	83 ec 0c             	sub    esp,0xc
c00155bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00155c4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00155c7:	e8 00 fe ff ff       	call   c00153cc <schedule()>
c00155cc:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00155d1:	83 e8 01             	sub    eax,0x1
c00155d4:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00155d9:	75 01                	jne    c00155dc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00155db:	fb                   	sti    
c00155dc:	83 c4 0c             	add    esp,0xc
c00155df:	c3                   	ret    

c00155e0 <blockTask(TaskState)>:
c00155e0:	83 ec 0c             	sub    esp,0xc
c00155e3:	fa                   	cli    
c00155e4:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00155e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00155ed:	83 c0 01             	add    eax,0x1
c00155f0:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00155f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155fa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00155fd:	e8 ca fd ff ff       	call   c00153cc <schedule()>
c0015602:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015607:	83 e8 01             	sub    eax,0x1
c001560a:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001560f:	75 03                	jne    c0015614 <blockTask(TaskState)+0x34>
c0015611:	fb                   	sti    
c0015612:	66 90                	xchg   ax,ax
c0015614:	83 c4 0c             	add    esp,0xc
c0015617:	c3                   	ret    

c0015618 <waitTask(int, int*, int)>:
c0015618:	83 ec 18             	sub    esp,0x18
c001561b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015620:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015624:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015627:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001562b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015630:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015633:	6a 07                	push   0x7
c0015635:	e8 a6 ff ff ff       	call   c00155e0 <blockTask(TaskState)>
c001563a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001563f:	83 c4 10             	add    esp,0x10
c0015642:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015645:	85 d2                	test   edx,edx
c0015647:	74 0b                	je     c0015654 <waitTask(int, int*, int)+0x3c>
c0015649:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001564c:	89 02                	mov    DWORD PTR [edx],eax
c001564e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015653:	90                   	nop
c0015654:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015657:	83 c4 0c             	add    esp,0xc
c001565a:	c3                   	ret    
c001565b:	90                   	nop

c001565c <milliTenthSleepUntil(unsigned int)>:
c001565c:	83 ec 0c             	sub    esp,0xc
c001565f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015663:	39 05 8c 84 02 c0    	cmp    DWORD PTR ds:0xc002848c,eax
c0015669:	76 05                	jbe    c0015670 <milliTenthSleepUntil(unsigned int)+0x14>
c001566b:	90                   	nop
c001566c:	83 c4 0c             	add    esp,0xc
c001566f:	c3                   	ret    
c0015670:	fa                   	cli    
c0015671:	8b 15 68 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029168
c0015677:	83 ec 08             	sub    esp,0x8
c001567a:	83 c2 01             	add    edx,0x1
c001567d:	8b 0d 64 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029164
c0015683:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c0015689:	83 c1 01             	add    ecx,0x1
c001568c:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c0015692:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015698:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001569b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156a0:	50                   	push   eax
c00156a1:	68 78 91 02 c0       	push   0xc0029178
c00156a6:	e8 d5 99 00 00       	call   c001f080 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00156ab:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00156b2:	e8 29 ff ff ff       	call   c00155e0 <blockTask(TaskState)>
c00156b7:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c00156bc:	83 c4 10             	add    esp,0x10
c00156bf:	83 e8 01             	sub    eax,0x1
c00156c2:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c00156c7:	85 c0                	test   eax,eax
c00156c9:	75 09                	jne    c00156d4 <milliTenthSleepUntil(unsigned int)+0x78>
c00156cb:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c00156d0:	85 c0                	test   eax,eax
c00156d2:	75 14                	jne    c00156e8 <milliTenthSleepUntil(unsigned int)+0x8c>
c00156d4:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00156d9:	83 e8 01             	sub    eax,0x1
c00156dc:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00156e1:	75 89                	jne    c001566c <milliTenthSleepUntil(unsigned int)+0x10>
c00156e3:	fb                   	sti    
c00156e4:	83 c4 0c             	add    esp,0xc
c00156e7:	c3                   	ret    
c00156e8:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c00156f2:	e8 d5 fc ff ff       	call   c00153cc <schedule()>
c00156f7:	eb db                	jmp    c00156d4 <milliTenthSleepUntil(unsigned int)+0x78>
c00156f9:	8d 76 00             	lea    esi,[esi+0x0]

c00156fc <milliTenthSleep(unsigned int)>:
c00156fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015700:	a1 8c 84 02 c0       	mov    eax,ds:0xc002848c
c0015705:	01 c2                	add    edx,eax
c0015707:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001570b:	e9 4c ff ff ff       	jmp    c001565c <milliTenthSleepUntil(unsigned int)>

c0015710 <sleep(unsigned int)>:
c0015710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015714:	8d 04 80             	lea    eax,[eax+eax*4]
c0015717:	8d 04 80             	lea    eax,[eax+eax*4]
c001571a:	8d 04 80             	lea    eax,[eax+eax*4]
c001571d:	8d 04 80             	lea    eax,[eax+eax*4]
c0015720:	c1 e0 04             	shl    eax,0x4
c0015723:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015727:	eb d3                	jmp    c00156fc <milliTenthSleep(unsigned int)>
c0015729:	90                   	nop
c001572a:	66 90                	xchg   ax,ax

c001572c <Semaphore::acquire()>:
c001572c:	83 ec 0c             	sub    esp,0xc
c001572f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015733:	fa                   	cli    
c0015734:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015739:	83 c0 01             	add    eax,0x1
c001573c:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015741:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0015746:	8d 48 01             	lea    ecx,[eax+0x1]
c0015749:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c001574f:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015752:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015754:	7d 2e                	jge    c0015784 <Semaphore::acquire()+0x58>
c0015756:	83 c1 01             	add    ecx,0x1
c0015759:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001575c:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c0015761:	85 c0                	test   eax,eax
c0015763:	75 0b                	jne    c0015770 <Semaphore::acquire()+0x44>
c0015765:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c001576a:	85 c0                	test   eax,eax
c001576c:	75 66                	jne    c00157d4 <Semaphore::acquire()+0xa8>
c001576e:	66 90                	xchg   ax,ax
c0015770:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015775:	83 e8 01             	sub    eax,0x1
c0015778:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001577d:	75 01                	jne    c0015780 <Semaphore::acquire()+0x54>
c001577f:	fb                   	sti    
c0015780:	83 c4 0c             	add    esp,0xc
c0015783:	c3                   	ret    
c0015784:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015789:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015790:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015793:	85 c9                	test   ecx,ecx
c0015795:	74 51                	je     c00157e8 <Semaphore::acquire()+0xbc>
c0015797:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001579a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00157a0:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00157a3:	90                   	nop
c00157a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157a9:	83 ec 0c             	sub    esp,0xc
c00157ac:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00157af:	68 34 1a 02 c0       	push   0xc0021a34
c00157b4:	e8 be 51 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c00157b9:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00157c0:	e8 1b fe ff ff       	call   c00155e0 <blockTask(TaskState)>
c00157c5:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c00157ca:	83 c4 10             	add    esp,0x10
c00157cd:	83 e8 01             	sub    eax,0x1
c00157d0:	eb 8a                	jmp    c001575c <Semaphore::acquire()+0x30>
c00157d2:	66 90                	xchg   ax,ax
c00157d4:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c00157de:	e8 e9 fb ff ff       	call   c00153cc <schedule()>
c00157e3:	eb 8b                	jmp    c0015770 <Semaphore::acquire()+0x44>
c00157e5:	8d 76 00             	lea    esi,[esi+0x0]
c00157e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00157f0:	eb b2                	jmp    c00157a4 <Semaphore::acquire()+0x78>
c00157f2:	66 90                	xchg   ax,ax

c00157f4 <taskReturned>:
c00157f4:	83 ec 18             	sub    esp,0x18
c00157f7:	68 54 1a 02 c0       	push   0xc0021a54
c00157fc:	e8 da b3 ff ff       	call   c0010bdb <KePanic(char const*)>
c0015801:	83 c4 10             	add    esp,0x10
c0015804:	83 ec 0c             	sub    esp,0xc
c0015807:	6a 02                	push   0x2
c0015809:	e8 d2 fd ff ff       	call   c00155e0 <blockTask(TaskState)>
c001580e:	fa                   	cli    
c001580f:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015814:	83 c0 01             	add    eax,0x1
c0015817:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001581c:	e8 ab fb ff ff       	call   c00153cc <schedule()>
c0015821:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015826:	83 c4 10             	add    esp,0x10
c0015829:	83 e8 01             	sub    eax,0x1
c001582c:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015831:	85 c0                	test   eax,eax
c0015833:	75 cf                	jne    c0015804 <taskReturned+0x10>
c0015835:	fb                   	sti    
c0015836:	eb cc                	jmp    c0015804 <taskReturned+0x10>

c0015838 <Thr::processFromPID(int)>:
c0015838:	57                   	push   edi
c0015839:	56                   	push   esi
c001583a:	53                   	push   ebx
c001583b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001583f:	fa                   	cli    
c0015840:	8b 0d 68 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029168
c0015846:	83 ec 0c             	sub    esp,0xc
c0015849:	83 c1 01             	add    ecx,0x1
c001584c:	68 84 91 02 c0       	push   0xc0029184
c0015851:	89 0d 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,ecx
c0015857:	e8 60 97 00 00       	call   c001efbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001585c:	83 c4 10             	add    esp,0x10
c001585f:	89 c7                	mov    edi,eax
c0015861:	eb 15                	jmp    c0015878 <Thr::processFromPID(int)+0x40>
c0015863:	90                   	nop
c0015864:	83 ec 0c             	sub    esp,0xc
c0015867:	68 84 91 02 c0       	push   0xc0029184
c001586c:	e8 4b 97 00 00       	call   c001efbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015871:	83 c4 10             	add    esp,0x10
c0015874:	39 f8                	cmp    eax,edi
c0015876:	74 50                	je     c00158c8 <Thr::processFromPID(int)+0x90>
c0015878:	83 ec 0c             	sub    esp,0xc
c001587b:	68 84 91 02 c0       	push   0xc0029184
c0015880:	e8 37 97 00 00       	call   c001efbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015885:	c7 04 24 84 91 02 c0 	mov    DWORD PTR [esp],0xc0029184
c001588c:	89 c3                	mov    ebx,eax
c001588e:	e8 31 97 00 00       	call   c001efc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015893:	58                   	pop    eax
c0015894:	5a                   	pop    edx
c0015895:	53                   	push   ebx
c0015896:	68 84 91 02 c0       	push   0xc0029184
c001589b:	e8 e0 97 00 00       	call   c001f080 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00158a0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00158a3:	83 c4 10             	add    esp,0x10
c00158a6:	39 30                	cmp    DWORD PTR [eax],esi
c00158a8:	75 ba                	jne    c0015864 <Thr::processFromPID(int)+0x2c>
c00158aa:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00158af:	83 e8 01             	sub    eax,0x1
c00158b2:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00158b7:	74 0b                	je     c00158c4 <Thr::processFromPID(int)+0x8c>
c00158b9:	8d 76 00             	lea    esi,[esi+0x0]
c00158bc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00158bf:	5b                   	pop    ebx
c00158c0:	5e                   	pop    esi
c00158c1:	5f                   	pop    edi
c00158c2:	c3                   	ret    
c00158c3:	90                   	nop
c00158c4:	fb                   	sti    
c00158c5:	eb f5                	jmp    c00158bc <Thr::processFromPID(int)+0x84>
c00158c7:	90                   	nop
c00158c8:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00158cd:	83 e8 01             	sub    eax,0x1
c00158d0:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00158d5:	75 05                	jne    c00158dc <Thr::processFromPID(int)+0xa4>
c00158d7:	fb                   	sti    
c00158d8:	5b                   	pop    ebx
c00158d9:	5e                   	pop    esi
c00158da:	5f                   	pop    edi
c00158db:	c3                   	ret    
c00158dc:	5b                   	pop    ebx
c00158dd:	31 c0                	xor    eax,eax
c00158df:	5e                   	pop    esi
c00158e0:	5f                   	pop    edi
c00158e1:	c3                   	ret    
c00158e2:	66 90                	xchg   ax,ax

c00158e4 <unblockTask(ThreadControlBlock*)>:
c00158e4:	53                   	push   ebx
c00158e5:	83 ec 08             	sub    esp,0x8
c00158e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158ec:	fa                   	cli    
c00158ed:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00158f2:	83 c0 01             	add    eax,0x1
c00158f5:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00158fa:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00158fd:	85 c0                	test   eax,eax
c00158ff:	74 67                	je     c0015968 <unblockTask(ThreadControlBlock*)+0x84>
c0015901:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015904:	83 f8 01             	cmp    eax,0x1
c0015907:	74 37                	je     c0015940 <unblockTask(ThreadControlBlock*)+0x5c>
c0015909:	83 ec 0c             	sub    esp,0xc
c001590c:	68 84 91 02 c0       	push   0xc0029184
c0015911:	e8 a6 96 00 00       	call   c001efbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015916:	83 c4 10             	add    esp,0x10
c0015919:	85 c0                	test   eax,eax
c001591b:	75 1b                	jne    c0015938 <unblockTask(ThreadControlBlock*)+0x54>
c001591d:	eb 5d                	jmp    c001597c <unblockTask(ThreadControlBlock*)+0x98>
c001591f:	90                   	nop
c0015920:	83 ec 08             	sub    esp,0x8
c0015923:	50                   	push   eax
c0015924:	68 84 91 02 c0       	push   0xc0029184
c0015929:	e8 ae 99 00 00       	call   c001f2dc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001592e:	83 c4 10             	add    esp,0x10
c0015931:	85 c0                	test   eax,eax
c0015933:	74 47                	je     c001597c <unblockTask(ThreadControlBlock*)+0x98>
c0015935:	8d 76 00             	lea    esi,[esi+0x0]
c0015938:	39 c3                	cmp    ebx,eax
c001593a:	75 e4                	jne    c0015920 <unblockTask(ThreadControlBlock*)+0x3c>
c001593c:	eb 12                	jmp    c0015950 <unblockTask(ThreadControlBlock*)+0x6c>
c001593e:	66 90                	xchg   ax,ax
c0015940:	83 ec 0c             	sub    esp,0xc
c0015943:	68 d1 19 02 c0       	push   0xc00219d1
c0015948:	e8 2a 50 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c001594d:	83 c4 10             	add    esp,0x10
c0015950:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015955:	83 e8 01             	sub    eax,0x1
c0015958:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001595d:	75 01                	jne    c0015960 <unblockTask(ThreadControlBlock*)+0x7c>
c001595f:	fb                   	sti    
c0015960:	83 c4 08             	add    esp,0x8
c0015963:	5b                   	pop    ebx
c0015964:	c3                   	ret    
c0015965:	8d 76 00             	lea    esi,[esi+0x0]
c0015968:	83 ec 0c             	sub    esp,0xc
c001596b:	68 ba 19 02 c0       	push   0xc00219ba
c0015970:	e8 02 50 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0015975:	83 c4 10             	add    esp,0x10
c0015978:	eb d6                	jmp    c0015950 <unblockTask(ThreadControlBlock*)+0x6c>
c001597a:	66 90                	xchg   ax,ax
c001597c:	83 ec 08             	sub    esp,0x8
c001597f:	53                   	push   ebx
c0015980:	68 84 91 02 c0       	push   0xc0029184
c0015985:	e8 f6 96 00 00       	call   c001f080 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001598a:	83 c4 10             	add    esp,0x10
c001598d:	eb c1                	jmp    c0015950 <unblockTask(ThreadControlBlock*)+0x6c>
c001598f:	90                   	nop

c0015990 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015990:	55                   	push   ebp
c0015991:	57                   	push   edi
c0015992:	56                   	push   esi
c0015993:	53                   	push   ebx
c0015994:	83 ec 1c             	sub    esp,0x1c
c0015997:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001599b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001599e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00159a4:	85 ed                	test   ebp,ebp
c00159a6:	7e 28                	jle    c00159d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00159a8:	31 f6                	xor    esi,esi
c00159aa:	66 90                	xchg   ax,ax
c00159ac:	83 ec 0c             	sub    esp,0xc
c00159af:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00159b6:	83 c6 01             	add    esi,0x1
c00159b9:	57                   	push   edi
c00159ba:	e8 ff 20 ff ff       	call   c0007abe <free>
c00159bf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00159c2:	83 c4 10             	add    esp,0x10
c00159c5:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00159cb:	7f df                	jg     c00159ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00159cd:	8d 76 00             	lea    esi,[esi+0x0]
c00159d0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00159da:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00159df:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00159e2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00159e5:	d3 c0                	rol    eax,cl
c00159e7:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00159ee:	21 c8                	and    eax,ecx
c00159f0:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00159f7:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00159fa:	89 f7                	mov    edi,esi
c00159fc:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015a04:	0f 85 72 01 00 00    	jne    c0015b7c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015a0a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015a10:	85 ed                	test   ebp,ebp
c0015a12:	74 1c                	je     c0015a30 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0015a14:	83 ec 0c             	sub    esp,0xc
c0015a17:	55                   	push   ebp
c0015a18:	e8 cf ae ff ff       	call   c00108ec <EnvVarContainer::~EnvVarContainer()>
c0015a1d:	59                   	pop    ecx
c0015a1e:	5e                   	pop    esi
c0015a1f:	6a 0c                	push   0xc
c0015a21:	55                   	push   ebp
c0015a22:	e8 23 4e ff ff       	call   c000a84a <operator delete(void*, unsigned long)>
c0015a27:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015a2a:	83 c4 10             	add    esp,0x10
c0015a2d:	89 f7                	mov    edi,esi
c0015a2f:	90                   	nop
c0015a30:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015a36:	85 c0                	test   eax,eax
c0015a38:	0f 84 b2 00 00 00    	je     c0015af0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015a3e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015a41:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015a45:	31 c9                	xor    ecx,ecx
c0015a47:	eb 17                	jmp    c0015a60 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0015a49:	8d 76 00             	lea    esi,[esi+0x0]
c0015a4c:	83 c1 01             	add    ecx,0x1
c0015a4f:	83 f9 10             	cmp    ecx,0x10
c0015a52:	0f 84 98 00 00 00    	je     c0015af0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015a58:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015a5e:	66 90                	xchg   ax,ax
c0015a60:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0015a67:	d3 fa                	sar    edx,cl
c0015a69:	80 e2 01             	and    dl,0x1
c0015a6c:	74 de                	je     c0015a4c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015a6e:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0015a71:	01 d2                	add    edx,edx
c0015a73:	01 ca                	add    edx,ecx
c0015a75:	8d 14 92             	lea    edx,[edx+edx*4]
c0015a78:	01 d0                	add    eax,edx
c0015a7a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015a80:	83 fd 07             	cmp    ebp,0x7
c0015a83:	75 c7                	jne    c0015a4c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015a85:	05 40 02 00 00       	add    eax,0x240
c0015a8a:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015a8d:	83 fd ff             	cmp    ebp,0xffffffff
c0015a90:	0f 8c ee 00 00 00    	jl     c0015b84 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0015a96:	0f 84 ac 01 00 00    	je     c0015c48 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0015a9c:	85 ed                	test   ebp,ebp
c0015a9e:	0f 84 90 01 00 00    	je     c0015c34 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0015aa4:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015aa6:	75 a4                	jne    c0015a4c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015aa8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015aae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015ab2:	01 d0                	add    eax,edx
c0015ab4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015ab8:	83 ec 0c             	sub    esp,0xc
c0015abb:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015ac1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015ac4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015aca:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015ad1:	50                   	push   eax
c0015ad2:	e8 0d fe ff ff       	call   c00158e4 <unblockTask(ThreadControlBlock*)>
c0015ad7:	83 c4 10             	add    esp,0x10
c0015ada:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015add:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015ae1:	89 f7                	mov    edi,esi
c0015ae3:	83 c1 01             	add    ecx,0x1
c0015ae6:	83 f9 10             	cmp    ecx,0x10
c0015ae9:	0f 85 69 ff ff ff    	jne    c0015a58 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0015aef:	90                   	nop
c0015af0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015af6:	85 c0                	test   eax,eax
c0015af8:	74 62                	je     c0015b5c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015afa:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015b00:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015b06:	74 54                	je     c0015b5c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015b08:	83 ec 0c             	sub    esp,0xc
c0015b0b:	68 84 91 02 c0       	push   0xc0029184
c0015b10:	e8 a7 94 00 00       	call   c001efbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b15:	c7 04 24 84 91 02 c0 	mov    DWORD PTR [esp],0xc0029184
c0015b1c:	89 c7                	mov    edi,eax
c0015b1e:	e8 7d 94 00 00       	call   c001efa0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015b23:	83 c4 10             	add    esp,0x10
c0015b26:	84 c0                	test   al,al
c0015b28:	0f 84 ce 00 00 00    	je     c0015bfc <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015b2e:	66 90                	xchg   ax,ax
c0015b30:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015b33:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015b39:	85 d2                	test   edx,edx
c0015b3b:	74 0f                	je     c0015b4c <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015b3d:	83 ec 0c             	sub    esp,0xc
c0015b40:	8b 02                	mov    eax,DWORD PTR [edx]
c0015b42:	52                   	push   edx
c0015b43:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b46:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015b49:	83 c4 10             	add    esp,0x10
c0015b4c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015b56:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015b59:	8d 76 00             	lea    esi,[esi+0x0]
c0015b5c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015b62:	85 db                	test   ebx,ebx
c0015b64:	74 16                	je     c0015b7c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015b66:	83 ec 0c             	sub    esp,0xc
c0015b69:	53                   	push   ebx
c0015b6a:	e8 35 40 ff ff       	call   c0009ba4 <VAS::~VAS()>
c0015b6f:	58                   	pop    eax
c0015b70:	5a                   	pop    edx
c0015b71:	6a 14                	push   0x14
c0015b73:	53                   	push   ebx
c0015b74:	e8 d1 4c ff ff       	call   c000a84a <operator delete(void*, unsigned long)>
c0015b79:	83 c4 10             	add    esp,0x10
c0015b7c:	83 c4 1c             	add    esp,0x1c
c0015b7f:	5b                   	pop    ebx
c0015b80:	5e                   	pop    esi
c0015b81:	5f                   	pop    edi
c0015b82:	5d                   	pop    ebp
c0015b83:	c3                   	ret    
c0015b84:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015b88:	83 ec 0c             	sub    esp,0xc
c0015b8b:	68 88 1a 02 c0       	push   0xc0021a88
c0015b90:	e8 46 b0 ff ff       	call   c0010bdb <KePanic(char const*)>
c0015b95:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015b98:	83 c4 10             	add    esp,0x10
c0015b9b:	89 f7                	mov    edi,esi
c0015b9d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015ba1:	e9 a6 fe ff ff       	jmp    c0015a4c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015ba6:	66 90                	xchg   ax,ax
c0015ba8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015bae:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015bb4:	75 1e                	jne    c0015bd4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015bb6:	83 ec 0c             	sub    esp,0xc
c0015bb9:	68 f0 1a 02 c0       	push   0xc0021af0
c0015bbe:	e8 b4 4d ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0015bc3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015bca:	e8 11 fa ff ff       	call   c00155e0 <blockTask(TaskState)>
c0015bcf:	83 c4 10             	add    esp,0x10
c0015bd2:	66 90                	xchg   ax,ax
c0015bd4:	83 ec 08             	sub    esp,0x8
c0015bd7:	56                   	push   esi
c0015bd8:	68 84 91 02 c0       	push   0xc0029184
c0015bdd:	e8 9e 94 00 00       	call   c001f080 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015be2:	c7 04 24 84 91 02 c0 	mov    DWORD PTR [esp],0xc0029184
c0015be9:	e8 ce 93 00 00       	call   c001efbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015bee:	83 c4 10             	add    esp,0x10
c0015bf1:	39 f8                	cmp    eax,edi
c0015bf3:	0f 84 37 ff ff ff    	je     c0015b30 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0015bfc:	83 ec 0c             	sub    esp,0xc
c0015bff:	68 84 91 02 c0       	push   0xc0029184
c0015c04:	e8 b3 93 00 00       	call   c001efbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015c09:	c7 04 24 84 91 02 c0 	mov    DWORD PTR [esp],0xc0029184
c0015c10:	89 c6                	mov    esi,eax
c0015c12:	e8 ad 93 00 00       	call   c001efc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015c17:	83 c4 10             	add    esp,0x10
c0015c1a:	39 f3                	cmp    ebx,esi
c0015c1c:	74 b6                	je     c0015bd4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015c1e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015c21:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015c24:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015c2a:	75 a8                	jne    c0015bd4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015c2c:	e9 77 ff ff ff       	jmp    c0015ba8 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015c31:	8d 76 00             	lea    esi,[esi+0x0]
c0015c34:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015c38:	83 ec 0c             	sub    esp,0xc
c0015c3b:	68 bc 1a 02 c0       	push   0xc0021abc
c0015c40:	e9 4b ff ff ff       	jmp    c0015b90 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015c45:	8d 76 00             	lea    esi,[esi+0x0]
c0015c48:	8b 36                	mov    esi,DWORD PTR [esi]
c0015c4a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015c4e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015c51:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015c54:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015c5a:	01 d7                	add    edi,edx
c0015c5c:	89 f8                	mov    eax,edi
c0015c5e:	e9 51 fe ff ff       	jmp    c0015ab4 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0015c63:	90                   	nop

c0015c64 <cleanerTaskFunction(void*)>:
c0015c64:	53                   	push   ebx
c0015c65:	83 ec 08             	sub    esp,0x8
c0015c68:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015c6d:	83 e8 01             	sub    eax,0x1
c0015c70:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015c75:	75 01                	jne    c0015c78 <cleanerTaskFunction(void*)+0x14>
c0015c77:	fb                   	sti    
c0015c78:	fa                   	cli    
c0015c79:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015c7e:	80 3d 4c 91 02 c0 00 	cmp    BYTE PTR ds:0xc002914c,0x0
c0015c85:	8d 50 01             	lea    edx,[eax+0x1]
c0015c88:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c0015c8e:	0f 84 c4 00 00 00    	je     c0015d58 <cleanerTaskFunction(void*)+0xf4>
c0015c94:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015c99:	85 c0                	test   eax,eax
c0015c9b:	75 03                	jne    c0015ca0 <cleanerTaskFunction(void*)+0x3c>
c0015c9d:	fb                   	sti    
c0015c9e:	66 90                	xchg   ax,ax
c0015ca0:	c6 05 4c 91 02 c0 00 	mov    BYTE PTR ds:0xc002914c,0x0
c0015ca7:	fa                   	cli    
c0015ca8:	8b 15 68 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029168
c0015cae:	8b 0d 64 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029164
c0015cb4:	83 c2 01             	add    edx,0x1
c0015cb7:	83 c1 01             	add    ecx,0x1
c0015cba:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c0015cc0:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c0015cc6:	fa                   	cli    
c0015cc7:	8b 1d 68 91 02 c0    	mov    ebx,DWORD PTR ds:0xc0029168
c0015ccd:	83 c3 01             	add    ebx,0x1
c0015cd0:	89 1d 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,ebx
c0015cd6:	eb 28                	jmp    c0015d00 <cleanerTaskFunction(void*)+0x9c>
c0015cd8:	83 ec 0c             	sub    esp,0xc
c0015cdb:	68 6c 91 02 c0       	push   0xc002916c
c0015ce0:	e8 d7 92 00 00       	call   c001efbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ce5:	c7 04 24 6c 91 02 c0 	mov    DWORD PTR [esp],0xc002916c
c0015cec:	89 c3                	mov    ebx,eax
c0015cee:	e8 d1 92 00 00       	call   c001efc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015cf3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015cf6:	e8 95 fc ff ff       	call   c0015990 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015cfb:	83 c4 10             	add    esp,0x10
c0015cfe:	66 90                	xchg   ax,ax
c0015d00:	83 ec 0c             	sub    esp,0xc
c0015d03:	68 6c 91 02 c0       	push   0xc002916c
c0015d08:	e8 93 92 00 00       	call   c001efa0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015d0d:	83 c4 10             	add    esp,0x10
c0015d10:	84 c0                	test   al,al
c0015d12:	74 c4                	je     c0015cd8 <cleanerTaskFunction(void*)+0x74>
c0015d14:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015d19:	83 e8 01             	sub    eax,0x1
c0015d1c:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015d21:	75 01                	jne    c0015d24 <cleanerTaskFunction(void*)+0xc0>
c0015d23:	fb                   	sti    
c0015d24:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0015d29:	83 e8 01             	sub    eax,0x1
c0015d2c:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c0015d31:	0f 85 31 ff ff ff    	jne    c0015c68 <cleanerTaskFunction(void*)+0x4>
c0015d37:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c0015d3c:	85 c0                	test   eax,eax
c0015d3e:	0f 84 24 ff ff ff    	je     c0015c68 <cleanerTaskFunction(void*)+0x4>
c0015d44:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c0015d4e:	e8 79 f6 ff ff       	call   c00153cc <schedule()>
c0015d53:	e9 10 ff ff ff       	jmp    c0015c68 <cleanerTaskFunction(void*)+0x4>
c0015d58:	83 ec 0c             	sub    esp,0xc
c0015d5b:	6a 02                	push   0x2
c0015d5d:	e8 56 f8 ff ff       	call   c00155b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015d62:	83 c4 10             	add    esp,0x10
c0015d65:	e9 36 ff ff ff       	jmp    c0015ca0 <cleanerTaskFunction(void*)+0x3c>
c0015d6a:	66 90                	xchg   ax,ax

c0015d6c <terminateTask(int)>:
c0015d6c:	83 ec 14             	sub    esp,0x14
c0015d6f:	fa                   	cli    
c0015d70:	8b 15 68 91 02 c0    	mov    edx,DWORD PTR ds:0xc0029168
c0015d76:	8b 0d 64 91 02 c0    	mov    ecx,DWORD PTR ds:0xc0029164
c0015d7c:	83 c2 01             	add    edx,0x1
c0015d7f:	83 c1 01             	add    ecx,0x1
c0015d82:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c0015d88:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c0015d8e:	fa                   	cli    
c0015d8f:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015d94:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015d98:	83 c0 01             	add    eax,0x1
c0015d9b:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015da0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015da5:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015da8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dad:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015db0:	50                   	push   eax
c0015db1:	68 6c 91 02 c0       	push   0xc002916c
c0015db6:	e8 c5 92 00 00       	call   c001f080 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015dbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dc0:	83 c4 10             	add    esp,0x10
c0015dc3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015dca:	a1 48 91 02 c0       	mov    eax,ds:0xc0029148
c0015dcf:	85 c0                	test   eax,eax
c0015dd1:	74 65                	je     c0015e38 <terminateTask(int)+0xcc>
c0015dd3:	83 ec 0c             	sub    esp,0xc
c0015dd6:	c6 05 4c 91 02 c0 01 	mov    BYTE PTR ds:0xc002914c,0x1
c0015ddd:	50                   	push   eax
c0015dde:	e8 01 fb ff ff       	call   c00158e4 <unblockTask(ThreadControlBlock*)>
c0015de3:	83 c4 10             	add    esp,0x10
c0015de6:	66 90                	xchg   ax,ax
c0015de8:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015ded:	83 e8 01             	sub    eax,0x1
c0015df0:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015df5:	75 01                	jne    c0015df8 <terminateTask(int)+0x8c>
c0015df7:	fb                   	sti    
c0015df8:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0015dfd:	83 e8 01             	sub    eax,0x1
c0015e00:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c0015e05:	75 09                	jne    c0015e10 <terminateTask(int)+0xa4>
c0015e07:	83 3d 60 91 02 c0 00 	cmp    DWORD PTR ds:0xc0029160,0x0
c0015e0e:	75 3c                	jne    c0015e4c <terminateTask(int)+0xe0>
c0015e10:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015e15:	83 e8 01             	sub    eax,0x1
c0015e18:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015e1d:	75 01                	jne    c0015e20 <terminateTask(int)+0xb4>
c0015e1f:	fb                   	sti    
c0015e20:	fa                   	cli    
c0015e21:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015e26:	83 c0 01             	add    eax,0x1
c0015e29:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015e2e:	66 90                	xchg   ax,ax
c0015e30:	e8 97 f5 ff ff       	call   c00153cc <schedule()>
c0015e35:	eb d9                	jmp    c0015e10 <terminateTask(int)+0xa4>
c0015e37:	90                   	nop
c0015e38:	83 ec 0c             	sub    esp,0xc
c0015e3b:	68 e8 19 02 c0       	push   0xc00219e8
c0015e40:	e8 32 4b ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0015e45:	83 c4 10             	add    esp,0x10
c0015e48:	eb 9e                	jmp    c0015de8 <terminateTask(int)+0x7c>
c0015e4a:	66 90                	xchg   ax,ax
c0015e4c:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c0015e56:	eb d8                	jmp    c0015e30 <terminateTask(int)+0xc4>

c0015e58 <Thr::terminateFromIRQ(int)>:
c0015e58:	83 ec 18             	sub    esp,0x18
c0015e5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e5f:	50                   	push   eax
c0015e60:	e8 07 ff ff ff       	call   c0015d6c <terminateTask(int)>
c0015e65:	90                   	nop
c0015e66:	66 90                	xchg   ax,ax

c0015e68 <Semaphore::release()>:
c0015e68:	83 ec 0c             	sub    esp,0xc
c0015e6b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e6f:	fa                   	cli    
c0015e70:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015e75:	83 c0 01             	add    eax,0x1
c0015e78:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015e7d:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0015e82:	8d 48 01             	lea    ecx,[eax+0x1]
c0015e85:	89 0d 64 91 02 c0    	mov    DWORD PTR ds:0xc0029164,ecx
c0015e8b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015e8e:	85 c9                	test   ecx,ecx
c0015e90:	74 42                	je     c0015ed4 <Semaphore::release()+0x6c>
c0015e92:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015e95:	83 ec 0c             	sub    esp,0xc
c0015e98:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015e9b:	51                   	push   ecx
c0015e9c:	e8 43 fa ff ff       	call   c00158e4 <unblockTask(ThreadControlBlock*)>
c0015ea1:	a1 64 91 02 c0       	mov    eax,ds:0xc0029164
c0015ea6:	83 c4 10             	add    esp,0x10
c0015ea9:	83 e8 01             	sub    eax,0x1
c0015eac:	a3 64 91 02 c0       	mov    ds:0xc0029164,eax
c0015eb1:	85 c0                	test   eax,eax
c0015eb3:	75 0b                	jne    c0015ec0 <Semaphore::release()+0x58>
c0015eb5:	a1 60 91 02 c0       	mov    eax,ds:0xc0029160
c0015eba:	85 c0                	test   eax,eax
c0015ebc:	75 22                	jne    c0015ee0 <Semaphore::release()+0x78>
c0015ebe:	66 90                	xchg   ax,ax
c0015ec0:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0015ec5:	83 e8 01             	sub    eax,0x1
c0015ec8:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0015ecd:	75 01                	jne    c0015ed0 <Semaphore::release()+0x68>
c0015ecf:	fb                   	sti    
c0015ed0:	83 c4 0c             	add    esp,0xc
c0015ed3:	c3                   	ret    
c0015ed4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015ed7:	83 e9 01             	sub    ecx,0x1
c0015eda:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015edd:	eb cd                	jmp    c0015eac <Semaphore::release()+0x44>
c0015edf:	90                   	nop
c0015ee0:	c7 05 60 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029160,0x0
c0015eea:	e8 dd f4 ff ff       	call   c00153cc <schedule()>
c0015eef:	eb cf                	jmp    c0015ec0 <Semaphore::release()+0x58>
c0015ef1:	8d 76 00             	lea    esi,[esi+0x0]

c0015ef4 <__static_initialization_and_destruction_0(int, int)>:
c0015ef4:	83 ec 0c             	sub    esp,0xc
c0015ef7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015efc:	0f 85 8e 00 00 00    	jne    c0015f90 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015f02:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015f0a:	0f 85 80 00 00 00    	jne    c0015f90 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015f10:	83 ec 0c             	sub    esp,0xc
c0015f13:	68 84 91 02 c0       	push   0xc0029184
c0015f18:	e8 17 94 00 00       	call   c001f334 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015f1d:	83 c4 10             	add    esp,0x10
c0015f20:	83 ec 04             	sub    esp,0x4
c0015f23:	68 b8 26 02 c0       	push   0xc00226b8
c0015f28:	68 84 91 02 c0       	push   0xc0029184
c0015f2d:	68 e4 f2 01 c0       	push   0xc001f2e4
c0015f32:	e8 c3 48 ff ff       	call   c000a7fa <__cxa_atexit>
c0015f37:	83 c4 10             	add    esp,0x10
c0015f3a:	83 ec 0c             	sub    esp,0xc
c0015f3d:	68 78 91 02 c0       	push   0xc0029178
c0015f42:	e8 ed 93 00 00       	call   c001f334 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015f47:	83 c4 10             	add    esp,0x10
c0015f4a:	83 ec 04             	sub    esp,0x4
c0015f4d:	68 b8 26 02 c0       	push   0xc00226b8
c0015f52:	68 78 91 02 c0       	push   0xc0029178
c0015f57:	68 e4 f2 01 c0       	push   0xc001f2e4
c0015f5c:	e8 99 48 ff ff       	call   c000a7fa <__cxa_atexit>
c0015f61:	83 c4 10             	add    esp,0x10
c0015f64:	83 ec 0c             	sub    esp,0xc
c0015f67:	68 6c 91 02 c0       	push   0xc002916c
c0015f6c:	e8 c3 93 00 00       	call   c001f334 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015f71:	83 c4 10             	add    esp,0x10
c0015f74:	83 ec 04             	sub    esp,0x4
c0015f77:	68 b8 26 02 c0       	push   0xc00226b8
c0015f7c:	68 6c 91 02 c0       	push   0xc002916c
c0015f81:	68 e4 f2 01 c0       	push   0xc001f2e4
c0015f86:	e8 6f 48 ff ff       	call   c000a7fa <__cxa_atexit>
c0015f8b:	83 c4 10             	add    esp,0x10
c0015f8e:	66 90                	xchg   ax,ax
c0015f90:	90                   	nop
c0015f91:	83 c4 0c             	add    esp,0xc
c0015f94:	c3                   	ret    
c0015f95:	8d 76 00             	lea    esi,[esi+0x0]

c0015f98 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015f98:	83 ec 0c             	sub    esp,0xc
c0015f9b:	83 ec 08             	sub    esp,0x8
c0015f9e:	68 ff ff 00 00       	push   0xffff
c0015fa3:	6a 01                	push   0x1
c0015fa5:	e8 4a ff ff ff       	call   c0015ef4 <__static_initialization_and_destruction_0(int, int)>
c0015faa:	83 c4 10             	add    esp,0x10
c0015fad:	83 c4 0c             	add    esp,0xc
c0015fb0:	c3                   	ret    

c0015fb1 <Vm::inbv(unsigned short)>:
c0015fb1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015fb5:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015fba:	75 06                	jne    c0015fc2 <Vm::inbv(unsigned short)+0x11>
c0015fbc:	a0 cc 91 02 c0       	mov    al,ds:0xc00291cc
c0015fc1:	c3                   	ret    
c0015fc2:	ec                   	in     al,dx
c0015fc3:	c3                   	ret    

c0015fc4 <Vm::outbv(unsigned short, unsigned char)>:
c0015fc4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015fc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015fcc:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015fd1:	75 25                	jne    c0015ff8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015fd3:	8b 0d cc 91 02 c0    	mov    ecx,DWORD PTR ds:0xc00291cc
c0015fd9:	8d 51 01             	lea    edx,[ecx+0x1]
c0015fdc:	88 81 e0 91 02 c0    	mov    BYTE PTR [ecx-0x3ffd6e20],al
c0015fe2:	89 15 cc 91 02 c0    	mov    DWORD PTR ds:0xc00291cc,edx
c0015fe8:	83 fa 20             	cmp    edx,0x20
c0015feb:	75 0c                	jne    c0015ff9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015fed:	c7 05 cc 91 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00291cc,0x1f
c0015ff7:	c3                   	ret    
c0015ff8:	ee                   	out    dx,al
c0015ff9:	c3                   	ret    

c0015ffa <Vm::realToLinear(unsigned short, unsigned short)>:
c0015ffa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015fff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016004:	c1 e0 04             	shl    eax,0x4
c0016007:	01 d0                	add    eax,edx
c0016009:	c3                   	ret    

c001600a <Vm::getSegment(unsigned int)>:
c001600a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001600e:	c1 e8 10             	shr    eax,0x10
c0016011:	c3                   	ret    

c0016012 <Vm::getOffset(unsigned int)>:
c0016012:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016016:	c3                   	ret    

c0016017 <Vm::mainloop2()>:
c0016017:	83 ec 18             	sub    esp,0x18
c001601a:	fa                   	cli    
c001601b:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c0016021:	6a 02                	push   0x2
c0016023:	c6 05 c5 91 02 c0 01 	mov    BYTE PTR ds:0xc00291c5,0x1
c001602a:	e8 89 f5 ff ff       	call   c00155b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001602f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016034:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016038:	52                   	push   edx
c0016039:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c001603d:	52                   	push   edx
c001603e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016042:	52                   	push   edx
c0016043:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016047:	50                   	push   eax
c0016048:	e8 c2 a1 fe ff       	call   c000020f <goToVM86>
c001604d:	83 c4 2c             	add    esp,0x2c
c0016050:	c3                   	ret    

c0016051 <Vm::mainVm8086Loop(void*)>:
c0016051:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0016056:	48                   	dec    eax
c0016057:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001605c:	75 01                	jne    c001605f <Vm::mainVm8086Loop(void*)+0xe>
c001605e:	fb                   	sti    
c001605f:	eb b6                	jmp    c0016017 <Vm::mainloop2()>

c0016061 <Vm::mainloop3(unsigned long)>:
c0016061:	83 ec 18             	sub    esp,0x18
c0016064:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016068:	fa                   	cli    
c0016069:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c001606f:	6a 02                	push   0x2
c0016071:	c6 05 c4 91 02 c0 01 	mov    BYTE PTR ds:0xc00291c4,0x1
c0016078:	a3 c0 91 02 c0       	mov    ds:0xc00291c0,eax
c001607d:	e8 36 f5 ff ff       	call   c00155b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016082:	83 c4 1c             	add    esp,0x1c
c0016085:	eb 90                	jmp    c0016017 <Vm::mainloop2()>

c0016087 <Vm::initialise8086()>:
c0016087:	83 ec 0c             	sub    esp,0xc
c001608a:	68 80 00 00 00       	push   0x80
c001608f:	6a 00                	push   0x0
c0016091:	68 51 60 01 c0       	push   0xc0016051
c0016096:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c001609c:	e8 db f0 ff ff       	call   c001517c <Process::createThread(void (*)(void*), void*, int)>
c00160a1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00160a8:	a3 c8 91 02 c0       	mov    ds:0xc00291c8,eax
c00160ad:	68 00 01 00 00       	push   0x100
c00160b2:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c00160b7:	6a 00                	push   0x0
c00160b9:	6a 00                	push   0x0
c00160bb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00160c1:	e8 64 3e ff ff       	call   c0009f2a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00160c6:	83 c4 2c             	add    esp,0x2c
c00160c9:	c3                   	ret    

c00160ca <Vm::finish8086()>:
c00160ca:	53                   	push   ebx
c00160cb:	83 ec 08             	sub    esp,0x8
c00160ce:	fa                   	cli    
c00160cf:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c00160d5:	80 3d c4 91 02 c0 00 	cmp    BYTE PTR ds:0xc00291c4,0x0
c00160dc:	75 15                	jne    c00160f3 <Vm::finish8086()+0x29>
c00160de:	e8 e9 f2 ff ff       	call   c00153cc <schedule()>
c00160e3:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00160e8:	48                   	dec    eax
c00160e9:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00160ee:	75 de                	jne    c00160ce <Vm::finish8086()+0x4>
c00160f0:	fb                   	sti    
c00160f1:	eb db                	jmp    c00160ce <Vm::finish8086()+0x4>
c00160f3:	83 ec 0c             	sub    esp,0xc
c00160f6:	8b 1d c0 91 02 c0    	mov    ebx,DWORD PTR ds:0xc00291c0
c00160fc:	ff 35 c8 91 02 c0    	push   DWORD PTR ds:0xc00291c8
c0016102:	c6 05 c4 91 02 c0 00 	mov    BYTE PTR ds:0xc00291c4,0x0
c0016109:	e8 d6 f7 ff ff       	call   c00158e4 <unblockTask(ThreadControlBlock*)>
c001610e:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0016113:	83 c4 10             	add    esp,0x10
c0016116:	8d 50 ff             	lea    edx,[eax-0x1]
c0016119:	89 15 68 91 02 c0    	mov    DWORD PTR ds:0xc0029168,edx
c001611f:	85 d2                	test   edx,edx
c0016121:	75 01                	jne    c0016124 <Vm::finish8086()+0x5a>
c0016123:	fb                   	sti    
c0016124:	89 d8                	mov    eax,ebx
c0016126:	83 c4 08             	add    esp,0x8
c0016129:	5b                   	pop    ebx
c001612a:	c3                   	ret    

c001612b <Vm::getOutput8086(unsigned char*)>:
c001612b:	57                   	push   edi
c001612c:	8b 0d cc 91 02 c0    	mov    ecx,DWORD PTR ds:0xc00291cc
c0016132:	56                   	push   esi
c0016133:	be e0 91 02 c0       	mov    esi,0xc00291e0
c0016138:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001613c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001613e:	a1 cc 91 02 c0       	mov    eax,ds:0xc00291cc
c0016143:	5e                   	pop    esi
c0016144:	c7 05 cc 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291cc,0x0
c001614e:	5f                   	pop    edi
c001614f:	c3                   	ret    

c0016150 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016150:	55                   	push   ebp
c0016151:	57                   	push   edi
c0016152:	56                   	push   esi
c0016153:	53                   	push   ebx
c0016154:	83 ec 0c             	sub    esp,0xc
c0016157:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001615b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001615f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016163:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016167:	fa                   	cli    
c0016168:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c001616e:	80 3d c5 91 02 c0 00 	cmp    BYTE PTR ds:0xc00291c5,0x0
c0016175:	75 15                	jne    c001618c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016177:	e8 50 f2 ff ff       	call   c00153cc <schedule()>
c001617c:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0016181:	48                   	dec    eax
c0016182:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0016187:	75 de                	jne    c0016167 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016189:	fb                   	sti    
c001618a:	eb db                	jmp    c0016167 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001618c:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0016191:	c7 05 cc 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291cc,0x0
c001619b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001619f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00161a3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00161a7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00161ab:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00161af:	0f b7 ff             	movzx  edi,di
c00161b2:	0f b7 f6             	movzx  esi,si
c00161b5:	50                   	push   eax
c00161b6:	6a 20                	push   0x20
c00161b8:	6a 00                	push   0x0
c00161ba:	68 e0 91 02 c0       	push   0xc00291e0
c00161bf:	e8 2c a3 fe ff       	call   c00004f0 <memset>
c00161c4:	5a                   	pop    edx
c00161c5:	59                   	pop    ecx
c00161c6:	57                   	push   edi
c00161c7:	56                   	push   esi
c00161c8:	e8 2d fe ff ff       	call   c0015ffa <Vm::realToLinear(unsigned short, unsigned short)>
c00161cd:	83 c4 10             	add    esp,0x10
c00161d0:	89 c7                	mov    edi,eax
c00161d2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00161d6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00161da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00161dc:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00161e1:	c6 05 c5 91 02 c0 00 	mov    BYTE PTR ds:0xc00291c5,0x0
c00161e8:	48                   	dec    eax
c00161e9:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c00161ee:	75 01                	jne    c00161f1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00161f0:	fb                   	sti    
c00161f1:	83 ec 0c             	sub    esp,0xc
c00161f4:	ff 35 c8 91 02 c0    	push   DWORD PTR ds:0xc00291c8
c00161fa:	e8 e5 f6 ff ff       	call   c00158e4 <unblockTask(ThreadControlBlock*)>
c00161ff:	83 c4 1c             	add    esp,0x1c
c0016202:	b0 01                	mov    al,0x1
c0016204:	5b                   	pop    ebx
c0016205:	5e                   	pop    esi
c0016206:	5f                   	pop    edi
c0016207:	5d                   	pop    ebp
c0016208:	c3                   	ret    

c0016209 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016209:	55                   	push   ebp
c001620a:	57                   	push   edi
c001620b:	56                   	push   esi
c001620c:	53                   	push   ebx
c001620d:	83 ec 34             	sub    esp,0x34
c0016210:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016214:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016218:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001621c:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016220:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016224:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016228:	68 18 1b 02 c0       	push   0xc0021b18
c001622d:	e8 45 47 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0016232:	83 c4 10             	add    esp,0x10
c0016235:	fa                   	cli    
c0016236:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c001623c:	8a 1d c5 91 02 c0    	mov    bl,BYTE PTR ds:0xc00291c5
c0016242:	84 db                	test   bl,bl
c0016244:	75 15                	jne    c001625b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016246:	e8 81 f1 ff ff       	call   c00153cc <schedule()>
c001624b:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0016250:	48                   	dec    eax
c0016251:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0016256:	75 dd                	jne    c0016235 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016258:	fb                   	sti    
c0016259:	eb da                	jmp    c0016235 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c001625b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001625f:	a1 c8 91 02 c0       	mov    eax,ds:0xc00291c8
c0016264:	c7 05 cc 91 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00291cc,0x0
c001626e:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016272:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016276:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001627a:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001627e:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016282:	50                   	push   eax
c0016283:	6a 20                	push   0x20
c0016285:	6a 00                	push   0x0
c0016287:	68 e0 91 02 c0       	push   0xc00291e0
c001628c:	e8 5f a2 fe ff       	call   c00004f0 <memset>
c0016291:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016298:	e8 11 18 ff ff       	call   c0007aae <malloc>
c001629d:	83 c4 0c             	add    esp,0xc
c00162a0:	89 c5                	mov    ebp,eax
c00162a2:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c00162a8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00162ac:	50                   	push   eax
c00162ad:	e8 1e 4f ff ff       	call   c000b1d0 <File::File(char const*, Process*)>
c00162b2:	83 c4 10             	add    esp,0x10
c00162b5:	85 ed                	test   ebp,ebp
c00162b7:	75 0a                	jne    c00162c3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c00162b9:	83 ec 0c             	sub    esp,0xc
c00162bc:	68 3a 1b 02 c0       	push   0xc0021b3a
c00162c1:	eb 2b                	jmp    c00162ee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c00162c3:	50                   	push   eax
c00162c4:	8d 44 24 17          	lea    eax,[esp+0x17]
c00162c8:	50                   	push   eax
c00162c9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00162cd:	50                   	push   eax
c00162ce:	55                   	push   ebp
c00162cf:	e8 64 52 ff ff       	call   c000b538 <File::stat(unsigned long long*, bool*)>
c00162d4:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00162d8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00162dc:	83 c4 10             	add    esp,0x10
c00162df:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00162e4:	74 27                	je     c001630d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c00162e6:	83 ec 0c             	sub    esp,0xc
c00162e9:	68 4e 1b 02 c0       	push   0xc0021b4e
c00162ee:	e8 e8 a8 ff ff       	call   c0010bdb <KePanic(char const*)>
c00162f3:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c00162f8:	83 c4 10             	add    esp,0x10
c00162fb:	48                   	dec    eax
c00162fc:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0016301:	85 c0                	test   eax,eax
c0016303:	75 01                	jne    c0016306 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016305:	fb                   	sti    
c0016306:	31 db                	xor    ebx,ebx
c0016308:	e9 90 00 00 00       	jmp    c001639d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c001630d:	51                   	push   ecx
c001630e:	51                   	push   ecx
c001630f:	6a 01                	push   0x1
c0016311:	55                   	push   ebp
c0016312:	e8 75 4f ff ff       	call   c000b28c <File::open(FileOpenMode)>
c0016317:	83 c4 10             	add    esp,0x10
c001631a:	85 c0                	test   eax,eax
c001631c:	74 26                	je     c0016344 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c001631e:	83 ec 0c             	sub    esp,0xc
c0016321:	68 67 1b 02 c0       	push   0xc0021b67
c0016326:	e8 b0 a8 ff ff       	call   c0010bdb <KePanic(char const*)>
c001632b:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0016330:	83 c4 10             	add    esp,0x10
c0016333:	48                   	dec    eax
c0016334:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0016339:	85 c0                	test   eax,eax
c001633b:	75 c9                	jne    c0016306 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c001633d:	fb                   	sti    
c001633e:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016342:	eb 59                	jmp    c001639d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016344:	0f b7 ff             	movzx  edi,di
c0016347:	50                   	push   eax
c0016348:	0f b7 f6             	movzx  esi,si
c001634b:	50                   	push   eax
c001634c:	57                   	push   edi
c001634d:	56                   	push   esi
c001634e:	e8 a7 fc ff ff       	call   c0015ffa <Vm::realToLinear(unsigned short, unsigned short)>
c0016353:	5a                   	pop    edx
c0016354:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0016357:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001635b:	51                   	push   ecx
c001635c:	50                   	push   eax
c001635d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016361:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016365:	55                   	push   ebp
c0016366:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016369:	83 c4 14             	add    esp,0x14
c001636c:	55                   	push   ebp
c001636d:	e8 78 4f ff ff       	call   c000b2ea <File::close()>
c0016372:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0016377:	83 c4 10             	add    esp,0x10
c001637a:	48                   	dec    eax
c001637b:	c6 05 c5 91 02 c0 00 	mov    BYTE PTR ds:0xc00291c5,0x0
c0016382:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0016387:	85 c0                	test   eax,eax
c0016389:	75 01                	jne    c001638c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c001638b:	fb                   	sti    
c001638c:	83 ec 0c             	sub    esp,0xc
c001638f:	ff 35 c8 91 02 c0    	push   DWORD PTR ds:0xc00291c8
c0016395:	e8 4a f5 ff ff       	call   c00158e4 <unblockTask(ThreadControlBlock*)>
c001639a:	83 c4 10             	add    esp,0x10
c001639d:	83 c4 2c             	add    esp,0x2c
c00163a0:	88 d8                	mov    al,bl
c00163a2:	5b                   	pop    ebx
c00163a3:	5e                   	pop    esi
c00163a4:	5f                   	pop    edi
c00163a5:	5d                   	pop    ebp
c00163a6:	c3                   	ret    

c00163a7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00163a7:	57                   	push   edi
c00163a8:	56                   	push   esi
c00163a9:	53                   	push   ebx
c00163aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00163ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163b2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00163b6:	83 e8 06             	sub    eax,0x6
c00163b9:	0f b7 c0             	movzx  eax,ax
c00163bc:	50                   	push   eax
c00163bd:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00163c2:	50                   	push   eax
c00163c3:	e8 32 fc ff ff       	call   c0015ffa <Vm::realToLinear(unsigned short, unsigned short)>
c00163c8:	5a                   	pop    edx
c00163c9:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c00163cc:	59                   	pop    ecx
c00163cd:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00163d0:	8d 51 fa             	lea    edx,[ecx-0x6]
c00163d3:	81 e2 ff ff 00 00    	and    edx,0xffff
c00163d9:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00163dc:	8d 56 02             	lea    edx,[esi+0x2]
c00163df:	66 89 10             	mov    WORD PTR [eax],dx
c00163e2:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c00163e6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00163ea:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00163ed:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c00163f1:	0f b6 f1             	movzx  esi,cl
c00163f4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00163f8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163fe:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016402:	0f b6 d5             	movzx  edx,ch
c0016405:	74 0a                	je     c0016411 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0016407:	c1 e2 08             	shl    edx,0x8
c001640a:	09 f2                	or     edx,esi
c001640c:	80 ce 02             	or     dh,0x2
c001640f:	eb 08                	jmp    c0016419 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0016411:	c1 e2 08             	shl    edx,0x8
c0016414:	09 f2                	or     edx,esi
c0016416:	80 e6 fd             	and    dh,0xfd
c0016419:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001641d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016422:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016426:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c001642e:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016431:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016439:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001643c:	5b                   	pop    ebx
c001643d:	5e                   	pop    esi
c001643e:	5f                   	pop    edi
c001643f:	c3                   	ret    

c0016440 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016440:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016445:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001644a:	c1 e0 04             	shl    eax,0x4
c001644d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016450:	c3                   	ret    

c0016451 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016451:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016456:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001645b:	c1 e0 04             	shl    eax,0x4
c001645e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016462:	c3                   	ret    

c0016463 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016463:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016468:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001646d:	c1 e0 04             	shl    eax,0x4
c0016470:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016473:	c3                   	ret    

c0016474 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016474:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016479:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001647e:	c1 e0 04             	shl    eax,0x4
c0016481:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016485:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016488:	c3                   	ret    

c0016489 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016489:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001648e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016493:	c1 e0 04             	shl    eax,0x4
c0016496:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001649a:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001649e:	c3                   	ret    

c001649f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001649f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00164a4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00164a9:	c1 e0 04             	shl    eax,0x4
c00164ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164b0:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00164b3:	c3                   	ret    

c00164b4 <Vm::faultHandler(regs*)>:
c00164b4:	55                   	push   ebp
c00164b5:	57                   	push   edi
c00164b6:	56                   	push   esi
c00164b7:	53                   	push   ebx
c00164b8:	83 ec 2c             	sub    esp,0x2c
c00164bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00164bf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164c2:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00164c6:	0f b7 f8             	movzx  edi,ax
c00164c9:	52                   	push   edx
c00164ca:	0f b7 c0             	movzx  eax,ax
c00164cd:	50                   	push   eax
c00164ce:	e8 27 fb ff ff       	call   c0015ffa <Vm::realToLinear(unsigned short, unsigned short)>
c00164d3:	5a                   	pop    edx
c00164d4:	59                   	pop    ecx
c00164d5:	89 c1                	mov    ecx,eax
c00164d7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00164da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00164de:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00164e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00164e7:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00164ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164ee:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00164f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00164f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00164fb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00164ff:	e8 f6 fa ff ff       	call   c0015ffa <Vm::realToLinear(unsigned short, unsigned short)>
c0016504:	5e                   	pop    esi
c0016505:	be 06 00 00 00       	mov    esi,0x6
c001650a:	5d                   	pop    ebp
c001650b:	31 ed                	xor    ebp,ebp
c001650d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016512:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016515:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c001651b:	0f 84 74 02 00 00    	je     c0016795 <Vm::faultHandler(regs*)+0x2e1>
c0016521:	0f 87 94 00 00 00    	ja     c00165bb <Vm::faultHandler(regs*)+0x107>
c0016527:	83 fa 66             	cmp    edx,0x66
c001652a:	0f 84 e2 01 00 00    	je     c0016712 <Vm::faultHandler(regs*)+0x25e>
c0016530:	77 47                	ja     c0016579 <Vm::faultHandler(regs*)+0xc5>
c0016532:	83 fa 36             	cmp    edx,0x36
c0016535:	0f 84 ca 01 00 00    	je     c0016705 <Vm::faultHandler(regs*)+0x251>
c001653b:	77 1a                	ja     c0016557 <Vm::faultHandler(regs*)+0xa3>
c001653d:	83 fa 26             	cmp    edx,0x26
c0016540:	0f 84 98 01 00 00    	je     c00166de <Vm::faultHandler(regs*)+0x22a>
c0016546:	83 fa 2e             	cmp    edx,0x2e
c0016549:	0f 85 21 06 00 00    	jne    c0016b70 <Vm::faultHandler(regs*)+0x6bc>
c001654f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016552:	31 f6                	xor    esi,esi
c0016554:	41                   	inc    ecx
c0016555:	eb bb                	jmp    c0016512 <Vm::faultHandler(regs*)+0x5e>
c0016557:	83 fa 64             	cmp    edx,0x64
c001655a:	0f 84 8b 01 00 00    	je     c00166eb <Vm::faultHandler(regs*)+0x237>
c0016560:	0f 87 92 01 00 00    	ja     c00166f8 <Vm::faultHandler(regs*)+0x244>
c0016566:	83 fa 3e             	cmp    edx,0x3e
c0016569:	0f 85 01 06 00 00    	jne    c0016b70 <Vm::faultHandler(regs*)+0x6bc>
c001656f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016572:	be 01 00 00 00       	mov    esi,0x1
c0016577:	eb db                	jmp    c0016554 <Vm::faultHandler(regs*)+0xa0>
c0016579:	83 fa 6d             	cmp    edx,0x6d
c001657c:	0f 84 34 03 00 00    	je     c00168b6 <Vm::faultHandler(regs*)+0x402>
c0016582:	77 17                	ja     c001659b <Vm::faultHandler(regs*)+0xe7>
c0016584:	83 fa 67             	cmp    edx,0x67
c0016587:	0f 84 92 01 00 00    	je     c001671f <Vm::faultHandler(regs*)+0x26b>
c001658d:	83 fa 6c             	cmp    edx,0x6c
c0016590:	0f 84 b1 02 00 00    	je     c0016847 <Vm::faultHandler(regs*)+0x393>
c0016596:	e9 d5 05 00 00       	jmp    c0016b70 <Vm::faultHandler(regs*)+0x6bc>
c001659b:	83 fa 6f             	cmp    edx,0x6f
c001659e:	0f 84 3d 04 00 00    	je     c00169e1 <Vm::faultHandler(regs*)+0x52d>
c00165a4:	0f 82 9f 03 00 00    	jb     c0016949 <Vm::faultHandler(regs*)+0x495>
c00165aa:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00165b0:	0f 84 76 01 00 00    	je     c001672c <Vm::faultHandler(regs*)+0x278>
c00165b6:	e9 b5 05 00 00       	jmp    c0016b70 <Vm::faultHandler(regs*)+0x6bc>
c00165bb:	81 fa ec 00 00 00    	cmp    edx,0xec
c00165c1:	0f 84 51 05 00 00    	je     c0016b18 <Vm::faultHandler(regs*)+0x664>
c00165c7:	0f 87 a9 00 00 00    	ja     c0016676 <Vm::faultHandler(regs*)+0x1c2>
c00165cd:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00165d3:	0f 84 d0 04 00 00    	je     c0016aa9 <Vm::faultHandler(regs*)+0x5f5>
c00165d9:	77 78                	ja     c0016653 <Vm::faultHandler(regs*)+0x19f>
c00165db:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00165e1:	0f 84 0e 02 00 00    	je     c00167f5 <Vm::faultHandler(regs*)+0x341>
c00165e7:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00165ed:	0f 85 7d 05 00 00    	jne    c0016b70 <Vm::faultHandler(regs*)+0x6bc>
c00165f3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00165f7:	89 d1                	mov    ecx,edx
c00165f9:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00165fc:	c1 e1 08             	shl    ecx,0x8
c00165ff:	09 ca                	or     edx,ecx
c0016601:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016604:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016608:	89 d1                	mov    ecx,edx
c001660a:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c001660e:	c1 e1 08             	shl    ecx,0x8
c0016611:	09 ca                	or     edx,ecx
c0016613:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016616:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c001661a:	89 d1                	mov    ecx,edx
c001661c:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016620:	c1 e1 08             	shl    ecx,0x8
c0016623:	09 ca                	or     edx,ecx
c0016625:	81 ca 00 02 02 00    	or     edx,0x20200
c001662b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001662e:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016632:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016638:	d1 e8                	shr    eax,1
c001663a:	83 e0 01             	and    eax,0x1
c001663d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016640:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016643:	83 c0 06             	add    eax,0x6
c0016646:	25 ff ff 00 00       	and    eax,0xffff
c001664b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001664e:	e9 19 05 00 00       	jmp    c0016b6c <Vm::faultHandler(regs*)+0x6b8>
c0016653:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016659:	0f 84 8f 04 00 00    	je     c0016aee <Vm::faultHandler(regs*)+0x63a>
c001665f:	0f 82 60 04 00 00    	jb     c0016ac5 <Vm::faultHandler(regs*)+0x611>
c0016665:	81 fa e7 00 00 00    	cmp    edx,0xe7
c001666b:	0f 84 94 04 00 00    	je     c0016b05 <Vm::faultHandler(regs*)+0x651>
c0016671:	e9 fa 04 00 00       	jmp    c0016b70 <Vm::faultHandler(regs*)+0x6bc>
c0016676:	81 fa ef 00 00 00    	cmp    edx,0xef
c001667c:	0f 84 d7 04 00 00    	je     c0016b59 <Vm::faultHandler(regs*)+0x6a5>
c0016682:	77 2e                	ja     c00166b2 <Vm::faultHandler(regs*)+0x1fe>
c0016684:	81 fa ed 00 00 00    	cmp    edx,0xed
c001668a:	0f 84 a4 04 00 00    	je     c0016b34 <Vm::faultHandler(regs*)+0x680>
c0016690:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016696:	0f 85 d4 04 00 00    	jne    c0016b70 <Vm::faultHandler(regs*)+0x6bc>
c001669c:	50                   	push   eax
c001669d:	50                   	push   eax
c001669e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00166a2:	50                   	push   eax
c00166a3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00166a7:	50                   	push   eax
c00166a8:	e8 17 f9 ff ff       	call   c0015fc4 <Vm::outbv(unsigned short, unsigned char)>
c00166ad:	e9 9f 04 00 00       	jmp    c0016b51 <Vm::faultHandler(regs*)+0x69d>
c00166b2:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00166b8:	0f 84 6d 01 00 00    	je     c001682b <Vm::faultHandler(regs*)+0x377>
c00166be:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00166c4:	0f 84 6f 01 00 00    	je     c0016839 <Vm::faultHandler(regs*)+0x385>
c00166ca:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00166d0:	0f 85 9a 04 00 00    	jne    c0016b70 <Vm::faultHandler(regs*)+0x6bc>
c00166d6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166d9:	e9 76 fe ff ff       	jmp    c0016554 <Vm::faultHandler(regs*)+0xa0>
c00166de:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166e1:	be 02 00 00 00       	mov    esi,0x2
c00166e6:	e9 69 fe ff ff       	jmp    c0016554 <Vm::faultHandler(regs*)+0xa0>
c00166eb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166ee:	be 03 00 00 00       	mov    esi,0x3
c00166f3:	e9 5c fe ff ff       	jmp    c0016554 <Vm::faultHandler(regs*)+0xa0>
c00166f8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00166fb:	be 04 00 00 00       	mov    esi,0x4
c0016700:	e9 4f fe ff ff       	jmp    c0016554 <Vm::faultHandler(regs*)+0xa0>
c0016705:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016708:	be 05 00 00 00       	mov    esi,0x5
c001670d:	e9 42 fe ff ff       	jmp    c0016554 <Vm::faultHandler(regs*)+0xa0>
c0016712:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016715:	bd 01 00 00 00       	mov    ebp,0x1
c001671a:	e9 35 fe ff ff       	jmp    c0016554 <Vm::faultHandler(regs*)+0xa0>
c001671f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016722:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016727:	e9 28 fe ff ff       	jmp    c0016554 <Vm::faultHandler(regs*)+0xa0>
c001672c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001672f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016733:	83 e5 01             	and    ebp,0x1
c0016736:	74 30                	je     c0016768 <Vm::faultHandler(regs*)+0x2b4>
c0016738:	83 e9 04             	sub    ecx,0x4
c001673b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016741:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016747:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001674a:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001674d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016753:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016757:	0f 84 0c 04 00 00    	je     c0016b69 <Vm::faultHandler(regs*)+0x6b5>
c001675d:	80 ce 02             	or     dh,0x2
c0016760:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016763:	e9 01 04 00 00       	jmp    c0016b69 <Vm::faultHandler(regs*)+0x6b5>
c0016768:	83 e9 02             	sub    ecx,0x2
c001676b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016771:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016774:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016778:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001677e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016782:	74 05                	je     c0016789 <Vm::faultHandler(regs*)+0x2d5>
c0016784:	80 ce 02             	or     dh,0x2
c0016787:	eb 03                	jmp    c001678c <Vm::faultHandler(regs*)+0x2d8>
c0016789:	80 e6 fd             	and    dh,0xfd
c001678c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016790:	e9 d4 03 00 00       	jmp    c0016b69 <Vm::faultHandler(regs*)+0x6b5>
c0016795:	83 e5 01             	and    ebp,0x1
c0016798:	74 2a                	je     c00167c4 <Vm::faultHandler(regs*)+0x310>
c001679a:	8b 10                	mov    edx,DWORD PTR [eax]
c001679c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00167a2:	81 ca 00 02 02 00    	or     edx,0x20200
c00167a8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00167ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00167ad:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00167b3:	c1 e8 09             	shr    eax,0x9
c00167b6:	83 e0 01             	and    eax,0x1
c00167b9:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00167bc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00167bf:	83 c0 04             	add    eax,0x4
c00167c2:	eb 24                	jmp    c00167e8 <Vm::faultHandler(regs*)+0x334>
c00167c4:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00167c7:	81 ca 00 02 02 00    	or     edx,0x20200
c00167cd:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00167d0:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00167d3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00167d9:	c1 e8 09             	shr    eax,0x9
c00167dc:	83 e0 01             	and    eax,0x1
c00167df:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00167e2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00167e5:	83 c0 02             	add    eax,0x2
c00167e8:	25 ff ff 00 00       	and    eax,0xffff
c00167ed:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00167f0:	e9 74 03 00 00       	jmp    c0016b69 <Vm::faultHandler(regs*)+0x6b5>
c00167f5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00167f9:	3d ee 00 00 00       	cmp    eax,0xee
c00167fe:	75 10                	jne    c0016810 <Vm::faultHandler(regs*)+0x35c>
c0016800:	83 ec 0c             	sub    esp,0xc
c0016803:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016806:	e8 56 f8 ff ff       	call   c0016061 <Vm::mainloop3(unsigned long)>
c001680b:	e9 44 03 00 00       	jmp    c0016b54 <Vm::faultHandler(regs*)+0x6a0>
c0016810:	83 ec 0c             	sub    esp,0xc
c0016813:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016817:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001681b:	51                   	push   ecx
c001681c:	50                   	push   eax
c001681d:	53                   	push   ebx
c001681e:	e8 84 fb ff ff       	call   c00163a7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016823:	83 c4 20             	add    esp,0x20
c0016826:	e9 41 03 00 00       	jmp    c0016b6c <Vm::faultHandler(regs*)+0x6b8>
c001682b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016830:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016834:	e9 30 03 00 00       	jmp    c0016b69 <Vm::faultHandler(regs*)+0x6b5>
c0016839:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001683e:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016842:	e9 22 03 00 00       	jmp    c0016b69 <Vm::faultHandler(regs*)+0x6b5>
c0016847:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001684a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001684f:	74 2b                	je     c001687c <Vm::faultHandler(regs*)+0x3c8>
c0016851:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016858:	76 22                	jbe    c001687c <Vm::faultHandler(regs*)+0x3c8>
c001685a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001685e:	50                   	push   eax
c001685f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016863:	50                   	push   eax
c0016864:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016868:	50                   	push   eax
c0016869:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001686d:	50                   	push   eax
c001686e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016872:	50                   	push   eax
c0016873:	6a 6c                	push   0x6c
c0016875:	6a 6c                	push   0x6c
c0016877:	e9 bd 01 00 00       	jmp    c0016a39 <Vm::faultHandler(regs*)+0x585>
c001687c:	83 ec 0c             	sub    esp,0xc
c001687f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016883:	0f b7 f6             	movzx  esi,si
c0016886:	50                   	push   eax
c0016887:	e8 25 f7 ff ff       	call   c0015fb1 <Vm::inbv(unsigned short)>
c001688c:	83 c4 0c             	add    esp,0xc
c001688f:	0f b6 c0             	movzx  eax,al
c0016892:	50                   	push   eax
c0016893:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016897:	50                   	push   eax
c0016898:	56                   	push   esi
c0016899:	e8 d6 fb ff ff       	call   c0016474 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001689e:	83 c4 10             	add    esp,0x10
c00168a1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00168a4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00168a8:	74 03                	je     c00168ad <Vm::faultHandler(regs*)+0x3f9>
c00168aa:	48                   	dec    eax
c00168ab:	eb 01                	jmp    c00168ae <Vm::faultHandler(regs*)+0x3fa>
c00168ad:	40                   	inc    eax
c00168ae:	0f b7 c0             	movzx  eax,ax
c00168b1:	e9 8b 00 00 00       	jmp    c0016941 <Vm::faultHandler(regs*)+0x48d>
c00168b6:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00168b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00168bc:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00168c1:	74 29                	je     c00168ec <Vm::faultHandler(regs*)+0x438>
c00168c3:	3d ff ff 00 00       	cmp    eax,0xffff
c00168c8:	76 22                	jbe    c00168ec <Vm::faultHandler(regs*)+0x438>
c00168ca:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00168ce:	50                   	push   eax
c00168cf:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00168d3:	50                   	push   eax
c00168d4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00168d8:	50                   	push   eax
c00168d9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00168dd:	50                   	push   eax
c00168de:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00168e2:	50                   	push   eax
c00168e3:	6a 6d                	push   0x6d
c00168e5:	6a 6d                	push   0x6d
c00168e7:	e9 4d 01 00 00       	jmp    c0016a39 <Vm::faultHandler(regs*)+0x585>
c00168ec:	0f b7 c8             	movzx  ecx,ax
c00168ef:	0f b7 f6             	movzx  esi,si
c00168f2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00168f5:	83 e5 01             	and    ebp,0x1
c00168f8:	74 20                	je     c001691a <Vm::faultHandler(regs*)+0x466>
c00168fa:	ed                   	in     eax,dx
c00168fb:	55                   	push   ebp
c00168fc:	50                   	push   eax
c00168fd:	51                   	push   ecx
c00168fe:	56                   	push   esi
c00168ff:	e8 9b fb ff ff       	call   c001649f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016904:	83 c4 10             	add    esp,0x10
c0016907:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001690a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001690e:	74 05                	je     c0016915 <Vm::faultHandler(regs*)+0x461>
c0016910:	83 e8 04             	sub    eax,0x4
c0016913:	eb 27                	jmp    c001693c <Vm::faultHandler(regs*)+0x488>
c0016915:	83 c0 04             	add    eax,0x4
c0016918:	eb 22                	jmp    c001693c <Vm::faultHandler(regs*)+0x488>
c001691a:	66 ed                	in     ax,dx
c001691c:	0f b7 c0             	movzx  eax,ax
c001691f:	57                   	push   edi
c0016920:	50                   	push   eax
c0016921:	51                   	push   ecx
c0016922:	56                   	push   esi
c0016923:	e8 61 fb ff ff       	call   c0016489 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016928:	83 c4 10             	add    esp,0x10
c001692b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001692e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016932:	74 05                	je     c0016939 <Vm::faultHandler(regs*)+0x485>
c0016934:	83 e8 02             	sub    eax,0x2
c0016937:	eb 03                	jmp    c001693c <Vm::faultHandler(regs*)+0x488>
c0016939:	83 c0 02             	add    eax,0x2
c001693c:	25 ff ff 00 00       	and    eax,0xffff
c0016941:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016944:	e9 20 02 00 00       	jmp    c0016b69 <Vm::faultHandler(regs*)+0x6b5>
c0016949:	8d 46 ff             	lea    eax,[esi-0x1]
c001694c:	0f b6 f0             	movzx  esi,al
c001694f:	83 fe 05             	cmp    esi,0x5
c0016952:	77 23                	ja     c0016977 <Vm::faultHandler(regs*)+0x4c3>
c0016954:	ff 24 b5 dc 1b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffde424]
c001695b:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0016960:	eb 15                	jmp    c0016977 <Vm::faultHandler(regs*)+0x4c3>
c0016962:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016966:	eb 0f                	jmp    c0016977 <Vm::faultHandler(regs*)+0x4c3>
c0016968:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001696c:	eb 09                	jmp    c0016977 <Vm::faultHandler(regs*)+0x4c3>
c001696e:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016972:	eb 03                	jmp    c0016977 <Vm::faultHandler(regs*)+0x4c3>
c0016974:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016977:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001697a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001697f:	74 29                	je     c00169aa <Vm::faultHandler(regs*)+0x4f6>
c0016981:	3d ff ff 00 00       	cmp    eax,0xffff
c0016986:	76 22                	jbe    c00169aa <Vm::faultHandler(regs*)+0x4f6>
c0016988:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001698c:	50                   	push   eax
c001698d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016991:	50                   	push   eax
c0016992:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016996:	50                   	push   eax
c0016997:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001699b:	50                   	push   eax
c001699c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00169a0:	50                   	push   eax
c00169a1:	6a 6e                	push   0x6e
c00169a3:	6a 6e                	push   0x6e
c00169a5:	e9 8f 00 00 00       	jmp    c0016a39 <Vm::faultHandler(regs*)+0x585>
c00169aa:	0f b7 c0             	movzx  eax,ax
c00169ad:	52                   	push   edx
c00169ae:	52                   	push   edx
c00169af:	50                   	push   eax
c00169b0:	57                   	push   edi
c00169b1:	e8 8a fa ff ff       	call   c0016440 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00169b6:	59                   	pop    ecx
c00169b7:	0f b6 c0             	movzx  eax,al
c00169ba:	5e                   	pop    esi
c00169bb:	50                   	push   eax
c00169bc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00169c0:	50                   	push   eax
c00169c1:	e8 fe f5 ff ff       	call   c0015fc4 <Vm::outbv(unsigned short, unsigned char)>
c00169c6:	83 c4 10             	add    esp,0x10
c00169c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00169cc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00169d0:	74 03                	je     c00169d5 <Vm::faultHandler(regs*)+0x521>
c00169d2:	48                   	dec    eax
c00169d3:	eb 01                	jmp    c00169d6 <Vm::faultHandler(regs*)+0x522>
c00169d5:	40                   	inc    eax
c00169d6:	0f b7 c0             	movzx  eax,ax
c00169d9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00169dc:	e9 88 01 00 00       	jmp    c0016b69 <Vm::faultHandler(regs*)+0x6b5>
c00169e1:	8d 46 ff             	lea    eax,[esi-0x1]
c00169e4:	0f b6 f0             	movzx  esi,al
c00169e7:	83 fe 05             	cmp    esi,0x5
c00169ea:	77 1e                	ja     c0016a0a <Vm::faultHandler(regs*)+0x556>
c00169ec:	ff 24 b5 f4 1b 02 c0 	jmp    DWORD PTR [esi*4-0x3ffde40c]
c00169f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00169f7:	eb 11                	jmp    c0016a0a <Vm::faultHandler(regs*)+0x556>
c00169f9:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00169fc:	eb 0c                	jmp    c0016a0a <Vm::faultHandler(regs*)+0x556>
c00169fe:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0016a01:	eb 07                	jmp    c0016a0a <Vm::faultHandler(regs*)+0x556>
c0016a03:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016a06:	eb 02                	jmp    c0016a0a <Vm::faultHandler(regs*)+0x556>
c0016a08:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0016a0a:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016a0d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016a12:	74 37                	je     c0016a4b <Vm::faultHandler(regs*)+0x597>
c0016a14:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0016a1a:	76 2f                	jbe    c0016a4b <Vm::faultHandler(regs*)+0x597>
c0016a1c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016a20:	50                   	push   eax
c0016a21:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016a25:	50                   	push   eax
c0016a26:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016a2a:	50                   	push   eax
c0016a2b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016a2f:	50                   	push   eax
c0016a30:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016a34:	50                   	push   eax
c0016a35:	6a 6f                	push   0x6f
c0016a37:	6a 6f                	push   0x6f
c0016a39:	68 80 1b 02 c0       	push   0xc0021b80
c0016a3e:	e8 34 3f ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0016a43:	83 c4 20             	add    esp,0x20
c0016a46:	e9 83 01 00 00       	jmp    c0016bce <Vm::faultHandler(regs*)+0x71a>
c0016a4b:	0f b7 d7             	movzx  edx,di
c0016a4e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016a51:	0f b7 c6             	movzx  eax,si
c0016a54:	81 e1 00 04 00 00    	and    ecx,0x400
c0016a5a:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016a5d:	83 e5 01             	and    ebp,0x1
c0016a60:	74 1d                	je     c0016a7f <Vm::faultHandler(regs*)+0x5cb>
c0016a62:	55                   	push   ebp
c0016a63:	55                   	push   ebp
c0016a64:	50                   	push   eax
c0016a65:	52                   	push   edx
c0016a66:	e8 f8 f9 ff ff       	call   c0016463 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016a6b:	83 c4 10             	add    esp,0x10
c0016a6e:	89 fa                	mov    edx,edi
c0016a70:	ef                   	out    dx,eax
c0016a71:	85 c9                	test   ecx,ecx
c0016a73:	74 05                	je     c0016a7a <Vm::faultHandler(regs*)+0x5c6>
c0016a75:	83 ee 04             	sub    esi,0x4
c0016a78:	eb 21                	jmp    c0016a9b <Vm::faultHandler(regs*)+0x5e7>
c0016a7a:	83 c6 04             	add    esi,0x4
c0016a7d:	eb 1c                	jmp    c0016a9b <Vm::faultHandler(regs*)+0x5e7>
c0016a7f:	55                   	push   ebp
c0016a80:	55                   	push   ebp
c0016a81:	50                   	push   eax
c0016a82:	52                   	push   edx
c0016a83:	e8 c9 f9 ff ff       	call   c0016451 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016a88:	83 c4 10             	add    esp,0x10
c0016a8b:	89 fa                	mov    edx,edi
c0016a8d:	66 ef                	out    dx,ax
c0016a8f:	85 c9                	test   ecx,ecx
c0016a91:	74 05                	je     c0016a98 <Vm::faultHandler(regs*)+0x5e4>
c0016a93:	83 ee 02             	sub    esi,0x2
c0016a96:	eb 03                	jmp    c0016a9b <Vm::faultHandler(regs*)+0x5e7>
c0016a98:	83 c6 02             	add    esi,0x2
c0016a9b:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016aa1:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016aa4:	e9 c0 00 00 00       	jmp    c0016b69 <Vm::faultHandler(regs*)+0x6b5>
c0016aa9:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016ab0:	83 ec 0c             	sub    esp,0xc
c0016ab3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016ab7:	50                   	push   eax
c0016ab8:	e8 f4 f4 ff ff       	call   c0015fb1 <Vm::inbv(unsigned short)>
c0016abd:	0f b6 c0             	movzx  eax,al
c0016ac0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016ac3:	eb 3a                	jmp    c0016aff <Vm::faultHandler(regs*)+0x64b>
c0016ac5:	83 e5 01             	and    ebp,0x1
c0016ac8:	74 07                	je     c0016ad1 <Vm::faultHandler(regs*)+0x61d>
c0016aca:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016ace:	ed                   	in     eax,dx
c0016acf:	eb 14                	jmp    c0016ae5 <Vm::faultHandler(regs*)+0x631>
c0016ad1:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016ad4:	66 31 f6             	xor    si,si
c0016ad7:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016ada:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016ade:	66 ed                	in     ax,dx
c0016ae0:	0f b7 c0             	movzx  eax,ax
c0016ae3:	09 f0                	or     eax,esi
c0016ae5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016ae8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016aec:	eb 7e                	jmp    c0016b6c <Vm::faultHandler(regs*)+0x6b8>
c0016aee:	52                   	push   edx
c0016aef:	52                   	push   edx
c0016af0:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016af4:	50                   	push   eax
c0016af5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016af9:	50                   	push   eax
c0016afa:	e8 c5 f4 ff ff       	call   c0015fc4 <Vm::outbv(unsigned short, unsigned char)>
c0016aff:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016b03:	eb 4f                	jmp    c0016b54 <Vm::faultHandler(regs*)+0x6a0>
c0016b05:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016b08:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016b0c:	83 e5 01             	and    ebp,0x1
c0016b0f:	74 03                	je     c0016b14 <Vm::faultHandler(regs*)+0x660>
c0016b11:	ef                   	out    dx,eax
c0016b12:	eb d4                	jmp    c0016ae8 <Vm::faultHandler(regs*)+0x634>
c0016b14:	66 ef                	out    dx,ax
c0016b16:	eb d0                	jmp    c0016ae8 <Vm::faultHandler(regs*)+0x634>
c0016b18:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016b1f:	83 ec 0c             	sub    esp,0xc
c0016b22:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016b26:	50                   	push   eax
c0016b27:	e8 85 f4 ff ff       	call   c0015fb1 <Vm::inbv(unsigned short)>
c0016b2c:	0f b6 c0             	movzx  eax,al
c0016b2f:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016b32:	eb 1d                	jmp    c0016b51 <Vm::faultHandler(regs*)+0x69d>
c0016b34:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016b37:	83 e5 01             	and    ebp,0x1
c0016b3a:	74 03                	je     c0016b3f <Vm::faultHandler(regs*)+0x68b>
c0016b3c:	ed                   	in     eax,dx
c0016b3d:	eb 0d                	jmp    c0016b4c <Vm::faultHandler(regs*)+0x698>
c0016b3f:	66 ed                	in     ax,dx
c0016b41:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016b44:	0f b7 c0             	movzx  eax,ax
c0016b47:	66 31 d2             	xor    dx,dx
c0016b4a:	09 d0                	or     eax,edx
c0016b4c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016b4f:	eb 18                	jmp    c0016b69 <Vm::faultHandler(regs*)+0x6b5>
c0016b51:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016b54:	83 c4 10             	add    esp,0x10
c0016b57:	eb 13                	jmp    c0016b6c <Vm::faultHandler(regs*)+0x6b8>
c0016b59:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016b5c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016b5f:	83 e5 01             	and    ebp,0x1
c0016b62:	74 03                	je     c0016b67 <Vm::faultHandler(regs*)+0x6b3>
c0016b64:	ef                   	out    dx,eax
c0016b65:	eb 02                	jmp    c0016b69 <Vm::faultHandler(regs*)+0x6b5>
c0016b67:	66 ef                	out    dx,ax
c0016b69:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016b6c:	b0 01                	mov    al,0x1
c0016b6e:	eb 60                	jmp    c0016bd0 <Vm::faultHandler(regs*)+0x71c>
c0016b70:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016b74:	50                   	push   eax
c0016b75:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016b79:	50                   	push   eax
c0016b7a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016b7e:	50                   	push   eax
c0016b7f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016b83:	50                   	push   eax
c0016b84:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016b88:	50                   	push   eax
c0016b89:	52                   	push   edx
c0016b8a:	52                   	push   edx
c0016b8b:	68 ad 1b 02 c0       	push   0xc0021bad
c0016b90:	e8 e2 3d ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0016b95:	83 c4 20             	add    esp,0x20
c0016b98:	83 ec 0c             	sub    esp,0xc
c0016b9b:	6a 60                	push   0x60
c0016b9d:	e8 0f f4 ff ff       	call   c0015fb1 <Vm::inbv(unsigned short)>
c0016ba2:	83 c4 10             	add    esp,0x10
c0016ba5:	0f b6 d0             	movzx  edx,al
c0016ba8:	83 fa 1c             	cmp    edx,0x1c
c0016bab:	74 05                	je     c0016bb2 <Vm::faultHandler(regs*)+0x6fe>
c0016bad:	83 fa 5a             	cmp    edx,0x5a
c0016bb0:	75 e6                	jne    c0016b98 <Vm::faultHandler(regs*)+0x6e4>
c0016bb2:	0f b6 c0             	movzx  eax,al
c0016bb5:	83 f8 1c             	cmp    eax,0x1c
c0016bb8:	74 05                	je     c0016bbf <Vm::faultHandler(regs*)+0x70b>
c0016bba:	83 f8 5a             	cmp    eax,0x5a
c0016bbd:	75 0f                	jne    c0016bce <Vm::faultHandler(regs*)+0x71a>
c0016bbf:	83 ec 0c             	sub    esp,0xc
c0016bc2:	6a 60                	push   0x60
c0016bc4:	e8 e8 f3 ff ff       	call   c0015fb1 <Vm::inbv(unsigned short)>
c0016bc9:	83 c4 10             	add    esp,0x10
c0016bcc:	eb e4                	jmp    c0016bb2 <Vm::faultHandler(regs*)+0x6fe>
c0016bce:	31 c0                	xor    eax,eax
c0016bd0:	83 c4 2c             	add    esp,0x2c
c0016bd3:	5b                   	pop    ebx
c0016bd4:	5e                   	pop    esi
c0016bd5:	5f                   	pop    edi
c0016bd6:	5d                   	pop    ebp
c0016bd7:	c3                   	ret    

c0016bd8 <noCopro(unsigned long)>:
c0016bd8:	c3                   	ret    

c0016bd9 <nmiHandler(regs*, void*)>:
c0016bd9:	83 ec 0c             	sub    esp,0xc
c0016bdc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0016be1:	83 ec 0c             	sub    esp,0xc
c0016be4:	50                   	push   eax
c0016be5:	e8 c4 06 ff ff       	call   c00072ae <Computer::handleNMI()>
c0016bea:	83 c4 10             	add    esp,0x10
c0016bed:	90                   	nop
c0016bee:	83 c4 0c             	add    esp,0xc
c0016bf1:	c3                   	ret    

c0016bf2 <doubleFault(regs*, void*)>:
c0016bf2:	55                   	push   ebp
c0016bf3:	89 e5                	mov    ebp,esp
c0016bf5:	83 ec 08             	sub    esp,0x8
c0016bf8:	83 ec 0c             	sub    esp,0xc
c0016bfb:	68 0c 1c 02 c0       	push   0xc0021c0c
c0016c00:	e8 d6 9f ff ff       	call   c0010bdb <KePanic(char const*)>
c0016c05:	83 c4 10             	add    esp,0x10
c0016c08:	90                   	nop
c0016c09:	c9                   	leave  
c0016c0a:	c3                   	ret    

c0016c0b <displayDebugInfo(regs*)>:
c0016c0b:	83 ec 1c             	sub    esp,0x1c
c0016c0e:	0f 20 c0             	mov    eax,cr0
c0016c11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c15:	0f 20 d0             	mov    eax,cr2
c0016c18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c1c:	0f 20 d8             	mov    eax,cr3
c0016c1f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016c23:	0f 20 e0             	mov    eax,cr4
c0016c26:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c2d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016c30:	83 ec 08             	sub    esp,0x8
c0016c33:	50                   	push   eax
c0016c34:	68 28 1c 02 c0       	push   0xc0021c28
c0016c39:	e8 39 3d ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0016c3e:	83 c4 10             	add    esp,0x10
c0016c41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c45:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016c48:	83 ec 08             	sub    esp,0x8
c0016c4b:	50                   	push   eax
c0016c4c:	68 19 1c 02 c0       	push   0xc0021c19
c0016c51:	e8 21 3d ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0016c56:	83 c4 10             	add    esp,0x10
c0016c59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c5d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0016c60:	83 ec 08             	sub    esp,0x8
c0016c63:	50                   	push   eax
c0016c64:	68 24 1c 02 c0       	push   0xc0021c24
c0016c69:	e8 09 3d ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0016c6e:	83 c4 10             	add    esp,0x10
c0016c71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c75:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016c78:	83 ec 08             	sub    esp,0x8
c0016c7b:	50                   	push   eax
c0016c7c:	68 33 1c 02 c0       	push   0xc0021c33
c0016c81:	e8 f1 3c ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0016c86:	83 c4 10             	add    esp,0x10
c0016c89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c8d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0016c90:	83 ec 08             	sub    esp,0x8
c0016c93:	50                   	push   eax
c0016c94:	68 3e 1c 02 c0       	push   0xc0021c3e
c0016c99:	e8 d9 3c ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0016c9e:	83 c4 10             	add    esp,0x10
c0016ca1:	83 ec 08             	sub    esp,0x8
c0016ca4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016ca8:	68 49 1c 02 c0       	push   0xc0021c49
c0016cad:	e8 c5 3c ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0016cb2:	83 c4 10             	add    esp,0x10
c0016cb5:	83 ec 08             	sub    esp,0x8
c0016cb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016cbc:	68 54 1c 02 c0       	push   0xc0021c54
c0016cc1:	e8 b1 3c ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0016cc6:	83 c4 10             	add    esp,0x10
c0016cc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ccd:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0016cd0:	c1 e0 05             	shl    eax,0x5
c0016cd3:	8d 90 e0 2b 02 c0    	lea    edx,[eax-0x3ffdd420]
c0016cd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cdd:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0016ce0:	83 ec 04             	sub    esp,0x4
c0016ce3:	52                   	push   edx
c0016ce4:	50                   	push   eax
c0016ce5:	68 5f 1c 02 c0       	push   0xc0021c5f
c0016cea:	e8 88 3c ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0016cef:	83 c4 10             	add    esp,0x10
c0016cf2:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016cf7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016cfd:	83 ec 0c             	sub    esp,0xc
c0016d00:	50                   	push   eax
c0016d01:	e8 45 1a ff ff       	call   c000874b <setActiveTerminal(VgaText*)>
c0016d06:	83 c4 10             	add    esp,0x10
c0016d09:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016d0e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d14:	83 ec 08             	sub    esp,0x8
c0016d17:	68 6e 1c 02 c0       	push   0xc0021c6e
c0016d1c:	50                   	push   eax
c0016d1d:	e8 76 1d ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016d22:	83 c4 10             	add    esp,0x10
c0016d25:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016d2a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016d34:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0016d37:	83 ec 08             	sub    esp,0x8
c0016d3a:	52                   	push   edx
c0016d3b:	50                   	push   eax
c0016d3c:	e8 11 1d ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016d41:	83 c4 10             	add    esp,0x10
c0016d44:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016d49:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d4f:	83 ec 08             	sub    esp,0x8
c0016d52:	68 7c 1c 02 c0       	push   0xc0021c7c
c0016d57:	50                   	push   eax
c0016d58:	e8 3b 1d ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016d5d:	83 c4 10             	add    esp,0x10
c0016d60:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016d65:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d6b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0016d70:	8b 12                	mov    edx,DWORD PTR [edx]
c0016d72:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016d75:	83 c2 0c             	add    edx,0xc
c0016d78:	83 ec 08             	sub    esp,0x8
c0016d7b:	52                   	push   edx
c0016d7c:	50                   	push   eax
c0016d7d:	e8 16 1d ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016d82:	83 c4 10             	add    esp,0x10
c0016d85:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016d8a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016d90:	83 ec 08             	sub    esp,0x8
c0016d93:	68 85 1c 02 c0       	push   0xc0021c85
c0016d98:	50                   	push   eax
c0016d99:	e8 fa 1c ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016d9e:	83 c4 10             	add    esp,0x10
c0016da1:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016da6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016dac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016db0:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0016db3:	83 ec 08             	sub    esp,0x8
c0016db6:	52                   	push   edx
c0016db7:	50                   	push   eax
c0016db8:	e8 95 1c ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016dbd:	83 c4 10             	add    esp,0x10
c0016dc0:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016dc5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016dcb:	83 ec 08             	sub    esp,0x8
c0016dce:	68 8d 1c 02 c0       	push   0xc0021c8d
c0016dd3:	50                   	push   eax
c0016dd4:	e8 bf 1c ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016dd9:	83 c4 10             	add    esp,0x10
c0016ddc:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016de1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016de7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016deb:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016dee:	83 ec 08             	sub    esp,0x8
c0016df1:	52                   	push   edx
c0016df2:	50                   	push   eax
c0016df3:	e8 5a 1c ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016df8:	83 c4 10             	add    esp,0x10
c0016dfb:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016e00:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e06:	83 ec 08             	sub    esp,0x8
c0016e09:	68 95 1c 02 c0       	push   0xc0021c95
c0016e0e:	50                   	push   eax
c0016e0f:	e8 84 1c ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016e14:	83 c4 10             	add    esp,0x10
c0016e17:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016e1c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e22:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016e26:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016e29:	83 ec 08             	sub    esp,0x8
c0016e2c:	52                   	push   edx
c0016e2d:	50                   	push   eax
c0016e2e:	e8 1f 1c ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016e33:	83 c4 10             	add    esp,0x10
c0016e36:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016e3b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e41:	83 ec 08             	sub    esp,0x8
c0016e44:	68 9d 1c 02 c0       	push   0xc0021c9d
c0016e49:	50                   	push   eax
c0016e4a:	e8 49 1c ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016e4f:	83 c4 10             	add    esp,0x10
c0016e52:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016e57:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e5d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016e61:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016e64:	83 ec 08             	sub    esp,0x8
c0016e67:	52                   	push   edx
c0016e68:	50                   	push   eax
c0016e69:	e8 e4 1b ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016e6e:	83 c4 10             	add    esp,0x10
c0016e71:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016e76:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e7c:	83 ec 08             	sub    esp,0x8
c0016e7f:	68 a5 1c 02 c0       	push   0xc0021ca5
c0016e84:	50                   	push   eax
c0016e85:	e8 0e 1c ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016e8a:	83 c4 10             	add    esp,0x10
c0016e8d:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016e92:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016e98:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016e9c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016e9f:	83 ec 08             	sub    esp,0x8
c0016ea2:	52                   	push   edx
c0016ea3:	50                   	push   eax
c0016ea4:	e8 a9 1b ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016ea9:	83 c4 10             	add    esp,0x10
c0016eac:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016eb1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016eb7:	83 ec 08             	sub    esp,0x8
c0016eba:	68 ad 1c 02 c0       	push   0xc0021cad
c0016ebf:	50                   	push   eax
c0016ec0:	e8 d3 1b ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016ec5:	83 c4 10             	add    esp,0x10
c0016ec8:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016ecd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ed3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016ed7:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016eda:	83 ec 08             	sub    esp,0x8
c0016edd:	52                   	push   edx
c0016ede:	50                   	push   eax
c0016edf:	e8 6e 1b ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016ee4:	83 c4 10             	add    esp,0x10
c0016ee7:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016eec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ef2:	83 ec 08             	sub    esp,0x8
c0016ef5:	68 b5 1c 02 c0       	push   0xc0021cb5
c0016efa:	50                   	push   eax
c0016efb:	e8 98 1b ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016f00:	83 c4 10             	add    esp,0x10
c0016f03:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016f08:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f0e:	83 ec 08             	sub    esp,0x8
c0016f11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016f15:	50                   	push   eax
c0016f16:	e8 37 1b ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016f1b:	83 c4 10             	add    esp,0x10
c0016f1e:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016f23:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f29:	83 ec 08             	sub    esp,0x8
c0016f2c:	68 be 1c 02 c0       	push   0xc0021cbe
c0016f31:	50                   	push   eax
c0016f32:	e8 61 1b ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016f37:	83 c4 10             	add    esp,0x10
c0016f3a:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016f3f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f45:	83 ec 08             	sub    esp,0x8
c0016f48:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016f4c:	50                   	push   eax
c0016f4d:	e8 00 1b ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016f52:	83 c4 10             	add    esp,0x10
c0016f55:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016f5a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f60:	83 ec 08             	sub    esp,0x8
c0016f63:	68 c6 1c 02 c0       	push   0xc0021cc6
c0016f68:	50                   	push   eax
c0016f69:	e8 2a 1b ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0016f6e:	83 c4 10             	add    esp,0x10
c0016f71:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0016f76:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016f7c:	83 ec 08             	sub    esp,0x8
c0016f7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016f83:	50                   	push   eax
c0016f84:	e8 c9 1a ff ff       	call   c0008a52 <VgaText::putx(unsigned int)>
c0016f89:	83 c4 10             	add    esp,0x10
c0016f8c:	fa                   	cli    
c0016f8d:	f4                   	hlt    
c0016f8e:	eb fe                	jmp    c0016f8e <displayDebugInfo(regs*)+0x383>

c0016f90 <HalSystemIdle()>:
c0016f90:	56                   	push   esi
c0016f91:	53                   	push   ebx
c0016f92:	83 ec 14             	sub    esp,0x14
c0016f95:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0016f9a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fa0:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016fa6:	83 e0 04             	and    eax,0x4
c0016fa9:	0f b6 c0             	movzx  eax,al
c0016fac:	85 c0                	test   eax,eax
c0016fae:	0f 95 c0             	setne  al
c0016fb1:	0f b6 c0             	movzx  eax,al
c0016fb4:	85 c0                	test   eax,eax
c0016fb6:	74 4c                	je     c0017004 <HalSystemIdle()+0x74>
c0016fb8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0016fbd:	83 ec 08             	sub    esp,0x8
c0016fc0:	68 e1 00 00 00       	push   0xe1
c0016fc5:	50                   	push   eax
c0016fc6:	e8 ed 00 ff ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c0016fcb:	83 c4 10             	add    esp,0x10
c0016fce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016fd2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016fd6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0016fdb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016fdf:	83 e2 02             	and    edx,0x2
c0016fe2:	89 d3                	mov    ebx,edx
c0016fe4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016fe8:	83 e2 00             	and    edx,0x0
c0016feb:	89 d6                	mov    esi,edx
c0016fed:	56                   	push   esi
c0016fee:	53                   	push   ebx
c0016fef:	68 e1 00 00 00       	push   0xe1
c0016ff4:	50                   	push   eax
c0016ff5:	e8 ea 00 ff ff       	call   c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016ffa:	83 c4 10             	add    esp,0x10
c0016ffd:	e8 92 91 fe ff       	call   c0000194 <doTPAUSE>
c0017002:	eb 01                	jmp    c0017005 <HalSystemIdle()+0x75>
c0017004:	f4                   	hlt    
c0017005:	90                   	nop
c0017006:	83 c4 14             	add    esp,0x14
c0017009:	5b                   	pop    ebx
c001700a:	5e                   	pop    esi
c001700b:	c3                   	ret    

c001700c <displayProgramFault(char const*)>:
c001700c:	83 ec 0c             	sub    esp,0xc
c001700f:	83 ec 0c             	sub    esp,0xc
c0017012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017016:	e8 5c 39 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c001701b:	83 c4 10             	add    esp,0x10
c001701e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017023:	8b 00                	mov    eax,DWORD PTR [eax]
c0017025:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017028:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001702e:	85 c0                	test   eax,eax
c0017030:	74 21                	je     c0017053 <displayProgramFault(char const*)+0x47>
c0017032:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017037:	8b 00                	mov    eax,DWORD PTR [eax]
c0017039:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001703c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017042:	6a 04                	push   0x4
c0017044:	6a 0f                	push   0xf
c0017046:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001704a:	50                   	push   eax
c001704b:	e8 ba 1a ff ff       	call   c0008b0a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017050:	83 c4 10             	add    esp,0x10
c0017053:	90                   	nop
c0017054:	83 c4 0c             	add    esp,0xc
c0017057:	c3                   	ret    

c0017058 <gpFault(regs*, void*)>:
c0017058:	83 ec 1c             	sub    esp,0x1c
c001705b:	c7 05 14 92 02 c0 b4 64 01 c0 	mov    DWORD PTR ds:0xc0029214,0xc00164b4
c0017065:	a1 14 92 02 c0       	mov    eax,ds:0xc0029214
c001706a:	85 c0                	test   eax,eax
c001706c:	74 1e                	je     c001708c <gpFault(regs*, void*)+0x34>
c001706e:	a1 14 92 02 c0       	mov    eax,ds:0xc0029214
c0017073:	83 ec 0c             	sub    esp,0xc
c0017076:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001707a:	ff d0                	call   eax
c001707c:	83 c4 10             	add    esp,0x10
c001707f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017083:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017088:	85 c0                	test   eax,eax
c001708a:	75 2e                	jne    c00170ba <gpFault(regs*, void*)+0x62>
c001708c:	83 ec 0c             	sub    esp,0xc
c001708f:	68 ce 1c 02 c0       	push   0xc0021cce
c0017094:	e8 73 ff ff ff       	call   c001700c <displayProgramFault(char const*)>
c0017099:	83 c4 10             	add    esp,0x10
c001709c:	83 ec 0c             	sub    esp,0xc
c001709f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00170a3:	e8 63 fb ff ff       	call   c0016c0b <displayDebugInfo(regs*)>
c00170a8:	83 c4 10             	add    esp,0x10
c00170ab:	83 ec 0c             	sub    esp,0xc
c00170ae:	6a 00                	push   0x0
c00170b0:	e8 a3 ed ff ff       	call   c0015e58 <Thr::terminateFromIRQ(int)>
c00170b5:	83 c4 10             	add    esp,0x10
c00170b8:	eb 01                	jmp    c00170bb <gpFault(regs*, void*)+0x63>
c00170ba:	90                   	nop
c00170bb:	83 c4 1c             	add    esp,0x1c
c00170be:	c3                   	ret    

c00170bf <pgFault(regs*, void*)>:
c00170bf:	83 ec 1c             	sub    esp,0x1c
c00170c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00170c9:	0f 20 d0             	mov    eax,cr2
c00170cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00170d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00170d4:	83 ec 04             	sub    esp,0x4
c00170d7:	52                   	push   edx
c00170d8:	50                   	push   eax
c00170d9:	68 ac 1d 02 c0       	push   0xc0021dac
c00170de:	e8 94 38 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c00170e3:	83 c4 10             	add    esp,0x10
c00170e6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00170eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00170ed:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00170f0:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00170f6:	0f 20 d2             	mov    edx,cr2
c00170f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00170fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017101:	83 ec 08             	sub    esp,0x8
c0017104:	52                   	push   edx
c0017105:	50                   	push   eax
c0017106:	e8 b7 32 ff ff       	call   c000a3c2 <VAS::tryLoadBackOffDisk(unsigned long)>
c001710b:	83 c4 10             	add    esp,0x10
c001710e:	0f b6 c0             	movzx  eax,al
c0017111:	85 c0                	test   eax,eax
c0017113:	75 2e                	jne    c0017143 <pgFault(regs*, void*)+0x84>
c0017115:	83 ec 0c             	sub    esp,0xc
c0017118:	68 e7 1c 02 c0       	push   0xc0021ce7
c001711d:	e8 ea fe ff ff       	call   c001700c <displayProgramFault(char const*)>
c0017122:	83 c4 10             	add    esp,0x10
c0017125:	83 ec 0c             	sub    esp,0xc
c0017128:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001712c:	e8 da fa ff ff       	call   c0016c0b <displayDebugInfo(regs*)>
c0017131:	83 c4 10             	add    esp,0x10
c0017134:	83 ec 0c             	sub    esp,0xc
c0017137:	6a 00                	push   0x0
c0017139:	e8 1a ed ff ff       	call   c0015e58 <Thr::terminateFromIRQ(int)>
c001713e:	83 c4 10             	add    esp,0x10
c0017141:	eb 01                	jmp    c0017144 <pgFault(regs*, void*)+0x85>
c0017143:	90                   	nop
c0017144:	83 c4 1c             	add    esp,0x1c
c0017147:	c3                   	ret    

c0017148 <otherISRHandler(regs*, void*)>:
c0017148:	83 ec 0c             	sub    esp,0xc
c001714b:	83 ec 0c             	sub    esp,0xc
c001714e:	68 d4 1d 02 c0       	push   0xc0021dd4
c0017153:	e8 b4 fe ff ff       	call   c001700c <displayProgramFault(char const*)>
c0017158:	83 c4 10             	add    esp,0x10
c001715b:	83 ec 0c             	sub    esp,0xc
c001715e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017162:	e8 a4 fa ff ff       	call   c0016c0b <displayDebugInfo(regs*)>
c0017167:	83 c4 10             	add    esp,0x10
c001716a:	83 ec 0c             	sub    esp,0xc
c001716d:	6a 00                	push   0x0
c001716f:	e8 e4 ec ff ff       	call   c0015e58 <Thr::terminateFromIRQ(int)>
c0017174:	83 c4 10             	add    esp,0x10
c0017177:	90                   	nop
c0017178:	83 c4 0c             	add    esp,0xc
c001717b:	c3                   	ret    

c001717c <opcodeFault(regs*, void*)>:
c001717c:	55                   	push   ebp
c001717d:	89 e5                	mov    ebp,esp
c001717f:	83 ec 08             	sub    esp,0x8
c0017182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017185:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017188:	83 ec 08             	sub    esp,0x8
c001718b:	50                   	push   eax
c001718c:	68 f2 1c 02 c0       	push   0xc0021cf2
c0017191:	e8 e1 37 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0017196:	83 c4 10             	add    esp,0x10
c0017199:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001719e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00171a4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00171aa:	0f b6 c0             	movzx  eax,al
c00171ad:	85 c0                	test   eax,eax
c00171af:	74 21                	je     c00171d2 <opcodeFault(regs*, void*)+0x56>
c00171b1:	83 ec 0c             	sub    esp,0xc
c00171b4:	68 fc 1d 02 c0       	push   0xc0021dfc
c00171b9:	e8 b9 37 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c00171be:	83 c4 10             	add    esp,0x10
c00171c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00171c4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00171c7:	8d 50 19             	lea    edx,[eax+0x19]
c00171ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00171cd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00171d0:	eb 2b                	jmp    c00171fd <opcodeFault(regs*, void*)+0x81>
c00171d2:	83 ec 0c             	sub    esp,0xc
c00171d5:	68 00 1d 02 c0       	push   0xc0021d00
c00171da:	e8 2d fe ff ff       	call   c001700c <displayProgramFault(char const*)>
c00171df:	83 c4 10             	add    esp,0x10
c00171e2:	83 ec 0c             	sub    esp,0xc
c00171e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00171e8:	e8 1e fa ff ff       	call   c0016c0b <displayDebugInfo(regs*)>
c00171ed:	83 c4 10             	add    esp,0x10
c00171f0:	83 ec 0c             	sub    esp,0xc
c00171f3:	6a 00                	push   0x0
c00171f5:	e8 5e ec ff ff       	call   c0015e58 <Thr::terminateFromIRQ(int)>
c00171fa:	83 c4 10             	add    esp,0x10
c00171fd:	c9                   	leave  
c00171fe:	c3                   	ret    

c00171ff <i386SaveCoprocessor(void*)>:
c00171ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017203:	83 c0 3f             	add    eax,0x3f
c0017206:	83 e0 c0             	and    eax,0xffffffc0
c0017209:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001720d:	ff 25 10 92 02 c0    	jmp    DWORD PTR ds:0xc0029210

c0017213 <i386LoadCoprocessor(void*)>:
c0017213:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017217:	83 c0 3f             	add    eax,0x3f
c001721a:	83 e0 c0             	and    eax,0xffffffc0
c001721d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017221:	ff 25 0c 92 02 c0    	jmp    DWORD PTR ds:0xc002920c

c0017227 <x87EmulHandler(regs*, void*)>:
c0017227:	53                   	push   ebx
c0017228:	83 ec 08             	sub    esp,0x8
c001722b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017230:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017234:	74 10                	je     c0017246 <x87EmulHandler(regs*, void*)+0x1f>
c0017236:	83 ec 0c             	sub    esp,0xc
c0017239:	68 0d 1d 02 c0       	push   0xc0021d0d
c001723e:	e8 98 99 ff ff       	call   c0010bdb <KePanic(char const*)>
c0017243:	83 c4 10             	add    esp,0x10
c0017246:	0f 20 c0             	mov    eax,cr0
c0017249:	a8 08                	test   al,0x8
c001724b:	74 59                	je     c00172a6 <x87EmulHandler(regs*, void*)+0x7f>
c001724d:	0f 06                	clts   
c001724f:	a1 08 92 02 c0       	mov    eax,ds:0xc0029208
c0017254:	85 c0                	test   eax,eax
c0017256:	74 0e                	je     c0017266 <x87EmulHandler(regs*, void*)+0x3f>
c0017258:	83 ec 0c             	sub    esp,0xc
c001725b:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001725e:	e8 9c ff ff ff       	call   c00171ff <i386SaveCoprocessor(void*)>
c0017263:	83 c4 10             	add    esp,0x10
c0017266:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001726c:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017270:	75 12                	jne    c0017284 <x87EmulHandler(regs*, void*)+0x5d>
c0017272:	83 ec 0c             	sub    esp,0xc
c0017275:	68 40 02 00 00       	push   0x240
c001727a:	e8 2f 08 ff ff       	call   c0007aae <malloc>
c001727f:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017282:	eb 10                	jmp    c0017294 <x87EmulHandler(regs*, void*)+0x6d>
c0017284:	83 ec 0c             	sub    esp,0xc
c0017287:	a1 08 92 02 c0       	mov    eax,ds:0xc0029208
c001728c:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001728f:	e8 7f ff ff ff       	call   c0017213 <i386LoadCoprocessor(void*)>
c0017294:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017299:	83 c4 10             	add    esp,0x10
c001729c:	a3 08 92 02 c0       	mov    ds:0xc0029208,eax
c00172a1:	83 c4 08             	add    esp,0x8
c00172a4:	5b                   	pop    ebx
c00172a5:	c3                   	ret    
c00172a6:	83 ec 0c             	sub    esp,0xc
c00172a9:	68 21 1d 02 c0       	push   0xc0021d21
c00172ae:	e8 c4 36 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c00172b3:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00172bb:	83 c4 18             	add    esp,0x18
c00172be:	5b                   	pop    ebx
c00172bf:	e9 94 eb ff ff       	jmp    c0015e58 <Thr::terminateFromIRQ(int)>

c00172c4 <HalInitialiseCoprocessor()>:
c00172c4:	83 ec 10             	sub    esp,0x10
c00172c7:	c7 05 08 92 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029208,0x0
c00172d1:	6a 00                	push   0x0
c00172d3:	68 27 72 01 c0       	push   0xc0017227
c00172d8:	6a 07                	push   0x7
c00172da:	e8 d7 52 ff ff       	call   c000c5b6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00172df:	e8 dc 6f 00 00       	call   c001e2c0 <avxDetect>
c00172e4:	83 c4 10             	add    esp,0x10
c00172e7:	85 c0                	test   eax,eax
c00172e9:	74 1c                	je     c0017307 <HalInitialiseCoprocessor()+0x43>
c00172eb:	c7 05 10 92 02 c0 ea e2 01 c0 	mov    DWORD PTR ds:0xc0029210,0xc001e2ea
c00172f5:	c7 05 0c 92 02 c0 fb e2 01 c0 	mov    DWORD PTR ds:0xc002920c,0xc001e2fb
c00172ff:	83 c4 0c             	add    esp,0xc
c0017302:	e9 05 70 00 00       	jmp    c001e30c <avxInit>
c0017307:	e8 44 73 00 00       	call   c001e650 <absolutelyNoChanceInHell>
c001730c:	85 c0                	test   eax,eax
c001730e:	74 1c                	je     c001732c <HalInitialiseCoprocessor()+0x68>
c0017310:	c7 05 10 92 02 c0 68 e6 01 c0 	mov    DWORD PTR ds:0xc0029210,0xc001e668
c001731a:	c7 05 0c 92 02 c0 70 e6 01 c0 	mov    DWORD PTR ds:0xc002920c,0xc001e670
c0017324:	83 c4 0c             	add    esp,0xc
c0017327:	e9 4c 73 00 00       	jmp    c001e678 <sseInit>
c001732c:	e8 65 73 00 00       	call   c001e696 <x87Detect>
c0017331:	85 c0                	test   eax,eax
c0017333:	74 1c                	je     c0017351 <HalInitialiseCoprocessor()+0x8d>
c0017335:	c7 05 10 92 02 c0 b1 e6 01 c0 	mov    DWORD PTR ds:0xc0029210,0xc001e6b1
c001733f:	c7 05 0c 92 02 c0 b8 e6 01 c0 	mov    DWORD PTR ds:0xc002920c,0xc001e6b8
c0017349:	83 c4 0c             	add    esp,0xc
c001734c:	e9 6e 73 00 00       	jmp    c001e6bf <x87Init>
c0017351:	c7 05 10 92 02 c0 d8 6b 01 c0 	mov    DWORD PTR ds:0xc0029210,0xc0016bd8
c001735b:	c7 05 0c 92 02 c0 d8 6b 01 c0 	mov    DWORD PTR ds:0xc002920c,0xc0016bd8
c0017365:	0f 20 c0             	mov    eax,cr0
c0017368:	83 c8 04             	or     eax,0x4
c001736b:	0f 22 c0             	mov    cr0,eax
c001736e:	83 c4 0c             	add    esp,0xc
c0017371:	c3                   	ret    

c0017372 <HalPanic(char const*)>:
c0017372:	53                   	push   ebx
c0017373:	83 ec 10             	sub    esp,0x10
c0017376:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001737a:	fa                   	cli    
c001737b:	53                   	push   ebx
c001737c:	68 37 1d 02 c0       	push   0xc0021d37
c0017381:	e8 f1 35 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0017386:	a1 04 92 02 c0       	mov    eax,ds:0xc0029204
c001738b:	83 c4 10             	add    esp,0x10
c001738e:	85 c0                	test   eax,eax
c0017390:	74 09                	je     c001739b <HalPanic(char const*)+0x29>
c0017392:	83 ec 0c             	sub    esp,0xc
c0017395:	53                   	push   ebx
c0017396:	ff d0                	call   eax
c0017398:	83 c4 10             	add    esp,0x10
c001739b:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c00173a0:	85 c0                	test   eax,eax
c00173a2:	0f 84 dc 00 00 00    	je     c0017484 <HalPanic(char const*)+0x112>
c00173a8:	52                   	push   edx
c00173a9:	6a 01                	push   0x1
c00173ab:	6a 0f                	push   0xf
c00173ad:	50                   	push   eax
c00173ae:	e8 f3 11 ff ff       	call   c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00173b3:	59                   	pop    ecx
c00173b4:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c00173ba:	e8 d7 13 ff ff       	call   c0008796 <VgaText::clearScreen()>
c00173bf:	58                   	pop    eax
c00173c0:	5a                   	pop    edx
c00173c1:	68 04 01 02 c0       	push   0xc0020104
c00173c6:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c00173cc:	e8 0d 12 ff ff       	call   c00085de <VgaText::setTitle(char*)>
c00173d1:	83 c4 0c             	add    esp,0xc
c00173d4:	6a 01                	push   0x1
c00173d6:	6a 0f                	push   0xf
c00173d8:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c00173de:	e8 c3 11 ff ff       	call   c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00173e3:	59                   	pop    ecx
c00173e4:	58                   	pop    eax
c00173e5:	68 50 1d 02 c0       	push   0xc0021d50
c00173ea:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c00173f0:	e8 a3 16 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c00173f5:	83 c4 0c             	add    esp,0xc
c00173f8:	6a 0f                	push   0xf
c00173fa:	6a 01                	push   0x1
c00173fc:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017402:	e8 9f 11 ff ff       	call   c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017407:	58                   	pop    eax
c0017408:	5a                   	pop    edx
c0017409:	68 59 1d 02 c0       	push   0xc0021d59
c001740e:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017414:	e8 7f 16 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0017419:	83 c4 0c             	add    esp,0xc
c001741c:	6a 01                	push   0x1
c001741e:	6a 0f                	push   0xf
c0017420:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017426:	e8 7b 11 ff ff       	call   c00085a6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001742b:	59                   	pop    ecx
c001742c:	58                   	pop    eax
c001742d:	68 9d 1d 02 c0       	push   0xc0021d9d
c0017432:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017438:	e8 5b 16 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c001743d:	58                   	pop    eax
c001743e:	5a                   	pop    edx
c001743f:	68 66 1d 02 c0       	push   0xc0021d66
c0017444:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001744a:	e8 49 16 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c001744f:	59                   	pop    ecx
c0017450:	58                   	pop    eax
c0017451:	68 a0 1d 02 c0       	push   0xc0021da0
c0017456:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001745c:	e8 37 16 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0017461:	58                   	pop    eax
c0017462:	5a                   	pop    edx
c0017463:	53                   	push   ebx
c0017464:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001746a:	e8 29 16 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c001746f:	59                   	pop    ecx
c0017470:	5b                   	pop    ebx
c0017471:	68 9d 1d 02 c0       	push   0xc0021d9d
c0017476:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001747c:	e8 17 16 ff ff       	call   c0008a98 <VgaText::puts(char const*)>
c0017481:	83 c4 10             	add    esp,0x10
c0017484:	eb fe                	jmp    c0017484 <HalPanic(char const*)+0x112>

c0017486 <HalQueryPerformanceCounter()>:
c0017486:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001748b:	31 d2                	xor    edx,edx
c001748d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017493:	31 c0                	xor    eax,eax
c0017495:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001749c:	74 02                	je     c00174a0 <HalQueryPerformanceCounter()+0x1a>
c001749e:	0f 31                	rdtsc  
c00174a0:	c3                   	ret    

c00174a1 <HalInitialise()>:
c00174a1:	53                   	push   ebx
c00174a2:	83 ec 08             	sub    esp,0x8
c00174a5:	e8 3c 53 ff ff       	call   c000c7e6 <setupINTS()>
c00174aa:	80 3d 80 87 02 c0 00 	cmp    BYTE PTR ds:0xc0028780,0x0
c00174b1:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00174b6:	75 0f                	jne    c00174c7 <HalInitialise()+0x26>
c00174b8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00174be:	83 e2 fe             	and    edx,0xfffffffe
c00174c1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00174c7:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00174cd:	c6 05 00 92 02 c0 00 	mov    BYTE PTR ds:0xc0029200,0x0
c00174d4:	83 e2 fe             	and    edx,0xfffffffe
c00174d7:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00174dd:	e8 9e 02 00 00       	call   c0017780 <picOpen()>
c00174e2:	80 3d 00 92 02 c0 00 	cmp    BYTE PTR ds:0xc0029200,0x0
c00174e9:	74 0a                	je     c00174f5 <HalInitialise()+0x54>
c00174eb:	e8 e0 01 00 00       	call   c00176d0 <picDisable()>
c00174f0:	e8 3d 67 00 00       	call   c001dc32 <apicOpen()>
c00174f5:	bb 0f 00 00 00       	mov    ebx,0xf
c00174fa:	50                   	push   eax
c00174fb:	6a 00                	push   0x0
c00174fd:	68 48 71 01 c0       	push   0xc0017148
c0017502:	6a 00                	push   0x0
c0017504:	e8 ad 50 ff ff       	call   c000c5b6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017509:	83 c4 0c             	add    esp,0xc
c001750c:	6a 00                	push   0x0
c001750e:	68 48 71 01 c0       	push   0xc0017148
c0017513:	6a 01                	push   0x1
c0017515:	e8 9c 50 ff ff       	call   c000c5b6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001751a:	83 c4 0c             	add    esp,0xc
c001751d:	6a 00                	push   0x0
c001751f:	68 d9 6b 01 c0       	push   0xc0016bd9
c0017524:	6a 02                	push   0x2
c0017526:	e8 8b 50 ff ff       	call   c000c5b6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001752b:	83 c4 0c             	add    esp,0xc
c001752e:	6a 00                	push   0x0
c0017530:	68 48 71 01 c0       	push   0xc0017148
c0017535:	6a 03                	push   0x3
c0017537:	e8 7a 50 ff ff       	call   c000c5b6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001753c:	83 c4 0c             	add    esp,0xc
c001753f:	6a 00                	push   0x0
c0017541:	68 48 71 01 c0       	push   0xc0017148
c0017546:	6a 04                	push   0x4
c0017548:	e8 69 50 ff ff       	call   c000c5b6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001754d:	83 c4 0c             	add    esp,0xc
c0017550:	6a 00                	push   0x0
c0017552:	68 48 71 01 c0       	push   0xc0017148
c0017557:	6a 05                	push   0x5
c0017559:	e8 58 50 ff ff       	call   c000c5b6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001755e:	83 c4 0c             	add    esp,0xc
c0017561:	6a 00                	push   0x0
c0017563:	68 7c 71 01 c0       	push   0xc001717c
c0017568:	6a 06                	push   0x6
c001756a:	e8 47 50 ff ff       	call   c000c5b6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001756f:	83 c4 0c             	add    esp,0xc
c0017572:	6a 00                	push   0x0
c0017574:	68 f2 6b 01 c0       	push   0xc0016bf2
c0017579:	6a 08                	push   0x8
c001757b:	e8 36 50 ff ff       	call   c000c5b6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017580:	83 c4 0c             	add    esp,0xc
c0017583:	6a 00                	push   0x0
c0017585:	68 48 71 01 c0       	push   0xc0017148
c001758a:	6a 09                	push   0x9
c001758c:	e8 25 50 ff ff       	call   c000c5b6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017591:	83 c4 0c             	add    esp,0xc
c0017594:	6a 00                	push   0x0
c0017596:	68 48 71 01 c0       	push   0xc0017148
c001759b:	6a 0a                	push   0xa
c001759d:	e8 14 50 ff ff       	call   c000c5b6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00175a2:	83 c4 0c             	add    esp,0xc
c00175a5:	6a 00                	push   0x0
c00175a7:	68 48 71 01 c0       	push   0xc0017148
c00175ac:	6a 0b                	push   0xb
c00175ae:	e8 03 50 ff ff       	call   c000c5b6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00175b3:	83 c4 0c             	add    esp,0xc
c00175b6:	6a 00                	push   0x0
c00175b8:	68 58 70 01 c0       	push   0xc0017058
c00175bd:	6a 0d                	push   0xd
c00175bf:	e8 f2 4f ff ff       	call   c000c5b6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00175c4:	83 c4 0c             	add    esp,0xc
c00175c7:	6a 00                	push   0x0
c00175c9:	68 bf 70 01 c0       	push   0xc00170bf
c00175ce:	6a 0e                	push   0xe
c00175d0:	e8 e1 4f ff ff       	call   c000c5b6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00175d5:	83 c4 10             	add    esp,0x10
c00175d8:	50                   	push   eax
c00175d9:	6a 00                	push   0x0
c00175db:	68 48 71 01 c0       	push   0xc0017148
c00175e0:	53                   	push   ebx
c00175e1:	43                   	inc    ebx
c00175e2:	e8 cf 4f ff ff       	call   c000c5b6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00175e7:	83 c4 10             	add    esp,0x10
c00175ea:	83 fb 1e             	cmp    ebx,0x1e
c00175ed:	75 e9                	jne    c00175d8 <HalInitialise()+0x137>
c00175ef:	50                   	push   eax
c00175f0:	6a 00                	push   0x0
c00175f2:	68 c5 1e 01 c0       	push   0xc0011ec5
c00175f7:	6a 60                	push   0x60
c00175f9:	e8 b8 4f ff ff       	call   c000c5b6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00175fe:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017603:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001760d:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017614:	e8 95 04 ff ff       	call   c0007aae <malloc>
c0017619:	89 04 24             	mov    DWORD PTR [esp],eax
c001761c:	89 c3                	mov    ebx,eax
c001761e:	e8 3b 09 00 00       	call   c0017f5e <RTC::RTC()>
c0017623:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001762d:	5a                   	pop    edx
c001762e:	59                   	pop    ecx
c001762f:	53                   	push   ebx
c0017630:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017636:	e8 47 4a ff ff       	call   c000c082 <Device::addChild(Device*)>
c001763b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001763d:	6a 00                	push   0x0
c001763f:	6a 00                	push   0x0
c0017641:	6a 00                	push   0x0
c0017643:	53                   	push   ebx
c0017644:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017647:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001764c:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017652:	83 c4 28             	add    esp,0x28
c0017655:	5b                   	pop    ebx
c0017656:	c3                   	ret    

c0017657 <HalMakeBeep(int)>:
c0017657:	53                   	push   ebx
c0017658:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001765c:	85 db                	test   ebx,ebx
c001765e:	75 07                	jne    c0017667 <HalMakeBeep(int)+0x10>
c0017660:	e4 61                	in     al,0x61
c0017662:	83 e0 fc             	and    eax,0xfffffffc
c0017665:	eb 26                	jmp    c001768d <HalMakeBeep(int)+0x36>
c0017667:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001766c:	99                   	cdq    
c001766d:	f7 fb                	idiv   ebx
c001766f:	89 c1                	mov    ecx,eax
c0017671:	b0 b6                	mov    al,0xb6
c0017673:	e6 43                	out    0x43,al
c0017675:	88 c8                	mov    al,cl
c0017677:	e6 42                	out    0x42,al
c0017679:	89 c8                	mov    eax,ecx
c001767b:	c1 e8 08             	shr    eax,0x8
c001767e:	e6 42                	out    0x42,al
c0017680:	e4 61                	in     al,0x61
c0017682:	89 c2                	mov    edx,eax
c0017684:	83 ca 03             	or     edx,0x3
c0017687:	38 d0                	cmp    al,dl
c0017689:	74 04                	je     c001768f <HalMakeBeep(int)+0x38>
c001768b:	88 d0                	mov    al,dl
c001768d:	e6 61                	out    0x61,al
c001768f:	5b                   	pop    ebx
c0017690:	c3                   	ret    

c0017691 <HalGetRand()>:
c0017691:	31 c0                	xor    eax,eax
c0017693:	c3                   	ret    

c0017694 <HalEndOfInterrupt(int)>:
c0017694:	80 3d 00 92 02 c0 00 	cmp    BYTE PTR ds:0xc0029200,0x0
c001769b:	74 23                	je     c00176c0 <HalEndOfInterrupt(int)+0x2c>
c001769d:	83 ec 14             	sub    esp,0x14
c00176a0:	6a 1b                	push   0x1b
c00176a2:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00176a8:	e8 0b fa fe ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c00176ad:	25 00 f0 ff ff       	and    eax,0xfffff000
c00176b2:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00176bc:	83 c4 1c             	add    esp,0x1c
c00176bf:	c3                   	ret    
c00176c0:	e9 3f 02 00 00       	jmp    c0017904 <picEOI(int)>

c00176c5 <HalRestart()>:
c00176c5:	c3                   	ret    

c00176c6 <HalShutdown()>:
c00176c6:	c3                   	ret    

c00176c7 <HalSleep()>:
c00176c7:	c3                   	ret    

c00176c8 <picIoWait()>:
c00176c8:	eb 00                	jmp    c00176ca <picIoWait()+0x2>
c00176ca:	eb 00                	jmp    c00176cc <picIoWait()+0x4>
c00176cc:	90                   	nop
c00176cd:	c3                   	ret    
c00176ce:	66 90                	xchg   ax,ax

c00176d0 <picDisable()>:
c00176d0:	83 ec 10             	sub    esp,0x10
c00176d3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00176da:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00176df:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00176e3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00176e8:	ee                   	out    dx,al
c00176e9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00176f0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00176f5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00176f9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00176fe:	ee                   	out    dx,al
c00176ff:	90                   	nop
c0017700:	83 c4 10             	add    esp,0x10
c0017703:	c3                   	ret    

c0017704 <picGetIRQReg(int)>:
c0017704:	83 ec 10             	sub    esp,0x10
c0017707:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001770b:	0f b6 c0             	movzx  eax,al
c001770e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017715:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017719:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001771d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017722:	ee                   	out    dx,al
c0017723:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017727:	0f b6 c0             	movzx  eax,al
c001772a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017731:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017735:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017739:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001773e:	ee                   	out    dx,al
c001773f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017746:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001774b:	89 c2                	mov    edx,eax
c001774d:	ec                   	in     al,dx
c001774e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017752:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017756:	0f b6 c0             	movzx  eax,al
c0017759:	c1 e0 08             	shl    eax,0x8
c001775c:	89 c1                	mov    ecx,eax
c001775e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017765:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001776a:	89 c2                	mov    edx,eax
c001776c:	ec                   	in     al,dx
c001776d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017771:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017775:	0f b6 c0             	movzx  eax,al
c0017778:	09 c8                	or     eax,ecx
c001777a:	83 c4 10             	add    esp,0x10
c001777d:	c3                   	ret    
c001777e:	66 90                	xchg   ax,ax

c0017780 <picOpen()>:
c0017780:	83 ec 50             	sub    esp,0x50
c0017783:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001778a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001778f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017793:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017797:	ee                   	out    dx,al
c0017798:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001779f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00177a4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00177a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00177ac:	ee                   	out    dx,al
c00177ad:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00177b5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00177bd:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00177c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00177c8:	89 c2                	mov    edx,eax
c00177ca:	ec                   	in     al,dx
c00177cb:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00177cf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00177d3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00177d7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00177de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00177e2:	89 c2                	mov    edx,eax
c00177e4:	ec                   	in     al,dx
c00177e5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00177e9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00177ed:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00177f1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00177f8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00177fd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017801:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017805:	ee                   	out    dx,al
c0017806:	e8 bd fe ff ff       	call   c00176c8 <picIoWait()>
c001780b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017812:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017817:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001781b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001781f:	ee                   	out    dx,al
c0017820:	e8 a3 fe ff ff       	call   c00176c8 <picIoWait()>
c0017825:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017829:	0f b6 c0             	movzx  eax,al
c001782c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017833:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017837:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001783b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001783f:	ee                   	out    dx,al
c0017840:	e8 83 fe ff ff       	call   c00176c8 <picIoWait()>
c0017845:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017849:	0f b6 c0             	movzx  eax,al
c001784c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017853:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017857:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001785b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001785f:	ee                   	out    dx,al
c0017860:	e8 63 fe ff ff       	call   c00176c8 <picIoWait()>
c0017865:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001786c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017871:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017875:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017879:	ee                   	out    dx,al
c001787a:	e8 49 fe ff ff       	call   c00176c8 <picIoWait()>
c001787f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017886:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001788b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001788f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017893:	ee                   	out    dx,al
c0017894:	e8 2f fe ff ff       	call   c00176c8 <picIoWait()>
c0017899:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00178a0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00178a5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00178a9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00178ad:	ee                   	out    dx,al
c00178ae:	e8 15 fe ff ff       	call   c00176c8 <picIoWait()>
c00178b3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00178ba:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00178bf:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00178c3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00178c7:	ee                   	out    dx,al
c00178c8:	e8 fb fd ff ff       	call   c00176c8 <picIoWait()>
c00178cd:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00178d2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00178d9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00178dd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00178e1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00178e5:	ee                   	out    dx,al
c00178e6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00178eb:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00178f2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00178f6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00178fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00178fe:	ee                   	out    dx,al
c00178ff:	90                   	nop
c0017900:	83 c4 50             	add    esp,0x50
c0017903:	c3                   	ret    

c0017904 <picEOI(int)>:
c0017904:	83 ec 10             	sub    esp,0x10
c0017907:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001790c:	75 1e                	jne    c001792c <picEOI(int)+0x28>
c001790e:	6a 0b                	push   0xb
c0017910:	e8 ef fd ff ff       	call   c0017704 <picGetIRQReg(int)>
c0017915:	83 c4 04             	add    esp,0x4
c0017918:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001791d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0017922:	25 80 00 00 00       	and    eax,0x80
c0017927:	74 73                	je     c001799c <picEOI(int)+0x98>
c0017929:	8d 76 00             	lea    esi,[esi+0x0]
c001792c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0017931:	75 31                	jne    c0017964 <picEOI(int)+0x60>
c0017933:	6a 0b                	push   0xb
c0017935:	e8 ca fd ff ff       	call   c0017704 <picGetIRQReg(int)>
c001793a:	83 c4 04             	add    esp,0x4
c001793d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017942:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017946:	98                   	cwde   
c0017947:	85 c0                	test   eax,eax
c0017949:	78 19                	js     c0017964 <picEOI(int)+0x60>
c001794b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0017952:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0017957:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001795b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017960:	ee                   	out    dx,al
c0017961:	eb 3d                	jmp    c00179a0 <picEOI(int)+0x9c>
c0017963:	90                   	nop
c0017964:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017969:	7e 19                	jle    c0017984 <picEOI(int)+0x80>
c001796b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017972:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0017977:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001797b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017980:	ee                   	out    dx,al
c0017981:	8d 76 00             	lea    esi,[esi+0x0]
c0017984:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001798b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0017990:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017994:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017999:	ee                   	out    dx,al
c001799a:	eb 04                	jmp    c00179a0 <picEOI(int)+0x9c>
c001799c:	90                   	nop
c001799d:	8d 76 00             	lea    esi,[esi+0x0]
c00179a0:	83 c4 10             	add    esp,0x10
c00179a3:	c3                   	ret    

c00179a4 <RTC::open(int, int, void*)>:
c00179a4:	31 c0                	xor    eax,eax
c00179a6:	c3                   	ret    
c00179a7:	90                   	nop

c00179a8 <RTC::close(int, int, void*)>:
c00179a8:	31 c0                	xor    eax,eax
c00179aa:	c3                   	ret    
c00179ab:	90                   	nop

c00179ac <RTC::timeInSecondsUTC()>:
c00179ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179b0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00179b6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00179bc:	c3                   	ret    
c00179bd:	90                   	nop

c00179be <RTC::timeInDatetimeUTC()>:
c00179be:	53                   	push   ebx
c00179bf:	83 ec 14             	sub    esp,0x14
c00179c2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00179c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00179cc:	50                   	push   eax
c00179cd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00179d0:	83 c4 0c             	add    esp,0xc
c00179d3:	52                   	push   edx
c00179d4:	50                   	push   eax
c00179d5:	53                   	push   ebx
c00179d6:	e8 1b 44 ff ff       	call   c000bdf6 <secondsToDatetime(unsigned long long)>
c00179db:	89 d8                	mov    eax,ebx
c00179dd:	83 c4 14             	add    esp,0x14
c00179e0:	5b                   	pop    ebx
c00179e1:	c2 04 00             	ret    0x4

c00179e4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00179e4:	56                   	push   esi
c00179e5:	53                   	push   ebx
c00179e6:	83 ec 14             	sub    esp,0x14
c00179e9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00179ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179ef:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00179f2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00179f6:	52                   	push   edx
c00179f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179ff:	50                   	push   eax
c0017a00:	e8 f1 43 ff ff       	call   c000bdf6 <secondsToDatetime(unsigned long long)>
c0017a05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a09:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a0d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a11:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017a15:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017a19:	89 f0                	mov    eax,esi
c0017a1b:	83 c4 20             	add    esp,0x20
c0017a1e:	5b                   	pop    ebx
c0017a1f:	5e                   	pop    esi
c0017a20:	ff e0                	jmp    eax

c0017a22 <RTC::~RTC()>:
c0017a22:	83 ec 0c             	sub    esp,0xc
c0017a25:	ba 3c 1e 02 c0       	mov    edx,0xc0021e3c
c0017a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a2e:	89 10                	mov    DWORD PTR [eax],edx
c0017a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a34:	83 ec 0c             	sub    esp,0xc
c0017a37:	50                   	push   eax
c0017a38:	e8 4b 41 ff ff       	call   c000bb88 <Clock::~Clock()>
c0017a3d:	83 c4 10             	add    esp,0x10
c0017a40:	90                   	nop
c0017a41:	83 c4 0c             	add    esp,0xc
c0017a44:	c3                   	ret    
c0017a45:	90                   	nop

c0017a46 <RTC::~RTC()>:
c0017a46:	83 ec 0c             	sub    esp,0xc
c0017a49:	83 ec 0c             	sub    esp,0xc
c0017a4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a50:	e8 cd ff ff ff       	call   c0017a22 <RTC::~RTC()>
c0017a55:	83 c4 10             	add    esp,0x10
c0017a58:	83 ec 08             	sub    esp,0x8
c0017a5b:	68 60 01 00 00       	push   0x160
c0017a60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a64:	e8 e1 2d ff ff       	call   c000a84a <operator delete(void*, unsigned long)>
c0017a69:	83 c4 10             	add    esp,0x10
c0017a6c:	83 c4 0c             	add    esp,0xc
c0017a6f:	c3                   	ret    

c0017a70 <RTC::get_update_in_progress_flag()>:
c0017a70:	83 ec 14             	sub    esp,0x14
c0017a73:	6a 0a                	push   0xa
c0017a75:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017a7b:	e8 f0 f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017a80:	83 c4 1c             	add    esp,0x1c
c0017a83:	0f b6 c0             	movzx  eax,al
c0017a86:	c1 e8 07             	shr    eax,0x7
c0017a89:	c3                   	ret    

c0017a8a <RTC::completeRTCRefresh()>:
c0017a8a:	55                   	push   ebp
c0017a8b:	57                   	push   edi
c0017a8c:	56                   	push   esi
c0017a8d:	53                   	push   ebx
c0017a8e:	83 ec 3c             	sub    esp,0x3c
c0017a91:	8b 1d 8c 84 02 c0    	mov    ebx,DWORD PTR ds:0xc002848c
c0017a97:	83 ec 0c             	sub    esp,0xc
c0017a9a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017a9e:	e8 cd ff ff ff       	call   c0017a70 <RTC::get_update_in_progress_flag()>
c0017aa3:	83 c4 10             	add    esp,0x10
c0017aa6:	84 c0                	test   al,al
c0017aa8:	74 0e                	je     c0017ab8 <RTC::completeRTCRefresh()+0x2e>
c0017aaa:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017ab0:	3b 05 8c 84 02 c0    	cmp    eax,DWORD PTR ds:0xc002848c
c0017ab6:	73 df                	jae    c0017a97 <RTC::completeRTCRefresh()+0xd>
c0017ab8:	51                   	push   ecx
c0017ab9:	51                   	push   ecx
c0017aba:	6a 00                	push   0x0
c0017abc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017ac2:	e8 a9 f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017ac7:	5b                   	pop    ebx
c0017ac8:	89 c7                	mov    edi,eax
c0017aca:	5e                   	pop    esi
c0017acb:	6a 02                	push   0x2
c0017acd:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017ad3:	e8 98 f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017ad8:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0017adc:	5d                   	pop    ebp
c0017add:	58                   	pop    eax
c0017ade:	6a 04                	push   0x4
c0017ae0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017ae6:	e8 85 f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017aeb:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0017aef:	58                   	pop    eax
c0017af0:	5a                   	pop    edx
c0017af1:	6a 07                	push   0x7
c0017af3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017af9:	e8 72 f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017afe:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0017b02:	59                   	pop    ecx
c0017b03:	5b                   	pop    ebx
c0017b04:	6a 08                	push   0x8
c0017b06:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017b0c:	e8 5f f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017b11:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017b15:	5e                   	pop    esi
c0017b16:	5d                   	pop    ebp
c0017b17:	6a 09                	push   0x9
c0017b19:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017b1f:	e8 4c f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017b24:	0f b6 c0             	movzx  eax,al
c0017b27:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017b2b:	83 c4 10             	add    esp,0x10
c0017b2e:	8b 1d 8c 84 02 c0    	mov    ebx,DWORD PTR ds:0xc002848c
c0017b34:	83 ec 0c             	sub    esp,0xc
c0017b37:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017b3b:	e8 30 ff ff ff       	call   c0017a70 <RTC::get_update_in_progress_flag()>
c0017b40:	83 c4 10             	add    esp,0x10
c0017b43:	84 c0                	test   al,al
c0017b45:	74 0e                	je     c0017b55 <RTC::completeRTCRefresh()+0xcb>
c0017b47:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017b4d:	3b 05 8c 84 02 c0    	cmp    eax,DWORD PTR ds:0xc002848c
c0017b53:	73 df                	jae    c0017b34 <RTC::completeRTCRefresh()+0xaa>
c0017b55:	51                   	push   ecx
c0017b56:	51                   	push   ecx
c0017b57:	6a 00                	push   0x0
c0017b59:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017b5f:	e8 0c f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017b64:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017b68:	5b                   	pop    ebx
c0017b69:	5e                   	pop    esi
c0017b6a:	6a 02                	push   0x2
c0017b6c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017b72:	e8 f9 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017b77:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017b7b:	5d                   	pop    ebp
c0017b7c:	58                   	pop    eax
c0017b7d:	6a 04                	push   0x4
c0017b7f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017b85:	e8 e6 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017b8a:	88 c3                	mov    bl,al
c0017b8c:	58                   	pop    eax
c0017b8d:	5a                   	pop    edx
c0017b8e:	6a 07                	push   0x7
c0017b90:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017b96:	e8 d5 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017b9b:	59                   	pop    ecx
c0017b9c:	89 c6                	mov    esi,eax
c0017b9e:	5d                   	pop    ebp
c0017b9f:	6a 08                	push   0x8
c0017ba1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017ba7:	e8 c4 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017bac:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017bb0:	58                   	pop    eax
c0017bb1:	5a                   	pop    edx
c0017bb2:	6a 09                	push   0x9
c0017bb4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017bba:	e8 b1 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017bbf:	89 f9                	mov    ecx,edi
c0017bc1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017bc5:	0f b6 e8             	movzx  ebp,al
c0017bc8:	83 c4 10             	add    esp,0x10
c0017bcb:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0017bcf:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017bd4:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0017bd9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017bdd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017be1:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0017be5:	0f 94 c0             	sete   al
c0017be8:	0f b6 fb             	movzx  edi,bl
c0017beb:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0017bef:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0017bf4:	0f 94 c2             	sete   dl
c0017bf7:	21 d0                	and    eax,edx
c0017bf9:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0017bfd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0017c01:	0f 94 c2             	sete   dl
c0017c04:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0017c08:	21 c2                	and    edx,eax
c0017c0a:	89 f0                	mov    eax,esi
c0017c0c:	0f b6 c0             	movzx  eax,al
c0017c0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017c13:	89 f0                	mov    eax,esi
c0017c15:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0017c19:	0f 94 c0             	sete   al
c0017c1c:	21 d0                	and    eax,edx
c0017c1e:	31 d2                	xor    edx,edx
c0017c20:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0017c24:	0f 94 c2             	sete   dl
c0017c27:	85 c2                	test   edx,eax
c0017c29:	75 27                	jne    c0017c52 <RTC::completeRTCRefresh()+0x1c8>
c0017c2b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017c2f:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0017c33:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017c37:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0017c3b:	89 f0                	mov    eax,esi
c0017c3d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017c41:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017c45:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017c49:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017c4d:	e9 dc fe ff ff       	jmp    c0017b2e <RTC::completeRTCRefresh()+0xa4>
c0017c52:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0017c56:	75 d3                	jne    c0017c2b <RTC::completeRTCRefresh()+0x1a1>
c0017c58:	52                   	push   edx
c0017c59:	52                   	push   edx
c0017c5a:	6a 0b                	push   0xb
c0017c5c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017c62:	e8 09 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017c67:	83 c4 10             	add    esp,0x10
c0017c6a:	a8 04                	test   al,0x4
c0017c6c:	75 7a                	jne    c0017ce8 <RTC::completeRTCRefresh()+0x25e>
c0017c6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017c72:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c76:	83 e1 0f             	and    ecx,0xf
c0017c79:	c1 ea 04             	shr    edx,0x4
c0017c7c:	c1 ef 04             	shr    edi,0x4
c0017c7f:	6b d2 0a             	imul   edx,edx,0xa
c0017c82:	83 e6 0f             	and    esi,0xf
c0017c85:	01 d1                	add    ecx,edx
c0017c87:	c1 ed 04             	shr    ebp,0x4
c0017c8a:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0017c8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c92:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017c96:	c1 ea 04             	shr    edx,0x4
c0017c99:	83 e1 0f             	and    ecx,0xf
c0017c9c:	6b d2 0a             	imul   edx,edx,0xa
c0017c9f:	6b ed 0a             	imul   ebp,ebp,0xa
c0017ca2:	01 d1                	add    ecx,edx
c0017ca4:	89 fa                	mov    edx,edi
c0017ca6:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017caa:	83 e2 07             	and    edx,0x7
c0017cad:	89 d9                	mov    ecx,ebx
c0017caf:	6b d2 0a             	imul   edx,edx,0xa
c0017cb2:	83 e1 0f             	and    ecx,0xf
c0017cb5:	83 e3 80             	and    ebx,0xffffff80
c0017cb8:	01 d1                	add    ecx,edx
c0017cba:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017cbe:	09 cb                	or     ebx,ecx
c0017cc0:	c1 ea 04             	shr    edx,0x4
c0017cc3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017cc7:	6b d2 0a             	imul   edx,edx,0xa
c0017cca:	83 e1 0f             	and    ecx,0xf
c0017ccd:	01 d6                	add    esi,edx
c0017ccf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017cd3:	c1 ea 04             	shr    edx,0x4
c0017cd6:	6b d2 0a             	imul   edx,edx,0xa
c0017cd9:	01 d1                	add    ecx,edx
c0017cdb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017cdf:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0017ce3:	83 e2 0f             	and    edx,0xf
c0017ce6:	01 d5                	add    ebp,edx
c0017ce8:	a8 02                	test   al,0x2
c0017cea:	75 15                	jne    c0017d01 <RTC::completeRTCRefresh()+0x277>
c0017cec:	f6 c3 80             	test   bl,0x80
c0017cef:	74 10                	je     c0017d01 <RTC::completeRTCRefresh()+0x277>
c0017cf1:	83 e3 7f             	and    ebx,0x7f
c0017cf4:	b9 18 00 00 00       	mov    ecx,0x18
c0017cf9:	8d 43 0c             	lea    eax,[ebx+0xc]
c0017cfc:	99                   	cdq    
c0017cfd:	f7 f9                	idiv   ecx
c0017cff:	88 d3                	mov    bl,dl
c0017d01:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0017d07:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0017d0d:	77 06                	ja     c0017d15 <RTC::completeRTCRefresh()+0x28b>
c0017d0f:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0017d15:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017d1a:	31 c9                	xor    ecx,ecx
c0017d1c:	c1 e0 10             	shl    eax,0x10
c0017d1f:	89 cd                	mov    ebp,ecx
c0017d21:	c1 e7 10             	shl    edi,0x10
c0017d24:	31 d2                	xor    edx,edx
c0017d26:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0017d2c:	09 c5                	or     ebp,eax
c0017d2e:	89 f0                	mov    eax,esi
c0017d30:	89 e9                	mov    ecx,ebp
c0017d32:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017d36:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0017d3a:	88 c2                	mov    dl,al
c0017d3c:	88 d9                	mov    cl,bl
c0017d3e:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0017d42:	0f b7 c2             	movzx  eax,dx
c0017d45:	09 f8                	or     eax,edi
c0017d47:	89 c2                	mov    edx,eax
c0017d49:	50                   	push   eax
c0017d4a:	50                   	push   eax
c0017d4b:	51                   	push   ecx
c0017d4c:	52                   	push   edx
c0017d4d:	e8 25 3f ff ff       	call   c000bc77 <datetimeToSeconds(datetime_t)>
c0017d52:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0017d56:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0017d5c:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0017d62:	83 c4 4c             	add    esp,0x4c
c0017d65:	5b                   	pop    ebx
c0017d66:	5e                   	pop    esi
c0017d67:	5f                   	pop    edi
c0017d68:	5d                   	pop    ebp
c0017d69:	c3                   	ret    

c0017d6a <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0017d6a:	55                   	push   ebp
c0017d6b:	57                   	push   edi
c0017d6c:	56                   	push   esi
c0017d6d:	53                   	push   ebx
c0017d6e:	83 ec 30             	sub    esp,0x30
c0017d71:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017d75:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0017d79:	6a 00                	push   0x0
c0017d7b:	6a 00                	push   0x0
c0017d7d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017d83:	e8 02 f5 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017d88:	83 c4 0c             	add    esp,0xc
c0017d8b:	6a 00                	push   0x0
c0017d8d:	6a 02                	push   0x2
c0017d8f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017d95:	e8 f0 f4 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017d9a:	31 d2                	xor    edx,edx
c0017d9c:	89 f9                	mov    ecx,edi
c0017d9e:	89 f8                	mov    eax,edi
c0017da0:	c1 e9 10             	shr    ecx,0x10
c0017da3:	0f b6 c4             	movzx  eax,ah
c0017da6:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0017daa:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0017dae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017db2:	b9 64 00 00 00       	mov    ecx,0x64
c0017db7:	89 f0                	mov    eax,esi
c0017db9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017dbd:	89 f0                	mov    eax,esi
c0017dbf:	0f b6 c4             	movzx  eax,ah
c0017dc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017dc6:	89 f0                	mov    eax,esi
c0017dc8:	c1 e8 10             	shr    eax,0x10
c0017dcb:	f7 f1                	div    ecx
c0017dcd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017dd1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0017dd5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017dd9:	59                   	pop    ecx
c0017dda:	5b                   	pop    ebx
c0017ddb:	89 fb                	mov    ebx,edi
c0017ddd:	6a 0b                	push   0xb
c0017ddf:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017de5:	e8 86 f3 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017dea:	83 c4 10             	add    esp,0x10
c0017ded:	89 c5                	mov    ebp,eax
c0017def:	a8 04                	test   al,0x4
c0017df1:	75 6e                	jne    c0017e61 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0017df3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017df7:	31 d2                	xor    edx,edx
c0017df9:	0f b6 c1             	movzx  eax,cl
c0017dfc:	b9 0a 00 00 00       	mov    ecx,0xa
c0017e01:	f7 f1                	div    ecx
c0017e03:	c1 e0 04             	shl    eax,0x4
c0017e06:	09 d0                	or     eax,edx
c0017e08:	31 d2                	xor    edx,edx
c0017e0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e0e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017e13:	f7 f1                	div    ecx
c0017e15:	c1 e0 04             	shl    eax,0x4
c0017e18:	09 d0                	or     eax,edx
c0017e1a:	31 d2                	xor    edx,edx
c0017e1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e20:	0f b6 c3             	movzx  eax,bl
c0017e23:	f7 f1                	div    ecx
c0017e25:	c1 e0 04             	shl    eax,0x4
c0017e28:	09 d0                	or     eax,edx
c0017e2a:	31 d2                	xor    edx,edx
c0017e2c:	89 c3                	mov    ebx,eax
c0017e2e:	89 f0                	mov    eax,esi
c0017e30:	0f b6 c0             	movzx  eax,al
c0017e33:	f7 f1                	div    ecx
c0017e35:	c1 e0 04             	shl    eax,0x4
c0017e38:	09 d0                	or     eax,edx
c0017e3a:	31 d2                	xor    edx,edx
c0017e3c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017e40:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017e45:	f7 f1                	div    ecx
c0017e47:	c1 e0 04             	shl    eax,0x4
c0017e4a:	09 d0                	or     eax,edx
c0017e4c:	31 d2                	xor    edx,edx
c0017e4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017e56:	f7 f1                	div    ecx
c0017e58:	c1 e0 04             	shl    eax,0x4
c0017e5b:	09 d0                	or     eax,edx
c0017e5d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017e61:	83 e5 02             	and    ebp,0x2
c0017e64:	75 1e                	jne    c0017e84 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017e66:	0f b6 c3             	movzx  eax,bl
c0017e69:	83 f8 0b             	cmp    eax,0xb
c0017e6c:	76 10                	jbe    c0017e7e <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0017e6e:	8d 53 f4             	lea    edx,[ebx-0xc]
c0017e71:	88 d3                	mov    bl,dl
c0017e73:	84 d2                	test   dl,dl
c0017e75:	75 02                	jne    c0017e79 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0017e77:	b3 0c                	mov    bl,0xc
c0017e79:	83 cb 80             	or     ebx,0xffffff80
c0017e7c:	eb 06                	jmp    c0017e84 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017e7e:	85 c0                	test   eax,eax
c0017e80:	75 02                	jne    c0017e84 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017e82:	b3 0c                	mov    bl,0xc
c0017e84:	0f b6 db             	movzx  ebx,bl
c0017e87:	50                   	push   eax
c0017e88:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0017e8d:	52                   	push   edx
c0017e8e:	6a 00                	push   0x0
c0017e90:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017e96:	e8 ef f3 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017e9b:	83 c4 0c             	add    esp,0xc
c0017e9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017ea3:	50                   	push   eax
c0017ea4:	6a 02                	push   0x2
c0017ea6:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017eac:	e8 d9 f3 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017eb1:	83 c4 0c             	add    esp,0xc
c0017eb4:	53                   	push   ebx
c0017eb5:	6a 04                	push   0x4
c0017eb7:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017ebd:	e8 c8 f3 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ec2:	83 c4 0c             	add    esp,0xc
c0017ec5:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0017eca:	52                   	push   edx
c0017ecb:	6a 07                	push   0x7
c0017ecd:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017ed3:	e8 b2 f3 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ed8:	83 c4 0c             	add    esp,0xc
c0017edb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017ee0:	50                   	push   eax
c0017ee1:	6a 08                	push   0x8
c0017ee3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017ee9:	e8 9c f3 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017eee:	83 c4 0c             	add    esp,0xc
c0017ef1:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0017ef6:	55                   	push   ebp
c0017ef7:	6a 09                	push   0x9
c0017ef9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017eff:	e8 86 f3 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017f04:	5a                   	pop    edx
c0017f05:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017f09:	e8 7c fb ff ff       	call   c0017a8a <RTC::completeRTCRefresh()>
c0017f0e:	83 c4 3c             	add    esp,0x3c
c0017f11:	b0 01                	mov    al,0x1
c0017f13:	5b                   	pop    ebx
c0017f14:	5e                   	pop    esi
c0017f15:	5f                   	pop    edi
c0017f16:	5d                   	pop    ebp
c0017f17:	c3                   	ret    

c0017f18 <rtcIRQHandler(regs*, void*)>:
c0017f18:	53                   	push   ebx
c0017f19:	83 ec 10             	sub    esp,0x10
c0017f1c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017f20:	6a 0c                	push   0xc
c0017f22:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017f28:	e8 43 f2 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017f2d:	83 c4 10             	add    esp,0x10
c0017f30:	a8 80                	test   al,0x80
c0017f32:	74 24                	je     c0017f58 <rtcIRQHandler(regs*, void*)+0x40>
c0017f34:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017f3b:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017f42:	66 ff 05 18 92 02 c0 	inc    WORD PTR ds:0xc0029218
c0017f49:	75 0d                	jne    c0017f58 <rtcIRQHandler(regs*, void*)+0x40>
c0017f4b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017f4f:	83 c4 08             	add    esp,0x8
c0017f52:	5b                   	pop    ebx
c0017f53:	e9 32 fb ff ff       	jmp    c0017a8a <RTC::completeRTCRefresh()>
c0017f58:	83 c4 08             	add    esp,0x8
c0017f5b:	5b                   	pop    ebx
c0017f5c:	c3                   	ret    
c0017f5d:	90                   	nop

c0017f5e <RTC::RTC()>:
c0017f5e:	83 ec 1c             	sub    esp,0x1c
c0017f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f65:	83 ec 08             	sub    esp,0x8
c0017f68:	68 1f 1e 02 c0       	push   0xc0021e1f
c0017f6d:	50                   	push   eax
c0017f6e:	e8 df 3b ff ff       	call   c000bb52 <Clock::Clock(char const*)>
c0017f73:	83 c4 10             	add    esp,0x10
c0017f76:	ba 3c 1e 02 c0       	mov    edx,0xc0021e3c
c0017f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f7f:	89 10                	mov    DWORD PTR [eax],edx
c0017f81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f85:	83 ec 0c             	sub    esp,0xc
c0017f88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f8c:	6a 01                	push   0x1
c0017f8e:	68 18 7f 01 c0       	push   0xc0017f18
c0017f93:	6a 08                	push   0x8
c0017f95:	50                   	push   eax
c0017f96:	e8 93 40 ff ff       	call   c000c02e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017f9b:	83 c4 20             	add    esp,0x20
c0017f9e:	89 c2                	mov    edx,eax
c0017fa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa4:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017faa:	fa                   	cli    
c0017fab:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0017fb0:	83 c0 01             	add    eax,0x1
c0017fb3:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0017fb8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017fbd:	83 ec 08             	sub    esp,0x8
c0017fc0:	6a 0b                	push   0xb
c0017fc2:	50                   	push   eax
c0017fc3:	e8 a8 f1 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017fc8:	83 c4 10             	add    esp,0x10
c0017fcb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017fcf:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017fd4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017fd8:	83 ca 10             	or     edx,0x10
c0017fdb:	0f b6 d2             	movzx  edx,dl
c0017fde:	83 ec 04             	sub    esp,0x4
c0017fe1:	52                   	push   edx
c0017fe2:	6a 0b                	push   0xb
c0017fe4:	50                   	push   eax
c0017fe5:	e8 a0 f2 fe ff       	call   c000728a <Computer::writeCMOS(unsigned char, unsigned char)>
c0017fea:	83 c4 10             	add    esp,0x10
c0017fed:	83 ec 0c             	sub    esp,0xc
c0017ff0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ff4:	e8 91 fa ff ff       	call   c0017a8a <RTC::completeRTCRefresh()>
c0017ff9:	83 c4 10             	add    esp,0x10
c0017ffc:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c0018001:	83 e8 01             	sub    eax,0x1
c0018004:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c0018009:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001800e:	85 c0                	test   eax,eax
c0018010:	75 01                	jne    c0018013 <RTC::RTC()+0xb5>
c0018012:	fb                   	sti    
c0018013:	90                   	nop
c0018014:	83 c4 1c             	add    esp,0x1c
c0018017:	c3                   	ret    

c0018018 <HalConsoleScroll(int, int)>:
c0018018:	83 ec 10             	sub    esp,0x10
c001801b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018023:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001802b:	90                   	nop
c001802c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018031:	0f 8f e1 00 00 00    	jg     c0018118 <HalConsoleScroll(int, int)+0x100>
c0018037:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001803f:	90                   	nop
c0018040:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018048:	0f 8f be 00 00 00    	jg     c001810c <HalConsoleScroll(int, int)+0xf4>
c001804e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018052:	89 d0                	mov    eax,edx
c0018054:	c1 e0 02             	shl    eax,0x2
c0018057:	01 d0                	add    eax,edx
c0018059:	c1 e0 05             	shl    eax,0x5
c001805c:	89 c2                	mov    edx,eax
c001805e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018062:	01 d0                	add    eax,edx
c0018064:	89 c2                	mov    edx,eax
c0018066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001806a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001806d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018071:	89 d0                	mov    eax,edx
c0018073:	c1 e0 02             	shl    eax,0x2
c0018076:	01 d0                	add    eax,edx
c0018078:	c1 e0 05             	shl    eax,0x5
c001807b:	89 c2                	mov    edx,eax
c001807d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018081:	01 d0                	add    eax,edx
c0018083:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018089:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001808d:	01 c2                	add    edx,eax
c001808f:	8a 01                	mov    al,BYTE PTR [ecx]
c0018091:	88 02                	mov    BYTE PTR [edx],al
c0018093:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018098:	75 66                	jne    c0018100 <HalConsoleScroll(int, int)+0xe8>
c001809a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001809e:	83 e0 01             	and    eax,0x1
c00180a1:	74 39                	je     c00180dc <HalConsoleScroll(int, int)+0xc4>
c00180a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180a7:	83 e0 0f             	and    eax,0xf
c00180aa:	88 c2                	mov    dl,al
c00180ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00180b0:	c1 e0 04             	shl    eax,0x4
c00180b3:	09 d0                	or     eax,edx
c00180b5:	88 c1                	mov    cl,al
c00180b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00180bb:	89 d0                	mov    eax,edx
c00180bd:	c1 e0 02             	shl    eax,0x2
c00180c0:	01 d0                	add    eax,edx
c00180c2:	c1 e0 05             	shl    eax,0x5
c00180c5:	89 c2                	mov    edx,eax
c00180c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180cb:	01 d0                	add    eax,edx
c00180cd:	89 c2                	mov    edx,eax
c00180cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180d3:	01 d0                	add    eax,edx
c00180d5:	88 ca                	mov    dl,cl
c00180d7:	88 10                	mov    BYTE PTR [eax],dl
c00180d9:	eb 25                	jmp    c0018100 <HalConsoleScroll(int, int)+0xe8>
c00180db:	90                   	nop
c00180dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00180e0:	89 d0                	mov    eax,edx
c00180e2:	c1 e0 02             	shl    eax,0x2
c00180e5:	01 d0                	add    eax,edx
c00180e7:	c1 e0 05             	shl    eax,0x5
c00180ea:	89 c2                	mov    edx,eax
c00180ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180f0:	01 d0                	add    eax,edx
c00180f2:	89 c2                	mov    edx,eax
c00180f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180f8:	01 d0                	add    eax,edx
c00180fa:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00180fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018100:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018105:	e9 36 ff ff ff       	jmp    c0018040 <HalConsoleScroll(int, int)+0x28>
c001810a:	66 90                	xchg   ax,ax
c001810c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018111:	e9 16 ff ff ff       	jmp    c001802c <HalConsoleScroll(int, int)+0x14>
c0018116:	66 90                	xchg   ax,ax
c0018118:	90                   	nop
c0018119:	83 c4 10             	add    esp,0x10
c001811c:	c3                   	ret    
c001811d:	8d 76 00             	lea    esi,[esi+0x0]

c0018120 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018120:	83 ec 14             	sub    esp,0x14
c0018123:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018127:	88 04 24             	mov    BYTE PTR [esp],al
c001812a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001812d:	0f b6 c0             	movzx  eax,al
c0018130:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018134:	89 d1                	mov    ecx,edx
c0018136:	83 e1 0f             	and    ecx,0xf
c0018139:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001813d:	c1 e2 04             	shl    edx,0x4
c0018140:	0f b6 d2             	movzx  edx,dl
c0018143:	09 ca                	or     edx,ecx
c0018145:	c1 e2 08             	shl    edx,0x8
c0018148:	09 d0                	or     eax,edx
c001814a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001814f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018157:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001815b:	89 d0                	mov    eax,edx
c001815d:	c1 e0 02             	shl    eax,0x2
c0018160:	01 d0                	add    eax,edx
c0018162:	c1 e0 04             	shl    eax,0x4
c0018165:	89 c2                	mov    edx,eax
c0018167:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001816b:	01 d0                	add    eax,edx
c001816d:	01 c0                	add    eax,eax
c001816f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018173:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018177:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001817c:	66 89 02             	mov    WORD PTR [edx],ax
c001817f:	90                   	nop
c0018180:	83 c4 14             	add    esp,0x14
c0018183:	c3                   	ret    

c0018184 <HalConsoleCursorUpdate(int, int)>:
c0018184:	83 ec 20             	sub    esp,0x20
c0018187:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001818b:	89 c2                	mov    edx,eax
c001818d:	c1 e2 02             	shl    edx,0x2
c0018190:	01 d0                	add    eax,edx
c0018192:	c1 e0 04             	shl    eax,0x4
c0018195:	89 c2                	mov    edx,eax
c0018197:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001819b:	01 d0                	add    eax,edx
c001819d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00181a2:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00181a9:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00181ae:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00181b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00181b6:	ee                   	out    dx,al
c00181b7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00181bc:	0f b6 c0             	movzx  eax,al
c00181bf:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00181c6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00181ca:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00181ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00181d2:	ee                   	out    dx,al
c00181d3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00181da:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00181df:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00181e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181e7:	ee                   	out    dx,al
c00181e8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00181ed:	c1 e8 08             	shr    eax,0x8
c00181f0:	0f b6 c0             	movzx  eax,al
c00181f3:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00181fa:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00181fe:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018202:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018206:	ee                   	out    dx,al
c0018207:	90                   	nop
c0018208:	83 c4 20             	add    esp,0x20
c001820b:	c3                   	ret    

c001820c <FAT::getName()>:
c001820c:	b8 70 1e 02 c0       	mov    eax,0xc0021e70
c0018211:	c3                   	ret    
c0018212:	66 90                	xchg   ax,ax

c0018214 <FAT::tell(void*, unsigned long long*)>:
c0018214:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018219:	75 09                	jne    c0018224 <FAT::tell(void*, unsigned long long*)+0x10>
c001821b:	b8 04 00 00 00       	mov    eax,0x4
c0018220:	c3                   	ret    
c0018221:	8d 76 00             	lea    esi,[esi+0x0]
c0018224:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018229:	75 09                	jne    c0018234 <FAT::tell(void*, unsigned long long*)+0x20>
c001822b:	b8 04 00 00 00       	mov    eax,0x4
c0018230:	c3                   	ret    
c0018231:	8d 76 00             	lea    esi,[esi+0x0]
c0018234:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018238:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001823b:	ba 00 00 00 00       	mov    edx,0x0
c0018240:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018244:	89 01                	mov    DWORD PTR [ecx],eax
c0018246:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018249:	b8 00 00 00 00       	mov    eax,0x0
c001824e:	c3                   	ret    
c001824f:	90                   	nop

c0018250 <FAT::stat(void*, unsigned long long*)>:
c0018250:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018255:	75 09                	jne    c0018260 <FAT::stat(void*, unsigned long long*)+0x10>
c0018257:	b8 04 00 00 00       	mov    eax,0x4
c001825c:	c3                   	ret    
c001825d:	8d 76 00             	lea    esi,[esi+0x0]
c0018260:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018265:	75 09                	jne    c0018270 <FAT::stat(void*, unsigned long long*)+0x20>
c0018267:	b8 04 00 00 00       	mov    eax,0x4
c001826c:	c3                   	ret    
c001826d:	8d 76 00             	lea    esi,[esi+0x0]
c0018270:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018274:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018277:	ba 00 00 00 00       	mov    edx,0x0
c001827c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018280:	89 01                	mov    DWORD PTR [ecx],eax
c0018282:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018285:	b8 00 00 00 00       	mov    eax,0x0
c001828a:	c3                   	ret    
c001828b:	90                   	nop

c001828c <FAT::~FAT()>:
c001828c:	83 ec 0c             	sub    esp,0xc
c001828f:	ba bc 1e 02 c0       	mov    edx,0xc0021ebc
c0018294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018298:	89 10                	mov    DWORD PTR [eax],edx
c001829a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001829e:	83 ec 0c             	sub    esp,0xc
c00182a1:	50                   	push   eax
c00182a2:	e8 ed 2c ff ff       	call   c000af94 <Filesystem::~Filesystem()>
c00182a7:	83 c4 10             	add    esp,0x10
c00182aa:	90                   	nop
c00182ab:	83 c4 0c             	add    esp,0xc
c00182ae:	c3                   	ret    
c00182af:	90                   	nop

c00182b0 <FAT::~FAT()>:
c00182b0:	83 ec 0c             	sub    esp,0xc
c00182b3:	83 ec 0c             	sub    esp,0xc
c00182b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182ba:	e8 cd ff ff ff       	call   c001828c <FAT::~FAT()>
c00182bf:	83 c4 10             	add    esp,0x10
c00182c2:	83 ec 08             	sub    esp,0x8
c00182c5:	6a 08                	push   0x8
c00182c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182cb:	e8 7a 25 ff ff       	call   c000a84a <operator delete(void*, unsigned long)>
c00182d0:	83 c4 10             	add    esp,0x10
c00182d3:	83 c4 0c             	add    esp,0xc
c00182d6:	c3                   	ret    
c00182d7:	90                   	nop

c00182d8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00182d8:	83 ec 1c             	sub    esp,0x1c
c00182db:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00182e2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00182e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00182eb:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c00182f2:	83 f8 ff             	cmp    eax,0xffffffff
c00182f5:	75 35                	jne    c001832c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00182f7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00182fb:	88 c2                	mov    dl,al
c00182fd:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c0018302:	01 d0                	add    eax,edx
c0018304:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018308:	8b 15 20 92 02 c0    	mov    edx,DWORD PTR ds:0xc0029220
c001830e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018312:	89 14 85 40 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6dc0],edx
c0018319:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c001831e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018322:	89 14 85 c0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d40],edx
c0018329:	eb 19                	jmp    c0018344 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001832b:	90                   	nop
c001832c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018330:	88 c2                	mov    dl,al
c0018332:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018336:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c001833d:	01 d0                	add    eax,edx
c001833f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018343:	90                   	nop
c0018344:	83 ec 04             	sub    esp,0x4
c0018347:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001834b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001834f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018353:	50                   	push   eax
c0018354:	e8 76 cc fe ff       	call   c0004fcf <f_getlabel>
c0018359:	83 c4 10             	add    esp,0x10
c001835c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018360:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018365:	75 09                	jne    c0018370 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018367:	b8 00 00 00 00       	mov    eax,0x0
c001836c:	eb 0a                	jmp    c0018378 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001836e:	66 90                	xchg   ax,ax
c0018370:	b8 01 00 00 00       	mov    eax,0x1
c0018375:	8d 76 00             	lea    esi,[esi+0x0]
c0018378:	83 c4 1c             	add    esp,0x1c
c001837b:	c3                   	ret    

c001837c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001837c:	57                   	push   edi
c001837d:	83 ec 58             	sub    esp,0x58
c0018380:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018388:	8d 54 24 10          	lea    edx,[esp+0x10]
c001838c:	b8 00 00 00 00       	mov    eax,0x0
c0018391:	b9 0f 00 00 00       	mov    ecx,0xf
c0018396:	fc                   	cld    
c0018397:	89 d7                	mov    edi,edx
c0018399:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001839b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001839f:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c00183a6:	83 f8 ff             	cmp    eax,0xffffffff
c00183a9:	75 35                	jne    c00183e0 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00183ab:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00183af:	88 c2                	mov    dl,al
c00183b1:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c00183b6:	01 d0                	add    eax,edx
c00183b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00183bc:	8b 15 20 92 02 c0    	mov    edx,DWORD PTR ds:0xc0029220
c00183c2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00183c6:	89 14 85 40 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6dc0],edx
c00183cd:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c00183d2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00183d6:	89 14 85 c0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d40],edx
c00183dd:	eb 19                	jmp    c00183f8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00183df:	90                   	nop
c00183e0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00183e4:	88 c2                	mov    dl,al
c00183e6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00183ea:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c00183f1:	01 d0                	add    eax,edx
c00183f3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00183f7:	90                   	nop
c00183f8:	83 ec 08             	sub    esp,0x8
c00183fb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00183ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018403:	50                   	push   eax
c0018404:	e8 37 84 fe ff       	call   c0000840 <strcat>
c0018409:	83 c4 10             	add    esp,0x10
c001840c:	83 ec 0c             	sub    esp,0xc
c001840f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018413:	50                   	push   eax
c0018414:	e8 07 cd fe ff       	call   c0005120 <f_setlabel>
c0018419:	83 c4 10             	add    esp,0x10
c001841c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018420:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018425:	75 09                	jne    c0018430 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0018427:	b8 00 00 00 00       	mov    eax,0x0
c001842c:	eb 0a                	jmp    c0018438 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001842e:	66 90                	xchg   ax,ax
c0018430:	b8 01 00 00 00       	mov    eax,0x1
c0018435:	8d 76 00             	lea    esi,[esi+0x0]
c0018438:	83 c4 58             	add    esp,0x58
c001843b:	5f                   	pop    edi
c001843c:	c3                   	ret    
c001843d:	90                   	nop
c001843e:	66 90                	xchg   ax,ax

c0018440 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018440:	83 ec 2c             	sub    esp,0x2c
c0018443:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001844b:	83 ec 08             	sub    esp,0x8
c001844e:	68 94 1e 02 c0       	push   0xc0021e94
c0018453:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018457:	e8 f4 82 fe ff       	call   c0000750 <strcmp>
c001845c:	83 c4 10             	add    esp,0x10
c001845f:	85 c0                	test   eax,eax
c0018461:	0f 94 c0             	sete   al
c0018464:	0f b6 c0             	movzx  eax,al
c0018467:	85 c0                	test   eax,eax
c0018469:	74 0d                	je     c0018478 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001846b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018473:	e9 c0 00 00 00       	jmp    c0018538 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018478:	83 ec 08             	sub    esp,0x8
c001847b:	68 86 1e 02 c0       	push   0xc0021e86
c0018480:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018484:	e8 c7 82 fe ff       	call   c0000750 <strcmp>
c0018489:	83 c4 10             	add    esp,0x10
c001848c:	85 c0                	test   eax,eax
c001848e:	0f 94 c0             	sete   al
c0018491:	0f b6 c0             	movzx  eax,al
c0018494:	85 c0                	test   eax,eax
c0018496:	74 10                	je     c00184a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018498:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00184a0:	e9 93 00 00 00       	jmp    c0018538 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00184a5:	8d 76 00             	lea    esi,[esi+0x0]
c00184a8:	83 ec 08             	sub    esp,0x8
c00184ab:	68 8c 1e 02 c0       	push   0xc0021e8c
c00184b0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00184b4:	e8 97 82 fe ff       	call   c0000750 <strcmp>
c00184b9:	83 c4 10             	add    esp,0x10
c00184bc:	85 c0                	test   eax,eax
c00184be:	0f 94 c0             	sete   al
c00184c1:	0f b6 c0             	movzx  eax,al
c00184c4:	85 c0                	test   eax,eax
c00184c6:	74 0c                	je     c00184d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00184c8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00184d0:	eb 66                	jmp    c0018538 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00184d2:	66 90                	xchg   ax,ax
c00184d4:	83 ec 08             	sub    esp,0x8
c00184d7:	68 bc f7 01 c0       	push   0xc001f7bc
c00184dc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00184e0:	e8 6b 82 fe ff       	call   c0000750 <strcmp>
c00184e5:	83 c4 10             	add    esp,0x10
c00184e8:	85 c0                	test   eax,eax
c00184ea:	0f 94 c0             	sete   al
c00184ed:	0f b6 c0             	movzx  eax,al
c00184f0:	85 c0                	test   eax,eax
c00184f2:	74 0c                	je     c0018500 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00184f4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00184fc:	eb 3a                	jmp    c0018538 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00184fe:	66 90                	xchg   ax,ax
c0018500:	83 ec 08             	sub    esp,0x8
c0018503:	68 92 1e 02 c0       	push   0xc0021e92
c0018508:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001850c:	e8 3f 82 fe ff       	call   c0000750 <strcmp>
c0018511:	83 c4 10             	add    esp,0x10
c0018514:	85 c0                	test   eax,eax
c0018516:	0f 94 c0             	sete   al
c0018519:	0f b6 c0             	movzx  eax,al
c001851c:	85 c0                	test   eax,eax
c001851e:	74 0c                	je     c001852c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018520:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018528:	eb 0e                	jmp    c0018538 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001852a:	66 90                	xchg   ax,ax
c001852c:	b8 08 00 00 00       	mov    eax,0x8
c0018531:	e9 ea 00 00 00       	jmp    c0018620 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018536:	66 90                	xchg   ax,ax
c0018538:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001853f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018544:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018548:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c001854f:	83 f8 ff             	cmp    eax,0xffffffff
c0018552:	75 34                	jne    c0018588 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018554:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018558:	88 c2                	mov    dl,al
c001855a:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c001855f:	01 d0                	add    eax,edx
c0018561:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018565:	8b 15 20 92 02 c0    	mov    edx,DWORD PTR ds:0xc0029220
c001856b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001856f:	89 14 85 40 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6dc0],edx
c0018576:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c001857b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001857f:	89 14 85 c0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d40],edx
c0018586:	eb 18                	jmp    c00185a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018588:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001858c:	88 c2                	mov    dl,al
c001858e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018592:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c0018599:	01 d0                	add    eax,edx
c001859b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001859f:	90                   	nop
c00185a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00185a4:	88 04 24             	mov    BYTE PTR [esp],al
c00185a7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00185ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00185af:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00185b7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00185bc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00185c4:	83 ec 0c             	sub    esp,0xc
c00185c7:	68 00 20 00 00       	push   0x2000
c00185cc:	e8 dd f4 fe ff       	call   c0007aae <malloc>
c00185d1:	83 c4 10             	add    esp,0x10
c00185d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00185d8:	68 00 20 00 00       	push   0x2000
c00185dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00185e1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00185e5:	50                   	push   eax
c00185e6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00185ea:	50                   	push   eax
c00185eb:	e8 2d ce fe ff       	call   c000541d <f_mkfs>
c00185f0:	83 c4 10             	add    esp,0x10
c00185f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00185f7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00185fc:	75 0a                	jne    c0018608 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00185fe:	b8 00 00 00 00       	mov    eax,0x0
c0018603:	eb 1b                	jmp    c0018620 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018605:	8d 76 00             	lea    esi,[esi+0x0]
c0018608:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001860d:	75 09                	jne    c0018618 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001860f:	b8 09 00 00 00       	mov    eax,0x9
c0018614:	eb 0a                	jmp    c0018620 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018616:	66 90                	xchg   ax,ax
c0018618:	b8 01 00 00 00       	mov    eax,0x1
c001861d:	8d 76 00             	lea    esi,[esi+0x0]
c0018620:	83 c4 2c             	add    esp,0x2c
c0018623:	c3                   	ret    

c0018624 <FAT::tryMount(LogicalDisk*, int)>:
c0018624:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001862a:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c001862f:	83 f8 14             	cmp    eax,0x14
c0018632:	75 18                	jne    c001864c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018634:	83 ec 0c             	sub    esp,0xc
c0018637:	68 98 1e 02 c0       	push   0xc0021e98
c001863c:	e8 9a 85 ff ff       	call   c0010bdb <KePanic(char const*)>
c0018641:	83 c4 10             	add    esp,0x10
c0018644:	b0 00                	mov    al,0x0
c0018646:	e9 ed 01 00 00       	jmp    c0018838 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001864b:	90                   	nop
c001864c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018653:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018659:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001865f:	3d 00 02 00 00       	cmp    eax,0x200
c0018664:	74 0a                	je     c0018670 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018666:	b0 00                	mov    al,0x0
c0018668:	e9 cb 01 00 00       	jmp    c0018838 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001866d:	8d 76 00             	lea    esi,[esi+0x0]
c0018670:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018678:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001867f:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c0018686:	83 f8 ff             	cmp    eax,0xffffffff
c0018689:	74 09                	je     c0018694 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001868b:	b0 01                	mov    al,0x1
c001868d:	e9 a6 01 00 00       	jmp    c0018838 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018692:	66 90                	xchg   ax,ax
c0018694:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001869e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00186a6:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00186ad:	88 c2                	mov    dl,al
c00186af:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c00186b4:	01 d0                	add    eax,edx
c00186b6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00186bd:	8b 15 20 92 02 c0    	mov    edx,DWORD PTR ds:0xc0029220
c00186c3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00186ca:	89 14 85 40 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6dc0],edx
c00186d1:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c00186d6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00186dd:	89 14 85 c0 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d40],edx
c00186e4:	83 ec 0c             	sub    esp,0xc
c00186e7:	68 34 02 00 00       	push   0x234
c00186ec:	e8 bd f3 fe ff       	call   c0007aae <malloc>
c00186f1:	83 c4 10             	add    esp,0x10
c00186f4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00186fb:	83 ec 04             	sub    esp,0x4
c00186fe:	6a 00                	push   0x0
c0018700:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018707:	50                   	push   eax
c0018708:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001870f:	e8 e4 b4 fe ff       	call   c0003bf8 <f_mount>
c0018714:	83 c4 10             	add    esp,0x10
c0018717:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001871e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018726:	74 1c                	je     c0018744 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018728:	83 ec 0c             	sub    esp,0xc
c001872b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018732:	e8 97 f3 fe ff       	call   c0007ace <rfree>
c0018737:	83 c4 10             	add    esp,0x10
c001873a:	b0 00                	mov    al,0x0
c001873c:	e9 f7 00 00 00       	jmp    c0018838 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018741:	8d 76 00             	lea    esi,[esi+0x0]
c0018744:	83 ec 04             	sub    esp,0x4
c0018747:	68 00 01 00 00       	push   0x100
c001874c:	6a 00                	push   0x0
c001874e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018755:	50                   	push   eax
c0018756:	e8 95 7d fe ff       	call   c00004f0 <memset>
c001875b:	83 c4 10             	add    esp,0x10
c001875e:	83 ec 08             	sub    esp,0x8
c0018761:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018768:	50                   	push   eax
c0018769:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018770:	50                   	push   eax
c0018771:	e8 ca 80 fe ff       	call   c0000840 <strcat>
c0018776:	83 c4 10             	add    esp,0x10
c0018779:	83 ec 08             	sub    esp,0x8
c001877c:	68 a6 1e 02 c0       	push   0xc0021ea6
c0018781:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018788:	50                   	push   eax
c0018789:	e8 b2 80 fe ff       	call   c0000840 <strcat>
c001878e:	83 c4 10             	add    esp,0x10
c0018791:	83 ec 04             	sub    esp,0x4
c0018794:	6a 01                	push   0x1
c0018796:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001879d:	50                   	push   eax
c001879e:	8d 44 24 14          	lea    eax,[esp+0x14]
c00187a2:	50                   	push   eax
c00187a3:	e8 b2 b4 fe ff       	call   c0003c5a <f_open>
c00187a8:	83 c4 10             	add    esp,0x10
c00187ab:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00187b2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00187b9:	85 c0                	test   eax,eax
c00187bb:	74 0b                	je     c00187c8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00187bd:	78 31                	js     c00187f0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00187bf:	83 e8 04             	sub    eax,0x4
c00187c2:	83 f8 01             	cmp    eax,0x1
c00187c5:	77 29                	ja     c00187f0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00187c7:	90                   	nop
c00187c8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00187d0:	83 ec 0c             	sub    esp,0xc
c00187d3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00187d7:	50                   	push   eax
c00187d8:	e8 4c bc fe ff       	call   c0004429 <f_close>
c00187dd:	83 c4 10             	add    esp,0x10
c00187e0:	90                   	nop
c00187e1:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00187e9:	85 c0                	test   eax,eax
c00187eb:	74 43                	je     c0018830 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00187ed:	eb 31                	jmp    c0018820 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00187ef:	90                   	nop
c00187f0:	83 ec 0c             	sub    esp,0xc
c00187f3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00187fa:	e8 cf f2 fe ff       	call   c0007ace <rfree>
c00187ff:	83 c4 10             	add    esp,0x10
c0018802:	83 ec 04             	sub    esp,0x4
c0018805:	6a 00                	push   0x0
c0018807:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001880e:	50                   	push   eax
c001880f:	6a 00                	push   0x0
c0018811:	e8 e2 b3 fe ff       	call   c0003bf8 <f_mount>
c0018816:	83 c4 10             	add    esp,0x10
c0018819:	b0 00                	mov    al,0x0
c001881b:	eb 1b                	jmp    c0018838 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001881d:	8d 76 00             	lea    esi,[esi+0x0]
c0018820:	a1 20 92 02 c0       	mov    eax,ds:0xc0029220
c0018825:	83 c0 01             	add    eax,0x1
c0018828:	a3 20 92 02 c0       	mov    ds:0xc0029220,eax
c001882d:	8d 76 00             	lea    esi,[esi+0x0]
c0018830:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0018837:	90                   	nop
c0018838:	81 c4 4c 03 00 00    	add    esp,0x34c
c001883e:	c3                   	ret    
c001883f:	90                   	nop

c0018840 <FAT::allocateSwapfile(char const*, int)>:
c0018840:	55                   	push   ebp
c0018841:	57                   	push   edi
c0018842:	56                   	push   esi
c0018843:	53                   	push   ebx
c0018844:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001884a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018855:	83 ec 0c             	sub    esp,0xc
c0018858:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001885f:	e8 4a f2 fe ff       	call   c0007aae <malloc>
c0018864:	83 c4 10             	add    esp,0x10
c0018867:	89 c7                	mov    edi,eax
c0018869:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c001886e:	83 ec 04             	sub    esp,0x4
c0018871:	50                   	push   eax
c0018872:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0018879:	57                   	push   edi
c001887a:	e8 51 29 ff ff       	call   c000b1d0 <File::File(char const*, Process*)>
c001887f:	83 c4 10             	add    esp,0x10
c0018882:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0018889:	83 ec 04             	sub    esp,0x4
c001888c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018890:	50                   	push   eax
c0018891:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018895:	50                   	push   eax
c0018896:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001889d:	e8 96 2c ff ff       	call   c000b538 <File::stat(unsigned long long*, bool*)>
c00188a2:	83 c4 10             	add    esp,0x10
c00188a5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00188ac:	c1 e0 14             	shl    eax,0x14
c00188af:	89 c7                	mov    edi,eax
c00188b1:	89 c5                	mov    ebp,eax
c00188b3:	c1 fd 1f             	sar    ebp,0x1f
c00188b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00188be:	89 f9                	mov    ecx,edi
c00188c0:	31 c1                	xor    ecx,eax
c00188c2:	89 cb                	mov    ebx,ecx
c00188c4:	89 e9                	mov    ecx,ebp
c00188c6:	31 d1                	xor    ecx,edx
c00188c8:	89 ce                	mov    esi,ecx
c00188ca:	89 f0                	mov    eax,esi
c00188cc:	09 d8                	or     eax,ebx
c00188ce:	0f 84 9c 00 00 00    	je     c0018970 <FAT::allocateSwapfile(char const*, int)+0x130>
c00188d4:	83 ec 0c             	sub    esp,0xc
c00188d7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00188de:	e8 21 2b ff ff       	call   c000b404 <File::unlink()>
c00188e3:	83 c4 10             	add    esp,0x10
c00188e6:	83 ec 08             	sub    esp,0x8
c00188e9:	6a 12                	push   0x12
c00188eb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00188f2:	e8 95 29 ff ff       	call   c000b28c <File::open(FileOpenMode)>
c00188f7:	83 c4 10             	add    esp,0x10
c00188fa:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018901:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018907:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001890e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018915:	c1 e0 14             	shl    eax,0x14
c0018918:	83 ec 04             	sub    esp,0x4
c001891b:	6a 01                	push   0x1
c001891d:	50                   	push   eax
c001891e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0018925:	e8 86 c9 fe ff       	call   c00052b0 <f_expand>
c001892a:	83 c4 10             	add    esp,0x10
c001892d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018934:	8b 00                	mov    eax,DWORD PTR [eax]
c0018936:	83 c0 10             	add    eax,0x10
c0018939:	8b 00                	mov    eax,DWORD PTR [eax]
c001893b:	83 ec 0c             	sub    esp,0xc
c001893e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018942:	52                   	push   edx
c0018943:	8d 54 24 30          	lea    edx,[esp+0x30]
c0018947:	52                   	push   edx
c0018948:	6a 00                	push   0x0
c001894a:	68 00 04 00 00       	push   0x400
c001894f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0018956:	ff d0                	call   eax
c0018958:	83 c4 20             	add    esp,0x20
c001895b:	83 ec 0c             	sub    esp,0xc
c001895e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018965:	e8 80 29 ff ff       	call   c000b2ea <File::close()>
c001896a:	83 c4 10             	add    esp,0x10
c001896d:	8d 76 00             	lea    esi,[esi+0x0]
c0018970:	83 ec 08             	sub    esp,0x8
c0018973:	6a 01                	push   0x1
c0018975:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001897c:	e8 0b 29 ff ff       	call   c000b28c <File::open(FileOpenMode)>
c0018981:	83 c4 10             	add    esp,0x10
c0018984:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001898b:	8b 00                	mov    eax,DWORD PTR [eax]
c001898d:	83 c0 0c             	add    eax,0xc
c0018990:	8b 00                	mov    eax,DWORD PTR [eax]
c0018992:	83 ec 0c             	sub    esp,0xc
c0018995:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018999:	52                   	push   edx
c001899a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001899e:	52                   	push   edx
c001899f:	6a 00                	push   0x0
c00189a1:	6a 04                	push   0x4
c00189a3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00189aa:	ff d0                	call   eax
c00189ac:	83 c4 20             	add    esp,0x20
c00189af:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00189b6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00189bc:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00189c3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00189ca:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00189cd:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00189d4:	83 ec 0c             	sub    esp,0xc
c00189d7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00189de:	e8 07 29 ff ff       	call   c000b2ea <File::close()>
c00189e3:	83 c4 10             	add    esp,0x10
c00189e6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00189ed:	ba 00 00 00 00       	mov    edx,0x0
c00189f2:	81 c4 3c 04 00 00    	add    esp,0x43c
c00189f8:	5b                   	pop    ebx
c00189f9:	5e                   	pop    esi
c00189fa:	5f                   	pop    edi
c00189fb:	5d                   	pop    ebp
c00189fc:	c3                   	ret    
c00189fd:	90                   	nop
c00189fe:	66 90                	xchg   ax,ax

c0018a00 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0018a00:	57                   	push   edi
c0018a01:	56                   	push   esi
c0018a02:	53                   	push   ebx
c0018a03:	81 ec 50 02 00 00    	sub    esp,0x250
c0018a09:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0018a11:	74 0d                	je     c0018a20 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0018a13:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0018a1b:	75 0f                	jne    c0018a2c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0018a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0018a20:	b8 04 00 00 00       	mov    eax,0x4
c0018a25:	e9 3a 01 00 00       	jmp    c0018b64 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018a2a:	66 90                	xchg   ax,ax
c0018a2c:	83 ec 08             	sub    esp,0x8
c0018a2f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018a36:	50                   	push   eax
c0018a37:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0018a3e:	e8 b3 bc fe ff       	call   c00046f6 <f_readdir>
c0018a43:	83 c4 10             	add    esp,0x10
c0018a46:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0018a4d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0018a54:	83 ec 0c             	sub    esp,0xc
c0018a57:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018a5e:	83 c0 16             	add    eax,0x16
c0018a61:	50                   	push   eax
c0018a62:	e8 09 7b fe ff       	call   c0000570 <strlen>
c0018a67:	83 c4 10             	add    esp,0x10
c0018a6a:	ba 00 00 00 00       	mov    edx,0x0
c0018a6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018a73:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018a77:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0018a7e:	0f b6 c0             	movzx  eax,al
c0018a81:	83 e0 10             	and    eax,0x10
c0018a84:	74 0a                	je     c0018a90 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0018a86:	b8 02 00 00 00       	mov    eax,0x2
c0018a8b:	eb 0b                	jmp    c0018a98 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0018a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0018a90:	b8 01 00 00 00       	mov    eax,0x1
c0018a95:	8d 76 00             	lea    esi,[esi+0x0]
c0018a98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018a9c:	83 ec 08             	sub    esp,0x8
c0018a9f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018aa6:	83 c0 16             	add    eax,0x16
c0018aa9:	50                   	push   eax
c0018aaa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018aae:	83 c0 10             	add    eax,0x10
c0018ab1:	50                   	push   eax
c0018ab2:	e8 89 7b fe ff       	call   c0000640 <strcpy>
c0018ab7:	83 c4 10             	add    esp,0x10
c0018aba:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0018ac1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0018ac8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018acc:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0018ad3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0018ada:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0018ae1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0018ae8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0018aef:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0018af6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0018afd:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0018b04:	89 c6                	mov    esi,eax
c0018b06:	89 d7                	mov    edi,edx
c0018b08:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018b0a:	89 c8                	mov    eax,ecx
c0018b0c:	89 fa                	mov    edx,edi
c0018b0e:	89 f3                	mov    ebx,esi
c0018b10:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0018b17:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0018b1e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0018b25:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0018b2c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0018b32:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0018b39:	0f be c0             	movsx  eax,al
c0018b3c:	85 c0                	test   eax,eax
c0018b3e:	75 08                	jne    c0018b48 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0018b40:	b8 07 00 00 00       	mov    eax,0x7
c0018b45:	eb 1d                	jmp    c0018b64 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018b47:	90                   	nop
c0018b48:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0018b4f:	85 c0                	test   eax,eax
c0018b51:	75 09                	jne    c0018b5c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0018b53:	b8 00 00 00 00       	mov    eax,0x0
c0018b58:	eb 0a                	jmp    c0018b64 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018b5a:	66 90                	xchg   ax,ax
c0018b5c:	b8 01 00 00 00       	mov    eax,0x1
c0018b61:	8d 76 00             	lea    esi,[esi+0x0]
c0018b64:	81 c4 50 02 00 00    	add    esp,0x250
c0018b6a:	5b                   	pop    ebx
c0018b6b:	5e                   	pop    esi
c0018b6c:	5f                   	pop    edi
c0018b6d:	c3                   	ret    
c0018b6e:	66 90                	xchg   ax,ax

c0018b70 <FAT::read(void*, unsigned long, void*, int*)>:
c0018b70:	83 ec 1c             	sub    esp,0x1c
c0018b73:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018b78:	74 0a                	je     c0018b84 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0018b7a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018b7f:	75 0b                	jne    c0018b8c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0018b81:	8d 76 00             	lea    esi,[esi+0x0]
c0018b84:	b8 04 00 00 00       	mov    eax,0x4
c0018b89:	eb 41                	jmp    c0018bcc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018b8b:	90                   	nop
c0018b8c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018b90:	50                   	push   eax
c0018b91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018b95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018b99:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018b9d:	e8 7b b3 fe ff       	call   c0003f1d <f_read>
c0018ba2:	83 c4 10             	add    esp,0x10
c0018ba5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ba9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018bad:	89 c2                	mov    edx,eax
c0018baf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bb3:	89 10                	mov    DWORD PTR [eax],edx
c0018bb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018bb9:	85 c0                	test   eax,eax
c0018bbb:	75 07                	jne    c0018bc4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0018bbd:	b8 00 00 00 00       	mov    eax,0x0
c0018bc2:	eb 08                	jmp    c0018bcc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018bc4:	b8 01 00 00 00       	mov    eax,0x1
c0018bc9:	8d 76 00             	lea    esi,[esi+0x0]
c0018bcc:	83 c4 1c             	add    esp,0x1c
c0018bcf:	c3                   	ret    

c0018bd0 <FAT::write(void*, unsigned long, void*, int*)>:
c0018bd0:	83 ec 1c             	sub    esp,0x1c
c0018bd3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018bd8:	74 0a                	je     c0018be4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0018bda:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018bdf:	75 0b                	jne    c0018bec <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0018be1:	8d 76 00             	lea    esi,[esi+0x0]
c0018be4:	b8 04 00 00 00       	mov    eax,0x4
c0018be9:	eb 41                	jmp    c0018c2c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018beb:	90                   	nop
c0018bec:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018bf0:	50                   	push   eax
c0018bf1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018bf5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018bf9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018bfd:	e8 1a b5 fe ff       	call   c000411c <f_write>
c0018c02:	83 c4 10             	add    esp,0x10
c0018c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c0d:	89 c2                	mov    edx,eax
c0018c0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c13:	89 10                	mov    DWORD PTR [eax],edx
c0018c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c19:	85 c0                	test   eax,eax
c0018c1b:	75 07                	jne    c0018c24 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0018c1d:	b8 00 00 00 00       	mov    eax,0x0
c0018c22:	eb 08                	jmp    c0018c2c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018c24:	b8 01 00 00 00       	mov    eax,0x1
c0018c29:	8d 76 00             	lea    esi,[esi+0x0]
c0018c2c:	83 c4 1c             	add    esp,0x1c
c0018c2f:	c3                   	ret    

c0018c30 <FAT::close(void*)>:
c0018c30:	83 ec 1c             	sub    esp,0x1c
c0018c33:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018c38:	75 0a                	jne    c0018c44 <FAT::close(void*)+0x14>
c0018c3a:	b8 04 00 00 00       	mov    eax,0x4
c0018c3f:	eb 3f                	jmp    c0018c80 <FAT::close(void*)+0x50>
c0018c41:	8d 76 00             	lea    esi,[esi+0x0]
c0018c44:	83 ec 0c             	sub    esp,0xc
c0018c47:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018c4b:	e8 d9 b7 fe ff       	call   c0004429 <f_close>
c0018c50:	83 c4 10             	add    esp,0x10
c0018c53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c57:	83 ec 0c             	sub    esp,0xc
c0018c5a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018c5e:	e8 5b ee fe ff       	call   c0007abe <free>
c0018c63:	83 c4 10             	add    esp,0x10
c0018c66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c6a:	85 c0                	test   eax,eax
c0018c6c:	75 0a                	jne    c0018c78 <FAT::close(void*)+0x48>
c0018c6e:	b8 00 00 00 00       	mov    eax,0x0
c0018c73:	eb 0b                	jmp    c0018c80 <FAT::close(void*)+0x50>
c0018c75:	8d 76 00             	lea    esi,[esi+0x0]
c0018c78:	b8 01 00 00 00       	mov    eax,0x1
c0018c7d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c80:	83 c4 1c             	add    esp,0x1c
c0018c83:	c3                   	ret    

c0018c84 <FAT::closeDir(void*)>:
c0018c84:	83 ec 1c             	sub    esp,0x1c
c0018c87:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018c8c:	75 0a                	jne    c0018c98 <FAT::closeDir(void*)+0x14>
c0018c8e:	b8 04 00 00 00       	mov    eax,0x4
c0018c93:	eb 3f                	jmp    c0018cd4 <FAT::closeDir(void*)+0x50>
c0018c95:	8d 76 00             	lea    esi,[esi+0x0]
c0018c98:	83 ec 0c             	sub    esp,0xc
c0018c9b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018c9f:	e8 30 ba fe ff       	call   c00046d4 <f_closedir>
c0018ca4:	83 c4 10             	add    esp,0x10
c0018ca7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018cab:	83 ec 0c             	sub    esp,0xc
c0018cae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018cb2:	e8 07 ee fe ff       	call   c0007abe <free>
c0018cb7:	83 c4 10             	add    esp,0x10
c0018cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018cbe:	85 c0                	test   eax,eax
c0018cc0:	75 0a                	jne    c0018ccc <FAT::closeDir(void*)+0x48>
c0018cc2:	b8 00 00 00 00       	mov    eax,0x0
c0018cc7:	eb 0b                	jmp    c0018cd4 <FAT::closeDir(void*)+0x50>
c0018cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0018ccc:	b8 01 00 00 00       	mov    eax,0x1
c0018cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0018cd4:	83 c4 1c             	add    esp,0x1c
c0018cd7:	c3                   	ret    

c0018cd8 <FAT::seek(void*, unsigned long long)>:
c0018cd8:	83 ec 2c             	sub    esp,0x2c
c0018cdb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018cdf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018ce3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018ce7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ceb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018cf0:	75 0a                	jne    c0018cfc <FAT::seek(void*, unsigned long long)+0x24>
c0018cf2:	b8 04 00 00 00       	mov    eax,0x4
c0018cf7:	eb 33                	jmp    c0018d2c <FAT::seek(void*, unsigned long long)+0x54>
c0018cf9:	8d 76 00             	lea    esi,[esi+0x0]
c0018cfc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d00:	83 ec 08             	sub    esp,0x8
c0018d03:	50                   	push   eax
c0018d04:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018d08:	e8 4b b7 fe ff       	call   c0004458 <f_lseek>
c0018d0d:	83 c4 10             	add    esp,0x10
c0018d10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018d14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d18:	85 c0                	test   eax,eax
c0018d1a:	75 08                	jne    c0018d24 <FAT::seek(void*, unsigned long long)+0x4c>
c0018d1c:	b8 00 00 00 00       	mov    eax,0x0
c0018d21:	eb 09                	jmp    c0018d2c <FAT::seek(void*, unsigned long long)+0x54>
c0018d23:	90                   	nop
c0018d24:	b8 01 00 00 00       	mov    eax,0x1
c0018d29:	8d 76 00             	lea    esi,[esi+0x0]
c0018d2c:	83 c4 2c             	add    esp,0x2c
c0018d2f:	c3                   	ret    

c0018d30 <fatWrapperReadDisk>:
c0018d30:	53                   	push   ebx
c0018d31:	83 ec 18             	sub    esp,0x18
c0018d34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d38:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018d3c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018d41:	8b 0c 85 20 84 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7be0]
c0018d48:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018d4c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d50:	ba 00 00 00 00       	mov    edx,0x0
c0018d55:	83 ec 0c             	sub    esp,0xc
c0018d58:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d5c:	53                   	push   ebx
c0018d5d:	52                   	push   edx
c0018d5e:	50                   	push   eax
c0018d5f:	51                   	push   ecx
c0018d60:	e8 ff 46 ff ff       	call   c000d464 <LogicalDisk::read(unsigned long long, int, void*)>
c0018d65:	83 c4 20             	add    esp,0x20
c0018d68:	83 c4 18             	add    esp,0x18
c0018d6b:	5b                   	pop    ebx
c0018d6c:	c3                   	ret    
c0018d6d:	8d 76 00             	lea    esi,[esi+0x0]

c0018d70 <fatWrapperWriteDisk>:
c0018d70:	53                   	push   ebx
c0018d71:	83 ec 18             	sub    esp,0x18
c0018d74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d78:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018d7c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018d81:	8b 0c 85 20 84 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7be0]
c0018d88:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018d8c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d90:	ba 00 00 00 00       	mov    edx,0x0
c0018d95:	83 ec 0c             	sub    esp,0xc
c0018d98:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d9c:	53                   	push   ebx
c0018d9d:	52                   	push   edx
c0018d9e:	50                   	push   eax
c0018d9f:	51                   	push   ecx
c0018da0:	e8 2b 47 ff ff       	call   c000d4d0 <LogicalDisk::write(unsigned long long, int, void*)>
c0018da5:	83 c4 20             	add    esp,0x20
c0018da8:	83 c4 18             	add    esp,0x18
c0018dab:	5b                   	pop    ebx
c0018dac:	c3                   	ret    
c0018dad:	8d 76 00             	lea    esi,[esi+0x0]

c0018db0 <fatWrapperIoctl>:
c0018db0:	53                   	push   ebx
c0018db1:	83 ec 28             	sub    esp,0x28
c0018db4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018db8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018dbc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018dc0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018dc4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018dc9:	83 f8 02             	cmp    eax,0x2
c0018dcc:	75 32                	jne    c0018e00 <fatWrapperIoctl+0x50>
c0018dce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018dd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018dd6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018ddb:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c0018de2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018de8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018dee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018df2:	66 89 02             	mov    WORD PTR [edx],ax
c0018df5:	b8 00 00 00 00       	mov    eax,0x0
c0018dfa:	e9 c5 00 00 00       	jmp    c0018ec4 <fatWrapperIoctl+0x114>
c0018dff:	90                   	nop
c0018e00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018e05:	83 f8 01             	cmp    eax,0x1
c0018e08:	75 6a                	jne    c0018e74 <fatWrapperIoctl+0xc4>
c0018e0a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018e12:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018e17:	8b 04 85 20 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7be0]
c0018e1e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018e24:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018e2a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018e30:	89 c8                	mov    eax,ecx
c0018e32:	89 da                	mov    edx,ebx
c0018e34:	0f a4 c2 0a          	shld   edx,eax,0xa
c0018e38:	c1 e0 0a             	shl    eax,0xa
c0018e3b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0018e40:	8b 0c 8d 20 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7be0]
c0018e47:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018e4d:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018e53:	89 cb                	mov    ebx,ecx
c0018e55:	c1 fb 1f             	sar    ebx,0x1f
c0018e58:	53                   	push   ebx
c0018e59:	51                   	push   ecx
c0018e5a:	52                   	push   edx
c0018e5b:	50                   	push   eax
c0018e5c:	e8 6f 5b 00 00       	call   c001e9d0 <__udivdi3>
c0018e61:	83 c4 10             	add    esp,0x10
c0018e64:	89 c2                	mov    edx,eax
c0018e66:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e6a:	89 10                	mov    DWORD PTR [eax],edx
c0018e6c:	b8 00 00 00 00       	mov    eax,0x0
c0018e71:	eb 51                	jmp    c0018ec4 <fatWrapperIoctl+0x114>
c0018e73:	90                   	nop
c0018e74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018e79:	85 c0                	test   eax,eax
c0018e7b:	75 07                	jne    c0018e84 <fatWrapperIoctl+0xd4>
c0018e7d:	b8 00 00 00 00       	mov    eax,0x0
c0018e82:	eb 40                	jmp    c0018ec4 <fatWrapperIoctl+0x114>
c0018e84:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018e89:	83 f8 03             	cmp    eax,0x3
c0018e8c:	75 1a                	jne    c0018ea8 <fatWrapperIoctl+0xf8>
c0018e8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e92:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018e96:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e9a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018ea0:	b8 00 00 00 00       	mov    eax,0x0
c0018ea5:	eb 1d                	jmp    c0018ec4 <fatWrapperIoctl+0x114>
c0018ea7:	90                   	nop
c0018ea8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018ead:	83 f8 04             	cmp    eax,0x4
c0018eb0:	75 0a                	jne    c0018ebc <fatWrapperIoctl+0x10c>
c0018eb2:	b8 00 00 00 00       	mov    eax,0x0
c0018eb7:	eb 0b                	jmp    c0018ec4 <fatWrapperIoctl+0x114>
c0018eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0018ebc:	b8 04 00 00 00       	mov    eax,0x4
c0018ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ec4:	83 c4 28             	add    esp,0x28
c0018ec7:	5b                   	pop    ebx
c0018ec8:	c3                   	ret    
c0018ec9:	90                   	nop
c0018eca:	66 90                	xchg   ax,ax

c0018ecc <FAT::FAT()>:
c0018ecc:	83 ec 1c             	sub    esp,0x1c
c0018ecf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ed3:	83 ec 0c             	sub    esp,0xc
c0018ed6:	50                   	push   eax
c0018ed7:	e8 94 20 ff ff       	call   c000af70 <Filesystem::Filesystem()>
c0018edc:	83 c4 10             	add    esp,0x10
c0018edf:	ba bc 1e 02 c0       	mov    edx,0xc0021ebc
c0018ee4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ee8:	89 10                	mov    DWORD PTR [eax],edx
c0018eea:	c7 05 20 92 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029220,0x0
c0018ef4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018efc:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018f01:	7f 19                	jg     c0018f1c <FAT::FAT()+0x50>
c0018f03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018f07:	c7 04 85 40 92 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6dc0],0xffffffff
c0018f12:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018f17:	eb e3                	jmp    c0018efc <FAT::FAT()+0x30>
c0018f19:	8d 76 00             	lea    esi,[esi+0x0]
c0018f1c:	90                   	nop
c0018f1d:	83 c4 1c             	add    esp,0x1c
c0018f20:	c3                   	ret    
c0018f21:	90                   	nop
c0018f22:	66 90                	xchg   ax,ax

c0018f24 <FAT::fixFilepath(char*)>:
c0018f24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f28:	8a 00                	mov    al,BYTE PTR [eax]
c0018f2a:	0f be c0             	movsx  eax,al
c0018f2d:	83 f8 40             	cmp    eax,0x40
c0018f30:	7e 2e                	jle    c0018f60 <FAT::fixFilepath(char*)+0x3c>
c0018f32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f36:	8a 00                	mov    al,BYTE PTR [eax]
c0018f38:	83 e8 41             	sub    eax,0x41
c0018f3b:	88 c2                	mov    dl,al
c0018f3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f41:	88 10                	mov    BYTE PTR [eax],dl
c0018f43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f47:	8a 00                	mov    al,BYTE PTR [eax]
c0018f49:	0f be c0             	movsx  eax,al
c0018f4c:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c0018f53:	83 c0 30             	add    eax,0x30
c0018f56:	88 c2                	mov    dl,al
c0018f58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f5c:	88 10                	mov    BYTE PTR [eax],dl
c0018f5e:	66 90                	xchg   ax,ax
c0018f60:	90                   	nop
c0018f61:	c3                   	ret    
c0018f62:	66 90                	xchg   ax,ax

c0018f64 <FAT::open(char const*, void**, FileOpenMode)>:
c0018f64:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018f6a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018f72:	74 0c                	je     c0018f80 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018f74:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018f7c:	75 0e                	jne    c0018f8c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018f7e:	66 90                	xchg   ax,ax
c0018f80:	b8 04 00 00 00       	mov    eax,0x4
c0018f85:	e9 46 01 00 00       	jmp    c00190d0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018f8a:	66 90                	xchg   ax,ax
c0018f8c:	83 ec 08             	sub    esp,0x8
c0018f8f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018f96:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018f9a:	50                   	push   eax
c0018f9b:	e8 a0 76 fe ff       	call   c0000640 <strcpy>
c0018fa0:	83 c4 10             	add    esp,0x10
c0018fa3:	83 ec 08             	sub    esp,0x8
c0018fa6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018faa:	50                   	push   eax
c0018fab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018fb2:	e8 6d ff ff ff       	call   c0018f24 <FAT::fixFilepath(char*)>
c0018fb7:	83 c4 10             	add    esp,0x10
c0018fba:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0018fc2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018fc9:	83 e0 01             	and    eax,0x1
c0018fcc:	74 12                	je     c0018fe0 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0018fce:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018fd5:	83 c8 01             	or     eax,0x1
c0018fd8:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018fdf:	90                   	nop
c0018fe0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018fe7:	83 e0 04             	and    eax,0x4
c0018fea:	74 24                	je     c0019010 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0018fec:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018ff3:	83 c8 30             	or     eax,0x30
c0018ff6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018ffd:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019004:	83 c8 02             	or     eax,0x2
c0019007:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001900e:	66 90                	xchg   ax,ax
c0019010:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019017:	83 e0 02             	and    eax,0x2
c001901a:	74 14                	je     c0019030 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001901c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019023:	83 c8 02             	or     eax,0x2
c0019026:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001902d:	8d 76 00             	lea    esi,[esi+0x0]
c0019030:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019037:	83 e0 08             	and    eax,0x8
c001903a:	74 14                	je     c0019050 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001903c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019043:	83 c8 04             	or     eax,0x4
c0019046:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001904d:	8d 76 00             	lea    esi,[esi+0x0]
c0019050:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019057:	83 e0 10             	and    eax,0x10
c001905a:	74 14                	je     c0019070 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001905c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019063:	83 c8 08             	or     eax,0x8
c0019066:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001906d:	8d 76 00             	lea    esi,[esi+0x0]
c0019070:	83 ec 0c             	sub    esp,0xc
c0019073:	68 28 02 00 00       	push   0x228
c0019078:	e8 31 ea fe ff       	call   c0007aae <malloc>
c001907d:	83 c4 10             	add    esp,0x10
c0019080:	89 c2                	mov    edx,eax
c0019082:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019089:	89 10                	mov    DWORD PTR [eax],edx
c001908b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019093:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001909a:	8b 00                	mov    eax,DWORD PTR [eax]
c001909c:	83 ec 04             	sub    esp,0x4
c001909f:	52                   	push   edx
c00190a0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00190a4:	52                   	push   edx
c00190a5:	50                   	push   eax
c00190a6:	e8 af ab fe ff       	call   c0003c5a <f_open>
c00190ab:	83 c4 10             	add    esp,0x10
c00190ae:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00190b5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00190bd:	74 09                	je     c00190c8 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c00190bf:	b8 01 00 00 00       	mov    eax,0x1
c00190c4:	eb 0a                	jmp    c00190d0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00190c6:	66 90                	xchg   ax,ax
c00190c8:	b8 00 00 00 00       	mov    eax,0x0
c00190cd:	8d 76 00             	lea    esi,[esi+0x0]
c00190d0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00190d6:	c3                   	ret    
c00190d7:	90                   	nop

c00190d8 <FAT::openDir(char const*, void**)>:
c00190d8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00190de:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00190e6:	74 0c                	je     c00190f4 <FAT::openDir(char const*, void**)+0x1c>
c00190e8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00190f0:	75 0e                	jne    c0019100 <FAT::openDir(char const*, void**)+0x28>
c00190f2:	66 90                	xchg   ax,ax
c00190f4:	b8 04 00 00 00       	mov    eax,0x4
c00190f9:	e9 82 00 00 00       	jmp    c0019180 <FAT::openDir(char const*, void**)+0xa8>
c00190fe:	66 90                	xchg   ax,ax
c0019100:	83 ec 08             	sub    esp,0x8
c0019103:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001910a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001910e:	50                   	push   eax
c001910f:	e8 2c 75 fe ff       	call   c0000640 <strcpy>
c0019114:	83 c4 10             	add    esp,0x10
c0019117:	83 ec 08             	sub    esp,0x8
c001911a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001911e:	50                   	push   eax
c001911f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019126:	e8 f9 fd ff ff       	call   c0018f24 <FAT::fixFilepath(char*)>
c001912b:	83 c4 10             	add    esp,0x10
c001912e:	83 ec 0c             	sub    esp,0xc
c0019131:	6a 30                	push   0x30
c0019133:	e8 76 e9 fe ff       	call   c0007aae <malloc>
c0019138:	83 c4 10             	add    esp,0x10
c001913b:	89 c2                	mov    edx,eax
c001913d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019144:	89 10                	mov    DWORD PTR [eax],edx
c0019146:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001914d:	8b 00                	mov    eax,DWORD PTR [eax]
c001914f:	83 ec 08             	sub    esp,0x8
c0019152:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019156:	52                   	push   edx
c0019157:	50                   	push   eax
c0019158:	e8 ac b4 fe ff       	call   c0004609 <f_opendir>
c001915d:	83 c4 10             	add    esp,0x10
c0019160:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019167:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001916f:	74 07                	je     c0019178 <FAT::openDir(char const*, void**)+0xa0>
c0019171:	b8 01 00 00 00       	mov    eax,0x1
c0019176:	eb 08                	jmp    c0019180 <FAT::openDir(char const*, void**)+0xa8>
c0019178:	b8 00 00 00 00       	mov    eax,0x0
c001917d:	8d 76 00             	lea    esi,[esi+0x0]
c0019180:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019186:	c3                   	ret    
c0019187:	90                   	nop

c0019188 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019188:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001918e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019196:	75 0c                	jne    c00191a4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019198:	b8 04 00 00 00       	mov    eax,0x4
c001919d:	e9 d6 00 00 00       	jmp    c0019278 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00191a2:	66 90                	xchg   ax,ax
c00191a4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00191ac:	75 0a                	jne    c00191b8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00191ae:	b8 04 00 00 00       	mov    eax,0x4
c00191b3:	e9 c0 00 00 00       	jmp    c0019278 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00191b8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00191c0:	75 0a                	jne    c00191cc <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00191c2:	b8 04 00 00 00       	mov    eax,0x4
c00191c7:	e9 ac 00 00 00       	jmp    c0019278 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00191cc:	83 ec 08             	sub    esp,0x8
c00191cf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00191d6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00191dd:	50                   	push   eax
c00191de:	e8 5d 74 fe ff       	call   c0000640 <strcpy>
c00191e3:	83 c4 10             	add    esp,0x10
c00191e6:	83 ec 08             	sub    esp,0x8
c00191e9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00191f0:	50                   	push   eax
c00191f1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00191f8:	e8 27 fd ff ff       	call   c0018f24 <FAT::fixFilepath(char*)>
c00191fd:	83 c4 10             	add    esp,0x10
c0019200:	83 ec 08             	sub    esp,0x8
c0019203:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019207:	50                   	push   eax
c0019208:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001920f:	50                   	push   eax
c0019210:	e8 73 b5 fe ff       	call   c0004788 <f_stat>
c0019215:	83 c4 10             	add    esp,0x10
c0019218:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001921f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019226:	85 c0                	test   eax,eax
c0019228:	74 0a                	je     c0019234 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001922a:	83 f8 04             	cmp    eax,0x4
c001922d:	74 39                	je     c0019268 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001922f:	eb 3f                	jmp    c0019270 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019231:	8d 76 00             	lea    esi,[esi+0x0]
c0019234:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019238:	0f b6 c0             	movzx  eax,al
c001923b:	83 e0 10             	and    eax,0x10
c001923e:	0f 95 c2             	setne  dl
c0019241:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019248:	88 10                	mov    BYTE PTR [eax],dl
c001924a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001924e:	ba 00 00 00 00       	mov    edx,0x0
c0019253:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001925a:	89 01                	mov    DWORD PTR [ecx],eax
c001925c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001925f:	b8 00 00 00 00       	mov    eax,0x0
c0019264:	eb 12                	jmp    c0019278 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019266:	66 90                	xchg   ax,ax
c0019268:	b8 02 00 00 00       	mov    eax,0x2
c001926d:	eb 09                	jmp    c0019278 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001926f:	90                   	nop
c0019270:	b8 01 00 00 00       	mov    eax,0x1
c0019275:	8d 76 00             	lea    esi,[esi+0x0]
c0019278:	81 c4 2c 02 00 00    	add    esp,0x22c
c001927e:	c3                   	ret    
c001927f:	90                   	nop

c0019280 <FAT::unlink(char const*)>:
c0019280:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019286:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001928e:	75 08                	jne    c0019298 <FAT::unlink(char const*)+0x18>
c0019290:	b8 04 00 00 00       	mov    eax,0x4
c0019295:	eb 61                	jmp    c00192f8 <FAT::unlink(char const*)+0x78>
c0019297:	90                   	nop
c0019298:	83 ec 08             	sub    esp,0x8
c001929b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00192a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00192a6:	50                   	push   eax
c00192a7:	e8 94 73 fe ff       	call   c0000640 <strcpy>
c00192ac:	83 c4 10             	add    esp,0x10
c00192af:	83 ec 08             	sub    esp,0x8
c00192b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00192b6:	50                   	push   eax
c00192b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00192be:	e8 61 fc ff ff       	call   c0018f24 <FAT::fixFilepath(char*)>
c00192c3:	83 c4 10             	add    esp,0x10
c00192c6:	83 ec 0c             	sub    esp,0xc
c00192c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00192cd:	50                   	push   eax
c00192ce:	e8 27 b7 fe ff       	call   c00049fa <f_unlink>
c00192d3:	83 c4 10             	add    esp,0x10
c00192d6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00192dd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00192e4:	85 c0                	test   eax,eax
c00192e6:	75 08                	jne    c00192f0 <FAT::unlink(char const*)+0x70>
c00192e8:	b8 00 00 00 00       	mov    eax,0x0
c00192ed:	eb 09                	jmp    c00192f8 <FAT::unlink(char const*)+0x78>
c00192ef:	90                   	nop
c00192f0:	b8 01 00 00 00       	mov    eax,0x1
c00192f5:	8d 76 00             	lea    esi,[esi+0x0]
c00192f8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00192fe:	c3                   	ret    
c00192ff:	90                   	nop

c0019300 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019300:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019306:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001930d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019314:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019318:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001931c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019324:	75 0a                	jne    c0019330 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019326:	b8 04 00 00 00       	mov    eax,0x4
c001932b:	e9 7c 01 00 00       	jmp    c00194ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019330:	83 ec 08             	sub    esp,0x8
c0019333:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001933a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001933e:	50                   	push   eax
c001933f:	e8 fc 72 fe ff       	call   c0000640 <strcpy>
c0019344:	83 c4 10             	add    esp,0x10
c0019347:	83 ec 08             	sub    esp,0x8
c001934a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001934e:	50                   	push   eax
c001934f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019356:	e8 c9 fb ff ff       	call   c0018f24 <FAT::fixFilepath(char*)>
c001935b:	83 c4 10             	add    esp,0x10
c001935e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019366:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001936e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019373:	83 e0 01             	and    eax,0x1
c0019376:	74 14                	je     c001938c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0019378:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001937f:	83 c8 01             	or     eax,0x1
c0019382:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019389:	8d 76 00             	lea    esi,[esi+0x0]
c001938c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019391:	83 e0 02             	and    eax,0x2
c0019394:	74 12                	je     c00193a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0019396:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001939d:	83 c8 20             	or     eax,0x20
c00193a0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c00193a7:	90                   	nop
c00193a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00193ad:	83 e0 04             	and    eax,0x4
c00193b0:	74 12                	je     c00193c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c00193b2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00193b9:	83 c8 04             	or     eax,0x4
c00193bc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c00193c3:	90                   	nop
c00193c4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00193c9:	83 e0 08             	and    eax,0x8
c00193cc:	74 12                	je     c00193e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c00193ce:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00193d5:	83 c8 02             	or     eax,0x2
c00193d8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c00193df:	90                   	nop
c00193e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00193e5:	83 e0 01             	and    eax,0x1
c00193e8:	74 12                	je     c00193fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00193ea:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00193f1:	83 c8 01             	or     eax,0x1
c00193f4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00193fb:	90                   	nop
c00193fc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019401:	83 e0 02             	and    eax,0x2
c0019404:	74 12                	je     c0019418 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0019406:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001940d:	83 c8 20             	or     eax,0x20
c0019410:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019417:	90                   	nop
c0019418:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001941d:	83 e0 04             	and    eax,0x4
c0019420:	74 12                	je     c0019434 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0019422:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019429:	83 c8 04             	or     eax,0x4
c001942c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019433:	90                   	nop
c0019434:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019439:	83 e0 08             	and    eax,0x8
c001943c:	74 12                	je     c0019450 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001943e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019445:	83 c8 02             	or     eax,0x2
c0019448:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001944f:	90                   	nop
c0019450:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019457:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001945e:	09 d0                	or     eax,edx
c0019460:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019467:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001946f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019477:	83 ec 04             	sub    esp,0x4
c001947a:	52                   	push   edx
c001947b:	50                   	push   eax
c001947c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019480:	50                   	push   eax
c0019481:	e8 e9 b9 fe ff       	call   c0004e6f <f_chmod>
c0019486:	83 c4 10             	add    esp,0x10
c0019489:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019490:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019497:	85 c0                	test   eax,eax
c0019499:	75 09                	jne    c00194a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001949b:	b8 00 00 00 00       	mov    eax,0x0
c00194a0:	eb 0a                	jmp    c00194ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c00194a2:	66 90                	xchg   ax,ax
c00194a4:	b8 01 00 00 00       	mov    eax,0x1
c00194a9:	8d 76 00             	lea    esi,[esi+0x0]
c00194ac:	81 c4 2c 01 00 00    	add    esp,0x12c
c00194b2:	c3                   	ret    
c00194b3:	90                   	nop

c00194b4 <FAT::rename(char const*, char const*)>:
c00194b4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00194ba:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00194c2:	74 0c                	je     c00194d0 <FAT::rename(char const*, char const*)+0x1c>
c00194c4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00194cc:	75 0e                	jne    c00194dc <FAT::rename(char const*, char const*)+0x28>
c00194ce:	66 90                	xchg   ax,ax
c00194d0:	b8 04 00 00 00       	mov    eax,0x4
c00194d5:	e9 9e 00 00 00       	jmp    c0019578 <FAT::rename(char const*, char const*)+0xc4>
c00194da:	66 90                	xchg   ax,ax
c00194dc:	83 ec 08             	sub    esp,0x8
c00194df:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00194e6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00194ed:	50                   	push   eax
c00194ee:	e8 4d 71 fe ff       	call   c0000640 <strcpy>
c00194f3:	83 c4 10             	add    esp,0x10
c00194f6:	83 ec 08             	sub    esp,0x8
c00194f9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019500:	50                   	push   eax
c0019501:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019508:	e8 17 fa ff ff       	call   c0018f24 <FAT::fixFilepath(char*)>
c001950d:	83 c4 10             	add    esp,0x10
c0019510:	83 ec 08             	sub    esp,0x8
c0019513:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001951a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001951e:	50                   	push   eax
c001951f:	e8 1c 71 fe ff       	call   c0000640 <strcpy>
c0019524:	83 c4 10             	add    esp,0x10
c0019527:	83 ec 08             	sub    esp,0x8
c001952a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001952e:	50                   	push   eax
c001952f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019536:	e8 e9 f9 ff ff       	call   c0018f24 <FAT::fixFilepath(char*)>
c001953b:	83 c4 10             	add    esp,0x10
c001953e:	83 ec 08             	sub    esp,0x8
c0019541:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019545:	50                   	push   eax
c0019546:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001954d:	50                   	push   eax
c001954e:	e8 64 b7 fe ff       	call   c0004cb7 <f_rename>
c0019553:	83 c4 10             	add    esp,0x10
c0019556:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001955d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019564:	85 c0                	test   eax,eax
c0019566:	75 08                	jne    c0019570 <FAT::rename(char const*, char const*)+0xbc>
c0019568:	b8 00 00 00 00       	mov    eax,0x0
c001956d:	eb 09                	jmp    c0019578 <FAT::rename(char const*, char const*)+0xc4>
c001956f:	90                   	nop
c0019570:	b8 01 00 00 00       	mov    eax,0x1
c0019575:	8d 76 00             	lea    esi,[esi+0x0]
c0019578:	81 c4 1c 02 00 00    	add    esp,0x21c
c001957e:	c3                   	ret    
c001957f:	90                   	nop

c0019580 <FAT::mkdir(char const*)>:
c0019580:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019586:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001958e:	75 08                	jne    c0019598 <FAT::mkdir(char const*)+0x18>
c0019590:	b8 04 00 00 00       	mov    eax,0x4
c0019595:	eb 61                	jmp    c00195f8 <FAT::mkdir(char const*)+0x78>
c0019597:	90                   	nop
c0019598:	83 ec 08             	sub    esp,0x8
c001959b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00195a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00195a6:	50                   	push   eax
c00195a7:	e8 94 70 fe ff       	call   c0000640 <strcpy>
c00195ac:	83 c4 10             	add    esp,0x10
c00195af:	83 ec 08             	sub    esp,0x8
c00195b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00195b6:	50                   	push   eax
c00195b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00195be:	e8 61 f9 ff ff       	call   c0018f24 <FAT::fixFilepath(char*)>
c00195c3:	83 c4 10             	add    esp,0x10
c00195c6:	83 ec 0c             	sub    esp,0xc
c00195c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00195cd:	50                   	push   eax
c00195ce:	e8 49 b5 fe ff       	call   c0004b1c <f_mkdir>
c00195d3:	83 c4 10             	add    esp,0x10
c00195d6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00195dd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00195e4:	85 c0                	test   eax,eax
c00195e6:	75 08                	jne    c00195f0 <FAT::mkdir(char const*)+0x70>
c00195e8:	b8 00 00 00 00       	mov    eax,0x0
c00195ed:	eb 09                	jmp    c00195f8 <FAT::mkdir(char const*)+0x78>
c00195ef:	90                   	nop
c00195f0:	b8 01 00 00 00       	mov    eax,0x1
c00195f5:	8d 76 00             	lea    esi,[esi+0x0]
c00195f8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00195fe:	c3                   	ret    
c00195ff:	90                   	nop

c0019600 <FAT::exists(char const*)>:
c0019600:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019606:	83 ec 08             	sub    esp,0x8
c0019609:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019610:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019614:	50                   	push   eax
c0019615:	e8 26 70 fe ff       	call   c0000640 <strcpy>
c001961a:	83 c4 10             	add    esp,0x10
c001961d:	83 ec 08             	sub    esp,0x8
c0019620:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019624:	50                   	push   eax
c0019625:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001962c:	e8 f3 f8 ff ff       	call   c0018f24 <FAT::fixFilepath(char*)>
c0019631:	83 c4 10             	add    esp,0x10
c0019634:	83 ec 08             	sub    esp,0x8
c0019637:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001963e:	50                   	push   eax
c001963f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019643:	50                   	push   eax
c0019644:	e8 3f b1 fe ff       	call   c0004788 <f_stat>
c0019649:	83 c4 10             	add    esp,0x10
c001964c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019653:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001965a:	85 c0                	test   eax,eax
c001965c:	75 06                	jne    c0019664 <FAT::exists(char const*)+0x64>
c001965e:	b0 01                	mov    al,0x1
c0019660:	eb 06                	jmp    c0019668 <FAT::exists(char const*)+0x68>
c0019662:	66 90                	xchg   ax,ax
c0019664:	b0 00                	mov    al,0x0
c0019666:	66 90                	xchg   ax,ax
c0019668:	81 c4 2c 02 00 00    	add    esp,0x22c
c001966e:	c3                   	ret    
c001966f:	90                   	nop

c0019670 <isoReadDiscSectorHelper>:
c0019670:	83 ec 2c             	sub    esp,0x2c
c0019673:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019677:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001967b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019680:	83 e8 41             	sub    eax,0x41
c0019683:	8b 0c 85 20 84 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7be0]
c001968a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001968e:	ba 00 00 00 00       	mov    edx,0x0
c0019693:	83 ec 0c             	sub    esp,0xc
c0019696:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001969a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001969e:	52                   	push   edx
c001969f:	50                   	push   eax
c00196a0:	51                   	push   ecx
c00196a1:	e8 be 3d ff ff       	call   c000d464 <LogicalDisk::read(unsigned long long, int, void*)>
c00196a6:	83 c4 20             	add    esp,0x20
c00196a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00196ad:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00196b2:	74 0c                	je     c00196c0 <isoReadDiscSectorHelper+0x50>
c00196b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00196b8:	c1 e0 0b             	shl    eax,0xb
c00196bb:	eb 0b                	jmp    c00196c8 <isoReadDiscSectorHelper+0x58>
c00196bd:	8d 76 00             	lea    esi,[esi+0x0]
c00196c0:	b8 00 00 00 00       	mov    eax,0x0
c00196c5:	8d 76 00             	lea    esi,[esi+0x0]
c00196c8:	83 c4 2c             	add    esp,0x2c
c00196cb:	c3                   	ret    

c00196cc <iso_kprintf>:
c00196cc:	83 ec 0c             	sub    esp,0xc
c00196cf:	83 ec 08             	sub    esp,0x8
c00196d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196d6:	68 6a 1c 02 c0       	push   0xc0021c6a
c00196db:	e8 97 12 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c00196e0:	83 c4 10             	add    esp,0x10
c00196e3:	90                   	nop
c00196e4:	83 c4 0c             	add    esp,0xc
c00196e7:	c3                   	ret    

c00196e8 <iso_kprintfd>:
c00196e8:	83 ec 0c             	sub    esp,0xc
c00196eb:	83 ec 08             	sub    esp,0x8
c00196ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196f2:	68 9a 05 02 c0       	push   0xc002059a
c00196f7:	e8 7b 12 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c00196fc:	83 c4 10             	add    esp,0x10
c00196ff:	90                   	nop
c0019700:	83 c4 0c             	add    esp,0xc
c0019703:	c3                   	ret    

c0019704 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019704:	b8 08 00 00 00       	mov    eax,0x8
c0019709:	c3                   	ret    

c001970a <ISO9660::getName()>:
c001970a:	b8 1c 1f 02 c0       	mov    eax,0xc0021f1c
c001970f:	c3                   	ret    

c0019710 <ISO9660::closeDir(void*)>:
c0019710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019714:	8b 00                	mov    eax,DWORD PTR [eax]
c0019716:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019719:	90                   	nop

c001971a <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001971a:	b8 01 00 00 00       	mov    eax,0x1
c001971f:	c3                   	ret    

c0019720 <ISO9660::unlink(char const*)>:
c0019720:	b8 01 00 00 00       	mov    eax,0x1
c0019725:	c3                   	ret    

c0019726 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019726:	b8 03 00 00 00       	mov    eax,0x3
c001972b:	c3                   	ret    

c001972c <ISO9660::rename(char const*, char const*)>:
c001972c:	b8 01 00 00 00       	mov    eax,0x1
c0019731:	c3                   	ret    

c0019732 <ISO9660::mkdir(char const*)>:
c0019732:	b8 01 00 00 00       	mov    eax,0x1
c0019737:	c3                   	ret    

c0019738 <ISO9660::~ISO9660()>:
c0019738:	83 ec 0c             	sub    esp,0xc
c001973b:	ba 5c 20 02 c0       	mov    edx,0xc002205c
c0019740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019744:	89 10                	mov    DWORD PTR [eax],edx
c0019746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001974a:	83 ec 0c             	sub    esp,0xc
c001974d:	50                   	push   eax
c001974e:	e8 41 18 ff ff       	call   c000af94 <Filesystem::~Filesystem()>
c0019753:	83 c4 10             	add    esp,0x10
c0019756:	90                   	nop
c0019757:	83 c4 0c             	add    esp,0xc
c001975a:	c3                   	ret    
c001975b:	90                   	nop

c001975c <ISO9660::~ISO9660()>:
c001975c:	83 ec 0c             	sub    esp,0xc
c001975f:	83 ec 0c             	sub    esp,0xc
c0019762:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019766:	e8 cd ff ff ff       	call   c0019738 <ISO9660::~ISO9660()>
c001976b:	83 c4 10             	add    esp,0x10
c001976e:	83 ec 08             	sub    esp,0x8
c0019771:	6a 08                	push   0x8
c0019773:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019777:	e8 ce 10 ff ff       	call   c000a84a <operator delete(void*, unsigned long)>
c001977c:	83 c4 10             	add    esp,0x10
c001977f:	83 c4 0c             	add    esp,0xc
c0019782:	c3                   	ret    
c0019783:	90                   	nop

c0019784 <ISO9660::exists(char const*)>:
c0019784:	83 ec 18             	sub    esp,0x18
c0019787:	68 37 1f 02 c0       	push   0xc0021f37
c001978c:	e8 4a 74 ff ff       	call   c0010bdb <KePanic(char const*)>
c0019791:	31 c0                	xor    eax,eax
c0019793:	83 c4 1c             	add    esp,0x1c
c0019796:	c3                   	ret    
c0019797:	90                   	nop

c0019798 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019798:	56                   	push   esi
c0019799:	53                   	push   ebx
c001979a:	53                   	push   ebx
c001979b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001979f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00197a3:	85 db                	test   ebx,ebx
c00197a5:	0f 84 ca 00 00 00    	je     c0019875 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c00197ab:	85 f6                	test   esi,esi
c00197ad:	0f 84 c2 00 00 00    	je     c0019875 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c00197b3:	b8 03 00 00 00       	mov    eax,0x3
c00197b8:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00197bd:	0f 85 b7 00 00 00    	jne    c001987a <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00197c3:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00197c5:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c00197cc:	38 0d 20 93 02 c0    	cmp    BYTE PTR ds:0xc0029320,cl
c00197d2:	74 1b                	je     c00197ef <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c00197d4:	85 c0                	test   eax,eax
c00197d6:	74 10                	je     c00197e8 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c00197d8:	83 ec 0c             	sub    esp,0xc
c00197db:	68 55 1f 02 c0       	push   0xc0021f55
c00197e0:	e8 f6 73 ff ff       	call   c0010bdb <KePanic(char const*)>
c00197e5:	83 c4 10             	add    esp,0x10
c00197e8:	8a 03                	mov    al,BYTE PTR [ebx]
c00197ea:	a2 20 93 02 c0       	mov    ds:0xc0029320,al
c00197ef:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00197f2:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c00197f9:	85 c0                	test   eax,eax
c00197fb:	74 09                	je     c0019806 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c00197fd:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019804:	74 48                	je     c001984e <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0019806:	83 ec 0c             	sub    esp,0xc
c0019809:	68 65 1f 02 c0       	push   0xc0021f65
c001980e:	e8 64 11 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0019813:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019816:	83 c4 10             	add    esp,0x10
c0019819:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c0019820:	85 c0                	test   eax,eax
c0019822:	74 17                	je     c001983b <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0019824:	83 ec 0c             	sub    esp,0xc
c0019827:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001982e:	68 85 1f 02 c0       	push   0xc0021f85
c0019833:	e8 3f 11 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0019838:	83 c4 10             	add    esp,0x10
c001983b:	83 ec 0c             	sub    esp,0xc
c001983e:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c0019845:	50                   	push   eax
c0019846:	e8 fb d1 fe ff       	call   c0006a46 <init_percd>
c001984b:	83 c4 10             	add    esp,0x10
c001984e:	83 c3 03             	add    ebx,0x3
c0019851:	51                   	push   ecx
c0019852:	51                   	push   ecx
c0019853:	6a 00                	push   0x0
c0019855:	53                   	push   ebx
c0019856:	e8 b2 cc fe ff       	call   c000650d <iso_open>
c001985b:	83 c4 10             	add    esp,0x10
c001985e:	89 c2                	mov    edx,eax
c0019860:	b8 01 00 00 00       	mov    eax,0x1
c0019865:	83 fa ff             	cmp    edx,0xffffffff
c0019868:	74 10                	je     c001987a <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001986a:	83 c2 32             	add    edx,0x32
c001986d:	31 c0                	xor    eax,eax
c001986f:	01 d2                	add    edx,edx
c0019871:	89 16                	mov    DWORD PTR [esi],edx
c0019873:	eb 05                	jmp    c001987a <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019875:	b8 04 00 00 00       	mov    eax,0x4
c001987a:	5a                   	pop    edx
c001987b:	5b                   	pop    ebx
c001987c:	5e                   	pop    esi
c001987d:	c3                   	ret    

c001987e <ISO9660::read(void*, unsigned long, void*, int*)>:
c001987e:	53                   	push   ebx
c001987f:	83 ec 08             	sub    esp,0x8
c0019882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019886:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001988a:	85 c0                	test   eax,eax
c001988c:	74 2d                	je     c00198bb <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001988e:	85 db                	test   ebx,ebx
c0019890:	74 29                	je     c00198bb <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019892:	b9 02 00 00 00       	mov    ecx,0x2
c0019897:	52                   	push   edx
c0019898:	99                   	cdq    
c0019899:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001989d:	f7 f9                	idiv   ecx
c001989f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00198a3:	83 e8 32             	sub    eax,0x32
c00198a6:	50                   	push   eax
c00198a7:	e8 09 cd fe ff       	call   c00065b5 <iso_read>
c00198ac:	83 c4 10             	add    esp,0x10
c00198af:	89 03                	mov    DWORD PTR [ebx],eax
c00198b1:	09 d0                	or     eax,edx
c00198b3:	0f 94 c0             	sete   al
c00198b6:	0f b6 c0             	movzx  eax,al
c00198b9:	eb 05                	jmp    c00198c0 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c00198bb:	b8 04 00 00 00       	mov    eax,0x4
c00198c0:	83 c4 08             	add    esp,0x8
c00198c3:	5b                   	pop    ebx
c00198c4:	c3                   	ret    
c00198c5:	90                   	nop

c00198c6 <ISO9660::seek(void*, unsigned long long)>:
c00198c6:	57                   	push   edi
c00198c7:	56                   	push   esi
c00198c8:	b8 04 00 00 00       	mov    eax,0x4
c00198cd:	51                   	push   ecx
c00198ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00198d2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00198d6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00198da:	85 d2                	test   edx,edx
c00198dc:	74 26                	je     c0019904 <ISO9660::seek(void*, unsigned long long)+0x3e>
c00198de:	6a 00                	push   0x0
c00198e0:	b9 02 00 00 00       	mov    ecx,0x2
c00198e5:	57                   	push   edi
c00198e6:	89 d0                	mov    eax,edx
c00198e8:	56                   	push   esi
c00198e9:	99                   	cdq    
c00198ea:	f7 f9                	idiv   ecx
c00198ec:	83 e8 32             	sub    eax,0x32
c00198ef:	50                   	push   eax
c00198f0:	e8 d6 cd fe ff       	call   c00066cb <iso_seek>
c00198f5:	83 c4 10             	add    esp,0x10
c00198f8:	31 f0                	xor    eax,esi
c00198fa:	31 fa                	xor    edx,edi
c00198fc:	09 d0                	or     eax,edx
c00198fe:	0f 95 c0             	setne  al
c0019901:	0f b6 c0             	movzx  eax,al
c0019904:	5a                   	pop    edx
c0019905:	5e                   	pop    esi
c0019906:	5f                   	pop    edi
c0019907:	c3                   	ret    

c0019908 <ISO9660::tell(void*, unsigned long long*)>:
c0019908:	53                   	push   ebx
c0019909:	83 ec 08             	sub    esp,0x8
c001990c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019910:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019914:	85 c0                	test   eax,eax
c0019916:	74 24                	je     c001993c <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019918:	85 db                	test   ebx,ebx
c001991a:	74 20                	je     c001993c <ISO9660::tell(void*, unsigned long long*)+0x34>
c001991c:	83 ec 0c             	sub    esp,0xc
c001991f:	b9 02 00 00 00       	mov    ecx,0x2
c0019924:	99                   	cdq    
c0019925:	f7 f9                	idiv   ecx
c0019927:	83 e8 32             	sub    eax,0x32
c001992a:	50                   	push   eax
c001992b:	e8 1f ce fe ff       	call   c000674f <iso_tell>
c0019930:	83 c4 10             	add    esp,0x10
c0019933:	89 03                	mov    DWORD PTR [ebx],eax
c0019935:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019938:	31 c0                	xor    eax,eax
c001993a:	eb 05                	jmp    c0019941 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001993c:	b8 04 00 00 00       	mov    eax,0x4
c0019941:	83 c4 08             	add    esp,0x8
c0019944:	5b                   	pop    ebx
c0019945:	c3                   	ret    

c0019946 <ISO9660::stat(void*, unsigned long long*)>:
c0019946:	53                   	push   ebx
c0019947:	83 ec 14             	sub    esp,0x14
c001994a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001994e:	68 a9 1f 02 c0       	push   0xc0021fa9
c0019953:	e8 1f 10 ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0019958:	83 c4 10             	add    esp,0x10
c001995b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019960:	74 2c                	je     c001998e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019962:	85 db                	test   ebx,ebx
c0019964:	74 28                	je     c001998e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019966:	83 ec 0c             	sub    esp,0xc
c0019969:	b9 02 00 00 00       	mov    ecx,0x2
c001996e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019972:	99                   	cdq    
c0019973:	f7 f9                	idiv   ecx
c0019975:	83 e8 32             	sub    eax,0x32
c0019978:	50                   	push   eax
c0019979:	e8 02 ce fe ff       	call   c0006780 <iso_total>
c001997e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019985:	89 03                	mov    DWORD PTR [ebx],eax
c0019987:	83 c4 10             	add    esp,0x10
c001998a:	31 c0                	xor    eax,eax
c001998c:	eb 05                	jmp    c0019993 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001998e:	b8 04 00 00 00       	mov    eax,0x4
c0019993:	83 c4 08             	add    esp,0x8
c0019996:	5b                   	pop    ebx
c0019997:	c3                   	ret    

c0019998 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0019998:	55                   	push   ebp
c0019999:	57                   	push   edi
c001999a:	56                   	push   esi
c001999b:	53                   	push   ebx
c001999c:	83 ec 18             	sub    esp,0x18
c001999f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00199a3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00199a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00199ab:	68 b1 1f 02 c0       	push   0xc0021fb1
c00199b0:	e8 c2 0f ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c00199b5:	83 c4 10             	add    esp,0x10
c00199b8:	85 ff                	test   edi,edi
c00199ba:	0f 94 c0             	sete   al
c00199bd:	85 f6                	test   esi,esi
c00199bf:	0f 94 c2             	sete   dl
c00199c2:	09 d0                	or     eax,edx
c00199c4:	a8 01                	test   al,0x1
c00199c6:	0f 85 dd 00 00 00    	jne    c0019aa9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c00199cc:	85 db                	test   ebx,ebx
c00199ce:	0f 84 d5 00 00 00    	je     c0019aa9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c00199d4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00199d7:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00199dd:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00199e4:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c00199eb:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00199ed:	38 0d 20 93 02 c0    	cmp    BYTE PTR ds:0xc0029320,cl
c00199f3:	74 1b                	je     c0019a10 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c00199f5:	85 c0                	test   eax,eax
c00199f7:	74 10                	je     c0019a09 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c00199f9:	83 ec 0c             	sub    esp,0xc
c00199fc:	68 55 1f 02 c0       	push   0xc0021f55
c0019a01:	e8 d5 71 ff ff       	call   c0010bdb <KePanic(char const*)>
c0019a06:	83 c4 10             	add    esp,0x10
c0019a09:	8a 03                	mov    al,BYTE PTR [ebx]
c0019a0b:	a2 20 93 02 c0       	mov    ds:0xc0029320,al
c0019a10:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019a13:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c0019a1a:	85 c0                	test   eax,eax
c0019a1c:	74 09                	je     c0019a27 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c0019a1e:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019a25:	74 51                	je     c0019a78 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019a27:	83 ec 0c             	sub    esp,0xc
c0019a2a:	68 b9 1f 02 c0       	push   0xc0021fb9
c0019a2f:	e8 43 0f ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0019a34:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019a37:	83 c4 10             	add    esp,0x10
c0019a3a:	83 3c 85 1c 83 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7ce4],0x0
c0019a42:	74 21                	je     c0019a65 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c0019a44:	83 ec 0c             	sub    esp,0xc
c0019a47:	68 d9 1f 02 c0       	push   0xc0021fd9
c0019a4c:	e8 26 0f ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0019a51:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019a54:	83 c4 10             	add    esp,0x10
c0019a57:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c0019a5e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019a65:	83 ec 0c             	sub    esp,0xc
c0019a68:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c0019a6f:	50                   	push   eax
c0019a70:	e8 d1 cf fe ff       	call   c0006a46 <init_percd>
c0019a75:	83 c4 10             	add    esp,0x10
c0019a78:	83 c3 03             	add    ebx,0x3
c0019a7b:	52                   	push   edx
c0019a7c:	52                   	push   edx
c0019a7d:	6a 00                	push   0x0
c0019a7f:	53                   	push   ebx
c0019a80:	e8 88 ca fe ff       	call   c000650d <iso_open>
c0019a85:	83 c4 10             	add    esp,0x10
c0019a88:	89 c5                	mov    ebp,eax
c0019a8a:	83 f8 ff             	cmp    eax,0xffffffff
c0019a8d:	75 21                	jne    c0019ab0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c0019a8f:	50                   	push   eax
c0019a90:	50                   	push   eax
c0019a91:	6a 01                	push   0x1
c0019a93:	53                   	push   ebx
c0019a94:	e8 74 ca fe ff       	call   c000650d <iso_open>
c0019a99:	83 c4 10             	add    esp,0x10
c0019a9c:	ba 02 00 00 00       	mov    edx,0x2
c0019aa1:	40                   	inc    eax
c0019aa2:	74 2b                	je     c0019acf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019aa4:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0019aa7:	eb 24                	jmp    c0019acd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0019aa9:	ba 04 00 00 00       	mov    edx,0x4
c0019aae:	eb 1f                	jmp    c0019acf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019ab0:	83 ec 0c             	sub    esp,0xc
c0019ab3:	50                   	push   eax
c0019ab4:	e8 c7 cc fe ff       	call   c0006780 <iso_total>
c0019ab9:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019ac0:	89 07                	mov    DWORD PTR [edi],eax
c0019ac2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019ac5:	e8 cd ca fe ff       	call   c0006597 <iso_close>
c0019aca:	83 c4 10             	add    esp,0x10
c0019acd:	31 d2                	xor    edx,edx
c0019acf:	83 c4 0c             	add    esp,0xc
c0019ad2:	89 d0                	mov    eax,edx
c0019ad4:	5b                   	pop    ebx
c0019ad5:	5e                   	pop    esi
c0019ad6:	5f                   	pop    edi
c0019ad7:	5d                   	pop    ebp
c0019ad8:	c3                   	ret    
c0019ad9:	90                   	nop

c0019ada <ISO9660::close(void*)>:
c0019ada:	83 ec 0c             	sub    esp,0xc
c0019add:	b8 04 00 00 00       	mov    eax,0x4
c0019ae2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019ae6:	85 d2                	test   edx,edx
c0019ae8:	74 1b                	je     c0019b05 <ISO9660::close(void*)+0x2b>
c0019aea:	83 ec 0c             	sub    esp,0xc
c0019aed:	b9 02 00 00 00       	mov    ecx,0x2
c0019af2:	89 d0                	mov    eax,edx
c0019af4:	99                   	cdq    
c0019af5:	f7 f9                	idiv   ecx
c0019af7:	83 e8 32             	sub    eax,0x32
c0019afa:	50                   	push   eax
c0019afb:	e8 97 ca fe ff       	call   c0006597 <iso_close>
c0019b00:	83 c4 10             	add    esp,0x10
c0019b03:	31 c0                	xor    eax,eax
c0019b05:	83 c4 0c             	add    esp,0xc
c0019b08:	c3                   	ret    
c0019b09:	90                   	nop

c0019b0a <ISO9660::openDir(char const*, void**)>:
c0019b0a:	56                   	push   esi
c0019b0b:	53                   	push   ebx
c0019b0c:	50                   	push   eax
c0019b0d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019b11:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019b15:	85 db                	test   ebx,ebx
c0019b17:	0f 84 bd 00 00 00    	je     c0019bda <ISO9660::openDir(char const*, void**)+0xd0>
c0019b1d:	85 f6                	test   esi,esi
c0019b1f:	0f 84 b5 00 00 00    	je     c0019bda <ISO9660::openDir(char const*, void**)+0xd0>
c0019b25:	8a 13                	mov    dl,BYTE PTR [ebx]
c0019b27:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c0019b2e:	38 15 20 93 02 c0    	cmp    BYTE PTR ds:0xc0029320,dl
c0019b34:	74 1b                	je     c0019b51 <ISO9660::openDir(char const*, void**)+0x47>
c0019b36:	85 c0                	test   eax,eax
c0019b38:	74 10                	je     c0019b4a <ISO9660::openDir(char const*, void**)+0x40>
c0019b3a:	83 ec 0c             	sub    esp,0xc
c0019b3d:	68 55 1f 02 c0       	push   0xc0021f55
c0019b42:	e8 94 70 ff ff       	call   c0010bdb <KePanic(char const*)>
c0019b47:	83 c4 10             	add    esp,0x10
c0019b4a:	8a 03                	mov    al,BYTE PTR [ebx]
c0019b4c:	a2 20 93 02 c0       	mov    ds:0xc0029320,al
c0019b51:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019b54:	8b 04 85 1c 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7ce4]
c0019b5b:	85 c0                	test   eax,eax
c0019b5d:	74 10                	je     c0019b6f <ISO9660::openDir(char const*, void**)+0x65>
c0019b5f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019b66:	74 1a                	je     c0019b82 <ISO9660::openDir(char const*, void**)+0x78>
c0019b68:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019b6f:	83 ec 0c             	sub    esp,0xc
c0019b72:	0f be 05 20 93 02 c0 	movsx  eax,BYTE PTR ds:0xc0029320
c0019b79:	50                   	push   eax
c0019b7a:	e8 c7 ce fe ff       	call   c0006a46 <init_percd>
c0019b7f:	83 c4 10             	add    esp,0x10
c0019b82:	83 c3 03             	add    ebx,0x3
c0019b85:	50                   	push   eax
c0019b86:	50                   	push   eax
c0019b87:	6a 01                	push   0x1
c0019b89:	53                   	push   ebx
c0019b8a:	e8 7e c9 fe ff       	call   c000650d <iso_open>
c0019b8f:	83 c4 10             	add    esp,0x10
c0019b92:	89 c3                	mov    ebx,eax
c0019b94:	83 f8 ff             	cmp    eax,0xffffffff
c0019b97:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0019b9c:	75 1c                	jne    c0019bba <ISO9660::openDir(char const*, void**)+0xb0>
c0019b9e:	53                   	push   ebx
c0019b9f:	53                   	push   ebx
c0019ba0:	68 fd 1f 02 c0       	push   0xc0021ffd
c0019ba5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019bab:	e8 e8 ee fe ff       	call   c0008a98 <VgaText::puts(char const*)>
c0019bb0:	83 c4 10             	add    esp,0x10
c0019bb3:	b8 01 00 00 00       	mov    eax,0x1
c0019bb8:	eb 25                	jmp    c0019bdf <ISO9660::openDir(char const*, void**)+0xd5>
c0019bba:	01 db                	add    ebx,ebx
c0019bbc:	51                   	push   ecx
c0019bbd:	83 c3 65             	add    ebx,0x65
c0019bc0:	51                   	push   ecx
c0019bc1:	68 10 20 02 c0       	push   0xc0022010
c0019bc6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019bcc:	e8 c7 ee fe ff       	call   c0008a98 <VgaText::puts(char const*)>
c0019bd1:	89 1e                	mov    DWORD PTR [esi],ebx
c0019bd3:	83 c4 10             	add    esp,0x10
c0019bd6:	31 c0                	xor    eax,eax
c0019bd8:	eb 05                	jmp    c0019bdf <ISO9660::openDir(char const*, void**)+0xd5>
c0019bda:	b8 04 00 00 00       	mov    eax,0x4
c0019bdf:	5a                   	pop    edx
c0019be0:	5b                   	pop    ebx
c0019be1:	5e                   	pop    esi
c0019be2:	c3                   	ret    
c0019be3:	90                   	nop

c0019be4 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0019be4:	55                   	push   ebp
c0019be5:	57                   	push   edi
c0019be6:	56                   	push   esi
c0019be7:	53                   	push   ebx
c0019be8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019bee:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0019bf5:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0019bfc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019c04:	0f 84 e7 00 00 00    	je     c0019cf1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0019c0a:	85 db                	test   ebx,ebx
c0019c0c:	0f 84 df 00 00 00    	je     c0019cf1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0019c12:	83 ec 0c             	sub    esp,0xc
c0019c15:	68 23 20 02 c0       	push   0xc0022023
c0019c1a:	e8 58 0d ff ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c0019c1f:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0019c26:	b9 02 00 00 00       	mov    ecx,0x2
c0019c2b:	99                   	cdq    
c0019c2c:	f7 f9                	idiv   ecx
c0019c2e:	83 e8 32             	sub    eax,0x32
c0019c31:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c34:	e8 99 cb fe ff       	call   c00067d2 <iso_readdir>
c0019c39:	83 c4 10             	add    esp,0x10
c0019c3c:	89 c6                	mov    esi,eax
c0019c3e:	85 c0                	test   eax,eax
c0019c40:	75 37                	jne    c0019c79 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c0019c42:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0019c47:	56                   	push   esi
c0019c48:	56                   	push   esi
c0019c49:	68 2e 20 02 c0       	push   0xc002202e
c0019c4e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019c54:	e8 3f ee fe ff       	call   c0008a98 <VgaText::puts(char const*)>
c0019c59:	83 c4 0c             	add    esp,0xc
c0019c5c:	68 10 01 00 00       	push   0x110
c0019c61:	6a 00                	push   0x0
c0019c63:	57                   	push   edi
c0019c64:	e8 87 68 fe ff       	call   c00004f0 <memset>
c0019c69:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019c6f:	83 c4 10             	add    esp,0x10
c0019c72:	b8 01 00 00 00       	mov    eax,0x1
c0019c77:	eb 7d                	jmp    c0019cf6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0019c79:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019c7f:	8d 68 08             	lea    ebp,[eax+0x8]
c0019c82:	83 ec 0c             	sub    esp,0xc
c0019c85:	55                   	push   ebp
c0019c86:	e8 e5 68 fe ff       	call   c0000570 <strlen>
c0019c8b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019c93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019c97:	83 c4 10             	add    esp,0x10
c0019c9a:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0019c9e:	75 0a                	jne    c0019caa <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0019ca0:	b8 02 00 00 00       	mov    eax,0x2
c0019ca5:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0019ca8:	74 05                	je     c0019caf <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c0019caa:	b8 01 00 00 00       	mov    eax,0x1
c0019caf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019cb3:	50                   	push   eax
c0019cb4:	50                   	push   eax
c0019cb5:	55                   	push   ebp
c0019cb6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019cba:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019cbe:	50                   	push   eax
c0019cbf:	e8 7c 69 fe ff       	call   c0000640 <strcpy>
c0019cc4:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0019ccb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ccd:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0019cd3:	5a                   	pop    edx
c0019cd4:	a1 90 91 02 c0       	mov    eax,ds:0xc0029190
c0019cd9:	59                   	pop    ecx
c0019cda:	68 41 20 02 c0       	push   0xc0022041
c0019cdf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019ce5:	e8 ae ed fe ff       	call   c0008a98 <VgaText::puts(char const*)>
c0019cea:	83 c4 10             	add    esp,0x10
c0019ced:	31 c0                	xor    eax,eax
c0019cef:	eb 05                	jmp    c0019cf6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0019cf1:	b8 04 00 00 00       	mov    eax,0x4
c0019cf6:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019cfc:	5b                   	pop    ebx
c0019cfd:	5e                   	pop    esi
c0019cfe:	5f                   	pop    edi
c0019cff:	5d                   	pop    ebp
c0019d00:	c3                   	ret    

c0019d01 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019d01:	57                   	push   edi
c0019d02:	56                   	push   esi
c0019d03:	53                   	push   ebx
c0019d04:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019d08:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019d0c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019d10:	39 35 24 93 02 c0    	cmp    DWORD PTR ds:0xc0029324,esi
c0019d16:	0f be cb             	movsx  ecx,bl
c0019d19:	75 0b                	jne    c0019d26 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0019d1b:	0f be 05 80 2e 02 c0 	movsx  eax,BYTE PTR ds:0xc0022e80
c0019d22:	39 c8                	cmp    eax,ecx
c0019d24:	74 47                	je     c0019d6d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019d26:	83 ec 0c             	sub    esp,0xc
c0019d29:	31 d2                	xor    edx,edx
c0019d2b:	68 40 93 02 c0       	push   0xc0029340
c0019d30:	6a 01                	push   0x1
c0019d32:	52                   	push   edx
c0019d33:	56                   	push   esi
c0019d34:	ff 34 8d 1c 83 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7ce4]
c0019d3b:	e8 24 37 ff ff       	call   c000d464 <LogicalDisk::read(unsigned long long, int, void*)>
c0019d40:	83 c4 20             	add    esp,0x20
c0019d43:	85 c0                	test   eax,eax
c0019d45:	75 0e                	jne    c0019d55 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0019d47:	89 35 24 93 02 c0    	mov    DWORD PTR ds:0xc0029324,esi
c0019d4d:	88 1d 80 2e 02 c0    	mov    BYTE PTR ds:0xc0022e80,bl
c0019d53:	eb 18                	jmp    c0019d6d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019d55:	50                   	push   eax
c0019d56:	68 00 08 00 00       	push   0x800
c0019d5b:	6a 00                	push   0x0
c0019d5d:	57                   	push   edi
c0019d5e:	e8 8d 67 fe ff       	call   c00004f0 <memset>
c0019d63:	83 c4 10             	add    esp,0x10
c0019d66:	b8 01 00 00 00       	mov    eax,0x1
c0019d6b:	eb 0e                	jmp    c0019d7b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0019d6d:	be 40 93 02 c0       	mov    esi,0xc0029340
c0019d72:	b9 00 08 00 00       	mov    ecx,0x800
c0019d77:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d79:	31 c0                	xor    eax,eax
c0019d7b:	5b                   	pop    ebx
c0019d7c:	5e                   	pop    esi
c0019d7d:	5f                   	pop    edi
c0019d7e:	c3                   	ret    
c0019d7f:	90                   	nop

c0019d80 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019d80:	53                   	push   ebx
c0019d81:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0019d87:	c7 05 24 93 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029324,0xdeadbeef
c0019d91:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0019d98:	8d 58 41             	lea    ebx,[eax+0x41]
c0019d9b:	0f be db             	movsx  ebx,bl
c0019d9e:	53                   	push   ebx
c0019d9f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019da3:	50                   	push   eax
c0019da4:	6a 10                	push   0x10
c0019da6:	e8 56 ff ff ff       	call   c0019d01 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019dab:	83 c4 10             	add    esp,0x10
c0019dae:	31 d2                	xor    edx,edx
c0019db0:	85 c0                	test   eax,eax
c0019db2:	75 33                	jne    c0019de7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019db4:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019db9:	75 2c                	jne    c0019de7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019dbb:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019dc0:	75 25                	jne    c0019de7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019dc2:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019dc7:	75 1e                	jne    c0019de7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019dc9:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019dce:	75 17                	jne    c0019de7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019dd0:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019dd5:	75 10                	jne    c0019de7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019dd7:	83 ec 0c             	sub    esp,0xc
c0019dda:	53                   	push   ebx
c0019ddb:	e8 66 cc fe ff       	call   c0006a46 <init_percd>
c0019de0:	83 c4 10             	add    esp,0x10
c0019de3:	40                   	inc    eax
c0019de4:	0f 95 c2             	setne  dl
c0019de7:	88 d0                	mov    al,dl
c0019de9:	81 c4 08 08 00 00    	add    esp,0x808
c0019def:	5b                   	pop    ebx
c0019df0:	c3                   	ret    
c0019df1:	90                   	nop

c0019df2 <ISO9660::ISO9660()>:
c0019df2:	83 ec 0c             	sub    esp,0xc
c0019df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019df9:	83 ec 0c             	sub    esp,0xc
c0019dfc:	50                   	push   eax
c0019dfd:	e8 6e 11 ff ff       	call   c000af70 <Filesystem::Filesystem()>
c0019e02:	83 c4 10             	add    esp,0x10
c0019e05:	ba 5c 20 02 c0       	mov    edx,0xc002205c
c0019e0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e0e:	89 10                	mov    DWORD PTR [eax],edx
c0019e10:	e8 43 cd fe ff       	call   c0006b58 <fs_iso9660_init>
c0019e15:	90                   	nop
c0019e16:	83 c4 0c             	add    esp,0xc
c0019e19:	c3                   	ret    

c0019e1a <SoundCard::beginPlayback()>:
c0019e1a:	c7 44 24 04 bc 20 02 c0 	mov    DWORD PTR [esp+0x4],0xc00220bc
c0019e22:	e9 b4 6d ff ff       	jmp    c0010bdb <KePanic(char const*)>
c0019e27:	90                   	nop

c0019e28 <SoundCard::stopPlayback()>:
c0019e28:	c7 44 24 04 bc 20 02 c0 	mov    DWORD PTR [esp+0x4],0xc00220bc
c0019e30:	e9 a6 6d ff ff       	jmp    c0010bdb <KePanic(char const*)>
c0019e35:	90                   	nop

c0019e36 <SoundCard::SoundCard(char const*)>:
c0019e36:	83 ec 1c             	sub    esp,0x1c
c0019e39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e3d:	83 ec 08             	sub    esp,0x8
c0019e40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019e44:	50                   	push   eax
c0019e45:	e8 d0 23 ff ff       	call   c000c21a <Device::Device(char const*)>
c0019e4a:	83 c4 10             	add    esp,0x10
c0019e4d:	ba 08 21 02 c0       	mov    edx,0xc0022108
c0019e52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e56:	89 10                	mov    DWORD PTR [eax],edx
c0019e58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e5c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019e63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e67:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019e71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e75:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019e7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e83:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019e8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e91:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019e9b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019ea3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019ea8:	7f 1a                	jg     c0019ec4 <SoundCard::SoundCard(char const*)+0x8e>
c0019eaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019eae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019eb2:	83 c2 54             	add    edx,0x54
c0019eb5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019ebd:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019ec2:	eb df                	jmp    c0019ea3 <SoundCard::SoundCard(char const*)+0x6d>
c0019ec4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ec8:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019ecf:	90                   	nop
c0019ed0:	83 c4 1c             	add    esp,0x1c
c0019ed3:	c3                   	ret    

c0019ed4 <SoundCard::~SoundCard()>:
c0019ed4:	83 ec 0c             	sub    esp,0xc
c0019ed7:	ba 08 21 02 c0       	mov    edx,0xc0022108
c0019edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ee0:	89 10                	mov    DWORD PTR [eax],edx
c0019ee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ee6:	83 ec 0c             	sub    esp,0xc
c0019ee9:	50                   	push   eax
c0019eea:	e8 95 20 ff ff       	call   c000bf84 <Device::~Device()>
c0019eef:	83 c4 10             	add    esp,0x10
c0019ef2:	90                   	nop
c0019ef3:	83 c4 0c             	add    esp,0xc
c0019ef6:	c3                   	ret    
c0019ef7:	90                   	nop

c0019ef8 <SoundCard::~SoundCard()>:
c0019ef8:	83 ec 0c             	sub    esp,0xc
c0019efb:	83 ec 0c             	sub    esp,0xc
c0019efe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f02:	e8 cd ff ff ff       	call   c0019ed4 <SoundCard::~SoundCard()>
c0019f07:	83 c4 10             	add    esp,0x10
c0019f0a:	83 ec 08             	sub    esp,0x8
c0019f0d:	68 e8 01 00 00       	push   0x1e8
c0019f12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f16:	e8 2f 09 ff ff       	call   c000a84a <operator delete(void*, unsigned long)>
c0019f1b:	83 c4 10             	add    esp,0x10
c0019f1e:	83 c4 0c             	add    esp,0xc
c0019f21:	c3                   	ret    

c0019f22 <SoundCard::configureRates(int, int, int)>:
c0019f22:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019f26:	31 c0                	xor    eax,eax
c0019f28:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019f2f:	75 20                	jne    c0019f51 <SoundCard::configureRates(int, int, int)+0x2f>
c0019f31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f35:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019f3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f3f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019f45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f49:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019f4f:	b0 01                	mov    al,0x1
c0019f51:	c3                   	ret    

c0019f52 <SoundCard::getSamples16(int, short*)>:
c0019f52:	55                   	push   ebp
c0019f53:	57                   	push   edi
c0019f54:	31 ff                	xor    edi,edi
c0019f56:	56                   	push   esi
c0019f57:	53                   	push   ebx
c0019f58:	31 db                	xor    ebx,ebx
c0019f5a:	83 ec 10             	sub    esp,0x10
c0019f5d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019f61:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019f65:	8d 04 36             	lea    eax,[esi+esi*1]
c0019f68:	50                   	push   eax
c0019f69:	6a 00                	push   0x0
c0019f6b:	55                   	push   ebp
c0019f6c:	e8 7f 65 fe ff       	call   c00004f0 <memset>
c0019f71:	83 c4 10             	add    esp,0x10
c0019f74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f78:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0019f7f:	85 c0                	test   eax,eax
c0019f81:	74 1b                	je     c0019f9e <SoundCard::getSamples16(int, short*)+0x4c>
c0019f83:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019f87:	75 15                	jne    c0019f9e <SoundCard::getSamples16(int, short*)+0x4c>
c0019f89:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019f8d:	55                   	push   ebp
c0019f8e:	56                   	push   esi
c0019f8f:	50                   	push   eax
c0019f90:	e8 f3 02 00 00       	call   c001a288 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019f95:	83 c4 10             	add    esp,0x10
c0019f98:	39 c7                	cmp    edi,eax
c0019f9a:	7d 02                	jge    c0019f9e <SoundCard::getSamples16(int, short*)+0x4c>
c0019f9c:	89 c7                	mov    edi,eax
c0019f9e:	43                   	inc    ebx
c0019f9f:	83 fb 20             	cmp    ebx,0x20
c0019fa2:	75 d0                	jne    c0019f74 <SoundCard::getSamples16(int, short*)+0x22>
c0019fa4:	83 c4 0c             	add    esp,0xc
c0019fa7:	89 f8                	mov    eax,edi
c0019fa9:	5b                   	pop    ebx
c0019faa:	5e                   	pop    esi
c0019fab:	5f                   	pop    edi
c0019fac:	5d                   	pop    ebp
c0019fad:	c3                   	ret    

c0019fae <SoundCard::getSamples32(int, int*)>:
c0019fae:	55                   	push   ebp
c0019faf:	57                   	push   edi
c0019fb0:	31 ff                	xor    edi,edi
c0019fb2:	56                   	push   esi
c0019fb3:	31 f6                	xor    esi,esi
c0019fb5:	53                   	push   ebx
c0019fb6:	83 ec 10             	sub    esp,0x10
c0019fb9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019fbd:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019fc1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019fc5:	c1 e0 02             	shl    eax,0x2
c0019fc8:	50                   	push   eax
c0019fc9:	6a 00                	push   0x0
c0019fcb:	55                   	push   ebp
c0019fcc:	e8 1f 65 fe ff       	call   c00004f0 <memset>
c0019fd1:	83 c4 10             	add    esp,0x10
c0019fd4:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019fdb:	85 c0                	test   eax,eax
c0019fdd:	74 1b                	je     c0019ffa <SoundCard::getSamples32(int, int*)+0x4c>
c0019fdf:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019fe3:	75 15                	jne    c0019ffa <SoundCard::getSamples32(int, int*)+0x4c>
c0019fe5:	53                   	push   ebx
c0019fe6:	55                   	push   ebp
c0019fe7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019feb:	50                   	push   eax
c0019fec:	e8 63 03 00 00       	call   c001a354 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019ff1:	83 c4 10             	add    esp,0x10
c0019ff4:	39 c6                	cmp    esi,eax
c0019ff6:	7d 02                	jge    c0019ffa <SoundCard::getSamples32(int, int*)+0x4c>
c0019ff8:	89 c6                	mov    esi,eax
c0019ffa:	47                   	inc    edi
c0019ffb:	83 ff 20             	cmp    edi,0x20
c0019ffe:	75 d4                	jne    c0019fd4 <SoundCard::getSamples32(int, int*)+0x26>
c001a000:	85 f6                	test   esi,esi
c001a002:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a009:	75 0f                	jne    c001a01a <SoundCard::getSamples32(int, int*)+0x6c>
c001a00b:	85 c0                	test   eax,eax
c001a00d:	74 1b                	je     c001a02a <SoundCard::getSamples32(int, int*)+0x7c>
c001a00f:	83 ec 0c             	sub    esp,0xc
c001a012:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a014:	53                   	push   ebx
c001a015:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a018:	eb 0d                	jmp    c001a027 <SoundCard::getSamples32(int, int*)+0x79>
c001a01a:	85 c0                	test   eax,eax
c001a01c:	75 0c                	jne    c001a02a <SoundCard::getSamples32(int, int*)+0x7c>
c001a01e:	83 ec 0c             	sub    esp,0xc
c001a021:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a023:	53                   	push   ebx
c001a024:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a027:	83 c4 10             	add    esp,0x10
c001a02a:	83 c4 0c             	add    esp,0xc
c001a02d:	89 f0                	mov    eax,esi
c001a02f:	5b                   	pop    ebx
c001a030:	5e                   	pop    esi
c001a031:	5f                   	pop    edi
c001a032:	5d                   	pop    ebp
c001a033:	c3                   	ret    

c001a034 <SoundCard::addChannel(SoundPort*)>:
c001a034:	83 ec 0c             	sub    esp,0xc
c001a037:	31 c0                	xor    eax,eax
c001a039:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a03d:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a045:	74 1b                	je     c001a062 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a047:	40                   	inc    eax
c001a048:	83 f8 20             	cmp    eax,0x20
c001a04b:	75 f0                	jne    c001a03d <SoundCard::addChannel(SoundPort*)+0x9>
c001a04d:	83 ec 0c             	sub    esp,0xc
c001a050:	68 e1 20 02 c0       	push   0xc00220e1
c001a055:	e8 81 6b ff ff       	call   c0010bdb <KePanic(char const*)>
c001a05a:	83 c4 10             	add    esp,0x10
c001a05d:	83 c8 ff             	or     eax,0xffffffff
c001a060:	eb 0b                	jmp    c001a06d <SoundCard::addChannel(SoundPort*)+0x39>
c001a062:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a066:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a06d:	83 c4 0c             	add    esp,0xc
c001a070:	c3                   	ret    
c001a071:	90                   	nop

c001a072 <SoundCard::removeChannel(int)>:
c001a072:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a076:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a07a:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a085:	c3                   	ret    
c001a086:	66 90                	xchg   ax,ax

c001a088 <SoundPort::SoundPort(int, int, int, int)>:
c001a088:	83 ec 0c             	sub    esp,0xc
c001a08b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a08f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a09a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a0a6:	89 10                	mov    DWORD PTR [eax],edx
c001a0a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a0b0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a0b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a0bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a0be:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a0c3:	75 13                	jne    c001a0d8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a0c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0c9:	8b 00                	mov    eax,DWORD PTR [eax]
c001a0cb:	05 a0 0f 00 00       	add    eax,0xfa0
c001a0d0:	01 c0                	add    eax,eax
c001a0d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a0d6:	66 90                	xchg   ax,ax
c001a0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a0e0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a0e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0e7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a0f5:	c1 e0 02             	shl    eax,0x2
c001a0f8:	83 ec 0c             	sub    esp,0xc
c001a0fb:	50                   	push   eax
c001a0fc:	e8 ad d9 fe ff       	call   c0007aae <malloc>
c001a101:	83 c4 10             	add    esp,0x10
c001a104:	89 c2                	mov    edx,eax
c001a106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a10a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a10d:	90                   	nop
c001a10e:	83 c4 0c             	add    esp,0xc
c001a111:	c3                   	ret    
c001a112:	66 90                	xchg   ax,ax

c001a114 <SoundPort::~SoundPort()>:
c001a114:	83 ec 0c             	sub    esp,0xc
c001a117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a11b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a11e:	85 c0                	test   eax,eax
c001a120:	74 1e                	je     c001a140 <SoundPort::~SoundPort()+0x2c>
c001a122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a126:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a129:	83 ec 0c             	sub    esp,0xc
c001a12c:	50                   	push   eax
c001a12d:	e8 8c d9 fe ff       	call   c0007abe <free>
c001a132:	83 c4 10             	add    esp,0x10
c001a135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a139:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a140:	90                   	nop
c001a141:	83 c4 0c             	add    esp,0xc
c001a144:	c3                   	ret    
c001a145:	90                   	nop
c001a146:	66 90                	xchg   ax,ax

c001a148 <SoundPort::unpause()>:
c001a148:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a14c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a150:	c3                   	ret    
c001a151:	90                   	nop
c001a152:	66 90                	xchg   ax,ax

c001a154 <SoundPort::pause()>:
c001a154:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a158:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a15c:	c3                   	ret    
c001a15d:	90                   	nop
c001a15e:	66 90                	xchg   ax,ax

c001a160 <SoundPort::getBufferUsed()>:
c001a160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a164:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a167:	c3                   	ret    

c001a168 <SoundPort::getBufferSize()>:
c001a168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a16c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a16f:	c3                   	ret    

c001a170 <SoundPort::buffer16(short*, int)>:
c001a170:	55                   	push   ebp
c001a171:	57                   	push   edi
c001a172:	56                   	push   esi
c001a173:	53                   	push   ebx
c001a174:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a178:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001a17c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001a17f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001a182:	74 68                	je     c001a1ec <SoundPort::buffer16(short*, int)+0x7c>
c001a184:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a188:	85 c9                	test   ecx,ecx
c001a18a:	7e 60                	jle    c001a1ec <SoundPort::buffer16(short*, int)+0x7c>
c001a18c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001a190:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a193:	c1 e1 0f             	shl    ecx,0xf
c001a196:	8d 70 01             	lea    esi,[eax+0x1]
c001a199:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a19c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001a19f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a1a2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a1a5:	74 4d                	je     c001a1f4 <SoundPort::buffer16(short*, int)+0x84>
c001a1a7:	31 f6                	xor    esi,esi
c001a1a9:	eb 21                	jmp    c001a1cc <SoundPort::buffer16(short*, int)+0x5c>
c001a1ab:	90                   	nop
c001a1ac:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001a1b1:	8d 79 01             	lea    edi,[ecx+0x1]
c001a1b4:	c1 e3 0f             	shl    ebx,0xf
c001a1b7:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001a1ba:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001a1bd:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001a1c0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a1c3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a1c6:	74 1c                	je     c001a1e4 <SoundPort::buffer16(short*, int)+0x74>
c001a1c8:	89 c6                	mov    esi,eax
c001a1ca:	66 90                	xchg   ax,ax
c001a1cc:	8d 46 01             	lea    eax,[esi+0x1]
c001a1cf:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001a1d3:	75 d7                	jne    c001a1ac <SoundPort::buffer16(short*, int)+0x3c>
c001a1d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a1d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a1dc:	5b                   	pop    ebx
c001a1dd:	5e                   	pop    esi
c001a1de:	5f                   	pop    edi
c001a1df:	5d                   	pop    ebp
c001a1e0:	c3                   	ret    
c001a1e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a1e4:	5b                   	pop    ebx
c001a1e5:	8d 46 02             	lea    eax,[esi+0x2]
c001a1e8:	5e                   	pop    esi
c001a1e9:	5f                   	pop    edi
c001a1ea:	5d                   	pop    ebp
c001a1eb:	c3                   	ret    
c001a1ec:	5b                   	pop    ebx
c001a1ed:	31 c0                	xor    eax,eax
c001a1ef:	5e                   	pop    esi
c001a1f0:	5f                   	pop    edi
c001a1f1:	5d                   	pop    ebp
c001a1f2:	c3                   	ret    
c001a1f3:	90                   	nop
c001a1f4:	b8 01 00 00 00       	mov    eax,0x1
c001a1f9:	eb e1                	jmp    c001a1dc <SoundPort::buffer16(short*, int)+0x6c>
c001a1fb:	90                   	nop

c001a1fc <SoundPort::buffer32(int*, int)>:
c001a1fc:	55                   	push   ebp
c001a1fd:	57                   	push   edi
c001a1fe:	56                   	push   esi
c001a1ff:	53                   	push   ebx
c001a200:	83 ec 04             	sub    esp,0x4
c001a203:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a20b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a20e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a212:	89 04 24             	mov    DWORD PTR [esp],eax
c001a215:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a218:	74 5a                	je     c001a274 <SoundPort::buffer32(int*, int)+0x78>
c001a21a:	85 c0                	test   eax,eax
c001a21c:	7e 56                	jle    c001a274 <SoundPort::buffer32(int*, int)+0x78>
c001a21e:	8d 71 01             	lea    esi,[ecx+0x1]
c001a221:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a224:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a227:	8b 37                	mov    esi,DWORD PTR [edi]
c001a229:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001a22c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a22f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a232:	74 4c                	je     c001a280 <SoundPort::buffer32(int*, int)+0x84>
c001a234:	31 f6                	xor    esi,esi
c001a236:	eb 1c                	jmp    c001a254 <SoundPort::buffer32(int*, int)+0x58>
c001a238:	8d 69 01             	lea    ebp,[ecx+0x1]
c001a23b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001a23e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001a241:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001a244:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001a248:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a24b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a24e:	74 18                	je     c001a268 <SoundPort::buffer32(int*, int)+0x6c>
c001a250:	89 de                	mov    esi,ebx
c001a252:	66 90                	xchg   ax,ax
c001a254:	8d 5e 01             	lea    ebx,[esi+0x1]
c001a257:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001a25a:	75 dc                	jne    c001a238 <SoundPort::buffer32(int*, int)+0x3c>
c001a25c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a25f:	90                   	nop
c001a260:	83 c4 04             	add    esp,0x4
c001a263:	5b                   	pop    ebx
c001a264:	5e                   	pop    esi
c001a265:	5f                   	pop    edi
c001a266:	5d                   	pop    ebp
c001a267:	c3                   	ret    
c001a268:	83 c4 04             	add    esp,0x4
c001a26b:	8d 46 02             	lea    eax,[esi+0x2]
c001a26e:	5b                   	pop    ebx
c001a26f:	5e                   	pop    esi
c001a270:	5f                   	pop    edi
c001a271:	5d                   	pop    ebp
c001a272:	c3                   	ret    
c001a273:	90                   	nop
c001a274:	83 c4 04             	add    esp,0x4
c001a277:	31 c0                	xor    eax,eax
c001a279:	5b                   	pop    ebx
c001a27a:	5e                   	pop    esi
c001a27b:	5f                   	pop    edi
c001a27c:	5d                   	pop    ebp
c001a27d:	c3                   	ret    
c001a27e:	66 90                	xchg   ax,ax
c001a280:	b8 01 00 00 00       	mov    eax,0x1
c001a285:	eb d9                	jmp    c001a260 <SoundPort::buffer32(int*, int)+0x64>
c001a287:	90                   	nop

c001a288 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001a288:	57                   	push   edi
c001a289:	56                   	push   esi
c001a28a:	53                   	push   ebx
c001a28b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a28f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a293:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001a299:	39 03                	cmp    DWORD PTR [ebx],eax
c001a29b:	74 13                	je     c001a2b0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001a29d:	83 ec 0c             	sub    esp,0xc
c001a2a0:	68 34 21 02 c0       	push   0xc0022134
c001a2a5:	e8 31 69 ff ff       	call   c0010bdb <KePanic(char const*)>
c001a2aa:	83 c4 10             	add    esp,0x10
c001a2ad:	8d 76 00             	lea    esi,[esi+0x0]
c001a2b0:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001a2b6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001a2b9:	74 11                	je     c001a2cc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001a2bb:	83 ec 0c             	sub    esp,0xc
c001a2be:	68 73 21 02 c0       	push   0xc0022173
c001a2c3:	e8 13 69 ff ff       	call   c0010bdb <KePanic(char const*)>
c001a2c8:	83 c4 10             	add    esp,0x10
c001a2cb:	90                   	nop
c001a2cc:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001a2d2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001a2d5:	74 11                	je     c001a2e8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001a2d7:	83 ec 0c             	sub    esp,0xc
c001a2da:	68 73 21 02 c0       	push   0xc0022173
c001a2df:	e8 f7 68 ff ff       	call   c0010bdb <KePanic(char const*)>
c001a2e4:	83 c4 10             	add    esp,0x10
c001a2e7:	90                   	nop
c001a2e8:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001a2eb:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001a2ef:	7e 07                	jle    c001a2f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001a2f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a2f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a2f8:	85 f6                	test   esi,esi
c001a2fa:	7e 2c                	jle    c001a328 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001a2fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a300:	8d 3c 36             	lea    edi,[esi+esi*1]
c001a303:	31 c9                	xor    ecx,ecx
c001a305:	01 d7                	add    edi,edx
c001a307:	90                   	nop
c001a308:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001a30b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001a30e:	85 c0                	test   eax,eax
c001a310:	79 06                	jns    c001a318 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001a312:	05 ff 7f 00 00       	add    eax,0x7fff
c001a317:	90                   	nop
c001a318:	c1 f8 0f             	sar    eax,0xf
c001a31b:	83 c1 04             	add    ecx,0x4
c001a31e:	66 01 02             	add    WORD PTR [edx],ax
c001a321:	83 c2 02             	add    edx,0x2
c001a324:	39 d7                	cmp    edi,edx
c001a326:	75 e0                	jne    c001a308 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001a328:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001a32b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a32e:	83 ec 04             	sub    esp,0x4
c001a331:	29 f0                	sub    eax,esi
c001a333:	c1 e0 02             	shl    eax,0x2
c001a336:	50                   	push   eax
c001a337:	8d 04 b2             	lea    eax,[edx+esi*4]
c001a33a:	50                   	push   eax
c001a33b:	52                   	push   edx
c001a33c:	e8 8f 60 fe ff       	call   c00003d0 <memmove>
c001a341:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a344:	83 c4 10             	add    esp,0x10
c001a347:	29 f0                	sub    eax,esi
c001a349:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a34c:	89 f0                	mov    eax,esi
c001a34e:	5b                   	pop    ebx
c001a34f:	5e                   	pop    esi
c001a350:	5f                   	pop    edi
c001a351:	c3                   	ret    
c001a352:	66 90                	xchg   ax,ax

c001a354 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001a354:	57                   	push   edi
c001a355:	56                   	push   esi
c001a356:	53                   	push   ebx
c001a357:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a35b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a35f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a363:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001a369:	39 06                	cmp    DWORD PTR [esi],eax
c001a36b:	74 13                	je     c001a380 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001a36d:	83 ec 0c             	sub    esp,0xc
c001a370:	68 54 21 02 c0       	push   0xc0022154
c001a375:	e8 61 68 ff ff       	call   c0010bdb <KePanic(char const*)>
c001a37a:	83 c4 10             	add    esp,0x10
c001a37d:	8d 76 00             	lea    esi,[esi+0x0]
c001a380:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001a386:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001a389:	74 11                	je     c001a39c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001a38b:	83 ec 0c             	sub    esp,0xc
c001a38e:	68 8f 21 02 c0       	push   0xc002218f
c001a393:	e8 43 68 ff ff       	call   c0010bdb <KePanic(char const*)>
c001a398:	83 c4 10             	add    esp,0x10
c001a39b:	90                   	nop
c001a39c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001a3a2:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001a3a5:	74 11                	je     c001a3b8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001a3a7:	83 ec 0c             	sub    esp,0xc
c001a3aa:	68 8f 21 02 c0       	push   0xc002218f
c001a3af:	e8 27 68 ff ff       	call   c0010bdb <KePanic(char const*)>
c001a3b4:	83 c4 10             	add    esp,0x10
c001a3b7:	90                   	nop
c001a3b8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a3bb:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001a3bf:	7e 07                	jle    c001a3c8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001a3c1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a3c5:	8d 76 00             	lea    esi,[esi+0x0]
c001a3c8:	85 ff                	test   edi,edi
c001a3ca:	7e 1c                	jle    c001a3e8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001a3cc:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001a3d3:	31 c0                	xor    eax,eax
c001a3d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a3d8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a3db:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001a3de:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001a3e1:	83 c0 04             	add    eax,0x4
c001a3e4:	39 c1                	cmp    ecx,eax
c001a3e6:	75 f0                	jne    c001a3d8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001a3e8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a3eb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a3ee:	83 ec 04             	sub    esp,0x4
c001a3f1:	29 f8                	sub    eax,edi
c001a3f3:	c1 e0 02             	shl    eax,0x2
c001a3f6:	50                   	push   eax
c001a3f7:	8d 04 ba             	lea    eax,[edx+edi*4]
c001a3fa:	50                   	push   eax
c001a3fb:	52                   	push   edx
c001a3fc:	e8 cf 5f fe ff       	call   c00003d0 <memmove>
c001a401:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a404:	83 c4 10             	add    esp,0x10
c001a407:	29 f8                	sub    eax,edi
c001a409:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001a40c:	89 f8                	mov    eax,edi
c001a40e:	5b                   	pop    ebx
c001a40f:	5e                   	pop    esi
c001a410:	5f                   	pop    edi
c001a411:	c3                   	ret    

c001a412 <PCI::open(int, int, void*)>:
c001a412:	83 ec 18             	sub    esp,0x18
c001a415:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a419:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a41d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001a423:	8b 10                	mov    edx,DWORD PTR [eax]
c001a425:	50                   	push   eax
c001a426:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001a429:	31 c0                	xor    eax,eax
c001a42b:	83 c4 1c             	add    esp,0x1c
c001a42e:	c3                   	ret    
c001a42f:	90                   	nop

c001a430 <PCI::close(int, int, void*)>:
c001a430:	31 c0                	xor    eax,eax
c001a432:	c3                   	ret    
c001a433:	90                   	nop

c001a434 <PCI::PCI()>:
c001a434:	83 ec 0c             	sub    esp,0xc
c001a437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a43b:	83 ec 08             	sub    esp,0x8
c001a43e:	68 ab 21 02 c0       	push   0xc00221ab
c001a443:	50                   	push   eax
c001a444:	e8 9b 15 ff ff       	call   c000b9e4 <Bus::Bus(char const*)>
c001a449:	83 c4 10             	add    esp,0x10
c001a44c:	ba 54 22 02 c0       	mov    edx,0xc0022254
c001a451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a455:	89 10                	mov    DWORD PTR [eax],edx
c001a457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a45b:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001a465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a469:	a3 40 9b 02 c0       	mov    ds:0xc0029b40,eax
c001a46e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a472:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a478:	0f b6 d0             	movzx  edx,al
c001a47b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a47f:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001a486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a48a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a490:	0f b6 d0             	movzx  edx,al
c001a493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a497:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001a49c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a4a6:	8d 50 01             	lea    edx,[eax+0x1]
c001a4a9:	88 d1                	mov    cl,dl
c001a4ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a4af:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a4b5:	0f b6 d0             	movzx  edx,al
c001a4b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4bc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001a4c0:	83 c9 c0             	or     ecx,0xffffffc0
c001a4c3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001a4c7:	90                   	nop
c001a4c8:	83 c4 0c             	add    esp,0xc
c001a4cb:	c3                   	ret    

c001a4cc <PCI::readBAR8(unsigned int, int)>:
c001a4cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a4d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4d4:	f6 c2 01             	test   dl,0x1
c001a4d7:	74 07                	je     c001a4e0 <PCI::readBAR8(unsigned int, int)+0x14>
c001a4d9:	83 e2 fc             	and    edx,0xfffffffc
c001a4dc:	01 c2                	add    edx,eax
c001a4de:	ec                   	in     al,dx
c001a4df:	c3                   	ret    
c001a4e0:	83 e2 f0             	and    edx,0xfffffff0
c001a4e3:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a4e6:	c3                   	ret    
c001a4e7:	90                   	nop

c001a4e8 <PCI::readBAR16(unsigned int, int)>:
c001a4e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a4ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a4f0:	f6 c2 01             	test   dl,0x1
c001a4f3:	74 08                	je     c001a4fd <PCI::readBAR16(unsigned int, int)+0x15>
c001a4f5:	83 e2 fc             	and    edx,0xfffffffc
c001a4f8:	01 c2                	add    edx,eax
c001a4fa:	66 ed                	in     ax,dx
c001a4fc:	c3                   	ret    
c001a4fd:	83 e2 f0             	and    edx,0xfffffff0
c001a500:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001a504:	c3                   	ret    
c001a505:	90                   	nop

c001a506 <PCI::readBAR32(unsigned int, int)>:
c001a506:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a50a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a50e:	f6 c2 01             	test   dl,0x1
c001a511:	74 07                	je     c001a51a <PCI::readBAR32(unsigned int, int)+0x14>
c001a513:	83 e2 fc             	and    edx,0xfffffffc
c001a516:	01 c2                	add    edx,eax
c001a518:	ed                   	in     eax,dx
c001a519:	c3                   	ret    
c001a51a:	83 e2 f0             	and    edx,0xfffffff0
c001a51d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a520:	c3                   	ret    
c001a521:	90                   	nop

c001a522 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a522:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a526:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a52a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a52e:	f6 c2 01             	test   dl,0x1
c001a531:	74 07                	je     c001a53a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a533:	83 e2 fc             	and    edx,0xfffffffc
c001a536:	01 ca                	add    edx,ecx
c001a538:	ee                   	out    dx,al
c001a539:	c3                   	ret    
c001a53a:	83 e2 f0             	and    edx,0xfffffff0
c001a53d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a540:	c3                   	ret    
c001a541:	90                   	nop

c001a542 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a542:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a546:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a54a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a54e:	f6 c2 01             	test   dl,0x1
c001a551:	74 08                	je     c001a55b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001a553:	83 e2 fc             	and    edx,0xfffffffc
c001a556:	01 ca                	add    edx,ecx
c001a558:	66 ef                	out    dx,ax
c001a55a:	c3                   	ret    
c001a55b:	83 e2 f0             	and    edx,0xfffffff0
c001a55e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a562:	c3                   	ret    
c001a563:	90                   	nop

c001a564 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a564:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a56c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a570:	f6 c2 01             	test   dl,0x1
c001a573:	74 07                	je     c001a57c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a575:	83 e2 fc             	and    edx,0xfffffffc
c001a578:	01 ca                	add    edx,ecx
c001a57a:	ef                   	out    dx,eax
c001a57b:	c3                   	ret    
c001a57c:	83 e2 f0             	and    edx,0xfffffff0
c001a57f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a582:	c3                   	ret    
c001a583:	90                   	nop

c001a584 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a584:	55                   	push   ebp
c001a585:	57                   	push   edi
c001a586:	56                   	push   esi
c001a587:	53                   	push   ebx
c001a588:	83 ec 0c             	sub    esp,0xc
c001a58b:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001a590:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001a594:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a598:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a59c:	83 fe 07             	cmp    esi,0x7
c001a59f:	76 10                	jbe    c001a5b1 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001a5a1:	83 ec 0c             	sub    esp,0xc
c001a5a4:	68 b3 21 02 c0       	push   0xc00221b3
c001a5a9:	e8 2d 66 ff ff       	call   c0010bdb <KePanic(char const*)>
c001a5ae:	83 c4 10             	add    esp,0x10
c001a5b1:	0f b6 db             	movzx  ebx,bl
c001a5b4:	83 fb 0f             	cmp    ebx,0xf
c001a5b7:	76 10                	jbe    c001a5c9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001a5b9:	83 ec 0c             	sub    esp,0xc
c001a5bc:	68 e3 21 02 c0       	push   0xc00221e3
c001a5c1:	e8 15 66 ff ff       	call   c0010bdb <KePanic(char const*)>
c001a5c6:	83 c4 10             	add    esp,0x10
c001a5c9:	8d 04 36             	lea    eax,[esi+esi*1]
c001a5cc:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a5d1:	83 c8 f0             	or     eax,0xfffffff0
c001a5d4:	ee                   	out    dx,al
c001a5d5:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a5da:	89 e8                	mov    eax,ebp
c001a5dc:	ee                   	out    dx,al
c001a5dd:	83 c4 0c             	add    esp,0xc
c001a5e0:	89 d8                	mov    eax,ebx
c001a5e2:	89 f9                	mov    ecx,edi
c001a5e4:	c1 e0 08             	shl    eax,0x8
c001a5e7:	0f b6 d9             	movzx  ebx,cl
c001a5ea:	83 e3 fc             	and    ebx,0xfffffffc
c001a5ed:	09 d8                	or     eax,ebx
c001a5ef:	5b                   	pop    ebx
c001a5f0:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a5f5:	5e                   	pop    esi
c001a5f6:	5f                   	pop    edi
c001a5f7:	5d                   	pop    ebp
c001a5f8:	c3                   	ret    
c001a5f9:	90                   	nop

c001a5fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a5fa:	57                   	push   edi
c001a5fb:	56                   	push   esi
c001a5fc:	53                   	push   ebx
c001a5fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a601:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a605:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a60b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a60f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a613:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a617:	83 ff 01             	cmp    edi,0x1
c001a61a:	75 3f                	jne    c001a65b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001a61c:	89 de                	mov    esi,ebx
c001a61e:	0f b6 c0             	movzx  eax,al
c001a621:	81 e6 fc 00 00 00    	and    esi,0xfc
c001a627:	c1 e0 10             	shl    eax,0x10
c001a62a:	0f b6 c9             	movzx  ecx,cl
c001a62d:	09 f0                	or     eax,esi
c001a62f:	c1 e1 08             	shl    ecx,0x8
c001a632:	0f b6 d2             	movzx  edx,dl
c001a635:	09 c8                	or     eax,ecx
c001a637:	c1 e2 0b             	shl    edx,0xb
c001a63a:	09 d0                	or     eax,edx
c001a63c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a641:	0d 00 00 00 80       	or     eax,0x80000000
c001a646:	ef                   	out    dx,eax
c001a647:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a64c:	ed                   	in     eax,dx
c001a64d:	83 e3 02             	and    ebx,0x2
c001a650:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a657:	d3 e8                	shr    eax,cl
c001a659:	eb 44                	jmp    c001a69f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a65b:	83 ff 02             	cmp    edi,0x2
c001a65e:	75 2d                	jne    c001a68d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a660:	83 ec 0c             	sub    esp,0xc
c001a663:	0f b6 c9             	movzx  ecx,cl
c001a666:	0f b6 d2             	movzx  edx,dl
c001a669:	0f b6 fb             	movzx  edi,bl
c001a66c:	0f b6 c0             	movzx  eax,al
c001a66f:	57                   	push   edi
c001a670:	51                   	push   ecx
c001a671:	52                   	push   edx
c001a672:	50                   	push   eax
c001a673:	56                   	push   esi
c001a674:	e8 0b ff ff ff       	call   c001a584 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a679:	89 c2                	mov    edx,eax
c001a67b:	ed                   	in     eax,dx
c001a67c:	83 e3 02             	and    ebx,0x2
c001a67f:	83 c4 20             	add    esp,0x20
c001a682:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a689:	d3 e8                	shr    eax,cl
c001a68b:	eb 12                	jmp    c001a69f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a68d:	83 ec 0c             	sub    esp,0xc
c001a690:	68 13 22 02 c0       	push   0xc0022213
c001a695:	e8 41 65 ff ff       	call   c0010bdb <KePanic(char const*)>
c001a69a:	83 c4 10             	add    esp,0x10
c001a69d:	31 c0                	xor    eax,eax
c001a69f:	5b                   	pop    ebx
c001a6a0:	5e                   	pop    esi
c001a6a1:	5f                   	pop    edi
c001a6a2:	c3                   	ret    
c001a6a3:	90                   	nop

c001a6a4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a6a4:	83 ec 18             	sub    esp,0x18
c001a6a7:	6a 00                	push   0x0
c001a6a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a6ae:	50                   	push   eax
c001a6af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a6b4:	50                   	push   eax
c001a6b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a6ba:	50                   	push   eax
c001a6bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a6bf:	e8 36 ff ff ff       	call   c001a5fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a6c4:	83 c4 2c             	add    esp,0x2c
c001a6c7:	c3                   	ret    

c001a6c8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a6c8:	83 ec 18             	sub    esp,0x18
c001a6cb:	6a 0e                	push   0xe
c001a6cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a6d2:	50                   	push   eax
c001a6d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a6d8:	50                   	push   eax
c001a6d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a6de:	50                   	push   eax
c001a6df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a6e3:	e8 12 ff ff ff       	call   c001a5fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a6e8:	83 c4 2c             	add    esp,0x2c
c001a6eb:	0f b6 c0             	movzx  eax,al
c001a6ee:	c3                   	ret    
c001a6ef:	90                   	nop

c001a6f0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a6f0:	55                   	push   ebp
c001a6f1:	57                   	push   edi
c001a6f2:	56                   	push   esi
c001a6f3:	53                   	push   ebx
c001a6f4:	83 ec 18             	sub    esp,0x18
c001a6f7:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a6fc:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a701:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a706:	6a 0a                	push   0xa
c001a708:	56                   	push   esi
c001a709:	55                   	push   ebp
c001a70a:	57                   	push   edi
c001a70b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a70f:	e8 e6 fe ff ff       	call   c001a5fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a714:	83 c4 14             	add    esp,0x14
c001a717:	89 c3                	mov    ebx,eax
c001a719:	6a 0a                	push   0xa
c001a71b:	0f b6 db             	movzx  ebx,bl
c001a71e:	56                   	push   esi
c001a71f:	55                   	push   ebp
c001a720:	57                   	push   edi
c001a721:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a725:	e8 d0 fe ff ff       	call   c001a5fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a72a:	83 c4 2c             	add    esp,0x2c
c001a72d:	25 00 ff 00 00       	and    eax,0xff00
c001a732:	09 d8                	or     eax,ebx
c001a734:	5b                   	pop    ebx
c001a735:	5e                   	pop    esi
c001a736:	5f                   	pop    edi
c001a737:	5d                   	pop    ebp
c001a738:	c3                   	ret    
c001a739:	90                   	nop

c001a73a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a73a:	83 ec 18             	sub    esp,0x18
c001a73d:	6a 08                	push   0x8
c001a73f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a744:	50                   	push   eax
c001a745:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a74a:	50                   	push   eax
c001a74b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a750:	50                   	push   eax
c001a751:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a755:	e8 a0 fe ff ff       	call   c001a5fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a75a:	83 c4 2c             	add    esp,0x2c
c001a75d:	0f b6 c4             	movzx  eax,ah
c001a760:	c3                   	ret    
c001a761:	90                   	nop

c001a762 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a762:	83 ec 18             	sub    esp,0x18
c001a765:	6a 08                	push   0x8
c001a767:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a76c:	50                   	push   eax
c001a76d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a772:	50                   	push   eax
c001a773:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a778:	50                   	push   eax
c001a779:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a77d:	e8 78 fe ff ff       	call   c001a5fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a782:	83 c4 2c             	add    esp,0x2c
c001a785:	c3                   	ret    

c001a786 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a786:	83 ec 18             	sub    esp,0x18
c001a789:	6a 3c                	push   0x3c
c001a78b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a790:	50                   	push   eax
c001a791:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a796:	50                   	push   eax
c001a797:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a79c:	50                   	push   eax
c001a79d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7a1:	e8 54 fe ff ff       	call   c001a5fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a7a6:	83 c4 2c             	add    esp,0x2c
c001a7a9:	c3                   	ret    

c001a7aa <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a7aa:	83 ec 18             	sub    esp,0x18
c001a7ad:	6a 18                	push   0x18
c001a7af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a7b4:	50                   	push   eax
c001a7b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a7ba:	50                   	push   eax
c001a7bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a7c0:	50                   	push   eax
c001a7c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7c5:	e8 30 fe ff ff       	call   c001a5fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a7ca:	83 c4 2c             	add    esp,0x2c
c001a7cd:	0f b6 c4             	movzx  eax,ah
c001a7d0:	c3                   	ret    
c001a7d1:	90                   	nop

c001a7d2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a7d2:	55                   	push   ebp
c001a7d3:	57                   	push   edi
c001a7d4:	56                   	push   esi
c001a7d5:	53                   	push   ebx
c001a7d6:	83 ec 28             	sub    esp,0x28
c001a7d9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a7dd:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a7e2:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a7e7:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001a7ec:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001a7f3:	8d 43 12             	lea    eax,[ebx+0x12]
c001a7f6:	83 c3 10             	add    ebx,0x10
c001a7f9:	0f b6 c0             	movzx  eax,al
c001a7fc:	0f b6 db             	movzx  ebx,bl
c001a7ff:	50                   	push   eax
c001a800:	51                   	push   ecx
c001a801:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001a805:	57                   	push   edi
c001a806:	55                   	push   ebp
c001a807:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a80b:	e8 ea fd ff ff       	call   c001a5fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a810:	83 c4 14             	add    esp,0x14
c001a813:	89 c6                	mov    esi,eax
c001a815:	53                   	push   ebx
c001a816:	c1 e6 10             	shl    esi,0x10
c001a819:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a81d:	51                   	push   ecx
c001a81e:	57                   	push   edi
c001a81f:	55                   	push   ebp
c001a820:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a824:	e8 d1 fd ff ff       	call   c001a5fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a829:	83 c4 3c             	add    esp,0x3c
c001a82c:	0f b7 c0             	movzx  eax,ax
c001a82f:	5b                   	pop    ebx
c001a830:	09 f0                	or     eax,esi
c001a832:	5e                   	pop    esi
c001a833:	5f                   	pop    edi
c001a834:	5d                   	pop    ebp
c001a835:	c3                   	ret    

c001a836 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a836:	55                   	push   ebp
c001a837:	57                   	push   edi
c001a838:	56                   	push   esi
c001a839:	53                   	push   ebx
c001a83a:	83 ec 0c             	sub    esp,0xc
c001a83d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a841:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a845:	89 f5                	mov    ebp,esi
c001a847:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001a84d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a851:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a855:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a859:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a85d:	83 f9 01             	cmp    ecx,0x1
c001a860:	75 5d                	jne    c001a8bf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001a862:	0f b6 c8             	movzx  ecx,al
c001a865:	0f b6 d2             	movzx  edx,dl
c001a868:	c1 e1 10             	shl    ecx,0x10
c001a86b:	c1 e2 0b             	shl    edx,0xb
c001a86e:	89 f0                	mov    eax,esi
c001a870:	25 fc 00 00 00       	and    eax,0xfc
c001a875:	09 c1                	or     ecx,eax
c001a877:	89 e8                	mov    eax,ebp
c001a879:	0f b6 c0             	movzx  eax,al
c001a87c:	c1 e0 08             	shl    eax,0x8
c001a87f:	09 c1                	or     ecx,eax
c001a881:	09 d1                	or     ecx,edx
c001a883:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a888:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a88e:	89 c8                	mov    eax,ecx
c001a890:	ef                   	out    dx,eax
c001a891:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a896:	ed                   	in     eax,dx
c001a897:	0f b7 db             	movzx  ebx,bx
c001a89a:	83 e6 02             	and    esi,0x2
c001a89d:	74 0a                	je     c001a8a9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001a89f:	0f b7 d0             	movzx  edx,ax
c001a8a2:	c1 e3 10             	shl    ebx,0x10
c001a8a5:	09 d3                	or     ebx,edx
c001a8a7:	eb 05                	jmp    c001a8ae <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001a8a9:	66 31 c0             	xor    ax,ax
c001a8ac:	09 c3                	or     ebx,eax
c001a8ae:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a8b3:	89 c8                	mov    eax,ecx
c001a8b5:	ef                   	out    dx,eax
c001a8b6:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a8bb:	89 d8                	mov    eax,ebx
c001a8bd:	eb 41                	jmp    c001a900 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001a8bf:	83 f9 02             	cmp    ecx,0x2
c001a8c2:	75 45                	jne    c001a909 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001a8c4:	83 ec 0c             	sub    esp,0xc
c001a8c7:	0f b6 d2             	movzx  edx,dl
c001a8ca:	89 f1                	mov    ecx,esi
c001a8cc:	0f b6 c0             	movzx  eax,al
c001a8cf:	0f b6 f1             	movzx  esi,cl
c001a8d2:	89 e9                	mov    ecx,ebp
c001a8d4:	56                   	push   esi
c001a8d5:	0f b6 c9             	movzx  ecx,cl
c001a8d8:	51                   	push   ecx
c001a8d9:	52                   	push   edx
c001a8da:	50                   	push   eax
c001a8db:	57                   	push   edi
c001a8dc:	e8 a3 fc ff ff       	call   c001a584 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a8e1:	89 c2                	mov    edx,eax
c001a8e3:	ed                   	in     eax,dx
c001a8e4:	83 c4 20             	add    esp,0x20
c001a8e7:	0f b7 db             	movzx  ebx,bx
c001a8ea:	f6 c2 02             	test   dl,0x2
c001a8ed:	74 0c                	je     c001a8fb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001a8ef:	0f b7 c8             	movzx  ecx,ax
c001a8f2:	89 d8                	mov    eax,ebx
c001a8f4:	c1 e0 10             	shl    eax,0x10
c001a8f7:	09 c8                	or     eax,ecx
c001a8f9:	eb 05                	jmp    c001a900 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001a8fb:	66 31 c0             	xor    ax,ax
c001a8fe:	09 d8                	or     eax,ebx
c001a900:	ef                   	out    dx,eax
c001a901:	83 c4 0c             	add    esp,0xc
c001a904:	5b                   	pop    ebx
c001a905:	5e                   	pop    esi
c001a906:	5f                   	pop    edi
c001a907:	5d                   	pop    ebp
c001a908:	c3                   	ret    
c001a909:	c7 44 24 20 13 22 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022213
c001a911:	83 c4 0c             	add    esp,0xc
c001a914:	5b                   	pop    ebx
c001a915:	5e                   	pop    esi
c001a916:	5f                   	pop    edi
c001a917:	5d                   	pop    ebp
c001a918:	e9 be 62 ff ff       	jmp    c0010bdb <KePanic(char const*)>
c001a91d:	90                   	nop

c001a91e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a91e:	55                   	push   ebp
c001a91f:	57                   	push   edi
c001a920:	56                   	push   esi
c001a921:	53                   	push   ebx
c001a922:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001a928:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001a92f:	80 3d 4c 9b 02 c0 00 	cmp    BYTE PTR ds:0xc0029b4c,0x0
c001a936:	0f 85 bd 00 00 00    	jne    c001a9f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a93c:	83 ec 0c             	sub    esp,0xc
c001a93f:	68 14 01 00 00       	push   0x114
c001a944:	e8 65 d1 fe ff       	call   c0007aae <malloc>
c001a949:	83 c4 0c             	add    esp,0xc
c001a94c:	89 c3                	mov    ebx,eax
c001a94e:	ff 35 90 91 02 c0    	push   DWORD PTR ds:0xc0029190
c001a954:	68 19 22 02 c0       	push   0xc0022219
c001a959:	50                   	push   eax
c001a95a:	e8 71 08 ff ff       	call   c000b1d0 <File::File(char const*, Process*)>
c001a95f:	83 c4 10             	add    esp,0x10
c001a962:	85 db                	test   ebx,ebx
c001a964:	0f 84 67 02 00 00    	je     c001abd1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a96a:	56                   	push   esi
c001a96b:	56                   	push   esi
c001a96c:	6a 01                	push   0x1
c001a96e:	53                   	push   ebx
c001a96f:	e8 18 09 ff ff       	call   c000b28c <File::open(FileOpenMode)>
c001a974:	83 c4 10             	add    esp,0x10
c001a977:	85 c0                	test   eax,eax
c001a979:	0f 85 52 02 00 00    	jne    c001abd1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a97f:	52                   	push   edx
c001a980:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001a984:	50                   	push   eax
c001a985:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a989:	50                   	push   eax
c001a98a:	53                   	push   ebx
c001a98b:	e8 a8 0b ff ff       	call   c000b538 <File::stat(unsigned long long*, bool*)>
c001a990:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a994:	40                   	inc    eax
c001a995:	89 04 24             	mov    DWORD PTR [esp],eax
c001a998:	e8 11 d1 fe ff       	call   c0007aae <malloc>
c001a99d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a9a1:	a3 48 9b 02 c0       	mov    ds:0xc0029b48,eax
c001a9a6:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a9aa:	59                   	pop    ecx
c001a9ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a9ad:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001a9b1:	51                   	push   ecx
c001a9b2:	50                   	push   eax
c001a9b3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a9b7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a9bb:	53                   	push   ebx
c001a9bc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a9bf:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001a9c3:	83 c4 20             	add    esp,0x20
c001a9c6:	89 c8                	mov    eax,ecx
c001a9c8:	99                   	cdq    
c001a9c9:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001a9cd:	0f 85 fe 01 00 00    	jne    c001abd1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a9d3:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001a9d7:	0f 85 f4 01 00 00    	jne    c001abd1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a9dd:	83 ec 0c             	sub    esp,0xc
c001a9e0:	53                   	push   ebx
c001a9e1:	e8 04 09 ff ff       	call   c000b2ea <File::close()>
c001a9e6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a9ea:	c6 05 4c 9b 02 c0 01 	mov    BYTE PTR ds:0xc0029b4c,0x1
c001a9f1:	a3 44 9b 02 c0       	mov    ds:0xc0029b44,eax
c001a9f6:	83 c4 10             	add    esp,0x10
c001a9f9:	a1 44 9b 02 c0       	mov    eax,ds:0xc0029b44
c001a9fe:	8b 1d 48 9b 02 c0    	mov    ebx,DWORD PTR ds:0xc0029b48
c001aa04:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa08:	31 f6                	xor    esi,esi
c001aa0a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001aa12:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001aa19:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001aa1e:	31 c9                	xor    ecx,ecx
c001aa20:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001aa28:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001aa2d:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001aa35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aa39:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001aa41:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001aa45:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001aa49:	0f 8e 82 01 00 00    	jle    c001abd1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001aa4f:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001aa52:	d4 40                	aam    0x40
c001aa54:	d5 39                	aad    0x39
c001aa56:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001aa5a:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001aa5e:	d4 40                	aam    0x40
c001aa60:	d5 39                	aad    0x39
c001aa62:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001aa66:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001aa6a:	d4 40                	aam    0x40
c001aa6c:	d5 39                	aad    0x39
c001aa6e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001aa72:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001aa76:	d4 40                	aam    0x40
c001aa78:	d5 39                	aad    0x39
c001aa7a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001aa7e:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001aa82:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001aa86:	3c 56                	cmp    al,0x56
c001aa88:	74 43                	je     c001aacd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001aa8a:	d4 40                	aam    0x40
c001aa8c:	d5 39                	aad    0x39
c001aa8e:	8d 48 d0             	lea    ecx,[eax-0x30]
c001aa91:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001aa95:	0f b6 c9             	movzx  ecx,cl
c001aa98:	c1 e1 04             	shl    ecx,0x4
c001aa9b:	d4 40                	aam    0x40
c001aa9d:	d5 39                	aad    0x39
c001aa9f:	83 e8 30             	sub    eax,0x30
c001aaa2:	0f b6 c0             	movzx  eax,al
c001aaa5:	09 c1                	or     ecx,eax
c001aaa7:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001aaab:	c1 e1 04             	shl    ecx,0x4
c001aaae:	d4 40                	aam    0x40
c001aab0:	d5 39                	aad    0x39
c001aab2:	83 e8 30             	sub    eax,0x30
c001aab5:	0f b6 c0             	movzx  eax,al
c001aab8:	09 c1                	or     ecx,eax
c001aaba:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001aabe:	c1 e1 04             	shl    ecx,0x4
c001aac1:	d4 40                	aam    0x40
c001aac3:	d5 39                	aad    0x39
c001aac5:	83 e8 30             	sub    eax,0x30
c001aac8:	0f b6 c0             	movzx  eax,al
c001aacb:	09 c1                	or     ecx,eax
c001aacd:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001aad1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001aad5:	3c 58                	cmp    al,0x58
c001aad7:	74 47                	je     c001ab20 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001aad9:	d4 40                	aam    0x40
c001aadb:	d5 39                	aad    0x39
c001aadd:	8d 50 d0             	lea    edx,[eax-0x30]
c001aae0:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001aae4:	0f b6 d2             	movzx  edx,dl
c001aae7:	c1 e2 04             	shl    edx,0x4
c001aaea:	d4 40                	aam    0x40
c001aaec:	d5 39                	aad    0x39
c001aaee:	83 e8 30             	sub    eax,0x30
c001aaf1:	0f b6 c0             	movzx  eax,al
c001aaf4:	09 c2                	or     edx,eax
c001aaf6:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001aafa:	c1 e2 04             	shl    edx,0x4
c001aafd:	d4 40                	aam    0x40
c001aaff:	d5 39                	aad    0x39
c001ab01:	83 e8 30             	sub    eax,0x30
c001ab04:	0f b6 c0             	movzx  eax,al
c001ab07:	09 c2                	or     edx,eax
c001ab09:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001ab0d:	c1 e2 04             	shl    edx,0x4
c001ab10:	d4 40                	aam    0x40
c001ab12:	d5 39                	aad    0x39
c001ab14:	83 e8 30             	sub    eax,0x30
c001ab17:	0f b6 c0             	movzx  eax,al
c001ab1a:	09 c2                	or     edx,eax
c001ab1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ab20:	83 c6 10             	add    esi,0x10
c001ab23:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001ab27:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001ab2b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ab2f:	83 fa 0a             	cmp    edx,0xa
c001ab32:	74 0b                	je     c001ab3f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001ab34:	47                   	inc    edi
c001ab35:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001ab39:	75 19                	jne    c001ab54 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001ab3b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001ab3f:	31 c0                	xor    eax,eax
c001ab41:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001ab46:	0f 94 c0             	sete   al
c001ab49:	01 c6                	add    esi,eax
c001ab4b:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001ab50:	75 0b                	jne    c001ab5d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001ab52:	eb 14                	jmp    c001ab68 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001ab54:	46                   	inc    esi
c001ab55:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001ab58:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001ab5b:	eb ca                	jmp    c001ab27 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001ab5d:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001ab62:	0f 85 dd fe ff ff    	jne    c001aa45 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ab68:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001ab6d:	74 10                	je     c001ab7f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001ab6f:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001ab74:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001ab79:	0f 85 c6 fe ff ff    	jne    c001aa45 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ab7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab83:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ab87:	83 e8 30             	sub    eax,0x30
c001ab8a:	83 ef 30             	sub    edi,0x30
c001ab8d:	c1 e0 04             	shl    eax,0x4
c001ab90:	09 f8                	or     eax,edi
c001ab92:	0f b6 c0             	movzx  eax,al
c001ab95:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001ab99:	0f 85 a6 fe ff ff    	jne    c001aa45 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001ab9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aba3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001aba7:	83 e8 30             	sub    eax,0x30
c001abaa:	83 ef 30             	sub    edi,0x30
c001abad:	c1 e0 04             	shl    eax,0x4
c001abb0:	09 f8                	or     eax,edi
c001abb2:	0f b6 c0             	movzx  eax,al
c001abb5:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001abb9:	0f 85 86 fe ff ff    	jne    c001aa45 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001abbf:	50                   	push   eax
c001abc0:	50                   	push   eax
c001abc1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001abc5:	50                   	push   eax
c001abc6:	55                   	push   ebp
c001abc7:	e8 74 5a fe ff       	call   c0000640 <strcpy>
c001abcc:	83 c4 10             	add    esp,0x10
c001abcf:	eb 06                	jmp    c001abd7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001abd1:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001abd5:	31 ed                	xor    ebp,ebp
c001abd7:	81 c4 4c 01 00 00    	add    esp,0x14c
c001abdd:	89 e8                	mov    eax,ebp
c001abdf:	5b                   	pop    ebx
c001abe0:	5e                   	pop    esi
c001abe1:	5f                   	pop    edi
c001abe2:	5d                   	pop    ebp
c001abe3:	c3                   	ret    

c001abe4 <PCI::checkBus(unsigned char)>:
c001abe4:	56                   	push   esi
c001abe5:	53                   	push   ebx
c001abe6:	31 db                	xor    ebx,ebx
c001abe8:	51                   	push   ecx
c001abe9:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001abee:	52                   	push   edx
c001abef:	53                   	push   ebx
c001abf0:	43                   	inc    ebx
c001abf1:	56                   	push   esi
c001abf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abf6:	e8 03 03 00 00       	call   c001aefe <PCI::checkDevice(unsigned char, unsigned char)>
c001abfb:	83 c4 10             	add    esp,0x10
c001abfe:	83 fb 20             	cmp    ebx,0x20
c001ac01:	75 eb                	jne    c001abee <PCI::checkBus(unsigned char)+0xa>
c001ac03:	58                   	pop    eax
c001ac04:	5b                   	pop    ebx
c001ac05:	5e                   	pop    esi
c001ac06:	c3                   	ret    
c001ac07:	90                   	nop

c001ac08 <PCI::foundDevice(PCIDeviceInfo)>:
c001ac08:	55                   	push   ebp
c001ac09:	57                   	push   edi
c001ac0a:	56                   	push   esi
c001ac0b:	53                   	push   ebx
c001ac0c:	83 ec 1c             	sub    esp,0x1c
c001ac0f:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001ac14:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ac18:	3d ff ff 00 00       	cmp    eax,0xffff
c001ac1d:	0f 84 57 01 00 00    	je     c001ad7a <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001ac23:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001ac28:	66 3d 06 04          	cmp    ax,0x406
c001ac2c:	75 2c                	jne    c001ac5a <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001ac2e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001ac33:	50                   	push   eax
c001ac34:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001ac39:	50                   	push   eax
c001ac3a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001ac3f:	50                   	push   eax
c001ac40:	53                   	push   ebx
c001ac41:	e8 64 fb ff ff       	call   c001a7aa <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001ac46:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001ac4a:	0f b6 c0             	movzx  eax,al
c001ac4d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ac51:	83 c4 2c             	add    esp,0x2c
c001ac54:	5b                   	pop    ebx
c001ac55:	5e                   	pop    esi
c001ac56:	5f                   	pop    edi
c001ac57:	5d                   	pop    ebp
c001ac58:	eb 8a                	jmp    c001abe4 <PCI::checkBus(unsigned char)>
c001ac5a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ac5e:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001ac64:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ac68:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ac6c:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001ac71:	85 d2                	test   edx,edx
c001ac73:	74 36                	je     c001acab <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001ac75:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ac78:	85 c9                	test   ecx,ecx
c001ac7a:	74 2b                	je     c001aca7 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001ac7c:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001ac82:	31 ee                	xor    esi,ebp
c001ac84:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001ac8a:	75 1b                	jne    c001aca7 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001ac8c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001ac90:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001ac96:	75 0f                	jne    c001aca7 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001ac98:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001ac9f:	39 f9                	cmp    ecx,edi
c001aca1:	0f 84 d3 00 00 00    	je     c001ad7a <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001aca7:	8b 12                	mov    edx,DWORD PTR [edx]
c001aca9:	eb c6                	jmp    c001ac71 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001acab:	3d 01 06 00 00       	cmp    eax,0x601
c001acb0:	75 19                	jne    c001accb <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001acb2:	83 ec 0c             	sub    esp,0xc
c001acb5:	68 64 01 00 00       	push   0x164
c001acba:	e8 ef cd fe ff       	call   c0007aae <malloc>
c001acbf:	89 c5                	mov    ebp,eax
c001acc1:	89 04 24             	mov    DWORD PTR [esp],eax
c001acc4:	e8 a1 0e 00 00       	call   c001bb6a <SATABus::SATABus()>
c001acc9:	eb 1e                	jmp    c001ace9 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001accb:	3d 01 01 00 00       	cmp    eax,0x101
c001acd0:	75 62                	jne    c001ad34 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001acd2:	83 ec 0c             	sub    esp,0xc
c001acd5:	68 70 02 00 00       	push   0x270
c001acda:	e8 cf cd fe ff       	call   c0007aae <malloc>
c001acdf:	89 c5                	mov    ebp,eax
c001ace1:	89 04 24             	mov    DWORD PTR [esp],eax
c001ace4:	e8 e5 02 00 00       	call   c001afce <IDE::IDE()>
c001ace9:	5f                   	pop    edi
c001acea:	58                   	pop    eax
c001aceb:	55                   	push   ebp
c001acec:	53                   	push   ebx
c001aced:	e8 90 13 ff ff       	call   c000c082 <Device::addChild(Device*)>
c001acf2:	83 ec 1c             	sub    esp,0x1c
c001acf5:	b9 09 00 00 00       	mov    ecx,0x9
c001acfa:	fc                   	cld    
c001acfb:	89 e7                	mov    edi,esp
c001acfd:	8d 74 24 60          	lea    esi,[esp+0x60]
c001ad01:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ad03:	55                   	push   ebp
c001ad04:	e8 bf 12 ff ff       	call   c000bfc8 <Device::preOpenPCI(PCIDeviceInfo)>
c001ad09:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ad0c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001ad10:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001ad18:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001ad20:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001ad28:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001ad2b:	83 c4 4c             	add    esp,0x4c
c001ad2e:	5b                   	pop    ebx
c001ad2f:	5e                   	pop    esi
c001ad30:	5f                   	pop    edi
c001ad31:	5d                   	pop    ebp
c001ad32:	ff e0                	jmp    eax
c001ad34:	83 ec 0c             	sub    esp,0xc
c001ad37:	68 58 01 00 00       	push   0x158
c001ad3c:	e8 6d cd fe ff       	call   c0007aae <malloc>
c001ad41:	89 c5                	mov    ebp,eax
c001ad43:	58                   	pop    eax
c001ad44:	5a                   	pop    edx
c001ad45:	68 32 22 02 c0       	push   0xc0022232
c001ad4a:	55                   	push   ebp
c001ad4b:	e8 d0 15 ff ff       	call   c000c320 <DriverlessDevice::DriverlessDevice(char const*)>
c001ad50:	59                   	pop    ecx
c001ad51:	5e                   	pop    esi
c001ad52:	55                   	push   ebp
c001ad53:	53                   	push   ebx
c001ad54:	e8 29 13 ff ff       	call   c000c082 <Device::addChild(Device*)>
c001ad59:	83 c4 10             	add    esp,0x10
c001ad5c:	b9 09 00 00 00       	mov    ecx,0x9
c001ad61:	fc                   	cld    
c001ad62:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001ad66:	89 fe                	mov    esi,edi
c001ad68:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ad6a:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001ad6e:	83 c4 1c             	add    esp,0x1c
c001ad71:	5b                   	pop    ebx
c001ad72:	5e                   	pop    esi
c001ad73:	5f                   	pop    edi
c001ad74:	5d                   	pop    ebp
c001ad75:	e9 4e 12 ff ff       	jmp    c000bfc8 <Device::preOpenPCI(PCIDeviceInfo)>
c001ad7a:	83 c4 1c             	add    esp,0x1c
c001ad7d:	5b                   	pop    ebx
c001ad7e:	5e                   	pop    esi
c001ad7f:	5f                   	pop    edi
c001ad80:	5d                   	pop    ebp
c001ad81:	c3                   	ret    

c001ad82 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001ad82:	55                   	push   ebp
c001ad83:	57                   	push   edi
c001ad84:	56                   	push   esi
c001ad85:	53                   	push   ebx
c001ad86:	83 ec 68             	sub    esp,0x68
c001ad89:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001ad8d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ad94:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ad98:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ad9f:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001ada4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ada8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001adaf:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001adb4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001adb8:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001adbd:	6a 0c                	push   0xc
c001adbf:	57                   	push   edi
c001adc0:	53                   	push   ebx
c001adc1:	56                   	push   esi
c001adc2:	55                   	push   ebp
c001adc3:	e8 32 f8 ff ff       	call   c001a5fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001adc8:	83 c4 20             	add    esp,0x20
c001adcb:	57                   	push   edi
c001adcc:	53                   	push   ebx
c001adcd:	56                   	push   esi
c001adce:	55                   	push   ebp
c001adcf:	e8 1c f9 ff ff       	call   c001a6f0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001add4:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001add9:	57                   	push   edi
c001adda:	53                   	push   ebx
c001addb:	56                   	push   esi
c001addc:	55                   	push   ebp
c001addd:	e8 a4 f9 ff ff       	call   c001a786 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001ade2:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ade6:	83 c4 14             	add    esp,0x14
c001ade9:	6a 3c                	push   0x3c
c001adeb:	57                   	push   edi
c001adec:	53                   	push   ebx
c001aded:	56                   	push   esi
c001adee:	55                   	push   ebp
c001adef:	e8 06 f8 ff ff       	call   c001a5fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001adf4:	0f b6 c4             	movzx  eax,ah
c001adf7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001adfb:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001adff:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001ae03:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001ae08:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001ae0e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001ae14:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ae18:	83 c4 20             	add    esp,0x20
c001ae1b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001ae20:	74 30                	je     c001ae52 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001ae22:	31 c0                	xor    eax,eax
c001ae24:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ae28:	7e 28                	jle    c001ae52 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001ae2a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001ae32:	39 cb                	cmp    ebx,ecx
c001ae34:	75 19                	jne    c001ae4f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001ae36:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001ae3e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001ae42:	75 0b                	jne    c001ae4f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001ae44:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001ae4b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001ae4f:	40                   	inc    eax
c001ae50:	eb d2                	jmp    c001ae24 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001ae52:	31 d2                	xor    edx,edx
c001ae54:	83 ec 0c             	sub    esp,0xc
c001ae57:	57                   	push   edi
c001ae58:	53                   	push   ebx
c001ae59:	56                   	push   esi
c001ae5a:	52                   	push   edx
c001ae5b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001ae5f:	55                   	push   ebp
c001ae60:	e8 6d f9 ff ff       	call   c001a7d2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae65:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ae69:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001ae6d:	42                   	inc    edx
c001ae6e:	83 c4 20             	add    esp,0x20
c001ae71:	83 fa 06             	cmp    edx,0x6
c001ae74:	75 de                	jne    c001ae54 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001ae76:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae7e:	c1 e2 08             	shl    edx,0x8
c001ae81:	83 ec 0c             	sub    esp,0xc
c001ae84:	0f b6 c4             	movzx  eax,ah
c001ae87:	09 d0                	or     eax,edx
c001ae89:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001ae8e:	6a 02                	push   0x2
c001ae90:	57                   	push   edi
c001ae91:	53                   	push   ebx
c001ae92:	56                   	push   esi
c001ae93:	55                   	push   ebp
c001ae94:	e8 61 f7 ff ff       	call   c001a5fa <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae99:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001ae9e:	83 c4 20             	add    esp,0x20
c001aea1:	57                   	push   edi
c001aea2:	53                   	push   ebx
c001aea3:	56                   	push   esi
c001aea4:	55                   	push   ebp
c001aea5:	e8 90 f8 ff ff       	call   c001a73a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001aeaa:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001aeae:	57                   	push   edi
c001aeaf:	53                   	push   ebx
c001aeb0:	56                   	push   esi
c001aeb1:	55                   	push   ebp
c001aeb2:	e8 ed f7 ff ff       	call   c001a6a4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aeb7:	b9 09 00 00 00       	mov    ecx,0x9
c001aebc:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001aec1:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001aec5:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001aec9:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001aecd:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001aed1:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001aed5:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001aed9:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001aedd:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001aee1:	83 ec 0c             	sub    esp,0xc
c001aee4:	fc                   	cld    
c001aee5:	89 e7                	mov    edi,esp
c001aee7:	8d 74 24 58          	lea    esi,[esp+0x58]
c001aeeb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001aeed:	55                   	push   ebp
c001aeee:	e8 15 fd ff ff       	call   c001ac08 <PCI::foundDevice(PCIDeviceInfo)>
c001aef3:	81 c4 8c 00 00 00    	add    esp,0x8c
c001aef9:	5b                   	pop    ebx
c001aefa:	5e                   	pop    esi
c001aefb:	5f                   	pop    edi
c001aefc:	5d                   	pop    ebp
c001aefd:	c3                   	ret    

c001aefe <PCI::checkDevice(unsigned char, unsigned char)>:
c001aefe:	55                   	push   ebp
c001aeff:	57                   	push   edi
c001af00:	56                   	push   esi
c001af01:	53                   	push   ebx
c001af02:	83 ec 0c             	sub    esp,0xc
c001af05:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001af09:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001af0e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001af13:	6a 00                	push   0x0
c001af15:	56                   	push   esi
c001af16:	57                   	push   edi
c001af17:	55                   	push   ebp
c001af18:	e8 87 f7 ff ff       	call   c001a6a4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001af1d:	6a 00                	push   0x0
c001af1f:	56                   	push   esi
c001af20:	57                   	push   edi
c001af21:	55                   	push   ebp
c001af22:	e8 5b fe ff ff       	call   c001ad82 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001af27:	83 c4 20             	add    esp,0x20
c001af2a:	6a 00                	push   0x0
c001af2c:	56                   	push   esi
c001af2d:	57                   	push   edi
c001af2e:	55                   	push   ebp
c001af2f:	e8 94 f7 ff ff       	call   c001a6c8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001af34:	83 c4 10             	add    esp,0x10
c001af37:	a8 80                	test   al,0x80
c001af39:	74 2d                	je     c001af68 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001af3b:	bb 01 00 00 00       	mov    ebx,0x1
c001af40:	53                   	push   ebx
c001af41:	56                   	push   esi
c001af42:	57                   	push   edi
c001af43:	55                   	push   ebp
c001af44:	e8 5b f7 ff ff       	call   c001a6a4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001af49:	83 c4 10             	add    esp,0x10
c001af4c:	0f b7 c0             	movzx  eax,ax
c001af4f:	3d ff ff 00 00       	cmp    eax,0xffff
c001af54:	74 0c                	je     c001af62 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001af56:	53                   	push   ebx
c001af57:	56                   	push   esi
c001af58:	57                   	push   edi
c001af59:	55                   	push   ebp
c001af5a:	e8 23 fe ff ff       	call   c001ad82 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001af5f:	83 c4 10             	add    esp,0x10
c001af62:	43                   	inc    ebx
c001af63:	83 fb 08             	cmp    ebx,0x8
c001af66:	75 d8                	jne    c001af40 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001af68:	83 c4 0c             	add    esp,0xc
c001af6b:	5b                   	pop    ebx
c001af6c:	5e                   	pop    esi
c001af6d:	5f                   	pop    edi
c001af6e:	5d                   	pop    ebp
c001af6f:	c3                   	ret    

c001af70 <PCI::detect()>:
c001af70:	56                   	push   esi
c001af71:	53                   	push   ebx
c001af72:	53                   	push   ebx
c001af73:	31 db                	xor    ebx,ebx
c001af75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af79:	6a 00                	push   0x0
c001af7b:	6a 00                	push   0x0
c001af7d:	6a 00                	push   0x0
c001af7f:	56                   	push   esi
c001af80:	e8 43 f7 ff ff       	call   c001a6c8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001af85:	83 c4 10             	add    esp,0x10
c001af88:	a8 80                	test   al,0x80
c001af8a:	75 21                	jne    c001afad <PCI::detect()+0x3d>
c001af8c:	51                   	push   ecx
c001af8d:	51                   	push   ecx
c001af8e:	6a 00                	push   0x0
c001af90:	56                   	push   esi
c001af91:	e8 4e fc ff ff       	call   c001abe4 <PCI::checkBus(unsigned char)>
c001af96:	83 c4 10             	add    esp,0x10
c001af99:	eb 2a                	jmp    c001afc5 <PCI::detect()+0x55>
c001af9b:	52                   	push   edx
c001af9c:	52                   	push   edx
c001af9d:	53                   	push   ebx
c001af9e:	43                   	inc    ebx
c001af9f:	56                   	push   esi
c001afa0:	e8 3f fc ff ff       	call   c001abe4 <PCI::checkBus(unsigned char)>
c001afa5:	83 c4 10             	add    esp,0x10
c001afa8:	83 fb 08             	cmp    ebx,0x8
c001afab:	74 18                	je     c001afc5 <PCI::detect()+0x55>
c001afad:	53                   	push   ebx
c001afae:	6a 00                	push   0x0
c001afb0:	6a 00                	push   0x0
c001afb2:	56                   	push   esi
c001afb3:	e8 ec f6 ff ff       	call   c001a6a4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001afb8:	83 c4 10             	add    esp,0x10
c001afbb:	0f b7 c0             	movzx  eax,ax
c001afbe:	3d ff ff 00 00       	cmp    eax,0xffff
c001afc3:	74 d6                	je     c001af9b <PCI::detect()+0x2b>
c001afc5:	58                   	pop    eax
c001afc6:	5b                   	pop    ebx
c001afc7:	5e                   	pop    esi
c001afc8:	c3                   	ret    
c001afc9:	90                   	nop

c001afca <IDE::close(int, int, void*)>:
c001afca:	83 c8 ff             	or     eax,0xffffffff
c001afcd:	c3                   	ret    

c001afce <IDE::IDE()>:
c001afce:	83 ec 0c             	sub    esp,0xc
c001afd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afd5:	83 ec 08             	sub    esp,0x8
c001afd8:	68 78 22 02 c0       	push   0xc0022278
c001afdd:	50                   	push   eax
c001afde:	e8 e1 13 ff ff       	call   c000c3c4 <HardDiskController::HardDiskController(char const*)>
c001afe3:	83 c4 10             	add    esp,0x10
c001afe6:	ba 08 23 02 c0       	mov    edx,0xc0022308
c001afeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afef:	89 10                	mov    DWORD PTR [eax],edx
c001aff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aff5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001affc:	90                   	nop
c001affd:	83 c4 0c             	add    esp,0xc
c001b000:	c3                   	ret    
c001b001:	90                   	nop

c001b002 <IDE::prepareInterrupt(unsigned char)>:
c001b002:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b007:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b00b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b013:	c3                   	ret    

c001b014 <selectDrive(unsigned char, unsigned char)>:
c001b014:	c3                   	ret    
c001b015:	90                   	nop

c001b016 <IDE::getBase(unsigned char)>:
c001b016:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b01b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b01f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b027:	c3                   	ret    

c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b028:	55                   	push   ebp
c001b029:	57                   	push   edi
c001b02a:	56                   	push   esi
c001b02b:	53                   	push   ebx
c001b02c:	83 ec 1c             	sub    esp,0x1c
c001b02f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b033:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b037:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b03a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b03e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b042:	80 f9 03             	cmp    cl,0x3
c001b045:	77 4f                	ja     c001b096 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b047:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b04b:	0f b6 fa             	movzx  edi,dl
c001b04e:	0f b6 db             	movzx  ebx,bl
c001b051:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b054:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b059:	80 ca 80             	or     dl,0x80
c001b05c:	52                   	push   edx
c001b05d:	6a 0c                	push   0xc
c001b05f:	57                   	push   edi
c001b060:	56                   	push   esi
c001b061:	e8 c2 ff ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b066:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001b06b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b06f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b073:	ee                   	out    dx,al
c001b074:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b079:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001b07d:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b081:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b085:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b08d:	83 c4 2c             	add    esp,0x2c
c001b090:	5b                   	pop    ebx
c001b091:	5e                   	pop    esi
c001b092:	5f                   	pop    edi
c001b093:	5d                   	pop    ebp
c001b094:	eb 92                	jmp    c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b096:	0f b6 cb             	movzx  ecx,bl
c001b099:	83 f9 07             	cmp    ecx,0x7
c001b09c:	77 12                	ja     c001b0b0 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b09e:	0f b6 d2             	movzx  edx,dl
c001b0a1:	0f b6 db             	movzx  ebx,bl
c001b0a4:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001b0ac:	01 da                	add    edx,ebx
c001b0ae:	eb 2f                	jmp    c001b0df <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b0b0:	83 f9 0d             	cmp    ecx,0xd
c001b0b3:	77 13                	ja     c001b0c8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b0b5:	0f b6 d2             	movzx  edx,dl
c001b0b8:	0f b6 db             	movzx  ebx,bl
c001b0bb:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001b0c2:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b0c6:	eb 17                	jmp    c001b0df <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b0c8:	83 f9 15             	cmp    ecx,0x15
c001b0cb:	77 13                	ja     c001b0e0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b0cd:	0f b6 d2             	movzx  edx,dl
c001b0d0:	0f b6 db             	movzx  ebx,bl
c001b0d3:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001b0db:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b0df:	ee                   	out    dx,al
c001b0e0:	83 c4 1c             	add    esp,0x1c
c001b0e3:	5b                   	pop    ebx
c001b0e4:	5e                   	pop    esi
c001b0e5:	5f                   	pop    edi
c001b0e6:	5d                   	pop    ebp
c001b0e7:	c3                   	ret    

c001b0e8 <IDE::read(unsigned char, unsigned char)>:
c001b0e8:	55                   	push   ebp
c001b0e9:	57                   	push   edi
c001b0ea:	56                   	push   esi
c001b0eb:	53                   	push   ebx
c001b0ec:	83 ec 1c             	sub    esp,0x1c
c001b0ef:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b0f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b0f7:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b0fa:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b0fe:	3c 03                	cmp    al,0x3
c001b100:	77 40                	ja     c001b142 <IDE::read(unsigned char, unsigned char)+0x5a>
c001b102:	0f b6 f9             	movzx  edi,cl
c001b105:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b108:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b10d:	0c 80                	or     al,0x80
c001b10f:	50                   	push   eax
c001b110:	6a 0c                	push   0xc
c001b112:	57                   	push   edi
c001b113:	56                   	push   esi
c001b114:	e8 0f ff ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b119:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b11e:	0f b6 d3             	movzx  edx,bl
c001b121:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b125:	ec                   	in     al,dx
c001b126:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b12a:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b12f:	52                   	push   edx
c001b130:	6a 0c                	push   0xc
c001b132:	57                   	push   edi
c001b133:	56                   	push   esi
c001b134:	e8 ef fe ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b139:	83 c4 20             	add    esp,0x20
c001b13c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b140:	eb 4c                	jmp    c001b18e <IDE::read(unsigned char, unsigned char)+0xa6>
c001b142:	0f b6 d3             	movzx  edx,bl
c001b145:	83 fa 07             	cmp    edx,0x7
c001b148:	77 12                	ja     c001b15c <IDE::read(unsigned char, unsigned char)+0x74>
c001b14a:	0f b6 c9             	movzx  ecx,cl
c001b14d:	0f b6 d3             	movzx  edx,bl
c001b150:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001b158:	01 c2                	add    edx,eax
c001b15a:	eb 31                	jmp    c001b18d <IDE::read(unsigned char, unsigned char)+0xa5>
c001b15c:	83 fa 0d             	cmp    edx,0xd
c001b15f:	77 13                	ja     c001b174 <IDE::read(unsigned char, unsigned char)+0x8c>
c001b161:	0f b6 c9             	movzx  ecx,cl
c001b164:	0f b6 d3             	movzx  edx,bl
c001b167:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001b16e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b172:	eb 19                	jmp    c001b18d <IDE::read(unsigned char, unsigned char)+0xa5>
c001b174:	31 c0                	xor    eax,eax
c001b176:	83 fa 15             	cmp    edx,0x15
c001b179:	77 13                	ja     c001b18e <IDE::read(unsigned char, unsigned char)+0xa6>
c001b17b:	0f b6 c9             	movzx  ecx,cl
c001b17e:	0f b6 d3             	movzx  edx,bl
c001b181:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001b189:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b18d:	ec                   	in     al,dx
c001b18e:	83 c4 1c             	add    esp,0x1c
c001b191:	5b                   	pop    ebx
c001b192:	5e                   	pop    esi
c001b193:	5f                   	pop    edi
c001b194:	5d                   	pop    ebp
c001b195:	c3                   	ret    

c001b196 <IDE::waitInterrupt(unsigned char)>:
c001b196:	55                   	push   ebp
c001b197:	57                   	push   edi
c001b198:	56                   	push   esi
c001b199:	53                   	push   ebx
c001b19a:	31 db                	xor    ebx,ebx
c001b19c:	83 ec 0c             	sub    esp,0xc
c001b19f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b1a3:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b1a8:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b1b0:	89 e8                	mov    eax,ebp
c001b1b2:	84 c0                	test   al,al
c001b1b4:	75 30                	jne    c001b1e6 <IDE::waitInterrupt(unsigned char)+0x50>
c001b1b6:	50                   	push   eax
c001b1b7:	6a 0c                	push   0xc
c001b1b9:	56                   	push   esi
c001b1ba:	57                   	push   edi
c001b1bb:	e8 28 ff ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001b1c0:	83 c4 10             	add    esp,0x10
c001b1c3:	a8 01                	test   al,0x1
c001b1c5:	75 27                	jne    c001b1ee <IDE::waitInterrupt(unsigned char)+0x58>
c001b1c7:	f6 c3 04             	test   bl,0x4
c001b1ca:	75 12                	jne    c001b1de <IDE::waitInterrupt(unsigned char)+0x48>
c001b1cc:	83 fb 32             	cmp    ebx,0x32
c001b1cf:	7e 0d                	jle    c001b1de <IDE::waitInterrupt(unsigned char)+0x48>
c001b1d1:	83 ec 0c             	sub    esp,0xc
c001b1d4:	6a 64                	push   0x64
c001b1d6:	e8 21 a5 ff ff       	call   c00156fc <milliTenthSleep(unsigned int)>
c001b1db:	83 c4 10             	add    esp,0x10
c001b1de:	83 fb 3c             	cmp    ebx,0x3c
c001b1e1:	74 0b                	je     c001b1ee <IDE::waitInterrupt(unsigned char)+0x58>
c001b1e3:	43                   	inc    ebx
c001b1e4:	eb c2                	jmp    c001b1a8 <IDE::waitInterrupt(unsigned char)+0x12>
c001b1e6:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b1ee:	83 c4 0c             	add    esp,0xc
c001b1f1:	89 e8                	mov    eax,ebp
c001b1f3:	5b                   	pop    ebx
c001b1f4:	5e                   	pop    esi
c001b1f5:	5f                   	pop    edi
c001b1f6:	5d                   	pop    ebp
c001b1f7:	c3                   	ret    

c001b1f8 <ideChannel0IRQHandler(regs*, void*)>:
c001b1f8:	83 ec 10             	sub    esp,0x10
c001b1fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1ff:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b206:	6a 07                	push   0x7
c001b208:	6a 00                	push   0x0
c001b20a:	50                   	push   eax
c001b20b:	e8 d8 fe ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001b210:	83 c4 1c             	add    esp,0x1c
c001b213:	c3                   	ret    

c001b214 <ideChannel1IRQHandler(regs*, void*)>:
c001b214:	83 ec 10             	sub    esp,0x10
c001b217:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b21b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b222:	6a 07                	push   0x7
c001b224:	6a 01                	push   0x1
c001b226:	50                   	push   eax
c001b227:	e8 bc fe ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001b22c:	83 c4 1c             	add    esp,0x1c
c001b22f:	c3                   	ret    

c001b230 <IDE::enableIRQs(unsigned char, bool)>:
c001b230:	57                   	push   edi
c001b231:	b8 02 00 00 00       	mov    eax,0x2
c001b236:	56                   	push   esi
c001b237:	53                   	push   ebx
c001b238:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b23c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b240:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b245:	74 02                	je     c001b249 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001b247:	31 c0                	xor    eax,eax
c001b249:	0f b6 db             	movzx  ebx,bl
c001b24c:	bf 04 00 00 00       	mov    edi,0x4
c001b251:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001b258:	50                   	push   eax
c001b259:	6a 0c                	push   0xc
c001b25b:	53                   	push   ebx
c001b25c:	56                   	push   esi
c001b25d:	e8 c6 fd ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b262:	83 c4 10             	add    esp,0x10
c001b265:	50                   	push   eax
c001b266:	6a 0c                	push   0xc
c001b268:	53                   	push   ebx
c001b269:	56                   	push   esi
c001b26a:	e8 79 fe ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001b26f:	83 c4 10             	add    esp,0x10
c001b272:	4f                   	dec    edi
c001b273:	75 f0                	jne    c001b265 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001b275:	5b                   	pop    ebx
c001b276:	5e                   	pop    esi
c001b277:	5f                   	pop    edi
c001b278:	c3                   	ret    
c001b279:	90                   	nop

c001b27a <IDE::open(int, int, void*)>:
c001b27a:	55                   	push   ebp
c001b27b:	57                   	push   edi
c001b27c:	56                   	push   esi
c001b27d:	53                   	push   ebx
c001b27e:	83 ec 1c             	sub    esp,0x1c
c001b281:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b285:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001b28e:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001b297:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001b29e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001b2a5:	0f 85 de 02 00 00    	jne    c001b589 <IDE::open(int, int, void*)+0x30f>
c001b2ab:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001b2b1:	88 04 24             	mov    BYTE PTR [esp],al
c001b2b4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b2b7:	83 e0 7f             	and    eax,0x7f
c001b2ba:	83 f8 05             	cmp    eax,0x5
c001b2bd:	74 05                	je     c001b2c4 <IDE::open(int, int, void*)+0x4a>
c001b2bf:	83 f8 0f             	cmp    eax,0xf
c001b2c2:	75 32                	jne    c001b2f6 <IDE::open(int, int, void*)+0x7c>
c001b2c4:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001b2ca:	83 e0 fc             	and    eax,0xfffffffc
c001b2cd:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b2d4:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001b2da:	83 e0 fc             	and    eax,0xfffffffc
c001b2dd:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b2e4:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001b2ea:	83 e0 fc             	and    eax,0xfffffffc
c001b2ed:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b2f4:	eb 14                	jmp    c001b30a <IDE::open(int, int, void*)+0x90>
c001b2f6:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001b300:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001b30a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001b311:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001b318:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b31c:	89 c6                	mov    esi,eax
c001b31e:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b323:	c1 e6 10             	shl    esi,0x10
c001b326:	89 e8                	mov    eax,ebp
c001b328:	89 fa                	mov    edx,edi
c001b32a:	c1 e0 0b             	shl    eax,0xb
c001b32d:	09 f0                	or     eax,esi
c001b32f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001b336:	c1 e6 08             	shl    esi,0x8
c001b339:	09 c6                	or     esi,eax
c001b33b:	89 f0                	mov    eax,esi
c001b33d:	0d 08 00 00 80       	or     eax,0x80000008
c001b342:	ef                   	out    dx,eax
c001b343:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001b348:	89 ca                	mov    edx,ecx
c001b34a:	ed                   	in     eax,dx
c001b34b:	c1 e8 10             	shr    eax,0x10
c001b34e:	3d ff ff 00 00       	cmp    eax,0xffff
c001b353:	0f 84 f9 00 00 00    	je     c001b452 <IDE::open(int, int, void*)+0x1d8>
c001b359:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001b35f:	89 fa                	mov    edx,edi
c001b361:	89 f0                	mov    eax,esi
c001b363:	ef                   	out    dx,eax
c001b364:	b0 fe                	mov    al,0xfe
c001b366:	89 ca                	mov    edx,ecx
c001b368:	ee                   	out    dx,al
c001b369:	89 f0                	mov    eax,esi
c001b36b:	89 fa                	mov    edx,edi
c001b36d:	ef                   	out    dx,eax
c001b36e:	89 ca                	mov    edx,ecx
c001b370:	ed                   	in     eax,dx
c001b371:	3c fe                	cmp    al,0xfe
c001b373:	0f 85 a9 00 00 00    	jne    c001b422 <IDE::open(int, int, void*)+0x1a8>
c001b379:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001b37f:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b386:	74 33                	je     c001b3bb <IDE::open(int, int, void*)+0x141>
c001b388:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001b38e:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001b392:	40                   	inc    eax
c001b393:	83 ec 0c             	sub    esp,0xc
c001b396:	0f b6 c0             	movzx  eax,al
c001b399:	50                   	push   eax
c001b39a:	55                   	push   ebp
c001b39b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b39f:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001b3a5:	51                   	push   ecx
c001b3a6:	e8 49 3c ff ff       	call   c000eff4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001b3ab:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001b3b0:	83 c4 1c             	add    esp,0x1c
c001b3b3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b3b9:	eb 0a                	jmp    c001b3c5 <IDE::open(int, int, void*)+0x14b>
c001b3bb:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001b3c5:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001b3cc:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001b3d3:	c1 e1 10             	shl    ecx,0x10
c001b3d6:	c1 e0 08             	shl    eax,0x8
c001b3d9:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b3de:	09 c1                	or     ecx,eax
c001b3e0:	89 fa                	mov    edx,edi
c001b3e2:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001b3e9:	c1 e0 0b             	shl    eax,0xb
c001b3ec:	09 c1                	or     ecx,eax
c001b3ee:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001b3f4:	89 c8                	mov    eax,ecx
c001b3f6:	ef                   	out    dx,eax
c001b3f7:	be fc 0c 00 00       	mov    esi,0xcfc
c001b3fc:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001b402:	89 f2                	mov    edx,esi
c001b404:	ee                   	out    dx,al
c001b405:	89 c8                	mov    eax,ecx
c001b407:	89 fa                	mov    edx,edi
c001b409:	ef                   	out    dx,eax
c001b40a:	89 f2                	mov    edx,esi
c001b40c:	ed                   	in     eax,dx
c001b40d:	0f b6 c0             	movzx  eax,al
c001b410:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001b416:	74 4a                	je     c001b462 <IDE::open(int, int, void*)+0x1e8>
c001b418:	83 ec 0c             	sub    esp,0xc
c001b41b:	68 90 22 02 c0       	push   0xc0022290
c001b420:	eb 38                	jmp    c001b45a <IDE::open(int, int, void*)+0x1e0>
c001b422:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001b42b:	75 1b                	jne    c001b448 <IDE::open(int, int, void*)+0x1ce>
c001b42d:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001b431:	3d 80 00 00 00       	cmp    eax,0x80
c001b436:	74 07                	je     c001b43f <IDE::open(int, int, void*)+0x1c5>
c001b438:	3d 8a 00 00 00       	cmp    eax,0x8a
c001b43d:	75 09                	jne    c001b448 <IDE::open(int, int, void*)+0x1ce>
c001b43f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b446:	eb 1a                	jmp    c001b462 <IDE::open(int, int, void*)+0x1e8>
c001b448:	83 ec 0c             	sub    esp,0xc
c001b44b:	68 98 22 02 c0       	push   0xc0022298
c001b450:	eb 08                	jmp    c001b45a <IDE::open(int, int, void*)+0x1e0>
c001b452:	83 ec 0c             	sub    esp,0xc
c001b455:	68 c9 22 02 c0       	push   0xc00222c9
c001b45a:	e8 7c 57 ff ff       	call   c0010bdb <KePanic(char const*)>
c001b45f:	83 c4 10             	add    esp,0x10
c001b462:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001b469:	74 1a                	je     c001b485 <IDE::open(int, int, void*)+0x20b>
c001b46b:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b471:	83 e0 fc             	and    eax,0xfffffffc
c001b474:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b47b:	83 c0 08             	add    eax,0x8
c001b47e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b485:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b48b:	89 c2                	mov    edx,eax
c001b48d:	83 e2 0f             	and    edx,0xf
c001b490:	83 fa 08             	cmp    edx,0x8
c001b493:	75 0a                	jne    c001b49f <IDE::open(int, int, void*)+0x225>
c001b495:	83 e8 02             	sub    eax,0x2
c001b498:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b49f:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b4a5:	89 c2                	mov    edx,eax
c001b4a7:	83 e2 0f             	and    edx,0xf
c001b4aa:	83 fa 08             	cmp    edx,0x8
c001b4ad:	75 0a                	jne    c001b4b9 <IDE::open(int, int, void*)+0x23f>
c001b4af:	83 e8 02             	sub    eax,0x2
c001b4b2:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b4b9:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b4c0:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b4c7:	89 d0                	mov    eax,edx
c001b4c9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b4cc:	8d 7a 01             	lea    edi,[edx+0x1]
c001b4cf:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b4d3:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b4d7:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b4db:	83 e1 3f             	and    ecx,0x3f
c001b4de:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b4e2:	89 f9                	mov    ecx,edi
c001b4e4:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b4eb:	0f b6 c9             	movzx  ecx,cl
c001b4ee:	8d 78 02             	lea    edi,[eax+0x2]
c001b4f1:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b4f4:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b4f8:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b4fc:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b500:	83 e2 3f             	and    edx,0x3f
c001b503:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b507:	89 f9                	mov    ecx,edi
c001b509:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b50f:	0f b6 d1             	movzx  edx,cl
c001b512:	8d 78 03             	lea    edi,[eax+0x3]
c001b515:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b518:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b51c:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b520:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b524:	83 e1 3f             	and    ecx,0x3f
c001b527:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b52b:	89 f9                	mov    ecx,edi
c001b52d:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b533:	0f b6 c9             	movzx  ecx,cl
c001b536:	8d 78 04             	lea    edi,[eax+0x4]
c001b539:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b53c:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b540:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b544:	89 fa                	mov    edx,edi
c001b546:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b54c:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b550:	83 e2 3f             	and    edx,0x3f
c001b553:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b557:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b55e:	66 85 f6             	test   si,si
c001b561:	74 65                	je     c001b5c8 <IDE::open(int, int, void*)+0x34e>
c001b563:	89 f9                	mov    ecx,edi
c001b565:	83 c0 05             	add    eax,0x5
c001b568:	0f b6 d1             	movzx  edx,cl
c001b56b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b56e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b572:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b576:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b57c:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001b580:	83 e0 3f             	and    eax,0x3f
c001b583:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001b587:	eb 3f                	jmp    c001b5c8 <IDE::open(int, int, void*)+0x34e>
c001b589:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001b58f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b596:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b59d:	05 06 02 00 00       	add    eax,0x206
c001b5a2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b5a9:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001b5b0:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b5b7:	05 06 02 00 00       	add    eax,0x206
c001b5bc:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b5c3:	e9 bd fe ff ff       	jmp    c001b485 <IDE::open(int, int, void*)+0x20b>
c001b5c8:	50                   	push   eax
c001b5c9:	50                   	push   eax
c001b5ca:	6a 00                	push   0x0
c001b5cc:	53                   	push   ebx
c001b5cd:	e8 30 fa ff ff       	call   c001b002 <IDE::prepareInterrupt(unsigned char)>
c001b5d2:	5a                   	pop    edx
c001b5d3:	59                   	pop    ecx
c001b5d4:	6a 01                	push   0x1
c001b5d6:	53                   	push   ebx
c001b5d7:	e8 26 fa ff ff       	call   c001b002 <IDE::prepareInterrupt(unsigned char)>
c001b5dc:	83 c4 0c             	add    esp,0xc
c001b5df:	6a 00                	push   0x0
c001b5e1:	6a 00                	push   0x0
c001b5e3:	53                   	push   ebx
c001b5e4:	e8 47 fc ff ff       	call   c001b230 <IDE::enableIRQs(unsigned char, bool)>
c001b5e9:	83 c4 0c             	add    esp,0xc
c001b5ec:	6a 00                	push   0x0
c001b5ee:	6a 01                	push   0x1
c001b5f0:	53                   	push   ebx
c001b5f1:	e8 3a fc ff ff       	call   c001b230 <IDE::enableIRQs(unsigned char, bool)>
c001b5f6:	83 c4 10             	add    esp,0x10
c001b5f9:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b600:	74 34                	je     c001b636 <IDE::open(int, int, void*)+0x3bc>
c001b602:	83 ec 0c             	sub    esp,0xc
c001b605:	53                   	push   ebx
c001b606:	6a 01                	push   0x1
c001b608:	68 f8 b1 01 c0       	push   0xc001b1f8
c001b60d:	6a 0e                	push   0xe
c001b60f:	53                   	push   ebx
c001b610:	e8 19 0a ff ff       	call   c000c02e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b615:	83 c4 14             	add    esp,0x14
c001b618:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b61e:	53                   	push   ebx
c001b61f:	6a 01                	push   0x1
c001b621:	68 14 b2 01 c0       	push   0xc001b214
c001b626:	6a 0f                	push   0xf
c001b628:	53                   	push   ebx
c001b629:	e8 00 0a ff ff       	call   c000c02e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b62e:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b634:	eb 38                	jmp    c001b66e <IDE::open(int, int, void*)+0x3f4>
c001b636:	83 ec 0c             	sub    esp,0xc
c001b639:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b643:	53                   	push   ebx
c001b644:	6a 00                	push   0x0
c001b646:	68 f8 b1 01 c0       	push   0xc001b1f8
c001b64b:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b651:	53                   	push   ebx
c001b652:	e8 d7 09 ff ff       	call   c000c02e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b657:	83 c4 14             	add    esp,0x14
c001b65a:	53                   	push   ebx
c001b65b:	6a 00                	push   0x0
c001b65d:	68 14 b2 01 c0       	push   0xc001b214
c001b662:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b668:	53                   	push   ebx
c001b669:	e8 c0 09 ff ff       	call   c000c02e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b66e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b670:	83 c4 20             	add    esp,0x20
c001b673:	83 ec 0c             	sub    esp,0xc
c001b676:	53                   	push   ebx
c001b677:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b67a:	83 c4 0c             	add    esp,0xc
c001b67d:	6a 07                	push   0x7
c001b67f:	6a 00                	push   0x0
c001b681:	53                   	push   ebx
c001b682:	e8 61 fa ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001b687:	83 c4 0c             	add    esp,0xc
c001b68a:	6a 07                	push   0x7
c001b68c:	6a 01                	push   0x1
c001b68e:	53                   	push   ebx
c001b68f:	e8 54 fa ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001b694:	83 c4 0c             	add    esp,0xc
c001b697:	6a 01                	push   0x1
c001b699:	6a 00                	push   0x0
c001b69b:	53                   	push   ebx
c001b69c:	e8 8f fb ff ff       	call   c001b230 <IDE::enableIRQs(unsigned char, bool)>
c001b6a1:	83 c4 0c             	add    esp,0xc
c001b6a4:	6a 01                	push   0x1
c001b6a6:	6a 01                	push   0x1
c001b6a8:	53                   	push   ebx
c001b6a9:	e8 82 fb ff ff       	call   c001b230 <IDE::enableIRQs(unsigned char, bool)>
c001b6ae:	83 c4 2c             	add    esp,0x2c
c001b6b1:	31 c0                	xor    eax,eax
c001b6b3:	5b                   	pop    ebx
c001b6b4:	5e                   	pop    esi
c001b6b5:	5f                   	pop    edi
c001b6b6:	5d                   	pop    ebp
c001b6b7:	c3                   	ret    

c001b6b8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b6b8:	55                   	push   ebp
c001b6b9:	57                   	push   edi
c001b6ba:	56                   	push   esi
c001b6bb:	53                   	push   ebx
c001b6bc:	83 ec 1c             	sub    esp,0x1c
c001b6bf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b6c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b6c7:	8d 42 f8             	lea    eax,[edx-0x8]
c001b6ca:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b6ce:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b6d2:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b6d6:	3c 03                	cmp    al,0x3
c001b6d8:	77 5a                	ja     c001b734 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b6da:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b6de:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b6e2:	0f b6 db             	movzx  ebx,bl
c001b6e5:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b6e8:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b6ed:	0c 80                	or     al,0x80
c001b6ef:	50                   	push   eax
c001b6f0:	6a 0c                	push   0xc
c001b6f2:	53                   	push   ebx
c001b6f3:	56                   	push   esi
c001b6f4:	e8 2f f9 ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b6f9:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b6fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b702:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b706:	0f b6 d2             	movzx  edx,dl
c001b709:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b70d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b70f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b714:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b718:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b71c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b720:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b728:	83 c4 2c             	add    esp,0x2c
c001b72b:	5b                   	pop    ebx
c001b72c:	5e                   	pop    esi
c001b72d:	5f                   	pop    edi
c001b72e:	5d                   	pop    ebp
c001b72f:	e9 f4 f8 ff ff       	jmp    c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b734:	0f b6 c2             	movzx  eax,dl
c001b737:	83 f8 07             	cmp    eax,0x7
c001b73a:	77 12                	ja     c001b74e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001b73c:	0f b6 c2             	movzx  eax,dl
c001b73f:	0f b6 db             	movzx  ebx,bl
c001b742:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001b74a:	01 c2                	add    edx,eax
c001b74c:	eb 2f                	jmp    c001b77d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b74e:	83 f8 0d             	cmp    eax,0xd
c001b751:	77 13                	ja     c001b766 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001b753:	0f b6 db             	movzx  ebx,bl
c001b756:	0f b6 d2             	movzx  edx,dl
c001b759:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b760:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b764:	eb 17                	jmp    c001b77d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b766:	83 f8 15             	cmp    eax,0x15
c001b769:	77 14                	ja     c001b77f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001b76b:	0f b6 db             	movzx  ebx,bl
c001b76e:	0f b6 d2             	movzx  edx,dl
c001b771:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b779:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b77d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b77f:	83 c4 1c             	add    esp,0x1c
c001b782:	5b                   	pop    ebx
c001b783:	5e                   	pop    esi
c001b784:	5f                   	pop    edi
c001b785:	5d                   	pop    ebp
c001b786:	c3                   	ret    
c001b787:	90                   	nop

c001b788 <IDE::detect()>:
c001b788:	55                   	push   ebp
c001b789:	57                   	push   edi
c001b78a:	56                   	push   esi
c001b78b:	53                   	push   ebx
c001b78c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b792:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001b799:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001b7a0:	0f 85 a4 02 00 00    	jne    c001ba4a <IDE::detect()+0x2c2>
c001b7a6:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001b7ad:	31 f6                	xor    esi,esi
c001b7af:	31 ed                	xor    ebp,ebp
c001b7b1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b7b9:	89 e8                	mov    eax,ebp
c001b7bb:	c1 e0 06             	shl    eax,0x6
c001b7be:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001b7c6:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b7ca:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b7ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7d2:	c1 e0 04             	shl    eax,0x4
c001b7d5:	83 c8 a0             	or     eax,0xffffffa0
c001b7d8:	0f b6 c0             	movzx  eax,al
c001b7db:	50                   	push   eax
c001b7dc:	6a 06                	push   0x6
c001b7de:	56                   	push   esi
c001b7df:	53                   	push   ebx
c001b7e0:	e8 43 f8 ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b7e5:	83 c4 0c             	add    esp,0xc
c001b7e8:	6a 0c                	push   0xc
c001b7ea:	56                   	push   esi
c001b7eb:	53                   	push   ebx
c001b7ec:	e8 f7 f8 ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001b7f1:	83 c4 0c             	add    esp,0xc
c001b7f4:	6a 0c                	push   0xc
c001b7f6:	56                   	push   esi
c001b7f7:	53                   	push   ebx
c001b7f8:	e8 eb f8 ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001b7fd:	83 c4 0c             	add    esp,0xc
c001b800:	6a 0c                	push   0xc
c001b802:	56                   	push   esi
c001b803:	53                   	push   ebx
c001b804:	e8 df f8 ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001b809:	83 c4 0c             	add    esp,0xc
c001b80c:	6a 0c                	push   0xc
c001b80e:	56                   	push   esi
c001b80f:	53                   	push   ebx
c001b810:	e8 d3 f8 ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001b815:	68 ec 00 00 00       	push   0xec
c001b81a:	6a 07                	push   0x7
c001b81c:	56                   	push   esi
c001b81d:	53                   	push   ebx
c001b81e:	e8 05 f8 ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b823:	83 c4 1c             	add    esp,0x1c
c001b826:	6a 0c                	push   0xc
c001b828:	56                   	push   esi
c001b829:	53                   	push   ebx
c001b82a:	e8 b9 f8 ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001b82f:	83 c4 0c             	add    esp,0xc
c001b832:	6a 0c                	push   0xc
c001b834:	56                   	push   esi
c001b835:	53                   	push   ebx
c001b836:	e8 ad f8 ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001b83b:	83 c4 0c             	add    esp,0xc
c001b83e:	6a 0c                	push   0xc
c001b840:	56                   	push   esi
c001b841:	53                   	push   ebx
c001b842:	e8 a1 f8 ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001b847:	83 c4 0c             	add    esp,0xc
c001b84a:	6a 0c                	push   0xc
c001b84c:	56                   	push   esi
c001b84d:	53                   	push   ebx
c001b84e:	e8 95 f8 ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001b853:	83 c4 0c             	add    esp,0xc
c001b856:	6a 0c                	push   0xc
c001b858:	56                   	push   esi
c001b859:	53                   	push   ebx
c001b85a:	e8 89 f8 ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001b85f:	83 c4 10             	add    esp,0x10
c001b862:	84 c0                	test   al,al
c001b864:	0f 84 60 01 00 00    	je     c001b9ca <IDE::detect()+0x242>
c001b86a:	31 ff                	xor    edi,edi
c001b86c:	50                   	push   eax
c001b86d:	6a 0c                	push   0xc
c001b86f:	56                   	push   esi
c001b870:	53                   	push   ebx
c001b871:	e8 72 f8 ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001b876:	83 c4 10             	add    esp,0x10
c001b879:	a8 01                	test   al,0x1
c001b87b:	0f 85 6a 01 00 00    	jne    c001b9eb <IDE::detect()+0x263>
c001b881:	a8 80                	test   al,0x80
c001b883:	75 04                	jne    c001b889 <IDE::detect()+0x101>
c001b885:	a8 08                	test   al,0x8
c001b887:	75 23                	jne    c001b8ac <IDE::detect()+0x124>
c001b889:	47                   	inc    edi
c001b88a:	81 ff 17 01 00 00    	cmp    edi,0x117
c001b890:	7e da                	jle    c001b86c <IDE::detect()+0xe4>
c001b892:	83 ec 0c             	sub    esp,0xc
c001b895:	6a 32                	push   0x32
c001b897:	e8 60 9e ff ff       	call   c00156fc <milliTenthSleep(unsigned int)>
c001b89c:	83 c4 10             	add    esp,0x10
c001b89f:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001b8a5:	75 c5                	jne    c001b86c <IDE::detect()+0xe4>
c001b8a7:	e9 3f 01 00 00       	jmp    c001b9eb <IDE::detect()+0x263>
c001b8ac:	31 c9                	xor    ecx,ecx
c001b8ae:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001b8b2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b8b6:	83 ec 0c             	sub    esp,0xc
c001b8b9:	68 80 00 00 00       	push   0x80
c001b8be:	57                   	push   edi
c001b8bf:	6a 00                	push   0x0
c001b8c1:	56                   	push   esi
c001b8c2:	53                   	push   ebx
c001b8c3:	e8 f0 fd ff ff       	call   c001b6b8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b8c8:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001b8cd:	89 e8                	mov    eax,ebp
c001b8cf:	89 d1                	mov    ecx,edx
c001b8d1:	c1 e0 06             	shl    eax,0x6
c001b8d4:	01 d8                	add    eax,ebx
c001b8d6:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001b8dd:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b8e4:	89 f2                	mov    edx,esi
c001b8e6:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001b8ec:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001b8f0:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001b8f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b8fa:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001b901:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001b909:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001b910:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001b918:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001b91e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001b925:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001b92b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b92f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b933:	83 c4 20             	add    esp,0x20
c001b936:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001b939:	83 c0 02             	add    eax,0x2
c001b93c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001b942:	83 c7 02             	add    edi,0x2
c001b945:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001b948:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001b94e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001b952:	75 e2                	jne    c001b936 <IDE::detect()+0x1ae>
c001b954:	89 e8                	mov    eax,ebp
c001b956:	c1 e0 06             	shl    eax,0x6
c001b959:	01 d8                	add    eax,ebx
c001b95b:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001b962:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001b969:	c1 ea 09             	shr    edx,0x9
c001b96c:	83 e2 01             	and    edx,0x1
c001b96f:	80 e1 01             	and    cl,0x1
c001b972:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001b978:	75 22                	jne    c001b99c <IDE::detect()+0x214>
c001b97a:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001b981:	74 46                	je     c001b9c9 <IDE::detect()+0x241>
c001b983:	83 ec 0c             	sub    esp,0xc
c001b986:	68 7c 01 00 00       	push   0x17c
c001b98b:	e8 1e c1 fe ff       	call   c0007aae <malloc>
c001b990:	89 c7                	mov    edi,eax
c001b992:	89 04 24             	mov    DWORD PTR [esp],eax
c001b995:	e8 1a 05 00 00       	call   c001beb4 <ATA::ATA()>
c001b99a:	eb 17                	jmp    c001b9b3 <IDE::detect()+0x22b>
c001b99c:	83 ec 0c             	sub    esp,0xc
c001b99f:	68 84 01 00 00       	push   0x184
c001b9a4:	e8 05 c1 fe ff       	call   c0007aae <malloc>
c001b9a9:	89 c7                	mov    edi,eax
c001b9ab:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9ae:	e8 45 0e 00 00       	call   c001c7f8 <ATAPI::ATAPI()>
c001b9b3:	5a                   	pop    edx
c001b9b4:	59                   	pop    ecx
c001b9b5:	57                   	push   edi
c001b9b6:	53                   	push   ebx
c001b9b7:	e8 c6 06 ff ff       	call   c000c082 <Device::addChild(Device*)>
c001b9bc:	8b 07                	mov    eax,DWORD PTR [edi]
c001b9be:	53                   	push   ebx
c001b9bf:	55                   	push   ebp
c001b9c0:	6a 00                	push   0x0
c001b9c2:	57                   	push   edi
c001b9c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b9c6:	83 c4 20             	add    esp,0x20
c001b9c9:	45                   	inc    ebp
c001b9ca:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001b9cf:	74 0d                	je     c001b9de <IDE::detect()+0x256>
c001b9d1:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001b9d9:	e9 db fd ff ff       	jmp    c001b7b9 <IDE::detect()+0x31>
c001b9de:	4e                   	dec    esi
c001b9df:	74 69                	je     c001ba4a <IDE::detect()+0x2c2>
c001b9e1:	be 01 00 00 00       	mov    esi,0x1
c001b9e6:	e9 c6 fd ff ff       	jmp    c001b7b1 <IDE::detect()+0x29>
c001b9eb:	50                   	push   eax
c001b9ec:	6a 04                	push   0x4
c001b9ee:	56                   	push   esi
c001b9ef:	53                   	push   ebx
c001b9f0:	e8 f3 f6 ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001b9f5:	83 c4 0c             	add    esp,0xc
c001b9f8:	89 c7                	mov    edi,eax
c001b9fa:	6a 05                	push   0x5
c001b9fc:	56                   	push   esi
c001b9fd:	53                   	push   ebx
c001b9fe:	e8 e5 f6 ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001ba03:	83 c4 10             	add    esp,0x10
c001ba06:	89 f9                	mov    ecx,edi
c001ba08:	0f b6 c0             	movzx  eax,al
c001ba0b:	0f b6 f9             	movzx  edi,cl
c001ba0e:	83 ff 14             	cmp    edi,0x14
c001ba11:	75 07                	jne    c001ba1a <IDE::detect()+0x292>
c001ba13:	3d eb 00 00 00       	cmp    eax,0xeb
c001ba18:	eb 0a                	jmp    c001ba24 <IDE::detect()+0x29c>
c001ba1a:	3d 96 00 00 00       	cmp    eax,0x96
c001ba1f:	75 a9                	jne    c001b9ca <IDE::detect()+0x242>
c001ba21:	83 ff 69             	cmp    edi,0x69
c001ba24:	75 a4                	jne    c001b9ca <IDE::detect()+0x242>
c001ba26:	68 a1 00 00 00       	push   0xa1
c001ba2b:	6a 07                	push   0x7
c001ba2d:	56                   	push   esi
c001ba2e:	53                   	push   ebx
c001ba2f:	e8 f4 f5 ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba34:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001ba3b:	e8 bc 9c ff ff       	call   c00156fc <milliTenthSleep(unsigned int)>
c001ba40:	83 c4 10             	add    esp,0x10
c001ba43:	b1 01                	mov    cl,0x1
c001ba45:	e9 64 fe ff ff       	jmp    c001b8ae <IDE::detect()+0x126>
c001ba4a:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ba50:	5b                   	pop    ebx
c001ba51:	5e                   	pop    esi
c001ba52:	5f                   	pop    edi
c001ba53:	5d                   	pop    ebp
c001ba54:	c3                   	ret    
c001ba55:	90                   	nop

c001ba56 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001ba56:	55                   	push   ebp
c001ba57:	57                   	push   edi
c001ba58:	56                   	push   esi
c001ba59:	53                   	push   ebx
c001ba5a:	83 ec 1c             	sub    esp,0x1c
c001ba5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ba61:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ba65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba69:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ba6d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ba71:	88 c3                	mov    bl,al
c001ba73:	25 ff 00 00 00       	and    eax,0xff
c001ba78:	0f 84 88 00 00 00    	je     c001bb06 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ba7e:	83 ec 0c             	sub    esp,0xc
c001ba81:	89 c7                	mov    edi,eax
c001ba83:	68 f3 22 02 c0       	push   0xc00222f3
c001ba88:	e8 ea ee fe ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c001ba8d:	83 c4 10             	add    esp,0x10
c001ba90:	83 ff 01             	cmp    edi,0x1
c001ba93:	74 6b                	je     c001bb00 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001ba95:	83 ff 02             	cmp    edi,0x2
c001ba98:	75 58                	jne    c001baf2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001ba9a:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001ba9f:	01 ff                	add    edi,edi
c001baa1:	50                   	push   eax
c001baa2:	09 fe                	or     esi,edi
c001baa4:	6a 01                	push   0x1
c001baa6:	89 f0                	mov    eax,esi
c001baa8:	0f b6 f0             	movzx  esi,al
c001baab:	c1 e6 06             	shl    esi,0x6
c001baae:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001bab6:	50                   	push   eax
c001bab7:	55                   	push   ebp
c001bab8:	e8 2b f6 ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001babd:	83 c4 10             	add    esp,0x10
c001bac0:	a8 01                	test   al,0x1
c001bac2:	74 02                	je     c001bac6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001bac4:	b3 07                	mov    bl,0x7
c001bac6:	a8 02                	test   al,0x2
c001bac8:	74 02                	je     c001bacc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001baca:	b3 03                	mov    bl,0x3
c001bacc:	a8 04                	test   al,0x4
c001bace:	74 02                	je     c001bad2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001bad0:	b3 14                	mov    bl,0x14
c001bad2:	a8 08                	test   al,0x8
c001bad4:	74 02                	je     c001bad8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001bad6:	b3 03                	mov    bl,0x3
c001bad8:	a8 10                	test   al,0x10
c001bada:	74 02                	je     c001bade <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001badc:	b3 15                	mov    bl,0x15
c001bade:	a8 20                	test   al,0x20
c001bae0:	74 02                	je     c001bae4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001bae2:	b3 03                	mov    bl,0x3
c001bae4:	a8 40                	test   al,0x40
c001bae6:	74 02                	je     c001baea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001bae8:	b3 16                	mov    bl,0x16
c001baea:	a8 80                	test   al,0x80
c001baec:	74 18                	je     c001bb06 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001baee:	b3 0d                	mov    bl,0xd
c001baf0:	eb 14                	jmp    c001bb06 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001baf2:	83 ff 03             	cmp    edi,0x3
c001baf5:	74 0d                	je     c001bb04 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001baf7:	83 ff 04             	cmp    edi,0x4
c001bafa:	75 0a                	jne    c001bb06 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bafc:	b3 08                	mov    bl,0x8
c001bafe:	eb 06                	jmp    c001bb06 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bb00:	b3 13                	mov    bl,0x13
c001bb02:	eb 02                	jmp    c001bb06 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001bb04:	b3 17                	mov    bl,0x17
c001bb06:	83 c4 1c             	add    esp,0x1c
c001bb09:	88 d8                	mov    al,bl
c001bb0b:	5b                   	pop    ebx
c001bb0c:	5e                   	pop    esi
c001bb0d:	5f                   	pop    edi
c001bb0e:	5d                   	pop    ebp
c001bb0f:	c3                   	ret    

c001bb10 <IDE::polling(unsigned char, unsigned int)>:
c001bb10:	57                   	push   edi
c001bb11:	56                   	push   esi
c001bb12:	53                   	push   ebx
c001bb13:	bb 04 00 00 00       	mov    ebx,0x4
c001bb18:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001bb1c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001bb21:	52                   	push   edx
c001bb22:	6a 0c                	push   0xc
c001bb24:	56                   	push   esi
c001bb25:	57                   	push   edi
c001bb26:	e8 bd f5 ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001bb2b:	83 c4 10             	add    esp,0x10
c001bb2e:	4b                   	dec    ebx
c001bb2f:	75 f0                	jne    c001bb21 <IDE::polling(unsigned char, unsigned int)+0x11>
c001bb31:	bb a0 86 01 00       	mov    ebx,0x186a0
c001bb36:	50                   	push   eax
c001bb37:	6a 0c                	push   0xc
c001bb39:	56                   	push   esi
c001bb3a:	57                   	push   edi
c001bb3b:	e8 a8 f5 ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001bb40:	83 c4 10             	add    esp,0x10
c001bb43:	a8 01                	test   al,0x1
c001bb45:	75 17                	jne    c001bb5e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001bb47:	a8 20                	test   al,0x20
c001bb49:	75 0f                	jne    c001bb5a <IDE::polling(unsigned char, unsigned int)+0x4a>
c001bb4b:	4b                   	dec    ebx
c001bb4c:	74 10                	je     c001bb5e <IDE::polling(unsigned char, unsigned int)+0x4e>
c001bb4e:	a8 80                	test   al,0x80
c001bb50:	75 e4                	jne    c001bb36 <IDE::polling(unsigned char, unsigned int)+0x26>
c001bb52:	a8 08                	test   al,0x8
c001bb54:	74 e0                	je     c001bb36 <IDE::polling(unsigned char, unsigned int)+0x26>
c001bb56:	31 c0                	xor    eax,eax
c001bb58:	eb 06                	jmp    c001bb60 <IDE::polling(unsigned char, unsigned int)+0x50>
c001bb5a:	b0 01                	mov    al,0x1
c001bb5c:	eb 02                	jmp    c001bb60 <IDE::polling(unsigned char, unsigned int)+0x50>
c001bb5e:	b0 02                	mov    al,0x2
c001bb60:	5b                   	pop    ebx
c001bb61:	5e                   	pop    esi
c001bb62:	5f                   	pop    edi
c001bb63:	c3                   	ret    

c001bb64 <SATABus::close(int, int, void*)>:
c001bb64:	31 c0                	xor    eax,eax
c001bb66:	c3                   	ret    
c001bb67:	90                   	nop

c001bb68 <SATABus::detect()>:
c001bb68:	c3                   	ret    
c001bb69:	90                   	nop

c001bb6a <SATABus::SATABus()>:
c001bb6a:	83 ec 0c             	sub    esp,0xc
c001bb6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb71:	83 ec 08             	sub    esp,0x8
c001bb74:	68 2c 23 02 c0       	push   0xc002232c
c001bb79:	50                   	push   eax
c001bb7a:	e8 45 08 ff ff       	call   c000c3c4 <HardDiskController::HardDiskController(char const*)>
c001bb7f:	83 c4 10             	add    esp,0x10
c001bb82:	ba 58 23 02 c0       	mov    edx,0xc0022358
c001bb87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb8b:	89 10                	mov    DWORD PTR [eax],edx
c001bb8d:	83 ec 0c             	sub    esp,0xc
c001bb90:	6a 50                	push   0x50
c001bb92:	e8 ea c2 fe ff       	call   c0007e81 <Phys::allocateContiguousPages(int)>
c001bb97:	83 c4 10             	add    esp,0x10
c001bb9a:	89 c2                	mov    edx,eax
c001bb9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bba0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001bba6:	83 ec 0c             	sub    esp,0xc
c001bba9:	6a 50                	push   0x50
c001bbab:	e8 51 da fe ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c001bbb0:	83 c4 10             	add    esp,0x10
c001bbb3:	89 c2                	mov    edx,eax
c001bbb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbb9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001bbbf:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001bbc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bbc8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001bbce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bbd2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001bbd8:	83 ec 0c             	sub    esp,0xc
c001bbdb:	6a 03                	push   0x3
c001bbdd:	6a 50                	push   0x50
c001bbdf:	51                   	push   ecx
c001bbe0:	52                   	push   edx
c001bbe1:	50                   	push   eax
c001bbe2:	e8 43 e3 fe ff       	call   c0009f2a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001bbe7:	83 c4 20             	add    esp,0x20
c001bbea:	90                   	nop
c001bbeb:	83 c4 0c             	add    esp,0xc
c001bbee:	c3                   	ret    
c001bbef:	90                   	nop

c001bbf0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001bbf0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbf4:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001bbf7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001bbfa:	09 c2                	or     edx,eax
c001bbfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc00:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001bc06:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bc08:	31 c0                	xor    eax,eax
c001bc0a:	c1 e9 08             	shr    ecx,0x8
c001bc0d:	83 e1 0f             	and    ecx,0xf
c001bc10:	39 c8                	cmp    eax,ecx
c001bc12:	74 0a                	je     c001bc1e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001bc14:	f6 c2 01             	test   dl,0x1
c001bc17:	74 08                	je     c001bc21 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001bc19:	d1 ea                	shr    edx,1
c001bc1b:	40                   	inc    eax
c001bc1c:	eb f2                	jmp    c001bc10 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001bc1e:	83 c8 ff             	or     eax,0xffffffff
c001bc21:	c3                   	ret    

c001bc22 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001bc22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bc26:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001bc29:	89 c2                	mov    edx,eax
c001bc2b:	c1 ea 08             	shr    edx,0x8
c001bc2e:	83 e2 0f             	and    edx,0xf
c001bc31:	4a                   	dec    edx
c001bc32:	75 32                	jne    c001bc66 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001bc34:	83 e0 0f             	and    eax,0xf
c001bc37:	83 f8 03             	cmp    eax,0x3
c001bc3a:	75 2a                	jne    c001bc66 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001bc3c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001bc3f:	b8 02 00 00 00       	mov    eax,0x2
c001bc44:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001bc4a:	74 1c                	je     c001bc68 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001bc4c:	b8 04 00 00 00       	mov    eax,0x4
c001bc51:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001bc57:	74 0f                	je     c001bc68 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001bc59:	31 c0                	xor    eax,eax
c001bc5b:	83 fa 03             	cmp    edx,0x3
c001bc5e:	0f 94 c0             	sete   al
c001bc61:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001bc65:	c3                   	ret    
c001bc66:	31 c0                	xor    eax,eax
c001bc68:	c3                   	ret    
c001bc69:	90                   	nop

c001bc6a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001bc6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc6e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc71:	0f ba e2 0f          	bt     edx,0xf
c001bc75:	72 f7                	jb     c001bc6e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001bc77:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc7a:	83 ca 10             	or     edx,0x10
c001bc7d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bc80:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc83:	83 ca 01             	or     edx,0x1
c001bc86:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bc89:	c3                   	ret    

c001bc8a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001bc8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc8e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc91:	83 e2 fe             	and    edx,0xfffffffe
c001bc94:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bc97:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bc9a:	83 e2 ef             	and    edx,0xffffffef
c001bc9d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bca0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bca3:	0f ba e2 0e          	bt     edx,0xe
c001bca7:	72 f7                	jb     c001bca0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001bca9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bcac:	0f ba e2 0f          	bt     edx,0xf
c001bcb0:	72 ee                	jb     c001bca0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001bcb2:	c3                   	ret    
c001bcb3:	90                   	nop

c001bcb4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001bcb4:	55                   	push   ebp
c001bcb5:	57                   	push   edi
c001bcb6:	56                   	push   esi
c001bcb7:	53                   	push   ebx
c001bcb8:	83 ec 1c             	sub    esp,0x1c
c001bcbb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bcbf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bcc3:	53                   	push   ebx
c001bcc4:	56                   	push   esi
c001bcc5:	e8 c0 ff ff ff       	call   c001bc8a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001bcca:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001bcce:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001bcd4:	83 ec 0c             	sub    esp,0xc
c001bcd7:	c1 e5 0a             	shl    ebp,0xa
c001bcda:	01 e8                	add    eax,ebp
c001bcdc:	89 03                	mov    DWORD PTR [ebx],eax
c001bcde:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bce0:	68 00 04 00 00       	push   0x400
c001bce5:	6a 00                	push   0x0
c001bce7:	50                   	push   eax
c001bce8:	e8 03 48 fe ff       	call   c00004f0 <memset>
c001bced:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001bcf3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001bcf7:	01 e8                	add    eax,ebp
c001bcf9:	83 c4 1c             	add    esp,0x1c
c001bcfc:	89 03                	mov    DWORD PTR [ebx],eax
c001bcfe:	c1 e2 08             	shl    edx,0x8
c001bd01:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bd08:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001bd0e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001bd14:	01 f8                	add    eax,edi
c001bd16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001bd19:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001bd1c:	68 00 01 00 00       	push   0x100
c001bd21:	6a 00                	push   0x0
c001bd23:	50                   	push   eax
c001bd24:	e8 c7 47 fe ff       	call   c00004f0 <memset>
c001bd29:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001bd2f:	01 fa                	add    edx,edi
c001bd31:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bd35:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001bd38:	c1 e7 0d             	shl    edi,0xd
c001bd3b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001bd42:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001bd48:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001bd4e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bd52:	31 ff                	xor    edi,edi
c001bd54:	83 c4 10             	add    esp,0x10
c001bd57:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001bd5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd61:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001bd67:	83 c5 20             	add    ebp,0x20
c001bd6a:	01 f8                	add    eax,edi
c001bd6c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001bd6f:	52                   	push   edx
c001bd70:	68 00 01 00 00       	push   0x100
c001bd75:	6a 00                	push   0x0
c001bd77:	50                   	push   eax
c001bd78:	e8 73 47 fe ff       	call   c00004f0 <memset>
c001bd7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd81:	83 c4 10             	add    esp,0x10
c001bd84:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001bd8a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001bd91:	01 f8                	add    eax,edi
c001bd93:	81 c7 00 01 00 00    	add    edi,0x100
c001bd99:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001bd9c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001bda2:	75 b3                	jne    c001bd57 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001bda4:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001bdab:	50                   	push   eax
c001bdac:	50                   	push   eax
c001bdad:	53                   	push   ebx
c001bdae:	56                   	push   esi
c001bdaf:	e8 b6 fe ff ff       	call   c001bc6a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001bdb4:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001bdbb:	83 c4 2c             	add    esp,0x2c
c001bdbe:	5b                   	pop    ebx
c001bdbf:	5e                   	pop    esi
c001bdc0:	5f                   	pop    edi
c001bdc1:	5d                   	pop    ebp
c001bdc2:	c3                   	ret    
c001bdc3:	90                   	nop

c001bdc4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001bdc4:	55                   	push   ebp
c001bdc5:	57                   	push   edi
c001bdc6:	56                   	push   esi
c001bdc7:	53                   	push   ebx
c001bdc8:	31 db                	xor    ebx,ebx
c001bdca:	83 ec 0c             	sub    esp,0xc
c001bdcd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bdd1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001bdd5:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001bdd8:	f7 c7 01 00 00 00    	test   edi,0x1
c001bdde:	74 7a                	je     c001be5a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001bde0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bde4:	89 d8                	mov    eax,ebx
c001bde6:	c1 e0 07             	shl    eax,0x7
c001bde9:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001bdf0:	55                   	push   ebp
c001bdf1:	56                   	push   esi
c001bdf2:	e8 2b fe ff ff       	call   c001bc22 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001bdf7:	5a                   	pop    edx
c001bdf8:	83 f8 01             	cmp    eax,0x1
c001bdfb:	59                   	pop    ecx
c001bdfc:	75 21                	jne    c001be1f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001bdfe:	50                   	push   eax
c001bdff:	53                   	push   ebx
c001be00:	55                   	push   ebp
c001be01:	56                   	push   esi
c001be02:	e8 ad fe ff ff       	call   c001bcb4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001be07:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001be0e:	e8 9b bc fe ff       	call   c0007aae <malloc>
c001be13:	89 c5                	mov    ebp,eax
c001be15:	89 04 24             	mov    DWORD PTR [esp],eax
c001be18:	e8 99 10 00 00       	call   c001ceb6 <SATA::SATA()>
c001be1d:	eb 24                	jmp    c001be43 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001be1f:	83 f8 04             	cmp    eax,0x4
c001be22:	75 36                	jne    c001be5a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001be24:	51                   	push   ecx
c001be25:	53                   	push   ebx
c001be26:	55                   	push   ebp
c001be27:	56                   	push   esi
c001be28:	e8 87 fe ff ff       	call   c001bcb4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001be2d:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001be34:	e8 75 bc fe ff       	call   c0007aae <malloc>
c001be39:	89 c5                	mov    ebp,eax
c001be3b:	89 04 24             	mov    DWORD PTR [esp],eax
c001be3e:	e8 d5 17 00 00       	call   c001d618 <SATAPI::SATAPI()>
c001be43:	58                   	pop    eax
c001be44:	5a                   	pop    edx
c001be45:	55                   	push   ebp
c001be46:	56                   	push   esi
c001be47:	e8 36 02 ff ff       	call   c000c082 <Device::addChild(Device*)>
c001be4c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001be4f:	56                   	push   esi
c001be50:	6a 00                	push   0x0
c001be52:	53                   	push   ebx
c001be53:	55                   	push   ebp
c001be54:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be57:	83 c4 20             	add    esp,0x20
c001be5a:	d1 ef                	shr    edi,1
c001be5c:	43                   	inc    ebx
c001be5d:	83 fb 20             	cmp    ebx,0x20
c001be60:	0f 85 72 ff ff ff    	jne    c001bdd8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001be66:	83 c4 0c             	add    esp,0xc
c001be69:	5b                   	pop    ebx
c001be6a:	5e                   	pop    esi
c001be6b:	5f                   	pop    edi
c001be6c:	5d                   	pop    ebp
c001be6d:	c3                   	ret    

c001be6e <SATABus::open(int, int, void*)>:
c001be6e:	83 ec 14             	sub    esp,0x14
c001be71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be75:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001be7b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001be81:	52                   	push   edx
c001be82:	50                   	push   eax
c001be83:	e8 3c ff ff ff       	call   c001bdc4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001be88:	31 c0                	xor    eax,eax
c001be8a:	83 c4 1c             	add    esp,0x1c
c001be8d:	c3                   	ret    

c001be8e <ATA::close(int, int, void*)>:
c001be8e:	83 ec 0c             	sub    esp,0xc
c001be91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be95:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001be9b:	85 c0                	test   eax,eax
c001be9d:	74 0c                	je     c001beab <ATA::close(int, int, void*)+0x1d>
c001be9f:	83 ec 0c             	sub    esp,0xc
c001bea2:	8b 10                	mov    edx,DWORD PTR [eax]
c001bea4:	50                   	push   eax
c001bea5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001bea8:	83 c4 10             	add    esp,0x10
c001beab:	31 c0                	xor    eax,eax
c001bead:	83 c4 0c             	add    esp,0xc
c001beb0:	c3                   	ret    
c001beb1:	90                   	nop

c001beb2 <ATA::powerSaving(PowerSavingLevel)>:
c001beb2:	c3                   	ret    
c001beb3:	90                   	nop

c001beb4 <ATA::ATA()>:
c001beb4:	83 ec 0c             	sub    esp,0xc
c001beb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bebb:	83 ec 04             	sub    esp,0x4
c001bebe:	68 00 02 00 00       	push   0x200
c001bec3:	68 25 24 02 c0       	push   0xc0022425
c001bec8:	50                   	push   eax
c001bec9:	e8 80 05 ff ff       	call   c000c44e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001bece:	83 c4 10             	add    esp,0x10
c001bed1:	ba 98 23 02 c0       	mov    edx,0xc0022398
c001bed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001beda:	89 10                	mov    DWORD PTR [eax],edx
c001bedc:	90                   	nop
c001bedd:	83 c4 0c             	add    esp,0xc
c001bee0:	c3                   	ret    
c001bee1:	90                   	nop

c001bee2 <ATA::flush(bool)>:
c001bee2:	53                   	push   ebx
c001bee3:	83 ec 08             	sub    esp,0x8
c001bee6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001beea:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001beef:	83 f8 01             	cmp    eax,0x1
c001bef2:	19 c0                	sbb    eax,eax
c001bef4:	83 e0 fd             	and    eax,0xfffffffd
c001bef7:	05 ea 00 00 00       	add    eax,0xea
c001befc:	50                   	push   eax
c001befd:	6a 07                	push   0x7
c001beff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bf06:	50                   	push   eax
c001bf07:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bf0d:	e8 16 f1 ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf12:	83 c4 0c             	add    esp,0xc
c001bf15:	6a 00                	push   0x0
c001bf17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bf1e:	50                   	push   eax
c001bf1f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bf25:	e8 e6 fb ff ff       	call   c001bb10 <IDE::polling(unsigned char, unsigned int)>
c001bf2a:	83 c4 18             	add    esp,0x18
c001bf2d:	5b                   	pop    ebx
c001bf2e:	c3                   	ret    
c001bf2f:	90                   	nop

c001bf30 <ATA::readyForCommand()>:
c001bf30:	56                   	push   esi
c001bf31:	53                   	push   ebx
c001bf32:	53                   	push   ebx
c001bf33:	31 db                	xor    ebx,ebx
c001bf35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf39:	51                   	push   ecx
c001bf3a:	6a 0c                	push   0xc
c001bf3c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bf43:	50                   	push   eax
c001bf44:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bf4a:	e8 99 f1 ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001bf4f:	83 c4 10             	add    esp,0x10
c001bf52:	a8 88                	test   al,0x88
c001bf54:	74 1f                	je     c001bf75 <ATA::readyForCommand()+0x45>
c001bf56:	43                   	inc    ebx
c001bf57:	83 fb 63             	cmp    ebx,0x63
c001bf5a:	7e dd                	jle    c001bf39 <ATA::readyForCommand()+0x9>
c001bf5c:	83 ec 0c             	sub    esp,0xc
c001bf5f:	6a 0a                	push   0xa
c001bf61:	e8 96 97 ff ff       	call   c00156fc <milliTenthSleep(unsigned int)>
c001bf66:	83 c4 10             	add    esp,0x10
c001bf69:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001bf6f:	75 c8                	jne    c001bf39 <ATA::readyForCommand()+0x9>
c001bf71:	31 c0                	xor    eax,eax
c001bf73:	eb 02                	jmp    c001bf77 <ATA::readyForCommand()+0x47>
c001bf75:	b0 01                	mov    al,0x1
c001bf77:	5a                   	pop    edx
c001bf78:	5b                   	pop    ebx
c001bf79:	5e                   	pop    esi
c001bf7a:	c3                   	ret    
c001bf7b:	90                   	nop

c001bf7c <ATA::access(unsigned long long, int, void*, bool)>:
c001bf7c:	55                   	push   ebp
c001bf7d:	57                   	push   edi
c001bf7e:	56                   	push   esi
c001bf7f:	53                   	push   ebx
c001bf80:	83 ec 2c             	sub    esp,0x2c
c001bf83:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bf87:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bf8b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bf8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf93:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bf97:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bf9b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bf9f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bfa5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bfa9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bfaf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bfb3:	c1 e0 06             	shl    eax,0x6
c001bfb6:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001bfbe:	74 5d                	je     c001c01d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001bfc0:	89 fa                	mov    edx,edi
c001bfc2:	89 f0                	mov    eax,esi
c001bfc4:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001bfc8:	c1 ea 1c             	shr    edx,0x1c
c001bfcb:	89 d1                	mov    ecx,edx
c001bfcd:	09 c1                	or     ecx,eax
c001bfcf:	74 25                	je     c001bff6 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001bfd1:	31 ed                	xor    ebp,ebp
c001bfd3:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001bfda:	89 fa                	mov    edx,edi
c001bfdc:	89 f0                	mov    eax,esi
c001bfde:	0f ad d0             	shrd   eax,edx,cl
c001bfe1:	d3 ea                	shr    edx,cl
c001bfe3:	f6 c1 20             	test   cl,0x20
c001bfe6:	74 02                	je     c001bfea <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001bfe8:	89 d0                	mov    eax,edx
c001bfea:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001bfee:	45                   	inc    ebp
c001bfef:	83 fd 06             	cmp    ebp,0x6
c001bff2:	75 df                	jne    c001bfd3 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001bff4:	eb 76                	jmp    c001c06c <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001bff6:	89 f0                	mov    eax,esi
c001bff8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001bffd:	89 fa                	mov    edx,edi
c001bfff:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c006:	0f ac d0 10          	shrd   eax,edx,0x10
c001c00a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c00f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c013:	c1 ee 18             	shr    esi,0x18
c001c016:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c01b:	eb 56                	jmp    c001c073 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c01d:	6a 00                	push   0x0
c001c01f:	6a 3f                	push   0x3f
c001c021:	57                   	push   edi
c001c022:	56                   	push   esi
c001c023:	e8 a8 2a 00 00       	call   c001ead0 <__umoddi3>
c001c028:	83 c4 10             	add    esp,0x10
c001c02b:	40                   	inc    eax
c001c02c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c030:	6a 00                	push   0x0
c001c032:	68 f0 03 00 00       	push   0x3f0
c001c037:	57                   	push   edi
c001c038:	56                   	push   esi
c001c039:	e8 92 29 00 00       	call   c001e9d0 <__udivdi3>
c001c03e:	83 c4 10             	add    esp,0x10
c001c041:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c046:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c04d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c052:	6a 00                	push   0x0
c001c054:	6a 3f                	push   0x3f
c001c056:	57                   	push   edi
c001c057:	56                   	push   esi
c001c058:	e8 73 29 00 00       	call   c001e9d0 <__udivdi3>
c001c05d:	83 c4 10             	add    esp,0x10
c001c060:	83 e0 0f             	and    eax,0xf
c001c063:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c068:	89 c6                	mov    esi,eax
c001c06a:	eb 07                	jmp    c001c073 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c06c:	31 f6                	xor    esi,esi
c001c06e:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c073:	bf 01 00 00 00       	mov    edi,0x1
c001c078:	50                   	push   eax
c001c079:	6a 00                	push   0x0
c001c07b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c082:	50                   	push   eax
c001c083:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c087:	e8 a4 f1 ff ff       	call   c001b230 <IDE::enableIRQs(unsigned char, bool)>
c001c08c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c08f:	e8 9c fe ff ff       	call   c001bf30 <ATA::readyForCommand()>
c001c094:	83 c4 10             	add    esp,0x10
c001c097:	84 c0                	test   al,al
c001c099:	0f 84 69 02 00 00    	je     c001c308 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001c09f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c0a5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c0ab:	c1 e0 04             	shl    eax,0x4
c001c0ae:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c0b5:	09 c6                	or     esi,eax
c001c0b7:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001c0bc:	75 05                	jne    c001c0c3 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c0be:	83 ce a0             	or     esi,0xffffffa0
c001c0c1:	eb 03                	jmp    c001c0c6 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c0c3:	83 ce e0             	or     esi,0xffffffe0
c001c0c6:	89 f0                	mov    eax,esi
c001c0c8:	0f b6 f0             	movzx  esi,al
c001c0cb:	56                   	push   esi
c001c0cc:	6a 06                	push   0x6
c001c0ce:	51                   	push   ecx
c001c0cf:	52                   	push   edx
c001c0d0:	e8 53 ef ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0d5:	83 c4 10             	add    esp,0x10
c001c0d8:	6a 00                	push   0x0
c001c0da:	6a 01                	push   0x1
c001c0dc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c0e3:	50                   	push   eax
c001c0e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c0ea:	e8 39 ef ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c0ef:	83 c4 10             	add    esp,0x10
c001c0f2:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001c0f7:	83 f8 02             	cmp    eax,0x2
c001c0fa:	75 6e                	jne    c001c16a <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001c0fc:	6a 00                	push   0x0
c001c0fe:	6a 08                	push   0x8
c001c100:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c107:	50                   	push   eax
c001c108:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c10e:	e8 15 ef ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c113:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c118:	50                   	push   eax
c001c119:	6a 09                	push   0x9
c001c11b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c122:	50                   	push   eax
c001c123:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c129:	e8 fa ee ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c12e:	83 c4 20             	add    esp,0x20
c001c131:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c136:	50                   	push   eax
c001c137:	6a 0a                	push   0xa
c001c139:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c140:	50                   	push   eax
c001c141:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c147:	e8 dc ee ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c14c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c151:	50                   	push   eax
c001c152:	6a 0b                	push   0xb
c001c154:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c15b:	50                   	push   eax
c001c15c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c162:	e8 c1 ee ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c167:	83 c4 20             	add    esp,0x20
c001c16a:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c16f:	50                   	push   eax
c001c170:	6a 02                	push   0x2
c001c172:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c179:	50                   	push   eax
c001c17a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c180:	e8 a3 ee ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c185:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c18a:	50                   	push   eax
c001c18b:	6a 03                	push   0x3
c001c18d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c194:	50                   	push   eax
c001c195:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c19b:	e8 88 ee ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1a0:	83 c4 20             	add    esp,0x20
c001c1a3:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c1a8:	50                   	push   eax
c001c1a9:	6a 04                	push   0x4
c001c1ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c1b2:	50                   	push   eax
c001c1b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c1b9:	e8 6a ee ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1be:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c1c3:	50                   	push   eax
c001c1c4:	6a 05                	push   0x5
c001c1c6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c1cd:	50                   	push   eax
c001c1ce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c1d4:	e8 4f ee ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1d9:	83 c4 20             	add    esp,0x20
c001c1dc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c1e1:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001c1e6:	74 11                	je     c001c1f9 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001c1e8:	b8 30 00 00 00       	mov    eax,0x30
c001c1ed:	83 fa 02             	cmp    edx,0x2
c001c1f0:	75 16                	jne    c001c208 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c1f2:	b8 34 00 00 00       	mov    eax,0x34
c001c1f7:	eb 0f                	jmp    c001c208 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c1f9:	b8 20 00 00 00       	mov    eax,0x20
c001c1fe:	83 fa 02             	cmp    edx,0x2
c001c201:	75 05                	jne    c001c208 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c203:	b8 24 00 00 00       	mov    eax,0x24
c001c208:	50                   	push   eax
c001c209:	6a 07                	push   0x7
c001c20b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c212:	50                   	push   eax
c001c213:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c219:	e8 0a ee ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c21e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c222:	83 c4 10             	add    esp,0x10
c001c225:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001c22a:	85 f6                	test   esi,esi
c001c22c:	0f 84 b3 00 00 00    	je     c001c2e5 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001c232:	50                   	push   eax
c001c233:	6a 01                	push   0x1
c001c235:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c23c:	50                   	push   eax
c001c23d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c243:	e8 c8 f8 ff ff       	call   c001bb10 <IDE::polling(unsigned char, unsigned int)>
c001c248:	83 c4 10             	add    esp,0x10
c001c24b:	0f b6 f8             	movzx  edi,al
c001c24e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c254:	85 ff                	test   edi,edi
c001c256:	74 1d                	je     c001c275 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001c258:	57                   	push   edi
c001c259:	0f b6 d2             	movzx  edx,dl
c001c25c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001c263:	50                   	push   eax
c001c264:	52                   	push   edx
c001c265:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c26b:	e8 e6 f7 ff ff       	call   c001ba56 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c270:	e9 90 00 00 00       	jmp    c001c305 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001c275:	85 ed                	test   ebp,ebp
c001c277:	74 3b                	je     c001c2b4 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001c279:	31 c9                	xor    ecx,ecx
c001c27b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c27f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c283:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001c287:	50                   	push   eax
c001c288:	50                   	push   eax
c001c289:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c290:	50                   	push   eax
c001c291:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c297:	e8 7a ed ff ff       	call   c001b016 <IDE::getBase(unsigned char)>
c001c29c:	89 c2                	mov    edx,eax
c001c29e:	89 f8                	mov    eax,edi
c001c2a0:	66 ef                	out    dx,ax
c001c2a2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c2a6:	83 c4 10             	add    esp,0x10
c001c2a9:	41                   	inc    ecx
c001c2aa:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001c2b0:	75 c9                	jne    c001c27b <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001c2b2:	eb 23                	jmp    c001c2d7 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001c2b4:	0f b6 d2             	movzx  edx,dl
c001c2b7:	51                   	push   ecx
c001c2b8:	51                   	push   ecx
c001c2b9:	52                   	push   edx
c001c2ba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c2c0:	e8 51 ed ff ff       	call   c001b016 <IDE::getBase(unsigned char)>
c001c2c5:	b9 00 01 00 00       	mov    ecx,0x100
c001c2ca:	89 c2                	mov    edx,eax
c001c2cc:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001c2d0:	fc                   	cld    
c001c2d1:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001c2d4:	83 c4 10             	add    esp,0x10
c001c2d7:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001c2df:	4e                   	dec    esi
c001c2e0:	e9 45 ff ff ff       	jmp    c001c22a <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001c2e5:	31 ff                	xor    edi,edi
c001c2e7:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c2ec:	74 1a                	je     c001c308 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001c2ee:	50                   	push   eax
c001c2ef:	50                   	push   eax
c001c2f0:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001c2f5:	83 f8 02             	cmp    eax,0x2
c001c2f8:	0f 94 c0             	sete   al
c001c2fb:	0f b6 c0             	movzx  eax,al
c001c2fe:	50                   	push   eax
c001c2ff:	53                   	push   ebx
c001c300:	e8 dd fb ff ff       	call   c001bee2 <ATA::flush(bool)>
c001c305:	83 c4 10             	add    esp,0x10
c001c308:	83 c4 2c             	add    esp,0x2c
c001c30b:	89 f8                	mov    eax,edi
c001c30d:	5b                   	pop    ebx
c001c30e:	5e                   	pop    esi
c001c30f:	5f                   	pop    edi
c001c310:	5d                   	pop    ebp
c001c311:	c3                   	ret    

c001c312 <ATA::detectCHS()>:
c001c312:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c316:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001c31c:	c1 e0 06             	shl    eax,0x6
c001c31f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001c325:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001c32f:	c7 44 24 04 7c 23 02 c0 	mov    DWORD PTR [esp+0x4],0xc002237c
c001c337:	e9 9f 48 ff ff       	jmp    c0010bdb <KePanic(char const*)>

c001c33c <ATA::open(int, int, void*)>:
c001c33c:	53                   	push   ebx
c001c33d:	83 ec 08             	sub    esp,0x8
c001c340:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c344:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c348:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c34c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c352:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c358:	c1 e0 06             	shl    eax,0x6
c001c35b:	01 d0                	add    eax,edx
c001c35d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001c364:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001c36a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001c371:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c37b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001c381:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c388:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001c38f:	75 0c                	jne    c001c39d <ATA::open(int, int, void*)+0x61>
c001c391:	83 ec 0c             	sub    esp,0xc
c001c394:	53                   	push   ebx
c001c395:	e8 78 ff ff ff       	call   c001c312 <ATA::detectCHS()>
c001c39a:	83 c4 10             	add    esp,0x10
c001c39d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c3a3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c3a9:	c1 e0 06             	shl    eax,0x6
c001c3ac:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001c3b3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c3bd:	d1 e8                	shr    eax,1
c001c3bf:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c3c5:	6a 04                	push   0x4
c001c3c7:	6a 0c                	push   0xc
c001c3c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c3d0:	50                   	push   eax
c001c3d1:	52                   	push   edx
c001c3d2:	e8 51 ec ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3d7:	90                   	nop
c001c3d8:	90                   	nop
c001c3d9:	6a 00                	push   0x0
c001c3db:	6a 0c                	push   0xc
c001c3dd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c3e4:	50                   	push   eax
c001c3e5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c3eb:	e8 38 ec ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3f0:	83 c4 14             	add    esp,0x14
c001c3f3:	53                   	push   ebx
c001c3f4:	e8 bd 00 ff ff       	call   c000c4b6 <PhysicalDisk::startCache()>
c001c3f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3fc:	e8 f9 12 ff ff       	call   c000d6fa <createPartitionsForDisk(PhysicalDisk*)>
c001c401:	31 c0                	xor    eax,eax
c001c403:	83 c4 18             	add    esp,0x18
c001c406:	5b                   	pop    ebx
c001c407:	c3                   	ret    

c001c408 <combineCharAndColour(char, unsigned char)>:
c001c408:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c40d:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001c413:	c1 e0 08             	shl    eax,0x8
c001c416:	09 d0                	or     eax,edx
c001c418:	c3                   	ret    

c001c419 <combineColours(unsigned char, unsigned char)>:
c001c419:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c41e:	c1 e0 04             	shl    eax,0x4
c001c421:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001c425:	c3                   	ret    

c001c426 <ATA::read(unsigned long long, int, void*)>:
c001c426:	55                   	push   ebp
c001c427:	57                   	push   edi
c001c428:	56                   	push   esi
c001c429:	be 04 00 00 00       	mov    esi,0x4
c001c42e:	53                   	push   ebx
c001c42f:	83 ec 0c             	sub    esp,0xc
c001c432:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c436:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c43a:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c43d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c441:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c445:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c44b:	0f 87 a1 01 00 00    	ja     c001c5f2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c451:	be 06 00 00 00       	mov    esi,0x6
c001c456:	85 c9                	test   ecx,ecx
c001c458:	0f 84 94 01 00 00    	je     c001c5f2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c45e:	55                   	push   ebp
c001c45f:	55                   	push   ebp
c001c460:	6a 00                	push   0x0
c001c462:	51                   	push   ecx
c001c463:	53                   	push   ebx
c001c464:	52                   	push   edx
c001c465:	50                   	push   eax
c001c466:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c46a:	e8 0d fb ff ff       	call   c001bf7c <ATA::access(unsigned long long, int, void*, bool)>
c001c46f:	83 c4 20             	add    esp,0x20
c001c472:	89 c6                	mov    esi,eax
c001c474:	85 c0                	test   eax,eax
c001c476:	0f 85 71 01 00 00    	jne    c001c5ed <ATA::read(unsigned long long, int, void*)+0x1c7>
c001c47c:	03 1d 54 9b 02 c0    	add    ebx,DWORD PTR ds:0xc0029b54
c001c482:	89 da                	mov    edx,ebx
c001c484:	50                   	push   eax
c001c485:	bd 10 27 00 00       	mov    ebp,0x2710
c001c48a:	50                   	push   eax
c001c48b:	89 1d 54 9b 02 c0    	mov    DWORD PTR ds:0xc0029b54,ebx
c001c491:	6a 0f                	push   0xf
c001c493:	6a 00                	push   0x0
c001c495:	e8 7f ff ff ff       	call   c001c419 <combineColours(unsigned char, unsigned char)>
c001c49a:	59                   	pop    ecx
c001c49b:	b9 0a 00 00 00       	mov    ecx,0xa
c001c4a0:	5b                   	pop    ebx
c001c4a1:	0f b6 d8             	movzx  ebx,al
c001c4a4:	89 d0                	mov    eax,edx
c001c4a6:	53                   	push   ebx
c001c4a7:	99                   	cdq    
c001c4a8:	f7 fd                	idiv   ebp
c001c4aa:	99                   	cdq    
c001c4ab:	f7 f9                	idiv   ecx
c001c4ad:	83 c2 30             	add    edx,0x30
c001c4b0:	0f b6 d2             	movzx  edx,dl
c001c4b3:	52                   	push   edx
c001c4b4:	e8 4f ff ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001c4b9:	5f                   	pop    edi
c001c4ba:	bf e8 03 00 00       	mov    edi,0x3e8
c001c4bf:	5a                   	pop    edx
c001c4c0:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c4c6:	53                   	push   ebx
c001c4c7:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c4cc:	99                   	cdq    
c001c4cd:	f7 ff                	idiv   edi
c001c4cf:	99                   	cdq    
c001c4d0:	f7 f9                	idiv   ecx
c001c4d2:	8d 42 30             	lea    eax,[edx+0x30]
c001c4d5:	0f b6 c0             	movzx  eax,al
c001c4d8:	50                   	push   eax
c001c4d9:	e8 2a ff ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001c4de:	5f                   	pop    edi
c001c4df:	bf 64 00 00 00       	mov    edi,0x64
c001c4e4:	5a                   	pop    edx
c001c4e5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c4eb:	53                   	push   ebx
c001c4ec:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c4f1:	99                   	cdq    
c001c4f2:	f7 ff                	idiv   edi
c001c4f4:	99                   	cdq    
c001c4f5:	f7 f9                	idiv   ecx
c001c4f7:	8d 42 30             	lea    eax,[edx+0x30]
c001c4fa:	0f b6 c0             	movzx  eax,al
c001c4fd:	50                   	push   eax
c001c4fe:	e8 05 ff ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001c503:	5a                   	pop    edx
c001c504:	5a                   	pop    edx
c001c505:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c50b:	53                   	push   ebx
c001c50c:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c511:	99                   	cdq    
c001c512:	f7 f9                	idiv   ecx
c001c514:	99                   	cdq    
c001c515:	f7 f9                	idiv   ecx
c001c517:	8d 42 30             	lea    eax,[edx+0x30]
c001c51a:	0f b6 c0             	movzx  eax,al
c001c51d:	50                   	push   eax
c001c51e:	e8 e5 fe ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001c523:	5a                   	pop    edx
c001c524:	5a                   	pop    edx
c001c525:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c52b:	53                   	push   ebx
c001c52c:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c531:	99                   	cdq    
c001c532:	f7 f9                	idiv   ecx
c001c534:	83 c2 30             	add    edx,0x30
c001c537:	0f b6 d2             	movzx  edx,dl
c001c53a:	52                   	push   edx
c001c53b:	e8 c8 fe ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001c540:	5a                   	pop    edx
c001c541:	5a                   	pop    edx
c001c542:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c548:	53                   	push   ebx
c001c549:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c54e:	99                   	cdq    
c001c54f:	f7 fd                	idiv   ebp
c001c551:	99                   	cdq    
c001c552:	f7 f9                	idiv   ecx
c001c554:	8d 42 30             	lea    eax,[edx+0x30]
c001c557:	0f b6 c0             	movzx  eax,al
c001c55a:	50                   	push   eax
c001c55b:	e8 a8 fe ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001c560:	5d                   	pop    ebp
c001c561:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c566:	5a                   	pop    edx
c001c567:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c56d:	53                   	push   ebx
c001c56e:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c573:	99                   	cdq    
c001c574:	f7 fd                	idiv   ebp
c001c576:	99                   	cdq    
c001c577:	f7 f9                	idiv   ecx
c001c579:	8d 42 30             	lea    eax,[edx+0x30]
c001c57c:	0f b6 c0             	movzx  eax,al
c001c57f:	50                   	push   eax
c001c580:	e8 83 fe ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001c585:	5d                   	pop    ebp
c001c586:	5a                   	pop    edx
c001c587:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c58d:	53                   	push   ebx
c001c58e:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c593:	99                   	cdq    
c001c594:	f7 ff                	idiv   edi
c001c596:	99                   	cdq    
c001c597:	f7 f9                	idiv   ecx
c001c599:	8d 42 30             	lea    eax,[edx+0x30]
c001c59c:	0f b6 c0             	movzx  eax,al
c001c59f:	50                   	push   eax
c001c5a0:	e8 63 fe ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001c5a5:	5f                   	pop    edi
c001c5a6:	5d                   	pop    ebp
c001c5a7:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c5ad:	53                   	push   ebx
c001c5ae:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c5b3:	99                   	cdq    
c001c5b4:	f7 f9                	idiv   ecx
c001c5b6:	99                   	cdq    
c001c5b7:	f7 f9                	idiv   ecx
c001c5b9:	8d 42 30             	lea    eax,[edx+0x30]
c001c5bc:	0f b6 c0             	movzx  eax,al
c001c5bf:	50                   	push   eax
c001c5c0:	e8 43 fe ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001c5c5:	5a                   	pop    edx
c001c5c6:	5f                   	pop    edi
c001c5c7:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c5cd:	53                   	push   ebx
c001c5ce:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c5d3:	99                   	cdq    
c001c5d4:	f7 f9                	idiv   ecx
c001c5d6:	83 c2 30             	add    edx,0x30
c001c5d9:	0f b6 d2             	movzx  edx,dl
c001c5dc:	52                   	push   edx
c001c5dd:	e8 26 fe ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001c5e2:	83 c4 10             	add    esp,0x10
c001c5e5:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c5eb:	eb 05                	jmp    c001c5f2 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c5ed:	be 01 00 00 00       	mov    esi,0x1
c001c5f2:	83 c4 0c             	add    esp,0xc
c001c5f5:	89 f0                	mov    eax,esi
c001c5f7:	5b                   	pop    ebx
c001c5f8:	5e                   	pop    esi
c001c5f9:	5f                   	pop    edi
c001c5fa:	5d                   	pop    ebp
c001c5fb:	c3                   	ret    

c001c5fc <ATA::write(unsigned long long, int, void*)>:
c001c5fc:	55                   	push   ebp
c001c5fd:	57                   	push   edi
c001c5fe:	56                   	push   esi
c001c5ff:	be 04 00 00 00       	mov    esi,0x4
c001c604:	53                   	push   ebx
c001c605:	83 ec 0c             	sub    esp,0xc
c001c608:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c60c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c610:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c613:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c617:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c61b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c621:	0f 87 9c 01 00 00    	ja     c001c7c3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c627:	be 06 00 00 00       	mov    esi,0x6
c001c62c:	85 c9                	test   ecx,ecx
c001c62e:	0f 84 8f 01 00 00    	je     c001c7c3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c634:	55                   	push   ebp
c001c635:	55                   	push   ebp
c001c636:	6a 01                	push   0x1
c001c638:	51                   	push   ecx
c001c639:	53                   	push   ebx
c001c63a:	52                   	push   edx
c001c63b:	50                   	push   eax
c001c63c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c640:	e8 37 f9 ff ff       	call   c001bf7c <ATA::access(unsigned long long, int, void*, bool)>
c001c645:	83 c4 20             	add    esp,0x20
c001c648:	89 c6                	mov    esi,eax
c001c64a:	85 c0                	test   eax,eax
c001c64c:	0f 85 6c 01 00 00    	jne    c001c7be <ATA::write(unsigned long long, int, void*)+0x1c2>
c001c652:	01 1d 50 9b 02 c0    	add    DWORD PTR ds:0xc0029b50,ebx
c001c658:	bd 10 27 00 00       	mov    ebp,0x2710
c001c65d:	50                   	push   eax
c001c65e:	50                   	push   eax
c001c65f:	6a 0f                	push   0xf
c001c661:	6a 00                	push   0x0
c001c663:	e8 b1 fd ff ff       	call   c001c419 <combineColours(unsigned char, unsigned char)>
c001c668:	5a                   	pop    edx
c001c669:	0f b6 d8             	movzx  ebx,al
c001c66c:	59                   	pop    ecx
c001c66d:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c672:	53                   	push   ebx
c001c673:	b9 0a 00 00 00       	mov    ecx,0xa
c001c678:	99                   	cdq    
c001c679:	f7 fd                	idiv   ebp
c001c67b:	99                   	cdq    
c001c67c:	f7 f9                	idiv   ecx
c001c67e:	8d 42 30             	lea    eax,[edx+0x30]
c001c681:	0f b6 c0             	movzx  eax,al
c001c684:	50                   	push   eax
c001c685:	e8 7e fd ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001c68a:	5f                   	pop    edi
c001c68b:	bf e8 03 00 00       	mov    edi,0x3e8
c001c690:	5a                   	pop    edx
c001c691:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c697:	53                   	push   ebx
c001c698:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c69d:	99                   	cdq    
c001c69e:	f7 ff                	idiv   edi
c001c6a0:	99                   	cdq    
c001c6a1:	f7 f9                	idiv   ecx
c001c6a3:	8d 42 30             	lea    eax,[edx+0x30]
c001c6a6:	0f b6 c0             	movzx  eax,al
c001c6a9:	50                   	push   eax
c001c6aa:	e8 59 fd ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001c6af:	5f                   	pop    edi
c001c6b0:	bf 64 00 00 00       	mov    edi,0x64
c001c6b5:	5a                   	pop    edx
c001c6b6:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c6bc:	53                   	push   ebx
c001c6bd:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c6c2:	99                   	cdq    
c001c6c3:	f7 ff                	idiv   edi
c001c6c5:	99                   	cdq    
c001c6c6:	f7 f9                	idiv   ecx
c001c6c8:	8d 42 30             	lea    eax,[edx+0x30]
c001c6cb:	0f b6 c0             	movzx  eax,al
c001c6ce:	50                   	push   eax
c001c6cf:	e8 34 fd ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001c6d4:	5a                   	pop    edx
c001c6d5:	5a                   	pop    edx
c001c6d6:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c6dc:	53                   	push   ebx
c001c6dd:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c6e2:	99                   	cdq    
c001c6e3:	f7 f9                	idiv   ecx
c001c6e5:	99                   	cdq    
c001c6e6:	f7 f9                	idiv   ecx
c001c6e8:	8d 42 30             	lea    eax,[edx+0x30]
c001c6eb:	0f b6 c0             	movzx  eax,al
c001c6ee:	50                   	push   eax
c001c6ef:	e8 14 fd ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001c6f4:	5a                   	pop    edx
c001c6f5:	5a                   	pop    edx
c001c6f6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c6fc:	53                   	push   ebx
c001c6fd:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001c702:	99                   	cdq    
c001c703:	f7 f9                	idiv   ecx
c001c705:	8d 42 30             	lea    eax,[edx+0x30]
c001c708:	0f b6 c0             	movzx  eax,al
c001c70b:	50                   	push   eax
c001c70c:	e8 f7 fc ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001c711:	5a                   	pop    edx
c001c712:	5a                   	pop    edx
c001c713:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c719:	53                   	push   ebx
c001c71a:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c71f:	99                   	cdq    
c001c720:	f7 fd                	idiv   ebp
c001c722:	99                   	cdq    
c001c723:	f7 f9                	idiv   ecx
c001c725:	8d 42 30             	lea    eax,[edx+0x30]
c001c728:	0f b6 c0             	movzx  eax,al
c001c72b:	50                   	push   eax
c001c72c:	e8 d7 fc ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001c731:	5d                   	pop    ebp
c001c732:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c737:	5a                   	pop    edx
c001c738:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c73e:	53                   	push   ebx
c001c73f:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c744:	99                   	cdq    
c001c745:	f7 fd                	idiv   ebp
c001c747:	99                   	cdq    
c001c748:	f7 f9                	idiv   ecx
c001c74a:	8d 42 30             	lea    eax,[edx+0x30]
c001c74d:	0f b6 c0             	movzx  eax,al
c001c750:	50                   	push   eax
c001c751:	e8 b2 fc ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001c756:	5d                   	pop    ebp
c001c757:	5a                   	pop    edx
c001c758:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c75e:	53                   	push   ebx
c001c75f:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c764:	99                   	cdq    
c001c765:	f7 ff                	idiv   edi
c001c767:	99                   	cdq    
c001c768:	f7 f9                	idiv   ecx
c001c76a:	8d 42 30             	lea    eax,[edx+0x30]
c001c76d:	0f b6 c0             	movzx  eax,al
c001c770:	50                   	push   eax
c001c771:	e8 92 fc ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001c776:	5f                   	pop    edi
c001c777:	5d                   	pop    ebp
c001c778:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c77e:	53                   	push   ebx
c001c77f:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c784:	99                   	cdq    
c001c785:	f7 f9                	idiv   ecx
c001c787:	99                   	cdq    
c001c788:	f7 f9                	idiv   ecx
c001c78a:	8d 42 30             	lea    eax,[edx+0x30]
c001c78d:	0f b6 c0             	movzx  eax,al
c001c790:	50                   	push   eax
c001c791:	e8 72 fc ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001c796:	5a                   	pop    edx
c001c797:	5f                   	pop    edi
c001c798:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c79e:	53                   	push   ebx
c001c79f:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001c7a4:	99                   	cdq    
c001c7a5:	f7 f9                	idiv   ecx
c001c7a7:	83 c2 30             	add    edx,0x30
c001c7aa:	0f b6 d2             	movzx  edx,dl
c001c7ad:	52                   	push   edx
c001c7ae:	e8 55 fc ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001c7b3:	83 c4 10             	add    esp,0x10
c001c7b6:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c7bc:	eb 05                	jmp    c001c7c3 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c7be:	be 01 00 00 00       	mov    esi,0x1
c001c7c3:	83 c4 0c             	add    esp,0xc
c001c7c6:	89 f0                	mov    eax,esi
c001c7c8:	5b                   	pop    ebx
c001c7c9:	5e                   	pop    esi
c001c7ca:	5f                   	pop    edi
c001c7cb:	5d                   	pop    ebp
c001c7cc:	c3                   	ret    
c001c7cd:	90                   	nop

c001c7ce <ATAPI::write(unsigned long long, int, void*)>:
c001c7ce:	b8 03 00 00 00       	mov    eax,0x3
c001c7d3:	c3                   	ret    

c001c7d4 <ATAPI::close(int, int, void*)>:
c001c7d4:	83 ec 0c             	sub    esp,0xc
c001c7d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7db:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c7e1:	85 c0                	test   eax,eax
c001c7e3:	74 0c                	je     c001c7f1 <ATAPI::close(int, int, void*)+0x1d>
c001c7e5:	83 ec 0c             	sub    esp,0xc
c001c7e8:	8b 10                	mov    edx,DWORD PTR [eax]
c001c7ea:	50                   	push   eax
c001c7eb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c7ee:	83 c4 10             	add    esp,0x10
c001c7f1:	31 c0                	xor    eax,eax
c001c7f3:	83 c4 0c             	add    esp,0xc
c001c7f6:	c3                   	ret    
c001c7f7:	90                   	nop

c001c7f8 <ATAPI::ATAPI()>:
c001c7f8:	83 ec 0c             	sub    esp,0xc
c001c7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ff:	83 ec 04             	sub    esp,0x4
c001c802:	68 00 08 00 00       	push   0x800
c001c807:	68 c5 24 02 c0       	push   0xc00224c5
c001c80c:	50                   	push   eax
c001c80d:	e8 3c fc fe ff       	call   c000c44e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c812:	83 c4 10             	add    esp,0x10
c001c815:	ba e0 23 02 c0       	mov    edx,0xc00223e0
c001c81a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c81e:	89 10                	mov    DWORD PTR [eax],edx
c001c820:	90                   	nop
c001c821:	83 c4 0c             	add    esp,0xc
c001c824:	c3                   	ret    
c001c825:	90                   	nop

c001c826 <ATAPI::readyForCommand()>:
c001c826:	56                   	push   esi
c001c827:	53                   	push   ebx
c001c828:	53                   	push   ebx
c001c829:	31 db                	xor    ebx,ebx
c001c82b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c82f:	51                   	push   ecx
c001c830:	6a 0c                	push   0xc
c001c832:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c839:	50                   	push   eax
c001c83a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c840:	e8 a3 e8 ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001c845:	83 c4 10             	add    esp,0x10
c001c848:	a8 88                	test   al,0x88
c001c84a:	74 25                	je     c001c871 <ATAPI::readyForCommand()+0x4b>
c001c84c:	43                   	inc    ebx
c001c84d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c853:	7e da                	jle    c001c82f <ATAPI::readyForCommand()+0x9>
c001c855:	83 ec 0c             	sub    esp,0xc
c001c858:	68 5e 01 00 00       	push   0x15e
c001c85d:	e8 9a 8e ff ff       	call   c00156fc <milliTenthSleep(unsigned int)>
c001c862:	83 c4 10             	add    esp,0x10
c001c865:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c86b:	75 c2                	jne    c001c82f <ATAPI::readyForCommand()+0x9>
c001c86d:	31 c0                	xor    eax,eax
c001c86f:	eb 02                	jmp    c001c873 <ATAPI::readyForCommand()+0x4d>
c001c871:	b0 01                	mov    al,0x1
c001c873:	5a                   	pop    edx
c001c874:	5b                   	pop    ebx
c001c875:	5e                   	pop    esi
c001c876:	c3                   	ret    
c001c877:	90                   	nop

c001c878 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c878:	55                   	push   ebp
c001c879:	57                   	push   edi
c001c87a:	56                   	push   esi
c001c87b:	53                   	push   ebx
c001c87c:	83 ec 20             	sub    esp,0x20
c001c87f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c883:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c887:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c88b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c88f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c893:	6a 01                	push   0x1
c001c895:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c89c:	50                   	push   eax
c001c89d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8a3:	e8 88 e9 ff ff       	call   c001b230 <IDE::enableIRQs(unsigned char, bool)>
c001c8a8:	5e                   	pop    esi
c001c8a9:	58                   	pop    eax
c001c8aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c8b1:	50                   	push   eax
c001c8b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8b8:	e8 45 e7 ff ff       	call   c001b002 <IDE::prepareInterrupt(unsigned char)>
c001c8bd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c8c0:	e8 61 ff ff ff       	call   c001c826 <ATAPI::readyForCommand()>
c001c8c5:	83 c4 10             	add    esp,0x10
c001c8c8:	84 c0                	test   al,al
c001c8ca:	75 0a                	jne    c001c8d6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001c8cc:	bb 01 00 00 00       	mov    ebx,0x1
c001c8d1:	e9 60 02 00 00       	jmp    c001cb36 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c8d6:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001c8dc:	c1 e0 04             	shl    eax,0x4
c001c8df:	0f b6 c0             	movzx  eax,al
c001c8e2:	50                   	push   eax
c001c8e3:	6a 06                	push   0x6
c001c8e5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c8ec:	50                   	push   eax
c001c8ed:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8f3:	e8 30 e7 ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8f8:	6a 00                	push   0x0
c001c8fa:	6a 01                	push   0x1
c001c8fc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c903:	50                   	push   eax
c001c904:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c90a:	e8 19 e7 ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c90f:	83 c4 20             	add    esp,0x20
c001c912:	0f b6 c3             	movzx  eax,bl
c001c915:	0f b6 df             	movzx  ebx,bh
c001c918:	50                   	push   eax
c001c919:	6a 04                	push   0x4
c001c91b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c922:	50                   	push   eax
c001c923:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c929:	e8 fa e6 ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c92e:	53                   	push   ebx
c001c92f:	6a 05                	push   0x5
c001c931:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c938:	50                   	push   eax
c001c939:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c93f:	e8 e4 e6 ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c944:	83 c4 20             	add    esp,0x20
c001c947:	68 a0 00 00 00       	push   0xa0
c001c94c:	6a 07                	push   0x7
c001c94e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c955:	50                   	push   eax
c001c956:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c95c:	e8 c7 e6 ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c961:	83 c4 0c             	add    esp,0xc
c001c964:	6a 01                	push   0x1
c001c966:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c96d:	50                   	push   eax
c001c96e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c974:	e8 97 f1 ff ff       	call   c001bb10 <IDE::polling(unsigned char, unsigned int)>
c001c979:	83 c4 10             	add    esp,0x10
c001c97c:	0f b6 d8             	movzx  ebx,al
c001c97f:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001c985:	85 db                	test   ebx,ebx
c001c987:	74 20                	je     c001c9a9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001c989:	53                   	push   ebx
c001c98a:	0f b6 c0             	movzx  eax,al
c001c98d:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001c994:	52                   	push   edx
c001c995:	50                   	push   eax
c001c996:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c99c:	e8 b5 f0 ff ff       	call   c001ba56 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c9a1:	83 c4 10             	add    esp,0x10
c001c9a4:	e9 8d 01 00 00       	jmp    c001cb36 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c9a9:	0f b6 c0             	movzx  eax,al
c001c9ac:	53                   	push   ebx
c001c9ad:	53                   	push   ebx
c001c9ae:	50                   	push   eax
c001c9af:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9b5:	e8 5c e6 ff ff       	call   c001b016 <IDE::getBase(unsigned char)>
c001c9ba:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c9be:	b9 06 00 00 00       	mov    ecx,0x6
c001c9c3:	89 c2                	mov    edx,eax
c001c9c5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c9c8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c9cc:	83 c4 10             	add    esp,0x10
c001c9cf:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c9d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c9d8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c9de:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c9e5:	85 db                	test   ebx,ebx
c001c9e7:	0f 84 ec 00 00 00    	je     c001cad9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001c9ed:	51                   	push   ecx
c001c9ee:	51                   	push   ecx
c001c9ef:	52                   	push   edx
c001c9f0:	50                   	push   eax
c001c9f1:	e8 a0 e7 ff ff       	call   c001b196 <IDE::waitInterrupt(unsigned char)>
c001c9f6:	83 c4 10             	add    esp,0x10
c001c9f9:	84 c0                	test   al,al
c001c9fb:	0f 84 cb fe ff ff    	je     c001c8cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ca01:	56                   	push   esi
c001ca02:	56                   	push   esi
c001ca03:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca0a:	50                   	push   eax
c001ca0b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca11:	e8 ec e5 ff ff       	call   c001b002 <IDE::prepareInterrupt(unsigned char)>
c001ca16:	83 c4 0c             	add    esp,0xc
c001ca19:	6a 04                	push   0x4
c001ca1b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca22:	50                   	push   eax
c001ca23:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca29:	e8 ba e6 ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001ca2e:	83 c4 0c             	add    esp,0xc
c001ca31:	89 c6                	mov    esi,eax
c001ca33:	6a 05                	push   0x5
c001ca35:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ca3c:	50                   	push   eax
c001ca3d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ca43:	e8 a0 e6 ff ff       	call   c001b0e8 <IDE::read(unsigned char, unsigned char)>
c001ca48:	89 f1                	mov    ecx,esi
c001ca4a:	0f b6 c0             	movzx  eax,al
c001ca4d:	0f b6 f1             	movzx  esi,cl
c001ca50:	c1 e0 08             	shl    eax,0x8
c001ca53:	09 c6                	or     esi,eax
c001ca55:	d1 fe                	sar    esi,1
c001ca57:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ca5b:	83 c4 10             	add    esp,0x10
c001ca5e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ca63:	74 41                	je     c001caa6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001ca65:	31 c9                	xor    ecx,ecx
c001ca67:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ca6d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ca74:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ca78:	75 0a                	jne    c001ca84 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001ca7a:	01 c9                	add    ecx,ecx
c001ca7c:	01 cd                	add    ebp,ecx
c001ca7e:	4b                   	dec    ebx
c001ca7f:	e9 54 ff ff ff       	jmp    c001c9d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001ca84:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ca89:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ca8d:	51                   	push   ecx
c001ca8e:	51                   	push   ecx
c001ca8f:	52                   	push   edx
c001ca90:	50                   	push   eax
c001ca91:	e8 80 e5 ff ff       	call   c001b016 <IDE::getBase(unsigned char)>
c001ca96:	89 c2                	mov    edx,eax
c001ca98:	89 f0                	mov    eax,esi
c001ca9a:	66 ef                	out    dx,ax
c001ca9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001caa0:	83 c4 10             	add    esp,0x10
c001caa3:	41                   	inc    ecx
c001caa4:	eb c1                	jmp    c001ca67 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001caa6:	31 f6                	xor    esi,esi
c001caa8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001caae:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cab5:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001cab9:	75 06                	jne    c001cac1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001cabb:	01 f6                	add    esi,esi
c001cabd:	01 f5                	add    ebp,esi
c001cabf:	eb bd                	jmp    c001ca7e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001cac1:	51                   	push   ecx
c001cac2:	51                   	push   ecx
c001cac3:	52                   	push   edx
c001cac4:	50                   	push   eax
c001cac5:	e8 4c e5 ff ff       	call   c001b016 <IDE::getBase(unsigned char)>
c001caca:	89 c2                	mov    edx,eax
c001cacc:	66 ed                	in     ax,dx
c001cace:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001cad3:	83 c4 10             	add    esp,0x10
c001cad6:	46                   	inc    esi
c001cad7:	eb cf                	jmp    c001caa8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001cad9:	51                   	push   ecx
c001cada:	51                   	push   ecx
c001cadb:	52                   	push   edx
c001cadc:	50                   	push   eax
c001cadd:	e8 b4 e6 ff ff       	call   c001b196 <IDE::waitInterrupt(unsigned char)>
c001cae2:	83 c4 10             	add    esp,0x10
c001cae5:	84 c0                	test   al,al
c001cae7:	0f 84 df fd ff ff    	je     c001c8cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001caed:	bb a0 86 01 00       	mov    ebx,0x186a0
c001caf2:	52                   	push   edx
c001caf3:	52                   	push   edx
c001caf4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cafb:	50                   	push   eax
c001cafc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb02:	e8 fb e4 ff ff       	call   c001b002 <IDE::prepareInterrupt(unsigned char)>
c001cb07:	83 c4 10             	add    esp,0x10
c001cb0a:	50                   	push   eax
c001cb0b:	50                   	push   eax
c001cb0c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cb13:	50                   	push   eax
c001cb14:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cb1a:	e8 f7 e4 ff ff       	call   c001b016 <IDE::getBase(unsigned char)>
c001cb1f:	8d 50 07             	lea    edx,[eax+0x7]
c001cb22:	ec                   	in     al,dx
c001cb23:	83 c4 10             	add    esp,0x10
c001cb26:	a8 88                	test   al,0x88
c001cb28:	74 0a                	je     c001cb34 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001cb2a:	4b                   	dec    ebx
c001cb2b:	75 dd                	jne    c001cb0a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001cb2d:	bb 02 00 00 00       	mov    ebx,0x2
c001cb32:	eb 02                	jmp    c001cb36 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001cb34:	31 db                	xor    ebx,ebx
c001cb36:	83 c4 1c             	add    esp,0x1c
c001cb39:	89 d8                	mov    eax,ebx
c001cb3b:	5b                   	pop    ebx
c001cb3c:	5e                   	pop    esi
c001cb3d:	5f                   	pop    edi
c001cb3e:	5d                   	pop    ebp
c001cb3f:	c3                   	ret    

c001cb40 <ATAPI::diskRemoved()>:
c001cb40:	53                   	push   ebx
c001cb41:	83 ec 14             	sub    esp,0x14
c001cb44:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cb48:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001cb4f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001cb55:	e8 90 08 ff ff       	call   c000d3ea <LogicalDisk::unmount()>
c001cb5a:	58                   	pop    eax
c001cb5b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001cb61:	e8 66 12 ff ff       	call   c000ddcc <VCache::writeWriteBuffer()>
c001cb66:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001cb6c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb70:	83 c4 18             	add    esp,0x18
c001cb73:	5b                   	pop    ebx
c001cb74:	e9 43 12 ff ff       	jmp    c000ddbc <VCache::invalidateReadBuffer()>
c001cb79:	90                   	nop

c001cb7a <ATAPI::eject()>:
c001cb7a:	57                   	push   edi
c001cb7b:	b9 03 00 00 00       	mov    ecx,0x3
c001cb80:	53                   	push   ebx
c001cb81:	83 ec 14             	sub    esp,0x14
c001cb84:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cb88:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cb8c:	fc                   	cld    
c001cb8d:	31 c0                	xor    eax,eax
c001cb8f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cb91:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001cb96:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001cb9b:	50                   	push   eax
c001cb9c:	50                   	push   eax
c001cb9d:	6a 00                	push   0x0
c001cb9f:	6a 00                	push   0x0
c001cba1:	6a 00                	push   0x0
c001cba3:	6a 02                	push   0x2
c001cba5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cba9:	50                   	push   eax
c001cbaa:	53                   	push   ebx
c001cbab:	e8 c8 fc ff ff       	call   c001c878 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cbb0:	83 c4 14             	add    esp,0x14
c001cbb3:	53                   	push   ebx
c001cbb4:	e8 87 ff ff ff       	call   c001cb40 <ATAPI::diskRemoved()>
c001cbb9:	83 c4 24             	add    esp,0x24
c001cbbc:	31 c0                	xor    eax,eax
c001cbbe:	5b                   	pop    ebx
c001cbbf:	5f                   	pop    edi
c001cbc0:	c3                   	ret    
c001cbc1:	90                   	nop

c001cbc2 <ATAPI::diskInserted()>:
c001cbc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbc6:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001cbcd:	c3                   	ret    

c001cbce <ATAPI::detectMedia()>:
c001cbce:	56                   	push   esi
c001cbcf:	53                   	push   ebx
c001cbd0:	83 ec 28             	sub    esp,0x28
c001cbd3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cbd7:	6a 0c                	push   0xc
c001cbd9:	6a 00                	push   0x0
c001cbdb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001cbdf:	56                   	push   esi
c001cbe0:	e8 0b 39 fe ff       	call   c00004f0 <memset>
c001cbe5:	58                   	pop    eax
c001cbe6:	5a                   	pop    edx
c001cbe7:	6a 00                	push   0x0
c001cbe9:	6a 00                	push   0x0
c001cbeb:	6a 00                	push   0x0
c001cbed:	6a 00                	push   0x0
c001cbef:	56                   	push   esi
c001cbf0:	53                   	push   ebx
c001cbf1:	e8 82 fc ff ff       	call   c001c878 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cbf6:	83 c4 1c             	add    esp,0x1c
c001cbf9:	6a 0c                	push   0xc
c001cbfb:	6a 00                	push   0x0
c001cbfd:	56                   	push   esi
c001cbfe:	e8 ed 38 fe ff       	call   c00004f0 <memset>
c001cc03:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001cc08:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001cc0d:	59                   	pop    ecx
c001cc0e:	58                   	pop    eax
c001cc0f:	6a 01                	push   0x1
c001cc11:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001cc15:	50                   	push   eax
c001cc16:	6a 00                	push   0x0
c001cc18:	6a 12                	push   0x12
c001cc1a:	56                   	push   esi
c001cc1b:	53                   	push   ebx
c001cc1c:	e8 57 fc ff ff       	call   c001c878 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cc21:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001cc25:	83 c4 20             	add    esp,0x20
c001cc28:	83 e0 7f             	and    eax,0x7f
c001cc2b:	83 f8 70             	cmp    eax,0x70
c001cc2e:	74 15                	je     c001cc45 <ATAPI::detectMedia()+0x77>
c001cc30:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cc37:	75 0c                	jne    c001cc45 <ATAPI::detectMedia()+0x77>
c001cc39:	83 ec 0c             	sub    esp,0xc
c001cc3c:	53                   	push   ebx
c001cc3d:	e8 80 ff ff ff       	call   c001cbc2 <ATAPI::diskInserted()>
c001cc42:	83 c4 10             	add    esp,0x10
c001cc45:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001cc49:	83 e0 0f             	and    eax,0xf
c001cc4c:	83 f8 02             	cmp    eax,0x2
c001cc4f:	75 1b                	jne    c001cc6c <ATAPI::detectMedia()+0x9e>
c001cc51:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001cc56:	75 2d                	jne    c001cc85 <ATAPI::detectMedia()+0xb7>
c001cc58:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cc5f:	74 24                	je     c001cc85 <ATAPI::detectMedia()+0xb7>
c001cc61:	83 ec 0c             	sub    esp,0xc
c001cc64:	53                   	push   ebx
c001cc65:	e8 d6 fe ff ff       	call   c001cb40 <ATAPI::diskRemoved()>
c001cc6a:	eb 16                	jmp    c001cc82 <ATAPI::detectMedia()+0xb4>
c001cc6c:	85 c0                	test   eax,eax
c001cc6e:	75 15                	jne    c001cc85 <ATAPI::detectMedia()+0xb7>
c001cc70:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cc77:	75 0c                	jne    c001cc85 <ATAPI::detectMedia()+0xb7>
c001cc79:	83 ec 0c             	sub    esp,0xc
c001cc7c:	53                   	push   ebx
c001cc7d:	e8 40 ff ff ff       	call   c001cbc2 <ATAPI::diskInserted()>
c001cc82:	83 c4 10             	add    esp,0x10
c001cc85:	83 c4 24             	add    esp,0x24
c001cc88:	5b                   	pop    ebx
c001cc89:	5e                   	pop    esi
c001cc8a:	c3                   	ret    
c001cc8b:	90                   	nop

c001cc8c <ATAPI::open(int, int, void*)>:
c001cc8c:	56                   	push   esi
c001cc8d:	53                   	push   ebx
c001cc8e:	50                   	push   eax
c001cc8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc97:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc9b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cca1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cca7:	c1 e0 06             	shl    eax,0x6
c001ccaa:	01 d0                	add    eax,edx
c001ccac:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001ccb3:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001ccb9:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001ccc0:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ccca:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ccd0:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ccd7:	6a 04                	push   0x4
c001ccd9:	6a 0c                	push   0xc
c001ccdb:	51                   	push   ecx
c001ccdc:	52                   	push   edx
c001ccdd:	e8 46 e3 ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cce2:	90                   	nop
c001cce3:	90                   	nop
c001cce4:	6a 00                	push   0x0
c001cce6:	6a 0c                	push   0xc
c001cce8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ccef:	50                   	push   eax
c001ccf0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ccf6:	e8 2d e3 ff ff       	call   c001b028 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccfb:	83 c4 14             	add    esp,0x14
c001ccfe:	68 78 01 00 00       	push   0x178
c001cd03:	e8 a6 ad fe ff       	call   c0007aae <malloc>
c001cd08:	83 c4 0c             	add    esp,0xc
c001cd0b:	89 c6                	mov    esi,eax
c001cd0d:	6a 00                	push   0x0
c001cd0f:	68 ff ff ff 7f       	push   0x7fffffff
c001cd14:	6a 00                	push   0x0
c001cd16:	6a 00                	push   0x0
c001cd18:	53                   	push   ebx
c001cd19:	68 77 25 02 c0       	push   0xc0022577
c001cd1e:	50                   	push   eax
c001cd1f:	e8 04 05 ff ff       	call   c000d228 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001cd24:	83 c4 14             	add    esp,0x14
c001cd27:	56                   	push   esi
c001cd28:	e8 bb 05 ff ff       	call   c000d2e8 <LogicalDisk::assignDriveLetter()>
c001cd2d:	5a                   	pop    edx
c001cd2e:	0f be c0             	movsx  eax,al
c001cd31:	59                   	pop    ecx
c001cd32:	50                   	push   eax
c001cd33:	68 c8 23 02 c0       	push   0xc00223c8
c001cd38:	e8 3a dc fe ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c001cd3d:	58                   	pop    eax
c001cd3e:	5a                   	pop    edx
c001cd3f:	56                   	push   esi
c001cd40:	53                   	push   ebx
c001cd41:	e8 3c f3 fe ff       	call   c000c082 <Device::addChild(Device*)>
c001cd46:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001cd4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd4f:	e8 62 f7 fe ff       	call   c000c4b6 <PhysicalDisk::startCache()>
c001cd54:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001cd5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd5e:	e8 6b fe ff ff       	call   c001cbce <ATAPI::detectMedia()>
c001cd63:	83 c4 14             	add    esp,0x14
c001cd66:	31 c0                	xor    eax,eax
c001cd68:	5b                   	pop    ebx
c001cd69:	5e                   	pop    esi
c001cd6a:	c3                   	ret    
c001cd6b:	90                   	nop

c001cd6c <ATAPI::read(unsigned long long, int, void*)>:
c001cd6c:	55                   	push   ebp
c001cd6d:	57                   	push   edi
c001cd6e:	56                   	push   esi
c001cd6f:	53                   	push   ebx
c001cd70:	83 ec 1c             	sub    esp,0x1c
c001cd73:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cd77:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001cd7b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001cd7f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cd86:	74 3c                	je     c001cdc4 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001cd88:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cd8c:	b9 03 00 00 00       	mov    ecx,0x3
c001cd91:	fc                   	cld    
c001cd92:	31 c0                	xor    eax,eax
c001cd94:	0f ce                	bswap  esi
c001cd96:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cd98:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001cd9d:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001cda1:	89 e8                	mov    eax,ebp
c001cda3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001cda7:	50                   	push   eax
c001cda8:	50                   	push   eax
c001cda9:	55                   	push   ebp
c001cdaa:	c1 e5 0b             	shl    ebp,0xb
c001cdad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cdb1:	6a 00                	push   0x0
c001cdb3:	55                   	push   ebp
c001cdb4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cdb8:	50                   	push   eax
c001cdb9:	53                   	push   ebx
c001cdba:	e8 b9 fa ff ff       	call   c001c878 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cdbf:	83 c4 20             	add    esp,0x20
c001cdc2:	eb 1a                	jmp    c001cdde <ATAPI::read(unsigned long long, int, void*)+0x72>
c001cdc4:	83 ec 0c             	sub    esp,0xc
c001cdc7:	53                   	push   ebx
c001cdc8:	e8 01 fe ff ff       	call   c001cbce <ATAPI::detectMedia()>
c001cdcd:	83 c4 10             	add    esp,0x10
c001cdd0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cdd7:	75 af                	jne    c001cd88 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001cdd9:	b8 02 00 00 00       	mov    eax,0x2
c001cdde:	83 c4 1c             	add    esp,0x1c
c001cde1:	5b                   	pop    ebx
c001cde2:	5e                   	pop    esi
c001cde3:	5f                   	pop    edi
c001cde4:	5d                   	pop    ebp
c001cde5:	c3                   	ret    

c001cde6 <SATA::close(int, int, void*)>:
c001cde6:	83 ec 0c             	sub    esp,0xc
c001cde9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cded:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cdf3:	85 c0                	test   eax,eax
c001cdf5:	74 0c                	je     c001ce03 <SATA::close(int, int, void*)+0x1d>
c001cdf7:	83 ec 0c             	sub    esp,0xc
c001cdfa:	8b 10                	mov    edx,DWORD PTR [eax]
c001cdfc:	50                   	push   eax
c001cdfd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ce00:	83 c4 10             	add    esp,0x10
c001ce03:	31 c0                	xor    eax,eax
c001ce05:	83 c4 0c             	add    esp,0xc
c001ce08:	c3                   	ret    
c001ce09:	90                   	nop

c001ce0a <SATA::powerSaving(PowerSavingLevel)>:
c001ce0a:	c3                   	ret    
c001ce0b:	90                   	nop

c001ce0c <SATA::open(int, int, void*)>:
c001ce0c:	56                   	push   esi
c001ce0d:	53                   	push   ebx
c001ce0e:	50                   	push   eax
c001ce0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ce13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ce17:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ce21:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ce27:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ce31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce35:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ce3f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ce45:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ce4c:	e8 61 af fe ff       	call   c0007db2 <Phys::allocatePage()>
c001ce51:	89 c6                	mov    esi,eax
c001ce53:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ce59:	81 c6 00 10 00 00    	add    esi,0x1000
c001ce5f:	e8 4e af fe ff       	call   c0007db2 <Phys::allocatePage()>
c001ce64:	39 c6                	cmp    esi,eax
c001ce66:	74 10                	je     c001ce78 <SATA::open(int, int, void*)+0x6c>
c001ce68:	83 ec 0c             	sub    esp,0xc
c001ce6b:	68 10 24 02 c0       	push   0xc0022410
c001ce70:	e8 66 3d ff ff       	call   c0010bdb <KePanic(char const*)>
c001ce75:	83 c4 10             	add    esp,0x10
c001ce78:	83 ec 0c             	sub    esp,0xc
c001ce7b:	6a 02                	push   0x2
c001ce7d:	e8 7f c7 fe ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c001ce82:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ce88:	6a 03                	push   0x3
c001ce8a:	50                   	push   eax
c001ce8b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ce91:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001ce97:	e8 76 ce fe ff       	call   c0009d12 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ce9c:	83 c4 14             	add    esp,0x14
c001ce9f:	53                   	push   ebx
c001cea0:	e8 11 f6 fe ff       	call   c000c4b6 <PhysicalDisk::startCache()>
c001cea5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cea8:	e8 4d 08 ff ff       	call   c000d6fa <createPartitionsForDisk(PhysicalDisk*)>
c001cead:	83 c4 14             	add    esp,0x14
c001ceb0:	31 c0                	xor    eax,eax
c001ceb2:	5b                   	pop    ebx
c001ceb3:	5e                   	pop    esi
c001ceb4:	c3                   	ret    
c001ceb5:	90                   	nop

c001ceb6 <SATA::SATA()>:
c001ceb6:	83 ec 0c             	sub    esp,0xc
c001ceb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cebd:	83 ec 04             	sub    esp,0x4
c001cec0:	68 00 02 00 00       	push   0x200
c001cec5:	68 24 24 02 c0       	push   0xc0022424
c001ceca:	50                   	push   eax
c001cecb:	e8 7e f5 fe ff       	call   c000c44e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ced0:	83 c4 10             	add    esp,0x10
c001ced3:	ba 94 24 02 c0       	mov    edx,0xc0022494
c001ced8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cedc:	89 10                	mov    DWORD PTR [eax],edx
c001cede:	90                   	nop
c001cedf:	83 c4 0c             	add    esp,0xc
c001cee2:	c3                   	ret    
c001cee3:	90                   	nop

c001cee4 <SATA::access(unsigned long long, int, void*, bool)>:
c001cee4:	55                   	push   ebp
c001cee5:	57                   	push   edi
c001cee6:	56                   	push   esi
c001cee7:	53                   	push   ebx
c001cee8:	83 ec 2c             	sub    esp,0x2c
c001ceeb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ceef:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cef3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cef7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cefb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ceff:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001cf04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf08:	7e 10                	jle    c001cf1a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001cf0a:	83 ec 0c             	sub    esp,0xc
c001cf0d:	68 34 24 02 c0       	push   0xc0022434
c001cf12:	e8 c4 3c ff ff       	call   c0010bdb <KePanic(char const*)>
c001cf17:	83 c4 10             	add    esp,0x10
c001cf1a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cf20:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001cf26:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cf2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf30:	89 d0                	mov    eax,edx
c001cf32:	c1 e0 07             	shl    eax,0x7
c001cf35:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cf39:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cf43:	51                   	push   ecx
c001cf44:	8d 42 02             	lea    eax,[edx+0x2]
c001cf47:	51                   	push   ecx
c001cf48:	c1 e0 07             	shl    eax,0x7
c001cf4b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cf4f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001cf53:	50                   	push   eax
c001cf54:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001cf5a:	e8 91 ec ff ff       	call   c001bbf0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cf5f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf63:	83 c4 10             	add    esp,0x10
c001cf66:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001cf6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf6f:	0f 84 57 01 00 00    	je     c001d0cc <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cf75:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cf79:	c1 e0 09             	shl    eax,0x9
c001cf7c:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf85:	74 0e                	je     c001cf95 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001cf87:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001cf8d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001cf91:	89 c1                	mov    ecx,eax
c001cf93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cf95:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cf9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cf9f:	8d 42 02             	lea    eax,[edx+0x2]
c001cfa2:	c1 e0 07             	shl    eax,0x7
c001cfa5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cfa9:	8b 00                	mov    eax,DWORD PTR [eax]
c001cfab:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cfb1:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cfb7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cfbb:	c1 e1 05             	shl    ecx,0x5
c001cfbe:	01 c8                	add    eax,ecx
c001cfc0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cfc4:	83 e1 01             	and    ecx,0x1
c001cfc7:	89 ce                	mov    esi,ecx
c001cfc9:	8a 08                	mov    cl,BYTE PTR [eax]
c001cfcb:	c1 e6 06             	shl    esi,0x6
c001cfce:	83 e1 bf             	and    ecx,0xffffffbf
c001cfd1:	09 f1                	or     ecx,esi
c001cfd3:	88 08                	mov    BYTE PTR [eax],cl
c001cfd5:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cfd7:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001cfdd:	81 c9 05 00 01 00    	or     ecx,0x10005
c001cfe3:	89 08                	mov    DWORD PTR [eax],ecx
c001cfe5:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cfeb:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001cff1:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001cff7:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001cffa:	50                   	push   eax
c001cffb:	68 90 00 00 00       	push   0x90
c001d000:	6a 00                	push   0x0
c001d002:	56                   	push   esi
c001d003:	e8 e8 34 fe ff       	call   c00004f0 <memset>
c001d008:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d00e:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d014:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d018:	83 c4 10             	add    esp,0x10
c001d01b:	48                   	dec    eax
c001d01c:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d021:	89 c1                	mov    ecx,eax
c001d023:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d029:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d02e:	09 c8                	or     eax,ecx
c001d030:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d036:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d03c:	83 c8 80             	or     eax,0xffffff80
c001d03f:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d045:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d048:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d04c:	25 00 7f 00 00       	and    eax,0x7f00
c001d051:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d056:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d05b:	66 89 06             	mov    WORD PTR [esi],ax
c001d05e:	b0 35                	mov    al,0x35
c001d060:	75 02                	jne    c001d064 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001d062:	b0 25                	mov    al,0x25
c001d064:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d067:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001d06b:	89 e8                	mov    eax,ebp
c001d06d:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d071:	c1 e8 10             	shr    eax,0x10
c001d074:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d077:	89 e8                	mov    eax,ebp
c001d079:	c1 e8 18             	shr    eax,0x18
c001d07c:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d07f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d083:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d086:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d08a:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d08d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d091:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d095:	89 d6                	mov    esi,edx
c001d097:	31 c0                	xor    eax,eax
c001d099:	c1 e6 07             	shl    esi,0x7
c001d09c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d0a0:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d0a6:	80 e1 88             	and    cl,0x88
c001d0a9:	74 0a                	je     c001d0b5 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d0ab:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d0b0:	74 0a                	je     c001d0bc <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d0b2:	40                   	inc    eax
c001d0b3:	eb eb                	jmp    c001d0a0 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d0b5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d0ba:	75 17                	jne    c001d0d3 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d0bc:	83 ec 0c             	sub    esp,0xc
c001d0bf:	68 6d 24 02 c0       	push   0xc002246d
c001d0c4:	e8 ae d8 fe ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c001d0c9:	83 c4 10             	add    esp,0x10
c001d0cc:	b8 01 00 00 00       	mov    eax,0x1
c001d0d1:	eb 5d                	jmp    c001d130 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d0d3:	b8 01 00 00 00       	mov    eax,0x1
c001d0d8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d0dc:	c1 e2 07             	shl    edx,0x7
c001d0df:	d3 e0                	shl    eax,cl
c001d0e1:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001d0e5:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d0eb:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d0f1:	85 c8                	test   eax,ecx
c001d0f3:	74 16                	je     c001d10b <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001d0f5:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d0fb:	0f ba e1 1e          	bt     ecx,0x1e
c001d0ff:	73 ea                	jae    c001d0eb <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001d101:	83 ec 0c             	sub    esp,0xc
c001d104:	68 7b 24 02 c0       	push   0xc002247b
c001d109:	eb b9                	jmp    c001d0c4 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d10b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d111:	0f ba e0 1e          	bt     eax,0x1e
c001d115:	72 b5                	jb     c001d0cc <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d117:	31 c0                	xor    eax,eax
c001d119:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d11e:	75 10                	jne    c001d130 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d120:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d126:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d12a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d12e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d130:	83 c4 2c             	add    esp,0x2c
c001d133:	5b                   	pop    ebx
c001d134:	5e                   	pop    esi
c001d135:	5f                   	pop    edi
c001d136:	5d                   	pop    ebp
c001d137:	c3                   	ret    

c001d138 <SATA::read(unsigned long long, int, void*)>:
c001d138:	55                   	push   ebp
c001d139:	57                   	push   edi
c001d13a:	56                   	push   esi
c001d13b:	be 04 00 00 00       	mov    esi,0x4
c001d140:	53                   	push   ebx
c001d141:	83 ec 0c             	sub    esp,0xc
c001d144:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d148:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d14c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d14f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d153:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d157:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d15d:	0f 87 1a 02 00 00    	ja     c001d37d <SATA::read(unsigned long long, int, void*)+0x245>
c001d163:	be 06 00 00 00       	mov    esi,0x6
c001d168:	85 c9                	test   ecx,ecx
c001d16a:	0f 84 0d 02 00 00    	je     c001d37d <SATA::read(unsigned long long, int, void*)+0x245>
c001d170:	56                   	push   esi
c001d171:	56                   	push   esi
c001d172:	6a 00                	push   0x0
c001d174:	51                   	push   ecx
c001d175:	53                   	push   ebx
c001d176:	52                   	push   edx
c001d177:	50                   	push   eax
c001d178:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d17c:	e8 63 fd ff ff       	call   c001cee4 <SATA::access(unsigned long long, int, void*, bool)>
c001d181:	83 c4 20             	add    esp,0x20
c001d184:	89 c6                	mov    esi,eax
c001d186:	85 c0                	test   eax,eax
c001d188:	0f 85 ea 01 00 00    	jne    c001d378 <SATA::read(unsigned long long, int, void*)+0x240>
c001d18e:	01 1d 54 9b 02 c0    	add    DWORD PTR ds:0xc0029b54,ebx
c001d194:	bb 0a 00 00 00       	mov    ebx,0xa
c001d199:	50                   	push   eax
c001d19a:	50                   	push   eax
c001d19b:	6a 0f                	push   0xf
c001d19d:	6a 00                	push   0x0
c001d19f:	e8 75 f2 ff ff       	call   c001c419 <combineColours(unsigned char, unsigned char)>
c001d1a4:	5a                   	pop    edx
c001d1a5:	0f b6 c0             	movzx  eax,al
c001d1a8:	59                   	pop    ecx
c001d1a9:	b9 10 27 00 00       	mov    ecx,0x2710
c001d1ae:	50                   	push   eax
c001d1af:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d1b4:	99                   	cdq    
c001d1b5:	f7 f9                	idiv   ecx
c001d1b7:	99                   	cdq    
c001d1b8:	f7 fb                	idiv   ebx
c001d1ba:	8d 42 30             	lea    eax,[edx+0x30]
c001d1bd:	0f b6 c0             	movzx  eax,al
c001d1c0:	50                   	push   eax
c001d1c1:	e8 42 f2 ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001d1c6:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d1cc:	5f                   	pop    edi
c001d1cd:	5d                   	pop    ebp
c001d1ce:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d1d3:	6a 0f                	push   0xf
c001d1d5:	6a 00                	push   0x0
c001d1d7:	e8 3d f2 ff ff       	call   c001c419 <combineColours(unsigned char, unsigned char)>
c001d1dc:	5a                   	pop    edx
c001d1dd:	0f b6 c0             	movzx  eax,al
c001d1e0:	59                   	pop    ecx
c001d1e1:	50                   	push   eax
c001d1e2:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d1e7:	99                   	cdq    
c001d1e8:	f7 fd                	idiv   ebp
c001d1ea:	99                   	cdq    
c001d1eb:	f7 fb                	idiv   ebx
c001d1ed:	8d 42 30             	lea    eax,[edx+0x30]
c001d1f0:	0f b6 c0             	movzx  eax,al
c001d1f3:	50                   	push   eax
c001d1f4:	e8 0f f2 ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001d1f9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d1ff:	5f                   	pop    edi
c001d200:	bf 64 00 00 00       	mov    edi,0x64
c001d205:	58                   	pop    eax
c001d206:	6a 0f                	push   0xf
c001d208:	6a 00                	push   0x0
c001d20a:	e8 0a f2 ff ff       	call   c001c419 <combineColours(unsigned char, unsigned char)>
c001d20f:	5a                   	pop    edx
c001d210:	0f b6 c0             	movzx  eax,al
c001d213:	59                   	pop    ecx
c001d214:	50                   	push   eax
c001d215:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d21a:	99                   	cdq    
c001d21b:	f7 ff                	idiv   edi
c001d21d:	99                   	cdq    
c001d21e:	f7 fb                	idiv   ebx
c001d220:	8d 42 30             	lea    eax,[edx+0x30]
c001d223:	0f b6 c0             	movzx  eax,al
c001d226:	50                   	push   eax
c001d227:	e8 dc f1 ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001d22c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d232:	58                   	pop    eax
c001d233:	5a                   	pop    edx
c001d234:	6a 0f                	push   0xf
c001d236:	6a 00                	push   0x0
c001d238:	e8 dc f1 ff ff       	call   c001c419 <combineColours(unsigned char, unsigned char)>
c001d23d:	59                   	pop    ecx
c001d23e:	0f b6 c0             	movzx  eax,al
c001d241:	5a                   	pop    edx
c001d242:	50                   	push   eax
c001d243:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d248:	99                   	cdq    
c001d249:	f7 fb                	idiv   ebx
c001d24b:	99                   	cdq    
c001d24c:	f7 fb                	idiv   ebx
c001d24e:	8d 42 30             	lea    eax,[edx+0x30]
c001d251:	0f b6 c0             	movzx  eax,al
c001d254:	50                   	push   eax
c001d255:	e8 ae f1 ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001d25a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d260:	59                   	pop    ecx
c001d261:	58                   	pop    eax
c001d262:	6a 0f                	push   0xf
c001d264:	6a 00                	push   0x0
c001d266:	e8 ae f1 ff ff       	call   c001c419 <combineColours(unsigned char, unsigned char)>
c001d26b:	5a                   	pop    edx
c001d26c:	0f b6 c0             	movzx  eax,al
c001d26f:	59                   	pop    ecx
c001d270:	50                   	push   eax
c001d271:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d276:	99                   	cdq    
c001d277:	f7 fb                	idiv   ebx
c001d279:	8d 42 30             	lea    eax,[edx+0x30]
c001d27c:	0f b6 c0             	movzx  eax,al
c001d27f:	50                   	push   eax
c001d280:	e8 83 f1 ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001d285:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d28b:	58                   	pop    eax
c001d28c:	5a                   	pop    edx
c001d28d:	6a 0f                	push   0xf
c001d28f:	6a 00                	push   0x0
c001d291:	e8 83 f1 ff ff       	call   c001c419 <combineColours(unsigned char, unsigned char)>
c001d296:	59                   	pop    ecx
c001d297:	0f b6 c0             	movzx  eax,al
c001d29a:	5a                   	pop    edx
c001d29b:	b9 10 27 00 00       	mov    ecx,0x2710
c001d2a0:	50                   	push   eax
c001d2a1:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d2a6:	99                   	cdq    
c001d2a7:	f7 f9                	idiv   ecx
c001d2a9:	99                   	cdq    
c001d2aa:	f7 fb                	idiv   ebx
c001d2ac:	8d 42 30             	lea    eax,[edx+0x30]
c001d2af:	0f b6 c0             	movzx  eax,al
c001d2b2:	50                   	push   eax
c001d2b3:	e8 50 f1 ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001d2b8:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d2be:	59                   	pop    ecx
c001d2bf:	58                   	pop    eax
c001d2c0:	6a 0f                	push   0xf
c001d2c2:	6a 00                	push   0x0
c001d2c4:	e8 50 f1 ff ff       	call   c001c419 <combineColours(unsigned char, unsigned char)>
c001d2c9:	5a                   	pop    edx
c001d2ca:	0f b6 c0             	movzx  eax,al
c001d2cd:	59                   	pop    ecx
c001d2ce:	50                   	push   eax
c001d2cf:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d2d4:	99                   	cdq    
c001d2d5:	f7 fd                	idiv   ebp
c001d2d7:	99                   	cdq    
c001d2d8:	f7 fb                	idiv   ebx
c001d2da:	8d 42 30             	lea    eax,[edx+0x30]
c001d2dd:	0f b6 c0             	movzx  eax,al
c001d2e0:	50                   	push   eax
c001d2e1:	e8 22 f1 ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001d2e6:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d2ec:	5d                   	pop    ebp
c001d2ed:	58                   	pop    eax
c001d2ee:	6a 0f                	push   0xf
c001d2f0:	6a 00                	push   0x0
c001d2f2:	e8 22 f1 ff ff       	call   c001c419 <combineColours(unsigned char, unsigned char)>
c001d2f7:	5a                   	pop    edx
c001d2f8:	0f b6 c0             	movzx  eax,al
c001d2fb:	59                   	pop    ecx
c001d2fc:	50                   	push   eax
c001d2fd:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d302:	99                   	cdq    
c001d303:	f7 ff                	idiv   edi
c001d305:	99                   	cdq    
c001d306:	f7 fb                	idiv   ebx
c001d308:	8d 42 30             	lea    eax,[edx+0x30]
c001d30b:	0f b6 c0             	movzx  eax,al
c001d30e:	50                   	push   eax
c001d30f:	e8 f4 f0 ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001d314:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d31a:	5f                   	pop    edi
c001d31b:	5d                   	pop    ebp
c001d31c:	6a 0f                	push   0xf
c001d31e:	6a 00                	push   0x0
c001d320:	e8 f4 f0 ff ff       	call   c001c419 <combineColours(unsigned char, unsigned char)>
c001d325:	5a                   	pop    edx
c001d326:	0f b6 c0             	movzx  eax,al
c001d329:	59                   	pop    ecx
c001d32a:	50                   	push   eax
c001d32b:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d330:	99                   	cdq    
c001d331:	f7 fb                	idiv   ebx
c001d333:	99                   	cdq    
c001d334:	f7 fb                	idiv   ebx
c001d336:	8d 42 30             	lea    eax,[edx+0x30]
c001d339:	0f b6 c0             	movzx  eax,al
c001d33c:	50                   	push   eax
c001d33d:	e8 c6 f0 ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001d342:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d348:	5f                   	pop    edi
c001d349:	5d                   	pop    ebp
c001d34a:	6a 0f                	push   0xf
c001d34c:	6a 00                	push   0x0
c001d34e:	e8 c6 f0 ff ff       	call   c001c419 <combineColours(unsigned char, unsigned char)>
c001d353:	5a                   	pop    edx
c001d354:	0f b6 c0             	movzx  eax,al
c001d357:	59                   	pop    ecx
c001d358:	50                   	push   eax
c001d359:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d35e:	99                   	cdq    
c001d35f:	f7 fb                	idiv   ebx
c001d361:	83 c2 30             	add    edx,0x30
c001d364:	0f b6 d2             	movzx  edx,dl
c001d367:	52                   	push   edx
c001d368:	e8 9b f0 ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001d36d:	83 c4 10             	add    esp,0x10
c001d370:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d376:	eb 05                	jmp    c001d37d <SATA::read(unsigned long long, int, void*)+0x245>
c001d378:	be 01 00 00 00       	mov    esi,0x1
c001d37d:	83 c4 0c             	add    esp,0xc
c001d380:	89 f0                	mov    eax,esi
c001d382:	5b                   	pop    ebx
c001d383:	5e                   	pop    esi
c001d384:	5f                   	pop    edi
c001d385:	5d                   	pop    ebp
c001d386:	c3                   	ret    
c001d387:	90                   	nop

c001d388 <SATA::write(unsigned long long, int, void*)>:
c001d388:	55                   	push   ebp
c001d389:	b8 04 00 00 00       	mov    eax,0x4
c001d38e:	57                   	push   edi
c001d38f:	56                   	push   esi
c001d390:	53                   	push   ebx
c001d391:	83 ec 1c             	sub    esp,0x1c
c001d394:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d398:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d39c:	8d 75 ff             	lea    esi,[ebp-0x1]
c001d39f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d3a3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d3a7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001d3ad:	0f 87 32 02 00 00    	ja     c001d5e5 <SATA::write(unsigned long long, int, void*)+0x25d>
c001d3b3:	b8 06 00 00 00       	mov    eax,0x6
c001d3b8:	85 ff                	test   edi,edi
c001d3ba:	0f 84 25 02 00 00    	je     c001d5e5 <SATA::write(unsigned long long, int, void*)+0x25d>
c001d3c0:	89 ee                	mov    esi,ebp
c001d3c2:	c1 e6 09             	shl    esi,0x9
c001d3c5:	01 fe                	add    esi,edi
c001d3c7:	89 c8                	mov    eax,ecx
c001d3c9:	89 da                	mov    edx,ebx
c001d3cb:	83 c0 01             	add    eax,0x1
c001d3ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d3d2:	83 d2 00             	adc    edx,0x0
c001d3d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d3d9:	50                   	push   eax
c001d3da:	50                   	push   eax
c001d3db:	6a 01                	push   0x1
c001d3dd:	57                   	push   edi
c001d3de:	81 c7 00 02 00 00    	add    edi,0x200
c001d3e4:	6a 01                	push   0x1
c001d3e6:	53                   	push   ebx
c001d3e7:	51                   	push   ecx
c001d3e8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d3ec:	e8 f3 fa ff ff       	call   c001cee4 <SATA::access(unsigned long long, int, void*, bool)>
c001d3f1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d3f5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d3f9:	83 c4 20             	add    esp,0x20
c001d3fc:	39 f7                	cmp    edi,esi
c001d3fe:	75 c7                	jne    c001d3c7 <SATA::write(unsigned long long, int, void*)+0x3f>
c001d400:	bb 0a 00 00 00       	mov    ebx,0xa
c001d405:	01 2d 50 9b 02 c0    	add    DWORD PTR ds:0xc0029b50,ebp
c001d40b:	bd 10 27 00 00       	mov    ebp,0x2710
c001d410:	50                   	push   eax
c001d411:	50                   	push   eax
c001d412:	6a 0f                	push   0xf
c001d414:	6a 00                	push   0x0
c001d416:	e8 fe ef ff ff       	call   c001c419 <combineColours(unsigned char, unsigned char)>
c001d41b:	5a                   	pop    edx
c001d41c:	0f b6 c0             	movzx  eax,al
c001d41f:	59                   	pop    ecx
c001d420:	50                   	push   eax
c001d421:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d426:	99                   	cdq    
c001d427:	f7 fd                	idiv   ebp
c001d429:	99                   	cdq    
c001d42a:	f7 fb                	idiv   ebx
c001d42c:	8d 42 30             	lea    eax,[edx+0x30]
c001d42f:	0f b6 c0             	movzx  eax,al
c001d432:	50                   	push   eax
c001d433:	e8 d0 ef ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001d438:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d43e:	5e                   	pop    esi
c001d43f:	5f                   	pop    edi
c001d440:	bf e8 03 00 00       	mov    edi,0x3e8
c001d445:	6a 0f                	push   0xf
c001d447:	6a 00                	push   0x0
c001d449:	e8 cb ef ff ff       	call   c001c419 <combineColours(unsigned char, unsigned char)>
c001d44e:	5a                   	pop    edx
c001d44f:	0f b6 c0             	movzx  eax,al
c001d452:	59                   	pop    ecx
c001d453:	50                   	push   eax
c001d454:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d459:	99                   	cdq    
c001d45a:	f7 ff                	idiv   edi
c001d45c:	99                   	cdq    
c001d45d:	f7 fb                	idiv   ebx
c001d45f:	8d 42 30             	lea    eax,[edx+0x30]
c001d462:	0f b6 c0             	movzx  eax,al
c001d465:	50                   	push   eax
c001d466:	e8 9d ef ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001d46b:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d471:	5e                   	pop    esi
c001d472:	be 64 00 00 00       	mov    esi,0x64
c001d477:	58                   	pop    eax
c001d478:	6a 0f                	push   0xf
c001d47a:	6a 00                	push   0x0
c001d47c:	e8 98 ef ff ff       	call   c001c419 <combineColours(unsigned char, unsigned char)>
c001d481:	5a                   	pop    edx
c001d482:	0f b6 c0             	movzx  eax,al
c001d485:	59                   	pop    ecx
c001d486:	50                   	push   eax
c001d487:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d48c:	99                   	cdq    
c001d48d:	f7 fe                	idiv   esi
c001d48f:	99                   	cdq    
c001d490:	f7 fb                	idiv   ebx
c001d492:	8d 42 30             	lea    eax,[edx+0x30]
c001d495:	0f b6 c0             	movzx  eax,al
c001d498:	50                   	push   eax
c001d499:	e8 6a ef ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001d49e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d4a4:	58                   	pop    eax
c001d4a5:	5a                   	pop    edx
c001d4a6:	6a 0f                	push   0xf
c001d4a8:	6a 00                	push   0x0
c001d4aa:	e8 6a ef ff ff       	call   c001c419 <combineColours(unsigned char, unsigned char)>
c001d4af:	59                   	pop    ecx
c001d4b0:	0f b6 c0             	movzx  eax,al
c001d4b3:	5a                   	pop    edx
c001d4b4:	50                   	push   eax
c001d4b5:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d4ba:	99                   	cdq    
c001d4bb:	f7 fb                	idiv   ebx
c001d4bd:	99                   	cdq    
c001d4be:	f7 fb                	idiv   ebx
c001d4c0:	8d 42 30             	lea    eax,[edx+0x30]
c001d4c3:	0f b6 c0             	movzx  eax,al
c001d4c6:	50                   	push   eax
c001d4c7:	e8 3c ef ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001d4cc:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d4d2:	59                   	pop    ecx
c001d4d3:	58                   	pop    eax
c001d4d4:	6a 0f                	push   0xf
c001d4d6:	6a 00                	push   0x0
c001d4d8:	e8 3c ef ff ff       	call   c001c419 <combineColours(unsigned char, unsigned char)>
c001d4dd:	5a                   	pop    edx
c001d4de:	0f b6 c0             	movzx  eax,al
c001d4e1:	59                   	pop    ecx
c001d4e2:	50                   	push   eax
c001d4e3:	a1 54 9b 02 c0       	mov    eax,ds:0xc0029b54
c001d4e8:	99                   	cdq    
c001d4e9:	f7 fb                	idiv   ebx
c001d4eb:	83 c2 30             	add    edx,0x30
c001d4ee:	0f b6 d2             	movzx  edx,dl
c001d4f1:	52                   	push   edx
c001d4f2:	e8 11 ef ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001d4f7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d4fd:	58                   	pop    eax
c001d4fe:	5a                   	pop    edx
c001d4ff:	6a 0f                	push   0xf
c001d501:	6a 00                	push   0x0
c001d503:	e8 11 ef ff ff       	call   c001c419 <combineColours(unsigned char, unsigned char)>
c001d508:	59                   	pop    ecx
c001d509:	0f b6 c0             	movzx  eax,al
c001d50c:	5a                   	pop    edx
c001d50d:	50                   	push   eax
c001d50e:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d513:	99                   	cdq    
c001d514:	f7 fd                	idiv   ebp
c001d516:	99                   	cdq    
c001d517:	f7 fb                	idiv   ebx
c001d519:	8d 42 30             	lea    eax,[edx+0x30]
c001d51c:	0f b6 c0             	movzx  eax,al
c001d51f:	50                   	push   eax
c001d520:	e8 e3 ee ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001d525:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d52b:	59                   	pop    ecx
c001d52c:	5d                   	pop    ebp
c001d52d:	6a 0f                	push   0xf
c001d52f:	6a 00                	push   0x0
c001d531:	e8 e3 ee ff ff       	call   c001c419 <combineColours(unsigned char, unsigned char)>
c001d536:	5a                   	pop    edx
c001d537:	0f b6 c0             	movzx  eax,al
c001d53a:	59                   	pop    ecx
c001d53b:	50                   	push   eax
c001d53c:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d541:	99                   	cdq    
c001d542:	f7 ff                	idiv   edi
c001d544:	99                   	cdq    
c001d545:	f7 fb                	idiv   ebx
c001d547:	8d 42 30             	lea    eax,[edx+0x30]
c001d54a:	0f b6 c0             	movzx  eax,al
c001d54d:	50                   	push   eax
c001d54e:	e8 b5 ee ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001d553:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d559:	5f                   	pop    edi
c001d55a:	5d                   	pop    ebp
c001d55b:	6a 0f                	push   0xf
c001d55d:	6a 00                	push   0x0
c001d55f:	e8 b5 ee ff ff       	call   c001c419 <combineColours(unsigned char, unsigned char)>
c001d564:	5a                   	pop    edx
c001d565:	0f b6 c0             	movzx  eax,al
c001d568:	59                   	pop    ecx
c001d569:	50                   	push   eax
c001d56a:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d56f:	99                   	cdq    
c001d570:	f7 fe                	idiv   esi
c001d572:	99                   	cdq    
c001d573:	f7 fb                	idiv   ebx
c001d575:	8d 42 30             	lea    eax,[edx+0x30]
c001d578:	0f b6 c0             	movzx  eax,al
c001d57b:	50                   	push   eax
c001d57c:	e8 87 ee ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001d581:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d587:	5e                   	pop    esi
c001d588:	5f                   	pop    edi
c001d589:	6a 0f                	push   0xf
c001d58b:	6a 00                	push   0x0
c001d58d:	e8 87 ee ff ff       	call   c001c419 <combineColours(unsigned char, unsigned char)>
c001d592:	5d                   	pop    ebp
c001d593:	0f b6 c0             	movzx  eax,al
c001d596:	5a                   	pop    edx
c001d597:	50                   	push   eax
c001d598:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d59d:	99                   	cdq    
c001d59e:	f7 fb                	idiv   ebx
c001d5a0:	99                   	cdq    
c001d5a1:	f7 fb                	idiv   ebx
c001d5a3:	8d 42 30             	lea    eax,[edx+0x30]
c001d5a6:	0f b6 c0             	movzx  eax,al
c001d5a9:	50                   	push   eax
c001d5aa:	e8 59 ee ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001d5af:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d5b5:	59                   	pop    ecx
c001d5b6:	5e                   	pop    esi
c001d5b7:	6a 0f                	push   0xf
c001d5b9:	6a 00                	push   0x0
c001d5bb:	e8 59 ee ff ff       	call   c001c419 <combineColours(unsigned char, unsigned char)>
c001d5c0:	5f                   	pop    edi
c001d5c1:	0f b6 c0             	movzx  eax,al
c001d5c4:	5d                   	pop    ebp
c001d5c5:	50                   	push   eax
c001d5c6:	a1 50 9b 02 c0       	mov    eax,ds:0xc0029b50
c001d5cb:	99                   	cdq    
c001d5cc:	f7 fb                	idiv   ebx
c001d5ce:	83 c2 30             	add    edx,0x30
c001d5d1:	0f b6 d2             	movzx  edx,dl
c001d5d4:	52                   	push   edx
c001d5d5:	e8 2e ee ff ff       	call   c001c408 <combineCharAndColour(char, unsigned char)>
c001d5da:	83 c4 10             	add    esp,0x10
c001d5dd:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d5e3:	31 c0                	xor    eax,eax
c001d5e5:	83 c4 1c             	add    esp,0x1c
c001d5e8:	5b                   	pop    ebx
c001d5e9:	5e                   	pop    esi
c001d5ea:	5f                   	pop    edi
c001d5eb:	5d                   	pop    ebp
c001d5ec:	c3                   	ret    
c001d5ed:	90                   	nop

c001d5ee <SATAPI::write(unsigned long long, int, void*)>:
c001d5ee:	b8 03 00 00 00       	mov    eax,0x3
c001d5f3:	c3                   	ret    

c001d5f4 <SATAPI::close(int, int, void*)>:
c001d5f4:	83 ec 0c             	sub    esp,0xc
c001d5f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5fb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d601:	85 c0                	test   eax,eax
c001d603:	74 0c                	je     c001d611 <SATAPI::close(int, int, void*)+0x1d>
c001d605:	83 ec 0c             	sub    esp,0xc
c001d608:	8b 10                	mov    edx,DWORD PTR [eax]
c001d60a:	50                   	push   eax
c001d60b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d60e:	83 c4 10             	add    esp,0x10
c001d611:	31 c0                	xor    eax,eax
c001d613:	83 c4 0c             	add    esp,0xc
c001d616:	c3                   	ret    
c001d617:	90                   	nop

c001d618 <SATAPI::SATAPI()>:
c001d618:	83 ec 0c             	sub    esp,0xc
c001d61b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d61f:	83 ec 04             	sub    esp,0x4
c001d622:	68 00 08 00 00       	push   0x800
c001d627:	68 c4 24 02 c0       	push   0xc00224c4
c001d62c:	50                   	push   eax
c001d62d:	e8 1c ee fe ff       	call   c000c44e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d632:	83 c4 10             	add    esp,0x10
c001d635:	ba b8 25 02 c0       	mov    edx,0xc00225b8
c001d63a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d63e:	89 10                	mov    DWORD PTR [eax],edx
c001d640:	90                   	nop
c001d641:	83 c4 0c             	add    esp,0xc
c001d644:	c3                   	ret    
c001d645:	90                   	nop

c001d646 <SATAPI::diskRemoved()>:
c001d646:	c3                   	ret    
c001d647:	90                   	nop

c001d648 <SATAPI::diskInserted()>:
c001d648:	83 ec 18             	sub    esp,0x18
c001d64b:	68 d0 24 02 c0       	push   0xc00224d0
c001d650:	e8 22 d3 fe ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c001d655:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d659:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d660:	83 c4 1c             	add    esp,0x1c
c001d663:	c3                   	ret    

c001d664 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d664:	55                   	push   ebp
c001d665:	57                   	push   edi
c001d666:	56                   	push   esi
c001d667:	53                   	push   ebx
c001d668:	83 ec 34             	sub    esp,0x34
c001d66b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d66f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d673:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001d677:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d67b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d67f:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d685:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d68b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d68f:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d695:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d699:	83 c0 02             	add    eax,0x2
c001d69c:	c1 e0 07             	shl    eax,0x7
c001d69f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d6a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d6ab:	c1 e0 07             	shl    eax,0x7
c001d6ae:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d6b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d6b6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d6c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d6c4:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d6ca:	e8 21 e5 ff ff       	call   c001bbf0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d6cf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d6d3:	83 c4 10             	add    esp,0x10
c001d6d6:	b8 01 00 00 00       	mov    eax,0x1
c001d6db:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d6e0:	0f 84 53 02 00 00    	je     c001d939 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d6e6:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d6ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d6f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001d6f2:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d6f8:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d6fe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d702:	c1 e1 05             	shl    ecx,0x5
c001d705:	01 c8                	add    eax,ecx
c001d707:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d709:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d70f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d715:	89 08                	mov    DWORD PTR [eax],ecx
c001d717:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d71d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d723:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d729:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d72c:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d72f:	50                   	push   eax
c001d730:	68 90 00 00 00       	push   0x90
c001d735:	6a 00                	push   0x0
c001d737:	53                   	push   ebx
c001d738:	e8 b3 2d fe ff       	call   c00004f0 <memset>
c001d73d:	b9 0c 00 00 00       	mov    ecx,0xc
c001d742:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d746:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d748:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d74e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d752:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d758:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d75c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d760:	48                   	dec    eax
c001d761:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d766:	89 c1                	mov    ecx,eax
c001d768:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d76e:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d773:	09 c8                	or     eax,ecx
c001d775:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d77b:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001d781:	83 c8 80             	or     eax,0xffffff80
c001d784:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001d78a:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d78d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d791:	25 00 7f 00 00       	and    eax,0x7f00
c001d796:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001d79a:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d79f:	66 89 03             	mov    WORD PTR [ebx],ax
c001d7a2:	89 d0                	mov    eax,edx
c001d7a4:	c1 ea 18             	shr    edx,0x18
c001d7a7:	c1 e8 10             	shr    eax,0x10
c001d7aa:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001d7ad:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d7b0:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d7b4:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d7b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d7bb:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d7be:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d7c2:	83 c4 10             	add    esp,0x10
c001d7c5:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d7c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d7cd:	31 c0                	xor    eax,eax
c001d7cf:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001d7d5:	80 e1 88             	and    cl,0x88
c001d7d8:	74 0a                	je     c001d7e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001d7da:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d7df:	74 0a                	je     c001d7eb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001d7e1:	40                   	inc    eax
c001d7e2:	eb eb                	jmp    c001d7cf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001d7e4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d7e9:	75 43                	jne    c001d82e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001d7eb:	83 ec 0c             	sub    esp,0xc
c001d7ee:	68 e8 24 02 c0       	push   0xc00224e8
c001d7f3:	e8 7f d1 fe ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c001d7f8:	58                   	pop    eax
c001d7f9:	5a                   	pop    edx
c001d7fa:	68 fd 24 02 c0       	push   0xc00224fd
c001d7ff:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001d805:	e8 8e b2 fe ff       	call   c0008a98 <VgaText::puts(char const*)>
c001d80a:	59                   	pop    ecx
c001d80b:	5b                   	pop    ebx
c001d80c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d810:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d816:	e8 6f e4 ff ff       	call   c001bc8a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d81b:	5e                   	pop    esi
c001d81c:	5f                   	pop    edi
c001d81d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d821:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d827:	e8 3e e4 ff ff       	call   c001bc6a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d82c:	eb 48                	jmp    c001d876 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001d82e:	be 01 00 00 00       	mov    esi,0x1
c001d833:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d837:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d83b:	d3 e6                	shl    esi,cl
c001d83d:	c1 e7 07             	shl    edi,0x7
c001d840:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001d846:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001d84b:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001d84f:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001d855:	85 c6                	test   esi,eax
c001d857:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001d85d:	0f 84 a3 00 00 00    	je     c001d906 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001d863:	0f ba e0 1e          	bt     eax,0x1e
c001d867:	73 1a                	jae    c001d883 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001d869:	83 ec 0c             	sub    esp,0xc
c001d86c:	68 0f 25 02 c0       	push   0xc002250f
c001d871:	e8 01 d1 fe ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c001d876:	83 c4 10             	add    esp,0x10
c001d879:	b8 01 00 00 00       	mov    eax,0x1
c001d87e:	e9 b6 00 00 00       	jmp    c001d939 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d883:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001d889:	83 f8 0d             	cmp    eax,0xd
c001d88c:	77 0a                	ja     c001d898 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001d88e:	83 ec 0c             	sub    esp,0xc
c001d891:	68 c8 00 00 00       	push   0xc8
c001d896:	eb 28                	jmp    c001d8c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001d898:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001d89e:	83 f8 0d             	cmp    eax,0xd
c001d8a1:	77 0a                	ja     c001d8ad <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001d8a3:	83 ec 0c             	sub    esp,0xc
c001d8a6:	68 58 02 00 00       	push   0x258
c001d8ab:	eb 13                	jmp    c001d8c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001d8ad:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001d8b3:	83 f8 06             	cmp    eax,0x6
c001d8b6:	77 10                	ja     c001d8c8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d8b8:	83 ec 0c             	sub    esp,0xc
c001d8bb:	68 dc 05 00 00       	push   0x5dc
c001d8c0:	e8 37 7e ff ff       	call   c00156fc <milliTenthSleep(unsigned int)>
c001d8c5:	83 c4 10             	add    esp,0x10
c001d8c8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d8cc:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d8cf:	75 06                	jne    c001d8d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001d8d1:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d8d5:	74 15                	je     c001d8ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001d8d7:	83 fb 06             	cmp    ebx,0x6
c001d8da:	77 10                	ja     c001d8ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001d8dc:	83 ec 0c             	sub    esp,0xc
c001d8df:	68 c4 09 00 00       	push   0x9c4
c001d8e4:	e8 13 7e ff ff       	call   c00156fc <milliTenthSleep(unsigned int)>
c001d8e9:	83 c4 10             	add    esp,0x10
c001d8ec:	43                   	inc    ebx
c001d8ed:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001d8f3:	0f 85 56 ff ff ff    	jne    c001d84f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001d8f9:	83 ec 0c             	sub    esp,0xc
c001d8fc:	68 22 25 02 c0       	push   0xc0022522
c001d901:	e9 6b ff ff ff       	jmp    c001d871 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001d906:	0f ba e0 1e          	bt     eax,0x1e
c001d90a:	73 0d                	jae    c001d919 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001d90c:	83 ec 0c             	sub    esp,0xc
c001d90f:	68 36 25 02 c0       	push   0xc0022536
c001d914:	e9 58 ff ff ff       	jmp    c001d871 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001d919:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d91e:	74 17                	je     c001d937 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d920:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d925:	74 10                	je     c001d937 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d927:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d92d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d931:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d935:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d937:	31 c0                	xor    eax,eax
c001d939:	83 c4 2c             	add    esp,0x2c
c001d93c:	5b                   	pop    ebx
c001d93d:	5e                   	pop    esi
c001d93e:	5f                   	pop    edi
c001d93f:	5d                   	pop    ebp
c001d940:	c3                   	ret    
c001d941:	90                   	nop

c001d942 <SATAPI::eject()>:
c001d942:	57                   	push   edi
c001d943:	b9 03 00 00 00       	mov    ecx,0x3
c001d948:	83 ec 18             	sub    esp,0x18
c001d94b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d94f:	fc                   	cld    
c001d950:	31 c0                	xor    eax,eax
c001d952:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d954:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d959:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d95e:	50                   	push   eax
c001d95f:	6a 00                	push   0x0
c001d961:	6a 00                	push   0x0
c001d963:	6a 00                	push   0x0
c001d965:	6a 00                	push   0x0
c001d967:	6a 02                	push   0x2
c001d969:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d96d:	50                   	push   eax
c001d96e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d972:	e8 ed fc ff ff       	call   c001d664 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d977:	31 c0                	xor    eax,eax
c001d979:	83 c4 38             	add    esp,0x38
c001d97c:	5f                   	pop    edi
c001d97d:	c3                   	ret    

c001d97e <SATAPI::detectMedia()>:
c001d97e:	53                   	push   ebx
c001d97f:	83 ec 14             	sub    esp,0x14
c001d982:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d986:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d98c:	e8 3b 04 ff ff       	call   c000ddcc <VCache::writeWriteBuffer()>
c001d991:	59                   	pop    ecx
c001d992:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d998:	e8 1f 04 ff ff       	call   c000ddbc <VCache::invalidateReadBuffer()>
c001d99d:	c7 04 24 4b 25 02 c0 	mov    DWORD PTR [esp],0xc002254b
c001d9a4:	e8 ce cf fe ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c001d9a9:	83 c4 10             	add    esp,0x10
c001d9ac:	31 c0                	xor    eax,eax
c001d9ae:	8b 14 85 20 84 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7be0]
c001d9b5:	85 d2                	test   edx,edx
c001d9b7:	74 0f                	je     c001d9c8 <SATAPI::detectMedia()+0x4a>
c001d9b9:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d9bf:	75 07                	jne    c001d9c8 <SATAPI::detectMedia()+0x4a>
c001d9c1:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d9c8:	40                   	inc    eax
c001d9c9:	83 f8 1a             	cmp    eax,0x1a
c001d9cc:	75 e0                	jne    c001d9ae <SATAPI::detectMedia()+0x30>
c001d9ce:	83 c4 08             	add    esp,0x8
c001d9d1:	5b                   	pop    ebx
c001d9d2:	c3                   	ret    
c001d9d3:	90                   	nop

c001d9d4 <SATAPI::open(int, int, void*)>:
c001d9d4:	56                   	push   esi
c001d9d5:	53                   	push   ebx
c001d9d6:	51                   	push   ecx
c001d9d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d9df:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d9e9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d9ef:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d9f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d9fd:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001da07:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001da0d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001da14:	e8 99 a3 fe ff       	call   c0007db2 <Phys::allocatePage()>
c001da19:	89 c6                	mov    esi,eax
c001da1b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001da21:	81 c6 00 10 00 00    	add    esi,0x1000
c001da27:	e8 86 a3 fe ff       	call   c0007db2 <Phys::allocatePage()>
c001da2c:	39 c6                	cmp    esi,eax
c001da2e:	74 10                	je     c001da40 <SATAPI::open(int, int, void*)+0x6c>
c001da30:	83 ec 0c             	sub    esp,0xc
c001da33:	68 60 25 02 c0       	push   0xc0022560
c001da38:	e8 9e 31 ff ff       	call   c0010bdb <KePanic(char const*)>
c001da3d:	83 c4 10             	add    esp,0x10
c001da40:	83 ec 0c             	sub    esp,0xc
c001da43:	6a 02                	push   0x2
c001da45:	e8 b7 bb fe ff       	call   c0009601 <Virt::allocateKernelVirtualPages(int)>
c001da4a:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001da50:	6a 03                	push   0x3
c001da52:	50                   	push   eax
c001da53:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001da59:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001da5f:	e8 ae c2 fe ff       	call   c0009d12 <VAS::mapPage(unsigned long, unsigned long, int)>
c001da64:	83 c4 14             	add    esp,0x14
c001da67:	68 78 01 00 00       	push   0x178
c001da6c:	e8 3d a0 fe ff       	call   c0007aae <malloc>
c001da71:	83 c4 0c             	add    esp,0xc
c001da74:	89 c6                	mov    esi,eax
c001da76:	6a 00                	push   0x0
c001da78:	68 ff ff ff 7f       	push   0x7fffffff
c001da7d:	6a 00                	push   0x0
c001da7f:	6a 00                	push   0x0
c001da81:	53                   	push   ebx
c001da82:	68 76 25 02 c0       	push   0xc0022576
c001da87:	50                   	push   eax
c001da88:	e8 9b f7 fe ff       	call   c000d228 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001da8d:	83 c4 14             	add    esp,0x14
c001da90:	56                   	push   esi
c001da91:	e8 52 f8 fe ff       	call   c000d2e8 <LogicalDisk::assignDriveLetter()>
c001da96:	5a                   	pop    edx
c001da97:	0f be c0             	movsx  eax,al
c001da9a:	59                   	pop    ecx
c001da9b:	50                   	push   eax
c001da9c:	68 c8 23 02 c0       	push   0xc00223c8
c001daa1:	e8 d1 ce fe ff       	call   c000a977 <Dbg::kprintf(char const*, ...)>
c001daa6:	58                   	pop    eax
c001daa7:	5a                   	pop    edx
c001daa8:	56                   	push   esi
c001daa9:	53                   	push   ebx
c001daaa:	e8 d3 e5 fe ff       	call   c000c082 <Device::addChild(Device*)>
c001daaf:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001dab5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dab8:	e8 f9 e9 fe ff       	call   c000c4b6 <PhysicalDisk::startCache()>
c001dabd:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001dac4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dac7:	e8 b2 fe ff ff       	call   c001d97e <SATAPI::detectMedia()>
c001dacc:	83 c4 14             	add    esp,0x14
c001dacf:	31 c0                	xor    eax,eax
c001dad1:	5b                   	pop    ebx
c001dad2:	5e                   	pop    esi
c001dad3:	c3                   	ret    

c001dad4 <SATAPI::read(unsigned long long, int, void*)>:
c001dad4:	57                   	push   edi
c001dad5:	56                   	push   esi
c001dad6:	53                   	push   ebx
c001dad7:	83 ec 30             	sub    esp,0x30
c001dada:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dade:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001dae2:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001dae6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001daea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001daee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001daf2:	83 fe 04             	cmp    esi,0x4
c001daf5:	7e 10                	jle    c001db07 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001daf7:	83 ec 0c             	sub    esp,0xc
c001dafa:	68 84 25 02 c0       	push   0xc0022584
c001daff:	e8 d7 30 ff ff       	call   c0010bdb <KePanic(char const*)>
c001db04:	83 c4 10             	add    esp,0x10
c001db07:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001db0d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001db13:	51                   	push   ecx
c001db14:	50                   	push   eax
c001db15:	83 c0 02             	add    eax,0x2
c001db18:	c1 e0 07             	shl    eax,0x7
c001db1b:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001db21:	50                   	push   eax
c001db22:	52                   	push   edx
c001db23:	e8 8c e1 ff ff       	call   c001bcb4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001db28:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001db2c:	b9 03 00 00 00       	mov    ecx,0x3
c001db31:	fc                   	cld    
c001db32:	31 c0                	xor    eax,eax
c001db34:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001db36:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001db3b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001db40:	83 c4 0c             	add    esp,0xc
c001db43:	6a 00                	push   0x0
c001db45:	6a 00                	push   0x0
c001db47:	6a 00                	push   0x0
c001db49:	6a 00                	push   0x0
c001db4b:	6a 02                	push   0x2
c001db4d:	8d 44 24 30          	lea    eax,[esp+0x30]
c001db51:	50                   	push   eax
c001db52:	53                   	push   ebx
c001db53:	e8 0c fb ff ff       	call   c001d664 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001db58:	83 c4 20             	add    esp,0x20
c001db5b:	85 c0                	test   eax,eax
c001db5d:	75 44                	jne    c001dba3 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001db5f:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001db63:	b9 03 00 00 00       	mov    ecx,0x3
c001db68:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001db6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001db6e:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001db73:	0f c8                	bswap  eax
c001db75:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001db79:	89 f0                	mov    eax,esi
c001db7b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001db7f:	50                   	push   eax
c001db80:	56                   	push   esi
c001db81:	c1 e6 0b             	shl    esi,0xb
c001db84:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001db88:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001db8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001db90:	56                   	push   esi
c001db91:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001db95:	50                   	push   eax
c001db96:	53                   	push   ebx
c001db97:	e8 c8 fa ff ff       	call   c001d664 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001db9c:	83 c4 20             	add    esp,0x20
c001db9f:	85 c0                	test   eax,eax
c001dba1:	74 14                	je     c001dbb7 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001dba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dba7:	83 ec 0c             	sub    esp,0xc
c001dbaa:	53                   	push   ebx
c001dbab:	e8 ce fd ff ff       	call   c001d97e <SATAPI::detectMedia()>
c001dbb0:	83 c4 10             	add    esp,0x10
c001dbb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dbb7:	83 c4 30             	add    esp,0x30
c001dbba:	5b                   	pop    ebx
c001dbbb:	5e                   	pop    esi
c001dbbc:	5f                   	pop    edi
c001dbbd:	c3                   	ret    

c001dbbe <IOAPIC::close(int, int, void*)>:
c001dbbe:	b8 00 00 00 00       	mov    eax,0x0
c001dbc3:	c3                   	ret    

c001dbc4 <apicGetBase()>:
c001dbc4:	55                   	push   ebp
c001dbc5:	89 e5                	mov    ebp,esp
c001dbc7:	83 ec 18             	sub    esp,0x18
c001dbca:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001dbcf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dbd5:	83 e0 08             	and    eax,0x8
c001dbd8:	0f b6 c0             	movzx  eax,al
c001dbdb:	85 c0                	test   eax,eax
c001dbdd:	75 07                	jne    c001dbe6 <apicGetBase()+0x22>
c001dbdf:	b8 00 00 00 00       	mov    eax,0x0
c001dbe4:	eb 21                	jmp    c001dc07 <apicGetBase()+0x43>
c001dbe6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001dbeb:	83 ec 08             	sub    esp,0x8
c001dbee:	6a 1b                	push   0x1b
c001dbf0:	50                   	push   eax
c001dbf1:	e8 c2 94 fe ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c001dbf6:	83 c4 10             	add    esp,0x10
c001dbf9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001dbfc:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001dbff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dc02:	25 00 00 ff ff       	and    eax,0xffff0000
c001dc07:	c9                   	leave  
c001dc08:	c3                   	ret    
c001dc09:	90                   	nop

c001dc0a <IOAPIC::IOAPIC()>:
c001dc0a:	83 ec 0c             	sub    esp,0xc
c001dc0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc11:	83 ec 08             	sub    esp,0x8
c001dc14:	68 e8 25 02 c0       	push   0xc00225e8
c001dc19:	50                   	push   eax
c001dc1a:	e8 fb e5 fe ff       	call   c000c21a <Device::Device(char const*)>
c001dc1f:	83 c4 10             	add    esp,0x10
c001dc22:	ba f8 25 02 c0       	mov    edx,0xc00225f8
c001dc27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc2b:	89 10                	mov    DWORD PTR [eax],edx
c001dc2d:	90                   	nop
c001dc2e:	83 c4 0c             	add    esp,0xc
c001dc31:	c3                   	ret    

c001dc32 <apicOpen()>:
c001dc32:	55                   	push   ebp
c001dc33:	89 e5                	mov    ebp,esp
c001dc35:	53                   	push   ebx
c001dc36:	83 ec 34             	sub    esp,0x34
c001dc39:	a0 a0 9b 02 c0       	mov    al,ds:0xc0029ba0
c001dc3e:	83 f0 01             	xor    eax,0x1
c001dc41:	0f b6 c0             	movzx  eax,al
c001dc44:	85 c0                	test   eax,eax
c001dc46:	0f 84 a3 00 00 00    	je     c001dcef <apicOpen()+0xbd>
c001dc4c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001dc50:	a0 80 87 02 c0       	mov    al,ds:0xc0028780
c001dc55:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001dc59:	0f b6 c0             	movzx  eax,al
c001dc5c:	39 c2                	cmp    edx,eax
c001dc5e:	0f 83 84 00 00 00    	jae    c001dce8 <apicOpen()+0xb6>
c001dc64:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001dc6b:	83 ec 0c             	sub    esp,0xc
c001dc6e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001dc71:	e8 38 9e fe ff       	call   c0007aae <malloc>
c001dc76:	83 c4 10             	add    esp,0x10
c001dc79:	89 c3                	mov    ebx,eax
c001dc7b:	83 ec 0c             	sub    esp,0xc
c001dc7e:	53                   	push   ebx
c001dc7f:	e8 86 ff ff ff       	call   c001dc0a <IOAPIC::IOAPIC()>
c001dc84:	83 c4 10             	add    esp,0x10
c001dc87:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001dc8a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001dc8e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001dc91:	89 14 85 80 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6480],edx
c001dc98:	a1 60 9b 02 c0       	mov    eax,ds:0xc0029b60
c001dc9d:	83 c0 01             	add    eax,0x1
c001dca0:	a3 60 9b 02 c0       	mov    ds:0xc0029b60,eax
c001dca5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001dcaa:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001dcb0:	83 ec 08             	sub    esp,0x8
c001dcb3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001dcb6:	50                   	push   eax
c001dcb7:	e8 c6 e3 fe ff       	call   c000c082 <Device::addChild(Device*)>
c001dcbc:	83 c4 10             	add    esp,0x10
c001dcbf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001dcc2:	8b 00                	mov    eax,DWORD PTR [eax]
c001dcc4:	83 c0 08             	add    eax,0x8
c001dcc7:	8b 00                	mov    eax,DWORD PTR [eax]
c001dcc9:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001dccd:	6a 00                	push   0x0
c001dccf:	6a 00                	push   0x0
c001dcd1:	52                   	push   edx
c001dcd2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001dcd5:	ff d0                	call   eax
c001dcd7:	83 c4 10             	add    esp,0x10
c001dcda:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001dcdd:	83 c0 01             	add    eax,0x1
c001dce0:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001dce3:	e9 68 ff ff ff       	jmp    c001dc50 <apicOpen()+0x1e>
c001dce8:	c6 05 a0 9b 02 c0 01 	mov    BYTE PTR ds:0xc0029ba0,0x1
c001dcef:	e8 d0 fe ff ff       	call   c001dbc4 <apicGetBase()>
c001dcf4:	05 f0 00 00 00       	add    eax,0xf0
c001dcf9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001dcfc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001dcff:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd01:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001dd04:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001dd0b:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001dd12:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001dd15:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001dd18:	89 10                	mov    DWORD PTR [eax],edx
c001dd1a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001dd21:	a1 d0 86 02 c0       	mov    eax,ds:0xc00286d0
c001dd26:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001dd29:	7d 7c                	jge    c001dda7 <apicOpen()+0x175>
c001dd2b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dd2e:	8b 04 85 e0 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7920]
c001dd35:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001dd38:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dd3b:	8b 04 85 e0 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7920]
c001dd42:	c1 e8 08             	shr    eax,0x8
c001dd45:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001dd49:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dd4c:	8b 04 85 e0 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7920]
c001dd53:	c1 e8 18             	shr    eax,0x18
c001dd56:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001dd59:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001dd5d:	3d ff 00 00 00       	cmp    eax,0xff
c001dd62:	75 3a                	jne    c001dd9e <apicOpen()+0x16c>
c001dd64:	e8 5b fe ff ff       	call   c001dbc4 <apicGetBase()>
c001dd69:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001dd6d:	83 fa 01             	cmp    edx,0x1
c001dd70:	75 07                	jne    c001dd79 <apicOpen()+0x147>
c001dd72:	ba 60 03 00 00       	mov    edx,0x360
c001dd77:	eb 05                	jmp    c001dd7e <apicOpen()+0x14c>
c001dd79:	ba 50 03 00 00       	mov    edx,0x350
c001dd7e:	01 d0                	add    eax,edx
c001dd80:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001dd83:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001dd86:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd88:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001dd8b:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001dd92:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001dd96:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001dd99:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001dd9c:	89 10                	mov    DWORD PTR [eax],edx
c001dd9e:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001dda2:	e9 7a ff ff ff       	jmp    c001dd21 <apicOpen()+0xef>
c001dda7:	90                   	nop
c001dda8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ddab:	c9                   	leave  
c001ddac:	c3                   	ret    
c001ddad:	90                   	nop

c001ddae <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ddae:	55                   	push   ebp
c001ddaf:	89 e5                	mov    ebp,esp
c001ddb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ddb4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ddba:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ddbd:	72 1d                	jb     c001dddc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ddbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ddc2:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ddc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ddcb:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ddd1:	01 d0                	add    eax,edx
c001ddd3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ddd6:	73 04                	jae    c001dddc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ddd8:	b0 01                	mov    al,0x1
c001ddda:	eb 02                	jmp    c001ddde <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001dddc:	b0 00                	mov    al,0x0
c001ddde:	5d                   	pop    ebp
c001dddf:	c3                   	ret    

c001dde0 <IOAPIC::read(int)>:
c001dde0:	55                   	push   ebp
c001dde1:	89 e5                	mov    ebp,esp
c001dde3:	83 ec 10             	sub    esp,0x10
c001dde6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dde9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ddef:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ddf2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ddf5:	0f b6 d0             	movzx  edx,al
c001ddf8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ddfb:	89 10                	mov    DWORD PTR [eax],edx
c001ddfd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001de00:	83 c0 10             	add    eax,0x10
c001de03:	8b 00                	mov    eax,DWORD PTR [eax]
c001de05:	c9                   	leave  
c001de06:	c3                   	ret    
c001de07:	90                   	nop

c001de08 <IOAPIC::open(int, int, void*)>:
c001de08:	55                   	push   ebp
c001de09:	89 e5                	mov    ebp,esp
c001de0b:	57                   	push   edi
c001de0c:	56                   	push   esi
c001de0d:	53                   	push   ebx
c001de0e:	83 ec 04             	sub    esp,0x4
c001de11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de14:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001de17:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001de1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de20:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001de26:	8b 14 85 c0 87 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7840]
c001de2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de30:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001de36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de39:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001de3f:	8b 14 85 40 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd77c0]
c001de46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de49:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001de4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de52:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001de58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de5b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001de61:	0f b6 f0             	movzx  esi,al
c001de64:	89 d0                	mov    eax,edx
c001de66:	ba 00 00 00 00       	mov    edx,0x0
c001de6b:	89 c7                	mov    edi,eax
c001de6d:	83 e7 ff             	and    edi,0xffffffff
c001de70:	89 f9                	mov    ecx,edi
c001de72:	0f b6 da             	movzx  ebx,dl
c001de75:	89 c8                	mov    eax,ecx
c001de77:	89 da                	mov    edx,ebx
c001de79:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001de7c:	8d 5e 08             	lea    ebx,[esi+0x8]
c001de7f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001de83:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001de87:	83 e0 00             	and    eax,0x0
c001de8a:	09 d0                	or     eax,edx
c001de8c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001de90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de93:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001de99:	8d 50 01             	lea    edx,[eax+0x1]
c001de9c:	88 d1                	mov    cl,dl
c001de9e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001dea1:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001dea7:	0f b6 d0             	movzx  edx,al
c001deaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dead:	83 c2 08             	add    edx,0x8
c001deb0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001deb4:	0f b6 c9             	movzx  ecx,cl
c001deb7:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001debd:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001dec1:	6a 01                	push   0x1
c001dec3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dec6:	e8 15 ff ff ff       	call   c001dde0 <IOAPIC::read(int)>
c001decb:	83 c4 08             	add    esp,0x8
c001dece:	c1 f8 10             	sar    eax,0x10
c001ded1:	0f b6 c0             	movzx  eax,al
c001ded4:	8d 50 01             	lea    edx,[eax+0x1]
c001ded7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001deda:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001dee0:	b8 00 00 00 00       	mov    eax,0x0
c001dee5:	8d 65 f4             	lea    esp,[ebp-0xc]
c001dee8:	5b                   	pop    ebx
c001dee9:	5e                   	pop    esi
c001deea:	5f                   	pop    edi
c001deeb:	5d                   	pop    ebp
c001deec:	c3                   	ret    
c001deed:	90                   	nop

c001deee <IOAPIC::write(int, int)>:
c001deee:	55                   	push   ebp
c001deef:	89 e5                	mov    ebp,esp
c001def1:	83 ec 10             	sub    esp,0x10
c001def4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001def7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001defd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001df00:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001df03:	0f b6 d0             	movzx  edx,al
c001df06:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001df09:	89 10                	mov    DWORD PTR [eax],edx
c001df0b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001df0e:	8d 50 10             	lea    edx,[eax+0x10]
c001df11:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001df14:	89 02                	mov    DWORD PTR [edx],eax
c001df16:	90                   	nop
c001df17:	c9                   	leave  
c001df18:	c3                   	ret    
c001df19:	90                   	nop

c001df1a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001df1a:	55                   	push   ebp
c001df1b:	89 e5                	mov    ebp,esp
c001df1d:	53                   	push   ebx
c001df1e:	83 ec 2c             	sub    esp,0x2c
c001df21:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001df24:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001df27:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001df2a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001df2d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001df30:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001df33:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001df36:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001df39:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001df3c:	88 d8                	mov    al,bl
c001df3e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001df41:	88 c8                	mov    al,cl
c001df43:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001df46:	88 d0                	mov    al,dl
c001df48:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001df4b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001df4f:	83 c0 08             	add    eax,0x8
c001df52:	01 c0                	add    eax,eax
c001df54:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001df57:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001df5b:	83 c0 08             	add    eax,0x8
c001df5e:	01 c0                	add    eax,eax
c001df60:	83 c0 01             	add    eax,0x1
c001df63:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001df66:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001df69:	50                   	push   eax
c001df6a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df6d:	e8 6e fe ff ff       	call   c001dde0 <IOAPIC::read(int)>
c001df72:	83 c4 08             	add    esp,0x8
c001df75:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001df78:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001df7f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001df82:	c1 e0 18             	shl    eax,0x18
c001df85:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001df88:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001df8b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001df8e:	52                   	push   edx
c001df8f:	50                   	push   eax
c001df90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df93:	e8 56 ff ff ff       	call   c001deee <IOAPIC::write(int, int)>
c001df98:	83 c4 0c             	add    esp,0xc
c001df9b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001df9e:	50                   	push   eax
c001df9f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dfa2:	e8 39 fe ff ff       	call   c001dde0 <IOAPIC::read(int)>
c001dfa7:	83 c4 08             	add    esp,0x8
c001dfaa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001dfad:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001dfb4:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001dfbb:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001dfc2:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001dfc6:	85 c0                	test   eax,eax
c001dfc8:	74 09                	je     c001dfd3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001dfca:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001dfd1:	eb 07                	jmp    c001dfda <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001dfd3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001dfda:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001dfde:	85 c0                	test   eax,eax
c001dfe0:	74 09                	je     c001dfeb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001dfe2:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001dfe9:	eb 07                	jmp    c001dff2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001dfeb:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001dff2:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001dff9:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001dffd:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e000:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e003:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e006:	52                   	push   edx
c001e007:	50                   	push   eax
c001e008:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e00b:	e8 de fe ff ff       	call   c001deee <IOAPIC::write(int, int)>
c001e010:	83 c4 0c             	add    esp,0xc
c001e013:	90                   	nop
c001e014:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e017:	c9                   	leave  
c001e018:	c3                   	ret    
c001e019:	66 90                	xchg   ax,ax
c001e01b:	90                   	nop

c001e01c <APICTimer::close(int, int, void*)>:
c001e01c:	b8 00 00 00 00       	mov    eax,0x0
c001e021:	c3                   	ret    
c001e022:	66 90                	xchg   ax,ax

c001e024 <apicTimerHandler(regs*, void*)>:
c001e024:	83 ec 0c             	sub    esp,0xc
c001e027:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e02b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e02d:	b8 10 27 00 00       	mov    eax,0x2710
c001e032:	ba 00 00 00 00       	mov    edx,0x0
c001e037:	f7 f1                	div    ecx
c001e039:	83 ec 0c             	sub    esp,0xc
c001e03c:	50                   	push   eax
c001e03d:	e8 a2 fa fe ff       	call   c000dae4 <timerHandler(unsigned int)>
c001e042:	83 c4 10             	add    esp,0x10
c001e045:	90                   	nop
c001e046:	83 c4 0c             	add    esp,0xc
c001e049:	c3                   	ret    
c001e04a:	66 90                	xchg   ax,ax

c001e04c <APICTimer::open(int, int, void*)>:
c001e04c:	83 ec 0c             	sub    esp,0xc
c001e04f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e053:	8b 00                	mov    eax,DWORD PTR [eax]
c001e055:	83 c0 24             	add    eax,0x24
c001e058:	8b 00                	mov    eax,DWORD PTR [eax]
c001e05a:	83 ec 08             	sub    esp,0x8
c001e05d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e061:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e065:	ff d0                	call   eax
c001e067:	83 c4 10             	add    esp,0x10
c001e06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e06e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e072:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e07c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e080:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e086:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e08a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e090:	83 ec 0c             	sub    esp,0xc
c001e093:	51                   	push   ecx
c001e094:	6a 01                	push   0x1
c001e096:	68 24 e0 01 c0       	push   0xc001e024
c001e09b:	52                   	push   edx
c001e09c:	50                   	push   eax
c001e09d:	e8 8c df fe ff       	call   c000c02e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e0a2:	83 c4 20             	add    esp,0x20
c001e0a5:	89 c2                	mov    edx,eax
c001e0a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0ab:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e0b1:	b8 00 00 00 00       	mov    eax,0x0
c001e0b6:	83 c4 0c             	add    esp,0xc
c001e0b9:	c3                   	ret    
c001e0ba:	66 90                	xchg   ax,ax

c001e0bc <APICTimer::write(int)>:
c001e0bc:	83 ec 0c             	sub    esp,0xc
c001e0bf:	83 ec 0c             	sub    esp,0xc
c001e0c2:	68 1c 26 02 c0       	push   0xc002261c
c001e0c7:	e8 0f 2b ff ff       	call   c0010bdb <KePanic(char const*)>
c001e0cc:	83 c4 10             	add    esp,0x10
c001e0cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e0d7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e0dd:	90                   	nop
c001e0de:	83 c4 0c             	add    esp,0xc
c001e0e1:	c3                   	ret    
c001e0e2:	66 90                	xchg   ax,ax

c001e0e4 <APICTimer::APICTimer()>:
c001e0e4:	83 ec 0c             	sub    esp,0xc
c001e0e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0eb:	83 ec 08             	sub    esp,0x8
c001e0ee:	68 2c 26 02 c0       	push   0xc002262c
c001e0f3:	50                   	push   eax
c001e0f4:	e8 1f f9 fe ff       	call   c000da18 <Timer::Timer(char const*)>
c001e0f9:	83 c4 10             	add    esp,0x10
c001e0fc:	ba 40 26 02 c0       	mov    edx,0xc0022640
c001e101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e105:	89 10                	mov    DWORD PTR [eax],edx
c001e107:	90                   	nop
c001e108:	83 c4 0c             	add    esp,0xc
c001e10b:	c3                   	ret    

c001e10c <PIT::write(int)>:
c001e10c:	83 ec 10             	sub    esp,0x10
c001e10f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e113:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e117:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e11d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e121:	a3 a4 9b 02 c0       	mov    ds:0xc0029ba4,eax
c001e126:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e12b:	89 c2                	mov    edx,eax
c001e12d:	c1 fa 1f             	sar    edx,0x1f
c001e130:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e134:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e138:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e13f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e144:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e148:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e14d:	ee                   	out    dx,al
c001e14e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e152:	0f b6 c0             	movzx  eax,al
c001e155:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e15c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e160:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e164:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e169:	ee                   	out    dx,al
c001e16a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e16e:	c1 f8 08             	sar    eax,0x8
c001e171:	0f b6 c0             	movzx  eax,al
c001e174:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e17b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e17f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e183:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e188:	ee                   	out    dx,al
c001e189:	90                   	nop
c001e18a:	83 c4 10             	add    esp,0x10
c001e18d:	c3                   	ret    
c001e18e:	66 90                	xchg   ax,ax

c001e190 <pitHandler(regs*, void*)>:
c001e190:	83 ec 0c             	sub    esp,0xc
c001e193:	8b 0d a4 9b 02 c0    	mov    ecx,DWORD PTR ds:0xc0029ba4
c001e199:	b8 10 27 00 00       	mov    eax,0x2710
c001e19e:	89 c2                	mov    edx,eax
c001e1a0:	c1 fa 1f             	sar    edx,0x1f
c001e1a3:	f7 f9                	idiv   ecx
c001e1a5:	83 ec 0c             	sub    esp,0xc
c001e1a8:	50                   	push   eax
c001e1a9:	e8 36 f9 fe ff       	call   c000dae4 <timerHandler(unsigned int)>
c001e1ae:	83 c4 10             	add    esp,0x10
c001e1b1:	90                   	nop
c001e1b2:	83 c4 0c             	add    esp,0xc
c001e1b5:	c3                   	ret    
c001e1b6:	66 90                	xchg   ax,ax

c001e1b8 <PIT::open(int, int, void*)>:
c001e1b8:	83 ec 0c             	sub    esp,0xc
c001e1bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1bf:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1c1:	83 c0 24             	add    eax,0x24
c001e1c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1c6:	83 ec 08             	sub    esp,0x8
c001e1c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e1cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e1d1:	ff d0                	call   eax
c001e1d3:	83 c4 10             	add    esp,0x10
c001e1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1da:	83 ec 0c             	sub    esp,0xc
c001e1dd:	6a 00                	push   0x0
c001e1df:	6a 01                	push   0x1
c001e1e1:	68 90 e1 01 c0       	push   0xc001e190
c001e1e6:	6a 00                	push   0x0
c001e1e8:	50                   	push   eax
c001e1e9:	e8 40 de fe ff       	call   c000c02e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e1ee:	83 c4 20             	add    esp,0x20
c001e1f1:	89 c2                	mov    edx,eax
c001e1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e1fd:	b8 00 00 00 00       	mov    eax,0x0
c001e202:	83 c4 0c             	add    esp,0xc
c001e205:	c3                   	ret    
c001e206:	66 90                	xchg   ax,ax

c001e208 <PIT::close(int, int, void*)>:
c001e208:	83 ec 0c             	sub    esp,0xc
c001e20b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e20f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e21d:	6a 01                	push   0x1
c001e21f:	68 90 e1 01 c0       	push   0xc001e190
c001e224:	6a 00                	push   0x0
c001e226:	50                   	push   eax
c001e227:	e8 38 de fe ff       	call   c000c064 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e22c:	83 c4 10             	add    esp,0x10
c001e22f:	b8 00 00 00 00       	mov    eax,0x0
c001e234:	83 c4 0c             	add    esp,0xc
c001e237:	c3                   	ret    

c001e238 <PIT::PIT()>:
c001e238:	83 ec 0c             	sub    esp,0xc
c001e23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e23f:	83 ec 08             	sub    esp,0x8
c001e242:	68 68 26 02 c0       	push   0xc0022668
c001e247:	50                   	push   eax
c001e248:	e8 cb f7 fe ff       	call   c000da18 <Timer::Timer(char const*)>
c001e24d:	83 c4 10             	add    esp,0x10
c001e250:	ba 90 26 02 c0       	mov    edx,0xc0022690
c001e255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e259:	89 10                	mov    DWORD PTR [eax],edx
c001e25b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e25f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e265:	0f b6 d0             	movzx  edx,al
c001e268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e26c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e277:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e27d:	0f b6 d0             	movzx  edx,al
c001e280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e284:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e28d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e293:	8d 50 01             	lea    edx,[eax+0x1]
c001e296:	88 d1                	mov    cl,dl
c001e298:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e29c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001e2a2:	0f b6 d0             	movzx  edx,al
c001e2a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2a9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e2ad:	83 e1 3f             	and    ecx,0x3f
c001e2b0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e2b4:	90                   	nop
c001e2b5:	83 c4 0c             	add    esp,0xc
c001e2b8:	c3                   	ret    
c001e2b9:	66 90                	xchg   ax,ax
c001e2bb:	66 90                	xchg   ax,ax
c001e2bd:	66 90                	xchg   ax,ax
c001e2bf:	90                   	nop

c001e2c0 <avxDetect>:
c001e2c0:	b8 01 00 00 00       	mov    eax,0x1
c001e2c5:	0f a2                	cpuid  
c001e2c7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001e2cd:	74 15                	je     c001e2e4 <avxDetect.noAVX>
c001e2cf:	b8 01 00 00 00       	mov    eax,0x1
c001e2d4:	0f a2                	cpuid  
c001e2d6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001e2dc:	74 06                	je     c001e2e4 <avxDetect.noAVX>
c001e2de:	b8 01 00 00 00       	mov    eax,0x1
c001e2e3:	c3                   	ret    

c001e2e4 <avxDetect.noAVX>:
c001e2e4:	b8 00 00 00 00       	mov    eax,0x0
c001e2e9:	c3                   	ret    

c001e2ea <avxSave>:
c001e2ea:	53                   	push   ebx
c001e2eb:	52                   	push   edx
c001e2ec:	31 c0                	xor    eax,eax
c001e2ee:	48                   	dec    eax
c001e2ef:	89 c2                	mov    edx,eax
c001e2f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e2f5:	0f ae 23             	xsave  [ebx]
c001e2f8:	5a                   	pop    edx
c001e2f9:	5b                   	pop    ebx
c001e2fa:	c3                   	ret    

c001e2fb <avxLoad>:
c001e2fb:	53                   	push   ebx
c001e2fc:	52                   	push   edx
c001e2fd:	31 c0                	xor    eax,eax
c001e2ff:	48                   	dec    eax
c001e300:	89 c2                	mov    edx,eax
c001e302:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e306:	0f ae 2b             	xrstor [ebx]
c001e309:	5a                   	pop    edx
c001e30a:	5b                   	pop    ebx
c001e30b:	c3                   	ret    

c001e30c <avxInit>:
c001e30c:	e8 67 03 00 00       	call   c001e678 <sseInit>
c001e311:	50                   	push   eax
c001e312:	51                   	push   ecx
c001e313:	0f 20 e0             	mov    eax,cr4
c001e316:	0d 00 00 04 00       	or     eax,0x40000
c001e31b:	0f 22 e0             	mov    cr4,eax
c001e31e:	31 c9                	xor    ecx,ecx
c001e320:	0f 01 d0             	xgetbv 
c001e323:	0d 07 00 00 00       	or     eax,0x7
c001e328:	0f 01 d1             	xsetbv 
c001e32b:	59                   	pop    ecx
c001e32c:	58                   	pop    eax
c001e32d:	c3                   	ret    

c001e32e <avxClose>:
c001e32e:	c3                   	ret    

c001e32f <wouldSheSayYes>:
c001e32f:	c3                   	ret    
c001e330:	49                   	dec    ecx
c001e331:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001e335:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001e339:	75 20                	jne    c001e35b <isr0+0xb>
c001e33b:	4e                   	dec    esi
c001e33c:	79 61                	jns    c001e39f <isr7+0x3>
c001e33e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001e343:	66 90                	xchg   ax,ax
c001e345:	66 90                	xchg   ax,ax
c001e347:	66 90                	xchg   ax,ax
c001e349:	66 90                	xchg   ax,ax
c001e34b:	66 90                	xchg   ax,ax
c001e34d:	66 90                	xchg   ax,ax
c001e34f:	90                   	nop

c001e350 <isr0>:
c001e350:	fa                   	cli    
c001e351:	68 00 00 00 00       	push   0x0
c001e356:	68 00 00 00 00       	push   0x0
c001e35b:	e9 56 01 00 00       	jmp    c001e4b6 <int_common_stub>

c001e360 <isr1>:
c001e360:	fa                   	cli    
c001e361:	6a 00                	push   0x0
c001e363:	6a 01                	push   0x1
c001e365:	e9 4c 01 00 00       	jmp    c001e4b6 <int_common_stub>

c001e36a <isr2>:
c001e36a:	fa                   	cli    
c001e36b:	6a 00                	push   0x0
c001e36d:	6a 02                	push   0x2
c001e36f:	e9 42 01 00 00       	jmp    c001e4b6 <int_common_stub>

c001e374 <isr3>:
c001e374:	fa                   	cli    
c001e375:	6a 00                	push   0x0
c001e377:	6a 03                	push   0x3
c001e379:	e9 38 01 00 00       	jmp    c001e4b6 <int_common_stub>

c001e37e <isr4>:
c001e37e:	fa                   	cli    
c001e37f:	6a 00                	push   0x0
c001e381:	6a 04                	push   0x4
c001e383:	e9 2e 01 00 00       	jmp    c001e4b6 <int_common_stub>

c001e388 <isr5>:
c001e388:	fa                   	cli    
c001e389:	6a 00                	push   0x0
c001e38b:	6a 05                	push   0x5
c001e38d:	e9 24 01 00 00       	jmp    c001e4b6 <int_common_stub>

c001e392 <isr6>:
c001e392:	fa                   	cli    
c001e393:	6a 00                	push   0x0
c001e395:	6a 06                	push   0x6
c001e397:	e9 1a 01 00 00       	jmp    c001e4b6 <int_common_stub>

c001e39c <isr7>:
c001e39c:	fa                   	cli    
c001e39d:	6a 00                	push   0x0
c001e39f:	6a 07                	push   0x7
c001e3a1:	e9 10 01 00 00       	jmp    c001e4b6 <int_common_stub>

c001e3a6 <isr8>:
c001e3a6:	fa                   	cli    
c001e3a7:	6a 08                	push   0x8
c001e3a9:	e9 08 01 00 00       	jmp    c001e4b6 <int_common_stub>

c001e3ae <isr9>:
c001e3ae:	fa                   	cli    
c001e3af:	6a 00                	push   0x0
c001e3b1:	6a 09                	push   0x9
c001e3b3:	e9 fe 00 00 00       	jmp    c001e4b6 <int_common_stub>

c001e3b8 <isr10>:
c001e3b8:	fa                   	cli    
c001e3b9:	6a 0a                	push   0xa
c001e3bb:	e9 f6 00 00 00       	jmp    c001e4b6 <int_common_stub>

c001e3c0 <isr11>:
c001e3c0:	fa                   	cli    
c001e3c1:	6a 0b                	push   0xb
c001e3c3:	e9 ee 00 00 00       	jmp    c001e4b6 <int_common_stub>

c001e3c8 <isr12>:
c001e3c8:	fa                   	cli    
c001e3c9:	6a 0c                	push   0xc
c001e3cb:	e9 e6 00 00 00       	jmp    c001e4b6 <int_common_stub>

c001e3d0 <isr13>:
c001e3d0:	fa                   	cli    
c001e3d1:	6a 0d                	push   0xd
c001e3d3:	53                   	push   ebx
c001e3d4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e3d8:	81 fb a6 e5 01 c0    	cmp    ebx,0xc001e5a6
c001e3de:	5b                   	pop    ebx
c001e3df:	0f 84 c3 01 00 00    	je     c001e5a8 <finishSignal2>
c001e3e5:	e9 cc 00 00 00       	jmp    c001e4b6 <int_common_stub>

c001e3ea <isr14>:
c001e3ea:	fa                   	cli    
c001e3eb:	6a 0e                	push   0xe
c001e3ed:	e9 c4 00 00 00       	jmp    c001e4b6 <int_common_stub>

c001e3f2 <isr15>:
c001e3f2:	fa                   	cli    
c001e3f3:	6a 00                	push   0x0
c001e3f5:	6a 0f                	push   0xf
c001e3f7:	e9 ba 00 00 00       	jmp    c001e4b6 <int_common_stub>

c001e3fc <isr16>:
c001e3fc:	fa                   	cli    
c001e3fd:	6a 00                	push   0x0
c001e3ff:	6a 10                	push   0x10
c001e401:	e9 b0 00 00 00       	jmp    c001e4b6 <int_common_stub>

c001e406 <isr17>:
c001e406:	fa                   	cli    
c001e407:	6a 00                	push   0x0
c001e409:	6a 11                	push   0x11
c001e40b:	e9 a6 00 00 00       	jmp    c001e4b6 <int_common_stub>

c001e410 <isr18>:
c001e410:	fa                   	cli    
c001e411:	6a 00                	push   0x0
c001e413:	6a 12                	push   0x12
c001e415:	e9 9c 00 00 00       	jmp    c001e4b6 <int_common_stub>

c001e41a <irq3>:
c001e41a:	fa                   	cli    
c001e41b:	6a 00                	push   0x0
c001e41d:	6a 23                	push   0x23
c001e41f:	e9 92 00 00 00       	jmp    c001e4b6 <int_common_stub>

c001e424 <irq4>:
c001e424:	fa                   	cli    
c001e425:	6a 00                	push   0x0
c001e427:	6a 24                	push   0x24
c001e429:	e9 88 00 00 00       	jmp    c001e4b6 <int_common_stub>

c001e42e <irq5>:
c001e42e:	fa                   	cli    
c001e42f:	6a 00                	push   0x0
c001e431:	6a 25                	push   0x25
c001e433:	e9 7e 00 00 00       	jmp    c001e4b6 <int_common_stub>

c001e438 <irq6>:
c001e438:	fa                   	cli    
c001e439:	6a 00                	push   0x0
c001e43b:	6a 26                	push   0x26
c001e43d:	e9 74 00 00 00       	jmp    c001e4b6 <int_common_stub>

c001e442 <irq7>:
c001e442:	fa                   	cli    
c001e443:	6a 00                	push   0x0
c001e445:	6a 27                	push   0x27
c001e447:	e9 6a 00 00 00       	jmp    c001e4b6 <int_common_stub>

c001e44c <irq8>:
c001e44c:	fa                   	cli    
c001e44d:	6a 00                	push   0x0
c001e44f:	6a 28                	push   0x28
c001e451:	e9 60 00 00 00       	jmp    c001e4b6 <int_common_stub>

c001e456 <irq9>:
c001e456:	fa                   	cli    
c001e457:	6a 00                	push   0x0
c001e459:	6a 29                	push   0x29
c001e45b:	e9 56 00 00 00       	jmp    c001e4b6 <int_common_stub>

c001e460 <irq10>:
c001e460:	fa                   	cli    
c001e461:	6a 00                	push   0x0
c001e463:	6a 2a                	push   0x2a
c001e465:	e9 4c 00 00 00       	jmp    c001e4b6 <int_common_stub>

c001e46a <irq11>:
c001e46a:	fa                   	cli    
c001e46b:	6a 00                	push   0x0
c001e46d:	6a 2b                	push   0x2b
c001e46f:	e9 42 00 00 00       	jmp    c001e4b6 <int_common_stub>

c001e474 <irq12>:
c001e474:	fa                   	cli    
c001e475:	6a 00                	push   0x0
c001e477:	6a 2c                	push   0x2c
c001e479:	e9 38 00 00 00       	jmp    c001e4b6 <int_common_stub>

c001e47e <irq13>:
c001e47e:	fa                   	cli    
c001e47f:	6a 00                	push   0x0
c001e481:	6a 2d                	push   0x2d
c001e483:	e9 2e 00 00 00       	jmp    c001e4b6 <int_common_stub>

c001e488 <irq14>:
c001e488:	fa                   	cli    
c001e489:	6a 00                	push   0x0
c001e48b:	6a 2e                	push   0x2e
c001e48d:	e9 24 00 00 00       	jmp    c001e4b6 <int_common_stub>

c001e492 <irq15>:
c001e492:	fa                   	cli    
c001e493:	6a 00                	push   0x0
c001e495:	6a 2f                	push   0x2f
c001e497:	e9 1a 00 00 00       	jmp    c001e4b6 <int_common_stub>

c001e49c <irq1>:
c001e49c:	fa                   	cli    
c001e49d:	6a 00                	push   0x0
c001e49f:	6a 21                	push   0x21
c001e4a1:	eb 13                	jmp    c001e4b6 <int_common_stub>

c001e4a3 <irq2>:
c001e4a3:	fa                   	cli    
c001e4a4:	6a 00                	push   0x0
c001e4a6:	6a 22                	push   0x22
c001e4a8:	eb 0c                	jmp    c001e4b6 <int_common_stub>

c001e4aa <isr96>:
c001e4aa:	6a 00                	push   0x0
c001e4ac:	6a 60                	push   0x60
c001e4ae:	fb                   	sti    
c001e4af:	eb 37                	jmp    c001e4e8 <syscall_common_stub>

c001e4b1 <irq0>:
c001e4b1:	fa                   	cli    
c001e4b2:	6a 00                	push   0x0
c001e4b4:	6a 20                	push   0x20

c001e4b6 <int_common_stub>:
c001e4b6:	60                   	pusha  
c001e4b7:	1e                   	push   ds
c001e4b8:	06                   	push   es
c001e4b9:	0f a0                	push   fs
c001e4bb:	0f a8                	push   gs
c001e4bd:	66 b8 10 00          	mov    ax,0x10
c001e4c1:	66 8e d8             	mov    ds,ax
c001e4c4:	66 8e c0             	mov    es,ax
c001e4c7:	66 8e e0             	mov    fs,ax
c001e4ca:	66 8e e8             	mov    gs,ax
c001e4cd:	54                   	push   esp
c001e4ce:	fc                   	cld    
c001e4cf:	e8 58 e0 fe ff       	call   c000c52c <int_handler>
c001e4d4:	81 c4 04 00 00 00    	add    esp,0x4
c001e4da:	0f a9                	pop    gs
c001e4dc:	0f a1                	pop    fs
c001e4de:	07                   	pop    es
c001e4df:	1f                   	pop    ds
c001e4e0:	61                   	popa   
c001e4e1:	81 c4 08 00 00 00    	add    esp,0x8
c001e4e7:	cf                   	iret   

c001e4e8 <syscall_common_stub>:
c001e4e8:	60                   	pusha  
c001e4e9:	1e                   	push   ds
c001e4ea:	06                   	push   es
c001e4eb:	0f a0                	push   fs
c001e4ed:	0f a8                	push   gs
c001e4ef:	66 b8 10 00          	mov    ax,0x10
c001e4f3:	66 8e d8             	mov    ds,ax
c001e4f6:	66 8e c0             	mov    es,ax
c001e4f9:	66 8e e0             	mov    fs,ax
c001e4fc:	66 8e e8             	mov    gs,ax
c001e4ff:	54                   	push   esp
c001e500:	fc                   	cld    
c001e501:	e8 26 e0 fe ff       	call   c000c52c <int_handler>
c001e506:	81 c4 04 00 00 00    	add    esp,0x4
c001e50c:	0f a9                	pop    gs
c001e50e:	0f a1                	pop    fs
c001e510:	07                   	pop    es
c001e511:	1f                   	pop    ds
c001e512:	e8 db 2c ff ff       	call   c00111f2 <KiCheckSignalZ>
c001e517:	3d 00 00 00 00       	cmp    eax,0x0
c001e51c:	0f 84 c0 00 00 00    	je     c001e5e2 <skipSignals>
c001e522:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e527:	61                   	popa   
c001e528:	53                   	push   ebx
c001e529:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e52f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e532:	5b                   	pop    ebx
c001e533:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e538:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e53b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e53e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e541:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e544:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e547:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e54a:	81 c4 08 00 00 00    	add    esp,0x8
c001e550:	5e                   	pop    esi
c001e551:	5b                   	pop    ebx
c001e552:	59                   	pop    ecx
c001e553:	5a                   	pop    edx
c001e554:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e557:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e55a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e55d:	52                   	push   edx
c001e55e:	51                   	push   ecx
c001e55f:	53                   	push   ebx
c001e560:	56                   	push   esi
c001e561:	81 ec 08 00 00 00    	sub    esp,0x8
c001e567:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e56a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e56d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e570:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e573:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e576:	60                   	pusha  
c001e577:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e57d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e580:	89 e3                	mov    ebx,esp
c001e582:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e585:	52                   	push   edx
c001e586:	68 a6 e5 01 c0       	push   0xc001e5a6
c001e58b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e58e:	89 dc                	mov    esp,ebx
c001e590:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e593:	68 23 00 00 00       	push   0x23
c001e598:	51                   	push   ecx
c001e599:	68 02 02 00 00       	push   0x202
c001e59e:	68 1b 00 00 00       	push   0x1b
c001e5a3:	ff 36                	push   DWORD PTR [esi]
c001e5a5:	cf                   	iret   

c001e5a6 <finishSignal>:
c001e5a6:	cd 0f                	int    0xf

c001e5a8 <finishSignal2>:
c001e5a8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e5ae:	e8 bc 2c ff ff       	call   c001126f <KiFinishSignalZ>
c001e5b3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e5b9:	68 23 00 00 00       	push   0x23
c001e5be:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e5c1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e5c4:	68 1b 00 00 00       	push   0x1b
c001e5c9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e5cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5cf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e5d2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e5d5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e5d8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e5db:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e5de:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e5e1:	cf                   	iret   

c001e5e2 <skipSignals>:
c001e5e2:	61                   	popa   
c001e5e3:	81 c4 08 00 00 00    	add    esp,0x8
c001e5e9:	cf                   	iret   
c001e5ea:	90                   	nop
c001e5eb:	90                   	nop

c001e5ec <irq16>:
c001e5ec:	fa                   	cli    
c001e5ed:	6a 00                	push   0x0
c001e5ef:	6a 30                	push   0x30
c001e5f1:	e9 c0 fe ff ff       	jmp    c001e4b6 <int_common_stub>

c001e5f6 <irq17>:
c001e5f6:	fa                   	cli    
c001e5f7:	6a 00                	push   0x0
c001e5f9:	6a 31                	push   0x31
c001e5fb:	e9 b6 fe ff ff       	jmp    c001e4b6 <int_common_stub>

c001e600 <irq18>:
c001e600:	fa                   	cli    
c001e601:	6a 00                	push   0x0
c001e603:	6a 32                	push   0x32
c001e605:	e9 ac fe ff ff       	jmp    c001e4b6 <int_common_stub>

c001e60a <irq19>:
c001e60a:	fa                   	cli    
c001e60b:	6a 00                	push   0x0
c001e60d:	6a 33                	push   0x33
c001e60f:	e9 a2 fe ff ff       	jmp    c001e4b6 <int_common_stub>

c001e614 <irq20>:
c001e614:	fa                   	cli    
c001e615:	6a 00                	push   0x0
c001e617:	6a 34                	push   0x34
c001e619:	e9 98 fe ff ff       	jmp    c001e4b6 <int_common_stub>

c001e61e <irq21>:
c001e61e:	fa                   	cli    
c001e61f:	6a 00                	push   0x0
c001e621:	6a 35                	push   0x35
c001e623:	e9 8e fe ff ff       	jmp    c001e4b6 <int_common_stub>

c001e628 <irq22>:
c001e628:	fa                   	cli    
c001e629:	6a 00                	push   0x0
c001e62b:	6a 36                	push   0x36
c001e62d:	e9 84 fe ff ff       	jmp    c001e4b6 <int_common_stub>

c001e632 <irq23>:
c001e632:	fa                   	cli    
c001e633:	6a 00                	push   0x0
c001e635:	6a 37                	push   0x37
c001e637:	e9 7a fe ff ff       	jmp    c001e4b6 <int_common_stub>
c001e63c:	66 90                	xchg   ax,ax
c001e63e:	66 90                	xchg   ax,ax

c001e640 <i386GetRDRAND>:
c001e640:	b9 64 00 00 00       	mov    ecx,0x64

c001e645 <retry>:
c001e645:	0f c7 f0             	rdrand eax
c001e648:	72 05                	jb     c001e64f <retry.done>
c001e64a:	e2 f9                	loop   c001e645 <retry>

c001e64c <retry.fail>:
c001e64c:	31 c0                	xor    eax,eax
c001e64e:	c3                   	ret    

c001e64f <retry.done>:
c001e64f:	c3                   	ret    

c001e650 <absolutelyNoChanceInHell>:
c001e650:	b8 01 00 00 00       	mov    eax,0x1
c001e655:	0f a2                	cpuid  
c001e657:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e65d:	74 06                	je     c001e665 <sseDetect.noSSE>
c001e65f:	b8 01 00 00 00       	mov    eax,0x1
c001e664:	c3                   	ret    

c001e665 <sseDetect.noSSE>:
c001e665:	31 c0                	xor    eax,eax
c001e667:	c3                   	ret    

c001e668 <sseSave>:
c001e668:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e66c:	0f ae 00             	fxsave [eax]
c001e66f:	c3                   	ret    

c001e670 <sseLoad>:
c001e670:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e674:	0f ae 08             	fxrstor [eax]
c001e677:	c3                   	ret    

c001e678 <sseInit>:
c001e678:	e8 42 00 00 00       	call   c001e6bf <x87Init>
c001e67d:	0f 20 e0             	mov    eax,cr4
c001e680:	66 0d 00 06          	or     ax,0x600
c001e684:	0f 22 e0             	mov    cr4,eax
c001e687:	c3                   	ret    

c001e688 <sseClose>:
c001e688:	c3                   	ret    
c001e689:	66 90                	xchg   ax,ax
c001e68b:	66 90                	xchg   ax,ax
c001e68d:	66 90                	xchg   ax,ax
c001e68f:	90                   	nop

c001e690 <value_37F>:
c001e690:	7f 03                	jg     c001e695 <value_37A+0x1>

c001e692 <value_37E>:
c001e692:	7e 03                	jle    c001e697 <x87Detect+0x1>

c001e694 <value_37A>:
c001e694:	7a 03                	jp     c001e699 <x87Detect+0x3>

c001e696 <x87Detect>:
c001e696:	b8 01 00 00 00       	mov    eax,0x1
c001e69b:	0f a2                	cpuid  
c001e69d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e6a3:	74 06                	je     c001e6ab <x87Detect.nox87>
c001e6a5:	b8 01 00 00 00       	mov    eax,0x1
c001e6aa:	c3                   	ret    

c001e6ab <x87Detect.nox87>:
c001e6ab:	b8 00 00 00 00       	mov    eax,0x0
c001e6b0:	c3                   	ret    

c001e6b1 <x87Save>:
c001e6b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6b5:	dd 30                	fnsave [eax]
c001e6b7:	c3                   	ret    

c001e6b8 <x87Load>:
c001e6b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6bc:	dd 20                	frstor [eax]
c001e6be:	c3                   	ret    

c001e6bf <x87Init>:
c001e6bf:	0f 20 c0             	mov    eax,cr0
c001e6c2:	66 25 fb ff          	and    ax,0xfffb
c001e6c6:	66 0d 22 00          	or     ax,0x22
c001e6ca:	0f 22 c0             	mov    cr0,eax
c001e6cd:	db e3                	fninit 
c001e6cf:	0f 06                	clts   
c001e6d1:	d9 2d 94 e6 01 c0    	fldcw  WORD PTR ds:0xc001e694
c001e6d7:	c3                   	ret    

c001e6d8 <x87Close>:
c001e6d8:	c3                   	ret    
c001e6d9:	66 90                	xchg   ax,ax
c001e6db:	90                   	nop

c001e6dc <__do_global_ctors_aux>:
c001e6dc:	a1 90 f6 01 c0       	mov    eax,ds:0xc001f690
c001e6e1:	83 f8 ff             	cmp    eax,0xffffffff
c001e6e4:	74 1a                	je     c001e700 <__do_global_ctors_aux+0x24>
c001e6e6:	55                   	push   ebp
c001e6e7:	89 e5                	mov    ebp,esp
c001e6e9:	53                   	push   ebx
c001e6ea:	52                   	push   edx
c001e6eb:	bb 90 f6 01 c0       	mov    ebx,0xc001f690
c001e6f0:	ff d0                	call   eax
c001e6f2:	83 eb 04             	sub    ebx,0x4
c001e6f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e6f7:	83 f8 ff             	cmp    eax,0xffffffff
c001e6fa:	75 f4                	jne    c001e6f0 <__do_global_ctors_aux+0x14>
c001e6fc:	58                   	pop    eax
c001e6fd:	5b                   	pop    ebx
c001e6fe:	5d                   	pop    ebp
c001e6ff:	c3                   	ret    
c001e700:	c3                   	ret    
c001e701:	66 90                	xchg   ax,ax
c001e703:	90                   	nop

c001e704 <__divdi3>:
c001e704:	55                   	push   ebp
c001e705:	57                   	push   edi
c001e706:	56                   	push   esi
c001e707:	53                   	push   ebx
c001e708:	83 ec 1c             	sub    esp,0x1c
c001e70b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e70f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e713:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e716:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e71a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e71e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e722:	85 db                	test   ebx,ebx
c001e724:	0f 88 8e 00 00 00    	js     c001e7b8 <__divdi3+0xb4>
c001e72a:	89 dd                	mov    ebp,ebx
c001e72c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e734:	89 d3                	mov    ebx,edx
c001e736:	85 d2                	test   edx,edx
c001e738:	79 0d                	jns    c001e747 <__divdi3+0x43>
c001e73a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e73e:	f7 d8                	neg    eax
c001e740:	83 d2 00             	adc    edx,0x0
c001e743:	f7 da                	neg    edx
c001e745:	89 d3                	mov    ebx,edx
c001e747:	89 c7                	mov    edi,eax
c001e749:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e74c:	85 db                	test   ebx,ebx
c001e74e:	75 48                	jne    c001e798 <__divdi3+0x94>
c001e750:	39 ef                	cmp    edi,ebp
c001e752:	76 24                	jbe    c001e778 <__divdi3+0x74>
c001e754:	89 ea                	mov    edx,ebp
c001e756:	f7 f7                	div    edi
c001e758:	89 c1                	mov    ecx,eax
c001e75a:	31 f6                	xor    esi,esi
c001e75c:	89 c8                	mov    eax,ecx
c001e75e:	89 f2                	mov    edx,esi
c001e760:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e764:	85 c9                	test   ecx,ecx
c001e766:	74 07                	je     c001e76f <__divdi3+0x6b>
c001e768:	f7 d8                	neg    eax
c001e76a:	83 d2 00             	adc    edx,0x0
c001e76d:	f7 da                	neg    edx
c001e76f:	83 c4 1c             	add    esp,0x1c
c001e772:	5b                   	pop    ebx
c001e773:	5e                   	pop    esi
c001e774:	5f                   	pop    edi
c001e775:	5d                   	pop    ebp
c001e776:	c3                   	ret    
c001e777:	90                   	nop
c001e778:	85 ff                	test   edi,edi
c001e77a:	75 0b                	jne    c001e787 <__divdi3+0x83>
c001e77c:	b8 01 00 00 00       	mov    eax,0x1
c001e781:	31 d2                	xor    edx,edx
c001e783:	f7 f3                	div    ebx
c001e785:	89 c7                	mov    edi,eax
c001e787:	31 d2                	xor    edx,edx
c001e789:	89 e8                	mov    eax,ebp
c001e78b:	f7 f7                	div    edi
c001e78d:	89 c6                	mov    esi,eax
c001e78f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e792:	f7 f7                	div    edi
c001e794:	89 c1                	mov    ecx,eax
c001e796:	eb c4                	jmp    c001e75c <__divdi3+0x58>
c001e798:	39 eb                	cmp    ebx,ebp
c001e79a:	77 3c                	ja     c001e7d8 <__divdi3+0xd4>
c001e79c:	0f bd f3             	bsr    esi,ebx
c001e79f:	83 f6 1f             	xor    esi,0x1f
c001e7a2:	75 40                	jne    c001e7e4 <__divdi3+0xe0>
c001e7a4:	39 eb                	cmp    ebx,ebp
c001e7a6:	72 09                	jb     c001e7b1 <__divdi3+0xad>
c001e7a8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e7ab:	0f 87 97 00 00 00    	ja     c001e848 <__divdi3+0x144>
c001e7b1:	b9 01 00 00 00       	mov    ecx,0x1
c001e7b6:	eb a4                	jmp    c001e75c <__divdi3+0x58>
c001e7b8:	f7 d9                	neg    ecx
c001e7ba:	83 d3 00             	adc    ebx,0x0
c001e7bd:	f7 db                	neg    ebx
c001e7bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e7c2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e7c6:	89 dd                	mov    ebp,ebx
c001e7c8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e7d0:	e9 5f ff ff ff       	jmp    c001e734 <__divdi3+0x30>
c001e7d5:	8d 76 00             	lea    esi,[esi+0x0]
c001e7d8:	31 f6                	xor    esi,esi
c001e7da:	31 c9                	xor    ecx,ecx
c001e7dc:	e9 7b ff ff ff       	jmp    c001e75c <__divdi3+0x58>
c001e7e1:	8d 76 00             	lea    esi,[esi+0x0]
c001e7e4:	b8 20 00 00 00       	mov    eax,0x20
c001e7e9:	29 f0                	sub    eax,esi
c001e7eb:	89 f1                	mov    ecx,esi
c001e7ed:	d3 e3                	shl    ebx,cl
c001e7ef:	89 fa                	mov    edx,edi
c001e7f1:	88 c1                	mov    cl,al
c001e7f3:	d3 ea                	shr    edx,cl
c001e7f5:	09 da                	or     edx,ebx
c001e7f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e7fb:	89 f1                	mov    ecx,esi
c001e7fd:	d3 e7                	shl    edi,cl
c001e7ff:	89 eb                	mov    ebx,ebp
c001e801:	88 c1                	mov    cl,al
c001e803:	d3 eb                	shr    ebx,cl
c001e805:	89 f1                	mov    ecx,esi
c001e807:	d3 e5                	shl    ebp,cl
c001e809:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e80c:	88 c1                	mov    cl,al
c001e80e:	d3 ea                	shr    edx,cl
c001e810:	09 d5                	or     ebp,edx
c001e812:	89 e8                	mov    eax,ebp
c001e814:	89 da                	mov    edx,ebx
c001e816:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e81a:	89 d3                	mov    ebx,edx
c001e81c:	89 c5                	mov    ebp,eax
c001e81e:	f7 e7                	mul    edi
c001e820:	39 d3                	cmp    ebx,edx
c001e822:	72 18                	jb     c001e83c <__divdi3+0x138>
c001e824:	74 0a                	je     c001e830 <__divdi3+0x12c>
c001e826:	89 e9                	mov    ecx,ebp
c001e828:	31 f6                	xor    esi,esi
c001e82a:	e9 2d ff ff ff       	jmp    c001e75c <__divdi3+0x58>
c001e82f:	90                   	nop
c001e830:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e833:	89 f1                	mov    ecx,esi
c001e835:	d3 e7                	shl    edi,cl
c001e837:	39 c7                	cmp    edi,eax
c001e839:	73 eb                	jae    c001e826 <__divdi3+0x122>
c001e83b:	90                   	nop
c001e83c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e83f:	31 f6                	xor    esi,esi
c001e841:	e9 16 ff ff ff       	jmp    c001e75c <__divdi3+0x58>
c001e846:	66 90                	xchg   ax,ax
c001e848:	31 c9                	xor    ecx,ecx
c001e84a:	e9 0d ff ff ff       	jmp    c001e75c <__divdi3+0x58>
c001e84f:	90                   	nop

c001e850 <__moddi3>:
c001e850:	55                   	push   ebp
c001e851:	57                   	push   edi
c001e852:	56                   	push   esi
c001e853:	53                   	push   ebx
c001e854:	83 ec 2c             	sub    esp,0x2c
c001e857:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e85b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e85f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e863:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e867:	85 db                	test   ebx,ebx
c001e869:	0f 88 85 00 00 00    	js     c001e8f4 <__moddi3+0xa4>
c001e86f:	89 de                	mov    esi,ebx
c001e871:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e879:	89 d7                	mov    edi,edx
c001e87b:	85 d2                	test   edx,edx
c001e87d:	79 09                	jns    c001e888 <__moddi3+0x38>
c001e87f:	f7 d8                	neg    eax
c001e881:	83 d2 00             	adc    edx,0x0
c001e884:	f7 da                	neg    edx
c001e886:	89 d7                	mov    edi,edx
c001e888:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e88c:	89 cd                	mov    ebp,ecx
c001e88e:	85 ff                	test   edi,edi
c001e890:	75 52                	jne    c001e8e4 <__moddi3+0x94>
c001e892:	89 c3                	mov    ebx,eax
c001e894:	39 f0                	cmp    eax,esi
c001e896:	76 24                	jbe    c001e8bc <__moddi3+0x6c>
c001e898:	89 c8                	mov    eax,ecx
c001e89a:	89 f2                	mov    edx,esi
c001e89c:	f7 f3                	div    ebx
c001e89e:	89 d6                	mov    esi,edx
c001e8a0:	89 f0                	mov    eax,esi
c001e8a2:	31 d2                	xor    edx,edx
c001e8a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e8a8:	85 c9                	test   ecx,ecx
c001e8aa:	74 07                	je     c001e8b3 <__moddi3+0x63>
c001e8ac:	f7 d8                	neg    eax
c001e8ae:	83 d2 00             	adc    edx,0x0
c001e8b1:	f7 da                	neg    edx
c001e8b3:	83 c4 2c             	add    esp,0x2c
c001e8b6:	5b                   	pop    ebx
c001e8b7:	5e                   	pop    esi
c001e8b8:	5f                   	pop    edi
c001e8b9:	5d                   	pop    ebp
c001e8ba:	c3                   	ret    
c001e8bb:	90                   	nop
c001e8bc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e8c0:	85 db                	test   ebx,ebx
c001e8c2:	75 0d                	jne    c001e8d1 <__moddi3+0x81>
c001e8c4:	b8 01 00 00 00       	mov    eax,0x1
c001e8c9:	31 d2                	xor    edx,edx
c001e8cb:	f7 f7                	div    edi
c001e8cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e8d1:	89 f0                	mov    eax,esi
c001e8d3:	31 d2                	xor    edx,edx
c001e8d5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e8d9:	f7 f7                	div    edi
c001e8db:	89 e8                	mov    eax,ebp
c001e8dd:	f7 f7                	div    edi
c001e8df:	89 d6                	mov    esi,edx
c001e8e1:	eb bd                	jmp    c001e8a0 <__moddi3+0x50>
c001e8e3:	90                   	nop
c001e8e4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e8e8:	39 f7                	cmp    edi,esi
c001e8ea:	76 20                	jbe    c001e90c <__moddi3+0xbc>
c001e8ec:	89 c8                	mov    eax,ecx
c001e8ee:	89 f2                	mov    edx,esi
c001e8f0:	eb b2                	jmp    c001e8a4 <__moddi3+0x54>
c001e8f2:	66 90                	xchg   ax,ax
c001e8f4:	f7 d9                	neg    ecx
c001e8f6:	83 d3 00             	adc    ebx,0x0
c001e8f9:	f7 db                	neg    ebx
c001e8fb:	89 de                	mov    esi,ebx
c001e8fd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e905:	e9 6f ff ff ff       	jmp    c001e879 <__moddi3+0x29>
c001e90a:	66 90                	xchg   ax,ax
c001e90c:	0f bd c7             	bsr    eax,edi
c001e90f:	83 f0 1f             	xor    eax,0x1f
c001e912:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e916:	75 24                	jne    c001e93c <__moddi3+0xec>
c001e918:	39 f7                	cmp    edi,esi
c001e91a:	72 06                	jb     c001e922 <__moddi3+0xd2>
c001e91c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e920:	77 0c                	ja     c001e92e <__moddi3+0xde>
c001e922:	89 e9                	mov    ecx,ebp
c001e924:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e928:	19 fe                	sbb    esi,edi
c001e92a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e92e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e932:	89 f2                	mov    edx,esi
c001e934:	e9 6b ff ff ff       	jmp    c001e8a4 <__moddi3+0x54>
c001e939:	8d 76 00             	lea    esi,[esi+0x0]
c001e93c:	b8 20 00 00 00       	mov    eax,0x20
c001e941:	89 c2                	mov    edx,eax
c001e943:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e947:	29 da                	sub    edx,ebx
c001e949:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e94d:	88 d9                	mov    cl,bl
c001e94f:	d3 e7                	shl    edi,cl
c001e951:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e955:	88 d1                	mov    cl,dl
c001e957:	d3 e8                	shr    eax,cl
c001e959:	09 c7                	or     edi,eax
c001e95b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e95f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e963:	89 d8                	mov    eax,ebx
c001e965:	88 d9                	mov    cl,bl
c001e967:	d3 e7                	shl    edi,cl
c001e969:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e96d:	89 f3                	mov    ebx,esi
c001e96f:	88 d1                	mov    cl,dl
c001e971:	d3 eb                	shr    ebx,cl
c001e973:	89 c7                	mov    edi,eax
c001e975:	88 c1                	mov    cl,al
c001e977:	d3 e6                	shl    esi,cl
c001e979:	89 e8                	mov    eax,ebp
c001e97b:	88 d1                	mov    cl,dl
c001e97d:	d3 e8                	shr    eax,cl
c001e97f:	09 f0                	or     eax,esi
c001e981:	89 f9                	mov    ecx,edi
c001e983:	d3 e5                	shl    ebp,cl
c001e985:	89 da                	mov    edx,ebx
c001e987:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e98b:	89 d3                	mov    ebx,edx
c001e98d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e991:	89 c6                	mov    esi,eax
c001e993:	89 d1                	mov    ecx,edx
c001e995:	39 d3                	cmp    ebx,edx
c001e997:	72 27                	jb     c001e9c0 <__moddi3+0x170>
c001e999:	74 21                	je     c001e9bc <__moddi3+0x16c>
c001e99b:	29 f5                	sub    ebp,esi
c001e99d:	19 cb                	sbb    ebx,ecx
c001e99f:	89 de                	mov    esi,ebx
c001e9a1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e9a5:	d3 e6                	shl    esi,cl
c001e9a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e9ab:	89 f9                	mov    ecx,edi
c001e9ad:	d3 ed                	shr    ebp,cl
c001e9af:	09 ee                	or     esi,ebp
c001e9b1:	89 f0                	mov    eax,esi
c001e9b3:	d3 eb                	shr    ebx,cl
c001e9b5:	89 da                	mov    edx,ebx
c001e9b7:	e9 e8 fe ff ff       	jmp    c001e8a4 <__moddi3+0x54>
c001e9bc:	39 c5                	cmp    ebp,eax
c001e9be:	73 db                	jae    c001e99b <__moddi3+0x14b>
c001e9c0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e9c4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e9c8:	89 d1                	mov    ecx,edx
c001e9ca:	89 c6                	mov    esi,eax
c001e9cc:	eb cd                	jmp    c001e99b <__moddi3+0x14b>
c001e9ce:	66 90                	xchg   ax,ax

c001e9d0 <__udivdi3>:
c001e9d0:	55                   	push   ebp
c001e9d1:	57                   	push   edi
c001e9d2:	56                   	push   esi
c001e9d3:	53                   	push   ebx
c001e9d4:	83 ec 1c             	sub    esp,0x1c
c001e9d7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e9db:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e9df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e9e3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e9e7:	85 d2                	test   edx,edx
c001e9e9:	75 41                	jne    c001ea2c <__udivdi3+0x5c>
c001e9eb:	39 f7                	cmp    edi,esi
c001e9ed:	76 15                	jbe    c001ea04 <__udivdi3+0x34>
c001e9ef:	89 e8                	mov    eax,ebp
c001e9f1:	89 f2                	mov    edx,esi
c001e9f3:	f7 f7                	div    edi
c001e9f5:	31 db                	xor    ebx,ebx
c001e9f7:	89 da                	mov    edx,ebx
c001e9f9:	83 c4 1c             	add    esp,0x1c
c001e9fc:	5b                   	pop    ebx
c001e9fd:	5e                   	pop    esi
c001e9fe:	5f                   	pop    edi
c001e9ff:	5d                   	pop    ebp
c001ea00:	c3                   	ret    
c001ea01:	8d 76 00             	lea    esi,[esi+0x0]
c001ea04:	89 f9                	mov    ecx,edi
c001ea06:	85 ff                	test   edi,edi
c001ea08:	75 0b                	jne    c001ea15 <__udivdi3+0x45>
c001ea0a:	b8 01 00 00 00       	mov    eax,0x1
c001ea0f:	31 d2                	xor    edx,edx
c001ea11:	f7 f7                	div    edi
c001ea13:	89 c1                	mov    ecx,eax
c001ea15:	31 d2                	xor    edx,edx
c001ea17:	89 f0                	mov    eax,esi
c001ea19:	f7 f1                	div    ecx
c001ea1b:	89 c3                	mov    ebx,eax
c001ea1d:	89 e8                	mov    eax,ebp
c001ea1f:	f7 f1                	div    ecx
c001ea21:	89 da                	mov    edx,ebx
c001ea23:	83 c4 1c             	add    esp,0x1c
c001ea26:	5b                   	pop    ebx
c001ea27:	5e                   	pop    esi
c001ea28:	5f                   	pop    edi
c001ea29:	5d                   	pop    ebp
c001ea2a:	c3                   	ret    
c001ea2b:	90                   	nop
c001ea2c:	39 f2                	cmp    edx,esi
c001ea2e:	77 1c                	ja     c001ea4c <__udivdi3+0x7c>
c001ea30:	0f bd da             	bsr    ebx,edx
c001ea33:	83 f3 1f             	xor    ebx,0x1f
c001ea36:	75 24                	jne    c001ea5c <__udivdi3+0x8c>
c001ea38:	39 f2                	cmp    edx,esi
c001ea3a:	72 08                	jb     c001ea44 <__udivdi3+0x74>
c001ea3c:	39 ef                	cmp    edi,ebp
c001ea3e:	0f 87 84 00 00 00    	ja     c001eac8 <__udivdi3+0xf8>
c001ea44:	b8 01 00 00 00       	mov    eax,0x1
c001ea49:	eb ac                	jmp    c001e9f7 <__udivdi3+0x27>
c001ea4b:	90                   	nop
c001ea4c:	31 db                	xor    ebx,ebx
c001ea4e:	31 c0                	xor    eax,eax
c001ea50:	89 da                	mov    edx,ebx
c001ea52:	83 c4 1c             	add    esp,0x1c
c001ea55:	5b                   	pop    ebx
c001ea56:	5e                   	pop    esi
c001ea57:	5f                   	pop    edi
c001ea58:	5d                   	pop    ebp
c001ea59:	c3                   	ret    
c001ea5a:	66 90                	xchg   ax,ax
c001ea5c:	b8 20 00 00 00       	mov    eax,0x20
c001ea61:	29 d8                	sub    eax,ebx
c001ea63:	88 d9                	mov    cl,bl
c001ea65:	d3 e2                	shl    edx,cl
c001ea67:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ea6b:	89 fa                	mov    edx,edi
c001ea6d:	88 c1                	mov    cl,al
c001ea6f:	d3 ea                	shr    edx,cl
c001ea71:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ea75:	09 d1                	or     ecx,edx
c001ea77:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ea7b:	88 d9                	mov    cl,bl
c001ea7d:	d3 e7                	shl    edi,cl
c001ea7f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ea83:	89 f7                	mov    edi,esi
c001ea85:	88 c1                	mov    cl,al
c001ea87:	d3 ef                	shr    edi,cl
c001ea89:	88 d9                	mov    cl,bl
c001ea8b:	d3 e6                	shl    esi,cl
c001ea8d:	89 ea                	mov    edx,ebp
c001ea8f:	88 c1                	mov    cl,al
c001ea91:	d3 ea                	shr    edx,cl
c001ea93:	09 d6                	or     esi,edx
c001ea95:	89 f0                	mov    eax,esi
c001ea97:	89 fa                	mov    edx,edi
c001ea99:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001ea9d:	89 d7                	mov    edi,edx
c001ea9f:	89 c6                	mov    esi,eax
c001eaa1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001eaa5:	39 d7                	cmp    edi,edx
c001eaa7:	72 13                	jb     c001eabc <__udivdi3+0xec>
c001eaa9:	74 09                	je     c001eab4 <__udivdi3+0xe4>
c001eaab:	89 f0                	mov    eax,esi
c001eaad:	31 db                	xor    ebx,ebx
c001eaaf:	e9 43 ff ff ff       	jmp    c001e9f7 <__udivdi3+0x27>
c001eab4:	88 d9                	mov    cl,bl
c001eab6:	d3 e5                	shl    ebp,cl
c001eab8:	39 c5                	cmp    ebp,eax
c001eaba:	73 ef                	jae    c001eaab <__udivdi3+0xdb>
c001eabc:	8d 46 ff             	lea    eax,[esi-0x1]
c001eabf:	31 db                	xor    ebx,ebx
c001eac1:	e9 31 ff ff ff       	jmp    c001e9f7 <__udivdi3+0x27>
c001eac6:	66 90                	xchg   ax,ax
c001eac8:	31 c0                	xor    eax,eax
c001eaca:	e9 28 ff ff ff       	jmp    c001e9f7 <__udivdi3+0x27>
c001eacf:	90                   	nop

c001ead0 <__umoddi3>:
c001ead0:	55                   	push   ebp
c001ead1:	57                   	push   edi
c001ead2:	56                   	push   esi
c001ead3:	53                   	push   ebx
c001ead4:	83 ec 1c             	sub    esp,0x1c
c001ead7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001eadb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eadf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001eae3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001eae7:	89 da                	mov    edx,ebx
c001eae9:	85 c0                	test   eax,eax
c001eaeb:	75 37                	jne    c001eb24 <__umoddi3+0x54>
c001eaed:	39 df                	cmp    edi,ebx
c001eaef:	76 13                	jbe    c001eb04 <__umoddi3+0x34>
c001eaf1:	89 f0                	mov    eax,esi
c001eaf3:	f7 f7                	div    edi
c001eaf5:	89 d0                	mov    eax,edx
c001eaf7:	31 d2                	xor    edx,edx
c001eaf9:	83 c4 1c             	add    esp,0x1c
c001eafc:	5b                   	pop    ebx
c001eafd:	5e                   	pop    esi
c001eafe:	5f                   	pop    edi
c001eaff:	5d                   	pop    ebp
c001eb00:	c3                   	ret    
c001eb01:	8d 76 00             	lea    esi,[esi+0x0]
c001eb04:	89 fd                	mov    ebp,edi
c001eb06:	85 ff                	test   edi,edi
c001eb08:	75 0b                	jne    c001eb15 <__umoddi3+0x45>
c001eb0a:	b8 01 00 00 00       	mov    eax,0x1
c001eb0f:	31 d2                	xor    edx,edx
c001eb11:	f7 f7                	div    edi
c001eb13:	89 c5                	mov    ebp,eax
c001eb15:	89 d8                	mov    eax,ebx
c001eb17:	31 d2                	xor    edx,edx
c001eb19:	f7 f5                	div    ebp
c001eb1b:	89 f0                	mov    eax,esi
c001eb1d:	f7 f5                	div    ebp
c001eb1f:	89 d0                	mov    eax,edx
c001eb21:	eb d4                	jmp    c001eaf7 <__umoddi3+0x27>
c001eb23:	90                   	nop
c001eb24:	89 f1                	mov    ecx,esi
c001eb26:	39 d8                	cmp    eax,ebx
c001eb28:	76 0a                	jbe    c001eb34 <__umoddi3+0x64>
c001eb2a:	89 f0                	mov    eax,esi
c001eb2c:	83 c4 1c             	add    esp,0x1c
c001eb2f:	5b                   	pop    ebx
c001eb30:	5e                   	pop    esi
c001eb31:	5f                   	pop    edi
c001eb32:	5d                   	pop    ebp
c001eb33:	c3                   	ret    
c001eb34:	0f bd e8             	bsr    ebp,eax
c001eb37:	83 f5 1f             	xor    ebp,0x1f
c001eb3a:	75 1c                	jne    c001eb58 <__umoddi3+0x88>
c001eb3c:	39 d8                	cmp    eax,ebx
c001eb3e:	72 04                	jb     c001eb44 <__umoddi3+0x74>
c001eb40:	39 f7                	cmp    edi,esi
c001eb42:	77 08                	ja     c001eb4c <__umoddi3+0x7c>
c001eb44:	89 da                	mov    edx,ebx
c001eb46:	29 fe                	sub    esi,edi
c001eb48:	19 c2                	sbb    edx,eax
c001eb4a:	89 f1                	mov    ecx,esi
c001eb4c:	89 c8                	mov    eax,ecx
c001eb4e:	83 c4 1c             	add    esp,0x1c
c001eb51:	5b                   	pop    ebx
c001eb52:	5e                   	pop    esi
c001eb53:	5f                   	pop    edi
c001eb54:	5d                   	pop    ebp
c001eb55:	c3                   	ret    
c001eb56:	66 90                	xchg   ax,ax
c001eb58:	ba 20 00 00 00       	mov    edx,0x20
c001eb5d:	29 ea                	sub    edx,ebp
c001eb5f:	89 e9                	mov    ecx,ebp
c001eb61:	d3 e0                	shl    eax,cl
c001eb63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001eb67:	89 f8                	mov    eax,edi
c001eb69:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001eb6d:	88 d1                	mov    cl,dl
c001eb6f:	d3 e8                	shr    eax,cl
c001eb71:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001eb75:	09 c1                	or     ecx,eax
c001eb77:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001eb7b:	89 e9                	mov    ecx,ebp
c001eb7d:	d3 e7                	shl    edi,cl
c001eb7f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001eb83:	89 d8                	mov    eax,ebx
c001eb85:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eb89:	88 d1                	mov    cl,dl
c001eb8b:	d3 e8                	shr    eax,cl
c001eb8d:	89 c7                	mov    edi,eax
c001eb8f:	89 e9                	mov    ecx,ebp
c001eb91:	d3 e3                	shl    ebx,cl
c001eb93:	89 f0                	mov    eax,esi
c001eb95:	88 d1                	mov    cl,dl
c001eb97:	d3 e8                	shr    eax,cl
c001eb99:	09 d8                	or     eax,ebx
c001eb9b:	89 e9                	mov    ecx,ebp
c001eb9d:	d3 e6                	shl    esi,cl
c001eb9f:	89 f3                	mov    ebx,esi
c001eba1:	89 fa                	mov    edx,edi
c001eba3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001eba7:	89 d1                	mov    ecx,edx
c001eba9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ebad:	89 c6                	mov    esi,eax
c001ebaf:	89 d7                	mov    edi,edx
c001ebb1:	39 d1                	cmp    ecx,edx
c001ebb3:	72 27                	jb     c001ebdc <__umoddi3+0x10c>
c001ebb5:	74 21                	je     c001ebd8 <__umoddi3+0x108>
c001ebb7:	89 ca                	mov    edx,ecx
c001ebb9:	29 f3                	sub    ebx,esi
c001ebbb:	19 fa                	sbb    edx,edi
c001ebbd:	89 d0                	mov    eax,edx
c001ebbf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001ebc3:	d3 e0                	shl    eax,cl
c001ebc5:	89 e9                	mov    ecx,ebp
c001ebc7:	d3 eb                	shr    ebx,cl
c001ebc9:	09 d8                	or     eax,ebx
c001ebcb:	d3 ea                	shr    edx,cl
c001ebcd:	83 c4 1c             	add    esp,0x1c
c001ebd0:	5b                   	pop    ebx
c001ebd1:	5e                   	pop    esi
c001ebd2:	5f                   	pop    edi
c001ebd3:	5d                   	pop    ebp
c001ebd4:	c3                   	ret    
c001ebd5:	8d 76 00             	lea    esi,[esi+0x0]
c001ebd8:	39 c3                	cmp    ebx,eax
c001ebda:	73 db                	jae    c001ebb7 <__umoddi3+0xe7>
c001ebdc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001ebe0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001ebe4:	89 d7                	mov    edi,edx
c001ebe6:	89 c6                	mov    esi,eax
c001ebe8:	eb cd                	jmp    c001ebb7 <__umoddi3+0xe7>

Disassembly of section .init:

c001ebea <_init>:
c001ebea:	55                   	push   ebp
c001ebeb:	89 e5                	mov    ebp,esp
c001ebed:	e8 02 15 fe ff       	call   c00000f4 <frame_dummy>
c001ebf2:	e8 e5 fa ff ff       	call   c001e6dc <__do_global_ctors_aux>
c001ebf7:	5d                   	pop    ebp
c001ebf8:	c3                   	ret    

Disassembly of section .fini:

c001ebf9 <_fini>:
c001ebf9:	55                   	push   ebp
c001ebfa:	89 e5                	mov    ebp,esp
c001ebfc:	e8 83 14 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001ec01:	5d                   	pop    ebp
c001ec02:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001ec04 <Computer::~Computer()>:
c001ec04:	83 ec 0c             	sub    esp,0xc
c001ec07:	ba 14 ff 01 c0       	mov    edx,0xc001ff14
c001ec0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec10:	89 10                	mov    DWORD PTR [eax],edx
c001ec12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec16:	83 ec 0c             	sub    esp,0xc
c001ec19:	50                   	push   eax
c001ec1a:	e8 65 d3 fe ff       	call   c000bf84 <Device::~Device()>
c001ec1f:	83 c4 10             	add    esp,0x10
c001ec22:	90                   	nop
c001ec23:	83 c4 0c             	add    esp,0xc
c001ec26:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001ec28 <Computer::~Computer()>:
c001ec28:	83 ec 0c             	sub    esp,0xc
c001ec2b:	83 ec 0c             	sub    esp,0xc
c001ec2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec32:	e8 cd ff ff ff       	call   c001ec04 <Computer::~Computer()>
c001ec37:	83 c4 10             	add    esp,0x10
c001ec3a:	83 ec 08             	sub    esp,0x8
c001ec3d:	68 70 01 00 00       	push   0x170
c001ec42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec46:	e8 ff bb fe ff       	call   c000a84a <operator delete(void*, unsigned long)>
c001ec4b:	83 c4 10             	add    esp,0x10
c001ec4e:	83 c4 0c             	add    esp,0xc
c001ec51:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001ec52 <idleCommon()>:
c001ec52:	83 ec 0c             	sub    esp,0xc
c001ec55:	fa                   	cli    
c001ec56:	ff 05 68 91 02 c0    	inc    DWORD PTR ds:0xc0029168
c001ec5c:	e8 6b 67 ff ff       	call   c00153cc <schedule()>
c001ec61:	a1 68 91 02 c0       	mov    eax,ds:0xc0029168
c001ec66:	48                   	dec    eax
c001ec67:	a3 68 91 02 c0       	mov    ds:0xc0029168,eax
c001ec6c:	75 01                	jne    c001ec6f <idleCommon()+0x1d>
c001ec6e:	fb                   	sti    
c001ec6f:	83 c4 0c             	add    esp,0xc
c001ec72:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001ec74 <LinkedList<UnixFile>::~LinkedList()>:
c001ec74:	90                   	nop
c001ec75:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001ec76 <LinkedList<UnixFile>::LinkedList()>:
c001ec76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec84:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec8f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec9a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eca4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ecab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecaf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ecb6:	90                   	nop
c001ecb7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001ecb8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001ecb8:	83 ec 0c             	sub    esp,0xc
c001ecbb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ecc0:	75 10                	jne    c001ecd2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001ecc2:	83 ec 0c             	sub    esp,0xc
c001ecc5:	68 28 01 02 c0       	push   0xc0020128
c001ecca:	e8 0c 1f ff ff       	call   c0010bdb <KePanic(char const*)>
c001eccf:	83 c4 10             	add    esp,0x10
c001ecd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd6:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecd8:	85 c0                	test   eax,eax
c001ecda:	74 34                	je     c001ed10 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001ecdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ece3:	85 c0                	test   eax,eax
c001ece5:	74 29                	je     c001ed10 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001ece7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eceb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecf2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ecf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecfd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed07:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed0e:	eb 65                	jmp    c001ed75 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ed10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed14:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed16:	85 c0                	test   eax,eax
c001ed18:	75 4b                	jne    c001ed65 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001ed1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed21:	85 c0                	test   eax,eax
c001ed23:	75 40                	jne    c001ed65 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001ed25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed29:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed2d:	89 10                	mov    DWORD PTR [eax],edx
c001ed2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed41:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed4c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed4f:	85 c0                	test   eax,eax
c001ed51:	74 22                	je     c001ed75 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ed53:	83 ec 0c             	sub    esp,0xc
c001ed56:	68 4a 01 02 c0       	push   0xc002014a
c001ed5b:	e8 7b 1e ff ff       	call   c0010bdb <KePanic(char const*)>
c001ed60:	83 c4 10             	add    esp,0x10
c001ed63:	eb 10                	jmp    c001ed75 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ed65:	83 ec 0c             	sub    esp,0xc
c001ed68:	68 54 01 02 c0       	push   0xc0020154
c001ed6d:	e8 69 1e ff ff       	call   c0010bdb <KePanic(char const*)>
c001ed72:	83 c4 10             	add    esp,0x10
c001ed75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed79:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed7c:	8d 50 01             	lea    edx,[eax+0x1]
c001ed7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed83:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed86:	90                   	nop
c001ed87:	83 c4 0c             	add    esp,0xc
c001ed8a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001ed8c <LinkedList<UnixFile>::getFirstElement()>:
c001ed8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed90:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed92:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ed94 <LinkedList<UnixFile>::removeFirst()>:
c001ed94:	83 ec 0c             	sub    esp,0xc
c001ed97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed9b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed9d:	85 c0                	test   eax,eax
c001ed9f:	75 12                	jne    c001edb3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001eda1:	83 ec 0c             	sub    esp,0xc
c001eda4:	68 60 01 02 c0       	push   0xc0020160
c001eda9:	e8 2d 1e ff ff       	call   c0010bdb <KePanic(char const*)>
c001edae:	83 c4 10             	add    esp,0x10
c001edb1:	eb 7e                	jmp    c001ee31 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001edb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edbd:	85 c0                	test   eax,eax
c001edbf:	74 10                	je     c001edd1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001edc1:	83 ec 0c             	sub    esp,0xc
c001edc4:	68 ab 01 02 c0       	push   0xc00201ab
c001edc9:	e8 0d 1e ff ff       	call   c0010bdb <KePanic(char const*)>
c001edce:	83 c4 10             	add    esp,0x10
c001edd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd5:	8b 00                	mov    eax,DWORD PTR [eax]
c001edd7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edda:	85 c0                	test   eax,eax
c001eddc:	75 33                	jne    c001ee11 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001edde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ede8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001edf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edf7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001edfa:	83 f8 01             	cmp    eax,0x1
c001edfd:	74 21                	je     c001ee20 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001edff:	83 ec 0c             	sub    esp,0xc
c001ee02:	68 84 01 02 c0       	push   0xc0020184
c001ee07:	e8 cf 1d ff ff       	call   c0010bdb <KePanic(char const*)>
c001ee0c:	83 c4 10             	add    esp,0x10
c001ee0f:	eb 0f                	jmp    c001ee20 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ee11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee15:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee17:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ee1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee1e:	89 10                	mov    DWORD PTR [eax],edx
c001ee20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee27:	8d 50 ff             	lea    edx,[eax-0x1]
c001ee2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee2e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ee31:	83 c4 0c             	add    esp,0xc
c001ee34:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ee36 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ee36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee3a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee3d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ee3e <DriverlessDevice::~DriverlessDevice()>:
c001ee3e:	ba dc 0b 02 c0       	mov    edx,0xc0020bdc
c001ee43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee47:	89 10                	mov    DWORD PTR [eax],edx
c001ee49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee4d:	50                   	push   eax
c001ee4e:	e8 31 d1 fe ff       	call   c000bf84 <Device::~Device()>
c001ee53:	83 c4 04             	add    esp,0x4
c001ee56:	90                   	nop
c001ee57:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ee58 <DriverlessDevice::~DriverlessDevice()>:
c001ee58:	83 ec 0c             	sub    esp,0xc
c001ee5b:	83 ec 0c             	sub    esp,0xc
c001ee5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee62:	e8 d7 ff ff ff       	call   c001ee3e <DriverlessDevice::~DriverlessDevice()>
c001ee67:	83 c4 10             	add    esp,0x10
c001ee6a:	83 ec 08             	sub    esp,0x8
c001ee6d:	68 58 01 00 00       	push   0x158
c001ee72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee76:	e8 cf b9 fe ff       	call   c000a84a <operator delete(void*, unsigned long)>
c001ee7b:	83 c4 10             	add    esp,0x10
c001ee7e:	83 c4 0c             	add    esp,0xc
c001ee81:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ee82 <LinkedList<Device>::addElement(Device*)>:
c001ee82:	83 ec 0c             	sub    esp,0xc
c001ee85:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ee8a:	75 10                	jne    c001ee9c <LinkedList<Device>::addElement(Device*)+0x1a>
c001ee8c:	83 ec 0c             	sub    esp,0xc
c001ee8f:	68 28 01 02 c0       	push   0xc0020128
c001ee94:	e8 42 1d ff ff       	call   c0010bdb <KePanic(char const*)>
c001ee99:	83 c4 10             	add    esp,0x10
c001ee9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eea0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eea2:	85 c0                	test   eax,eax
c001eea4:	74 3a                	je     c001eee0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eead:	85 c0                	test   eax,eax
c001eeaf:	74 2f                	je     c001eee0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eeb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeb5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eeb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eebc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001eec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eec6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eeca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eed4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eede:	eb 68                	jmp    c001ef48 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eee4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eee6:	85 c0                	test   eax,eax
c001eee8:	75 4e                	jne    c001ef38 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eef1:	85 c0                	test   eax,eax
c001eef3:	75 43                	jne    c001ef38 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eef5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eefd:	89 10                	mov    DWORD PTR [eax],edx
c001eeff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef07:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ef0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef11:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ef1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef1f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef22:	85 c0                	test   eax,eax
c001ef24:	74 22                	je     c001ef48 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ef26:	83 ec 0c             	sub    esp,0xc
c001ef29:	68 4a 01 02 c0       	push   0xc002014a
c001ef2e:	e8 a8 1c ff ff       	call   c0010bdb <KePanic(char const*)>
c001ef33:	83 c4 10             	add    esp,0x10
c001ef36:	eb 10                	jmp    c001ef48 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ef38:	83 ec 0c             	sub    esp,0xc
c001ef3b:	68 54 01 02 c0       	push   0xc0020154
c001ef40:	e8 96 1c ff ff       	call   c0010bdb <KePanic(char const*)>
c001ef45:	83 c4 10             	add    esp,0x10
c001ef48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef4c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ef4f:	8d 50 01             	lea    edx,[eax+0x1]
c001ef52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef56:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ef59:	90                   	nop
c001ef5a:	83 c4 0c             	add    esp,0xc
c001ef5d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ef5e <LinkedList<Device>::LinkedList()>:
c001ef5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef77:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef97:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef9e:	90                   	nop
c001ef9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001efa0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001efa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efa4:	8b 00                	mov    eax,DWORD PTR [eax]
c001efa6:	85 c0                	test   eax,eax
c001efa8:	75 0e                	jne    c001efb8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001efaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001efb1:	85 c0                	test   eax,eax
c001efb3:	75 03                	jne    c001efb8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001efb5:	b0 01                	mov    al,0x1
c001efb7:	c3                   	ret    
c001efb8:	b0 00                	mov    al,0x0
c001efba:	90                   	nop
c001efbb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001efbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001efbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001efc2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001efc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001efc4:	83 ec 0c             	sub    esp,0xc
c001efc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efcb:	8b 00                	mov    eax,DWORD PTR [eax]
c001efcd:	85 c0                	test   eax,eax
c001efcf:	75 17                	jne    c001efe8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001efd1:	83 ec 0c             	sub    esp,0xc
c001efd4:	68 60 01 02 c0       	push   0xc0020160
c001efd9:	e8 fd 1b ff ff       	call   c0010bdb <KePanic(char const*)>
c001efde:	83 c4 10             	add    esp,0x10
c001efe1:	e9 96 00 00 00       	jmp    c001f07c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001efe6:	66 90                	xchg   ax,ax
c001efe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001efef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eff2:	85 c0                	test   eax,eax
c001eff4:	0f 95 c0             	setne  al
c001eff7:	0f b6 c0             	movzx  eax,al
c001effa:	85 c0                	test   eax,eax
c001effc:	74 12                	je     c001f010 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001effe:	83 ec 0c             	sub    esp,0xc
c001f001:	68 ab 01 02 c0       	push   0xc00201ab
c001f006:	e8 d0 1b ff ff       	call   c0010bdb <KePanic(char const*)>
c001f00b:	83 c4 10             	add    esp,0x10
c001f00e:	66 90                	xchg   ax,ax
c001f010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f014:	8b 00                	mov    eax,DWORD PTR [eax]
c001f016:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f019:	85 c0                	test   eax,eax
c001f01b:	0f 94 c0             	sete   al
c001f01e:	0f b6 c0             	movzx  eax,al
c001f021:	85 c0                	test   eax,eax
c001f023:	74 33                	je     c001f058 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f029:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f02f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f033:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f03a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f03e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f041:	83 f8 01             	cmp    eax,0x1
c001f044:	74 22                	je     c001f068 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f046:	83 ec 0c             	sub    esp,0xc
c001f049:	68 84 01 02 c0       	push   0xc0020184
c001f04e:	e8 88 1b ff ff       	call   c0010bdb <KePanic(char const*)>
c001f053:	83 c4 10             	add    esp,0x10
c001f056:	eb 10                	jmp    c001f068 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f05c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f05e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f065:	89 10                	mov    DWORD PTR [eax],edx
c001f067:	90                   	nop
c001f068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f06c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f06f:	8d 50 ff             	lea    edx,[eax-0x1]
c001f072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f076:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f079:	8d 76 00             	lea    esi,[esi+0x0]
c001f07c:	83 c4 0c             	add    esp,0xc
c001f07f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f080 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f080:	83 ec 0c             	sub    esp,0xc
c001f083:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f088:	75 12                	jne    c001f09c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f08a:	83 ec 0c             	sub    esp,0xc
c001f08d:	68 28 01 02 c0       	push   0xc0020128
c001f092:	e8 44 1b ff ff       	call   c0010bdb <KePanic(char const*)>
c001f097:	83 c4 10             	add    esp,0x10
c001f09a:	66 90                	xchg   ax,ax
c001f09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0a2:	85 c0                	test   eax,eax
c001f0a4:	74 36                	je     c001f0dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f0a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f0ad:	85 c0                	test   eax,eax
c001f0af:	74 2b                	je     c001f0dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f0b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f0b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f0bc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f0bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f0c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f0ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f0d1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f0d8:	eb 6a                	jmp    c001f144 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f0da:	66 90                	xchg   ax,ax
c001f0dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0e2:	85 c0                	test   eax,eax
c001f0e4:	75 4e                	jne    c001f134 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f0e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f0ed:	85 c0                	test   eax,eax
c001f0ef:	75 43                	jne    c001f134 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f0f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f0f9:	89 10                	mov    DWORD PTR [eax],edx
c001f0fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f103:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f10d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f118:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f11b:	85 c0                	test   eax,eax
c001f11d:	74 25                	je     c001f144 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f11f:	83 ec 0c             	sub    esp,0xc
c001f122:	68 4a 01 02 c0       	push   0xc002014a
c001f127:	e8 af 1a ff ff       	call   c0010bdb <KePanic(char const*)>
c001f12c:	83 c4 10             	add    esp,0x10
c001f12f:	eb 13                	jmp    c001f144 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f131:	8d 76 00             	lea    esi,[esi+0x0]
c001f134:	83 ec 0c             	sub    esp,0xc
c001f137:	68 54 01 02 c0       	push   0xc0020154
c001f13c:	e8 9a 1a ff ff       	call   c0010bdb <KePanic(char const*)>
c001f141:	83 c4 10             	add    esp,0x10
c001f144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f148:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f14b:	8d 50 01             	lea    edx,[eax+0x1]
c001f14e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f152:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f155:	90                   	nop
c001f156:	83 c4 0c             	add    esp,0xc
c001f159:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f15c <ACPI::~ACPI()>:
c001f15c:	83 ec 0c             	sub    esp,0xc
c001f15f:	ba e0 11 02 c0       	mov    edx,0xc00211e0
c001f164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f168:	89 10                	mov    DWORD PTR [eax],edx
c001f16a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f16e:	83 ec 0c             	sub    esp,0xc
c001f171:	50                   	push   eax
c001f172:	e8 0d ce fe ff       	call   c000bf84 <Device::~Device()>
c001f177:	83 c4 10             	add    esp,0x10
c001f17a:	90                   	nop
c001f17b:	83 c4 0c             	add    esp,0xc
c001f17e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f180 <ACPI::~ACPI()>:
c001f180:	83 ec 0c             	sub    esp,0xc
c001f183:	83 ec 0c             	sub    esp,0xc
c001f186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f18a:	e8 cd ff ff ff       	call   c001f15c <ACPI::~ACPI()>
c001f18f:	83 c4 10             	add    esp,0x10
c001f192:	83 ec 08             	sub    esp,0x8
c001f195:	68 64 12 00 00       	push   0x1264
c001f19a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f19e:	e8 a7 b6 fe ff       	call   c000a84a <operator delete(void*, unsigned long)>
c001f1a3:	83 c4 10             	add    esp,0x10
c001f1a6:	83 c4 0c             	add    esp,0xc
c001f1a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001f1ac <LinkedList<Device>::~LinkedList()>:
c001f1ac:	90                   	nop
c001f1ad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001f1b0 <LinkedList<Device>::isEmpty()>:
c001f1b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1b6:	85 c0                	test   eax,eax
c001f1b8:	75 0e                	jne    c001f1c8 <LinkedList<Device>::isEmpty()+0x18>
c001f1ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f1c1:	85 c0                	test   eax,eax
c001f1c3:	75 03                	jne    c001f1c8 <LinkedList<Device>::isEmpty()+0x18>
c001f1c5:	b0 01                	mov    al,0x1
c001f1c7:	c3                   	ret    
c001f1c8:	b0 00                	mov    al,0x0
c001f1ca:	90                   	nop
c001f1cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001f1cc <LinkedList<Device>::getFirstElement()>:
c001f1cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001f1d4 <LinkedList<Device>::removeFirst()>:
c001f1d4:	83 ec 0c             	sub    esp,0xc
c001f1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1db:	8b 00                	mov    eax,DWORD PTR [eax]
c001f1dd:	85 c0                	test   eax,eax
c001f1df:	75 17                	jne    c001f1f8 <LinkedList<Device>::removeFirst()+0x24>
c001f1e1:	83 ec 0c             	sub    esp,0xc
c001f1e4:	68 60 01 02 c0       	push   0xc0020160
c001f1e9:	e8 ed 19 ff ff       	call   c0010bdb <KePanic(char const*)>
c001f1ee:	83 c4 10             	add    esp,0x10
c001f1f1:	e9 92 00 00 00       	jmp    c001f288 <LinkedList<Device>::removeFirst()+0xb4>
c001f1f6:	66 90                	xchg   ax,ax
c001f1f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f1ff:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f205:	85 c0                	test   eax,eax
c001f207:	74 13                	je     c001f21c <LinkedList<Device>::removeFirst()+0x48>
c001f209:	83 ec 0c             	sub    esp,0xc
c001f20c:	68 ab 01 02 c0       	push   0xc00201ab
c001f211:	e8 c5 19 ff ff       	call   c0010bdb <KePanic(char const*)>
c001f216:	83 c4 10             	add    esp,0x10
c001f219:	8d 76 00             	lea    esi,[esi+0x0]
c001f21c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f220:	8b 00                	mov    eax,DWORD PTR [eax]
c001f222:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f228:	85 c0                	test   eax,eax
c001f22a:	75 34                	jne    c001f260 <LinkedList<Device>::removeFirst()+0x8c>
c001f22c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f230:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f23a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f245:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f248:	83 f8 01             	cmp    eax,0x1
c001f24b:	74 27                	je     c001f274 <LinkedList<Device>::removeFirst()+0xa0>
c001f24d:	83 ec 0c             	sub    esp,0xc
c001f250:	68 84 01 02 c0       	push   0xc0020184
c001f255:	e8 81 19 ff ff       	call   c0010bdb <KePanic(char const*)>
c001f25a:	83 c4 10             	add    esp,0x10
c001f25d:	eb 15                	jmp    c001f274 <LinkedList<Device>::removeFirst()+0xa0>
c001f25f:	90                   	nop
c001f260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f264:	8b 00                	mov    eax,DWORD PTR [eax]
c001f266:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001f26c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f270:	89 10                	mov    DWORD PTR [eax],edx
c001f272:	66 90                	xchg   ax,ax
c001f274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f278:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f27b:	8d 50 ff             	lea    edx,[eax-0x1]
c001f27e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f282:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f285:	8d 76 00             	lea    esi,[esi+0x0]
c001f288:	83 c4 0c             	add    esp,0xc
c001f28b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f28c <CPU::~CPU()>:
c001f28c:	83 ec 0c             	sub    esp,0xc
c001f28f:	ba 88 13 02 c0       	mov    edx,0xc0021388
c001f294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f298:	89 10                	mov    DWORD PTR [eax],edx
c001f29a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f29e:	83 ec 0c             	sub    esp,0xc
c001f2a1:	50                   	push   eax
c001f2a2:	e8 dd cc fe ff       	call   c000bf84 <Device::~Device()>
c001f2a7:	83 c4 10             	add    esp,0x10
c001f2aa:	90                   	nop
c001f2ab:	83 c4 0c             	add    esp,0xc
c001f2ae:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f2b0 <CPU::~CPU()>:
c001f2b0:	83 ec 0c             	sub    esp,0xc
c001f2b3:	83 ec 0c             	sub    esp,0xc
c001f2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2ba:	e8 cd ff ff ff       	call   c001f28c <CPU::~CPU()>
c001f2bf:	83 c4 10             	add    esp,0x10
c001f2c2:	83 ec 08             	sub    esp,0x8
c001f2c5:	68 94 11 00 00       	push   0x1194
c001f2ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2ce:	e8 77 b5 fe ff       	call   c000a84a <operator delete(void*, unsigned long)>
c001f2d3:	83 c4 10             	add    esp,0x10
c001f2d6:	83 c4 0c             	add    esp,0xc
c001f2d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001f2dc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001f2dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f2e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f2e3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001f2e4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001f2e4:	90                   	nop
c001f2e5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001f2e8 <ThreadControlBlock::ThreadControlBlock()>:
c001f2e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2ec:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f2f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2f7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001f2fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f302:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001f309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f30d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001f314:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f318:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001f31f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f323:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001f327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f32b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001f32f:	90                   	nop
c001f330:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001f334 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001f334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f33e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f342:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f349:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f34d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f358:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f35e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f362:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f369:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f36d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f374:	90                   	nop
c001f375:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f376 <PCI::~PCI()>:
c001f376:	83 ec 0c             	sub    esp,0xc
c001f379:	ba 54 22 02 c0       	mov    edx,0xc0022254
c001f37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f382:	89 10                	mov    DWORD PTR [eax],edx
c001f384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f388:	83 ec 0c             	sub    esp,0xc
c001f38b:	50                   	push   eax
c001f38c:	e8 8b c6 fe ff       	call   c000ba1c <Bus::~Bus()>
c001f391:	83 c4 10             	add    esp,0x10
c001f394:	90                   	nop
c001f395:	83 c4 0c             	add    esp,0xc
c001f398:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f39a <PCI::~PCI()>:
c001f39a:	83 ec 0c             	sub    esp,0xc
c001f39d:	83 ec 0c             	sub    esp,0xc
c001f3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3a4:	e8 cd ff ff ff       	call   c001f376 <PCI::~PCI()>
c001f3a9:	83 c4 10             	add    esp,0x10
c001f3ac:	83 ec 08             	sub    esp,0x8
c001f3af:	68 5c 01 00 00       	push   0x15c
c001f3b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3b8:	e8 8d b4 fe ff       	call   c000a84a <operator delete(void*, unsigned long)>
c001f3bd:	83 c4 10             	add    esp,0x10
c001f3c0:	83 c4 0c             	add    esp,0xc
c001f3c3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f3c4 <IDE::~IDE()>:
c001f3c4:	83 ec 0c             	sub    esp,0xc
c001f3c7:	ba 08 23 02 c0       	mov    edx,0xc0022308
c001f3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3d0:	89 10                	mov    DWORD PTR [eax],edx
c001f3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3d6:	83 ec 0c             	sub    esp,0xc
c001f3d9:	50                   	push   eax
c001f3da:	e8 1d d0 fe ff       	call   c000c3fc <HardDiskController::~HardDiskController()>
c001f3df:	83 c4 10             	add    esp,0x10
c001f3e2:	90                   	nop
c001f3e3:	83 c4 0c             	add    esp,0xc
c001f3e6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f3e8 <IDE::~IDE()>:
c001f3e8:	83 ec 0c             	sub    esp,0xc
c001f3eb:	83 ec 0c             	sub    esp,0xc
c001f3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3f2:	e8 cd ff ff ff       	call   c001f3c4 <IDE::~IDE()>
c001f3f7:	83 c4 10             	add    esp,0x10
c001f3fa:	83 ec 08             	sub    esp,0x8
c001f3fd:	68 70 02 00 00       	push   0x270
c001f402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f406:	e8 3f b4 fe ff       	call   c000a84a <operator delete(void*, unsigned long)>
c001f40b:	83 c4 10             	add    esp,0x10
c001f40e:	83 c4 0c             	add    esp,0xc
c001f411:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001f412 <SATABus::~SATABus()>:
c001f412:	83 ec 0c             	sub    esp,0xc
c001f415:	ba 58 23 02 c0       	mov    edx,0xc0022358
c001f41a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f41e:	89 10                	mov    DWORD PTR [eax],edx
c001f420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f424:	83 ec 0c             	sub    esp,0xc
c001f427:	50                   	push   eax
c001f428:	e8 cf cf fe ff       	call   c000c3fc <HardDiskController::~HardDiskController()>
c001f42d:	83 c4 10             	add    esp,0x10
c001f430:	90                   	nop
c001f431:	83 c4 0c             	add    esp,0xc
c001f434:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001f436 <SATABus::~SATABus()>:
c001f436:	83 ec 0c             	sub    esp,0xc
c001f439:	83 ec 0c             	sub    esp,0xc
c001f43c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f440:	e8 cd ff ff ff       	call   c001f412 <SATABus::~SATABus()>
c001f445:	83 c4 10             	add    esp,0x10
c001f448:	83 ec 08             	sub    esp,0x8
c001f44b:	68 64 01 00 00       	push   0x164
c001f450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f454:	e8 f1 b3 fe ff       	call   c000a84a <operator delete(void*, unsigned long)>
c001f459:	83 c4 10             	add    esp,0x10
c001f45c:	83 c4 0c             	add    esp,0xc
c001f45f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f460 <ATA::~ATA()>:
c001f460:	83 ec 0c             	sub    esp,0xc
c001f463:	ba 98 23 02 c0       	mov    edx,0xc0022398
c001f468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f46c:	89 10                	mov    DWORD PTR [eax],edx
c001f46e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f472:	83 ec 0c             	sub    esp,0xc
c001f475:	50                   	push   eax
c001f476:	e8 63 d0 fe ff       	call   c000c4de <PhysicalDisk::~PhysicalDisk()>
c001f47b:	83 c4 10             	add    esp,0x10
c001f47e:	90                   	nop
c001f47f:	83 c4 0c             	add    esp,0xc
c001f482:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f484 <ATA::~ATA()>:
c001f484:	83 ec 0c             	sub    esp,0xc
c001f487:	83 ec 0c             	sub    esp,0xc
c001f48a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f48e:	e8 cd ff ff ff       	call   c001f460 <ATA::~ATA()>
c001f493:	83 c4 10             	add    esp,0x10
c001f496:	83 ec 08             	sub    esp,0x8
c001f499:	68 7c 01 00 00       	push   0x17c
c001f49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4a2:	e8 a3 b3 fe ff       	call   c000a84a <operator delete(void*, unsigned long)>
c001f4a7:	83 c4 10             	add    esp,0x10
c001f4aa:	83 c4 0c             	add    esp,0xc
c001f4ad:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f4ae <ATAPI::~ATAPI()>:
c001f4ae:	83 ec 0c             	sub    esp,0xc
c001f4b1:	ba e0 23 02 c0       	mov    edx,0xc00223e0
c001f4b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4ba:	89 10                	mov    DWORD PTR [eax],edx
c001f4bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c0:	83 ec 0c             	sub    esp,0xc
c001f4c3:	50                   	push   eax
c001f4c4:	e8 15 d0 fe ff       	call   c000c4de <PhysicalDisk::~PhysicalDisk()>
c001f4c9:	83 c4 10             	add    esp,0x10
c001f4cc:	90                   	nop
c001f4cd:	83 c4 0c             	add    esp,0xc
c001f4d0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f4d2 <ATAPI::~ATAPI()>:
c001f4d2:	83 ec 0c             	sub    esp,0xc
c001f4d5:	83 ec 0c             	sub    esp,0xc
c001f4d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4dc:	e8 cd ff ff ff       	call   c001f4ae <ATAPI::~ATAPI()>
c001f4e1:	83 c4 10             	add    esp,0x10
c001f4e4:	83 ec 08             	sub    esp,0x8
c001f4e7:	68 84 01 00 00       	push   0x184
c001f4ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4f0:	e8 55 b3 fe ff       	call   c000a84a <operator delete(void*, unsigned long)>
c001f4f5:	83 c4 10             	add    esp,0x10
c001f4f8:	83 c4 0c             	add    esp,0xc
c001f4fb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f4fc <SATA::~SATA()>:
c001f4fc:	83 ec 0c             	sub    esp,0xc
c001f4ff:	ba 94 24 02 c0       	mov    edx,0xc0022494
c001f504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f508:	89 10                	mov    DWORD PTR [eax],edx
c001f50a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f50e:	83 ec 0c             	sub    esp,0xc
c001f511:	50                   	push   eax
c001f512:	e8 c7 cf fe ff       	call   c000c4de <PhysicalDisk::~PhysicalDisk()>
c001f517:	83 c4 10             	add    esp,0x10
c001f51a:	90                   	nop
c001f51b:	83 c4 0c             	add    esp,0xc
c001f51e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f520 <SATA::~SATA()>:
c001f520:	83 ec 0c             	sub    esp,0xc
c001f523:	83 ec 0c             	sub    esp,0xc
c001f526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f52a:	e8 cd ff ff ff       	call   c001f4fc <SATA::~SATA()>
c001f52f:	83 c4 10             	add    esp,0x10
c001f532:	83 ec 08             	sub    esp,0x8
c001f535:	68 7c 01 00 00       	push   0x17c
c001f53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f53e:	e8 07 b3 fe ff       	call   c000a84a <operator delete(void*, unsigned long)>
c001f543:	83 c4 10             	add    esp,0x10
c001f546:	83 c4 0c             	add    esp,0xc
c001f549:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f54a <SATAPI::~SATAPI()>:
c001f54a:	83 ec 0c             	sub    esp,0xc
c001f54d:	ba b8 25 02 c0       	mov    edx,0xc00225b8
c001f552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f556:	89 10                	mov    DWORD PTR [eax],edx
c001f558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f55c:	83 ec 0c             	sub    esp,0xc
c001f55f:	50                   	push   eax
c001f560:	e8 79 cf fe ff       	call   c000c4de <PhysicalDisk::~PhysicalDisk()>
c001f565:	83 c4 10             	add    esp,0x10
c001f568:	90                   	nop
c001f569:	83 c4 0c             	add    esp,0xc
c001f56c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f56e <SATAPI::~SATAPI()>:
c001f56e:	83 ec 0c             	sub    esp,0xc
c001f571:	83 ec 0c             	sub    esp,0xc
c001f574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f578:	e8 cd ff ff ff       	call   c001f54a <SATAPI::~SATAPI()>
c001f57d:	83 c4 10             	add    esp,0x10
c001f580:	83 ec 08             	sub    esp,0x8
c001f583:	68 84 01 00 00       	push   0x184
c001f588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f58c:	e8 b9 b2 fe ff       	call   c000a84a <operator delete(void*, unsigned long)>
c001f591:	83 c4 10             	add    esp,0x10
c001f594:	83 c4 0c             	add    esp,0xc
c001f597:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f598 <IOAPIC::~IOAPIC()>:
c001f598:	83 ec 0c             	sub    esp,0xc
c001f59b:	ba f8 25 02 c0       	mov    edx,0xc00225f8
c001f5a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5a4:	89 10                	mov    DWORD PTR [eax],edx
c001f5a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5aa:	83 ec 0c             	sub    esp,0xc
c001f5ad:	50                   	push   eax
c001f5ae:	e8 d1 c9 fe ff       	call   c000bf84 <Device::~Device()>
c001f5b3:	83 c4 10             	add    esp,0x10
c001f5b6:	90                   	nop
c001f5b7:	83 c4 0c             	add    esp,0xc
c001f5ba:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f5bc <IOAPIC::~IOAPIC()>:
c001f5bc:	83 ec 0c             	sub    esp,0xc
c001f5bf:	83 ec 0c             	sub    esp,0xc
c001f5c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5c6:	e8 cd ff ff ff       	call   c001f598 <IOAPIC::~IOAPIC()>
c001f5cb:	83 c4 10             	add    esp,0x10
c001f5ce:	83 ec 08             	sub    esp,0x8
c001f5d1:	68 68 01 00 00       	push   0x168
c001f5d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5da:	e8 6b b2 fe ff       	call   c000a84a <operator delete(void*, unsigned long)>
c001f5df:	83 c4 10             	add    esp,0x10
c001f5e2:	83 c4 0c             	add    esp,0xc
c001f5e5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f5e8 <APICTimer::~APICTimer()>:
c001f5e8:	83 ec 0c             	sub    esp,0xc
c001f5eb:	ba 40 26 02 c0       	mov    edx,0xc0022640
c001f5f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f4:	89 10                	mov    DWORD PTR [eax],edx
c001f5f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5fa:	83 ec 0c             	sub    esp,0xc
c001f5fd:	50                   	push   eax
c001f5fe:	e8 4d e4 fe ff       	call   c000da50 <Timer::~Timer()>
c001f603:	83 c4 10             	add    esp,0x10
c001f606:	90                   	nop
c001f607:	83 c4 0c             	add    esp,0xc
c001f60a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f60c <APICTimer::~APICTimer()>:
c001f60c:	83 ec 0c             	sub    esp,0xc
c001f60f:	83 ec 0c             	sub    esp,0xc
c001f612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f616:	e8 cd ff ff ff       	call   c001f5e8 <APICTimer::~APICTimer()>
c001f61b:	83 c4 10             	add    esp,0x10
c001f61e:	83 ec 08             	sub    esp,0x8
c001f621:	68 60 01 00 00       	push   0x160
c001f626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f62a:	e8 1b b2 fe ff       	call   c000a84a <operator delete(void*, unsigned long)>
c001f62f:	83 c4 10             	add    esp,0x10
c001f632:	83 c4 0c             	add    esp,0xc
c001f635:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f638 <PIT::~PIT()>:
c001f638:	83 ec 0c             	sub    esp,0xc
c001f63b:	ba 90 26 02 c0       	mov    edx,0xc0022690
c001f640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f644:	89 10                	mov    DWORD PTR [eax],edx
c001f646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f64a:	83 ec 0c             	sub    esp,0xc
c001f64d:	50                   	push   eax
c001f64e:	e8 fd e3 fe ff       	call   c000da50 <Timer::~Timer()>
c001f653:	83 c4 10             	add    esp,0x10
c001f656:	90                   	nop
c001f657:	83 c4 0c             	add    esp,0xc
c001f65a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f65c <PIT::~PIT()>:
c001f65c:	83 ec 0c             	sub    esp,0xc
c001f65f:	83 ec 0c             	sub    esp,0xc
c001f662:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f666:	e8 cd ff ff ff       	call   c001f638 <PIT::~PIT()>
c001f66b:	83 c4 10             	add    esp,0x10
c001f66e:	83 ec 08             	sub    esp,0x8
c001f671:	68 5c 01 00 00       	push   0x15c
c001f676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f67a:	e8 cb b1 fe ff       	call   c000a84a <operator delete(void*, unsigned long)>
c001f67f:	83 c4 10             	add    esp,0x10
c001f682:	83 c4 0c             	add    esp,0xc
c001f685:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be 79 14 02 c0       	mov    esi,0xc0021479
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be 95 14 02 c0       	mov    esi,0xc0021495
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
