
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 44 3a 02 c0       	mov    eax,0xc0023a44
c0000025:	3d 44 3a 02 c0       	cmp    eax,0xc0023a44
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 44 3a 02 c0       	push   0xc0023a44
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 44 3a 02 c0       	mov    eax,0xc0023a44
c0000051:	2d 44 3a 02 c0       	sub    eax,0xc0023a44
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 44 3a 02 c0       	push   0xc0023a44
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 1c 01 02 c0       	mov    ebx,0xc002011c
c0000097:	81 eb 18 01 02 c0    	sub    ebx,0xc0020118
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 18 01 02 c0       	mov    esi,0xc0020118
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 44 3a 02 c0       	push   0xc0023a44
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 44 3a 02 c0       	push   0xc0023a44
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 67 53 01 00       	call   c0015614 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 45 53 01 00       	call   c0015614 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 52 58 01 00       	call   c0015b40 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 11 5f 01 00       	call   c0016208 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 e9 0f 01 00       	jmp    c0011368 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 20 01 02 c0 02 	test   BYTE PTR [edx-0x3ffdfee0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 20 01 02 c0 01 	test   BYTE PTR [edx-0x3ffdfee0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 20 01 02 c0 08 	test   BYTE PTR [edx-0x3ffdfee0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 20 01 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfee0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 20 01 02 c0 01 	test   BYTE PTR [edx-0x3ffdfee0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000df7:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c0001176:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011b2:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011b7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011c5:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c0001216:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c0001231:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c00012eb:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c00012f1:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c00012f8:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013be:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013c4:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c00013cb:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 24 02 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfddc]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 0e 7a 01 00       	jmp    c00197b0 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 38 7a 01 00       	jmp    c00197f0 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 59 7a 01 00       	jmp    c0019830 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 80 03 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdfc80]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 80 03 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfc80]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 64 2a 02 c0       	mov    edx,0xc0022a64
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 3c 02 02 c0       	mov    edx,0xc002023c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 42 02 02 c0       	mov    eax,0xc0020242
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 00 03 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfd00]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 4b 02 02 c0       	mov    eax,0xc002024b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 80 03 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfc80]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 d0 02 02 c0       	mov    eax,0xc00202d0
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb c0 02 02 c0       	mov    ebx,0xc00202c0
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 a0 02 02 c0       	mov    eax,0xc00202a0
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 b0 02 02 c0       	mov    eax,0xc00202b0
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 52 02 02 c0       	mov    edx,0xc0020252
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 5e 02 02 c0       	mov    edx,0xc002025e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba 72 02 02 c0       	mov    edx,0xc0020272
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c a0 06 02 c0 	mov    DWORD PTR [esp+0xc],0xc00206a0
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 a0 06 02 c0 	mov    DWORD PTR [esp+0x10],0xc00206a0
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 a0 04 02 c0       	mov    eax,0xc00204a0
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 e0 03 02 c0       	mov    eax,0xc00203e0
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 a0 03 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfc60]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 a0 07 02 c0       	push   0xc00207a0
c000611b:	e8 2c 40 01 00       	call   c001a14c <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 ae 07 02 c0       	push   0xc00207ae
c0006153:	e8 f4 3f 01 00       	call   c001a14c <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 5d 3f 01 00       	call   c001a0f0 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 50 02 c0       	mov    eax,0xc0025020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 5e 02 c0    	mov    ebp,DWORD PTR ds:0xc0025eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 bd 07 02 c0       	push   0xc00207bd
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000655e:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c0006564:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c0006580:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00065f9:	8b 8d 4c 55 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdaab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c00066f1:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000672f:	05 40 55 02 c0       	add    eax,0xc0025540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c00067ee:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 c0 07 02 c0       	push   0xc00207c0
c0006812:	e8 35 39 01 00       	call   c001a14c <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 49 39 01 00       	call   c001a168 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 c5 07 02 c0 	mov    DWORD PTR [esp],0xc00207c5
c000682c:	e8 1b 39 01 00       	call   c001a14c <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006838:	e8 2b 39 01 00       	call   c001a168 <iso_kprintfd>
c000683d:	c7 04 24 cb 07 02 c0 	mov    DWORD PTR [esp],0xc00207cb
c0006844:	e8 03 39 01 00       	call   c001a14c <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c0006850:	e8 13 39 01 00       	call   c001a168 <iso_kprintfd>
c0006855:	c7 04 24 d1 07 02 c0 	mov    DWORD PTR [esp],0xc00207d1
c000685c:	e8 eb 38 01 00       	call   c001a14c <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006868:	e8 fb 38 01 00       	call   c001a168 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068ce:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 55 02 c0    	lea    ebp,[eax-0x3ffdaaa8]
c000692a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 55 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdaaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 bd 07 02 c0       	push   0xc00207bd
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a06:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a0c:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 55 02 c0       	add    eax,0xc0025550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 da 07 02 c0       	push   0xc00207da
c0006a31:	e8 16 37 01 00       	call   c001a14c <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a66:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 e5 07 02 c0       	push   0xc00207e5
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 ec 07 02 c0       	push   0xc00207ec
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b27:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 f3 07 02 c0       	push   0xc00207f3
c0006b48:	e8 ff 35 01 00       	call   c001a14c <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 fe 07 02 c0       	push   0xc00207fe
c0006b63:	e8 e4 35 01 00       	call   c001a14c <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 55 02 c0       	push   0xc0025540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c4d:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 56 9f 00 00       	call   c0010bc8 <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 eb 5b 00 00       	call   c000c86c <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 0f 08 02 c0       	push   0xc002080f
c0006cb2:	e8 f0 9f 00 00       	call   c0010ca7 <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0006cd1:	50                   	push   eax
c0006cd2:	68 28 08 02 c0       	push   0xc0020828
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 8d ec 00 00       	call   c001596c <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 9c ee 00 00       	call   c0015b90 <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 f0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296f0
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 78 66 01 c0       	push   0xc0016678
c0006d03:	52                   	push   edx
c0006d04:	e8 87 ee 00 00       	call   c0015b90 <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 a8 96 02 c0       	mov    ds:0xc00296a8,eax
c0006d11:	68 24 09 02 c0       	push   0xc0020924
c0006d16:	e8 8c 9f 00 00       	call   c0010ca7 <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d22:	e8 0f a8 00 00       	call   c0011536 <KeInitRand()>
c0006d27:	e8 6f fd 00 00       	call   c0016a9b <Vm::initialise8086()>
c0006d2c:	e8 93 48 00 00       	call   c000b5c4 <Fs::initVFS()>
c0006d31:	c7 04 24 35 08 02 c0 	mov    DWORD PTR [esp],0xc0020835
c0006d38:	e8 6a 9f 00 00       	call   c0010ca7 <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 24 09 02 c0       	push   0xc0020924
c0006d5c:	e8 46 9f 00 00       	call   c0010ca7 <KeSetBootMessage(char const*)>
c0006d61:	e8 3c 45 00 00       	call   c000b2a2 <KeInitialiseSymlinks()>
c0006d66:	e8 75 a4 00 00       	call   c00111e0 <KeLoadSystemEnv()>
c0006d6b:	e8 d2 a6 00 00       	call   c0011442 <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 4f 08 02 c0       	push   0xc002084f
c0006d7a:	68 58 08 02 c0       	push   0xc0020858
c0006d7f:	e8 04 ce 00 00       	call   c0013b88 <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 40 54 00 00       	call   c000c1cc <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 48 09 02 c0 	mov    DWORD PTR [esp],0xc0020948
c0006d93:	e8 0f 9f 00 00       	call   c0010ca7 <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 c0 5a 00 00       	call   c000c86a <Device::loadDriversForAll()>
c0006daa:	c7 04 24 60 08 02 c0 	mov    DWORD PTR [esp],0xc0020860
c0006db1:	e8 f1 9e 00 00       	call   c0010ca7 <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 71 08 02 c0       	push   0xc0020871
c0006dc5:	e8 b5 e5 00 00       	call   c001537f <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 dd e7 00 00       	call   c00155b0 <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 14 f2 00 00       	call   c0015ff4 <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 8d 08 02 c0       	push   0xc002088d
c0006df5:	50                   	push   eax
c0006df6:	e8 eb 5a 00 00       	call   c000c8e6 <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba 94 09 02 c0       	mov    edx,0xc0020994
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 21 82 01 00       	call   c001f116 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 ad 91 00 00       	call   c00100e0 <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 86 91 00 00       	call   c00100e0 <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 64 91 00 00       	call   c00100e0 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 42 91 00 00       	call   c00100e0 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 4f 90 00 00       	call   c001005c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 2a 90 00 00       	call   c001005c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 80 80 01 00       	call   c001f0d0 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 ce 7c 01 00       	call   c001ed40 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 40 90 00 00       	call   c00100e0 <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 96 08 02 c0       	push   0xc0020896
c00070e2:	e8 96 a2 00 00       	call   c001137d <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 9c 08 02 c0       	push   0xc002089c
c000711e:	e8 5a a2 00 00       	call   c001137d <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 8d 89 00 00       	jmp    c000faf8 <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071be:	68 a2 08 02 c0       	push   0xc00208a2
c00071c3:	0f 94 05 a0 32 02 c0 	sete   BYTE PTR ds:0xc00232a0
c00071ca:	e8 d8 9a 00 00       	call   c0010ca7 <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 87 84 00 00       	call   c000f66c <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 5a 55 00 00       	call   c000c74e <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 ba 08 02 c0 	mov    DWORD PTR [esp],0xc00208ba
c000720d:	e8 95 9a 00 00       	call   c0010ca7 <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 70 8f 00 00       	call   c0010198 <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 17 55 00 00       	call   c000c74e <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 68 09 02 c0       	push   0xc0020968
c0007254:	e8 4e 9a 00 00       	call   c0010ca7 <KeSetBootMessage(char const*)>
c0007259:	e8 7a 0a 01 00       	call   c0017cd8 <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 d4 08 02 c0 	mov    DWORD PTR [esp],0xc00208d4
c0007265:	e8 3d 9a 00 00       	call   c0010ca7 <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 46 ea 00 00       	call   c0015cbc <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 ef 08 02 c0       	push   0xc00208ef
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 00 09 02 c0       	push   0xc0020900
c00072ed:	e8 8b a0 00 00       	call   c001137d <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 0d 09 02 c0       	push   0xc002090d
c0007302:	e8 76 a0 00 00       	call   c001137d <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 17 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020917
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 5c a0 00 00       	jmp    c001137d <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073b1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007505:	48                   	dec    eax
c0007506:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 91 04 01 00       	call   c00179a4 <HalSystemIdle()>
c0007513:	e8 ba 81 01 00       	call   c001f6d2 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007615:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000761a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 d0 ed 01 c0       	push   0xc001edd0
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 e0 ed 01 c0       	push   0xc001ede0
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 ea ed 01 c0       	push   0xc001edea
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 f4 ed 01 c0       	push   0xc001edf4
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 fe ed 01 c0       	push   0xc001edfe
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 08 ee 01 c0       	push   0xc001ee08
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 12 ee 01 c0       	push   0xc001ee12
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 1c ee 01 c0       	push   0xc001ee1c
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 26 ee 01 c0       	push   0xc001ee26
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 2e ee 01 c0       	push   0xc001ee2e
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 38 ee 01 c0       	push   0xc001ee38
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 40 ee 01 c0       	push   0xc001ee40
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 48 ee 01 c0       	push   0xc001ee48
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 50 ee 01 c0       	push   0xc001ee50
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 6a ee 01 c0       	push   0xc001ee6a
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 72 ee 01 c0       	push   0xc001ee72
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 7c ee 01 c0       	push   0xc001ee7c
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 86 ee 01 c0       	push   0xc001ee86
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 90 ee 01 c0       	push   0xc001ee90
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 2a ef 01 c0       	push   0xc001ef2a
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 31 ef 01 c0       	push   0xc001ef31
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 1c ef 01 c0       	push   0xc001ef1c
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 23 ef 01 c0       	push   0xc001ef23
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 9a ee 01 c0       	push   0xc001ee9a
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 a4 ee 01 c0       	push   0xc001eea4
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 ae ee 01 c0       	push   0xc001eeae
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 b8 ee 01 c0       	push   0xc001eeb8
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 c2 ee 01 c0       	push   0xc001eec2
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 cc ee 01 c0       	push   0xc001eecc
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 d6 ee 01 c0       	push   0xc001eed6
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 e0 ee 01 c0       	push   0xc001eee0
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 ea ee 01 c0       	push   0xc001eeea
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 f4 ee 01 c0       	push   0xc001eef4
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 fe ee 01 c0       	push   0xc001eefe
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 08 ef 01 c0       	push   0xc001ef08
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 12 ef 01 c0       	push   0xc001ef12
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 6c f0 01 c0       	push   0xc001f06c
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 76 f0 01 c0       	push   0xc001f076
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 80 f0 01 c0       	push   0xc001f080
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 8a f0 01 c0       	push   0xc001f08a
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 94 f0 01 c0       	push   0xc001f094
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 9e f0 01 c0       	push   0xc001f09e
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 a8 f0 01 c0       	push   0xc001f0a8
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 b2 f0 01 c0       	push   0xc001f0b2
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 26 ee 01 c0       	push   0xc001ee26
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 94 32 02 c0    	mov    edx,DWORD PTR ds:0xc0023294
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079ba:	8b 3d 94 32 02 c0    	mov    edi,DWORD PTR ds:0xc0023294
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 94 32 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023294,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 94 32 02 c0       	mov    eax,ds:0xc0023294
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 b8 09 02 c0       	push   0xc00209b8
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 e8 09 02 c0       	push   0xc00209e8
c0007a27:	e8 51 99 00 00       	call   c001137d <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 ed 09 02 c0       	push   0xc00209ed
c0007a3d:	e8 3b 99 00 00       	call   c001137d <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 c8 96 02 c0 01 	add    DWORD PTR ds:0xc00296c8,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 f4 09 02 c0       	push   0xc00209f4
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 c2 90 00 00       	call   c0010c2b <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 eb 8f 00 00       	call   c0010b75 <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007b9b:	e8 ca 7a 01 00       	call   c001f66a <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 0c 0a 02 c0       	push   0xc0020a0c
c0007c31:	e8 47 97 00 00       	call   c001137d <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 5e 02 c0    	lea    edx,[ebp-0x3ffda114]
c0007c75:	8d 84 05 ed 5e 02 c0 	lea    eax,[ebp+eax*1-0x3ffda113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 0c 0a 02 c0       	push   0xc0020a0c
c0007ca2:	e8 d6 96 00 00       	call   c001137d <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 98 32 02 c0    	mov    esi,DWORD PTR ds:0xc0023298
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d 98 32 02 c0    	mov    ebx,DWORD PTR ds:0xc0023298
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 98 32 02 c0    	mov    edx,DWORD PTR ds:0xc0023298
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 b1 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ab1
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 d0 95 00 00       	jmp    c001137d <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 34 0a 02 c0       	push   0xc0020a34
c0007e31:	e8 47 95 00 00       	call   c001137d <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e58:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 c7 0a 02 c0       	push   0xc0020ac7
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 64 0a 02 c0       	push   0xc0020a64
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 88 0a 02 c0       	push   0xc0020a88
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 ed 0a 02 c0       	push   0xc0020aed
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 df 0a 02 c0       	push   0xc0020adf
c000813c:	e8 3c 92 00 00       	call   c001137d <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba 4c 0b 02 c0       	mov    edx,0xc0020b4c
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 09 0b 02 c0       	push   0xc0020b09
c0008311:	e8 67 90 00 00       	call   c001137d <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000835a:	e8 81 da 00 00       	call   c0015de0 <schedule()>
c000835f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0008364:	48                   	dec    eax
c0008365:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 59 71 01 00       	call   c001f550 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 26 0b 02 c0       	push   0xc0020b26
c000840c:	e8 6c 8f 00 00       	call   c001137d <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba 4c 0b 02 c0       	mov    edx,0xc0020b4c
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba 94 0b 02 c0       	mov    edx,0xc0020b94
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 32 51 00 00       	call   c000d628 <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 7c 06 01 00       	call   c0018b98 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d c0 32 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcd40]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d c0 32 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcd40]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 78 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdce88]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 50 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdceb0]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 ae 03 01 00       	call   c0018a2c <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 0b 04 01 00       	jmp    c0018b34 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 60 0b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020b60
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 07 8c 00 00       	jmp    c001137d <KePanic(char const*)>
c0008776:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 a0 38 00 00       	jmp    c000c173 <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be 6e 0b 02 c0       	mov    esi,0xc0020b6e
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 12 ff 00 00       	call   c0018b34 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba 94 0b 02 c0       	mov    edx,0xc0020b94
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 7f 0b 02 c0       	push   0xc0020b7f
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 85 0b 02 c0       	push   0xc0020b85
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba 5c 0c 02 c0       	mov    edx,0xc0020c5c
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 00 33 02 c0       	mov    eax,ds:0xc0023300
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 00 33 02 c0    	mov    DWORD PTR ds:0xc0023300,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 5f 02 c0       	push   0xc0025f98
c00091fc:	e8 37 65 01 00       	call   c001f738 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba 78 0c 02 c0       	mov    edx,0xc0020c78
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba 5c 0c 02 c0       	mov    edx,0xc0020c5c
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 5f 02 c0       	push   0xc0025f98
c00093d0:	e8 37 64 01 00       	call   c001f80c <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 5f 02 c0       	push   0xc0025f98
c00093e4:	e8 2b 64 01 00       	call   c001f814 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 5f 02 c0       	push   0xc0025f98
c0009402:	e8 31 63 01 00       	call   c001f738 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 34 0c 02 c0       	push   0xc0020c34
c000942c:	e8 4c 7f 00 00       	call   c001137d <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba 78 0c 02 c0       	mov    edx,0xc0020c78
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 5f 02 c0       	push   0xc0025f98
c00094d1:	e8 36 63 01 00       	call   c001f80c <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 5f 02 c0       	push   0xc0025f98
c00094ee:	e8 c3 63 01 00       	call   c001f8b6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 5f 02 c0       	push   0xc0025f98
c0009570:	e8 81 61 01 00       	call   c001f6f6 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 90 32 02 c0       	push   0xc0023290
c0009580:	68 98 5f 02 c0       	push   0xc0025f98
c0009585:	68 f4 f6 01 c0       	push   0xc001f6f4
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 08 33 02 c0    	mov    edx,DWORD PTR ds:0xc0023308
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d 08 33 02 c0    	mov    ecx,DWORD PTR ds:0xc0023308
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 04 33 02 c0    	mov    esi,DWORD PTR ds:0xc0023304
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 04 33 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023304,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 04 33 02 c0    	mov    DWORD PTR ds:0xc0023304,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 8c 0c 02 c0       	push   0xc0020c8c
c0009689:	e8 ef 7c 00 00       	call   c001137d <KePanic(char const*)>
c000968e:	8b 35 04 33 02 c0    	mov    esi,DWORD PTR ds:0xc0023304
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d 04 33 02 c0    	mov    DWORD PTR ds:0xc0023304,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 04 33 02 c0       	mov    eax,ds:0xc0023304
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 04 33 02 c0    	mov    DWORD PTR ds:0xc0023304,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 04 33 02 c0       	mov    ds:0xc0023304,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 0c 33 02 c0    	mov    edx,DWORD PTR ds:0xc002330c
c000975f:	8b 0d 14 33 02 c0    	mov    ecx,DWORD PTR ds:0xc0023314
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d 0c 33 02 c0    	mov    ecx,DWORD PTR ds:0xc002330c
c000977a:	a1 10 33 02 c0       	mov    eax,ds:0xc0023310
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d 10 33 02 c0    	cmp    DWORD PTR ds:0xc0023310,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 20 0f 02 c0       	push   0xc0020f20
c00097c0:	e8 b8 7b 00 00       	call   c001137d <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 37 0f 02 c0       	push   0xc0020f37
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d 10 33 02 c0    	mov    DWORD PTR ds:0xc0023310,ebx
c0009864:	c6 05 18 33 02 c0 43 	mov    BYTE PTR ds:0xc0023318,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 14 33 02 c0       	mov    ds:0xc0023314,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 0c 33 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002330c,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 10 33 02 c0       	mov    eax,ds:0xc0023310
c0009896:	f7 35 0c 33 02 c0    	div    DWORD PTR ds:0xc002330c
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 ac 0c 02 c0       	push   0xc0020cac
c00098d1:	e8 a7 7a 00 00       	call   c001137d <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 4e 0f 02 c0       	push   0xc0020f4e
c00099a3:	e8 d5 79 00 00       	call   c001137d <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 d0 0c 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020cd0
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 72 79 00 00       	jmp    c001137d <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 6a 0f 02 c0       	push   0xc0020f6a
c0009a18:	e8 60 79 00 00       	call   c001137d <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 86 0f 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020f86
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 16 79 00 00       	jmp    c001137d <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 f4 0c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020cf4
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b26:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009d10:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 18 0d 02 c0       	push   0xc0020d18
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 80 0d 02 c0       	push   0xc0020d80
c0009dad:	e8 cb 75 00 00       	call   c001137d <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 a4 0d 02 c0       	push   0xc0020da4
c0009e99:	e8 df 74 00 00       	call   c001137d <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 d0 0d 02 c0       	push   0xc0020dd0
c0009fed:	e8 8b 73 00 00       	call   c001137d <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 be 27 00 00       	call   c000c9e2 <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 a0 0f 02 c0       	push   0xc0020fa0
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 0c 33 02 c0       	mov    eax,ds:0xc002330c
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 18 33 02 c0 	movsx  eax,BYTE PTR ds:0xc0023318
c000a2fd:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a304:	50                   	push   eax
c000a305:	e8 92 38 00 00       	call   c000db9c <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d 0c 33 02 c0    	cmp    DWORD PTR ds:0xc002330c,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 f4 0d 02 c0       	push   0xc0020df4
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a36f:	c7 44 24 50 ae 0f 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020fae
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 d1 0f 02 c0       	push   0xc0020fd1
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 bf 0f 02 c0       	push   0xc0020fbf
c000a3db:	e8 9d 6f 00 00       	call   c001137d <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 d1 0f 02 c0       	push   0xc0020fd1
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 0c 33 02 c0    	mov    edx,DWORD PTR ds:0xc002330c
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 18 33 02 c0 	movsx  eax,BYTE PTR ds:0xc0023318
c000a47a:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a481:	50                   	push   eax
c000a482:	e8 a9 36 00 00       	call   c000db30 <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 0c 33 02 c0    	cmp    DWORD PTR ds:0xc002330c,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 e4 0f 02 c0       	push   0xc0020fe4
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 24 0e 02 c0       	push   0xc0020e24
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 44 0e 02 c0       	push   0xc0020e44
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 a4 0e 02 c0 	mov    DWORD PTR [esp],0xc0020ea4
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 f9 0f 02 c0       	push   0xc0020ff9
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 0d 10 02 c0       	push   0xc002100d
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 20 10 02 c0       	push   0xc0021020
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 40 02 c0       	push   0xc0024000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 40 02 c0       	push   0xc0024000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 2d 10 02 c0       	push   0xc002102d
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 46 10 02 c0       	push   0xc0021046
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 46 10 02 c0       	push   0xc0021046
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 4e 10 02 c0 	mov    DWORD PTR [esp],0xc002104e
c000a7f8:	e8 80 6b 00 00       	call   c001137d <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 66 10 02 c0       	push   0xc0021066
c000a80a:	e8 6e 6b 00 00       	call   c001137d <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be 6f 0b 02 c0       	mov    esi,0xc0020b6f
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 6e 0b 02 c0       	mov    al,ds:0xc0020b6e
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 7c 10 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdef84]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 cc 11 02 c0       	push   0xc00211cc
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 e0 11 02 c0       	push   0xc00211e0
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 ea 11 02 c0       	push   0xc00211ea
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 f4 11 02 c0       	push   0xc00211f4
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 38 13 02 c0       	push   0xc0021338
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 fe 11 02 c0       	push   0xc00211fe
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 58 13 02 c0       	push   0xc0021358
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 13 12 02 c0       	push   0xc0021213
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 2d 12 02 c0       	push   0xc002122d
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 20 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcce0]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 80 13 02 c0       	push   0xc0021380
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 38 13 02 c0       	push   0xc0021338
c000abb4:	e8 c4 67 00 00       	call   c001137d <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 c8 13 02 c0       	push   0xc00213c8
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 c8 13 02 c0       	push   0xc00213c8
c000abe3:	e8 95 67 00 00       	call   c001137d <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 38 12 02 c0       	push   0xc0021238
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 38 12 02 c0       	push   0xc0021238
c000ac0f:	e8 69 67 00 00       	call   c001137d <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 55 12 02 c0       	push   0xc0021255
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 55 12 02 c0       	push   0xc0021255
c000ac3b:	e8 3d 67 00 00       	call   c001137d <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 e8 13 02 c0       	push   0xc00213e8
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 e8 13 02 c0       	push   0xc00213e8
c000ac67:	e8 11 67 00 00       	call   c001137d <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 0c 14 02 c0       	push   0xc002140c
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 0c 14 02 c0       	push   0xc002140c
c000ac93:	e8 e5 66 00 00       	call   c001137d <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 71 12 02 c0       	push   0xc0021271
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 71 12 02 c0       	push   0xc0021271
c000acbf:	e8 b9 66 00 00       	call   c001137d <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 8d 12 02 c0       	push   0xc002128d
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 8d 12 02 c0       	push   0xc002128d
c000aceb:	e8 8d 66 00 00       	call   c001137d <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 2c 14 02 c0       	push   0xc002142c
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 2c 14 02 c0       	push   0xc002142c
c000ad17:	e8 61 66 00 00       	call   c001137d <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 50 14 02 c0       	push   0xc0021450
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 50 14 02 c0       	push   0xc0021450
c000ad43:	e8 35 66 00 00       	call   c001137d <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiCreateSymlinkID()>:
c000ad50:	55                   	push   ebp
c000ad51:	57                   	push   edi
c000ad52:	56                   	push   esi
c000ad53:	53                   	push   ebx
c000ad54:	31 db                	xor    ebx,ebx
c000ad56:	83 ec 1c             	sub    esp,0x1c
c000ad59:	e8 6d 67 00 00       	call   c00114cb <KeRand()>
c000ad5e:	43                   	inc    ebx
c000ad5f:	8b 2d 00 64 02 c0    	mov    ebp,DWORD PTR ds:0xc0026400
c000ad65:	31 d2                	xor    edx,edx
c000ad67:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad6a:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad6e:	89 0d 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,ecx
c000ad74:	c1 e0 1b             	shl    eax,0x1b
c000ad77:	89 d7                	mov    edi,edx
c000ad79:	89 c6                	mov    esi,eax
c000ad7b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000ad7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ad87:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad8d:	75 10                	jne    c000ad9f <KiCreateSymlinkID()+0x4f>
c000ad8f:	83 ec 0c             	sub    esp,0xc
c000ad92:	68 6f 14 02 c0       	push   0xc002146f
c000ad97:	e8 e1 65 00 00       	call   c001137d <KePanic(char const*)>
c000ad9c:	83 c4 10             	add    esp,0x10
c000ad9f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ada3:	75 04                	jne    c000ada9 <KiCreateSymlinkID()+0x59>
c000ada5:	39 f5                	cmp    ebp,esi
c000ada7:	74 b0                	je     c000ad59 <KiCreateSymlinkID()+0x9>
c000ada9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000adad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000adb1:	31 f0                	xor    eax,esi
c000adb3:	83 c4 1c             	add    esp,0x1c
c000adb6:	31 fa                	xor    edx,edi
c000adb8:	5b                   	pop    ebx
c000adb9:	5e                   	pop    esi
c000adba:	5f                   	pop    edi
c000adbb:	5d                   	pop    ebp
c000adbc:	c3                   	ret    

c000adbd <KiFlushSymlinkChanges()>:
c000adbd:	56                   	push   esi
c000adbe:	53                   	push   ebx
c000adbf:	83 ec 20             	sub    esp,0x20
c000adc2:	68 14 01 00 00       	push   0x114
c000adc7:	e8 ea cc ff ff       	call   c0007ab6 <malloc>
c000adcc:	83 c4 0c             	add    esp,0xc
c000adcf:	89 c3                	mov    ebx,eax
c000add1:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000add7:	68 78 14 02 c0       	push   0xc0021478
c000addc:	50                   	push   eax
c000addd:	e8 f4 0a 00 00       	call   c000b8d6 <File::File(char const*, Process*)>
c000ade2:	83 c4 10             	add    esp,0x10
c000ade5:	85 db                	test   ebx,ebx
c000ade7:	75 10                	jne    c000adf9 <KiFlushSymlinkChanges()+0x3c>
c000ade9:	83 ec 0c             	sub    esp,0xc
c000adec:	68 96 14 02 c0       	push   0xc0021496
c000adf1:	e8 87 65 00 00       	call   c001137d <KePanic(char const*)>
c000adf6:	83 c4 10             	add    esp,0x10
c000adf9:	50                   	push   eax
c000adfa:	50                   	push   eax
c000adfb:	6a 06                	push   0x6
c000adfd:	53                   	push   ebx
c000adfe:	e8 f1 0a 00 00       	call   c000b8f4 <File::open(FileOpenMode)>
c000ae03:	83 c4 10             	add    esp,0x10
c000ae06:	85 c0                	test   eax,eax
c000ae08:	74 10                	je     c000ae1a <KiFlushSymlinkChanges()+0x5d>
c000ae0a:	83 ec 0c             	sub    esp,0xc
c000ae0d:	68 b0 14 02 c0       	push   0xc00214b0
c000ae12:	e8 66 65 00 00       	call   c001137d <KePanic(char const*)>
c000ae17:	83 c4 10             	add    esp,0x10
c000ae1a:	31 f6                	xor    esi,esi
c000ae1c:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ae22:	7e 40                	jle    c000ae64 <KiFlushSymlinkChanges()+0xa7>
c000ae24:	83 ec 0c             	sub    esp,0xc
c000ae27:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae29:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ae2d:	50                   	push   eax
c000ae2e:	89 f0                	mov    eax,esi
c000ae30:	c1 e0 08             	shl    eax,0x8
c000ae33:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae38:	50                   	push   eax
c000ae39:	6a 00                	push   0x0
c000ae3b:	68 00 01 00 00       	push   0x100
c000ae40:	53                   	push   ebx
c000ae41:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae44:	83 c4 20             	add    esp,0x20
c000ae47:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae4f:	74 10                	je     c000ae61 <KiFlushSymlinkChanges()+0xa4>
c000ae51:	83 ec 0c             	sub    esp,0xc
c000ae54:	68 ca 14 02 c0       	push   0xc00214ca
c000ae59:	e8 1f 65 00 00       	call   c001137d <KePanic(char const*)>
c000ae5e:	83 c4 10             	add    esp,0x10
c000ae61:	46                   	inc    esi
c000ae62:	eb b8                	jmp    c000ae1c <KiFlushSymlinkChanges()+0x5f>
c000ae64:	83 ec 0c             	sub    esp,0xc
c000ae67:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae71:	53                   	push   ebx
c000ae72:	e8 db 0a 00 00       	call   c000b952 <File::close()>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	85 db                	test   ebx,ebx
c000ae7c:	74 0c                	je     c000ae8a <KiFlushSymlinkChanges()+0xcd>
c000ae7e:	83 ec 0c             	sub    esp,0xc
c000ae81:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae83:	53                   	push   ebx
c000ae84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae87:	83 c4 10             	add    esp,0x10
c000ae8a:	83 c4 14             	add    esp,0x14
c000ae8d:	5b                   	pop    ebx
c000ae8e:	5e                   	pop    esi
c000ae8f:	c3                   	ret    

c000ae90 <KiDeinitialiseSymlinks(void*)>:
c000ae90:	e9 28 ff ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>

c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae95:	53                   	push   ebx
c000ae96:	83 ec 0c             	sub    esp,0xc
c000ae99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000aea1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	68 00 01 00 00       	push   0x100
c000aeaf:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000aeb6:	6a 00                	push   0x0
c000aeb8:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000aebf:	c1 e0 08             	shl    eax,0x8
c000aec2:	05 00 60 02 c0       	add    eax,0xc0026000
c000aec7:	50                   	push   eax
c000aec8:	e8 23 56 ff ff       	call   c00004f0 <memset>
c000aecd:	58                   	pop    eax
c000aece:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aed3:	5a                   	pop    edx
c000aed4:	c1 e0 08             	shl    eax,0x8
c000aed7:	53                   	push   ebx
c000aed8:	05 00 60 02 c0       	add    eax,0xc0026000
c000aedd:	50                   	push   eax
c000aede:	e8 5d 57 ff ff       	call   c0000640 <strcpy>
c000aee3:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aee8:	83 c4 10             	add    esp,0x10
c000aeeb:	40                   	inc    eax
c000aeec:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aef1:	83 f8 03             	cmp    eax,0x3
c000aef4:	7e 09                	jle    c000aeff <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aef6:	83 c4 08             	add    esp,0x8
c000aef9:	5b                   	pop    ebx
c000aefa:	e9 be fe ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>
c000aeff:	83 c4 08             	add    esp,0x8
c000af02:	5b                   	pop    ebx
c000af03:	c3                   	ret    

c000af04 <KiIsSymlinkRegistered(char const*)>:
c000af04:	53                   	push   ebx
c000af05:	31 db                	xor    ebx,ebx
c000af07:	83 ec 08             	sub    esp,0x8
c000af0a:	39 1d c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,ebx
c000af10:	7e 30                	jle    c000af42 <KiIsSymlinkRegistered(char const*)+0x3e>
c000af12:	50                   	push   eax
c000af13:	50                   	push   eax
c000af14:	89 d8                	mov    eax,ebx
c000af16:	c1 e0 08             	shl    eax,0x8
c000af19:	05 00 60 02 c0       	add    eax,0xc0026000
c000af1e:	50                   	push   eax
c000af1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af23:	e8 28 58 ff ff       	call   c0000750 <strcmp>
c000af28:	83 c4 10             	add    esp,0x10
c000af2b:	85 c0                	test   eax,eax
c000af2d:	75 10                	jne    c000af3f <KiIsSymlinkRegistered(char const*)+0x3b>
c000af2f:	8b 04 dd e0 5f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffda020]
c000af36:	8b 14 dd e4 5f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffda01c]
c000af3d:	eb 07                	jmp    c000af46 <KiIsSymlinkRegistered(char const*)+0x42>
c000af3f:	43                   	inc    ebx
c000af40:	eb c8                	jmp    c000af0a <KiIsSymlinkRegistered(char const*)+0x6>
c000af42:	31 c0                	xor    eax,eax
c000af44:	31 d2                	xor    edx,edx
c000af46:	83 c4 08             	add    esp,0x8
c000af49:	5b                   	pop    ebx
c000af4a:	c3                   	ret    

c000af4b <KeDereferenceSymlink(char const*, char*)>:
c000af4b:	55                   	push   ebp
c000af4c:	57                   	push   edi
c000af4d:	56                   	push   esi
c000af4e:	53                   	push   ebx
c000af4f:	83 ec 44             	sub    esp,0x44
c000af52:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000af56:	56                   	push   esi
c000af57:	68 e4 14 02 c0       	push   0xc00214e4
c000af5c:	e8 e4 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af61:	89 34 24             	mov    DWORD PTR [esp],esi
c000af64:	e8 9b ff ff ff       	call   c000af04 <KiIsSymlinkRegistered(char const*)>
c000af69:	83 c4 10             	add    esp,0x10
c000af6c:	89 c7                	mov    edi,eax
c000af6e:	89 d0                	mov    eax,edx
c000af70:	09 f8                	or     eax,edi
c000af72:	75 07                	jne    c000af7b <KeDereferenceSymlink(char const*, char*)+0x30>
c000af74:	31 c0                	xor    eax,eax
c000af76:	e9 e3 01 00 00       	jmp    c000b15e <KeDereferenceSymlink(char const*, char*)+0x213>
c000af7b:	89 d5                	mov    ebp,edx
c000af7d:	53                   	push   ebx
c000af7e:	53                   	push   ebx
c000af7f:	57                   	push   edi
c000af80:	68 fe 14 02 c0       	push   0xc00214fe
c000af85:	e8 bb f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af8a:	58                   	pop    eax
c000af8b:	5a                   	pop    edx
c000af8c:	55                   	push   ebp
c000af8d:	68 0c 15 02 c0       	push   0xc002150c
c000af92:	e8 ae f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af97:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000af9e:	e8 13 cb ff ff       	call   c0007ab6 <malloc>
c000afa3:	83 c4 0c             	add    esp,0xc
c000afa6:	89 c3                	mov    ebx,eax
c000afa8:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000afae:	56                   	push   esi
c000afaf:	50                   	push   eax
c000afb0:	e8 21 09 00 00       	call   c000b8d6 <File::File(char const*, Process*)>
c000afb5:	83 c4 10             	add    esp,0x10
c000afb8:	85 db                	test   ebx,ebx
c000afba:	0f 84 68 01 00 00    	je     c000b128 <KeDereferenceSymlink(char const*, char*)+0x1dd>
c000afc0:	83 ec 0c             	sub    esp,0xc
c000afc3:	68 00 21 02 c0       	push   0xc0022100
c000afc8:	e8 78 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000afcd:	5a                   	pop    edx
c000afce:	59                   	pop    ecx
c000afcf:	6a 01                	push   0x1
c000afd1:	53                   	push   ebx
c000afd2:	e8 1d 09 00 00       	call   c000b8f4 <File::open(FileOpenMode)>
c000afd7:	83 c4 10             	add    esp,0x10
c000afda:	85 c0                	test   eax,eax
c000afdc:	74 0b                	je     c000afe9 <KeDereferenceSymlink(char const*, char*)+0x9e>
c000afde:	83 ec 0c             	sub    esp,0xc
c000afe1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afe3:	53                   	push   ebx
c000afe4:	e9 39 01 00 00       	jmp    c000b122 <KeDereferenceSymlink(char const*, char*)+0x1d7>
c000afe9:	83 ec 0c             	sub    esp,0xc
c000afec:	68 06 0b 02 c0       	push   0xc0020b06
c000aff1:	e8 4f f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aff6:	58                   	pop    eax
c000aff7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aff9:	8d 74 24 18          	lea    esi,[esp+0x18]
c000affd:	56                   	push   esi
c000affe:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b002:	52                   	push   edx
c000b003:	6a 00                	push   0x0
c000b005:	6a 08                	push   0x8
c000b007:	53                   	push   ebx
c000b008:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b00b:	83 c4 20             	add    esp,0x20
c000b00e:	85 c0                	test   eax,eax
c000b010:	0f 85 fe 00 00 00    	jne    c000b114 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b016:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b01b:	0f 85 f3 00 00 00    	jne    c000b114 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b021:	83 ec 0c             	sub    esp,0xc
c000b024:	68 32 21 02 c0       	push   0xc0022132
c000b029:	e8 17 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b02e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b030:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b034:	89 34 24             	mov    DWORD PTR [esp],esi
c000b037:	52                   	push   edx
c000b038:	6a 00                	push   0x0
c000b03a:	6a 08                	push   0x8
c000b03c:	53                   	push   ebx
c000b03d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b040:	83 c4 20             	add    esp,0x20
c000b043:	85 c0                	test   eax,eax
c000b045:	0f 85 c9 00 00 00    	jne    c000b114 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b04b:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b050:	0f 85 be 00 00 00    	jne    c000b114 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b056:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b05a:	0f 85 14 ff ff ff    	jne    c000af74 <KeDereferenceSymlink(char const*, char*)+0x29>
c000b060:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b064:	0f 85 0a ff ff ff    	jne    c000af74 <KeDereferenceSymlink(char const*, char*)+0x29>
c000b06a:	83 ec 0c             	sub    esp,0xc
c000b06d:	68 1a 15 02 c0       	push   0xc002151a
c000b072:	e8 ce f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b077:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b07f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b087:	83 c4 0c             	add    esp,0xc
c000b08a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b08e:	50                   	push   eax
c000b08f:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b093:	50                   	push   eax
c000b094:	53                   	push   ebx
c000b095:	e8 5c 0b 00 00       	call   c000bbf6 <File::stat(unsigned long long*, bool*)>
c000b09a:	83 c4 10             	add    esp,0x10
c000b09d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b0a2:	75 70                	jne    c000b114 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b0a4:	31 ff                	xor    edi,edi
c000b0a6:	b8 0f 00 00 00       	mov    eax,0xf
c000b0ab:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b0af:	89 f8                	mov    eax,edi
c000b0b1:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000b0b5:	73 5d                	jae    c000b114 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	68 1a 15 02 c0       	push   0xc002151a
c000b0bf:	e8 81 f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b0c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b0c8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b0cc:	83 c0 f0             	add    eax,0xfffffff0
c000b0cf:	b9 ff 00 00 00       	mov    ecx,0xff
c000b0d4:	83 d2 ff             	adc    edx,0xffffffff
c000b0d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0df:	83 c4 10             	add    esp,0x10
c000b0e2:	39 c1                	cmp    ecx,eax
c000b0e4:	19 d7                	sbb    edi,edx
c000b0e6:	72 40                	jb     c000b128 <KeDereferenceSymlink(char const*, char*)+0x1dd>
c000b0e8:	83 ec 0c             	sub    esp,0xc
c000b0eb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b0ed:	56                   	push   esi
c000b0ee:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b0f2:	52                   	push   edx
c000b0f3:	50                   	push   eax
c000b0f4:	53                   	push   ebx
c000b0f5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b0f8:	83 c4 20             	add    esp,0x20
c000b0fb:	85 c0                	test   eax,eax
c000b0fd:	75 15                	jne    c000b114 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b0ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b103:	89 c7                	mov    edi,eax
c000b105:	c1 ff 1f             	sar    edi,0x1f
c000b108:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b10c:	75 06                	jne    c000b114 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b10e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b112:	74 19                	je     c000b12d <KeDereferenceSymlink(char const*, char*)+0x1e2>
c000b114:	83 ec 0c             	sub    esp,0xc
c000b117:	53                   	push   ebx
c000b118:	e8 35 08 00 00       	call   c000b952 <File::close()>
c000b11d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b11f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b122:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b125:	83 c4 10             	add    esp,0x10
c000b128:	83 c8 ff             	or     eax,0xffffffff
c000b12b:	eb 31                	jmp    c000b15e <KeDereferenceSymlink(char const*, char*)+0x213>
c000b12d:	83 ec 0c             	sub    esp,0xc
c000b130:	68 12 2c 02 c0       	push   0xc0022c12
c000b135:	e8 0b f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b13a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b13d:	e8 10 08 00 00       	call   c000b952 <File::close()>
c000b142:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b144:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b147:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b14a:	c7 04 24 1d 15 02 c0 	mov    DWORD PTR [esp],0xc002151d
c000b151:	e8 ef f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b156:	83 c4 10             	add    esp,0x10
c000b159:	b8 01 00 00 00       	mov    eax,0x1
c000b15e:	83 c4 3c             	add    esp,0x3c
c000b161:	5b                   	pop    ebx
c000b162:	5e                   	pop    esi
c000b163:	5f                   	pop    edi
c000b164:	5d                   	pop    ebp
c000b165:	c3                   	ret    

c000b166 <KeCreateSymlink(char const*, char const*)>:
c000b166:	55                   	push   ebp
c000b167:	57                   	push   edi
c000b168:	56                   	push   esi
c000b169:	53                   	push   ebx
c000b16a:	83 ec 38             	sub    esp,0x38
c000b16d:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b171:	68 14 01 00 00       	push   0x114
c000b176:	e8 3b c9 ff ff       	call   c0007ab6 <malloc>
c000b17b:	6a 00                	push   0x0
c000b17d:	89 c3                	mov    ebx,eax
c000b17f:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b185:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b189:	50                   	push   eax
c000b18a:	e8 69 06 00 00       	call   c000b7f8 <File::File(char const*, Process*, bool)>
c000b18f:	83 c4 20             	add    esp,0x20
c000b192:	b8 01 00 00 00       	mov    eax,0x1
c000b197:	85 db                	test   ebx,ebx
c000b199:	0f 84 fb 00 00 00    	je     c000b29a <KeCreateSymlink(char const*, char const*)+0x134>
c000b19f:	52                   	push   edx
c000b1a0:	52                   	push   edx
c000b1a1:	6a 12                	push   0x12
c000b1a3:	53                   	push   ebx
c000b1a4:	e8 4b 07 00 00       	call   c000b8f4 <File::open(FileOpenMode)>
c000b1a9:	83 c4 10             	add    esp,0x10
c000b1ac:	85 c0                	test   eax,eax
c000b1ae:	74 0b                	je     c000b1bb <KeCreateSymlink(char const*, char const*)+0x55>
c000b1b0:	83 ec 0c             	sub    esp,0xc
c000b1b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1b5:	53                   	push   ebx
c000b1b6:	e9 d4 00 00 00       	jmp    c000b28f <KeCreateSymlink(char const*, char const*)+0x129>
c000b1bb:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b1bf:	be 20 15 02 c0       	mov    esi,0xc0021520
c000b1c4:	b9 09 00 00 00       	mov    ecx,0x9
c000b1c9:	fc                   	cld    
c000b1ca:	83 ec 0c             	sub    esp,0xc
c000b1cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b1cf:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b1d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1d5:	56                   	push   esi
c000b1d6:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b1da:	52                   	push   edx
c000b1db:	6a 00                	push   0x0
c000b1dd:	6a 08                	push   0x8
c000b1df:	53                   	push   ebx
c000b1e0:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1e3:	83 c4 20             	add    esp,0x20
c000b1e6:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1eb:	0f 85 90 00 00 00    	jne    c000b281 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b1f1:	85 c0                	test   eax,eax
c000b1f3:	0f 85 88 00 00 00    	jne    c000b281 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b1f9:	e8 52 fb ff ff       	call   c000ad50 <KiCreateSymlinkID()>
c000b1fe:	83 ec 0c             	sub    esp,0xc
c000b201:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b205:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b209:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b20b:	56                   	push   esi
c000b20c:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b210:	52                   	push   edx
c000b211:	6a 00                	push   0x0
c000b213:	6a 08                	push   0x8
c000b215:	53                   	push   ebx
c000b216:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b219:	83 c4 20             	add    esp,0x20
c000b21c:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b221:	75 5e                	jne    c000b281 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b223:	85 c0                	test   eax,eax
c000b225:	75 5a                	jne    c000b281 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b227:	83 ec 0c             	sub    esp,0xc
c000b22a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b22c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b22f:	55                   	push   ebp
c000b230:	e8 3b 53 ff ff       	call   c0000570 <strlen>
c000b235:	89 34 24             	mov    DWORD PTR [esp],esi
c000b238:	31 d2                	xor    edx,edx
c000b23a:	55                   	push   ebp
c000b23b:	52                   	push   edx
c000b23c:	50                   	push   eax
c000b23d:	53                   	push   ebx
c000b23e:	ff d7                	call   edi
c000b240:	83 c4 14             	add    esp,0x14
c000b243:	89 c6                	mov    esi,eax
c000b245:	55                   	push   ebp
c000b246:	e8 25 53 ff ff       	call   c0000570 <strlen>
c000b24b:	83 c4 10             	add    esp,0x10
c000b24e:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b252:	75 2d                	jne    c000b281 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b254:	85 f6                	test   esi,esi
c000b256:	75 29                	jne    c000b281 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b258:	50                   	push   eax
c000b259:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b25d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b261:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b265:	e8 2b fc ff ff       	call   c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>
c000b26a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b26d:	e8 e0 06 00 00       	call   c000b952 <File::close()>
c000b272:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b274:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b277:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b27a:	83 c4 10             	add    esp,0x10
c000b27d:	31 c0                	xor    eax,eax
c000b27f:	eb 19                	jmp    c000b29a <KeCreateSymlink(char const*, char const*)+0x134>
c000b281:	83 ec 0c             	sub    esp,0xc
c000b284:	53                   	push   ebx
c000b285:	e8 c8 06 00 00       	call   c000b952 <File::close()>
c000b28a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b28c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b28f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b292:	83 c4 10             	add    esp,0x10
c000b295:	b8 01 00 00 00       	mov    eax,0x1
c000b29a:	83 c4 2c             	add    esp,0x2c
c000b29d:	5b                   	pop    ebx
c000b29e:	5e                   	pop    esi
c000b29f:	5f                   	pop    edi
c000b2a0:	5d                   	pop    ebp
c000b2a1:	c3                   	ret    

c000b2a2 <KeInitialiseSymlinks()>:
c000b2a2:	53                   	push   ebx
c000b2a3:	83 ec 10             	sub    esp,0x10
c000b2a6:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b2b0:	6a 00                	push   0x0
c000b2b2:	68 90 ae 00 c0       	push   0xc000ae90
c000b2b7:	e8 d8 58 00 00       	call   c0010b94 <KeRegisterAtexit(void (*)(void*), void*)>
c000b2bc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b2c3:	e8 ee c7 ff ff       	call   c0007ab6 <malloc>
c000b2c8:	83 c4 0c             	add    esp,0xc
c000b2cb:	89 c3                	mov    ebx,eax
c000b2cd:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b2d3:	68 78 14 02 c0       	push   0xc0021478
c000b2d8:	50                   	push   eax
c000b2d9:	e8 f8 05 00 00       	call   c000b8d6 <File::File(char const*, Process*)>
c000b2de:	83 c4 10             	add    esp,0x10
c000b2e1:	85 db                	test   ebx,ebx
c000b2e3:	75 10                	jne    c000b2f5 <KeInitialiseSymlinks()+0x53>
c000b2e5:	83 ec 0c             	sub    esp,0xc
c000b2e8:	68 29 15 02 c0       	push   0xc0021529
c000b2ed:	e8 8b 60 00 00       	call   c001137d <KePanic(char const*)>
c000b2f2:	83 c4 10             	add    esp,0x10
c000b2f5:	83 ec 0c             	sub    esp,0xc
c000b2f8:	53                   	push   ebx
c000b2f9:	e8 ba 08 00 00       	call   c000bbb8 <File::exists()>
c000b2fe:	83 c4 10             	add    esp,0x10
c000b301:	84 c0                	test   al,al
c000b303:	75 2d                	jne    c000b332 <KeInitialiseSymlinks()+0x90>
c000b305:	52                   	push   edx
c000b306:	52                   	push   edx
c000b307:	6a 12                	push   0x12
c000b309:	53                   	push   ebx
c000b30a:	e8 e5 05 00 00       	call   c000b8f4 <File::open(FileOpenMode)>
c000b30f:	83 c4 10             	add    esp,0x10
c000b312:	85 c0                	test   eax,eax
c000b314:	74 10                	je     c000b326 <KeInitialiseSymlinks()+0x84>
c000b316:	83 ec 0c             	sub    esp,0xc
c000b319:	68 46 15 02 c0       	push   0xc0021546
c000b31e:	e8 5a 60 00 00       	call   c001137d <KePanic(char const*)>
c000b323:	83 c4 10             	add    esp,0x10
c000b326:	83 ec 0c             	sub    esp,0xc
c000b329:	53                   	push   ebx
c000b32a:	e8 23 06 00 00       	call   c000b952 <File::close()>
c000b32f:	83 c4 10             	add    esp,0x10
c000b332:	85 db                	test   ebx,ebx
c000b334:	74 0c                	je     c000b342 <KeInitialiseSymlinks()+0xa0>
c000b336:	83 ec 0c             	sub    esp,0xc
c000b339:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b33b:	53                   	push   ebx
c000b33c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b33f:	83 c4 10             	add    esp,0x10
c000b342:	50                   	push   eax
c000b343:	50                   	push   eax
c000b344:	68 63 15 02 c0       	push   0xc0021563
c000b349:	68 71 15 02 c0       	push   0xc0021571
c000b34e:	e8 13 fe ff ff       	call   c000b166 <KeCreateSymlink(char const*, char const*)>
c000b353:	83 c4 18             	add    esp,0x18
c000b356:	5b                   	pop    ebx
c000b357:	c3                   	ret    

c000b358 <File::read(unsigned long long, void*, int*)>:
c000b358:	53                   	push   ebx
c000b359:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b35d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b361:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b368:	83 f8 19             	cmp    eax,0x19
c000b36b:	77 35                	ja     c000b3a2 <File::read(unsigned long long, void*, int*)+0x4a>
c000b36d:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b374:	85 c0                	test   eax,eax
c000b376:	74 2a                	je     c000b3a2 <File::read(unsigned long long, void*, int*)+0x4a>
c000b378:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b37e:	85 c0                	test   eax,eax
c000b380:	74 20                	je     c000b3a2 <File::read(unsigned long long, void*, int*)+0x4a>
c000b382:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b386:	74 21                	je     c000b3a9 <File::read(unsigned long long, void*, int*)+0x51>
c000b388:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b38a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b38e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b394:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b398:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b39c:	5b                   	pop    ebx
c000b39d:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b3a0:	ff e0                	jmp    eax
c000b3a2:	b8 0b 00 00 00       	mov    eax,0xb
c000b3a7:	eb 05                	jmp    c000b3ae <File::read(unsigned long long, void*, int*)+0x56>
c000b3a9:	b8 05 00 00 00       	mov    eax,0x5
c000b3ae:	5b                   	pop    ebx
c000b3af:	c3                   	ret    

c000b3b0 <File::write(unsigned long long, void*, int*)>:
c000b3b0:	53                   	push   ebx
c000b3b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b3b5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b3b9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b3c0:	83 f8 19             	cmp    eax,0x19
c000b3c3:	77 35                	ja     c000b3fa <File::write(unsigned long long, void*, int*)+0x4a>
c000b3c5:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b3cc:	85 c0                	test   eax,eax
c000b3ce:	74 2a                	je     c000b3fa <File::write(unsigned long long, void*, int*)+0x4a>
c000b3d0:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b3d6:	85 c0                	test   eax,eax
c000b3d8:	74 20                	je     c000b3fa <File::write(unsigned long long, void*, int*)+0x4a>
c000b3da:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3de:	74 21                	je     c000b401 <File::write(unsigned long long, void*, int*)+0x51>
c000b3e0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3e2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3e6:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b3ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3f0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3f4:	5b                   	pop    ebx
c000b3f5:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b3f8:	ff e0                	jmp    eax
c000b3fa:	b8 0b 00 00 00       	mov    eax,0xb
c000b3ff:	eb 05                	jmp    c000b406 <File::write(unsigned long long, void*, int*)+0x56>
c000b401:	b8 05 00 00 00       	mov    eax,0x5
c000b406:	5b                   	pop    ebx
c000b407:	c3                   	ret    

c000b408 <Directory::read(unsigned long long, void*, int*)>:
c000b408:	53                   	push   ebx
c000b409:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b40d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b411:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b418:	83 f8 19             	cmp    eax,0x19
c000b41b:	77 35                	ja     c000b452 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b41d:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b424:	85 c0                	test   eax,eax
c000b426:	74 2a                	je     c000b452 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b428:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b42e:	85 c0                	test   eax,eax
c000b430:	74 20                	je     c000b452 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b432:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b436:	74 21                	je     c000b459 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b438:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b43a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b43e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b444:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b448:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b44c:	5b                   	pop    ebx
c000b44d:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b450:	ff e0                	jmp    eax
c000b452:	b8 0b 00 00 00       	mov    eax,0xb
c000b457:	eb 05                	jmp    c000b45e <Directory::read(unsigned long long, void*, int*)+0x56>
c000b459:	b8 05 00 00 00       	mov    eax,0x5
c000b45e:	5b                   	pop    ebx
c000b45f:	c3                   	ret    

c000b460 <Directory::write(unsigned long long, void*, int*)>:
c000b460:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b464:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b46b:	b8 0b 00 00 00       	mov    eax,0xb
c000b470:	83 fa 19             	cmp    edx,0x19
c000b473:	77 18                	ja     c000b48d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b475:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b47c:	85 d2                	test   edx,edx
c000b47e:	74 0d                	je     c000b48d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b480:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b487:	19 c0                	sbb    eax,eax
c000b489:	83 e0 0a             	and    eax,0xa
c000b48c:	40                   	inc    eax
c000b48d:	c3                   	ret    

c000b48e <File::isAtty()>:
c000b48e:	31 c0                	xor    eax,eax
c000b490:	c3                   	ret    
c000b491:	90                   	nop

c000b492 <Directory::isAtty()>:
c000b492:	31 c0                	xor    eax,eax
c000b494:	c3                   	ret    
c000b495:	90                   	nop

c000b496 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b496:	b8 0a 00 00 00       	mov    eax,0xa
c000b49b:	c3                   	ret    

c000b49c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b49c:	b8 0a 00 00 00       	mov    eax,0xa
c000b4a1:	c3                   	ret    

c000b4a2 <Filesystem::allocateSwapfile(char const*, int)>:
c000b4a2:	31 c0                	xor    eax,eax
c000b4a4:	31 d2                	xor    edx,edx
c000b4a6:	c3                   	ret    
c000b4a7:	90                   	nop

c000b4a8 <File::~File()>:
c000b4a8:	83 ec 0c             	sub    esp,0xc
c000b4ab:	ba 2c 16 02 c0       	mov    edx,0xc002162c
c000b4b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b4:	89 10                	mov    DWORD PTR [eax],edx
c000b4b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4ba:	83 ec 0c             	sub    esp,0xc
c000b4bd:	50                   	push   eax
c000b4be:	e8 e1 de ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b4c3:	83 c4 10             	add    esp,0x10
c000b4c6:	90                   	nop
c000b4c7:	83 c4 0c             	add    esp,0xc
c000b4ca:	c3                   	ret    
c000b4cb:	90                   	nop

c000b4cc <File::~File()>:
c000b4cc:	83 ec 0c             	sub    esp,0xc
c000b4cf:	83 ec 0c             	sub    esp,0xc
c000b4d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4d6:	e8 cd ff ff ff       	call   c000b4a8 <File::~File()>
c000b4db:	83 c4 10             	add    esp,0x10
c000b4de:	83 ec 08             	sub    esp,0x8
c000b4e1:	68 14 01 00 00       	push   0x114
c000b4e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ea:	e8 29 f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b4ef:	83 c4 10             	add    esp,0x10
c000b4f2:	83 c4 0c             	add    esp,0xc
c000b4f5:	c3                   	ret    

c000b4f6 <Directory::~Directory()>:
c000b4f6:	83 ec 0c             	sub    esp,0xc
c000b4f9:	ba 48 16 02 c0       	mov    edx,0xc0021648
c000b4fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b502:	89 10                	mov    DWORD PTR [eax],edx
c000b504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b508:	83 ec 0c             	sub    esp,0xc
c000b50b:	50                   	push   eax
c000b50c:	e8 93 de ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b511:	83 c4 10             	add    esp,0x10
c000b514:	90                   	nop
c000b515:	83 c4 0c             	add    esp,0xc
c000b518:	c3                   	ret    
c000b519:	90                   	nop

c000b51a <Directory::~Directory()>:
c000b51a:	83 ec 0c             	sub    esp,0xc
c000b51d:	83 ec 0c             	sub    esp,0xc
c000b520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b524:	e8 cd ff ff ff       	call   c000b4f6 <Directory::~Directory()>
c000b529:	83 c4 10             	add    esp,0x10
c000b52c:	83 ec 08             	sub    esp,0x8
c000b52f:	68 14 01 00 00       	push   0x114
c000b534:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b538:	e8 db f2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b53d:	83 c4 10             	add    esp,0x10
c000b540:	83 c4 0c             	add    esp,0xc
c000b543:	c3                   	ret    

c000b544 <Filesystem::Filesystem()>:
c000b544:	ba c0 15 02 c0       	mov    edx,0xc00215c0
c000b549:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b54d:	89 10                	mov    DWORD PTR [eax],edx
c000b54f:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c000b555:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b559:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b55c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b560:	a3 04 64 02 c0       	mov    ds:0xc0026404,eax
c000b565:	90                   	nop
c000b566:	c3                   	ret    
c000b567:	90                   	nop

c000b568 <Filesystem::~Filesystem()>:
c000b568:	ba c0 15 02 c0       	mov    edx,0xc00215c0
c000b56d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b571:	89 10                	mov    DWORD PTR [eax],edx
c000b573:	90                   	nop
c000b574:	c3                   	ret    
c000b575:	90                   	nop

c000b576 <Filesystem::~Filesystem()>:
c000b576:	83 ec 0c             	sub    esp,0xc
c000b579:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b57d:	e8 e6 ff ff ff       	call   c000b568 <Filesystem::~Filesystem()>
c000b582:	83 c4 04             	add    esp,0x4
c000b585:	83 ec 08             	sub    esp,0x8
c000b588:	6a 08                	push   0x8
c000b58a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b58e:	e8 85 f2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b593:	83 c4 10             	add    esp,0x10
c000b596:	83 c4 0c             	add    esp,0xc
c000b599:	c3                   	ret    

c000b59a <Fs::getcwd(Process*, char*, int)>:
c000b59a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b59e:	31 c0                	xor    eax,eax
c000b5a0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b5a3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b5a7:	7d 15                	jge    c000b5be <Fs::getcwd(Process*, char*, int)+0x24>
c000b5a9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b5ad:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b5b4:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b5b7:	84 c9                	test   cl,cl
c000b5b9:	74 06                	je     c000b5c1 <Fs::getcwd(Process*, char*, int)+0x27>
c000b5bb:	40                   	inc    eax
c000b5bc:	eb e2                	jmp    c000b5a0 <Fs::getcwd(Process*, char*, int)+0x6>
c000b5be:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b5c1:	31 c0                	xor    eax,eax
c000b5c3:	c3                   	ret    

c000b5c4 <Fs::initVFS()>:
c000b5c4:	83 ec 18             	sub    esp,0x18
c000b5c7:	6a 08                	push   0x8
c000b5c9:	e8 e8 c4 ff ff       	call   c0007ab6 <malloc>
c000b5ce:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5d1:	e8 76 e3 00 00       	call   c001994c <FAT::FAT()>
c000b5d6:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b5dd:	e8 d4 c4 ff ff       	call   c0007ab6 <malloc>
c000b5e2:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5e5:	e8 8e f2 00 00       	call   c001a878 <ISO9660::ISO9660()>
c000b5ea:	83 c4 1c             	add    esp,0x1c
c000b5ed:	c3                   	ret    

c000b5ee <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b5ee:	55                   	push   ebp
c000b5ef:	57                   	push   edi
c000b5f0:	56                   	push   esi
c000b5f1:	53                   	push   ebx
c000b5f2:	81 ec 10 04 00 00    	sub    esp,0x410
c000b5f8:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000b5ff:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c000b606:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000b60e:	68 00 04 00 00       	push   0x400
c000b613:	6a 00                	push   0x0
c000b615:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000b619:	57                   	push   edi
c000b61a:	e8 d1 4e ff ff       	call   c00004f0 <memset>
c000b61f:	83 c4 10             	add    esp,0x10
c000b622:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c000b626:	75 0b                	jne    c000b633 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c000b628:	50                   	push   eax
c000b629:	50                   	push   eax
c000b62a:	55                   	push   ebp
c000b62b:	57                   	push   edi
c000b62c:	e8 0f 50 ff ff       	call   c0000640 <strcpy>
c000b631:	eb 51                	jmp    c000b684 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000b633:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000b637:	83 f8 5c             	cmp    eax,0x5c
c000b63a:	74 05                	je     c000b641 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000b63c:	83 f8 2f             	cmp    eax,0x2f
c000b63f:	75 1e                	jne    c000b65f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000b641:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c000b648:	8a 00                	mov    al,BYTE PTR [eax]
c000b64a:	3c 60                	cmp    al,0x60
c000b64c:	7e 03                	jle    c000b651 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000b64e:	83 e8 20             	sub    eax,0x20
c000b651:	88 04 24             	mov    BYTE PTR [esp],al
c000b654:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b65b:	50                   	push   eax
c000b65c:	50                   	push   eax
c000b65d:	eb 1e                	jmp    c000b67d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000b65f:	50                   	push   eax
c000b660:	50                   	push   eax
c000b661:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c000b668:	57                   	push   edi
c000b669:	e8 d2 4f ff ff       	call   c0000640 <strcpy>
c000b66e:	58                   	pop    eax
c000b66f:	5a                   	pop    edx
c000b670:	68 83 25 02 c0       	push   0xc0022583
c000b675:	57                   	push   edi
c000b676:	e8 c5 51 ff ff       	call   c0000840 <strcat>
c000b67b:	59                   	pop    ecx
c000b67c:	58                   	pop    eax
c000b67d:	55                   	push   ebp
c000b67e:	57                   	push   edi
c000b67f:	e8 bc 51 ff ff       	call   c0000840 <strcat>
c000b684:	83 c4 10             	add    esp,0x10
c000b687:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b68a:	3c 60                	cmp    al,0x60
c000b68c:	7e 03                	jle    c000b691 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000b68e:	83 e8 20             	sub    eax,0x20
c000b691:	88 04 24             	mov    BYTE PTR [esp],al
c000b694:	88 06                	mov    BYTE PTR [esi],al
c000b696:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b69d:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c000b6a3:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c000b6a7:	bf 03 00 00 00       	mov    edi,0x3
c000b6ac:	b8 03 00 00 00       	mov    eax,0x3
c000b6b1:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b6b5:	89 e9                	mov    ecx,ebp
c000b6b7:	85 ed                	test   ebp,ebp
c000b6b9:	0f 84 97 00 00 00    	je     c000b756 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000b6bf:	8d 57 01             	lea    edx,[edi+0x1]
c000b6c2:	83 fd 5c             	cmp    ebp,0x5c
c000b6c5:	74 05                	je     c000b6cc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c000b6c7:	83 fd 2f             	cmp    ebp,0x2f
c000b6ca:	75 12                	jne    c000b6de <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6cc:	89 c5                	mov    ebp,eax
c000b6ce:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b6d3:	74 09                	je     c000b6de <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b6d5:	40                   	inc    eax
c000b6d6:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c000b6da:	89 d7                	mov    edi,edx
c000b6dc:	eb d3                	jmp    c000b6b1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b6de:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b6e3:	0f be e9             	movsx  ebp,cl
c000b6e6:	75 5e                	jne    c000b746 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b6e8:	83 fd 2e             	cmp    ebp,0x2e
c000b6eb:	75 59                	jne    c000b746 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b6ed:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000b6f1:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b6f6:	74 18                	je     c000b710 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c000b6f8:	83 fd 2e             	cmp    ebp,0x2e
c000b6fb:	74 53                	je     c000b750 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b6fd:	89 fa                	mov    edx,edi
c000b6ff:	42                   	inc    edx
c000b700:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b704:	83 f9 2f             	cmp    ecx,0x2f
c000b707:	74 f6                	je     c000b6ff <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b709:	83 f9 5c             	cmp    ecx,0x5c
c000b70c:	74 f1                	je     c000b6ff <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b70e:	eb ca                	jmp    c000b6da <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b710:	83 fd 2e             	cmp    ebp,0x2e
c000b713:	74 3b                	je     c000b750 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b715:	83 f8 03             	cmp    eax,0x3
c000b718:	74 c0                	je     c000b6da <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b71a:	42                   	inc    edx
c000b71b:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b71f:	83 f9 5c             	cmp    ecx,0x5c
c000b722:	74 f6                	je     c000b71a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b724:	83 f9 2f             	cmp    ecx,0x2f
c000b727:	74 f1                	je     c000b71a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b729:	48                   	dec    eax
c000b72a:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b72e:	75 06                	jne    c000b736 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b730:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b734:	eb f3                	jmp    c000b729 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c000b736:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b73a:	74 07                	je     c000b743 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000b73c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b740:	48                   	dec    eax
c000b741:	eb f3                	jmp    c000b736 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b743:	40                   	inc    eax
c000b744:	eb 94                	jmp    c000b6da <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b746:	83 fd 5c             	cmp    ebp,0x5c
c000b749:	74 8f                	je     c000b6da <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b74b:	83 fd 2f             	cmp    ebp,0x2f
c000b74e:	74 8a                	je     c000b6da <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b750:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c000b753:	40                   	inc    eax
c000b754:	eb 84                	jmp    c000b6da <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b756:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b75a:	83 ec 0c             	sub    esp,0xc
c000b75d:	56                   	push   esi
c000b75e:	e8 0d 4e ff ff       	call   c0000570 <strlen>
c000b763:	83 c4 10             	add    esp,0x10
c000b766:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000b76b:	74 17                	je     c000b784 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b76d:	83 ec 0c             	sub    esp,0xc
c000b770:	56                   	push   esi
c000b771:	e8 fa 4d ff ff       	call   c0000570 <strlen>
c000b776:	83 c4 10             	add    esp,0x10
c000b779:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b77e:	74 04                	je     c000b784 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b780:	31 ff                	xor    edi,edi
c000b782:	eb 4c                	jmp    c000b7d0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e2>
c000b784:	83 ec 0c             	sub    esp,0xc
c000b787:	56                   	push   esi
c000b788:	e8 e3 4d ff ff       	call   c0000570 <strlen>
c000b78d:	83 c4 10             	add    esp,0x10
c000b790:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c000b795:	74 e9                	je     c000b780 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000b797:	83 ec 0c             	sub    esp,0xc
c000b79a:	56                   	push   esi
c000b79b:	e8 d0 4d ff ff       	call   c0000570 <strlen>
c000b7a0:	83 c4 10             	add    esp,0x10
c000b7a3:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000b7a8:	eb b0                	jmp    c000b75a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000b7aa:	50                   	push   eax
c000b7ab:	50                   	push   eax
c000b7ac:	56                   	push   esi
c000b7ad:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000b7b1:	55                   	push   ebp
c000b7b2:	e8 89 4e ff ff       	call   c0000640 <strcpy>
c000b7b7:	5a                   	pop    edx
c000b7b8:	59                   	pop    ecx
c000b7b9:	56                   	push   esi
c000b7ba:	55                   	push   ebp
c000b7bb:	e8 8b f7 ff ff       	call   c000af4b <KeDereferenceSymlink(char const*, char*)>
c000b7c0:	83 c4 10             	add    esp,0x10
c000b7c3:	48                   	dec    eax
c000b7c4:	75 27                	jne    c000b7ed <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1ff>
c000b7c6:	8d 47 01             	lea    eax,[edi+0x1]
c000b7c9:	83 ff 14             	cmp    edi,0x14
c000b7cc:	74 08                	je     c000b7d6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e8>
c000b7ce:	89 c7                	mov    edi,eax
c000b7d0:	85 db                	test   ebx,ebx
c000b7d2:	75 d6                	jne    c000b7aa <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c000b7d4:	eb 17                	jmp    c000b7ed <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1ff>
c000b7d6:	83 ec 0c             	sub    esp,0xc
c000b7d9:	bf 15 00 00 00       	mov    edi,0x15
c000b7de:	68 8f 15 02 c0       	push   0xc002158f
c000b7e3:	e8 95 5b 00 00       	call   c001137d <KePanic(char const*)>
c000b7e8:	83 c4 10             	add    esp,0x10
c000b7eb:	eb e3                	jmp    c000b7d0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e2>
c000b7ed:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b7f3:	5b                   	pop    ebx
c000b7f4:	5e                   	pop    esi
c000b7f5:	5f                   	pop    edi
c000b7f6:	5d                   	pop    ebp
c000b7f7:	c3                   	ret    

c000b7f8 <File::File(char const*, Process*, bool)>:
c000b7f8:	83 ec 1c             	sub    esp,0x1c
c000b7fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b7ff:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b803:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b807:	83 ec 08             	sub    esp,0x8
c000b80a:	6a 00                	push   0x0
c000b80c:	50                   	push   eax
c000b80d:	e8 ac d9 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000b812:	83 c4 10             	add    esp,0x10
c000b815:	ba 2c 16 02 c0       	mov    edx,0xc002162c
c000b81a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b81e:	89 10                	mov    DWORD PTR [eax],edx
c000b820:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b825:	85 c0                	test   eax,eax
c000b827:	74 0f                	je     c000b838 <File::File(char const*, Process*, bool)+0x40>
c000b829:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000b82e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000b832:	74 04                	je     c000b838 <File::File(char const*, Process*, bool)+0x40>
c000b834:	b0 01                	mov    al,0x1
c000b836:	eb 02                	jmp    c000b83a <File::File(char const*, Process*, bool)+0x42>
c000b838:	b0 00                	mov    al,0x0
c000b83a:	0f b6 c0             	movzx  eax,al
c000b83d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b841:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000b847:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b84b:	83 c2 0d             	add    edx,0xd
c000b84e:	50                   	push   eax
c000b84f:	51                   	push   ecx
c000b850:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b854:	52                   	push   edx
c000b855:	e8 94 fd ff ff       	call   c000b5ee <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000b85a:	83 c4 10             	add    esp,0x10
c000b85d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b861:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b864:	83 e8 41             	sub    eax,0x41
c000b867:	88 c2                	mov    dl,al
c000b869:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b86d:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b873:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b877:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b87b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b87f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b885:	0f b6 c0             	movzx  eax,al
c000b888:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b88f:	85 c0                	test   eax,eax
c000b891:	74 3e                	je     c000b8d1 <File::File(char const*, Process*, bool)+0xd9>
c000b893:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b897:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b89d:	0f b6 c0             	movzx  eax,al
c000b8a0:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b8a7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b8ad:	85 c0                	test   eax,eax
c000b8af:	75 20                	jne    c000b8d1 <File::File(char const*, Process*, bool)+0xd9>
c000b8b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b8b5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b8bb:	0f b6 c0             	movzx  eax,al
c000b8be:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b8c5:	83 ec 0c             	sub    esp,0xc
c000b8c8:	50                   	push   eax
c000b8c9:	e8 a0 21 00 00       	call   c000da6e <LogicalDisk::mount()>
c000b8ce:	83 c4 10             	add    esp,0x10
c000b8d1:	90                   	nop
c000b8d2:	83 c4 1c             	add    esp,0x1c
c000b8d5:	c3                   	ret    

c000b8d6 <File::File(char const*, Process*)>:
c000b8d6:	83 ec 0c             	sub    esp,0xc
c000b8d9:	6a 01                	push   0x1
c000b8db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e7:	e8 0c ff ff ff       	call   c000b7f8 <File::File(char const*, Process*, bool)>
c000b8ec:	83 c4 10             	add    esp,0x10
c000b8ef:	90                   	nop
c000b8f0:	83 c4 0c             	add    esp,0xc
c000b8f3:	c3                   	ret    

c000b8f4 <File::open(FileOpenMode)>:
c000b8f4:	53                   	push   ebx
c000b8f5:	b8 0b 00 00 00       	mov    eax,0xb
c000b8fa:	83 ec 08             	sub    esp,0x8
c000b8fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b901:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b908:	83 fa 19             	cmp    edx,0x19
c000b90b:	77 40                	ja     c000b94d <File::open(FileOpenMode)+0x59>
c000b90d:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b914:	85 d2                	test   edx,edx
c000b916:	74 35                	je     c000b94d <File::open(FileOpenMode)+0x59>
c000b918:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b91e:	85 d2                	test   edx,edx
c000b920:	74 2b                	je     c000b94d <File::open(FileOpenMode)+0x59>
c000b922:	b8 06 00 00 00       	mov    eax,0x6
c000b927:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b92b:	75 20                	jne    c000b94d <File::open(FileOpenMode)+0x59>
c000b92d:	8b 02                	mov    eax,DWORD PTR [edx]
c000b92f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b935:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b939:	51                   	push   ecx
c000b93a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b93d:	51                   	push   ecx
c000b93e:	52                   	push   edx
c000b93f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b942:	83 c4 10             	add    esp,0x10
c000b945:	85 c0                	test   eax,eax
c000b947:	75 04                	jne    c000b94d <File::open(FileOpenMode)+0x59>
c000b949:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b94d:	83 c4 08             	add    esp,0x8
c000b950:	5b                   	pop    ebx
c000b951:	c3                   	ret    

c000b952 <File::close()>:
c000b952:	53                   	push   ebx
c000b953:	b8 0b 00 00 00       	mov    eax,0xb
c000b958:	83 ec 08             	sub    esp,0x8
c000b95b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b95f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b966:	83 f9 19             	cmp    ecx,0x19
c000b969:	77 41                	ja     c000b9ac <File::close()+0x5a>
c000b96b:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000b972:	85 db                	test   ebx,ebx
c000b974:	74 36                	je     c000b9ac <File::close()+0x5a>
c000b976:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b97d:	74 2d                	je     c000b9ac <File::close()+0x5a>
c000b97f:	b8 05 00 00 00       	mov    eax,0x5
c000b984:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b988:	74 22                	je     c000b9ac <File::close()+0x5a>
c000b98a:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b98e:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000b995:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b99b:	53                   	push   ebx
c000b99c:	53                   	push   ebx
c000b99d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b99f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b9a5:	50                   	push   eax
c000b9a6:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b9a9:	83 c4 10             	add    esp,0x10
c000b9ac:	83 c4 08             	add    esp,0x8
c000b9af:	5b                   	pop    ebx
c000b9b0:	c3                   	ret    
c000b9b1:	90                   	nop

c000b9b2 <File::seek(unsigned long long)>:
c000b9b2:	56                   	push   esi
c000b9b3:	53                   	push   ebx
c000b9b4:	b8 0b 00 00 00       	mov    eax,0xb
c000b9b9:	51                   	push   ecx
c000b9ba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9be:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b9c2:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b9c9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b9cd:	83 fa 19             	cmp    edx,0x19
c000b9d0:	77 31                	ja     c000ba03 <File::seek(unsigned long long)+0x51>
c000b9d2:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b9d9:	85 d2                	test   edx,edx
c000b9db:	74 26                	je     c000ba03 <File::seek(unsigned long long)+0x51>
c000b9dd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b9e3:	85 d2                	test   edx,edx
c000b9e5:	74 1c                	je     c000ba03 <File::seek(unsigned long long)+0x51>
c000b9e7:	b8 05 00 00 00       	mov    eax,0x5
c000b9ec:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b9f0:	74 11                	je     c000ba03 <File::seek(unsigned long long)+0x51>
c000b9f2:	8b 02                	mov    eax,DWORD PTR [edx]
c000b9f4:	53                   	push   ebx
c000b9f5:	51                   	push   ecx
c000b9f6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b9fc:	52                   	push   edx
c000b9fd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ba00:	83 c4 10             	add    esp,0x10
c000ba03:	5a                   	pop    edx
c000ba04:	5b                   	pop    ebx
c000ba05:	5e                   	pop    esi
c000ba06:	c3                   	ret    
c000ba07:	90                   	nop

c000ba08 <File::truncate(unsigned long long)>:
c000ba08:	56                   	push   esi
c000ba09:	53                   	push   ebx
c000ba0a:	b8 0b 00 00 00       	mov    eax,0xb
c000ba0f:	51                   	push   ecx
c000ba10:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba14:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ba18:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ba1f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba23:	83 fa 19             	cmp    edx,0x19
c000ba26:	77 31                	ja     c000ba59 <File::truncate(unsigned long long)+0x51>
c000ba28:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba2f:	85 d2                	test   edx,edx
c000ba31:	74 26                	je     c000ba59 <File::truncate(unsigned long long)+0x51>
c000ba33:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba39:	85 d2                	test   edx,edx
c000ba3b:	74 1c                	je     c000ba59 <File::truncate(unsigned long long)+0x51>
c000ba3d:	b8 05 00 00 00       	mov    eax,0x5
c000ba42:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ba46:	74 11                	je     c000ba59 <File::truncate(unsigned long long)+0x51>
c000ba48:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba4a:	53                   	push   ebx
c000ba4b:	51                   	push   ecx
c000ba4c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ba52:	52                   	push   edx
c000ba53:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ba56:	83 c4 10             	add    esp,0x10
c000ba59:	5a                   	pop    edx
c000ba5a:	5b                   	pop    ebx
c000ba5b:	5e                   	pop    esi
c000ba5c:	c3                   	ret    
c000ba5d:	90                   	nop

c000ba5e <File::tell(unsigned long long*)>:
c000ba5e:	83 ec 0c             	sub    esp,0xc
c000ba61:	b8 0b 00 00 00       	mov    eax,0xb
c000ba66:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ba6a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ba71:	83 fa 19             	cmp    edx,0x19
c000ba74:	77 34                	ja     c000baaa <File::tell(unsigned long long*)+0x4c>
c000ba76:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000ba7d:	85 d2                	test   edx,edx
c000ba7f:	74 29                	je     c000baaa <File::tell(unsigned long long*)+0x4c>
c000ba81:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba87:	85 d2                	test   edx,edx
c000ba89:	74 1f                	je     c000baaa <File::tell(unsigned long long*)+0x4c>
c000ba8b:	b8 05 00 00 00       	mov    eax,0x5
c000ba90:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ba94:	74 14                	je     c000baaa <File::tell(unsigned long long*)+0x4c>
c000ba96:	50                   	push   eax
c000ba97:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba9d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000baa3:	52                   	push   edx
c000baa4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000baa7:	83 c4 10             	add    esp,0x10
c000baaa:	83 c4 0c             	add    esp,0xc
c000baad:	c3                   	ret    

c000baae <File::rewind()>:
c000baae:	83 ec 10             	sub    esp,0x10
c000bab1:	6a 00                	push   0x0
c000bab3:	6a 00                	push   0x0
c000bab5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab9:	e8 f4 fe ff ff       	call   c000b9b2 <File::seek(unsigned long long)>
c000babe:	83 c4 1c             	add    esp,0x1c
c000bac1:	c3                   	ret    

c000bac2 <File::unlink()>:
c000bac2:	83 ec 0c             	sub    esp,0xc
c000bac5:	b8 0b 00 00 00       	mov    eax,0xb
c000baca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bace:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bad5:	83 f9 19             	cmp    ecx,0x19
c000bad8:	77 2f                	ja     c000bb09 <File::unlink()+0x47>
c000bada:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bae1:	85 c9                	test   ecx,ecx
c000bae3:	74 24                	je     c000bb09 <File::unlink()+0x47>
c000bae5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000baeb:	85 c9                	test   ecx,ecx
c000baed:	74 1a                	je     c000bb09 <File::unlink()+0x47>
c000baef:	b8 06 00 00 00       	mov    eax,0x6
c000baf4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000baf8:	75 0f                	jne    c000bb09 <File::unlink()+0x47>
c000bafa:	83 c2 0d             	add    edx,0xd
c000bafd:	50                   	push   eax
c000bafe:	50                   	push   eax
c000baff:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb01:	52                   	push   edx
c000bb02:	51                   	push   ecx
c000bb03:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bb06:	83 c4 10             	add    esp,0x10
c000bb09:	83 c4 0c             	add    esp,0xc
c000bb0c:	c3                   	ret    
c000bb0d:	90                   	nop

c000bb0e <File::rename(char const*)>:
c000bb0e:	83 ec 0c             	sub    esp,0xc
c000bb11:	b8 0b 00 00 00       	mov    eax,0xb
c000bb16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb1a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb21:	83 f9 19             	cmp    ecx,0x19
c000bb24:	77 32                	ja     c000bb58 <File::rename(char const*)+0x4a>
c000bb26:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb2d:	85 c9                	test   ecx,ecx
c000bb2f:	74 27                	je     c000bb58 <File::rename(char const*)+0x4a>
c000bb31:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb37:	85 c9                	test   ecx,ecx
c000bb39:	74 1d                	je     c000bb58 <File::rename(char const*)+0x4a>
c000bb3b:	b8 06 00 00 00       	mov    eax,0x6
c000bb40:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb44:	75 12                	jne    c000bb58 <File::rename(char const*)+0x4a>
c000bb46:	83 c2 0d             	add    edx,0xd
c000bb49:	50                   	push   eax
c000bb4a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb50:	52                   	push   edx
c000bb51:	51                   	push   ecx
c000bb52:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bb55:	83 c4 10             	add    esp,0x10
c000bb58:	83 c4 0c             	add    esp,0xc
c000bb5b:	c3                   	ret    

c000bb5c <File::chfatattr(unsigned char, unsigned char)>:
c000bb5c:	57                   	push   edi
c000bb5d:	b8 0b 00 00 00       	mov    eax,0xb
c000bb62:	56                   	push   esi
c000bb63:	53                   	push   ebx
c000bb64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb68:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bb6c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bb77:	83 f9 19             	cmp    ecx,0x19
c000bb7a:	77 37                	ja     c000bbb3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb7c:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb83:	85 c9                	test   ecx,ecx
c000bb85:	74 2c                	je     c000bbb3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb87:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb8d:	85 c9                	test   ecx,ecx
c000bb8f:	74 22                	je     c000bbb3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb91:	b8 06 00 00 00       	mov    eax,0x6
c000bb96:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb9a:	75 17                	jne    c000bbb3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb9c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bb9e:	89 f0                	mov    eax,esi
c000bba0:	83 c2 0d             	add    edx,0xd
c000bba3:	0f b6 f0             	movzx  esi,al
c000bba6:	0f b6 db             	movzx  ebx,bl
c000bba9:	56                   	push   esi
c000bbaa:	53                   	push   ebx
c000bbab:	52                   	push   edx
c000bbac:	51                   	push   ecx
c000bbad:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bbb0:	83 c4 10             	add    esp,0x10
c000bbb3:	5b                   	pop    ebx
c000bbb4:	5e                   	pop    esi
c000bbb5:	5f                   	pop    edi
c000bbb6:	c3                   	ret    
c000bbb7:	90                   	nop

c000bbb8 <File::exists()>:
c000bbb8:	83 ec 0c             	sub    esp,0xc
c000bbbb:	31 c0                	xor    eax,eax
c000bbbd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbc1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbc8:	83 f9 19             	cmp    ecx,0x19
c000bbcb:	77 24                	ja     c000bbf1 <File::exists()+0x39>
c000bbcd:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bbd4:	85 c9                	test   ecx,ecx
c000bbd6:	74 19                	je     c000bbf1 <File::exists()+0x39>
c000bbd8:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bbde:	85 c9                	test   ecx,ecx
c000bbe0:	74 0f                	je     c000bbf1 <File::exists()+0x39>
c000bbe2:	83 c2 0d             	add    edx,0xd
c000bbe5:	50                   	push   eax
c000bbe6:	50                   	push   eax
c000bbe7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbe9:	52                   	push   edx
c000bbea:	51                   	push   ecx
c000bbeb:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	83 c4 0c             	add    esp,0xc
c000bbf4:	c3                   	ret    
c000bbf5:	90                   	nop

c000bbf6 <File::stat(unsigned long long*, bool*)>:
c000bbf6:	56                   	push   esi
c000bbf7:	53                   	push   ebx
c000bbf8:	50                   	push   eax
c000bbf9:	b8 0b 00 00 00       	mov    eax,0xb
c000bbfe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bc02:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bc06:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bc0d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc11:	83 f9 19             	cmp    ecx,0x19
c000bc14:	77 3d                	ja     c000bc53 <File::stat(unsigned long long*, bool*)+0x5d>
c000bc16:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bc1d:	85 c9                	test   ecx,ecx
c000bc1f:	74 32                	je     c000bc53 <File::stat(unsigned long long*, bool*)+0x5d>
c000bc21:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bc27:	85 c9                	test   ecx,ecx
c000bc29:	74 28                	je     c000bc53 <File::stat(unsigned long long*, bool*)+0x5d>
c000bc2b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bc2d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc31:	74 13                	je     c000bc46 <File::stat(unsigned long long*, bool*)+0x50>
c000bc33:	83 ec 04             	sub    esp,0x4
c000bc36:	56                   	push   esi
c000bc37:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc3d:	51                   	push   ecx
c000bc3e:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bc41:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bc44:	eb 0a                	jmp    c000bc50 <File::stat(unsigned long long*, bool*)+0x5a>
c000bc46:	53                   	push   ebx
c000bc47:	83 c2 0d             	add    edx,0xd
c000bc4a:	56                   	push   esi
c000bc4b:	52                   	push   edx
c000bc4c:	51                   	push   ecx
c000bc4d:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bc50:	83 c4 10             	add    esp,0x10
c000bc53:	5a                   	pop    edx
c000bc54:	5b                   	pop    ebx
c000bc55:	5e                   	pop    esi
c000bc56:	c3                   	ret    

c000bc57 <Fs::setcwd(Process*, char*)>:
c000bc57:	55                   	push   ebp
c000bc58:	57                   	push   edi
c000bc59:	56                   	push   esi
c000bc5a:	53                   	push   ebx
c000bc5b:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bc61:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000bc68:	6a 00                	push   0x0
c000bc6a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bc70:	57                   	push   edi
c000bc71:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bc78:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bc7c:	56                   	push   esi
c000bc7d:	e8 6c f9 ff ff       	call   c000b5ee <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bc82:	89 34 24             	mov    DWORD PTR [esp],esi
c000bc85:	e8 e6 48 ff ff       	call   c0000570 <strlen>
c000bc8a:	83 c4 10             	add    esp,0x10
c000bc8d:	83 f8 02             	cmp    eax,0x2
c000bc90:	77 15                	ja     c000bca7 <Fs::setcwd(Process*, char*)+0x50>
c000bc92:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bc97:	83 eb 41             	sub    ebx,0x41
c000bc9a:	8b 04 9d 80 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7780]
c000bca1:	85 c0                	test   eax,eax
c000bca3:	75 1c                	jne    c000bcc1 <Fs::setcwd(Process*, char*)+0x6a>
c000bca5:	eb 2f                	jmp    c000bcd6 <Fs::setcwd(Process*, char*)+0x7f>
c000bca7:	83 ec 0c             	sub    esp,0xc
c000bcaa:	56                   	push   esi
c000bcab:	e8 c0 48 ff ff       	call   c0000570 <strlen>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	83 f8 03             	cmp    eax,0x3
c000bcb6:	75 57                	jne    c000bd0f <Fs::setcwd(Process*, char*)+0xb8>
c000bcb8:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bcbd:	75 50                	jne    c000bd0f <Fs::setcwd(Process*, char*)+0xb8>
c000bcbf:	eb d1                	jmp    c000bc92 <Fs::setcwd(Process*, char*)+0x3b>
c000bcc1:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bcc8:	75 0c                	jne    c000bcd6 <Fs::setcwd(Process*, char*)+0x7f>
c000bcca:	83 ec 0c             	sub    esp,0xc
c000bccd:	50                   	push   eax
c000bcce:	e8 9b 1d 00 00       	call   c000da6e <LogicalDisk::mount()>
c000bcd3:	83 c4 10             	add    esp,0x10
c000bcd6:	b8 03 00 00 00       	mov    eax,0x3
c000bcdb:	83 fb 19             	cmp    ebx,0x19
c000bcde:	0f 87 c6 00 00 00    	ja     c000bdaa <Fs::setcwd(Process*, char*)+0x153>
c000bce4:	8b 14 9d 80 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7780]
c000bceb:	b8 05 00 00 00       	mov    eax,0x5
c000bcf0:	85 d2                	test   edx,edx
c000bcf2:	0f 84 b2 00 00 00    	je     c000bdaa <Fs::setcwd(Process*, char*)+0x153>
c000bcf8:	b8 06 00 00 00       	mov    eax,0x6
c000bcfd:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bd04:	0f 85 92 00 00 00    	jne    c000bd9c <Fs::setcwd(Process*, char*)+0x145>
c000bd0a:	e9 9b 00 00 00       	jmp    c000bdaa <Fs::setcwd(Process*, char*)+0x153>
c000bd0f:	83 ec 0c             	sub    esp,0xc
c000bd12:	68 14 01 00 00       	push   0x114
c000bd17:	e8 9a bd ff ff       	call   c0007ab6 <malloc>
c000bd1c:	83 c4 0c             	add    esp,0xc
c000bd1f:	89 c3                	mov    ebx,eax
c000bd21:	55                   	push   ebp
c000bd22:	56                   	push   esi
c000bd23:	50                   	push   eax
c000bd24:	e8 ad fb ff ff       	call   c000b8d6 <File::File(char const*, Process*)>
c000bd29:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bd2e:	83 c4 0c             	add    esp,0xc
c000bd31:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bd35:	50                   	push   eax
c000bd36:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bd3a:	50                   	push   eax
c000bd3b:	53                   	push   ebx
c000bd3c:	e8 b5 fe ff ff       	call   c000bbf6 <File::stat(unsigned long long*, bool*)>
c000bd41:	83 c4 10             	add    esp,0x10
c000bd44:	83 f8 02             	cmp    eax,0x2
c000bd47:	74 27                	je     c000bd70 <Fs::setcwd(Process*, char*)+0x119>
c000bd49:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bd4e:	75 1c                	jne    c000bd6c <Fs::setcwd(Process*, char*)+0x115>
c000bd50:	b8 02 00 00 00       	mov    eax,0x2
c000bd55:	85 db                	test   ebx,ebx
c000bd57:	74 51                	je     c000bdaa <Fs::setcwd(Process*, char*)+0x153>
c000bd59:	83 ec 0c             	sub    esp,0xc
c000bd5c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd5e:	53                   	push   ebx
c000bd5f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd62:	83 c4 10             	add    esp,0x10
c000bd65:	b8 02 00 00 00       	mov    eax,0x2
c000bd6a:	eb 3e                	jmp    c000bdaa <Fs::setcwd(Process*, char*)+0x153>
c000bd6c:	85 c0                	test   eax,eax
c000bd6e:	74 1c                	je     c000bd8c <Fs::setcwd(Process*, char*)+0x135>
c000bd70:	b8 01 00 00 00       	mov    eax,0x1
c000bd75:	85 db                	test   ebx,ebx
c000bd77:	74 31                	je     c000bdaa <Fs::setcwd(Process*, char*)+0x153>
c000bd79:	83 ec 0c             	sub    esp,0xc
c000bd7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd7e:	53                   	push   ebx
c000bd7f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd82:	83 c4 10             	add    esp,0x10
c000bd85:	b8 01 00 00 00       	mov    eax,0x1
c000bd8a:	eb 1e                	jmp    c000bdaa <Fs::setcwd(Process*, char*)+0x153>
c000bd8c:	85 db                	test   ebx,ebx
c000bd8e:	74 0c                	je     c000bd9c <Fs::setcwd(Process*, char*)+0x145>
c000bd90:	83 ec 0c             	sub    esp,0xc
c000bd93:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd95:	53                   	push   ebx
c000bd96:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd99:	83 c4 10             	add    esp,0x10
c000bd9c:	50                   	push   eax
c000bd9d:	50                   	push   eax
c000bd9e:	56                   	push   esi
c000bd9f:	57                   	push   edi
c000bda0:	e8 9b 48 ff ff       	call   c0000640 <strcpy>
c000bda5:	83 c4 10             	add    esp,0x10
c000bda8:	31 c0                	xor    eax,eax
c000bdaa:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bdb0:	5b                   	pop    ebx
c000bdb1:	5e                   	pop    esi
c000bdb2:	5f                   	pop    edi
c000bdb3:	5d                   	pop    ebp
c000bdb4:	c3                   	ret    
c000bdb5:	90                   	nop

c000bdb6 <Directory::Directory(char const*, Process*)>:
c000bdb6:	83 ec 0c             	sub    esp,0xc
c000bdb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdbd:	83 ec 08             	sub    esp,0x8
c000bdc0:	6a 00                	push   0x0
c000bdc2:	50                   	push   eax
c000bdc3:	e8 f6 d3 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000bdc8:	83 c4 10             	add    esp,0x10
c000bdcb:	ba 48 16 02 c0       	mov    edx,0xc0021648
c000bdd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdd4:	89 10                	mov    DWORD PTR [eax],edx
c000bdd6:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000bddb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bddf:	0f 95 c0             	setne  al
c000bde2:	0f b6 c0             	movzx  eax,al
c000bde5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bde9:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bdef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdf3:	83 c2 0d             	add    edx,0xd
c000bdf6:	50                   	push   eax
c000bdf7:	51                   	push   ecx
c000bdf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdfc:	52                   	push   edx
c000bdfd:	e8 ec f7 ff ff       	call   c000b5ee <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000be02:	83 c4 10             	add    esp,0x10
c000be05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be09:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000be0c:	83 e8 41             	sub    eax,0x41
c000be0f:	88 c2                	mov    dl,al
c000be11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be15:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000be1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be1f:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000be23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be27:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be2d:	0f b6 c0             	movzx  eax,al
c000be30:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be37:	85 c0                	test   eax,eax
c000be39:	74 3e                	je     c000be79 <Directory::Directory(char const*, Process*)+0xc3>
c000be3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be3f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be45:	0f b6 c0             	movzx  eax,al
c000be48:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be4f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000be55:	85 c0                	test   eax,eax
c000be57:	75 20                	jne    c000be79 <Directory::Directory(char const*, Process*)+0xc3>
c000be59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be5d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000be63:	0f b6 c0             	movzx  eax,al
c000be66:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000be6d:	83 ec 0c             	sub    esp,0xc
c000be70:	50                   	push   eax
c000be71:	e8 f8 1b 00 00       	call   c000da6e <LogicalDisk::mount()>
c000be76:	83 c4 10             	add    esp,0x10
c000be79:	90                   	nop
c000be7a:	83 c4 0c             	add    esp,0xc
c000be7d:	c3                   	ret    

c000be7e <Directory::open()>:
c000be7e:	53                   	push   ebx
c000be7f:	b8 0b 00 00 00       	mov    eax,0xb
c000be84:	83 ec 08             	sub    esp,0x8
c000be87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be8b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000be92:	83 fa 19             	cmp    edx,0x19
c000be95:	77 3d                	ja     c000bed4 <Directory::open()+0x56>
c000be97:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000be9e:	85 d2                	test   edx,edx
c000bea0:	74 32                	je     c000bed4 <Directory::open()+0x56>
c000bea2:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bea8:	85 d2                	test   edx,edx
c000beaa:	74 28                	je     c000bed4 <Directory::open()+0x56>
c000beac:	b8 06 00 00 00       	mov    eax,0x6
c000beb1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000beb5:	75 1d                	jne    c000bed4 <Directory::open()+0x56>
c000beb7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bebd:	50                   	push   eax
c000bebe:	8b 02                	mov    eax,DWORD PTR [edx]
c000bec0:	51                   	push   ecx
c000bec1:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bec4:	51                   	push   ecx
c000bec5:	52                   	push   edx
c000bec6:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000bec9:	83 c4 10             	add    esp,0x10
c000becc:	85 c0                	test   eax,eax
c000bece:	75 04                	jne    c000bed4 <Directory::open()+0x56>
c000bed0:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bed4:	83 c4 08             	add    esp,0x8
c000bed7:	5b                   	pop    ebx
c000bed8:	c3                   	ret    
c000bed9:	90                   	nop

c000beda <Directory::close()>:
c000beda:	53                   	push   ebx
c000bedb:	b8 0b 00 00 00       	mov    eax,0xb
c000bee0:	83 ec 08             	sub    esp,0x8
c000bee3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bee7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000beee:	83 f9 19             	cmp    ecx,0x19
c000bef1:	77 41                	ja     c000bf34 <Directory::close()+0x5a>
c000bef3:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000befa:	85 db                	test   ebx,ebx
c000befc:	74 36                	je     c000bf34 <Directory::close()+0x5a>
c000befe:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bf05:	74 2d                	je     c000bf34 <Directory::close()+0x5a>
c000bf07:	b8 05 00 00 00       	mov    eax,0x5
c000bf0c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf10:	74 22                	je     c000bf34 <Directory::close()+0x5a>
c000bf12:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bf16:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000bf1d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bf23:	53                   	push   ebx
c000bf24:	53                   	push   ebx
c000bf25:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bf27:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bf2d:	50                   	push   eax
c000bf2e:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000bf31:	83 c4 10             	add    esp,0x10
c000bf34:	83 c4 08             	add    esp,0x8
c000bf37:	5b                   	pop    ebx
c000bf38:	c3                   	ret    
c000bf39:	90                   	nop

c000bf3a <Directory::unlink()>:
c000bf3a:	83 ec 0c             	sub    esp,0xc
c000bf3d:	b8 0b 00 00 00       	mov    eax,0xb
c000bf42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf46:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf4d:	83 f9 19             	cmp    ecx,0x19
c000bf50:	77 2f                	ja     c000bf81 <Directory::unlink()+0x47>
c000bf52:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf59:	85 c9                	test   ecx,ecx
c000bf5b:	74 24                	je     c000bf81 <Directory::unlink()+0x47>
c000bf5d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf63:	85 c9                	test   ecx,ecx
c000bf65:	74 1a                	je     c000bf81 <Directory::unlink()+0x47>
c000bf67:	b8 06 00 00 00       	mov    eax,0x6
c000bf6c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf70:	75 0f                	jne    c000bf81 <Directory::unlink()+0x47>
c000bf72:	83 c2 0d             	add    edx,0xd
c000bf75:	50                   	push   eax
c000bf76:	50                   	push   eax
c000bf77:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf79:	52                   	push   edx
c000bf7a:	51                   	push   ecx
c000bf7b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bf7e:	83 c4 10             	add    esp,0x10
c000bf81:	83 c4 0c             	add    esp,0xc
c000bf84:	c3                   	ret    
c000bf85:	90                   	nop

c000bf86 <Directory::rename(char const*)>:
c000bf86:	83 ec 0c             	sub    esp,0xc
c000bf89:	b8 0b 00 00 00       	mov    eax,0xb
c000bf8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf92:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf99:	83 f9 19             	cmp    ecx,0x19
c000bf9c:	77 32                	ja     c000bfd0 <Directory::rename(char const*)+0x4a>
c000bf9e:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bfa5:	85 c9                	test   ecx,ecx
c000bfa7:	74 27                	je     c000bfd0 <Directory::rename(char const*)+0x4a>
c000bfa9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bfaf:	85 c9                	test   ecx,ecx
c000bfb1:	74 1d                	je     c000bfd0 <Directory::rename(char const*)+0x4a>
c000bfb3:	b8 06 00 00 00       	mov    eax,0x6
c000bfb8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bfbc:	75 12                	jne    c000bfd0 <Directory::rename(char const*)+0x4a>
c000bfbe:	83 c2 0d             	add    edx,0xd
c000bfc1:	50                   	push   eax
c000bfc2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bfc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfc8:	52                   	push   edx
c000bfc9:	51                   	push   ecx
c000bfca:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bfcd:	83 c4 10             	add    esp,0x10
c000bfd0:	83 c4 0c             	add    esp,0xc
c000bfd3:	c3                   	ret    

c000bfd4 <Directory::exists()>:
c000bfd4:	83 ec 0c             	sub    esp,0xc
c000bfd7:	31 c0                	xor    eax,eax
c000bfd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfdd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bfe4:	83 f9 19             	cmp    ecx,0x19
c000bfe7:	77 24                	ja     c000c00d <Directory::exists()+0x39>
c000bfe9:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bff0:	85 c9                	test   ecx,ecx
c000bff2:	74 19                	je     c000c00d <Directory::exists()+0x39>
c000bff4:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bffa:	85 c9                	test   ecx,ecx
c000bffc:	74 0f                	je     c000c00d <Directory::exists()+0x39>
c000bffe:	83 c2 0d             	add    edx,0xd
c000c001:	50                   	push   eax
c000c002:	50                   	push   eax
c000c003:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c005:	52                   	push   edx
c000c006:	51                   	push   ecx
c000c007:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c00a:	83 c4 10             	add    esp,0x10
c000c00d:	83 c4 0c             	add    esp,0xc
c000c010:	c3                   	ret    
c000c011:	90                   	nop

c000c012 <Directory::read(dirent*)>:
c000c012:	83 ec 1c             	sub    esp,0x1c
c000c015:	b8 0b 00 00 00       	mov    eax,0xb
c000c01a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c01e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c025:	83 f9 19             	cmp    ecx,0x19
c000c028:	77 30                	ja     c000c05a <Directory::read(dirent*)+0x48>
c000c02a:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c031:	85 c9                	test   ecx,ecx
c000c033:	74 25                	je     c000c05a <Directory::read(dirent*)+0x48>
c000c035:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c03c:	74 1c                	je     c000c05a <Directory::read(dirent*)+0x48>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	8b 02                	mov    eax,DWORD PTR [edx]
c000c043:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c047:	51                   	push   ecx
c000c048:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c04c:	6a 00                	push   0x0
c000c04e:	68 10 01 00 00       	push   0x110
c000c053:	52                   	push   edx
c000c054:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c057:	83 c4 20             	add    esp,0x20
c000c05a:	83 c4 1c             	add    esp,0x1c
c000c05d:	c3                   	ret    

c000c05e <Directory::create()>:
c000c05e:	83 ec 0c             	sub    esp,0xc
c000c061:	b8 0b 00 00 00       	mov    eax,0xb
c000c066:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c06a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c071:	83 f9 19             	cmp    ecx,0x19
c000c074:	77 2f                	ja     c000c0a5 <Directory::create()+0x47>
c000c076:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000c07d:	85 c9                	test   ecx,ecx
c000c07f:	74 24                	je     c000c0a5 <Directory::create()+0x47>
c000c081:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c087:	85 c9                	test   ecx,ecx
c000c089:	74 1a                	je     c000c0a5 <Directory::create()+0x47>
c000c08b:	b8 06 00 00 00       	mov    eax,0x6
c000c090:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c094:	75 0f                	jne    c000c0a5 <Directory::create()+0x47>
c000c096:	83 c2 0d             	add    edx,0xd
c000c099:	50                   	push   eax
c000c09a:	50                   	push   eax
c000c09b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c09d:	52                   	push   edx
c000c09e:	51                   	push   ecx
c000c09f:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c0a2:	83 c4 10             	add    esp,0x10
c000c0a5:	83 c4 0c             	add    esp,0xc
c000c0a8:	c3                   	ret    
c000c0a9:	90                   	nop

c000c0aa <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c0aa:	b8 0a 00 00 00       	mov    eax,0xa
c000c0af:	c3                   	ret    

c000c0b0 <Bus::Bus(char const*)>:
c000c0b0:	83 ec 0c             	sub    esp,0xc
c000c0b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0b7:	83 ec 08             	sub    esp,0x8
c000c0ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0be:	50                   	push   eax
c000c0bf:	e8 22 08 00 00       	call   c000c8e6 <Device::Device(char const*)>
c000c0c4:	83 c4 10             	add    esp,0x10
c000c0c7:	ba 64 16 02 c0       	mov    edx,0xc0021664
c000c0cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d0:	89 10                	mov    DWORD PTR [eax],edx
c000c0d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c0e0:	90                   	nop
c000c0e1:	83 c4 0c             	add    esp,0xc
c000c0e4:	c3                   	ret    
c000c0e5:	90                   	nop
c000c0e6:	66 90                	xchg   ax,ax

c000c0e8 <Bus::~Bus()>:
c000c0e8:	83 ec 0c             	sub    esp,0xc
c000c0eb:	ba 64 16 02 c0       	mov    edx,0xc0021664
c000c0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f4:	89 10                	mov    DWORD PTR [eax],edx
c000c0f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0fa:	83 ec 0c             	sub    esp,0xc
c000c0fd:	50                   	push   eax
c000c0fe:	e8 4d 05 00 00       	call   c000c650 <Device::~Device()>
c000c103:	83 c4 10             	add    esp,0x10
c000c106:	90                   	nop
c000c107:	83 c4 0c             	add    esp,0xc
c000c10a:	c3                   	ret    
c000c10b:	90                   	nop

c000c10c <Bus::~Bus()>:
c000c10c:	83 ec 0c             	sub    esp,0xc
c000c10f:	83 ec 0c             	sub    esp,0xc
c000c112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c116:	e8 cd ff ff ff       	call   c000c0e8 <Bus::~Bus()>
c000c11b:	83 c4 10             	add    esp,0x10
c000c11e:	83 ec 08             	sub    esp,0x8
c000c121:	68 58 01 00 00       	push   0x158
c000c126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c12a:	e8 e9 e6 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c12f:	83 c4 10             	add    esp,0x10
c000c132:	83 c4 0c             	add    esp,0xc
c000c135:	c3                   	ret    

c000c136 <beepThread(void*)>:
c000c136:	83 ec 0c             	sub    esp,0xc
c000c139:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000c13e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c142:	48                   	dec    eax
c000c143:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000c148:	75 01                	jne    c000c14b <beepThread(void*)+0x15>
c000c14a:	fb                   	sti    
c000c14b:	83 ec 0c             	sub    esp,0xc
c000c14e:	6b c2 0a             	imul   eax,edx,0xa
c000c151:	50                   	push   eax
c000c152:	e8 b9 9f 00 00       	call   c0016110 <milliTenthSleep(unsigned int)>
c000c157:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c15e:	e8 08 bf 00 00       	call   c001806b <HalMakeBeep(int)>
c000c163:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c16b:	83 c4 1c             	add    esp,0x1c
c000c16e:	e9 81 9e 00 00       	jmp    c0015ff4 <blockTask(TaskState)>

c000c173 <Krnl::beep(int, int, bool)>:
c000c173:	56                   	push   esi
c000c174:	53                   	push   ebx
c000c175:	83 ec 10             	sub    esp,0x10
c000c178:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c17c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c184:	e8 e2 be 00 00       	call   c001806b <HalMakeBeep(int)>
c000c189:	83 c4 10             	add    esp,0x10
c000c18c:	89 f0                	mov    eax,esi
c000c18e:	84 c0                	test   al,al
c000c190:	74 1e                	je     c000c1b0 <Krnl::beep(int, int, bool)+0x3d>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	6b db 0a             	imul   ebx,ebx,0xa
c000c198:	53                   	push   ebx
c000c199:	e8 72 9f 00 00       	call   c0016110 <milliTenthSleep(unsigned int)>
c000c19e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c1a6:	83 c4 14             	add    esp,0x14
c000c1a9:	5b                   	pop    ebx
c000c1aa:	5e                   	pop    esi
c000c1ab:	e9 bb be 00 00       	jmp    c001806b <HalMakeBeep(int)>
c000c1b0:	68 e6 00 00 00       	push   0xe6
c000c1b5:	53                   	push   ebx
c000c1b6:	68 36 c1 00 c0       	push   0xc000c136
c000c1bb:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c1c1:	e8 ca 99 00 00       	call   c0015b90 <Process::createThread(void (*)(void*), void*, int)>
c000c1c6:	83 c4 14             	add    esp,0x14
c000c1c9:	5b                   	pop    ebx
c000c1ca:	5e                   	pop    esi
c000c1cb:	c3                   	ret    

c000c1cc <User::loadClockSettings(int)>:
c000c1cc:	53                   	push   ebx
c000c1cd:	83 ec 14             	sub    esp,0x14
c000c1d0:	68 14 01 00 00       	push   0x114
c000c1d5:	e8 dc b8 ff ff       	call   c0007ab6 <malloc>
c000c1da:	83 c4 0c             	add    esp,0xc
c000c1dd:	89 c3                	mov    ebx,eax
c000c1df:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c1e5:	68 88 16 02 c0       	push   0xc0021688
c000c1ea:	50                   	push   eax
c000c1eb:	e8 e6 f6 ff ff       	call   c000b8d6 <File::File(char const*, Process*)>
c000c1f0:	58                   	pop    eax
c000c1f1:	5a                   	pop    edx
c000c1f2:	6a 01                	push   0x1
c000c1f4:	53                   	push   ebx
c000c1f5:	e8 fa f6 ff ff       	call   c000b8f4 <File::open(FileOpenMode)>
c000c1fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c1fd:	e8 50 f7 ff ff       	call   c000b952 <File::close()>
c000c202:	83 c4 10             	add    esp,0x10
c000c205:	85 db                	test   ebx,ebx
c000c207:	74 0f                	je     c000c218 <User::loadClockSettings(int)+0x4c>
c000c209:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c20b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c20f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c212:	83 c4 08             	add    esp,0x8
c000c215:	5b                   	pop    ebx
c000c216:	ff e0                	jmp    eax
c000c218:	83 c4 08             	add    esp,0x8
c000c21b:	5b                   	pop    ebx
c000c21c:	c3                   	ret    
c000c21d:	90                   	nop

c000c21e <Clock::Clock(char const*)>:
c000c21e:	83 ec 0c             	sub    esp,0xc
c000c221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c225:	83 ec 08             	sub    esp,0x8
c000c228:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22c:	50                   	push   eax
c000c22d:	e8 b4 06 00 00       	call   c000c8e6 <Device::Device(char const*)>
c000c232:	83 c4 10             	add    esp,0x10
c000c235:	ba b0 16 02 c0       	mov    edx,0xc00216b0
c000c23a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23e:	89 10                	mov    DWORD PTR [eax],edx
c000c240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c244:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c24e:	90                   	nop
c000c24f:	83 c4 0c             	add    esp,0xc
c000c252:	c3                   	ret    
c000c253:	90                   	nop

c000c254 <Clock::~Clock()>:
c000c254:	83 ec 0c             	sub    esp,0xc
c000c257:	ba b0 16 02 c0       	mov    edx,0xc00216b0
c000c25c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c260:	89 10                	mov    DWORD PTR [eax],edx
c000c262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c266:	83 ec 0c             	sub    esp,0xc
c000c269:	50                   	push   eax
c000c26a:	e8 e1 03 00 00       	call   c000c650 <Device::~Device()>
c000c26f:	83 c4 10             	add    esp,0x10
c000c272:	90                   	nop
c000c273:	83 c4 0c             	add    esp,0xc
c000c276:	c3                   	ret    
c000c277:	90                   	nop

c000c278 <Clock::~Clock()>:
c000c278:	83 ec 0c             	sub    esp,0xc
c000c27b:	83 ec 0c             	sub    esp,0xc
c000c27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c282:	e8 cd ff ff ff       	call   c000c254 <Clock::~Clock()>
c000c287:	83 c4 10             	add    esp,0x10
c000c28a:	83 ec 08             	sub    esp,0x8
c000c28d:	68 58 01 00 00       	push   0x158
c000c292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c296:	e8 7d e5 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c29b:	83 c4 10             	add    esp,0x10
c000c29e:	83 c4 0c             	add    esp,0xc
c000c2a1:	c3                   	ret    

c000c2a2 <Clock::timeInSecondsLocal()>:
c000c2a2:	53                   	push   ebx
c000c2a3:	83 ec 14             	sub    esp,0x14
c000c2a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c2aa:	8b 10                	mov    edx,DWORD PTR [eax]
c000c2ac:	50                   	push   eax
c000c2ad:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c2b0:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c2b7:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c2bd:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c2c3:	89 cb                	mov    ebx,ecx
c000c2c5:	c1 fb 1f             	sar    ebx,0x1f
c000c2c8:	01 c8                	add    eax,ecx
c000c2ca:	11 da                	adc    edx,ebx
c000c2cc:	83 c4 10             	add    esp,0x10
c000c2cf:	31 c9                	xor    ecx,ecx
c000c2d1:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c2d8:	74 05                	je     c000c2df <Clock::timeInSecondsLocal()+0x3d>
c000c2da:	b9 08 07 00 00       	mov    ecx,0x708
c000c2df:	31 db                	xor    ebx,ebx
c000c2e1:	01 c8                	add    eax,ecx
c000c2e3:	11 da                	adc    edx,ebx
c000c2e5:	83 c4 08             	add    esp,0x8
c000c2e8:	5b                   	pop    ebx
c000c2e9:	c3                   	ret    

c000c2ea <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c2ea:	57                   	push   edi
c000c2eb:	56                   	push   esi
c000c2ec:	53                   	push   ebx
c000c2ed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c2f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c2f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c2f7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c2fb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c2fe:	0f b6 05 08 64 02 c0 	movzx  eax,BYTE PTR ds:0xc0026408
c000c305:	03 05 0c 64 02 c0    	add    eax,DWORD PTR ds:0xc002640c
c000c30b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c311:	99                   	cdq    
c000c312:	29 c6                	sub    esi,eax
c000c314:	19 d7                	sbb    edi,edx
c000c316:	89 f0                	mov    eax,esi
c000c318:	89 fa                	mov    edx,edi
c000c31a:	31 f6                	xor    esi,esi
c000c31c:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c323:	74 05                	je     c000c32a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c325:	be 08 07 00 00       	mov    esi,0x708
c000c32a:	31 ff                	xor    edi,edi
c000c32c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c330:	29 f0                	sub    eax,esi
c000c332:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c336:	19 fa                	sbb    edx,edi
c000c338:	89 d8                	mov    eax,ebx
c000c33a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c33e:	5b                   	pop    ebx
c000c33f:	5e                   	pop    esi
c000c340:	5f                   	pop    edi
c000c341:	ff e0                	jmp    eax

c000c343 <datetimeToSeconds(datetime_t)>:
c000c343:	55                   	push   ebp
c000c344:	57                   	push   edi
c000c345:	56                   	push   esi
c000c346:	53                   	push   ebx
c000c347:	83 ec 0c             	sub    esp,0xc
c000c34a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c34e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c352:	89 d6                	mov    esi,edx
c000c354:	0f b6 c7             	movzx  eax,bh
c000c357:	c1 ee 10             	shr    esi,0x10
c000c35a:	6b e8 3c             	imul   ebp,eax,0x3c
c000c35d:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c363:	0f b6 ce             	movzx  ecx,dh
c000c366:	89 df                	mov    edi,ebx
c000c368:	49                   	dec    ecx
c000c369:	c1 ef 10             	shr    edi,0x10
c000c36c:	0f b6 db             	movzx  ebx,bl
c000c36f:	89 f8                	mov    eax,edi
c000c371:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c377:	0f b6 f8             	movzx  edi,al
c000c37a:	0f b6 d2             	movzx  edx,dl
c000c37d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c381:	01 d8                	add    eax,ebx
c000c383:	0f b7 de             	movzx  ebx,si
c000c386:	89 04 24             	mov    DWORD PTR [esp],eax
c000c389:	c1 f8 1f             	sar    eax,0x1f
c000c38c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c390:	0f b6 c1             	movzx  eax,cl
c000c393:	8b 0c 85 00 17 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde900]
c000c39a:	83 f8 01             	cmp    eax,0x1
c000c39d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c3a1:	76 27                	jbe    c000c3ca <datetimeToSeconds(datetime_t)+0x87>
c000c3a3:	83 e6 03             	and    esi,0x3
c000c3a6:	75 22                	jne    c000c3ca <datetimeToSeconds(datetime_t)+0x87>
c000c3a8:	31 d2                	xor    edx,edx
c000c3aa:	be 64 00 00 00       	mov    esi,0x64
c000c3af:	89 d8                	mov    eax,ebx
c000c3b1:	f7 f6                	div    esi
c000c3b3:	85 d2                	test   edx,edx
c000c3b5:	75 12                	jne    c000c3c9 <datetimeToSeconds(datetime_t)+0x86>
c000c3b7:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c3bd:	be 90 01 00 00       	mov    esi,0x190
c000c3c2:	99                   	cdq    
c000c3c3:	f7 fe                	idiv   esi
c000c3c5:	85 d2                	test   edx,edx
c000c3c7:	75 01                	jne    c000c3ca <datetimeToSeconds(datetime_t)+0x87>
c000c3c9:	41                   	inc    ecx
c000c3ca:	83 fb 46             	cmp    ebx,0x46
c000c3cd:	76 48                	jbe    c000c417 <datetimeToSeconds(datetime_t)+0xd4>
c000c3cf:	be 46 00 00 00       	mov    esi,0x46
c000c3d4:	bf 64 00 00 00       	mov    edi,0x64
c000c3d9:	bd 90 01 00 00       	mov    ebp,0x190
c000c3de:	b8 6d 01 00 00       	mov    eax,0x16d
c000c3e3:	f7 c6 03 00 00 00    	test   esi,0x3
c000c3e9:	75 23                	jne    c000c40e <datetimeToSeconds(datetime_t)+0xcb>
c000c3eb:	89 f0                	mov    eax,esi
c000c3ed:	99                   	cdq    
c000c3ee:	f7 ff                	idiv   edi
c000c3f0:	b8 6e 01 00 00       	mov    eax,0x16e
c000c3f5:	85 d2                	test   edx,edx
c000c3f7:	75 15                	jne    c000c40e <datetimeToSeconds(datetime_t)+0xcb>
c000c3f9:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c3ff:	99                   	cdq    
c000c400:	f7 fd                	idiv   ebp
c000c402:	83 fa 01             	cmp    edx,0x1
c000c405:	19 c0                	sbb    eax,eax
c000c407:	f7 d0                	not    eax
c000c409:	05 6e 01 00 00       	add    eax,0x16e
c000c40e:	01 c1                	add    ecx,eax
c000c410:	46                   	inc    esi
c000c411:	39 de                	cmp    esi,ebx
c000c413:	7c c9                	jl     c000c3de <datetimeToSeconds(datetime_t)+0x9b>
c000c415:	eb 34                	jmp    c000c44b <datetimeToSeconds(datetime_t)+0x108>
c000c417:	74 32                	je     c000c44b <datetimeToSeconds(datetime_t)+0x108>
c000c419:	b8 45 00 00 00       	mov    eax,0x45
c000c41e:	89 c2                	mov    edx,eax
c000c420:	83 e2 03             	and    edx,0x3
c000c423:	39 d8                	cmp    eax,ebx
c000c425:	7e 0f                	jle    c000c436 <datetimeToSeconds(datetime_t)+0xf3>
c000c427:	83 fa 01             	cmp    edx,0x1
c000c42a:	19 d2                	sbb    edx,edx
c000c42c:	48                   	dec    eax
c000c42d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c434:	eb e8                	jmp    c000c41e <datetimeToSeconds(datetime_t)+0xdb>
c000c436:	b8 6d 01 00 00       	mov    eax,0x16d
c000c43b:	85 d2                	test   edx,edx
c000c43d:	75 0a                	jne    c000c449 <datetimeToSeconds(datetime_t)+0x106>
c000c43f:	83 fb 01             	cmp    ebx,0x1
c000c442:	19 c0                	sbb    eax,eax
c000c444:	05 6e 01 00 00       	add    eax,0x16e
c000c449:	29 c1                	sub    ecx,eax
c000c44b:	b8 80 51 01 00       	mov    eax,0x15180
c000c450:	f7 e9                	imul   ecx
c000c452:	03 04 24             	add    eax,DWORD PTR [esp]
c000c455:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c459:	83 c4 0c             	add    esp,0xc
c000c45c:	5b                   	pop    ebx
c000c45d:	5e                   	pop    esi
c000c45e:	5f                   	pop    edi
c000c45f:	5d                   	pop    ebp
c000c460:	c3                   	ret    
c000c461:	90                   	nop

c000c462 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c462:	57                   	push   edi
c000c463:	56                   	push   esi
c000c464:	53                   	push   ebx
c000c465:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c469:	8b 06                	mov    eax,DWORD PTR [esi]
c000c46b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c46e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c472:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c476:	e8 c8 fe ff ff       	call   c000c343 <datetimeToSeconds(datetime_t)>
c000c47b:	59                   	pop    ecx
c000c47c:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c483:	5b                   	pop    ebx
c000c484:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c48a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c490:	89 cb                	mov    ebx,ecx
c000c492:	c1 fb 1f             	sar    ebx,0x1f
c000c495:	29 c8                	sub    eax,ecx
c000c497:	19 da                	sbb    edx,ebx
c000c499:	31 c9                	xor    ecx,ecx
c000c49b:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c4a2:	74 05                	je     c000c4a9 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c4a4:	b9 08 07 00 00       	mov    ecx,0x708
c000c4a9:	31 db                	xor    ebx,ebx
c000c4ab:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c4af:	29 c8                	sub    eax,ecx
c000c4b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c4b5:	19 da                	sbb    edx,ebx
c000c4b7:	89 f8                	mov    eax,edi
c000c4b9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c4bd:	5b                   	pop    ebx
c000c4be:	5e                   	pop    esi
c000c4bf:	5f                   	pop    edi
c000c4c0:	ff e0                	jmp    eax

c000c4c2 <secondsToDatetime(unsigned long long)>:
c000c4c2:	55                   	push   ebp
c000c4c3:	57                   	push   edi
c000c4c4:	56                   	push   esi
c000c4c5:	53                   	push   ebx
c000c4c6:	83 ec 1c             	sub    esp,0x1c
c000c4c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c4cd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c4d1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c4d5:	6a 00                	push   0x0
c000c4d7:	68 80 51 01 00       	push   0x15180
c000c4dc:	55                   	push   ebp
c000c4dd:	57                   	push   edi
c000c4de:	e8 6d 2f 01 00       	call   c001f450 <__udivdi3>
c000c4e3:	83 c4 10             	add    esp,0x10
c000c4e6:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c4ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c4f0:	6a 00                	push   0x0
c000c4f2:	68 80 51 01 00       	push   0x15180
c000c4f7:	55                   	push   ebp
c000c4f8:	57                   	push   edi
c000c4f9:	bf 10 0e 00 00       	mov    edi,0xe10
c000c4fe:	e8 4d 30 01 00       	call   c001f550 <__umoddi3>
c000c503:	83 c4 10             	add    esp,0x10
c000c506:	99                   	cdq    
c000c507:	f7 ff                	idiv   edi
c000c509:	bf 3c 00 00 00       	mov    edi,0x3c
c000c50e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c511:	89 d0                	mov    eax,edx
c000c513:	99                   	cdq    
c000c514:	f7 ff                	idiv   edi
c000c516:	85 db                	test   ebx,ebx
c000c518:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c51b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c51e:	79 11                	jns    c000c531 <secondsToDatetime(unsigned long long)+0x6f>
c000c520:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c524:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c52a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c52f:	eb 07                	jmp    c000c538 <secondsToDatetime(unsigned long long)+0x76>
c000c531:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c536:	89 d8                	mov    eax,ebx
c000c538:	bf b4 05 00 00       	mov    edi,0x5b4
c000c53d:	99                   	cdq    
c000c53e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c543:	f7 f9                	idiv   ecx
c000c545:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c54a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54e:	31 d2                	xor    edx,edx
c000c550:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c558:	01 c3                	add    ebx,eax
c000c55a:	89 d8                	mov    eax,ebx
c000c55c:	f7 f1                	div    ecx
c000c55e:	31 d2                	xor    edx,edx
c000c560:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c563:	89 d8                	mov    eax,ebx
c000c565:	f7 f7                	div    edi
c000c567:	31 d2                	xor    edx,edx
c000c569:	29 c1                	sub    ecx,eax
c000c56b:	89 d8                	mov    eax,ebx
c000c56d:	f7 f5                	div    ebp
c000c56f:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c574:	29 c1                	sub    ecx,eax
c000c576:	31 d2                	xor    edx,edx
c000c578:	89 c8                	mov    eax,ecx
c000c57a:	f7 f5                	div    ebp
c000c57c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c581:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c585:	31 d2                	xor    edx,edx
c000c587:	89 c8                	mov    eax,ecx
c000c589:	f7 f5                	div    ebp
c000c58b:	31 d2                	xor    edx,edx
c000c58d:	01 c3                	add    ebx,eax
c000c58f:	89 c8                	mov    eax,ecx
c000c591:	f7 f7                	div    edi
c000c593:	bf 99 00 00 00       	mov    edi,0x99
c000c598:	29 c3                	sub    ebx,eax
c000c59a:	31 d2                	xor    edx,edx
c000c59c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c5a4:	29 c3                	sub    ebx,eax
c000c5a6:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c5a9:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c5ac:	bb 05 00 00 00       	mov    ebx,0x5
c000c5b1:	83 c1 02             	add    ecx,0x2
c000c5b4:	89 c8                	mov    eax,ecx
c000c5b6:	f7 f7                	div    edi
c000c5b8:	31 d2                	xor    edx,edx
c000c5ba:	89 c7                	mov    edi,eax
c000c5bc:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c5c2:	83 c0 02             	add    eax,0x2
c000c5c5:	f7 f3                	div    ebx
c000c5c7:	89 eb                	mov    ebx,ebp
c000c5c9:	29 c3                	sub    ebx,eax
c000c5cb:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c5d1:	88 1e                	mov    BYTE PTR [esi],bl
c000c5d3:	19 c0                	sbb    eax,eax
c000c5d5:	31 d2                	xor    edx,edx
c000c5d7:	83 e0 0c             	and    eax,0xc
c000c5da:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c5de:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c5e6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c5ea:	83 f9 01             	cmp    ecx,0x1
c000c5ed:	0f 96 c2             	setbe  dl
c000c5f0:	41                   	inc    ecx
c000c5f1:	01 d0                	add    eax,edx
c000c5f3:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c5f6:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c5fa:	83 c4 1c             	add    esp,0x1c
c000c5fd:	89 f0                	mov    eax,esi
c000c5ff:	5b                   	pop    ebx
c000c600:	5e                   	pop    esi
c000c601:	5f                   	pop    edi
c000c602:	5d                   	pop    ebp
c000c603:	c2 04 00             	ret    0x4

c000c606 <Clock::timeInDatetimeLocal()>:
c000c606:	53                   	push   ebx
c000c607:	83 ec 14             	sub    esp,0x14
c000c60a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c612:	e8 8b fc ff ff       	call   c000c2a2 <Clock::timeInSecondsLocal()>
c000c617:	83 c4 0c             	add    esp,0xc
c000c61a:	52                   	push   edx
c000c61b:	50                   	push   eax
c000c61c:	53                   	push   ebx
c000c61d:	e8 a0 fe ff ff       	call   c000c4c2 <secondsToDatetime(unsigned long long)>
c000c622:	89 d8                	mov    eax,ebx
c000c624:	83 c4 14             	add    esp,0x14
c000c627:	5b                   	pop    ebx
c000c628:	c2 04 00             	ret    0x4
c000c62b:	90                   	nop

c000c62c <Device::hibernate()>:
c000c62c:	c3                   	ret    
c000c62d:	90                   	nop

c000c62e <Device::wake()>:
c000c62e:	c3                   	ret    
c000c62f:	90                   	nop

c000c630 <Device::detect()>:
c000c630:	c3                   	ret    
c000c631:	90                   	nop

c000c632 <Device::disableLegacy()>:
c000c632:	c3                   	ret    
c000c633:	90                   	nop

c000c634 <Device::powerSaving(PowerSavingLevel)>:
c000c634:	c3                   	ret    
c000c635:	90                   	nop

c000c636 <DriverlessDevice::close(int, int, void*)>:
c000c636:	31 c0                	xor    eax,eax
c000c638:	c3                   	ret    
c000c639:	90                   	nop

c000c63a <DriverlessDevice::detect()>:
c000c63a:	c3                   	ret    
c000c63b:	90                   	nop

c000c63c <DriverlessDevice::open(int, int, void*)>:
c000c63c:	83 ec 18             	sub    esp,0x18
c000c63f:	68 30 17 02 c0       	push   0xc0021730
c000c644:	e8 34 4d 00 00       	call   c001137d <KePanic(char const*)>
c000c649:	83 c8 ff             	or     eax,0xffffffff
c000c64c:	83 c4 1c             	add    esp,0x1c
c000c64f:	c3                   	ret    

c000c650 <Device::~Device()>:
c000c650:	ba 90 17 02 c0       	mov    edx,0xc0021790
c000c655:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c659:	89 10                	mov    DWORD PTR [eax],edx
c000c65b:	90                   	nop
c000c65c:	c3                   	ret    
c000c65d:	90                   	nop

c000c65e <Device::~Device()>:
c000c65e:	83 ec 0c             	sub    esp,0xc
c000c661:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c665:	e8 e6 ff ff ff       	call   c000c650 <Device::~Device()>
c000c66a:	83 c4 04             	add    esp,0x4
c000c66d:	83 ec 08             	sub    esp,0x8
c000c670:	68 58 01 00 00       	push   0x158
c000c675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c679:	e8 9a e1 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c67e:	83 c4 10             	add    esp,0x10
c000c681:	83 c4 0c             	add    esp,0xc
c000c684:	c3                   	ret    
c000c685:	90                   	nop

c000c686 <Device::findAndLoadDriver()>:
c000c686:	c7 44 24 04 4e 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc002174e
c000c68e:	e9 b2 e2 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c693:	90                   	nop

c000c694 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c694:	57                   	push   edi
c000c695:	b9 09 00 00 00       	mov    ecx,0x9
c000c69a:	56                   	push   esi
c000c69b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c69f:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c6a3:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c6ad:	81 c7 18 01 00 00    	add    edi,0x118
c000c6b3:	fc                   	cld    
c000c6b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c6b6:	5e                   	pop    esi
c000c6b7:	5f                   	pop    edi
c000c6b8:	c3                   	ret    
c000c6b9:	90                   	nop

c000c6ba <Device::preOpenACPI(void*, char*, char*)>:
c000c6ba:	57                   	push   edi
c000c6bb:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c6c0:	56                   	push   esi
c000c6c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c6c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c6c9:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c6d3:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c6d9:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c6df:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c6e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c6e5:	b9 0e 00 00 00       	mov    ecx,0xe
c000c6ea:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c6f0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c6f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c6f6:	5e                   	pop    esi
c000c6f7:	5f                   	pop    edi
c000c6f8:	c3                   	ret    
c000c6f9:	90                   	nop

c000c6fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c6fa:	53                   	push   ebx
c000c6fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c6ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c703:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c707:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c70b:	0f b6 c0             	movzx  eax,al
c000c70e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c712:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c716:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c71a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c71e:	5b                   	pop    ebx
c000c71f:	e9 a8 05 00 00       	jmp    c000cccc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c724 <Device::getParent()>:
c000c724:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c728:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c72e:	c3                   	ret    
c000c72f:	90                   	nop

c000c730 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c730:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c734:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c738:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c73d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c741:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c745:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c749:	e9 e6 06 00 00       	jmp    c000ce34 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c74e <Device::addChild(Device*)>:
c000c74e:	53                   	push   ebx
c000c74f:	83 ec 08             	sub    esp,0x8
c000c752:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c756:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c75a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c760:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c766:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c768:	85 d2                	test   edx,edx
c000c76a:	74 04                	je     c000c770 <Device::addChild(Device*)+0x22>
c000c76c:	89 d3                	mov    ebx,edx
c000c76e:	eb f6                	jmp    c000c766 <Device::addChild(Device*)+0x18>
c000c770:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c773:	83 ec 0c             	sub    esp,0xc
c000c776:	6a 08                	push   0x8
c000c778:	e8 39 b3 ff ff       	call   c0007ab6 <malloc>
c000c77d:	89 03                	mov    DWORD PTR [ebx],eax
c000c77f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c785:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c78c:	83 c4 18             	add    esp,0x18
c000c78f:	5b                   	pop    ebx
c000c790:	c3                   	ret    
c000c791:	90                   	nop

c000c792 <Device::removeAllChildren()>:
c000c792:	56                   	push   esi
c000c793:	53                   	push   ebx
c000c794:	52                   	push   edx
c000c795:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c799:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c79f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7a2:	74 17                	je     c000c7bb <Device::removeAllChildren()+0x29>
c000c7a4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c7a7:	85 c0                	test   eax,eax
c000c7a9:	74 0c                	je     c000c7b7 <Device::removeAllChildren()+0x25>
c000c7ab:	83 ec 0c             	sub    esp,0xc
c000c7ae:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7b0:	50                   	push   eax
c000c7b1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c7b4:	83 c4 10             	add    esp,0x10
c000c7b7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7b9:	eb e4                	jmp    c000c79f <Device::removeAllChildren()+0xd>
c000c7bb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c7c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c7c7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c7cd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c7d4:	58                   	pop    eax
c000c7d5:	5b                   	pop    ebx
c000c7d6:	5e                   	pop    esi
c000c7d7:	c3                   	ret    

c000c7d8 <Device::hibernateAll()>:
c000c7d8:	53                   	push   ebx
c000c7d9:	83 ec 14             	sub    esp,0x14
c000c7dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c7e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7e2:	53                   	push   ebx
c000c7e3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c7e6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7ec:	83 c4 10             	add    esp,0x10
c000c7ef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7f2:	74 0f                	je     c000c803 <Device::hibernateAll()+0x2b>
c000c7f4:	83 ec 0c             	sub    esp,0xc
c000c7f7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c7fa:	e8 d9 ff ff ff       	call   c000c7d8 <Device::hibernateAll()>
c000c7ff:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c801:	eb e9                	jmp    c000c7ec <Device::hibernateAll()+0x14>
c000c803:	83 c4 08             	add    esp,0x8
c000c806:	5b                   	pop    ebx
c000c807:	c3                   	ret    

c000c808 <Device::wakeAll()>:
c000c808:	53                   	push   ebx
c000c809:	83 ec 14             	sub    esp,0x14
c000c80c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c810:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c812:	53                   	push   ebx
c000c813:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c816:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c81c:	83 c4 10             	add    esp,0x10
c000c81f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c822:	74 0f                	je     c000c833 <Device::wakeAll()+0x2b>
c000c824:	83 ec 0c             	sub    esp,0xc
c000c827:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c82a:	e8 d9 ff ff ff       	call   c000c808 <Device::wakeAll()>
c000c82f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c831:	eb e9                	jmp    c000c81c <Device::wakeAll()+0x14>
c000c833:	83 c4 08             	add    esp,0x8
c000c836:	5b                   	pop    ebx
c000c837:	c3                   	ret    

c000c838 <Device::detectAll()>:
c000c838:	53                   	push   ebx
c000c839:	83 ec 14             	sub    esp,0x14
c000c83c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c840:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c842:	53                   	push   ebx
c000c843:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c846:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c84c:	83 c4 10             	add    esp,0x10
c000c84f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c852:	74 0f                	je     c000c863 <Device::detectAll()+0x2b>
c000c854:	83 ec 0c             	sub    esp,0xc
c000c857:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c85a:	e8 d9 ff ff ff       	call   c000c838 <Device::detectAll()>
c000c85f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c861:	eb e9                	jmp    c000c84c <Device::detectAll()+0x14>
c000c863:	83 c4 08             	add    esp,0x8
c000c866:	5b                   	pop    ebx
c000c867:	c3                   	ret    

c000c868 <Device::disableLegacyAll()>:
c000c868:	c3                   	ret    
c000c869:	90                   	nop

c000c86a <Device::loadDriversForAll()>:
c000c86a:	c3                   	ret    
c000c86b:	90                   	nop

c000c86c <Device::closeAll()>:
c000c86c:	53                   	push   ebx
c000c86d:	83 ec 08             	sub    esp,0x8
c000c870:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c874:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c876:	6a 00                	push   0x0
c000c878:	6a 00                	push   0x0
c000c87a:	6a 00                	push   0x0
c000c87c:	53                   	push   ebx
c000c87d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c880:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c886:	83 c4 10             	add    esp,0x10
c000c889:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c88c:	74 0f                	je     c000c89d <Device::closeAll()+0x31>
c000c88e:	83 ec 0c             	sub    esp,0xc
c000c891:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c894:	e8 d3 ff ff ff       	call   c000c86c <Device::closeAll()>
c000c899:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c89b:	eb e9                	jmp    c000c886 <Device::closeAll()+0x1a>
c000c89d:	83 c4 08             	add    esp,0x8
c000c8a0:	5b                   	pop    ebx
c000c8a1:	c3                   	ret    

c000c8a2 <Device::powerSavingAll(PowerSavingLevel)>:
c000c8a2:	56                   	push   esi
c000c8a3:	53                   	push   ebx
c000c8a4:	83 ec 0c             	sub    esp,0xc
c000c8a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c8ab:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c8af:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c8b1:	56                   	push   esi
c000c8b2:	53                   	push   ebx
c000c8b3:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c8b6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c8bc:	83 c4 10             	add    esp,0x10
c000c8bf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c8c2:	74 0f                	je     c000c8d3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c8c4:	52                   	push   edx
c000c8c5:	52                   	push   edx
c000c8c6:	56                   	push   esi
c000c8c7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c8ca:	e8 d3 ff ff ff       	call   c000c8a2 <Device::powerSavingAll(PowerSavingLevel)>
c000c8cf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c8d1:	eb e9                	jmp    c000c8bc <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c8d3:	58                   	pop    eax
c000c8d4:	5b                   	pop    ebx
c000c8d5:	5e                   	pop    esi
c000c8d6:	c3                   	ret    
c000c8d7:	90                   	nop

c000c8d8 <Device::setName(char const*)>:
c000c8d8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c8e0:	e9 5b 3d ff ff       	jmp    c0000640 <strcpy>
c000c8e5:	90                   	nop

c000c8e6 <Device::Device(char const*)>:
c000c8e6:	83 ec 1c             	sub    esp,0x1c
c000c8e9:	ba 90 17 02 c0       	mov    edx,0xc0021790
c000c8ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8f2:	89 10                	mov    DWORD PTR [eax],edx
c000c8f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8f8:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c902:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c906:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c910:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c914:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c91e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c922:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c92c:	83 ec 08             	sub    esp,0x8
c000c92f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c933:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c937:	e8 9c ff ff ff       	call   c000c8d8 <Device::setName(char const*)>
c000c93c:	83 c4 10             	add    esp,0x10
c000c93f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c947:	83 ec 0c             	sub    esp,0xc
c000c94a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c94e:	e8 63 b1 ff ff       	call   c0007ab6 <malloc>
c000c953:	83 c4 10             	add    esp,0x10
c000c956:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c95c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c963:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c967:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c96d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c971:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c977:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c97d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c981:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c987:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c98e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c992:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c999:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c99d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c9a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9a8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c9b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9b6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c9c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9c4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c9ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9d2:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c9dc:	90                   	nop
c000c9dd:	83 c4 1c             	add    esp,0x1c
c000c9e0:	c3                   	ret    
c000c9e1:	90                   	nop

c000c9e2 <Device::getName()>:
c000c9e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9e6:	05 d0 00 00 00       	add    eax,0xd0
c000c9eb:	c3                   	ret    

c000c9ec <DriverlessDevice::DriverlessDevice(char const*)>:
c000c9ec:	83 ec 0c             	sub    esp,0xc
c000c9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9f3:	83 ec 08             	sub    esp,0x8
c000c9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9fa:	50                   	push   eax
c000c9fb:	e8 e6 fe ff ff       	call   c000c8e6 <Device::Device(char const*)>
c000ca00:	83 c4 10             	add    esp,0x10
c000ca03:	ba bc 17 02 c0       	mov    edx,0xc00217bc
c000ca08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca0c:	89 10                	mov    DWORD PTR [eax],edx
c000ca0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca12:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000ca1c:	90                   	nop
c000ca1d:	83 c4 0c             	add    esp,0xc
c000ca20:	c3                   	ret    
c000ca21:	90                   	nop

c000ca22 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000ca22:	57                   	push   edi
c000ca23:	56                   	push   esi
c000ca24:	53                   	push   ebx
c000ca25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ca29:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ca2d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ca31:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000ca37:	75 0c                	jne    c000ca45 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000ca39:	52                   	push   edx
c000ca3a:	52                   	push   edx
c000ca3b:	53                   	push   ebx
c000ca3c:	56                   	push   esi
c000ca3d:	e8 c0 2e 01 00       	call   c001f902 <LinkedList<Device>::addElement(Device*)>
c000ca42:	83 c4 10             	add    esp,0x10
c000ca45:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca4b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca4e:	74 12                	je     c000ca62 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ca50:	50                   	push   eax
c000ca51:	57                   	push   edi
c000ca52:	56                   	push   esi
c000ca53:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca56:	e8 c7 ff ff ff       	call   c000ca22 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca5b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca5d:	83 c4 10             	add    esp,0x10
c000ca60:	eb e9                	jmp    c000ca4b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000ca62:	5b                   	pop    ebx
c000ca63:	5e                   	pop    esi
c000ca64:	5f                   	pop    edi
c000ca65:	c3                   	ret    

c000ca66 <getDevicesOfType(DeviceType)>:
c000ca66:	53                   	push   ebx
c000ca67:	83 ec 14             	sub    esp,0x14
c000ca6a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca6e:	53                   	push   ebx
c000ca6f:	e8 6a 2f 01 00       	call   c001f9de <LinkedList<Device>::LinkedList()>
c000ca74:	83 c4 0c             	add    esp,0xc
c000ca77:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca7b:	53                   	push   ebx
c000ca7c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000ca82:	e8 9b ff ff ff       	call   c000ca22 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ca87:	89 d8                	mov    eax,ebx
c000ca89:	83 c4 18             	add    esp,0x18
c000ca8c:	5b                   	pop    ebx
c000ca8d:	c2 04 00             	ret    0x4

c000ca90 <HardDiskController::HardDiskController(char const*)>:
c000ca90:	83 ec 0c             	sub    esp,0xc
c000ca93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca97:	83 ec 08             	sub    esp,0x8
c000ca9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca9e:	50                   	push   eax
c000ca9f:	e8 42 fe ff ff       	call   c000c8e6 <Device::Device(char const*)>
c000caa4:	83 c4 10             	add    esp,0x10
c000caa7:	ba e8 17 02 c0       	mov    edx,0xc00217e8
c000caac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cab0:	89 10                	mov    DWORD PTR [eax],edx
c000cab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cab6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cac0:	90                   	nop
c000cac1:	83 c4 0c             	add    esp,0xc
c000cac4:	c3                   	ret    
c000cac5:	90                   	nop
c000cac6:	66 90                	xchg   ax,ax

c000cac8 <HardDiskController::~HardDiskController()>:
c000cac8:	83 ec 0c             	sub    esp,0xc
c000cacb:	ba e8 17 02 c0       	mov    edx,0xc00217e8
c000cad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cad4:	89 10                	mov    DWORD PTR [eax],edx
c000cad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cada:	83 ec 0c             	sub    esp,0xc
c000cadd:	50                   	push   eax
c000cade:	e8 6d fb ff ff       	call   c000c650 <Device::~Device()>
c000cae3:	83 c4 10             	add    esp,0x10
c000cae6:	90                   	nop
c000cae7:	83 c4 0c             	add    esp,0xc
c000caea:	c3                   	ret    
c000caeb:	90                   	nop

c000caec <HardDiskController::~HardDiskController()>:
c000caec:	83 ec 0c             	sub    esp,0xc
c000caef:	83 ec 0c             	sub    esp,0xc
c000caf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000caf6:	e8 cd ff ff ff       	call   c000cac8 <HardDiskController::~HardDiskController()>
c000cafb:	83 c4 10             	add    esp,0x10
c000cafe:	83 ec 08             	sub    esp,0x8
c000cb01:	68 58 01 00 00       	push   0x158
c000cb06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb0a:	e8 09 dd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cb0f:	83 c4 10             	add    esp,0x10
c000cb12:	83 c4 0c             	add    esp,0xc
c000cb15:	c3                   	ret    

c000cb16 <PhysicalDisk::eject()>:
c000cb16:	83 c8 ff             	or     eax,0xffffffff
c000cb19:	c3                   	ret    

c000cb1a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cb1a:	83 ec 0c             	sub    esp,0xc
c000cb1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb21:	83 ec 08             	sub    esp,0x8
c000cb24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb28:	50                   	push   eax
c000cb29:	e8 b8 fd ff ff       	call   c000c8e6 <Device::Device(char const*)>
c000cb2e:	83 c4 10             	add    esp,0x10
c000cb31:	ba 14 18 02 c0       	mov    edx,0xc0021814
c000cb36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb3a:	89 10                	mov    DWORD PTR [eax],edx
c000cb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb40:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb4b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cb52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb56:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb64:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cb68:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cb6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb72:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cb7c:	90                   	nop
c000cb7d:	83 c4 0c             	add    esp,0xc
c000cb80:	c3                   	ret    
c000cb81:	90                   	nop

c000cb82 <PhysicalDisk::startCache()>:
c000cb82:	56                   	push   esi
c000cb83:	53                   	push   ebx
c000cb84:	83 ec 10             	sub    esp,0x10
c000cb87:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cb8b:	6a 44                	push   0x44
c000cb8d:	e8 24 af ff ff       	call   c0007ab6 <malloc>
c000cb92:	89 c6                	mov    esi,eax
c000cb94:	58                   	pop    eax
c000cb95:	5a                   	pop    edx
c000cb96:	53                   	push   ebx
c000cb97:	56                   	push   esi
c000cb98:	e8 7b 17 00 00       	call   c000e318 <VCache::VCache(PhysicalDisk*)>
c000cb9d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cba3:	83 c4 14             	add    esp,0x14
c000cba6:	5b                   	pop    ebx
c000cba7:	5e                   	pop    esi
c000cba8:	c3                   	ret    
c000cba9:	90                   	nop

c000cbaa <PhysicalDisk::~PhysicalDisk()>:
c000cbaa:	83 ec 0c             	sub    esp,0xc
c000cbad:	ba 14 18 02 c0       	mov    edx,0xc0021814
c000cbb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbb6:	89 10                	mov    DWORD PTR [eax],edx
c000cbb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbbc:	83 ec 0c             	sub    esp,0xc
c000cbbf:	50                   	push   eax
c000cbc0:	e8 8b fa ff ff       	call   c000c650 <Device::~Device()>
c000cbc5:	83 c4 10             	add    esp,0x10
c000cbc8:	90                   	nop
c000cbc9:	83 c4 0c             	add    esp,0xc
c000cbcc:	c3                   	ret    
c000cbcd:	90                   	nop

c000cbce <PhysicalDisk::~PhysicalDisk()>:
c000cbce:	83 ec 0c             	sub    esp,0xc
c000cbd1:	83 ec 0c             	sub    esp,0xc
c000cbd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbd8:	e8 cd ff ff ff       	call   c000cbaa <PhysicalDisk::~PhysicalDisk()>
c000cbdd:	83 c4 10             	add    esp,0x10
c000cbe0:	83 ec 08             	sub    esp,0x8
c000cbe3:	68 6c 01 00 00       	push   0x16c
c000cbe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbec:	e8 27 dc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cbf1:	83 c4 10             	add    esp,0x10
c000cbf4:	83 c4 0c             	add    esp,0xc
c000cbf7:	c3                   	ret    

c000cbf8 <int_handler>:
c000cbf8:	55                   	push   ebp
c000cbf9:	57                   	push   edi
c000cbfa:	56                   	push   esi
c000cbfb:	53                   	push   ebx
c000cbfc:	83 ec 0c             	sub    esp,0xc
c000cbff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cc03:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cc0a:	74 0b                	je     c000cc17 <int_handler+0x1f>
c000cc0c:	fa                   	cli    
c000cc0d:	f4                   	hlt    
c000cc0e:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cc15:	75 f5                	jne    c000cc0c <int_handler+0x14>
c000cc17:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cc1a:	8d 46 e0             	lea    eax,[esi-0x20]
c000cc1d:	83 f8 17             	cmp    eax,0x17
c000cc20:	76 40                	jbe    c000cc62 <int_handler+0x6a>
c000cc22:	c1 e6 04             	shl    esi,0x4
c000cc25:	31 db                	xor    ebx,ebx
c000cc27:	8d ae 20 74 02 c0    	lea    ebp,[esi-0x3ffd8be0]
c000cc2d:	81 c6 20 64 02 c0    	add    esi,0xc0026420
c000cc33:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cc37:	85 c0                	test   eax,eax
c000cc39:	74 13                	je     c000cc4e <int_handler+0x56>
c000cc3b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cc3e:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cc42:	74 2c                	je     c000cc70 <int_handler+0x78>
c000cc44:	83 ec 08             	sub    esp,0x8
c000cc47:	52                   	push   edx
c000cc48:	57                   	push   edi
c000cc49:	ff d0                	call   eax
c000cc4b:	83 c4 10             	add    esp,0x10
c000cc4e:	83 c3 01             	add    ebx,0x1
c000cc51:	83 fb 04             	cmp    ebx,0x4
c000cc54:	75 dd                	jne    c000cc33 <int_handler+0x3b>
c000cc56:	83 c4 0c             	add    esp,0xc
c000cc59:	31 c0                	xor    eax,eax
c000cc5b:	5b                   	pop    ebx
c000cc5c:	31 d2                	xor    edx,edx
c000cc5e:	5e                   	pop    esi
c000cc5f:	5f                   	pop    edi
c000cc60:	5d                   	pop    ebp
c000cc61:	c3                   	ret    
c000cc62:	83 ec 0c             	sub    esp,0xc
c000cc65:	50                   	push   eax
c000cc66:	e8 3d b4 00 00       	call   c00180a8 <HalEndOfInterrupt(int)>
c000cc6b:	83 c4 10             	add    esp,0x10
c000cc6e:	eb b2                	jmp    c000cc22 <int_handler+0x2a>
c000cc70:	83 ec 08             	sub    esp,0x8
c000cc73:	52                   	push   edx
c000cc74:	57                   	push   edi
c000cc75:	ff d0                	call   eax
c000cc77:	83 c4 10             	add    esp,0x10
c000cc7a:	83 c4 0c             	add    esp,0xc
c000cc7d:	5b                   	pop    ebx
c000cc7e:	5e                   	pop    esi
c000cc7f:	5f                   	pop    edi
c000cc80:	5d                   	pop    ebp
c000cc81:	c3                   	ret    

c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cc82:	56                   	push   esi
c000cc83:	31 c0                	xor    eax,eax
c000cc85:	53                   	push   ebx
c000cc86:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc8e:	89 ca                	mov    edx,ecx
c000cc90:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc94:	c1 e2 04             	shl    edx,0x4
c000cc97:	83 bc 82 20 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8be0],0x0
c000cc9f:	74 17                	je     c000ccb8 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cca1:	83 c0 01             	add    eax,0x1
c000cca4:	83 f8 04             	cmp    eax,0x4
c000cca7:	75 ee                	jne    c000cc97 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cca9:	c7 44 24 0c 44 18 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021844
c000ccb1:	5b                   	pop    ebx
c000ccb2:	5e                   	pop    esi
c000ccb3:	e9 c5 46 00 00       	jmp    c001137d <KePanic(char const*)>
c000ccb8:	8d 04 88             	lea    eax,[eax+ecx*4]
c000ccbb:	89 1c 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],ebx
c000ccc2:	89 34 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],esi
c000ccc9:	5b                   	pop    ebx
c000ccca:	5e                   	pop    esi
c000cccb:	c3                   	ret    

c000cccc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cccc:	57                   	push   edi
c000cccd:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000ccd3:	56                   	push   esi
c000ccd4:	53                   	push   ebx
c000ccd5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ccd9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccdd:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cce4:	74 54                	je     c000cd3a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cce6:	89 c7                	mov    edi,eax
c000cce8:	84 c0                	test   al,al
c000ccea:	74 1d                	je     c000cd09 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000ccec:	83 fe 0f             	cmp    esi,0xf
c000ccef:	0f 8f d5 00 00 00    	jg     c000cdca <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000ccf5:	0f b6 b6 48 33 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdccb8]
c000ccfc:	0f b7 bc 36 c0 8b 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd7440]
c000cd04:	d1 ef                	shr    edi,1
c000cd06:	83 e7 01             	and    edi,0x1
c000cd09:	83 ec 08             	sub    esp,0x8
c000cd0c:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cd11:	31 db                	xor    ebx,ebx
c000cd13:	50                   	push   eax
c000cd14:	68 51 18 02 c0       	push   0xc0021851
c000cd19:	e8 27 dc ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000cd1e:	83 c4 10             	add    esp,0x10
c000cd21:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cd26:	85 c0                	test   eax,eax
c000cd28:	7f 55                	jg     c000cd7f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cd2a:	83 ec 0c             	sub    esp,0xc
c000cd2d:	68 68 18 02 c0       	push   0xc0021868
c000cd32:	e8 46 46 00 00       	call   c001137d <KePanic(char const*)>
c000cd37:	83 c4 10             	add    esp,0x10
c000cd3a:	8d 7e 20             	lea    edi,[esi+0x20]
c000cd3d:	89 f8                	mov    eax,edi
c000cd3f:	31 d2                	xor    edx,edx
c000cd41:	c1 e0 04             	shl    eax,0x4
c000cd44:	8b 8c 90 20 74 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd8be0]
c000cd4b:	85 c9                	test   ecx,ecx
c000cd4d:	0f 84 8e 00 00 00    	je     c000cde1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000cd53:	83 c2 01             	add    edx,0x1
c000cd56:	83 fa 04             	cmp    edx,0x4
c000cd59:	75 e9                	jne    c000cd44 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cd5b:	83 ec 0c             	sub    esp,0xc
c000cd5e:	68 bc 18 02 c0       	push   0xc00218bc
c000cd63:	e8 15 46 00 00       	call   c001137d <KePanic(char const*)>
c000cd68:	83 c4 10             	add    esp,0x10
c000cd6b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cd70:	5b                   	pop    ebx
c000cd71:	5e                   	pop    esi
c000cd72:	5f                   	pop    edi
c000cd73:	c3                   	ret    
c000cd74:	83 c3 01             	add    ebx,0x1
c000cd77:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c000cd7d:	7e ab                	jle    c000cd2a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000cd7f:	83 ec 08             	sub    esp,0x8
c000cd82:	8b 04 9d e0 a0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5f20]
c000cd89:	56                   	push   esi
c000cd8a:	50                   	push   eax
c000cd8b:	e8 a2 1a 01 00       	call   c001e832 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	84 c0                	test   al,al
c000cd95:	74 dd                	je     c000cd74 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000cd97:	83 ec 04             	sub    esp,0x4
c000cd9a:	89 f8                	mov    eax,edi
c000cd9c:	8b 1c 9d e0 a0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5f20]
c000cda3:	0f b6 f8             	movzx  edi,al
c000cda6:	57                   	push   edi
c000cda7:	8d 7e 20             	lea    edi,[esi+0x20]
c000cdaa:	6a 00                	push   0x0
c000cdac:	89 f8                	mov    eax,edi
c000cdae:	0f b6 c0             	movzx  eax,al
c000cdb1:	50                   	push   eax
c000cdb2:	89 f0                	mov    eax,esi
c000cdb4:	6a 00                	push   0x0
c000cdb6:	0f b6 c0             	movzx  eax,al
c000cdb9:	6a 00                	push   0x0
c000cdbb:	50                   	push   eax
c000cdbc:	53                   	push   ebx
c000cdbd:	e8 dc 1b 01 00       	call   c001e99e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cdc2:	83 c4 20             	add    esp,0x20
c000cdc5:	e9 73 ff ff ff       	jmp    c000cd3d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000cdca:	83 ec 0c             	sub    esp,0xc
c000cdcd:	31 ff                	xor    edi,edi
c000cdcf:	68 84 18 02 c0       	push   0xc0021884
c000cdd4:	e8 a4 45 00 00       	call   c001137d <KePanic(char const*)>
c000cdd9:	83 c4 10             	add    esp,0x10
c000cddc:	e9 28 ff ff ff       	jmp    c000cd09 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cde1:	8d 04 ba             	lea    eax,[edx+edi*4]
c000cde4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cde8:	89 14 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],edx
c000cdef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cdf3:	5b                   	pop    ebx
c000cdf4:	89 14 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],edx
c000cdfb:	89 f0                	mov    eax,esi
c000cdfd:	5e                   	pop    esi
c000cdfe:	5f                   	pop    edi
c000cdff:	c3                   	ret    

c000ce00 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ce00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce04:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ce08:	c1 e0 04             	shl    eax,0x4
c000ce0b:	8d 50 10             	lea    edx,[eax+0x10]
c000ce0e:	39 88 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ecx
c000ce14:	74 08                	je     c000ce1e <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000ce16:	83 c0 04             	add    eax,0x4
c000ce19:	39 d0                	cmp    eax,edx
c000ce1b:	75 f1                	jne    c000ce0e <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000ce1d:	c3                   	ret    
c000ce1e:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce28:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ce32:	eb e2                	jmp    c000ce16 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000ce34 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ce34:	53                   	push   ebx
c000ce35:	83 ec 08             	sub    esp,0x8
c000ce38:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ce3c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ce41:	74 0e                	je     c000ce51 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000ce43:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ce48:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000ce4f:	75 37                	jne    c000ce88 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000ce51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce55:	83 c0 20             	add    eax,0x20
c000ce58:	c1 e0 04             	shl    eax,0x4
c000ce5b:	8d 50 10             	lea    edx,[eax+0x10]
c000ce5e:	39 98 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ebx
c000ce64:	74 0c                	je     c000ce72 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000ce66:	83 c0 04             	add    eax,0x4
c000ce69:	39 d0                	cmp    eax,edx
c000ce6b:	75 f1                	jne    c000ce5e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000ce6d:	83 c4 08             	add    esp,0x8
c000ce70:	5b                   	pop    ebx
c000ce71:	c3                   	ret    
c000ce72:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce7c:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ce86:	eb de                	jmp    c000ce66 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000ce88:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000ce8d:	7f 11                	jg     c000cea0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000ce8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce93:	0f b6 80 48 33 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdccb8]
c000ce9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce9e:	eb b1                	jmp    c000ce51 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000cea0:	83 ec 0c             	sub    esp,0xc
c000cea3:	68 75 18 02 c0       	push   0xc0021875
c000cea8:	e8 d0 44 00 00       	call   c001137d <KePanic(char const*)>
c000cead:	83 c4 10             	add    esp,0x10
c000ceb0:	eb 9f                	jmp    c000ce51 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000ceb2 <setupINTS()>:
c000ceb2:	31 c0                	xor    eax,eax
c000ceb4:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cebe:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cec8:	c7 80 24 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bdc],0x0
c000ced2:	c7 80 24 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bdc],0x0
c000cedc:	c7 80 28 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bd8],0x0
c000cee6:	c7 80 28 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bd8],0x0
c000cef0:	c7 80 2c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bd4],0x0
c000cefa:	c7 80 2c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bd4],0x0
c000cf04:	83 c0 10             	add    eax,0x10
c000cf07:	3d 00 10 00 00       	cmp    eax,0x1000
c000cf0c:	75 a6                	jne    c000ceb4 <setupINTS()+0x2>
c000cf0e:	c3                   	ret    

c000cf0f <convertLegacyIRQNumber(int)>:
c000cf0f:	83 ec 0c             	sub    esp,0xc
c000cf12:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cf18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf1c:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf23:	74 0c                	je     c000cf31 <convertLegacyIRQNumber(int)+0x22>
c000cf25:	83 f8 0f             	cmp    eax,0xf
c000cf28:	7f 0b                	jg     c000cf35 <convertLegacyIRQNumber(int)+0x26>
c000cf2a:	0f b6 80 48 33 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdccb8]
c000cf31:	83 c4 0c             	add    esp,0xc
c000cf34:	c3                   	ret    
c000cf35:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf39:	83 ec 0c             	sub    esp,0xc
c000cf3c:	68 84 18 02 c0       	push   0xc0021884
c000cf41:	e8 37 44 00 00       	call   c001137d <KePanic(char const*)>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf4d:	83 c4 0c             	add    esp,0xc
c000cf50:	c3                   	ret    
c000cf51:	90                   	nop

c000cf52 <startGUI(void*)>:
c000cf52:	55                   	push   ebp
c000cf53:	89 e5                	mov    ebp,esp
c000cf55:	53                   	push   ebx
c000cf56:	83 ec 04             	sub    esp,0x4
c000cf59:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf5e:	83 e8 01             	sub    eax,0x1
c000cf61:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf66:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf6b:	85 c0                	test   eax,eax
c000cf6d:	75 01                	jne    c000cf70 <startGUI(void*)+0x1e>
c000cf6f:	fb                   	sti    
c000cf70:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf76:	83 ec 08             	sub    esp,0x8
c000cf79:	6a 01                	push   0x1
c000cf7b:	68 e1 18 02 c0       	push   0xc00218e1
c000cf80:	e8 fa 83 00 00       	call   c001537f <Thr::loadDLL(char const*, bool)>
c000cf85:	83 c4 10             	add    esp,0x10
c000cf88:	83 ec 08             	sub    esp,0x8
c000cf8b:	53                   	push   ebx
c000cf8c:	50                   	push   eax
c000cf8d:	e8 1e 86 00 00       	call   c00155b0 <Thr::executeDLL(unsigned long, void*)>
c000cf92:	83 c4 10             	add    esp,0x10
c000cf95:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf9b:	83 ec 08             	sub    esp,0x8
c000cf9e:	6a 01                	push   0x1
c000cfa0:	68 fb 18 02 c0       	push   0xc00218fb
c000cfa5:	e8 d5 83 00 00       	call   c001537f <Thr::loadDLL(char const*, bool)>
c000cfaa:	83 c4 10             	add    esp,0x10
c000cfad:	83 ec 08             	sub    esp,0x8
c000cfb0:	53                   	push   ebx
c000cfb1:	50                   	push   eax
c000cfb2:	e8 f9 85 00 00       	call   c00155b0 <Thr::executeDLL(unsigned long, void*)>
c000cfb7:	83 c4 10             	add    esp,0x10
c000cfba:	90                   	nop
c000cfbb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cfbe:	c9                   	leave  
c000cfbf:	c3                   	ret    

c000cfc0 <startGUIVESA(void*)>:
c000cfc0:	55                   	push   ebp
c000cfc1:	89 e5                	mov    ebp,esp
c000cfc3:	53                   	push   ebx
c000cfc4:	83 ec 04             	sub    esp,0x4
c000cfc7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfcc:	83 e8 01             	sub    eax,0x1
c000cfcf:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cfd4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfd9:	85 c0                	test   eax,eax
c000cfdb:	75 01                	jne    c000cfde <startGUIVESA(void*)+0x1e>
c000cfdd:	fb                   	sti    
c000cfde:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cfe4:	83 ec 08             	sub    esp,0x8
c000cfe7:	6a 01                	push   0x1
c000cfe9:	68 19 19 02 c0       	push   0xc0021919
c000cfee:	e8 8c 83 00 00       	call   c001537f <Thr::loadDLL(char const*, bool)>
c000cff3:	83 c4 10             	add    esp,0x10
c000cff6:	83 ec 08             	sub    esp,0x8
c000cff9:	53                   	push   ebx
c000cffa:	50                   	push   eax
c000cffb:	e8 b0 85 00 00       	call   c00155b0 <Thr::executeDLL(unsigned long, void*)>
c000d000:	83 c4 10             	add    esp,0x10
c000d003:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000d009:	83 ec 08             	sub    esp,0x8
c000d00c:	6a 01                	push   0x1
c000d00e:	68 fb 18 02 c0       	push   0xc00218fb
c000d013:	e8 67 83 00 00       	call   c001537f <Thr::loadDLL(char const*, bool)>
c000d018:	83 c4 10             	add    esp,0x10
c000d01b:	83 ec 08             	sub    esp,0x8
c000d01e:	53                   	push   ebx
c000d01f:	50                   	push   eax
c000d020:	e8 8b 85 00 00       	call   c00155b0 <Thr::executeDLL(unsigned long, void*)>
c000d025:	83 c4 10             	add    esp,0x10
c000d028:	90                   	nop
c000d029:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d02c:	c9                   	leave  
c000d02d:	c3                   	ret    

c000d02e <sendKeyToTerminal(unsigned char)>:
c000d02e:	55                   	push   ebp
c000d02f:	89 e5                	mov    ebp,esp
c000d031:	83 ec 28             	sub    esp,0x28
c000d034:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d037:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d03a:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000d03f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d043:	83 ec 08             	sub    esp,0x8
c000d046:	52                   	push   edx
c000d047:	50                   	push   eax
c000d048:	e8 69 bd ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000d04d:	83 c4 10             	add    esp,0x10
c000d050:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d054:	83 f8 0a             	cmp    eax,0xa
c000d057:	74 16                	je     c000d06f <sendKeyToTerminal(unsigned char)+0x41>
c000d059:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d05d:	83 f8 03             	cmp    eax,0x3
c000d060:	74 0d                	je     c000d06f <sendKeyToTerminal(unsigned char)+0x41>
c000d062:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d066:	83 f8 1c             	cmp    eax,0x1c
c000d069:	0f 85 97 00 00 00    	jne    c000d106 <sendKeyToTerminal(unsigned char)+0xd8>
c000d06f:	fa                   	cli    
c000d070:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d075:	83 c0 01             	add    eax,0x1
c000d078:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d07d:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d082:	83 c0 01             	add    eax,0x1
c000d085:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d08a:	a1 20 84 02 c0       	mov    eax,ds:0xc0028420
c000d08f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d092:	c7 05 20 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028420,0x0
c000d09c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d0a0:	74 1f                	je     c000d0c1 <sendKeyToTerminal(unsigned char)+0x93>
c000d0a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d0a5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d0a8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d0ab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d0ae:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d0b1:	83 ec 0c             	sub    esp,0xc
c000d0b4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d0b7:	e8 3c 92 00 00       	call   c00162f8 <unblockTask(ThreadControlBlock*)>
c000d0bc:	83 c4 10             	add    esp,0x10
c000d0bf:	eb db                	jmp    c000d09c <sendKeyToTerminal(unsigned char)+0x6e>
c000d0c1:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d0c6:	83 e8 01             	sub    eax,0x1
c000d0c9:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d0ce:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d0d3:	85 c0                	test   eax,eax
c000d0d5:	75 18                	jne    c000d0ef <sendKeyToTerminal(unsigned char)+0xc1>
c000d0d7:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c000d0dc:	85 c0                	test   eax,eax
c000d0de:	74 0f                	je     c000d0ef <sendKeyToTerminal(unsigned char)+0xc1>
c000d0e0:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000d0ea:	e8 f1 8c 00 00       	call   c0015de0 <schedule()>
c000d0ef:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d0f4:	83 e8 01             	sub    eax,0x1
c000d0f7:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d0fc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d101:	85 c0                	test   eax,eax
c000d103:	75 01                	jne    c000d106 <sendKeyToTerminal(unsigned char)+0xd8>
c000d105:	fb                   	sti    
c000d106:	90                   	nop
c000d107:	c9                   	leave  
c000d108:	c3                   	ret    

c000d109 <sendKeyboardToken(KeyboardToken)>:
c000d109:	55                   	push   ebp
c000d10a:	89 e5                	mov    ebp,esp
c000d10c:	83 ec 18             	sub    esp,0x18
c000d10f:	e8 b9 42 00 00       	call   c00113cd <KeUserIOReceived()>
c000d114:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d11a:	0f b7 c0             	movzx  eax,ax
c000d11d:	83 f2 01             	xor    edx,0x1
c000d120:	88 90 40 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7bc0],dl
c000d126:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d12b:	85 c0                	test   eax,eax
c000d12d:	74 24                	je     c000d153 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d12f:	8b 0d 28 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028428
c000d135:	83 ec 04             	sub    esp,0x4
c000d138:	68 40 84 02 c0       	push   0xc0028440
c000d13d:	83 ec 08             	sub    esp,0x8
c000d140:	89 e2                	mov    edx,esp
c000d142:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d145:	89 02                	mov    DWORD PTR [edx],eax
c000d147:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d14a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d14e:	ff d1                	call   ecx
c000d150:	83 c4 10             	add    esp,0x10
c000d153:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d157:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d15a:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d15f:	0f b6 d2             	movzx  edx,dl
c000d162:	0f b6 c0             	movzx  eax,al
c000d165:	39 c2                	cmp    edx,eax
c000d167:	74 1c                	je     c000d185 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d169:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d16c:	a2 48 88 02 c0       	mov    ds:0xc0028848,al
c000d171:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d176:	0f b6 c0             	movzx  eax,al
c000d179:	83 ec 0c             	sub    esp,0xc
c000d17c:	50                   	push   eax
c000d17d:	e8 80 b3 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d182:	83 c4 10             	add    esp,0x10
c000d185:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d188:	0f b6 c0             	movzx  eax,al
c000d18b:	85 c0                	test   eax,eax
c000d18d:	0f 84 da 00 00 00    	je     c000d26d <sendKeyboardToken(KeyboardToken)+0x164>
c000d193:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d196:	0f b7 c0             	movzx  eax,ax
c000d199:	3d 18 03 00 00       	cmp    eax,0x318
c000d19e:	75 06                	jne    c000d1a6 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d1a0:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d1a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1a9:	0f b7 c0             	movzx  eax,ax
c000d1ac:	3d 19 03 00 00       	cmp    eax,0x319
c000d1b1:	75 06                	jne    c000d1b9 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d1b3:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d1b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1bc:	0f b7 c0             	movzx  eax,ax
c000d1bf:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d1c4:	75 06                	jne    c000d1cc <sendKeyboardToken(KeyboardToken)+0xc3>
c000d1c6:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d1cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1cf:	0f b7 c0             	movzx  eax,ax
c000d1d2:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d1d7:	75 06                	jne    c000d1df <sendKeyboardToken(KeyboardToken)+0xd6>
c000d1d9:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d1df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1e2:	0f b7 c0             	movzx  eax,ax
c000d1e5:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d1ea:	75 06                	jne    c000d1f2 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d1ec:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d1f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1f5:	0f b7 c0             	movzx  eax,ax
c000d1f8:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d1fd:	75 06                	jne    c000d205 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d1ff:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d205:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d208:	0f b7 c0             	movzx  eax,ax
c000d20b:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d210:	75 06                	jne    c000d218 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d212:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d218:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d21b:	0f b7 c0             	movzx  eax,ax
c000d21e:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d223:	75 06                	jne    c000d22b <sendKeyboardToken(KeyboardToken)+0x122>
c000d225:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d22b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d22e:	0f b7 c0             	movzx  eax,ax
c000d231:	3d 20 03 00 00       	cmp    eax,0x320
c000d236:	75 06                	jne    c000d23e <sendKeyboardToken(KeyboardToken)+0x135>
c000d238:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d23e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d241:	0f b7 c0             	movzx  eax,ax
c000d244:	3d 21 03 00 00       	cmp    eax,0x321
c000d249:	75 06                	jne    c000d251 <sendKeyboardToken(KeyboardToken)+0x148>
c000d24b:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d251:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d254:	0f b7 c0             	movzx  eax,ax
c000d257:	3d 22 03 00 00       	cmp    eax,0x322
c000d25c:	0f 85 f1 00 00 00    	jne    c000d353 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d262:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d268:	e9 e6 00 00 00       	jmp    c000d353 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d26d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d270:	0f b7 c0             	movzx  eax,ax
c000d273:	3d 18 03 00 00       	cmp    eax,0x318
c000d278:	75 0a                	jne    c000d284 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d27a:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d280:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d284:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d287:	0f b7 c0             	movzx  eax,ax
c000d28a:	3d 19 03 00 00       	cmp    eax,0x319
c000d28f:	75 0a                	jne    c000d29b <sendKeyboardToken(KeyboardToken)+0x192>
c000d291:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d297:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d29b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d29e:	0f b7 c0             	movzx  eax,ax
c000d2a1:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d2a6:	75 0a                	jne    c000d2b2 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d2a8:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d2ae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2b5:	0f b7 c0             	movzx  eax,ax
c000d2b8:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d2bd:	75 0a                	jne    c000d2c9 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d2bf:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d2c5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2cc:	0f b7 c0             	movzx  eax,ax
c000d2cf:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d2d4:	75 0a                	jne    c000d2e0 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d2d6:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d2dc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2e3:	0f b7 c0             	movzx  eax,ax
c000d2e6:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d2eb:	75 0a                	jne    c000d2f7 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d2ed:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d2f3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2fa:	0f b7 c0             	movzx  eax,ax
c000d2fd:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d302:	75 0a                	jne    c000d30e <sendKeyboardToken(KeyboardToken)+0x205>
c000d304:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d30a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d30e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d311:	0f b7 c0             	movzx  eax,ax
c000d314:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d319:	75 0a                	jne    c000d325 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d31b:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d321:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d328:	0f b7 c0             	movzx  eax,ax
c000d32b:	3d 20 03 00 00       	cmp    eax,0x320
c000d330:	75 0a                	jne    c000d33c <sendKeyboardToken(KeyboardToken)+0x233>
c000d332:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d338:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d33c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d33f:	0f b7 c0             	movzx  eax,ax
c000d342:	3d 21 03 00 00       	cmp    eax,0x321
c000d347:	75 0a                	jne    c000d353 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d349:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d34f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d353:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d356:	0f b7 c0             	movzx  eax,ax
c000d359:	3d 00 02 00 00       	cmp    eax,0x200
c000d35e:	75 2f                	jne    c000d38f <sendKeyboardToken(KeyboardToken)+0x286>
c000d360:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d365:	83 f0 01             	xor    eax,0x1
c000d368:	0f b6 c0             	movzx  eax,al
c000d36b:	85 c0                	test   eax,eax
c000d36d:	74 20                	je     c000d38f <sendKeyboardToken(KeyboardToken)+0x286>
c000d36f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d374:	6a 01                	push   0x1
c000d376:	6a 00                	push   0x0
c000d378:	68 52 cf 00 c0       	push   0xc000cf52
c000d37d:	50                   	push   eax
c000d37e:	e8 0d 88 00 00       	call   c0015b90 <Process::createThread(void (*)(void*), void*, int)>
c000d383:	83 c4 10             	add    esp,0x10
c000d386:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d38d:	eb 3a                	jmp    c000d3c9 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d38f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d392:	0f b7 c0             	movzx  eax,ax
c000d395:	3d 01 02 00 00       	cmp    eax,0x201
c000d39a:	75 2d                	jne    c000d3c9 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d39c:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d3a1:	83 f0 01             	xor    eax,0x1
c000d3a4:	0f b6 c0             	movzx  eax,al
c000d3a7:	85 c0                	test   eax,eax
c000d3a9:	74 1e                	je     c000d3c9 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d3ab:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d3b0:	6a 01                	push   0x1
c000d3b2:	6a 00                	push   0x0
c000d3b4:	68 c0 cf 00 c0       	push   0xc000cfc0
c000d3b9:	50                   	push   eax
c000d3ba:	e8 d1 87 00 00       	call   c0015b90 <Process::createThread(void (*)(void*), void*, int)>
c000d3bf:	83 c4 10             	add    esp,0x10
c000d3c2:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d3c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3cc:	0f b7 c0             	movzx  eax,ax
c000d3cf:	3d 25 03 00 00       	cmp    eax,0x325
c000d3d4:	75 06                	jne    c000d3dc <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d3d6:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d3dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3df:	0f b7 c0             	movzx  eax,ax
c000d3e2:	3d 24 03 00 00       	cmp    eax,0x324
c000d3e7:	75 06                	jne    c000d3ef <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d3e9:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d3ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3f2:	0f b7 c0             	movzx  eax,ax
c000d3f5:	3d 23 03 00 00       	cmp    eax,0x323
c000d3fa:	75 06                	jne    c000d402 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d3fc:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d402:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d405:	0f b7 c0             	movzx  eax,ax
c000d408:	3d 26 03 00 00       	cmp    eax,0x326
c000d40d:	75 06                	jne    c000d415 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d40f:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d415:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d418:	0f b7 c0             	movzx  eax,ax
c000d41b:	3d 27 03 00 00       	cmp    eax,0x327
c000d420:	75 06                	jne    c000d428 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d422:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d428:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d42b:	0f b7 c0             	movzx  eax,ax
c000d42e:	3d 22 03 00 00       	cmp    eax,0x322
c000d433:	75 06                	jne    c000d43b <sendKeyboardToken(KeyboardToken)+0x332>
c000d435:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d43b:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d43f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d442:	83 f0 01             	xor    eax,0x1
c000d445:	0f b6 c0             	movzx  eax,al
c000d448:	85 c0                	test   eax,eax
c000d44a:	74 7c                	je     c000d4c8 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d44c:	a0 41 85 02 c0       	mov    al,ds:0xc0028541
c000d451:	0f b6 c0             	movzx  eax,al
c000d454:	85 c0                	test   eax,eax
c000d456:	74 43                	je     c000d49b <sendKeyboardToken(KeyboardToken)+0x392>
c000d458:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d45c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d460:	85 c0                	test   eax,eax
c000d462:	74 2b                	je     c000d48f <sendKeyboardToken(KeyboardToken)+0x386>
c000d464:	8b 15 44 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028844
c000d46a:	89 d0                	mov    eax,edx
c000d46c:	c1 e0 02             	shl    eax,0x2
c000d46f:	01 d0                	add    eax,edx
c000d471:	01 c0                	add    eax,eax
c000d473:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d478:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d47b:	0f b7 c0             	movzx  eax,ax
c000d47e:	8d 50 d0             	lea    edx,[eax-0x30]
c000d481:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d486:	01 d0                	add    eax,edx
c000d488:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d48d:	eb 71                	jmp    c000d500 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d48f:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d499:	eb 65                	jmp    c000d500 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d49b:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4a0:	85 c0                	test   eax,eax
c000d4a2:	74 18                	je     c000d4bc <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d4a4:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4a9:	0f b6 c0             	movzx  eax,al
c000d4ac:	83 ec 0c             	sub    esp,0xc
c000d4af:	50                   	push   eax
c000d4b0:	e8 79 fb ff ff       	call   c000d02e <sendKeyToTerminal(unsigned char)>
c000d4b5:	83 c4 10             	add    esp,0x10
c000d4b8:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d4bc:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d4c6:	eb 38                	jmp    c000d500 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4cb:	0f b7 c0             	movzx  eax,ax
c000d4ce:	3d 01 01 00 00       	cmp    eax,0x101
c000d4d3:	75 2b                	jne    c000d500 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d4d5:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4da:	85 c0                	test   eax,eax
c000d4dc:	74 18                	je     c000d4f6 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d4de:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d4e3:	0f b6 c0             	movzx  eax,al
c000d4e6:	83 ec 0c             	sub    esp,0xc
c000d4e9:	50                   	push   eax
c000d4ea:	e8 3f fb ff ff       	call   c000d02e <sendKeyToTerminal(unsigned char)>
c000d4ef:	83 c4 10             	add    esp,0x10
c000d4f2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d4f6:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d500:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d503:	83 f0 01             	xor    eax,0x1
c000d506:	0f b6 c0             	movzx  eax,al
c000d509:	85 c0                	test   eax,eax
c000d50b:	74 5a                	je     c000d567 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d50d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d510:	83 f0 01             	xor    eax,0x1
c000d513:	0f b6 c0             	movzx  eax,al
c000d516:	85 c0                	test   eax,eax
c000d518:	74 4d                	je     c000d567 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d51a:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d51f:	83 f0 01             	xor    eax,0x1
c000d522:	0f b6 c0             	movzx  eax,al
c000d525:	85 c0                	test   eax,eax
c000d527:	74 3e                	je     c000d567 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d52c:	0f b7 c0             	movzx  eax,ax
c000d52f:	83 f8 1f             	cmp    eax,0x1f
c000d532:	76 0b                	jbe    c000d53f <sendKeyboardToken(KeyboardToken)+0x436>
c000d534:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d537:	0f b7 c0             	movzx  eax,ax
c000d53a:	83 f8 7e             	cmp    eax,0x7e
c000d53d:	76 16                	jbe    c000d555 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d53f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d542:	0f b7 c0             	movzx  eax,ax
c000d545:	83 f8 0a             	cmp    eax,0xa
c000d548:	74 0b                	je     c000d555 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d54a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d54d:	0f b7 c0             	movzx  eax,ax
c000d550:	83 f8 08             	cmp    eax,0x8
c000d553:	75 12                	jne    c000d567 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d558:	0f b6 c0             	movzx  eax,al
c000d55b:	83 ec 0c             	sub    esp,0xc
c000d55e:	50                   	push   eax
c000d55f:	e8 ca fa ff ff       	call   c000d02e <sendKeyToTerminal(unsigned char)>
c000d564:	83 c4 10             	add    esp,0x10
c000d567:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d56a:	83 f0 01             	xor    eax,0x1
c000d56d:	0f b6 c0             	movzx  eax,al
c000d570:	85 c0                	test   eax,eax
c000d572:	74 5d                	je     c000d5d1 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d574:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d577:	83 f0 01             	xor    eax,0x1
c000d57a:	0f b6 c0             	movzx  eax,al
c000d57d:	85 c0                	test   eax,eax
c000d57f:	74 50                	je     c000d5d1 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d581:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d586:	0f b6 c0             	movzx  eax,al
c000d589:	85 c0                	test   eax,eax
c000d58b:	74 44                	je     c000d5d1 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d58d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d590:	0f b7 c0             	movzx  eax,ax
c000d593:	83 f8 3f             	cmp    eax,0x3f
c000d596:	76 39                	jbe    c000d5d1 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d598:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d59b:	0f b7 c0             	movzx  eax,ax
c000d59e:	83 f8 7f             	cmp    eax,0x7f
c000d5a1:	77 2e                	ja     c000d5d1 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d5a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5a6:	88 c2                	mov    dl,al
c000d5a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ab:	0f b7 c0             	movzx  eax,ax
c000d5ae:	83 f8 5f             	cmp    eax,0x5f
c000d5b1:	76 04                	jbe    c000d5b7 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d5b3:	b0 20                	mov    al,0x20
c000d5b5:	eb 02                	jmp    c000d5b9 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d5b7:	b0 00                	mov    al,0x0
c000d5b9:	89 d1                	mov    ecx,edx
c000d5bb:	29 c1                	sub    ecx,eax
c000d5bd:	89 c8                	mov    eax,ecx
c000d5bf:	83 e8 40             	sub    eax,0x40
c000d5c2:	0f b6 c0             	movzx  eax,al
c000d5c5:	83 ec 0c             	sub    esp,0xc
c000d5c8:	50                   	push   eax
c000d5c9:	e8 60 fa ff ff       	call   c000d02e <sendKeyToTerminal(unsigned char)>
c000d5ce:	83 c4 10             	add    esp,0x10
c000d5d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5d4:	0f b7 c0             	movzx  eax,ax
c000d5d7:	3d 00 03 00 00       	cmp    eax,0x300
c000d5dc:	75 12                	jne    c000d5f0 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d5de:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d5e1:	83 f0 01             	xor    eax,0x1
c000d5e4:	0f b6 c0             	movzx  eax,al
c000d5e7:	85 c0                	test   eax,eax
c000d5e9:	74 05                	je     c000d5f0 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d5eb:	e8 13 af ff ff       	call   c0008503 <doTerminalCycle()>
c000d5f0:	90                   	nop
c000d5f1:	c9                   	leave  
c000d5f2:	c3                   	ret    

c000d5f3 <clearInternalKeybuffer(VgaText*)>:
c000d5f3:	55                   	push   ebp
c000d5f4:	89 e5                	mov    ebp,esp
c000d5f6:	83 ec 08             	sub    esp,0x8
c000d5f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5fc:	05 02 01 00 00       	add    eax,0x102
c000d601:	83 ec 0c             	sub    esp,0xc
c000d604:	50                   	push   eax
c000d605:	e8 66 2f ff ff       	call   c0000570 <strlen>
c000d60a:	83 c4 10             	add    esp,0x10
c000d60d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d610:	81 c2 02 01 00 00    	add    edx,0x102
c000d616:	83 ec 04             	sub    esp,0x4
c000d619:	50                   	push   eax
c000d61a:	6a 00                	push   0x0
c000d61c:	52                   	push   edx
c000d61d:	e8 ce 2e ff ff       	call   c00004f0 <memset>
c000d622:	83 c4 10             	add    esp,0x10
c000d625:	90                   	nop
c000d626:	c9                   	leave  
c000d627:	c3                   	ret    

c000d628 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d628:	55                   	push   ebp
c000d629:	89 e5                	mov    ebp,esp
c000d62b:	83 ec 18             	sub    esp,0x18
c000d62e:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d633:	85 c0                	test   eax,eax
c000d635:	74 2a                	je     c000d661 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d637:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d63d:	8b 0d 28 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028428
c000d643:	83 ec 04             	sub    esp,0x4
c000d646:	68 40 84 02 c0       	push   0xc0028440
c000d64b:	83 ec 08             	sub    esp,0x8
c000d64e:	89 e2                	mov    edx,esp
c000d650:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d653:	89 02                	mov    DWORD PTR [edx],eax
c000d655:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d658:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d65c:	ff d1                	call   ecx
c000d65e:	83 c4 10             	add    esp,0x10
c000d661:	fb                   	sti    
c000d662:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d669:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d66d:	0f 84 0d 01 00 00    	je     c000d780 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d673:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d676:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d67c:	0f be c0             	movsx  eax,al
c000d67f:	85 c0                	test   eax,eax
c000d681:	75 2c                	jne    c000d6af <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d683:	fa                   	cli    
c000d684:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d689:	83 c0 01             	add    eax,0x1
c000d68c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d691:	e8 4a 87 00 00       	call   c0015de0 <schedule()>
c000d696:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d69b:	83 e8 01             	sub    eax,0x1
c000d69e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d6a3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d6a8:	85 c0                	test   eax,eax
c000d6aa:	75 c7                	jne    c000d673 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d6ac:	fb                   	sti    
c000d6ad:	eb c4                	jmp    c000d673 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d6af:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d6b2:	8d 50 01             	lea    edx,[eax+0x1]
c000d6b5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d6b8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d6bb:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d6c1:	88 10                	mov    BYTE PTR [eax],dl
c000d6c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6c6:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d6cc:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d6cf:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6d3:	83 f8 03             	cmp    eax,0x3
c000d6d6:	75 1e                	jne    c000d6f6 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d6d8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d6dd:	8b 00                	mov    eax,DWORD PTR [eax]
c000d6df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6e2:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d6e8:	83 ec 08             	sub    esp,0x8
c000d6eb:	6a 02                	push   0x2
c000d6ed:	50                   	push   eax
c000d6ee:	e8 2b 41 00 00       	call   c001181e <KeRaiseSignal(SigHandlerBlock*, int)>
c000d6f3:	83 c4 10             	add    esp,0x10
c000d6f6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6fa:	83 f8 1c             	cmp    eax,0x1c
c000d6fd:	75 1e                	jne    c000d71d <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d6ff:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d704:	8b 00                	mov    eax,DWORD PTR [eax]
c000d706:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d709:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d70f:	83 ec 08             	sub    esp,0x8
c000d712:	6a 09                	push   0x9
c000d714:	50                   	push   eax
c000d715:	e8 04 41 00 00       	call   c001181e <KeRaiseSignal(SigHandlerBlock*, int)>
c000d71a:	83 c4 10             	add    esp,0x10
c000d71d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d720:	05 02 01 00 00       	add    eax,0x102
c000d725:	83 ec 0c             	sub    esp,0xc
c000d728:	50                   	push   eax
c000d729:	e8 42 2e ff ff       	call   c0000570 <strlen>
c000d72e:	83 c4 10             	add    esp,0x10
c000d731:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d734:	81 c2 02 01 00 00    	add    edx,0x102
c000d73a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d73d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d740:	81 c2 02 01 00 00    	add    edx,0x102
c000d746:	83 ec 04             	sub    esp,0x4
c000d749:	50                   	push   eax
c000d74a:	51                   	push   ecx
c000d74b:	52                   	push   edx
c000d74c:	e8 7f 2c ff ff       	call   c00003d0 <memmove>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d758:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d75c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d760:	83 f8 0a             	cmp    eax,0xa
c000d763:	74 16                	je     c000d77b <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d765:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d769:	83 f8 03             	cmp    eax,0x3
c000d76c:	74 0d                	je     c000d77b <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d76e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d772:	83 f8 1c             	cmp    eax,0x1c
c000d775:	0f 85 ee fe ff ff    	jne    c000d669 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d77b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d77e:	eb 03                	jmp    c000d783 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d780:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d783:	c9                   	leave  
c000d784:	c3                   	ret    
c000d785:	90                   	nop

c000d786 <Keyboard::Keyboard(char const*)>:
c000d786:	83 ec 0c             	sub    esp,0xc
c000d789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d78d:	83 ec 08             	sub    esp,0x8
c000d790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d794:	50                   	push   eax
c000d795:	e8 4c f1 ff ff       	call   c000c8e6 <Device::Device(char const*)>
c000d79a:	83 c4 10             	add    esp,0x10
c000d79d:	ba 3c 19 02 c0       	mov    edx,0xc002193c
c000d7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7a6:	89 10                	mov    DWORD PTR [eax],edx
c000d7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ac:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d7b6:	c6 05 24 84 02 c0 01 	mov    BYTE PTR ds:0xc0028424,0x1
c000d7bd:	90                   	nop
c000d7be:	83 c4 0c             	add    esp,0xc
c000d7c1:	c3                   	ret    

c000d7c2 <Keyboard::~Keyboard()>:
c000d7c2:	83 ec 0c             	sub    esp,0xc
c000d7c5:	ba 3c 19 02 c0       	mov    edx,0xc002193c
c000d7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ce:	89 10                	mov    DWORD PTR [eax],edx
c000d7d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d4:	83 ec 0c             	sub    esp,0xc
c000d7d7:	50                   	push   eax
c000d7d8:	e8 73 ee ff ff       	call   c000c650 <Device::~Device()>
c000d7dd:	83 c4 10             	add    esp,0x10
c000d7e0:	90                   	nop
c000d7e1:	83 c4 0c             	add    esp,0xc
c000d7e4:	c3                   	ret    
c000d7e5:	90                   	nop

c000d7e6 <Keyboard::~Keyboard()>:
c000d7e6:	83 ec 0c             	sub    esp,0xc
c000d7e9:	83 ec 0c             	sub    esp,0xc
c000d7ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7f0:	e8 cd ff ff ff       	call   c000d7c2 <Keyboard::~Keyboard()>
c000d7f5:	83 c4 10             	add    esp,0x10
c000d7f8:	83 ec 08             	sub    esp,0x8
c000d7fb:	68 5c 01 00 00       	push   0x15c
c000d800:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d804:	e8 0f d0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d809:	83 c4 10             	add    esp,0x10
c000d80c:	83 c4 0c             	add    esp,0xc
c000d80f:	c3                   	ret    

c000d810 <LogicalDisk::close(int, int, void*)>:
c000d810:	83 c8 ff             	or     eax,0xffffffff
c000d813:	c3                   	ret    

c000d814 <LogicalDisk::~LogicalDisk()>:
c000d814:	83 ec 0c             	sub    esp,0xc
c000d817:	ba b4 19 02 c0       	mov    edx,0xc00219b4
c000d81c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d820:	89 10                	mov    DWORD PTR [eax],edx
c000d822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d826:	83 ec 0c             	sub    esp,0xc
c000d829:	50                   	push   eax
c000d82a:	e8 21 ee ff ff       	call   c000c650 <Device::~Device()>
c000d82f:	83 c4 10             	add    esp,0x10
c000d832:	90                   	nop
c000d833:	83 c4 0c             	add    esp,0xc
c000d836:	c3                   	ret    
c000d837:	90                   	nop

c000d838 <LogicalDisk::~LogicalDisk()>:
c000d838:	83 ec 0c             	sub    esp,0xc
c000d83b:	83 ec 0c             	sub    esp,0xc
c000d83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d842:	e8 cd ff ff ff       	call   c000d814 <LogicalDisk::~LogicalDisk()>
c000d847:	83 c4 10             	add    esp,0x10
c000d84a:	83 ec 08             	sub    esp,0x8
c000d84d:	68 78 01 00 00       	push   0x178
c000d852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d856:	e8 bd cf ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d85b:	83 c4 10             	add    esp,0x10
c000d85e:	83 c4 0c             	add    esp,0xc
c000d861:	c3                   	ret    

c000d862 <LogicalDisk::open(int, int, void*)>:
c000d862:	83 ec 18             	sub    esp,0x18
c000d865:	68 68 19 02 c0       	push   0xc0021968
c000d86a:	e8 0e 3b 00 00       	call   c001137d <KePanic(char const*)>
c000d86f:	83 c8 ff             	or     eax,0xffffffff
c000d872:	83 c4 1c             	add    esp,0x1c
c000d875:	c3                   	ret    

c000d876 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d876:	53                   	push   ebx
c000d877:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d87b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d87f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d883:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d889:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d88f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d895:	77 10                	ja     c000d8a7 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d897:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d89d:	89 d3                	mov    ebx,edx
c000d89f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d8a5:	72 05                	jb     c000d8ac <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d8a7:	83 c8 ff             	or     eax,0xffffffff
c000d8aa:	89 c2                	mov    edx,eax
c000d8ac:	5b                   	pop    ebx
c000d8ad:	c3                   	ret    

c000d8ae <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d8ae:	56                   	push   esi
c000d8af:	83 c8 ff             	or     eax,0xffffffff
c000d8b2:	53                   	push   ebx
c000d8b3:	89 c2                	mov    edx,eax
c000d8b5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d8b9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d8bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d8c1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d8c7:	77 27                	ja     c000d8f0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d8c9:	89 d8                	mov    eax,ebx
c000d8cb:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d8d1:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d8d7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d8dc:	89 c2                	mov    edx,eax
c000d8de:	73 10                	jae    c000d8f0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d8e0:	89 c8                	mov    eax,ecx
c000d8e2:	89 da                	mov    edx,ebx
c000d8e4:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d8ea:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d8f0:	5b                   	pop    ebx
c000d8f1:	5e                   	pop    esi
c000d8f2:	c3                   	ret    
c000d8f3:	90                   	nop

c000d8f4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d8f4:	83 ec 1c             	sub    esp,0x1c
c000d8f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d8fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d903:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d907:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d90b:	89 04 24             	mov    DWORD PTR [esp],eax
c000d90e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d912:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d916:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d91a:	83 ec 08             	sub    esp,0x8
c000d91d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d921:	50                   	push   eax
c000d922:	e8 bf ef ff ff       	call   c000c8e6 <Device::Device(char const*)>
c000d927:	83 c4 10             	add    esp,0x10
c000d92a:	ba b4 19 02 c0       	mov    edx,0xc00219b4
c000d92f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d933:	89 10                	mov    DWORD PTR [eax],edx
c000d935:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d939:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d944:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d94b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d94f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d95a:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d964:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d968:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d96c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d970:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d976:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d97c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d980:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d983:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d987:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d98d:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d993:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d997:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d99b:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d9a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9a5:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d9af:	90                   	nop
c000d9b0:	83 c4 1c             	add    esp,0x1c
c000d9b3:	c3                   	ret    

c000d9b4 <LogicalDisk::assignDriveLetter()>:
c000d9b4:	55                   	push   ebp
c000d9b5:	57                   	push   edi
c000d9b6:	56                   	push   esi
c000d9b7:	53                   	push   ebx
c000d9b8:	83 ec 14             	sub    esp,0x14
c000d9bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d9bf:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d9c5:	b0 41                	mov    al,0x41
c000d9c7:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d9cd:	84 d2                	test   dl,dl
c000d9cf:	75 02                	jne    c000d9d3 <LogicalDisk::assignDriveLetter()+0x1f>
c000d9d1:	b0 43                	mov    al,0x43
c000d9d3:	8b 3d 60 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028860
c000d9d9:	0f b6 ca             	movzx  ecx,dl
c000d9dc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d9e0:	0f be e8             	movsx  ebp,al
c000d9e3:	8b 3d 64 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028864
c000d9e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d9ed:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d9f1:	3c 43                	cmp    al,0x43
c000d9f3:	75 10                	jne    c000da05 <LogicalDisk::assignDriveLetter()+0x51>
c000d9f5:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d9fc:	75 5a                	jne    c000da58 <LogicalDisk::assignDriveLetter()+0xa4>
c000d9fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000da03:	75 53                	jne    c000da58 <LogicalDisk::assignDriveLetter()+0xa4>
c000da05:	8d 75 bf             	lea    esi,[ebp-0x41]
c000da08:	ba 01 00 00 00       	mov    edx,0x1
c000da0d:	89 34 24             	mov    DWORD PTR [esp],esi
c000da10:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000da13:	d3 e2                	shl    edx,cl
c000da15:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000da19:	89 d7                	mov    edi,edx
c000da1b:	89 d6                	mov    esi,edx
c000da1d:	c1 ff 1f             	sar    edi,0x1f
c000da20:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000da24:	21 f9                	and    ecx,edi
c000da26:	09 d1                	or     ecx,edx
c000da28:	75 2e                	jne    c000da58 <LogicalDisk::assignDriveLetter()+0xa4>
c000da2a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000da2e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da32:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000da38:	09 f2                	or     edx,esi
c000da3a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000da3d:	89 15 60 88 02 c0    	mov    DWORD PTR ds:0xc0028860,edx
c000da43:	89 1c b5 80 88 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7780],ebx
c000da4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000da4e:	09 fa                	or     edx,edi
c000da50:	89 15 64 88 02 c0    	mov    DWORD PTR ds:0xc0028864,edx
c000da56:	eb 0d                	jmp    c000da65 <LogicalDisk::assignDriveLetter()+0xb1>
c000da58:	8d 50 01             	lea    edx,[eax+0x1]
c000da5b:	45                   	inc    ebp
c000da5c:	88 d0                	mov    al,dl
c000da5e:	80 fa 5b             	cmp    dl,0x5b
c000da61:	75 8e                	jne    c000d9f1 <LogicalDisk::assignDriveLetter()+0x3d>
c000da63:	31 c0                	xor    eax,eax
c000da65:	83 c4 14             	add    esp,0x14
c000da68:	5b                   	pop    ebx
c000da69:	5e                   	pop    esi
c000da6a:	5f                   	pop    edi
c000da6b:	5d                   	pop    ebp
c000da6c:	c3                   	ret    
c000da6d:	90                   	nop

c000da6e <LogicalDisk::mount()>:
c000da6e:	56                   	push   esi
c000da6f:	53                   	push   ebx
c000da70:	53                   	push   ebx
c000da71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da75:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c000da7b:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000da85:	85 db                	test   ebx,ebx
c000da87:	74 27                	je     c000dab0 <LogicalDisk::mount()+0x42>
c000da89:	51                   	push   ecx
c000da8a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000da91:	8b 13                	mov    edx,DWORD PTR [ebx]
c000da93:	83 e8 41             	sub    eax,0x41
c000da96:	50                   	push   eax
c000da97:	56                   	push   esi
c000da98:	53                   	push   ebx
c000da99:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000da9c:	83 c4 10             	add    esp,0x10
c000da9f:	84 c0                	test   al,al
c000daa1:	74 08                	je     c000daab <LogicalDisk::mount()+0x3d>
c000daa3:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000daa9:	eb 07                	jmp    c000dab2 <LogicalDisk::mount()+0x44>
c000daab:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000daae:	eb d5                	jmp    c000da85 <LogicalDisk::mount()+0x17>
c000dab0:	31 c0                	xor    eax,eax
c000dab2:	5a                   	pop    edx
c000dab3:	5b                   	pop    ebx
c000dab4:	5e                   	pop    esi
c000dab5:	c3                   	ret    

c000dab6 <LogicalDisk::unmount()>:
c000dab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000daba:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dac4:	c3                   	ret    
c000dac5:	90                   	nop

c000dac6 <LogicalDisk::eject()>:
c000dac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000daca:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dad0:	8b 10                	mov    edx,DWORD PTR [eax]
c000dad2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dad6:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dad9:	90                   	nop

c000dada <LogicalDisk::unassignDriveLetter()>:
c000dada:	57                   	push   edi
c000dadb:	56                   	push   esi
c000dadc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dae0:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dae7:	85 c9                	test   ecx,ecx
c000dae9:	75 0f                	jne    c000dafa <LogicalDisk::unassignDriveLetter()+0x20>
c000daeb:	c7 44 24 0c 8c 19 02 c0 	mov    DWORD PTR [esp+0xc],0xc002198c
c000daf3:	5e                   	pop    esi
c000daf4:	5f                   	pop    edi
c000daf5:	e9 83 38 00 00       	jmp    c001137d <KePanic(char const*)>
c000dafa:	83 e9 41             	sub    ecx,0x41
c000dafd:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000db04:	b8 01 00 00 00       	mov    eax,0x1
c000db09:	c7 04 8d 80 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7780],0x0
c000db14:	d3 e0                	shl    eax,cl
c000db16:	89 c7                	mov    edi,eax
c000db18:	f7 d0                	not    eax
c000db1a:	c1 ff 1f             	sar    edi,0x1f
c000db1d:	21 05 60 88 02 c0    	and    DWORD PTR ds:0xc0028860,eax
c000db23:	89 fe                	mov    esi,edi
c000db25:	f7 d6                	not    esi
c000db27:	21 35 64 88 02 c0    	and    DWORD PTR ds:0xc0028864,esi
c000db2d:	5e                   	pop    esi
c000db2e:	5f                   	pop    edi
c000db2f:	c3                   	ret    

c000db30 <LogicalDisk::read(unsigned long long, int, void*)>:
c000db30:	57                   	push   edi
c000db31:	56                   	push   esi
c000db32:	53                   	push   ebx
c000db33:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000db37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db3b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000db3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db43:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db49:	77 41                	ja     c000db8c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000db4b:	99                   	cdq    
c000db4c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000db52:	01 c8                	add    eax,ecx
c000db54:	11 da                	adc    edx,ebx
c000db56:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000db5c:	19 d7                	sbb    edi,edx
c000db5e:	72 33                	jb     c000db93 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000db60:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000db66:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000db6c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000db70:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000db74:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000db7a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000db80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db84:	5b                   	pop    ebx
c000db85:	5e                   	pop    esi
c000db86:	5f                   	pop    edi
c000db87:	e9 c6 0a 00 00       	jmp    c000e652 <VCache::read(unsigned long long, int, void*)>
c000db8c:	b8 05 00 00 00       	mov    eax,0x5
c000db91:	eb 05                	jmp    c000db98 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000db93:	b8 07 00 00 00       	mov    eax,0x7
c000db98:	5b                   	pop    ebx
c000db99:	5e                   	pop    esi
c000db9a:	5f                   	pop    edi
c000db9b:	c3                   	ret    

c000db9c <LogicalDisk::write(unsigned long long, int, void*)>:
c000db9c:	57                   	push   edi
c000db9d:	56                   	push   esi
c000db9e:	53                   	push   ebx
c000db9f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dba3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dba7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dbab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dbaf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dbb5:	77 41                	ja     c000dbf8 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000dbb7:	99                   	cdq    
c000dbb8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dbbe:	01 c8                	add    eax,ecx
c000dbc0:	11 da                	adc    edx,ebx
c000dbc2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dbc8:	19 d7                	sbb    edi,edx
c000dbca:	72 33                	jb     c000dbff <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000dbcc:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dbd2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dbd8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dbdc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dbe0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dbe6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dbec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbf0:	5b                   	pop    ebx
c000dbf1:	5e                   	pop    esi
c000dbf2:	5f                   	pop    edi
c000dbf3:	e9 6c 09 00 00       	jmp    c000e564 <VCache::write(unsigned long long, int, void*)>
c000dbf8:	b8 05 00 00 00       	mov    eax,0x5
c000dbfd:	eb 05                	jmp    c000dc04 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dbff:	b8 07 00 00 00       	mov    eax,0x7
c000dc04:	5b                   	pop    ebx
c000dc05:	5e                   	pop    esi
c000dc06:	5f                   	pop    edi
c000dc07:	c3                   	ret    

c000dc08 <Mouse::Mouse(char const*)>:
c000dc08:	83 ec 0c             	sub    esp,0xc
c000dc0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc0f:	83 ec 08             	sub    esp,0x8
c000dc12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc16:	50                   	push   eax
c000dc17:	e8 ca ec ff ff       	call   c000c8e6 <Device::Device(char const*)>
c000dc1c:	83 c4 10             	add    esp,0x10
c000dc1f:	ba e0 19 02 c0       	mov    edx,0xc00219e0
c000dc24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc28:	89 10                	mov    DWORD PTR [eax],edx
c000dc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc2e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dc38:	90                   	nop
c000dc39:	83 c4 0c             	add    esp,0xc
c000dc3c:	c3                   	ret    
c000dc3d:	90                   	nop
c000dc3e:	66 90                	xchg   ax,ax

c000dc40 <Mouse::~Mouse()>:
c000dc40:	83 ec 0c             	sub    esp,0xc
c000dc43:	ba e0 19 02 c0       	mov    edx,0xc00219e0
c000dc48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc4c:	89 10                	mov    DWORD PTR [eax],edx
c000dc4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc52:	83 ec 0c             	sub    esp,0xc
c000dc55:	50                   	push   eax
c000dc56:	e8 f5 e9 ff ff       	call   c000c650 <Device::~Device()>
c000dc5b:	83 c4 10             	add    esp,0x10
c000dc5e:	90                   	nop
c000dc5f:	83 c4 0c             	add    esp,0xc
c000dc62:	c3                   	ret    
c000dc63:	90                   	nop

c000dc64 <Mouse::~Mouse()>:
c000dc64:	83 ec 0c             	sub    esp,0xc
c000dc67:	83 ec 0c             	sub    esp,0xc
c000dc6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc6e:	e8 cd ff ff ff       	call   c000dc40 <Mouse::~Mouse()>
c000dc73:	83 c4 10             	add    esp,0x10
c000dc76:	83 ec 08             	sub    esp,0x8
c000dc79:	68 58 01 00 00       	push   0x158
c000dc7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc82:	e8 91 cb ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dc87:	83 c4 10             	add    esp,0x10
c000dc8a:	83 c4 0c             	add    esp,0xc
c000dc8d:	c3                   	ret    

c000dc8e <NIC::getMAC()>:
c000dc8e:	31 c0                	xor    eax,eax
c000dc90:	31 d2                	xor    edx,edx
c000dc92:	c3                   	ret    
c000dc93:	90                   	nop

c000dc94 <NIC::write(int, unsigned char*, int*)>:
c000dc94:	b8 01 00 00 00       	mov    eax,0x1
c000dc99:	c3                   	ret    

c000dc9a <NIC::NIC(char const*)>:
c000dc9a:	83 ec 0c             	sub    esp,0xc
c000dc9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dca1:	83 ec 08             	sub    esp,0x8
c000dca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dca8:	50                   	push   eax
c000dca9:	e8 38 ec ff ff       	call   c000c8e6 <Device::Device(char const*)>
c000dcae:	83 c4 10             	add    esp,0x10
c000dcb1:	ba 0c 1a 02 c0       	mov    edx,0xc0021a0c
c000dcb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcba:	89 10                	mov    DWORD PTR [eax],edx
c000dcbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcc0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dcca:	90                   	nop
c000dccb:	83 c4 0c             	add    esp,0xc
c000dcce:	c3                   	ret    
c000dccf:	90                   	nop

c000dcd0 <NIC::~NIC()>:
c000dcd0:	83 ec 0c             	sub    esp,0xc
c000dcd3:	ba 0c 1a 02 c0       	mov    edx,0xc0021a0c
c000dcd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcdc:	89 10                	mov    DWORD PTR [eax],edx
c000dcde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dce2:	83 ec 0c             	sub    esp,0xc
c000dce5:	50                   	push   eax
c000dce6:	e8 65 e9 ff ff       	call   c000c650 <Device::~Device()>
c000dceb:	83 c4 10             	add    esp,0x10
c000dcee:	90                   	nop
c000dcef:	83 c4 0c             	add    esp,0xc
c000dcf2:	c3                   	ret    
c000dcf3:	90                   	nop

c000dcf4 <NIC::~NIC()>:
c000dcf4:	83 ec 0c             	sub    esp,0xc
c000dcf7:	83 ec 0c             	sub    esp,0xc
c000dcfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcfe:	e8 cd ff ff ff       	call   c000dcd0 <NIC::~NIC()>
c000dd03:	83 c4 10             	add    esp,0x10
c000dd06:	83 ec 08             	sub    esp,0x8
c000dd09:	68 58 01 00 00       	push   0x158
c000dd0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd12:	e8 01 cb ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dd17:	83 c4 10             	add    esp,0x10
c000dd1a:	83 c4 0c             	add    esp,0xc
c000dd1d:	c3                   	ret    

c000dd1e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dd1e:	55                   	push   ebp
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	81 ec 28 01 00 00    	sub    esp,0x128
c000dd28:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000dd2f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000dd36:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000dd3d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000dd44:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd48:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd4c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dd53:	e8 8a ec ff ff       	call   c000c9e2 <Device::getName()>
c000dd58:	5a                   	pop    edx
c000dd59:	59                   	pop    ecx
c000dd5a:	50                   	push   eax
c000dd5b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dd5f:	55                   	push   ebp
c000dd60:	e8 db 28 ff ff       	call   c0000640 <strcpy>
c000dd65:	5b                   	pop    ebx
c000dd66:	58                   	pop    eax
c000dd67:	68 38 1a 02 c0       	push   0xc0021a38
c000dd6c:	55                   	push   ebp
c000dd6d:	e8 ce 2a ff ff       	call   c0000840 <strcat>
c000dd72:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dd79:	e8 38 9d ff ff       	call   c0007ab6 <malloc>
c000dd7e:	83 c4 0c             	add    esp,0xc
c000dd81:	89 c3                	mov    ebx,eax
c000dd83:	57                   	push   edi
c000dd84:	56                   	push   esi
c000dd85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd8d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dd94:	55                   	push   ebp
c000dd95:	50                   	push   eax
c000dd96:	e8 59 fb ff ff       	call   c000d8f4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dd9b:	83 c4 14             	add    esp,0x14
c000dd9e:	53                   	push   ebx
c000dd9f:	e8 10 fc ff ff       	call   c000d9b4 <LogicalDisk::assignDriveLetter()>
c000dda4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dda7:	e8 c2 fc ff ff       	call   c000da6e <LogicalDisk::mount()>
c000ddac:	58                   	pop    eax
c000ddad:	5a                   	pop    edx
c000ddae:	53                   	push   ebx
c000ddaf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ddb6:	e8 93 e9 ff ff       	call   c000c74e <Device::addChild(Device*)>
c000ddbb:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ddc1:	5b                   	pop    ebx
c000ddc2:	5e                   	pop    esi
c000ddc3:	5f                   	pop    edi
c000ddc4:	5d                   	pop    ebp
c000ddc5:	c3                   	ret    

c000ddc6 <createPartitionsForDisk(PhysicalDisk*)>:
c000ddc6:	55                   	push   ebp
c000ddc7:	57                   	push   edi
c000ddc8:	56                   	push   esi
c000ddc9:	53                   	push   ebx
c000ddca:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ddd0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ddd7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dddd:	3d 00 02 00 00       	cmp    eax,0x200
c000dde2:	74 27                	je     c000de0b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000dde4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ddea:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ddf0:	83 ec 10             	sub    esp,0x10
c000ddf3:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ddf7:	99                   	cdq    
c000ddf8:	c1 e6 0a             	shl    esi,0xa
c000ddfb:	52                   	push   edx
c000ddfc:	89 fd                	mov    ebp,edi
c000ddfe:	50                   	push   eax
c000ddff:	55                   	push   ebp
c000de00:	56                   	push   esi
c000de01:	e8 4a 16 01 00       	call   c001f450 <__udivdi3>
c000de06:	e9 b9 00 00 00       	jmp    c000dec4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000de0b:	83 ec 0c             	sub    esp,0xc
c000de0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000de10:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000de14:	56                   	push   esi
c000de15:	6a 01                	push   0x1
c000de17:	6a 00                	push   0x0
c000de19:	6a 00                	push   0x0
c000de1b:	53                   	push   ebx
c000de1c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000de1f:	83 c4 20             	add    esp,0x20
c000de22:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000de2a:	75 0a                	jne    c000de36 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000de2c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000de34:	74 2c                	je     c000de62 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000de36:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de3c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de42:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de48:	83 ec 10             	sub    esp,0x10
c000de4b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de4f:	89 f7                	mov    edi,esi
c000de51:	c1 e0 0a             	shl    eax,0xa
c000de54:	c1 ff 1f             	sar    edi,0x1f
c000de57:	57                   	push   edi
c000de58:	56                   	push   esi
c000de59:	52                   	push   edx
c000de5a:	50                   	push   eax
c000de5b:	e8 f0 15 01 00       	call   c001f450 <__udivdi3>
c000de60:	eb 62                	jmp    c000dec4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000de62:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000de69:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000de70:	89 cf                	mov    edi,ecx
c000de72:	83 e2 7f             	and    edx,0x7f
c000de75:	83 e7 7f             	and    edi,0x7f
c000de78:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000de7f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000de82:	83 e0 7f             	and    eax,0x7f
c000de85:	8d 14 01             	lea    edx,[ecx+eax*1]
c000de88:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000de8f:	83 e0 7f             	and    eax,0x7f
c000de92:	01 d0                	add    eax,edx
c000de94:	89 c5                	mov    ebp,eax
c000de96:	84 c0                	test   al,al
c000de98:	74 41                	je     c000dedb <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000de9a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dea0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dea6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000deac:	83 ec 10             	sub    esp,0x10
c000deaf:	0f a4 c2 0a          	shld   edx,eax,0xa
c000deb3:	89 f7                	mov    edi,esi
c000deb5:	c1 e0 0a             	shl    eax,0xa
c000deb8:	c1 ff 1f             	sar    edi,0x1f
c000debb:	57                   	push   edi
c000debc:	56                   	push   esi
c000debd:	52                   	push   edx
c000debe:	50                   	push   eax
c000debf:	e8 8c 15 01 00       	call   c001f450 <__udivdi3>
c000dec4:	83 c4 14             	add    esp,0x14
c000dec7:	52                   	push   edx
c000dec8:	50                   	push   eax
c000dec9:	6a 00                	push   0x0
c000decb:	6a 00                	push   0x0
c000decd:	53                   	push   ebx
c000dece:	e8 4b fe ff ff       	call   c000dd1e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ded3:	83 c4 20             	add    esp,0x20
c000ded6:	e9 73 01 00 00       	jmp    c000e04e <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000dedb:	89 f0                	mov    eax,esi
c000dedd:	31 c9                	xor    ecx,ecx
c000dedf:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000dee6:	75 02                	jne    c000deea <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000dee8:	89 cd                	mov    ebp,ecx
c000deea:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000def1:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000def8:	c1 e2 08             	shl    edx,0x8
c000defb:	c1 e6 10             	shl    esi,0x10
c000defe:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000df06:	09 f2                	or     edx,esi
c000df08:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000df10:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000df17:	83 c0 10             	add    eax,0x10
c000df1a:	09 f2                	or     edx,esi
c000df1c:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000df23:	c1 e6 18             	shl    esi,0x18
c000df26:	09 f2                	or     edx,esi
c000df28:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000df2f:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000df33:	c1 e6 10             	shl    esi,0x10
c000df36:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000df3d:	c1 e2 08             	shl    edx,0x8
c000df40:	09 f2                	or     edx,esi
c000df42:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000df49:	09 f2                	or     edx,esi
c000df4b:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000df52:	c1 e6 18             	shl    esi,0x18
c000df55:	09 f2                	or     edx,esi
c000df57:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000df5b:	41                   	inc    ecx
c000df5c:	83 f9 04             	cmp    ecx,0x4
c000df5f:	0f 85 7a ff ff ff    	jne    c000dedf <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000df65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df69:	83 f0 01             	xor    eax,0x1
c000df6c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000df70:	75 4f                	jne    c000dfc1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df76:	83 f0 01             	xor    eax,0x1
c000df79:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000df7d:	75 42                	jne    c000dfc1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000df7f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000df87:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000df8f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000df95:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000df9b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dfa1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dfa5:	89 f7                	mov    edi,esi
c000dfa7:	c1 e0 0a             	shl    eax,0xa
c000dfaa:	c1 ff 1f             	sar    edi,0x1f
c000dfad:	57                   	push   edi
c000dfae:	56                   	push   esi
c000dfaf:	52                   	push   edx
c000dfb0:	50                   	push   eax
c000dfb1:	e8 9a 14 01 00       	call   c001f450 <__udivdi3>
c000dfb6:	83 c4 10             	add    esp,0x10
c000dfb9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfbd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dfc1:	89 e8                	mov    eax,ebp
c000dfc3:	0f b6 e8             	movzx  ebp,al
c000dfc6:	85 ed                	test   ebp,ebp
c000dfc8:	74 50                	je     c000e01a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000dfca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfce:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dfd2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dfd6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dfda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfde:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfe2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000dfe6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000dfea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dff2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dff6:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000dffa:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000dffe:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e002:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e006:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e00a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e00e:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e012:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e016:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e01a:	31 ed                	xor    ebp,ebp
c000e01c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e020:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e024:	89 f8                	mov    eax,edi
c000e026:	09 f0                	or     eax,esi
c000e028:	74 1e                	je     c000e048 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e02a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e02e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e032:	89 d1                	mov    ecx,edx
c000e034:	09 c1                	or     ecx,eax
c000e036:	74 10                	je     c000e048 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e038:	83 ec 0c             	sub    esp,0xc
c000e03b:	57                   	push   edi
c000e03c:	56                   	push   esi
c000e03d:	52                   	push   edx
c000e03e:	50                   	push   eax
c000e03f:	53                   	push   ebx
c000e040:	e8 d9 fc ff ff       	call   c000dd1e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e045:	83 c4 20             	add    esp,0x20
c000e048:	45                   	inc    ebp
c000e049:	83 fd 04             	cmp    ebp,0x4
c000e04c:	75 ce                	jne    c000e01c <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e04e:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e054:	5b                   	pop    ebx
c000e055:	5e                   	pop    esi
c000e056:	5f                   	pop    edi
c000e057:	5d                   	pop    ebp
c000e058:	c3                   	ret    
c000e059:	66 90                	xchg   ax,ax
c000e05b:	90                   	nop

c000e05c <Serial::Serial(char const*)>:
c000e05c:	83 ec 0c             	sub    esp,0xc
c000e05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e063:	83 ec 08             	sub    esp,0x8
c000e066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06a:	50                   	push   eax
c000e06b:	e8 76 e8 ff ff       	call   c000c8e6 <Device::Device(char const*)>
c000e070:	83 c4 10             	add    esp,0x10
c000e073:	ba 4c 1a 02 c0       	mov    edx,0xc0021a4c
c000e078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e07c:	89 10                	mov    DWORD PTR [eax],edx
c000e07e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e082:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e08c:	90                   	nop
c000e08d:	83 c4 0c             	add    esp,0xc
c000e090:	c3                   	ret    
c000e091:	90                   	nop
c000e092:	66 90                	xchg   ax,ax

c000e094 <Serial::~Serial()>:
c000e094:	83 ec 0c             	sub    esp,0xc
c000e097:	ba 4c 1a 02 c0       	mov    edx,0xc0021a4c
c000e09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0a0:	89 10                	mov    DWORD PTR [eax],edx
c000e0a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	50                   	push   eax
c000e0aa:	e8 a1 e5 ff ff       	call   c000c650 <Device::~Device()>
c000e0af:	83 c4 10             	add    esp,0x10
c000e0b2:	90                   	nop
c000e0b3:	83 c4 0c             	add    esp,0xc
c000e0b6:	c3                   	ret    
c000e0b7:	90                   	nop

c000e0b8 <Serial::~Serial()>:
c000e0b8:	83 ec 0c             	sub    esp,0xc
c000e0bb:	83 ec 0c             	sub    esp,0xc
c000e0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0c2:	e8 cd ff ff ff       	call   c000e094 <Serial::~Serial()>
c000e0c7:	83 c4 10             	add    esp,0x10
c000e0ca:	83 ec 08             	sub    esp,0x8
c000e0cd:	68 58 01 00 00       	push   0x158
c000e0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0d6:	e8 3d c7 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e0db:	83 c4 10             	add    esp,0x10
c000e0de:	83 c4 0c             	add    esp,0xc
c000e0e1:	c3                   	ret    
c000e0e2:	66 90                	xchg   ax,ax

c000e0e4 <Timer::Timer(char const*)>:
c000e0e4:	83 ec 0c             	sub    esp,0xc
c000e0e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0eb:	83 ec 08             	sub    esp,0x8
c000e0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0f2:	50                   	push   eax
c000e0f3:	e8 ee e7 ff ff       	call   c000c8e6 <Device::Device(char const*)>
c000e0f8:	83 c4 10             	add    esp,0x10
c000e0fb:	ba 90 1a 02 c0       	mov    edx,0xc0021a90
c000e100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e104:	89 10                	mov    DWORD PTR [eax],edx
c000e106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e10a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e114:	90                   	nop
c000e115:	83 c4 0c             	add    esp,0xc
c000e118:	c3                   	ret    
c000e119:	90                   	nop
c000e11a:	66 90                	xchg   ax,ax

c000e11c <Timer::~Timer()>:
c000e11c:	83 ec 0c             	sub    esp,0xc
c000e11f:	ba 90 1a 02 c0       	mov    edx,0xc0021a90
c000e124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e128:	89 10                	mov    DWORD PTR [eax],edx
c000e12a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e12e:	83 ec 0c             	sub    esp,0xc
c000e131:	50                   	push   eax
c000e132:	e8 19 e5 ff ff       	call   c000c650 <Device::~Device()>
c000e137:	83 c4 10             	add    esp,0x10
c000e13a:	90                   	nop
c000e13b:	83 c4 0c             	add    esp,0xc
c000e13e:	c3                   	ret    
c000e13f:	90                   	nop

c000e140 <Timer::~Timer()>:
c000e140:	83 ec 0c             	sub    esp,0xc
c000e143:	83 ec 0c             	sub    esp,0xc
c000e146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e14a:	e8 cd ff ff ff       	call   c000e11c <Timer::~Timer()>
c000e14f:	83 c4 10             	add    esp,0x10
c000e152:	83 ec 08             	sub    esp,0x8
c000e155:	68 5c 01 00 00       	push   0x15c
c000e15a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e15e:	e8 b5 c6 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e163:	83 c4 10             	add    esp,0x10
c000e166:	83 c4 0c             	add    esp,0xc
c000e169:	c3                   	ret    

c000e16a <Timer::read()>:
c000e16a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e16e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e174:	c3                   	ret    

c000e175 <setupTimer(int)>:
c000e175:	53                   	push   ebx
c000e176:	83 ec 14             	sub    esp,0x14
c000e179:	68 5c 01 00 00       	push   0x15c
c000e17e:	e8 33 99 ff ff       	call   c0007ab6 <malloc>
c000e183:	89 04 24             	mov    DWORD PTR [esp],eax
c000e186:	89 c3                	mov    ebx,eax
c000e188:	e8 2f 0b 01 00       	call   c001ecbc <PIT::PIT()>
c000e18d:	58                   	pop    eax
c000e18e:	5a                   	pop    edx
c000e18f:	53                   	push   ebx
c000e190:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e196:	e8 b3 e5 ff ff       	call   c000c74e <Device::addChild(Device*)>
c000e19b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e19d:	6a 00                	push   0x0
c000e19f:	6a 00                	push   0x0
c000e1a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e1a5:	53                   	push   ebx
c000e1a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e1a9:	89 d8                	mov    eax,ebx
c000e1ab:	83 c4 28             	add    esp,0x28
c000e1ae:	5b                   	pop    ebx
c000e1af:	c3                   	ret    

c000e1b0 <timerHandler(unsigned int)>:
c000e1b0:	56                   	push   esi
c000e1b1:	53                   	push   ebx
c000e1b2:	51                   	push   ecx
c000e1b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1b7:	01 05 ec 88 02 c0    	add    DWORD PTR ds:0xc00288ec,eax
c000e1bd:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e1c4:	0f 84 4a 01 00 00    	je     c000e314 <timerHandler(unsigned int)+0x164>
c000e1ca:	fa                   	cli    
c000e1cb:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e1d1:	83 ec 0c             	sub    esp,0xc
c000e1d4:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c000e1da:	68 d8 96 02 c0       	push   0xc00296d8
c000e1df:	e8 3c 18 01 00       	call   c001fa20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e1e4:	83 c4 10             	add    esp,0x10
c000e1e7:	84 c0                	test   al,al
c000e1e9:	0f 85 a1 00 00 00    	jne    c000e290 <timerHandler(unsigned int)+0xe0>
c000e1ef:	83 ec 0c             	sub    esp,0xc
c000e1f2:	68 d8 96 02 c0       	push   0xc00296d8
c000e1f7:	e8 40 18 01 00       	call   c001fa3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e1fc:	83 c4 10             	add    esp,0x10
c000e1ff:	89 c6                	mov    esi,eax
c000e201:	8d 76 00             	lea    esi,[esi+0x0]
c000e204:	83 ec 0c             	sub    esp,0xc
c000e207:	68 d8 96 02 c0       	push   0xc00296d8
c000e20c:	e8 2b 18 01 00       	call   c001fa3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e211:	c7 04 24 d8 96 02 c0 	mov    DWORD PTR [esp],0xc00296d8
c000e218:	89 c3                	mov    ebx,eax
c000e21a:	e8 25 18 01 00       	call   c001fa44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e21f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e222:	83 c4 10             	add    esp,0x10
c000e225:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c000e22b:	77 23                	ja     c000e250 <timerHandler(unsigned int)+0xa0>
c000e22d:	83 ec 0c             	sub    esp,0xc
c000e230:	53                   	push   ebx
c000e231:	e8 c2 80 00 00       	call   c00162f8 <unblockTask(ThreadControlBlock*)>
c000e236:	83 c4 10             	add    esp,0x10
c000e239:	39 de                	cmp    esi,ebx
c000e23b:	75 27                	jne    c000e264 <timerHandler(unsigned int)+0xb4>
c000e23d:	83 ec 0c             	sub    esp,0xc
c000e240:	68 d8 96 02 c0       	push   0xc00296d8
c000e245:	e8 f2 17 01 00       	call   c001fa3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e24a:	89 c6                	mov    esi,eax
c000e24c:	eb 12                	jmp    c000e260 <timerHandler(unsigned int)+0xb0>
c000e24e:	66 90                	xchg   ax,ax
c000e250:	52                   	push   edx
c000e251:	52                   	push   edx
c000e252:	53                   	push   ebx
c000e253:	68 d8 96 02 c0       	push   0xc00296d8
c000e258:	e8 a3 18 01 00       	call   c001fb00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e25d:	8d 76 00             	lea    esi,[esi+0x0]
c000e260:	83 c4 10             	add    esp,0x10
c000e263:	90                   	nop
c000e264:	83 ec 0c             	sub    esp,0xc
c000e267:	68 d8 96 02 c0       	push   0xc00296d8
c000e26c:	e8 af 17 01 00       	call   c001fa20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e271:	83 c4 10             	add    esp,0x10
c000e274:	84 c0                	test   al,al
c000e276:	75 18                	jne    c000e290 <timerHandler(unsigned int)+0xe0>
c000e278:	83 ec 0c             	sub    esp,0xc
c000e27b:	68 d8 96 02 c0       	push   0xc00296d8
c000e280:	e8 b7 17 01 00       	call   c001fa3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e285:	83 c4 10             	add    esp,0x10
c000e288:	39 f0                	cmp    eax,esi
c000e28a:	0f 85 74 ff ff ff    	jne    c000e204 <timerHandler(unsigned int)+0x54>
c000e290:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e295:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e299:	74 41                	je     c000e2dc <timerHandler(unsigned int)+0x12c>
c000e29b:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e2a2:	74 38                	je     c000e2dc <timerHandler(unsigned int)+0x12c>
c000e2a4:	fa                   	cli    
c000e2a5:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e2ab:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c000e2b0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e2b6:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e2b9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e2bf:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e2c2:	72 08                	jb     c000e2cc <timerHandler(unsigned int)+0x11c>
c000e2c4:	e8 17 7b 00 00       	call   c0015de0 <schedule()>
c000e2c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e2cc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e2d1:	48                   	dec    eax
c000e2d2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e2d7:	75 03                	jne    c000e2dc <timerHandler(unsigned int)+0x12c>
c000e2d9:	fb                   	sti    
c000e2da:	66 90                	xchg   ax,ax
c000e2dc:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000e2e1:	48                   	dec    eax
c000e2e2:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000e2e7:	75 1b                	jne    c000e304 <timerHandler(unsigned int)+0x154>
c000e2e9:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c000e2f0:	74 12                	je     c000e304 <timerHandler(unsigned int)+0x154>
c000e2f2:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000e2fc:	e8 df 7a 00 00       	call   c0015de0 <schedule()>
c000e301:	8d 76 00             	lea    esi,[esi+0x0]
c000e304:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e309:	48                   	dec    eax
c000e30a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e30f:	75 03                	jne    c000e314 <timerHandler(unsigned int)+0x164>
c000e311:	fb                   	sti    
c000e312:	66 90                	xchg   ax,ax
c000e314:	58                   	pop    eax
c000e315:	5b                   	pop    ebx
c000e316:	5e                   	pop    esi
c000e317:	c3                   	ret    

c000e318 <VCache::VCache(PhysicalDisk*)>:
c000e318:	53                   	push   ebx
c000e319:	83 ec 18             	sub    esp,0x18
c000e31c:	ba c0 1a 02 c0       	mov    edx,0xc0021ac0
c000e321:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e325:	89 10                	mov    DWORD PTR [eax],edx
c000e327:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e32b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e332:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e336:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e33d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e341:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e348:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e34f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e353:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e35a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e361:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e365:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e36c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e370:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e374:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e378:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e37f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e386:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e38a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e38e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e392:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e396:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e39a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e39e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3a2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e3a9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e3b1:	83 ec 0c             	sub    esp,0xc
c000e3b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3b8:	e8 f9 96 ff ff       	call   c0007ab6 <malloc>
c000e3bd:	83 c4 10             	add    esp,0x10
c000e3c0:	89 c3                	mov    ebx,eax
c000e3c2:	83 ec 0c             	sub    esp,0xc
c000e3c5:	53                   	push   ebx
c000e3c6:	e8 b1 77 00 00       	call   c0015b7c <Mutex::Mutex()>
c000e3cb:	83 c4 10             	add    esp,0x10
c000e3ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3d2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e3d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3d9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e3dd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e3e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3e4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e3eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e3ef:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e3f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3f9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e3fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e400:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e406:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e40c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e410:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e413:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e416:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e41a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e41e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e422:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e428:	05 00 02 00 00       	add    eax,0x200
c000e42d:	c1 e0 03             	shl    eax,0x3
c000e430:	83 ec 0c             	sub    esp,0xc
c000e433:	50                   	push   eax
c000e434:	e8 7d 96 ff ff       	call   c0007ab6 <malloc>
c000e439:	83 c4 10             	add    esp,0x10
c000e43c:	89 c2                	mov    edx,eax
c000e43e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e442:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e445:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e449:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e450:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e454:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e458:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e45c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e462:	89 d0                	mov    eax,edx
c000e464:	c1 e0 02             	shl    eax,0x2
c000e467:	01 d0                	add    eax,edx
c000e469:	c1 e0 04             	shl    eax,0x4
c000e46c:	83 ec 0c             	sub    esp,0xc
c000e46f:	50                   	push   eax
c000e470:	e8 41 96 ff ff       	call   c0007ab6 <malloc>
c000e475:	83 c4 10             	add    esp,0x10
c000e478:	89 c2                	mov    edx,eax
c000e47a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e47e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e481:	90                   	nop
c000e482:	83 c4 18             	add    esp,0x18
c000e485:	5b                   	pop    ebx
c000e486:	c3                   	ret    
c000e487:	90                   	nop

c000e488 <VCache::invalidateReadBuffer()>:
c000e488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e48c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e492:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e496:	c3                   	ret    
c000e497:	90                   	nop

c000e498 <VCache::writeWriteBuffer()>:
c000e498:	53                   	push   ebx
c000e499:	83 ec 08             	sub    esp,0x8
c000e49c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e4a0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e4a4:	74 1e                	je     c000e4c4 <VCache::writeWriteBuffer()+0x2c>
c000e4a6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e4a9:	83 ec 0c             	sub    esp,0xc
c000e4ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4ae:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e4b1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e4b4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e4b7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e4ba:	50                   	push   eax
c000e4bb:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e4be:	83 c4 20             	add    esp,0x20
c000e4c1:	8d 76 00             	lea    esi,[esi+0x0]
c000e4c4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e4cb:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e4d2:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e4d6:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e4dd:	83 c4 08             	add    esp,0x8
c000e4e0:	5b                   	pop    ebx
c000e4e1:	c3                   	ret    
c000e4e2:	66 90                	xchg   ax,ax

c000e4e4 <VCache::~VCache()>:
c000e4e4:	83 ec 0c             	sub    esp,0xc
c000e4e7:	ba c0 1a 02 c0       	mov    edx,0xc0021ac0
c000e4ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4f0:	89 10                	mov    DWORD PTR [eax],edx
c000e4f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4f6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e4f9:	0f b6 c0             	movzx  eax,al
c000e4fc:	85 c0                	test   eax,eax
c000e4fe:	74 10                	je     c000e510 <VCache::~VCache()+0x2c>
c000e500:	83 ec 0c             	sub    esp,0xc
c000e503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e507:	e8 8c ff ff ff       	call   c000e498 <VCache::writeWriteBuffer()>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	90                   	nop
c000e510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e514:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e517:	83 ec 0c             	sub    esp,0xc
c000e51a:	50                   	push   eax
c000e51b:	e8 a6 95 ff ff       	call   c0007ac6 <free>
c000e520:	83 c4 10             	add    esp,0x10
c000e523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e527:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e52a:	83 ec 0c             	sub    esp,0xc
c000e52d:	50                   	push   eax
c000e52e:	e8 93 95 ff ff       	call   c0007ac6 <free>
c000e533:	83 c4 10             	add    esp,0x10
c000e536:	90                   	nop
c000e537:	83 c4 0c             	add    esp,0xc
c000e53a:	c3                   	ret    
c000e53b:	90                   	nop

c000e53c <VCache::~VCache()>:
c000e53c:	83 ec 0c             	sub    esp,0xc
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e546:	e8 99 ff ff ff       	call   c000e4e4 <VCache::~VCache()>
c000e54b:	83 c4 10             	add    esp,0x10
c000e54e:	83 ec 08             	sub    esp,0x8
c000e551:	6a 44                	push   0x44
c000e553:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e557:	e8 bc c2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e55c:	83 c4 10             	add    esp,0x10
c000e55f:	83 c4 0c             	add    esp,0xc
c000e562:	c3                   	ret    
c000e563:	90                   	nop

c000e564 <VCache::write(unsigned long long, int, void*)>:
c000e564:	55                   	push   ebp
c000e565:	57                   	push   edi
c000e566:	56                   	push   esi
c000e567:	53                   	push   ebx
c000e568:	83 ec 1c             	sub    esp,0x1c
c000e56b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e56f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e573:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e577:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e57b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e57f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e583:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e587:	74 07                	je     c000e590 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e589:	53                   	push   ebx
c000e58a:	e8 f9 fe ff ff       	call   c000e488 <VCache::invalidateReadBuffer()>
c000e58f:	58                   	pop    eax
c000e590:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e594:	74 62                	je     c000e5f8 <VCache::write(unsigned long long, int, void*)+0x94>
c000e596:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e599:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e59d:	99                   	cdq    
c000e59e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5a2:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e5a5:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e5a8:	31 c1                	xor    ecx,eax
c000e5aa:	89 d0                	mov    eax,edx
c000e5ac:	89 ca                	mov    edx,ecx
c000e5ae:	31 e8                	xor    eax,ebp
c000e5b0:	09 c2                	or     edx,eax
c000e5b2:	75 38                	jne    c000e5ec <VCache::write(unsigned long long, int, void*)+0x88>
c000e5b4:	83 ff 01             	cmp    edi,0x1
c000e5b7:	75 33                	jne    c000e5ec <VCache::write(unsigned long long, int, void*)+0x88>
c000e5b9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e5bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e5c0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e5c6:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e5c9:	0f af c8             	imul   ecx,eax
c000e5cc:	01 cf                	add    edi,ecx
c000e5ce:	89 c1                	mov    ecx,eax
c000e5d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5d2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e5d5:	40                   	inc    eax
c000e5d6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e5d9:	83 f8 50             	cmp    eax,0x50
c000e5dc:	75 6a                	jne    c000e648 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e5de:	83 ec 0c             	sub    esp,0xc
c000e5e1:	53                   	push   ebx
c000e5e2:	e8 b1 fe ff ff       	call   c000e498 <VCache::writeWriteBuffer()>
c000e5e7:	83 c4 10             	add    esp,0x10
c000e5ea:	eb 5c                	jmp    c000e648 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e5ec:	83 ec 0c             	sub    esp,0xc
c000e5ef:	53                   	push   ebx
c000e5f0:	e8 a3 fe ff ff       	call   c000e498 <VCache::writeWriteBuffer()>
c000e5f5:	83 c4 10             	add    esp,0x10
c000e5f8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e5fb:	83 ff 4f             	cmp    edi,0x4f
c000e5fe:	7f 20                	jg     c000e620 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e600:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e603:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e607:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e60a:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e60d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e611:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e614:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e61a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e61c:	eb 2a                	jmp    c000e648 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e61e:	66 90                	xchg   ax,ax
c000e620:	8b 10                	mov    edx,DWORD PTR [eax]
c000e622:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e626:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e62a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e62e:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e632:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e636:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e63a:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e63d:	83 c4 1c             	add    esp,0x1c
c000e640:	5b                   	pop    ebx
c000e641:	5e                   	pop    esi
c000e642:	5f                   	pop    edi
c000e643:	5d                   	pop    ebp
c000e644:	ff e0                	jmp    eax
c000e646:	66 90                	xchg   ax,ax
c000e648:	83 c4 1c             	add    esp,0x1c
c000e64b:	31 c0                	xor    eax,eax
c000e64d:	5b                   	pop    ebx
c000e64e:	5e                   	pop    esi
c000e64f:	5f                   	pop    edi
c000e650:	5d                   	pop    ebp
c000e651:	c3                   	ret    

c000e652 <VCache::read(unsigned long long, int, void*)>:
c000e652:	55                   	push   ebp
c000e653:	57                   	push   edi
c000e654:	56                   	push   esi
c000e655:	53                   	push   ebx
c000e656:	83 ec 1c             	sub    esp,0x1c
c000e659:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e65d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e661:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e665:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e669:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e66d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e671:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e675:	74 0d                	je     c000e684 <VCache::read(unsigned long long, int, void*)+0x32>
c000e677:	83 ec 0c             	sub    esp,0xc
c000e67a:	57                   	push   edi
c000e67b:	e8 18 fe ff ff       	call   c000e498 <VCache::writeWriteBuffer()>
c000e680:	83 c4 10             	add    esp,0x10
c000e683:	90                   	nop
c000e684:	83 fd 01             	cmp    ebp,0x1
c000e687:	0f 85 93 00 00 00    	jne    c000e720 <VCache::read(unsigned long long, int, void*)+0xce>
c000e68d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e690:	89 04 24             	mov    DWORD PTR [esp],eax
c000e693:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e69a:	0f 85 80 00 00 00    	jne    c000e720 <VCache::read(unsigned long long, int, void*)+0xce>
c000e6a0:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e6a3:	89 e9                	mov    ecx,ebp
c000e6a5:	f7 d9                	neg    ecx
c000e6a7:	89 c8                	mov    eax,ecx
c000e6a9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e6ad:	c1 f8 1f             	sar    eax,0x1f
c000e6b0:	21 d9                	and    ecx,ebx
c000e6b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e6b6:	89 c8                	mov    eax,ecx
c000e6b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e6bc:	21 f1                	and    ecx,esi
c000e6be:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e6c2:	89 ca                	mov    edx,ecx
c000e6c4:	74 2e                	je     c000e6f4 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6c6:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e6c9:	75 29                	jne    c000e6f4 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6cb:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e6ce:	75 24                	jne    c000e6f4 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e6d0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e6d3:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e6d9:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e6dc:	8d 70 ff             	lea    esi,[eax-0x1]
c000e6df:	21 f3                	and    ebx,esi
c000e6e1:	0f af d9             	imul   ebx,ecx
c000e6e4:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e6e7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e6eb:	89 de                	mov    esi,ebx
c000e6ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6ef:	31 c0                	xor    eax,eax
c000e6f1:	eb 61                	jmp    c000e754 <VCache::read(unsigned long long, int, void*)+0x102>
c000e6f3:	90                   	nop
c000e6f4:	83 ec 0c             	sub    esp,0xc
c000e6f7:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e6fb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e6ff:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e702:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e705:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e707:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e70a:	55                   	push   ebp
c000e70b:	52                   	push   edx
c000e70c:	50                   	push   eax
c000e70d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e711:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e714:	83 c4 20             	add    esp,0x20
c000e717:	85 c0                	test   eax,eax
c000e719:	75 39                	jne    c000e754 <VCache::read(unsigned long long, int, void*)+0x102>
c000e71b:	eb b3                	jmp    c000e6d0 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e71d:	8d 76 00             	lea    esi,[esi+0x0]
c000e720:	83 ec 0c             	sub    esp,0xc
c000e723:	57                   	push   edi
c000e724:	e8 5f fd ff ff       	call   c000e488 <VCache::invalidateReadBuffer()>
c000e729:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e72c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e730:	8b 10                	mov    edx,DWORD PTR [eax]
c000e732:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e736:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e73a:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e73e:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e742:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e746:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e749:	83 c4 2c             	add    esp,0x2c
c000e74c:	5b                   	pop    ebx
c000e74d:	5e                   	pop    esi
c000e74e:	5f                   	pop    edi
c000e74f:	5d                   	pop    ebp
c000e750:	ff e0                	jmp    eax
c000e752:	66 90                	xchg   ax,ax
c000e754:	83 c4 1c             	add    esp,0x1c
c000e757:	5b                   	pop    ebx
c000e758:	5e                   	pop    esi
c000e759:	5f                   	pop    edi
c000e75a:	5d                   	pop    ebp
c000e75b:	c3                   	ret    

c000e75c <Video::putrect(int, int, int, int, unsigned int)>:
c000e75c:	55                   	push   ebp
c000e75d:	57                   	push   edi
c000e75e:	56                   	push   esi
c000e75f:	53                   	push   ebx
c000e760:	83 ec 1c             	sub    esp,0x1c
c000e763:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e767:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e76b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e76f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e773:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e777:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e77b:	01 df                	add    edi,ebx
c000e77d:	39 fb                	cmp    ebx,edi
c000e77f:	7d 1f                	jge    c000e7a0 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e781:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e785:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e789:	7d 12                	jge    c000e79d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e78b:	8b 16                	mov    edx,DWORD PTR [esi]
c000e78d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e791:	53                   	push   ebx
c000e792:	55                   	push   ebp
c000e793:	45                   	inc    ebp
c000e794:	56                   	push   esi
c000e795:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e798:	83 c4 10             	add    esp,0x10
c000e79b:	eb e8                	jmp    c000e785 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e79d:	43                   	inc    ebx
c000e79e:	eb dd                	jmp    c000e77d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e7a0:	83 c4 1c             	add    esp,0x1c
c000e7a3:	5b                   	pop    ebx
c000e7a4:	5e                   	pop    esi
c000e7a5:	5f                   	pop    edi
c000e7a6:	5d                   	pop    ebp
c000e7a7:	c3                   	ret    

c000e7a8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e7a8:	55                   	push   ebp
c000e7a9:	57                   	push   edi
c000e7aa:	31 ff                	xor    edi,edi
c000e7ac:	56                   	push   esi
c000e7ad:	53                   	push   ebx
c000e7ae:	83 ec 1c             	sub    esp,0x1c
c000e7b1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e7b5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e7b9:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e7c0:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e7c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e7c9:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e7cd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e7d1:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e7d4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e7d8:	01 f9                	add    ecx,edi
c000e7da:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e7de:	7d 2f                	jge    c000e80f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e7e0:	31 f6                	xor    esi,esi
c000e7e2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e7e6:	01 f2                	add    edx,esi
c000e7e8:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e7ec:	7d 1a                	jge    c000e808 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e7ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e7f1:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e7f4:	46                   	inc    esi
c000e7f5:	51                   	push   ecx
c000e7f6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e7fa:	52                   	push   edx
c000e7fb:	55                   	push   ebp
c000e7fc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e7ff:	83 c4 10             	add    esp,0x10
c000e802:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e806:	eb da                	jmp    c000e7e2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e808:	47                   	inc    edi
c000e809:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e80d:	eb c5                	jmp    c000e7d4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e80f:	83 c4 1c             	add    esp,0x1c
c000e812:	5b                   	pop    ebx
c000e813:	5e                   	pop    esi
c000e814:	5f                   	pop    edi
c000e815:	5d                   	pop    ebp
c000e816:	c3                   	ret    
c000e817:	90                   	nop

c000e818 <Video::blit(unsigned int*, int, int, int, int)>:
c000e818:	55                   	push   ebp
c000e819:	57                   	push   edi
c000e81a:	56                   	push   esi
c000e81b:	53                   	push   ebx
c000e81c:	83 ec 1c             	sub    esp,0x1c
c000e81f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e823:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e827:	85 c0                	test   eax,eax
c000e829:	79 02                	jns    c000e82d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000e82b:	31 c0                	xor    eax,eax
c000e82d:	c1 e0 02             	shl    eax,0x2
c000e830:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000e834:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e838:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e83c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000e840:	39 d8                	cmp    eax,ebx
c000e842:	7e 49                	jle    c000e88d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e844:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e84a:	7c 41                	jl     c000e88d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e84c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e850:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e854:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e858:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000e85c:	39 f9                	cmp    ecx,edi
c000e85e:	7e 22                	jle    c000e882 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000e860:	83 c5 04             	add    ebp,0x4
c000e863:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e869:	7c 14                	jl     c000e87f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000e86b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e86d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000e870:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e874:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e878:	56                   	push   esi
c000e879:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e87c:	83 c4 10             	add    esp,0x10
c000e87f:	47                   	inc    edi
c000e880:	eb d2                	jmp    c000e854 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000e882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e886:	43                   	inc    ebx
c000e887:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e88b:	eb ab                	jmp    c000e838 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000e88d:	83 c4 1c             	add    esp,0x1c
c000e890:	5b                   	pop    ebx
c000e891:	5e                   	pop    esi
c000e892:	5f                   	pop    edi
c000e893:	5d                   	pop    ebp
c000e894:	c3                   	ret    
c000e895:	90                   	nop

c000e896 <Video::clearScreen(unsigned int)>:
c000e896:	57                   	push   edi
c000e897:	56                   	push   esi
c000e898:	53                   	push   ebx
c000e899:	31 db                	xor    ebx,ebx
c000e89b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e89f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e8a5:	7e 1f                	jle    c000e8c6 <Video::clearScreen(unsigned int)+0x30>
c000e8a7:	31 ff                	xor    edi,edi
c000e8a9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e8af:	7e 12                	jle    c000e8c3 <Video::clearScreen(unsigned int)+0x2d>
c000e8b1:	8b 06                	mov    eax,DWORD PTR [esi]
c000e8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8b7:	53                   	push   ebx
c000e8b8:	57                   	push   edi
c000e8b9:	47                   	inc    edi
c000e8ba:	56                   	push   esi
c000e8bb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e8be:	83 c4 10             	add    esp,0x10
c000e8c1:	eb e6                	jmp    c000e8a9 <Video::clearScreen(unsigned int)+0x13>
c000e8c3:	43                   	inc    ebx
c000e8c4:	eb d9                	jmp    c000e89f <Video::clearScreen(unsigned int)+0x9>
c000e8c6:	5b                   	pop    ebx
c000e8c7:	5e                   	pop    esi
c000e8c8:	5f                   	pop    edi
c000e8c9:	c3                   	ret    

c000e8ca <Video::putpixel(int, int, unsigned int)>:
c000e8ca:	c7 44 24 04 c8 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021ac8
c000e8d2:	e9 a6 2a 00 00       	jmp    c001137d <KePanic(char const*)>
c000e8d7:	90                   	nop

c000e8d8 <Video::readPixelApprox(int, int)>:
c000e8d8:	83 ec 18             	sub    esp,0x18
c000e8db:	68 e9 1a 02 c0       	push   0xc0021ae9
c000e8e0:	e8 98 2a 00 00       	call   c001137d <KePanic(char const*)>
c000e8e5:	31 c0                	xor    eax,eax
c000e8e7:	83 c4 1c             	add    esp,0x1c
c000e8ea:	c3                   	ret    
c000e8eb:	90                   	nop

c000e8ec <Video::Video(char const*)>:
c000e8ec:	83 ec 0c             	sub    esp,0xc
c000e8ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f3:	83 ec 08             	sub    esp,0x8
c000e8f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8fa:	50                   	push   eax
c000e8fb:	e8 e6 df ff ff       	call   c000c8e6 <Device::Device(char const*)>
c000e900:	83 c4 10             	add    esp,0x10
c000e903:	ba 64 1b 02 c0       	mov    edx,0xc0021b64
c000e908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e90c:	89 10                	mov    DWORD PTR [eax],edx
c000e90e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e912:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e91c:	90                   	nop
c000e91d:	83 c4 0c             	add    esp,0xc
c000e920:	c3                   	ret    
c000e921:	90                   	nop

c000e922 <Video::~Video()>:
c000e922:	83 ec 0c             	sub    esp,0xc
c000e925:	ba 64 1b 02 c0       	mov    edx,0xc0021b64
c000e92a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e92e:	89 10                	mov    DWORD PTR [eax],edx
c000e930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e934:	83 ec 0c             	sub    esp,0xc
c000e937:	50                   	push   eax
c000e938:	e8 13 dd ff ff       	call   c000c650 <Device::~Device()>
c000e93d:	83 c4 10             	add    esp,0x10
c000e940:	90                   	nop
c000e941:	83 c4 0c             	add    esp,0xc
c000e944:	c3                   	ret    
c000e945:	90                   	nop

c000e946 <Video::~Video()>:
c000e946:	83 ec 0c             	sub    esp,0xc
c000e949:	83 ec 0c             	sub    esp,0xc
c000e94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e950:	e8 cd ff ff ff       	call   c000e922 <Video::~Video()>
c000e955:	83 c4 10             	add    esp,0x10
c000e958:	83 ec 08             	sub    esp,0x8
c000e95b:	68 64 01 00 00       	push   0x164
c000e960:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e964:	e8 af be ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e969:	83 c4 10             	add    esp,0x10
c000e96c:	83 c4 0c             	add    esp,0xc
c000e96f:	c3                   	ret    

c000e970 <Video::isMonochrome()>:
c000e970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e974:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e97a:	c3                   	ret    
c000e97b:	90                   	nop

c000e97c <Video::getWidth()>:
c000e97c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e980:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e986:	c3                   	ret    
c000e987:	90                   	nop

c000e988 <Video::getHeight()>:
c000e988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e98c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e992:	c3                   	ret    
c000e993:	90                   	nop

c000e994 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e994:	55                   	push   ebp
c000e995:	57                   	push   edi
c000e996:	56                   	push   esi
c000e997:	53                   	push   ebx
c000e998:	83 ec 2c             	sub    esp,0x2c
c000e99b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e99f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e9a3:	83 f8 01             	cmp    eax,0x1
c000e9a6:	19 c9                	sbb    ecx,ecx
c000e9a8:	31 db                	xor    ebx,ebx
c000e9aa:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e9ae:	89 cd                	mov    ebp,ecx
c000e9b0:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e9b8:	f7 d5                	not    ebp
c000e9ba:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e9c0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e9c4:	01 d8                	add    eax,ebx
c000e9c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9ca:	56                   	push   esi
c000e9cb:	e8 b8 ff ff ff       	call   c000e988 <Video::getHeight()>
c000e9d0:	59                   	pop    ecx
c000e9d1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e9d5:	7e 70                	jle    c000ea47 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e9d7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e9db:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e9df:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e9e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e9e6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e9ea:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e9f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e9f5:	89 f8                	mov    eax,edi
c000e9f7:	83 c0 20             	add    eax,0x20
c000e9fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e9fe:	56                   	push   esi
c000e9ff:	e8 78 ff ff ff       	call   c000e97c <Video::getWidth()>
c000ea04:	5a                   	pop    edx
c000ea05:	39 c7                	cmp    edi,eax
c000ea07:	7d 34                	jge    c000ea3d <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ea09:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ea0e:	74 05                	je     c000ea15 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ea10:	8b 06                	mov    eax,DWORD PTR [esi]
c000ea12:	55                   	push   ebp
c000ea13:	eb 0d                	jmp    c000ea22 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ea15:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ea1a:	74 12                	je     c000ea2e <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000ea1c:	8b 06                	mov    eax,DWORD PTR [esi]
c000ea1e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea22:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea26:	57                   	push   edi
c000ea27:	56                   	push   esi
c000ea28:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea2b:	83 c4 10             	add    esp,0x10
c000ea2e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ea32:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ea36:	47                   	inc    edi
c000ea37:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ea3b:	75 c1                	jne    c000e9fe <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ea3d:	43                   	inc    ebx
c000ea3e:	83 fb 20             	cmp    ebx,0x20
c000ea41:	0f 85 79 ff ff ff    	jne    c000e9c0 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000ea47:	83 c4 2c             	add    esp,0x2c
c000ea4a:	5b                   	pop    ebx
c000ea4b:	5e                   	pop    esi
c000ea4c:	5f                   	pop    edi
c000ea4d:	5d                   	pop    ebp
c000ea4e:	c3                   	ret    
c000ea4f:	90                   	nop

c000ea50 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ea50:	55                   	push   ebp
c000ea51:	57                   	push   edi
c000ea52:	56                   	push   esi
c000ea53:	53                   	push   ebx
c000ea54:	83 ec 28             	sub    esp,0x28
c000ea57:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ea5b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ea5f:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ea63:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000ea67:	c1 e6 08             	shl    esi,0x8
c000ea6a:	01 c6                	add    esi,eax
c000ea6c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ea70:	c1 e0 08             	shl    eax,0x8
c000ea73:	01 d0                	add    eax,edx
c000ea75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea7d:	0f af c6             	imul   eax,esi
c000ea80:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ea87:	50                   	push   eax
c000ea88:	e8 29 90 ff ff       	call   c0007ab6 <malloc>
c000ea8d:	83 c4 10             	add    esp,0x10
c000ea90:	89 c7                	mov    edi,eax
c000ea92:	85 c0                	test   eax,eax
c000ea94:	75 10                	jne    c000eaa6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ea96:	83 ec 0c             	sub    esp,0xc
c000ea99:	68 14 1b 02 c0       	push   0xc0021b14
c000ea9e:	e8 da 28 00 00       	call   c001137d <KePanic(char const*)>
c000eaa3:	83 c4 10             	add    esp,0x10
c000eaa6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000eaaa:	ba 12 00 00 00       	mov    edx,0x12
c000eaaf:	85 c0                	test   eax,eax
c000eab1:	74 11                	je     c000eac4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000eab3:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000eab7:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000eabb:	c1 fa 03             	sar    edx,0x3
c000eabe:	0f af d1             	imul   edx,ecx
c000eac1:	83 c2 12             	add    edx,0x12
c000eac4:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000eac8:	74 04                	je     c000eace <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000eaca:	85 f6                	test   esi,esi
c000eacc:	75 12                	jne    c000eae0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000eace:	83 ec 0c             	sub    esp,0xc
c000ead1:	68 24 1b 02 c0       	push   0xc0021b24
c000ead6:	e8 6a be ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000eadb:	e9 b8 00 00 00       	jmp    c000eb98 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000eae0:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000eae4:	83 f9 02             	cmp    ecx,0x2
c000eae7:	0f 85 96 00 00 00    	jne    c000eb83 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000eaed:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000eaf2:	75 0e                	jne    c000eb02 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eaf4:	85 c0                	test   eax,eax
c000eaf6:	75 0a                	jne    c000eb02 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000eaf8:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000eafb:	83 e8 18             	sub    eax,0x18
c000eafe:	a8 f7                	test   al,0xf7
c000eb00:	74 0a                	je     c000eb0c <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000eb02:	83 ec 0c             	sub    esp,0xc
c000eb05:	68 39 1b 02 c0       	push   0xc0021b39
c000eb0a:	eb 7f                	jmp    c000eb8b <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000eb0c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eb14:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000eb1c:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000eb20:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eb28:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000eb2c:	75 0c                	jne    c000eb3a <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000eb2e:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000eb33:	c1 e0 18             	shl    eax,0x18
c000eb36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eb3a:	45                   	inc    ebp
c000eb3b:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000eb40:	c1 e1 10             	shl    ecx,0x10
c000eb43:	89 c8                	mov    eax,ecx
c000eb45:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000eb4a:	c1 e1 08             	shl    ecx,0x8
c000eb4d:	09 c1                	or     ecx,eax
c000eb4f:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000eb53:	09 c1                	or     ecx,eax
c000eb55:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000eb59:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000eb5d:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000eb61:	c1 f8 03             	sar    eax,0x3
c000eb64:	01 c2                	add    edx,eax
c000eb66:	89 e8                	mov    eax,ebp
c000eb68:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000eb6c:	39 c6                	cmp    esi,eax
c000eb6e:	7f b0                	jg     c000eb20 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000eb70:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000eb74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb78:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000eb7b:	7e 22                	jle    c000eb9f <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000eb7d:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000eb81:	eb 99                	jmp    c000eb1c <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000eb83:	50                   	push   eax
c000eb84:	50                   	push   eax
c000eb85:	51                   	push   ecx
c000eb86:	68 47 1b 02 c0       	push   0xc0021b47
c000eb8b:	e8 b5 bd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000eb90:	89 3c 24             	mov    DWORD PTR [esp],edi
c000eb93:	e8 2e 8f ff ff       	call   c0007ac6 <free>
c000eb98:	83 c4 10             	add    esp,0x10
c000eb9b:	31 ff                	xor    edi,edi
c000eb9d:	eb 0f                	jmp    c000ebae <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000eb9f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eba3:	89 30                	mov    DWORD PTR [eax],esi
c000eba5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eba9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ebac:	89 30                	mov    DWORD PTR [eax],esi
c000ebae:	83 c4 1c             	add    esp,0x1c
c000ebb1:	89 f8                	mov    eax,edi
c000ebb3:	5b                   	pop    ebx
c000ebb4:	5e                   	pop    esi
c000ebb5:	5f                   	pop    edi
c000ebb6:	5d                   	pop    ebp
c000ebb7:	c3                   	ret    

c000ebb8 <Video::putTGA(int, int, unsigned char*, int)>:
c000ebb8:	55                   	push   ebp
c000ebb9:	57                   	push   edi
c000ebba:	56                   	push   esi
c000ebbb:	53                   	push   ebx
c000ebbc:	83 ec 28             	sub    esp,0x28
c000ebbf:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ebc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ebc7:	50                   	push   eax
c000ebc8:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ebcc:	50                   	push   eax
c000ebcd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ebd1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ebd5:	56                   	push   esi
c000ebd6:	e8 75 fe ff ff       	call   c000ea50 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ebdb:	83 c4 20             	add    esp,0x20
c000ebde:	85 c0                	test   eax,eax
c000ebe0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ebe4:	74 35                	je     c000ec1b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ebe6:	89 c7                	mov    edi,eax
c000ebe8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebec:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ebf0:	39 d8                	cmp    eax,ebx
c000ebf2:	7e 27                	jle    c000ec1b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ebf4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ebf8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ebfc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ec00:	39 e8                	cmp    eax,ebp
c000ec02:	7e 14                	jle    c000ec18 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ec04:	8b 06                	mov    eax,DWORD PTR [esi]
c000ec06:	83 c7 04             	add    edi,0x4
c000ec09:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000ec0c:	53                   	push   ebx
c000ec0d:	55                   	push   ebp
c000ec0e:	45                   	inc    ebp
c000ec0f:	56                   	push   esi
c000ec10:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ec13:	83 c4 10             	add    esp,0x10
c000ec16:	eb e0                	jmp    c000ebf8 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ec18:	43                   	inc    ebx
c000ec19:	eb cd                	jmp    c000ebe8 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ec1b:	83 c4 1c             	add    esp,0x1c
c000ec1e:	5b                   	pop    ebx
c000ec1f:	5e                   	pop    esi
c000ec20:	5f                   	pop    edi
c000ec21:	5d                   	pop    ebp
c000ec22:	c3                   	ret    
c000ec23:	90                   	nop

c000ec24 <ACPI::close(int, int, void*)>:
c000ec24:	83 ec 1c             	sub    esp,0x1c
c000ec27:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ec2f:	74 0b                	je     c000ec3c <ACPI::close(int, int, void*)+0x18>
c000ec31:	b8 00 00 00 00       	mov    eax,0x0
c000ec36:	e9 99 00 00 00       	jmp    c000ecd4 <ACPI::close(int, int, void*)+0xb0>
c000ec3b:	90                   	nop
c000ec3c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ec41:	75 29                	jne    c000ec6c <ACPI::close(int, int, void*)+0x48>
c000ec43:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec48:	85 c0                	test   eax,eax
c000ec4a:	74 08                	je     c000ec54 <ACPI::close(int, int, void*)+0x30>
c000ec4c:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ec51:	ff d0                	call   eax
c000ec53:	90                   	nop
c000ec54:	83 ec 0c             	sub    esp,0xc
c000ec57:	68 a8 1b 02 c0       	push   0xc0021ba8
c000ec5c:	e8 1c 27 00 00       	call   c001137d <KePanic(char const*)>
c000ec61:	83 c4 10             	add    esp,0x10
c000ec64:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ec69:	eb 69                	jmp    c000ecd4 <ACPI::close(int, int, void*)+0xb0>
c000ec6b:	90                   	nop
c000ec6c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ec71:	75 59                	jne    c000eccc <ACPI::close(int, int, void*)+0xa8>
c000ec73:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ec78:	85 c0                	test   eax,eax
c000ec7a:	74 08                	je     c000ec84 <ACPI::close(int, int, void*)+0x60>
c000ec7c:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ec81:	ff d0                	call   eax
c000ec83:	90                   	nop
c000ec84:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ec89:	8d 76 00             	lea    esi,[esi+0x0]
c000ec8c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ec91:	83 e0 02             	and    eax,0x2
c000ec94:	74 1e                	je     c000ecb4 <ACPI::close(int, int, void*)+0x90>
c000ec96:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ec9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eca1:	89 c2                	mov    edx,eax
c000eca3:	ec                   	in     al,dx
c000eca4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eca8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ecac:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ecb0:	eb da                	jmp    c000ec8c <ACPI::close(int, int, void*)+0x68>
c000ecb2:	66 90                	xchg   ax,ax
c000ecb4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ecbb:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ecc0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ecc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ecc8:	ee                   	out    dx,al
c000ecc9:	8d 76 00             	lea    esi,[esi+0x0]
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	8d 76 00             	lea    esi,[esi+0x0]
c000ecd4:	83 c4 1c             	add    esp,0x1c
c000ecd7:	c3                   	ret    

c000ecd8 <findRSDP()>:
c000ecd8:	83 ec 1c             	sub    esp,0x1c
c000ecdb:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ece0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ece6:	83 e0 04             	and    eax,0x4
c000ece9:	0f b6 c0             	movzx  eax,al
c000ecec:	85 c0                	test   eax,eax
c000ecee:	75 08                	jne    c000ecf8 <findRSDP()+0x20>
c000ecf0:	b8 00 00 00 00       	mov    eax,0x0
c000ecf5:	eb 75                	jmp    c000ed6c <findRSDP()+0x94>
c000ecf7:	90                   	nop
c000ecf8:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ecfd:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ed02:	7f 1c                	jg     c000ed20 <findRSDP()+0x48>
c000ed04:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed09:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ed0f:	83 e2 fb             	and    edx,0xfffffffb
c000ed12:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ed18:	b8 00 00 00 00       	mov    eax,0x0
c000ed1d:	eb 4d                	jmp    c000ed6c <findRSDP()+0x94>
c000ed1f:	90                   	nop
c000ed20:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ed28:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ed30:	77 32                	ja     c000ed64 <findRSDP()+0x8c>
c000ed32:	83 ec 04             	sub    esp,0x4
c000ed35:	6a 08                	push   0x8
c000ed37:	68 43 1c 02 c0       	push   0xc0021c43
c000ed3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ed40:	e8 3b 16 ff ff       	call   c0000380 <memcmp>
c000ed45:	83 c4 10             	add    esp,0x10
c000ed48:	85 c0                	test   eax,eax
c000ed4a:	0f 94 c0             	sete   al
c000ed4d:	0f b6 c0             	movzx  eax,al
c000ed50:	85 c0                	test   eax,eax
c000ed52:	74 08                	je     c000ed5c <findRSDP()+0x84>
c000ed54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed58:	eb 12                	jmp    c000ed6c <findRSDP()+0x94>
c000ed5a:	66 90                	xchg   ax,ax
c000ed5c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ed61:	eb c5                	jmp    c000ed28 <findRSDP()+0x50>
c000ed63:	90                   	nop
c000ed64:	b8 00 00 00 00       	mov    eax,0x0
c000ed69:	8d 76 00             	lea    esi,[esi+0x0]
c000ed6c:	83 c4 1c             	add    esp,0x1c
c000ed6f:	c3                   	ret    

c000ed70 <loadACPITables(unsigned char*)>:
c000ed70:	57                   	push   edi
c000ed71:	56                   	push   esi
c000ed72:	53                   	push   ebx
c000ed73:	83 ec 60             	sub    esp,0x60
c000ed76:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed7b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed81:	83 e0 04             	and    eax,0x4
c000ed84:	0f b6 c0             	movzx  eax,al
c000ed87:	85 c0                	test   eax,eax
c000ed89:	0f 84 41 02 00 00    	je     c000efd0 <loadACPITables(unsigned char*)+0x260>
c000ed8f:	a0 20 8b 02 c0       	mov    al,ds:0xc0028b20
c000ed94:	0f b6 c0             	movzx  eax,al
c000ed97:	85 c0                	test   eax,eax
c000ed99:	74 79                	je     c000ee14 <loadACPITables(unsigned char*)+0xa4>
c000ed9b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed9f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000eda3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000eda7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edaa:	83 e8 24             	sub    eax,0x24
c000edad:	c1 e8 03             	shr    eax,0x3
c000edb0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000edb4:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000edbc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000edc0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000edc4:	0f 8d ba 00 00 00    	jge    c000ee84 <loadACPITables(unsigned char*)+0x114>
c000edca:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000edce:	83 c0 24             	add    eax,0x24
c000edd1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000edd5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000edd9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000eddd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ede1:	c1 e0 03             	shl    eax,0x3
c000ede4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ede8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000edef:	8b 00                	mov    eax,DWORD PTR [eax]
c000edf1:	89 c1                	mov    ecx,eax
c000edf3:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000edf8:	8d 50 01             	lea    edx,[eax+0x1]
c000edfb:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ee01:	89 ca                	mov    edx,ecx
c000ee03:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ee0a:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ee0f:	eb ab                	jmp    c000edbc <loadACPITables(unsigned char*)+0x4c>
c000ee11:	8d 76 00             	lea    esi,[esi+0x0]
c000ee14:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee18:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ee1c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee23:	83 e8 24             	sub    eax,0x24
c000ee26:	c1 e8 02             	shr    eax,0x2
c000ee29:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ee2d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ee35:	8d 76 00             	lea    esi,[esi+0x0]
c000ee38:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee3c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ee40:	7d 42                	jge    c000ee84 <loadACPITables(unsigned char*)+0x114>
c000ee42:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ee46:	83 c0 24             	add    eax,0x24
c000ee49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ee4d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee51:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ee55:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ee59:	c1 e0 02             	shl    eax,0x2
c000ee5c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ee60:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee64:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ee66:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee6b:	8d 50 01             	lea    edx,[eax+0x1]
c000ee6e:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ee74:	89 ca                	mov    edx,ecx
c000ee76:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ee7d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ee82:	eb b4                	jmp    c000ee38 <loadACPITables(unsigned char*)+0xc8>
c000ee84:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ee8c:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee91:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ee95:	0f 8d 39 01 00 00    	jge    c000efd4 <loadACPITables(unsigned char*)+0x264>
c000ee9b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ee9f:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000eea6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eeaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eeae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000eeb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eeb6:	25 ff 0f 00 00       	and    eax,0xfff
c000eebb:	89 c6                	mov    esi,eax
c000eebd:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000eec3:	83 ec 0c             	sub    esp,0xc
c000eec6:	6a 01                	push   0x1
c000eec8:	e8 40 a7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000eecd:	83 c4 10             	add    esp,0x10
c000eed0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eed4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000eeda:	83 ec 0c             	sub    esp,0xc
c000eedd:	6a 01                	push   0x1
c000eedf:	6a 01                	push   0x1
c000eee1:	50                   	push   eax
c000eee2:	52                   	push   edx
c000eee3:	53                   	push   ebx
c000eee4:	e8 31 b0 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eee9:	83 c4 20             	add    esp,0x20
c000eeec:	09 f0                	or     eax,esi
c000eeee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eef2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000eef6:	c1 e0 03             	shl    eax,0x3
c000eef9:	05 20 89 02 c0       	add    eax,0xc0028920
c000eefe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef0a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000ef12:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ef16:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ef1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef1e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef22:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ef26:	89 c6                	mov    esi,eax
c000ef28:	89 d7                	mov    edi,edx
c000ef2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef2c:	89 c8                	mov    eax,ecx
c000ef2e:	89 fa                	mov    edx,edi
c000ef30:	89 f3                	mov    ebx,esi
c000ef32:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ef36:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ef3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ef3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ef45:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ef49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ef4d:	05 00 10 00 00       	add    eax,0x1000
c000ef52:	c1 e8 0c             	shr    eax,0xc
c000ef55:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ef59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef5d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ef61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef65:	25 ff 0f 00 00       	and    eax,0xfff
c000ef6a:	89 c6                	mov    esi,eax
c000ef6c:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef72:	83 ec 0c             	sub    esp,0xc
c000ef75:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef79:	e8 8f a6 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ef7e:	83 c4 10             	add    esp,0x10
c000ef81:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ef85:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef8b:	83 ec 0c             	sub    esp,0xc
c000ef8e:	6a 01                	push   0x1
c000ef90:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ef94:	50                   	push   eax
c000ef95:	52                   	push   edx
c000ef96:	53                   	push   ebx
c000ef97:	e8 7e af ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef9c:	83 c4 20             	add    esp,0x20
c000ef9f:	09 f0                	or     eax,esi
c000efa1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000efa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efa9:	83 ec 0c             	sub    esp,0xc
c000efac:	50                   	push   eax
c000efad:	e8 79 a9 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000efb2:	83 c4 10             	add    esp,0x10
c000efb5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000efb9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000efbd:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000efc4:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000efc9:	e9 be fe ff ff       	jmp    c000ee8c <loadACPITables(unsigned char*)+0x11c>
c000efce:	66 90                	xchg   ax,ax
c000efd0:	90                   	nop
c000efd1:	8d 76 00             	lea    esi,[esi+0x0]
c000efd4:	83 c4 60             	add    esp,0x60
c000efd7:	5b                   	pop    ebx
c000efd8:	5e                   	pop    esi
c000efd9:	5f                   	pop    edi
c000efda:	c3                   	ret    
c000efdb:	90                   	nop

c000efdc <findRSDT(unsigned char*)>:
c000efdc:	57                   	push   edi
c000efdd:	56                   	push   esi
c000efde:	53                   	push   ebx
c000efdf:	83 ec 50             	sub    esp,0x50
c000efe2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000efe7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000efed:	83 e0 04             	and    eax,0x4
c000eff0:	0f b6 c0             	movzx  eax,al
c000eff3:	85 c0                	test   eax,eax
c000eff5:	75 0d                	jne    c000f004 <findRSDT(unsigned char*)+0x28>
c000eff7:	b8 00 00 00 00       	mov    eax,0x0
c000effc:	e9 2b 01 00 00       	jmp    c000f12c <findRSDT(unsigned char*)+0x150>
c000f001:	8d 76 00             	lea    esi,[esi+0x0]
c000f004:	89 e0                	mov    eax,esp
c000f006:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f00a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f00e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f012:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f01a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f01e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f022:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f026:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f02a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f02e:	89 c6                	mov    esi,eax
c000f030:	89 d7                	mov    edi,edx
c000f032:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f034:	89 c8                	mov    eax,ecx
c000f036:	89 fa                	mov    edx,edi
c000f038:	89 f3                	mov    ebx,esi
c000f03a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f03e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f042:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f046:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f04a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f04e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f05a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f05e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f066:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f06a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f06e:	25 ff 0f 00 00       	and    eax,0xfff
c000f073:	89 c6                	mov    esi,eax
c000f075:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f07b:	83 ec 0c             	sub    esp,0xc
c000f07e:	6a 02                	push   0x2
c000f080:	e8 88 a5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f085:	83 c4 10             	add    esp,0x10
c000f088:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f08c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f092:	83 ec 0c             	sub    esp,0xc
c000f095:	6a 01                	push   0x1
c000f097:	6a 02                	push   0x2
c000f099:	50                   	push   eax
c000f09a:	52                   	push   edx
c000f09b:	53                   	push   ebx
c000f09c:	e8 79 ae ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f0a1:	83 c4 20             	add    esp,0x20
c000f0a4:	09 f0                	or     eax,esi
c000f0a6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f0ae:	25 ff 0f 00 00       	and    eax,0xfff
c000f0b3:	89 c6                	mov    esi,eax
c000f0b5:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f0bb:	83 ec 0c             	sub    esp,0xc
c000f0be:	6a 02                	push   0x2
c000f0c0:	e8 48 a5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f0c5:	83 c4 10             	add    esp,0x10
c000f0c8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f0cc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f0d2:	83 ec 0c             	sub    esp,0xc
c000f0d5:	6a 01                	push   0x1
c000f0d7:	6a 02                	push   0x2
c000f0d9:	50                   	push   eax
c000f0da:	52                   	push   edx
c000f0db:	53                   	push   ebx
c000f0dc:	e8 39 ae ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f0e1:	83 c4 20             	add    esp,0x20
c000f0e4:	09 f0                	or     eax,esi
c000f0e6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f0ea:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f0ef:	85 c0                	test   eax,eax
c000f0f1:	75 11                	jne    c000f104 <findRSDT(unsigned char*)+0x128>
c000f0f3:	c6 05 20 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b20,0x0
c000f0fa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f0fe:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f102:	eb 24                	jmp    c000f128 <findRSDT(unsigned char*)+0x14c>
c000f104:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f109:	83 f8 02             	cmp    eax,0x2
c000f10c:	75 12                	jne    c000f120 <findRSDT(unsigned char*)+0x144>
c000f10e:	c6 05 20 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b20,0x1
c000f115:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f119:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f11d:	eb 09                	jmp    c000f128 <findRSDT(unsigned char*)+0x14c>
c000f11f:	90                   	nop
c000f120:	b8 00 00 00 00       	mov    eax,0x0
c000f125:	eb 05                	jmp    c000f12c <findRSDT(unsigned char*)+0x150>
c000f127:	90                   	nop
c000f128:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f12c:	83 c4 50             	add    esp,0x50
c000f12f:	5b                   	pop    ebx
c000f130:	5e                   	pop    esi
c000f131:	5f                   	pop    edi
c000f132:	c3                   	ret    
c000f133:	90                   	nop

c000f134 <findDataTable(unsigned char*, char*)>:
c000f134:	83 ec 1c             	sub    esp,0x1c
c000f137:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f13c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f142:	83 e0 04             	and    eax,0x4
c000f145:	0f b6 c0             	movzx  eax,al
c000f148:	85 c0                	test   eax,eax
c000f14a:	75 08                	jne    c000f154 <findDataTable(unsigned char*, char*)+0x20>
c000f14c:	b8 00 00 00 00       	mov    eax,0x0
c000f151:	eb 5d                	jmp    c000f1b0 <findDataTable(unsigned char*, char*)+0x7c>
c000f153:	90                   	nop
c000f154:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f15c:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000f161:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f165:	7d 41                	jge    c000f1a8 <findDataTable(unsigned char*, char*)+0x74>
c000f167:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f16b:	c1 e0 03             	shl    eax,0x3
c000f16e:	05 20 89 02 c0       	add    eax,0xc0028920
c000f173:	83 ec 04             	sub    esp,0x4
c000f176:	6a 04                	push   0x4
c000f178:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f17c:	50                   	push   eax
c000f17d:	e8 fe 11 ff ff       	call   c0000380 <memcmp>
c000f182:	83 c4 10             	add    esp,0x10
c000f185:	85 c0                	test   eax,eax
c000f187:	0f 94 c0             	sete   al
c000f18a:	0f b6 c0             	movzx  eax,al
c000f18d:	85 c0                	test   eax,eax
c000f18f:	74 0f                	je     c000f1a0 <findDataTable(unsigned char*, char*)+0x6c>
c000f191:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f195:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000f19c:	eb 12                	jmp    c000f1b0 <findDataTable(unsigned char*, char*)+0x7c>
c000f19e:	66 90                	xchg   ax,ax
c000f1a0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f1a5:	eb b5                	jmp    c000f15c <findDataTable(unsigned char*, char*)+0x28>
c000f1a7:	90                   	nop
c000f1a8:	b8 00 00 00 00       	mov    eax,0x0
c000f1ad:	8d 76 00             	lea    esi,[esi+0x0]
c000f1b0:	83 c4 1c             	add    esp,0x1c
c000f1b3:	c3                   	ret    

c000f1b4 <scanMADT()>:
c000f1b4:	53                   	push   ebx
c000f1b5:	83 ec 38             	sub    esp,0x38
c000f1b8:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f1bd:	25 00 04 00 00       	and    eax,0x400
c000f1c2:	74 14                	je     c000f1d8 <scanMADT()+0x24>
c000f1c4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1c9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f1cf:	83 e2 fb             	and    edx,0xfffffffb
c000f1d2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f1d8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1dd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f1e3:	83 e0 04             	and    eax,0x4
c000f1e6:	0f b6 c0             	movzx  eax,al
c000f1e9:	85 c0                	test   eax,eax
c000f1eb:	0f 84 6b 04 00 00    	je     c000f65c <scanMADT()+0x4a8>
c000f1f1:	e8 e2 fa ff ff       	call   c000ecd8 <findRSDP()>
c000f1f6:	a3 2c 8b 02 c0       	mov    ds:0xc0028b2c,eax
c000f1fb:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f200:	85 c0                	test   eax,eax
c000f202:	75 1c                	jne    c000f220 <scanMADT()+0x6c>
c000f204:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f209:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f20f:	83 e2 fb             	and    edx,0xfffffffb
c000f212:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f218:	e9 47 04 00 00       	jmp    c000f664 <scanMADT()+0x4b0>
c000f21d:	8d 76 00             	lea    esi,[esi+0x0]
c000f220:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f225:	83 ec 0c             	sub    esp,0xc
c000f228:	50                   	push   eax
c000f229:	e8 ae fd ff ff       	call   c000efdc <findRSDT(unsigned char*)>
c000f22e:	83 c4 10             	add    esp,0x10
c000f231:	a3 28 8b 02 c0       	mov    ds:0xc0028b28,eax
c000f236:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f23b:	85 c0                	test   eax,eax
c000f23d:	75 19                	jne    c000f258 <scanMADT()+0xa4>
c000f23f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f244:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f24a:	83 e2 fb             	and    edx,0xfffffffb
c000f24d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f253:	e9 0c 04 00 00       	jmp    c000f664 <scanMADT()+0x4b0>
c000f258:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f25d:	83 ec 0c             	sub    esp,0xc
c000f260:	50                   	push   eax
c000f261:	e8 0a fb ff ff       	call   c000ed70 <loadACPITables(unsigned char*)>
c000f266:	83 c4 10             	add    esp,0x10
c000f269:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f26e:	83 ec 08             	sub    esp,0x8
c000f271:	68 4c 1c 02 c0       	push   0xc0021c4c
c000f276:	50                   	push   eax
c000f277:	e8 b8 fe ff ff       	call   c000f134 <findDataTable(unsigned char*, char*)>
c000f27c:	83 c4 10             	add    esp,0x10
c000f27f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f283:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f288:	75 1a                	jne    c000f2a4 <scanMADT()+0xf0>
c000f28a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f28f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f295:	83 e2 fe             	and    edx,0xfffffffe
c000f298:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f29e:	e9 c1 03 00 00       	jmp    c000f664 <scanMADT()+0x4b0>
c000f2a3:	90                   	nop
c000f2a4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f2ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f2b3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f2b7:	0f 87 a7 03 00 00    	ja     c000f664 <scanMADT()+0x4b0>
c000f2bd:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f2c5:	0f 87 99 03 00 00    	ja     c000f664 <scanMADT()+0x4b0>
c000f2cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2cf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2d7:	8d 50 01             	lea    edx,[eax+0x1]
c000f2da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2e2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f2e6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f2ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2ee:	8d 50 01             	lea    edx,[eax+0x1]
c000f2f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2f9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f2fd:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f301:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f306:	83 f8 02             	cmp    eax,0x2
c000f309:	0f 86 51 03 00 00    	jbe    c000f660 <scanMADT()+0x4ac>
c000f30f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f314:	85 c0                	test   eax,eax
c000f316:	75 58                	jne    c000f370 <scanMADT()+0x1bc>
c000f318:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f31c:	8d 50 01             	lea    edx,[eax+0x1]
c000f31f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f323:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f329:	0f b6 d2             	movzx  edx,dl
c000f32c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f330:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f334:	88 82 60 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72a0],al
c000f33a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f33e:	8d 50 01             	lea    edx,[eax+0x1]
c000f341:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f345:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f34b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f34e:	88 0d 20 8d 02 c0    	mov    BYTE PTR ds:0xc0028d20,cl
c000f354:	0f b6 d2             	movzx  edx,dl
c000f357:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f35b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f35f:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c000f365:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f36a:	e9 d9 02 00 00       	jmp    c000f648 <scanMADT()+0x494>
c000f36f:	90                   	nop
c000f370:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f375:	83 f8 01             	cmp    eax,0x1
c000f378:	0f 85 1a 01 00 00    	jne    c000f498 <scanMADT()+0x2e4>
c000f37e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f382:	8d 50 01             	lea    edx,[eax+0x1]
c000f385:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f389:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c000f38f:	0f b6 d2             	movzx  edx,dl
c000f392:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f396:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f39a:	88 82 00 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7400],al
c000f3a0:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f3a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3ad:	01 d0                	add    eax,edx
c000f3af:	83 c0 2c             	add    eax,0x2c
c000f3b2:	8a 00                	mov    al,BYTE PTR [eax]
c000f3b4:	0f b6 d0             	movzx  edx,al
c000f3b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3bb:	8d 48 01             	lea    ecx,[eax+0x1]
c000f3be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3c2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f3c6:	0f b6 c0             	movzx  eax,al
c000f3c9:	c1 e0 08             	shl    eax,0x8
c000f3cc:	89 d1                	mov    ecx,edx
c000f3ce:	09 c1                	or     ecx,eax
c000f3d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3d4:	8d 50 02             	lea    edx,[eax+0x2]
c000f3d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3db:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3df:	0f b6 c0             	movzx  eax,al
c000f3e2:	c1 e0 10             	shl    eax,0x10
c000f3e5:	09 c1                	or     ecx,eax
c000f3e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3eb:	8d 50 03             	lea    edx,[eax+0x3]
c000f3ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3f2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3f6:	0f b6 c0             	movzx  eax,al
c000f3f9:	c1 e0 18             	shl    eax,0x18
c000f3fc:	09 c1                	or     ecx,eax
c000f3fe:	89 ca                	mov    edx,ecx
c000f400:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f405:	0f b6 c0             	movzx  eax,al
c000f408:	89 14 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],edx
c000f40f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f414:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f418:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f41c:	01 d0                	add    eax,edx
c000f41e:	83 c0 2c             	add    eax,0x2c
c000f421:	8a 00                	mov    al,BYTE PTR [eax]
c000f423:	0f b6 d0             	movzx  edx,al
c000f426:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f42a:	8d 48 01             	lea    ecx,[eax+0x1]
c000f42d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f431:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f435:	0f b6 c0             	movzx  eax,al
c000f438:	c1 e0 08             	shl    eax,0x8
c000f43b:	89 d1                	mov    ecx,edx
c000f43d:	09 c1                	or     ecx,eax
c000f43f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f443:	8d 50 02             	lea    edx,[eax+0x2]
c000f446:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f44a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f44e:	0f b6 c0             	movzx  eax,al
c000f451:	c1 e0 10             	shl    eax,0x10
c000f454:	09 c1                	or     ecx,eax
c000f456:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f45a:	8d 50 03             	lea    edx,[eax+0x3]
c000f45d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f461:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f465:	0f b6 c0             	movzx  eax,al
c000f468:	c1 e0 18             	shl    eax,0x18
c000f46b:	09 c1                	or     ecx,eax
c000f46d:	89 ca                	mov    edx,ecx
c000f46f:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f474:	0f b6 c0             	movzx  eax,al
c000f477:	89 14 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],edx
c000f47e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f483:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f488:	83 c0 01             	add    eax,0x1
c000f48b:	a2 e0 8b 02 c0       	mov    ds:0xc0028be0,al
c000f490:	e9 b3 01 00 00       	jmp    c000f648 <scanMADT()+0x494>
c000f495:	8d 76 00             	lea    esi,[esi+0x0]
c000f498:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f49d:	83 f8 02             	cmp    eax,0x2
c000f4a0:	0f 85 ea 00 00 00    	jne    c000f590 <scanMADT()+0x3dc>
c000f4a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4aa:	8d 50 01             	lea    edx,[eax+0x1]
c000f4ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4b5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4b9:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f4bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4c1:	8d 50 01             	lea    edx,[eax+0x1]
c000f4c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4cc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4d0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f4d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4dc:	01 d0                	add    eax,edx
c000f4de:	83 c0 2c             	add    eax,0x2c
c000f4e1:	8a 00                	mov    al,BYTE PTR [eax]
c000f4e3:	0f b6 d0             	movzx  edx,al
c000f4e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4ea:	8d 48 01             	lea    ecx,[eax+0x1]
c000f4ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4f1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f4f5:	0f b6 c0             	movzx  eax,al
c000f4f8:	c1 e0 08             	shl    eax,0x8
c000f4fb:	89 d1                	mov    ecx,edx
c000f4fd:	09 c1                	or     ecx,eax
c000f4ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f503:	8d 50 02             	lea    edx,[eax+0x2]
c000f506:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f50a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f50e:	0f b6 c0             	movzx  eax,al
c000f511:	c1 e0 10             	shl    eax,0x10
c000f514:	09 c1                	or     ecx,eax
c000f516:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f51a:	8d 50 03             	lea    edx,[eax+0x3]
c000f51d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f521:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f525:	0f b6 c0             	movzx  eax,al
c000f528:	c1 e0 18             	shl    eax,0x18
c000f52b:	09 c8                	or     eax,ecx
c000f52d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f531:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f536:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f53a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f53e:	01 d0                	add    eax,edx
c000f540:	83 c0 2c             	add    eax,0x2c
c000f543:	8a 00                	mov    al,BYTE PTR [eax]
c000f545:	0f b6 c0             	movzx  eax,al
c000f548:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f54c:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f54f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f553:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f557:	0f b6 d2             	movzx  edx,dl
c000f55a:	c1 e2 08             	shl    edx,0x8
c000f55d:	09 d0                	or     eax,edx
c000f55f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f564:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f569:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f56e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f572:	88 90 48 33 02 c0    	mov    BYTE PTR [eax-0x3ffdccb8],dl
c000f578:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f57d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f582:	66 89 84 12 c0 8b 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7440],ax
c000f58a:	e9 b9 00 00 00       	jmp    c000f648 <scanMADT()+0x494>
c000f58f:	90                   	nop
c000f590:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f595:	83 f8 04             	cmp    eax,0x4
c000f598:	0f 85 9a 00 00 00    	jne    c000f638 <scanMADT()+0x484>
c000f59e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5a2:	8d 50 01             	lea    edx,[eax+0x1]
c000f5a5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5a9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5ad:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5b1:	0f b6 c0             	movzx  eax,al
c000f5b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f5b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5c0:	01 d0                	add    eax,edx
c000f5c2:	83 c0 2c             	add    eax,0x2c
c000f5c5:	8a 00                	mov    al,BYTE PTR [eax]
c000f5c7:	0f b6 d0             	movzx  edx,al
c000f5ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5ce:	8d 48 01             	lea    ecx,[eax+0x1]
c000f5d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5d5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f5d9:	0f b6 c0             	movzx  eax,al
c000f5dc:	c1 e0 08             	shl    eax,0x8
c000f5df:	09 d0                	or     eax,edx
c000f5e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f5e5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f5ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5ee:	8d 50 01             	lea    edx,[eax+0x1]
c000f5f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f5f9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f5fd:	0f b6 c0             	movzx  eax,al
c000f600:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f608:	c1 e0 08             	shl    eax,0x8
c000f60b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f60f:	89 c1                	mov    ecx,eax
c000f611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f615:	c1 e0 18             	shl    eax,0x18
c000f618:	89 c3                	mov    ebx,eax
c000f61a:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c000f61f:	8d 50 01             	lea    edx,[eax+0x1]
c000f622:	89 15 30 8b 02 c0    	mov    DWORD PTR ds:0xc0028b30,edx
c000f628:	09 d9                	or     ecx,ebx
c000f62a:	89 ca                	mov    edx,ecx
c000f62c:	89 14 85 40 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74c0],edx
c000f633:	eb 13                	jmp    c000f648 <scanMADT()+0x494>
c000f635:	8d 76 00             	lea    esi,[esi+0x0]
c000f638:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f63d:	83 f8 05             	cmp    eax,0x5
c000f640:	75 06                	jne    c000f648 <scanMADT()+0x494>
c000f642:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f647:	90                   	nop
c000f648:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f64d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f651:	01 d0                	add    eax,edx
c000f653:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f657:	e9 50 fc ff ff       	jmp    c000f2ac <scanMADT()+0xf8>
c000f65c:	90                   	nop
c000f65d:	eb 05                	jmp    c000f664 <scanMADT()+0x4b0>
c000f65f:	90                   	nop
c000f660:	90                   	nop
c000f661:	8d 76 00             	lea    esi,[esi+0x0]
c000f664:	83 c4 38             	add    esp,0x38
c000f667:	5b                   	pop    ebx
c000f668:	c3                   	ret    
c000f669:	90                   	nop
c000f66a:	66 90                	xchg   ax,ax

c000f66c <ACPI::ACPI()>:
c000f66c:	83 ec 0c             	sub    esp,0xc
c000f66f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f673:	83 ec 08             	sub    esp,0x8
c000f676:	68 51 1c 02 c0       	push   0xc0021c51
c000f67b:	50                   	push   eax
c000f67c:	e8 65 d2 ff ff       	call   c000c8e6 <Device::Device(char const*)>
c000f681:	83 c4 10             	add    esp,0x10
c000f684:	ba a4 1d 02 c0       	mov    edx,0xc0021da4
c000f689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f68d:	89 10                	mov    DWORD PTR [eax],edx
c000f68f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f693:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f69a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f69e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f6a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6ac:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f6b6:	e8 f9 fa ff ff       	call   c000f1b4 <scanMADT()>
c000f6bb:	90                   	nop
c000f6bc:	83 c4 0c             	add    esp,0xc
c000f6bf:	c3                   	ret    

c000f6c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f6c0:	83 ec 2c             	sub    esp,0x2c
c000f6c3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f6c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f6cb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f6cf:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f6d3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f6d8:	88 d0                	mov    al,dl
c000f6da:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f6de:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f6e3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f6eb:	90                   	nop
c000f6ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f6f0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f6f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f6fa:	0f 8d b0 00 00 00    	jge    c000f7b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f700:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f704:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f708:	83 c2 2a             	add    edx,0x2a
c000f70b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f70f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f714:	0f b7 c0             	movzx  eax,ax
c000f717:	39 c2                	cmp    edx,eax
c000f719:	0f 85 85 00 00 00    	jne    c000f7a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f71f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f723:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f727:	83 c2 2a             	add    edx,0x2a
c000f72a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f72e:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f733:	0f b6 c0             	movzx  eax,al
c000f736:	39 c2                	cmp    edx,eax
c000f738:	75 6a                	jne    c000f7a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f73a:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f73f:	85 c0                	test   eax,eax
c000f741:	74 3d                	je     c000f780 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f743:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f747:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f74b:	83 c2 2a             	add    edx,0x2a
c000f74e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f752:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f756:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f759:	39 c2                	cmp    edx,eax
c000f75b:	74 13                	je     c000f770 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f75d:	83 ec 0c             	sub    esp,0xc
c000f760:	68 cc 1b 02 c0       	push   0xc0021bcc
c000f765:	e8 13 1c 00 00       	call   c001137d <KePanic(char const*)>
c000f76a:	83 c4 10             	add    esp,0x10
c000f76d:	8d 76 00             	lea    esi,[esi+0x0]
c000f770:	83 ec 0c             	sub    esp,0xc
c000f773:	68 56 1c 02 c0       	push   0xc0021c56
c000f778:	e8 00 1c 00 00       	call   c001137d <KePanic(char const*)>
c000f77d:	83 c4 10             	add    esp,0x10
c000f780:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f784:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f788:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f78c:	83 c2 2a             	add    edx,0x2a
c000f78f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f793:	8b 02                	mov    eax,DWORD PTR [edx]
c000f795:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f798:	89 01                	mov    DWORD PTR [ecx],eax
c000f79a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f79d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7a2:	66 90                	xchg   ax,ax
c000f7a4:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f7a9:	e9 3e ff ff ff       	jmp    c000f6ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f7ae:	66 90                	xchg   ax,ax
c000f7b0:	90                   	nop
c000f7b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7b5:	83 c4 2c             	add    esp,0x2c
c000f7b8:	c2 04 00             	ret    0x4
c000f7bb:	90                   	nop

c000f7bc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f7bc:	83 ec 1c             	sub    esp,0x1c
c000f7bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7c3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f7c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f7cb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f7d0:	88 c8                	mov    al,cl
c000f7d2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f7d6:	88 d0                	mov    al,dl
c000f7d8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f7dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7e0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f7e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7ea:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f7ed:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000f7f1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000f7f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7f9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f7ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f803:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000f806:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f80a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000f80f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f813:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f819:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f81d:	83 c0 01             	add    eax,0x1
c000f820:	88 c1                	mov    cl,al
c000f822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f826:	83 c2 2a             	add    edx,0x2a
c000f829:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f82d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f831:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f837:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f83b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f83e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f842:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f846:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f84a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f850:	8d 50 01             	lea    edx,[eax+0x1]
c000f853:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f857:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f85d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f861:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f867:	3d 00 02 00 00       	cmp    eax,0x200
c000f86c:	75 12                	jne    c000f880 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f86e:	83 ec 0c             	sub    esp,0xc
c000f871:	68 65 1c 02 c0       	push   0xc0021c65
c000f876:	e8 02 1b 00 00       	call   c001137d <KePanic(char const*)>
c000f87b:	83 c4 10             	add    esp,0x10
c000f87e:	66 90                	xchg   ax,ax
c000f880:	90                   	nop
c000f881:	83 c4 1c             	add    esp,0x1c
c000f884:	c3                   	ret    
c000f885:	90                   	nop
c000f886:	66 90                	xchg   ax,ax

c000f888 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f888:	b8 00 00 00 00       	mov    eax,0x0
c000f88d:	c3                   	ret    
c000f88e:	66 90                	xchg   ax,ax

c000f890 <ACPI::detectPCI()>:
c000f890:	53                   	push   ebx
c000f891:	83 ec 28             	sub    esp,0x28
c000f894:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f899:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f89e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f8a3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f8a9:	83 e0 04             	and    eax,0x4
c000f8ac:	0f b6 c0             	movzx  eax,al
c000f8af:	85 c0                	test   eax,eax
c000f8b1:	74 2d                	je     c000f8e0 <ACPI::detectPCI()+0x50>
c000f8b3:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f8b8:	83 ec 08             	sub    esp,0x8
c000f8bb:	68 82 1c 02 c0       	push   0xc0021c82
c000f8c0:	50                   	push   eax
c000f8c1:	e8 6e f8 ff ff       	call   c000f134 <findDataTable(unsigned char*, char*)>
c000f8c6:	83 c4 10             	add    esp,0x10
c000f8c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f8cd:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f8d2:	74 0c                	je     c000f8e0 <ACPI::detectPCI()+0x50>
c000f8d4:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8d9:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f8de:	66 90                	xchg   ax,ax
c000f8e0:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f8e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f8ec:	8a 00                	mov    al,BYTE PTR [eax]
c000f8ee:	0f b6 c0             	movzx  eax,al
c000f8f1:	83 f8 01             	cmp    eax,0x1
c000f8f4:	75 0e                	jne    c000f904 <ACPI::detectPCI()+0x74>
c000f8f6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8fb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f900:	eb 2e                	jmp    c000f930 <ACPI::detectPCI()+0xa0>
c000f902:	66 90                	xchg   ax,ax
c000f904:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f908:	8a 00                	mov    al,BYTE PTR [eax]
c000f90a:	0f b6 c0             	movzx  eax,al
c000f90d:	83 f8 02             	cmp    eax,0x2
c000f910:	75 1e                	jne    c000f930 <ACPI::detectPCI()+0xa0>
c000f912:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f917:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f91c:	85 c0                	test   eax,eax
c000f91e:	74 10                	je     c000f930 <ACPI::detectPCI()+0xa0>
c000f920:	83 ec 0c             	sub    esp,0xc
c000f923:	68 fc 1b 02 c0       	push   0xc0021bfc
c000f928:	e8 50 1a 00 00       	call   c001137d <KePanic(char const*)>
c000f92d:	83 c4 10             	add    esp,0x10
c000f930:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f934:	83 f0 01             	xor    eax,0x1
c000f937:	0f b6 c0             	movzx  eax,al
c000f93a:	85 c0                	test   eax,eax
c000f93c:	74 46                	je     c000f984 <ACPI::detectPCI()+0xf4>
c000f93e:	e8 ed 07 ff ff       	call   c0000130 <manualPCIProbe>
c000f943:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f947:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f94c:	75 0e                	jne    c000f95c <ACPI::detectPCI()+0xcc>
c000f94e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f953:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f958:	eb 2a                	jmp    c000f984 <ACPI::detectPCI()+0xf4>
c000f95a:	66 90                	xchg   ax,ax
c000f95c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f961:	75 21                	jne    c000f984 <ACPI::detectPCI()+0xf4>
c000f963:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f968:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f96d:	85 c0                	test   eax,eax
c000f96f:	74 13                	je     c000f984 <ACPI::detectPCI()+0xf4>
c000f971:	83 ec 0c             	sub    esp,0xc
c000f974:	68 fc 1b 02 c0       	push   0xc0021bfc
c000f979:	e8 ff 19 00 00       	call   c001137d <KePanic(char const*)>
c000f97e:	83 c4 10             	add    esp,0x10
c000f981:	8d 76 00             	lea    esi,[esi+0x0]
c000f984:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f989:	85 c0                	test   eax,eax
c000f98b:	0f 84 87 00 00 00    	je     c000fa18 <ACPI::detectPCI()+0x188>
c000f991:	83 ec 0c             	sub    esp,0xc
c000f994:	68 87 1c 02 c0       	push   0xc0021c87
c000f999:	e8 09 13 00 00       	call   c0010ca7 <KeSetBootMessage(char const*)>
c000f99e:	83 c4 10             	add    esp,0x10
c000f9a1:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f9a9:	83 ec 0c             	sub    esp,0xc
c000f9ac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f9b0:	e8 01 81 ff ff       	call   c0007ab6 <malloc>
c000f9b5:	83 c4 10             	add    esp,0x10
c000f9b8:	89 c3                	mov    ebx,eax
c000f9ba:	83 ec 0c             	sub    esp,0xc
c000f9bd:	53                   	push   ebx
c000f9be:	e8 f5 b4 00 00       	call   c001aeb8 <PCI::PCI()>
c000f9c3:	83 c4 10             	add    esp,0x10
c000f9c6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f9ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9ce:	83 ec 08             	sub    esp,0x8
c000f9d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f9d5:	50                   	push   eax
c000f9d6:	e8 73 cd ff ff       	call   c000c74e <Device::addChild(Device*)>
c000f9db:	83 c4 10             	add    esp,0x10
c000f9de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9e2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9e4:	83 c0 08             	add    eax,0x8
c000f9e7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9e9:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f9ee:	85 d2                	test   edx,edx
c000f9f0:	74 0a                	je     c000f9fc <ACPI::detectPCI()+0x16c>
c000f9f2:	ba 01 00 00 00       	mov    edx,0x1
c000f9f7:	eb 0b                	jmp    c000fa04 <ACPI::detectPCI()+0x174>
c000f9f9:	8d 76 00             	lea    esi,[esi+0x0]
c000f9fc:	ba 02 00 00 00       	mov    edx,0x2
c000fa01:	8d 76 00             	lea    esi,[esi+0x0]
c000fa04:	6a 00                	push   0x0
c000fa06:	6a 00                	push   0x0
c000fa08:	52                   	push   edx
c000fa09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fa0d:	ff d0                	call   eax
c000fa0f:	83 c4 10             	add    esp,0x10
c000fa12:	e9 91 00 00 00       	jmp    c000faa8 <ACPI::detectPCI()+0x218>
c000fa17:	90                   	nop
c000fa18:	83 ec 0c             	sub    esp,0xc
c000fa1b:	68 9f 1c 02 c0       	push   0xc0021c9f
c000fa20:	e8 82 12 00 00       	call   c0010ca7 <KeSetBootMessage(char const*)>
c000fa25:	83 c4 10             	add    esp,0x10
c000fa28:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fa2f:	83 ec 0c             	sub    esp,0xc
c000fa32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fa36:	e8 7b 80 ff ff       	call   c0007ab6 <malloc>
c000fa3b:	83 c4 10             	add    esp,0x10
c000fa3e:	89 c3                	mov    ebx,eax
c000fa40:	83 ec 0c             	sub    esp,0xc
c000fa43:	53                   	push   ebx
c000fa44:	e8 09 c0 00 00       	call   c001ba52 <IDE::IDE()>
c000fa49:	83 c4 10             	add    esp,0x10
c000fa4c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fa50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa54:	83 ec 08             	sub    esp,0x8
c000fa57:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fa5b:	50                   	push   eax
c000fa5c:	e8 ed cc ff ff       	call   c000c74e <Device::addChild(Device*)>
c000fa61:	83 c4 10             	add    esp,0x10
c000fa64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa68:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fa72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa76:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fa7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa83:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fa8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa90:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa92:	83 c0 08             	add    eax,0x8
c000fa95:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa97:	6a 00                	push   0x0
c000fa99:	6a 00                	push   0x0
c000fa9b:	6a 00                	push   0x0
c000fa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000faa1:	ff d0                	call   eax
c000faa3:	83 c4 10             	add    esp,0x10
c000faa6:	66 90                	xchg   ax,ax
c000faa8:	90                   	nop
c000faa9:	83 c4 28             	add    esp,0x28
c000faac:	5b                   	pop    ebx
c000faad:	c3                   	ret    
c000faae:	66 90                	xchg   ax,ax

c000fab0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fab0:	83 ec 1c             	sub    esp,0x1c
c000fab3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fab7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000faba:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fabe:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fac3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fac8:	83 ec 08             	sub    esp,0x8
c000facb:	52                   	push   edx
c000facc:	50                   	push   eax
c000facd:	e8 a6 76 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000fad2:	83 c4 10             	add    esp,0x10
c000fad5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fad9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fade:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fae3:	83 ec 04             	sub    esp,0x4
c000fae6:	6a 01                	push   0x1
c000fae8:	52                   	push   edx
c000fae9:	50                   	push   eax
c000faea:	e8 a3 77 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000faef:	83 c4 10             	add    esp,0x10
c000faf2:	90                   	nop
c000faf3:	83 c4 1c             	add    esp,0x1c
c000faf6:	c3                   	ret    
c000faf7:	90                   	nop

c000faf8 <ACPI::sleep()>:
c000faf8:	83 ec 0c             	sub    esp,0xc
c000fafb:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fb00:	85 c0                	test   eax,eax
c000fb02:	74 08                	je     c000fb0c <ACPI::sleep()+0x14>
c000fb04:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fb09:	ff d0                	call   eax
c000fb0b:	90                   	nop
c000fb0c:	90                   	nop
c000fb0d:	83 c4 0c             	add    esp,0xc
c000fb10:	c3                   	ret    
c000fb11:	90                   	nop
c000fb12:	66 90                	xchg   ax,ax

c000fb14 <ACPI::open(int, int, void*)>:
c000fb14:	57                   	push   edi
c000fb15:	56                   	push   esi
c000fb16:	53                   	push   ebx
c000fb17:	81 ec 70 01 00 00    	sub    esp,0x170
c000fb1d:	83 ec 0c             	sub    esp,0xc
c000fb20:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fb27:	e8 64 fd ff ff       	call   c000f890 <ACPI::detectPCI()>
c000fb2c:	83 c4 10             	add    esp,0x10
c000fb2f:	83 ec 0c             	sub    esp,0xc
c000fb32:	68 24 1c 02 c0       	push   0xc0021c24
c000fb37:	e8 6b 11 00 00       	call   c0010ca7 <KeSetBootMessage(char const*)>
c000fb3c:	83 c4 10             	add    esp,0x10
c000fb3f:	b8 4c 05 00 00       	mov    eax,0x54c
c000fb44:	8a 00                	mov    al,BYTE PTR [eax]
c000fb46:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fb4d:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fb55:	83 f8 01             	cmp    eax,0x1
c000fb58:	75 12                	jne    c000fb6c <ACPI::open(int, int, void*)+0x58>
c000fb5a:	83 ec 0c             	sub    esp,0xc
c000fb5d:	68 71 15 02 c0       	push   0xc0021571
c000fb62:	e8 9e 4d 00 00       	call   c0014905 <Thr::loadKernelSymbolTable(char const*)>
c000fb67:	83 c4 10             	add    esp,0x10
c000fb6a:	eb 34                	jmp    c000fba0 <ACPI::open(int, int, void*)+0x8c>
c000fb6c:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fb74:	3d bb 00 00 00       	cmp    eax,0xbb
c000fb79:	75 15                	jne    c000fb90 <ACPI::open(int, int, void*)+0x7c>
c000fb7b:	83 ec 0c             	sub    esp,0xc
c000fb7e:	68 b4 1c 02 c0       	push   0xc0021cb4
c000fb83:	e8 7d 4d 00 00       	call   c0014905 <Thr::loadKernelSymbolTable(char const*)>
c000fb88:	83 c4 10             	add    esp,0x10
c000fb8b:	eb 13                	jmp    c000fba0 <ACPI::open(int, int, void*)+0x8c>
c000fb8d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb90:	83 ec 0c             	sub    esp,0xc
c000fb93:	68 d2 1c 02 c0       	push   0xc0021cd2
c000fb98:	e8 e0 17 00 00       	call   c001137d <KePanic(char const*)>
c000fb9d:	83 c4 10             	add    esp,0x10
c000fba0:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fba8:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fbb3:	83 ec 0c             	sub    esp,0xc
c000fbb6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fbbd:	e8 f4 7e ff ff       	call   c0007ab6 <malloc>
c000fbc2:	83 c4 10             	add    esp,0x10
c000fbc5:	89 c3                	mov    ebx,eax
c000fbc7:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fbcc:	83 ec 04             	sub    esp,0x4
c000fbcf:	50                   	push   eax
c000fbd0:	68 ec 1c 02 c0       	push   0xc0021cec
c000fbd5:	53                   	push   ebx
c000fbd6:	e8 fb bc ff ff       	call   c000b8d6 <File::File(char const*, Process*)>
c000fbdb:	83 c4 10             	add    esp,0x10
c000fbde:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fbe5:	83 ec 08             	sub    esp,0x8
c000fbe8:	6a 01                	push   0x1
c000fbea:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fbf1:	e8 fe bc ff ff       	call   c000b8f4 <File::open(FileOpenMode)>
c000fbf6:	83 c4 10             	add    esp,0x10
c000fbf9:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000fc00:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000fc08:	75 16                	jne    c000fc20 <ACPI::open(int, int, void*)+0x10c>
c000fc0a:	83 ec 0c             	sub    esp,0xc
c000fc0d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fc14:	e8 39 bd ff ff       	call   c000b952 <File::close()>
c000fc19:	83 c4 10             	add    esp,0x10
c000fc1c:	eb 0a                	jmp    c000fc28 <ACPI::open(int, int, void*)+0x114>
c000fc1e:	66 90                	xchg   ax,ax
c000fc20:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000fc28:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000fc30:	74 1e                	je     c000fc50 <ACPI::open(int, int, void*)+0x13c>
c000fc32:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000fc39:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc3b:	83 c0 08             	add    eax,0x8
c000fc3e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc40:	83 ec 0c             	sub    esp,0xc
c000fc43:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fc4a:	ff d0                	call   eax
c000fc4c:	83 c4 10             	add    esp,0x10
c000fc4f:	90                   	nop
c000fc50:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000fc57:	83 f0 01             	xor    eax,0x1
c000fc5a:	0f b6 c0             	movzx  eax,al
c000fc5d:	85 c0                	test   eax,eax
c000fc5f:	74 43                	je     c000fca4 <ACPI::open(int, int, void*)+0x190>
c000fc61:	83 ec 0c             	sub    esp,0xc
c000fc64:	68 0a 1d 02 c0       	push   0xc0021d0a
c000fc69:	e8 39 10 00 00       	call   c0010ca7 <KeSetBootMessage(char const*)>
c000fc6e:	83 c4 10             	add    esp,0x10
c000fc71:	83 ec 04             	sub    esp,0x4
c000fc74:	6a 0c                	push   0xc
c000fc76:	68 25 1d 02 c0       	push   0xc0021d25
c000fc7b:	68 36 1d 02 c0       	push   0xc0021d36
c000fc80:	e8 03 3f 00 00       	call   c0013b88 <Reg::readIntWithDefault(char*, char*, int)>
c000fc85:	83 c4 10             	add    esp,0x10
c000fc88:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000fc8f:	83 ec 0c             	sub    esp,0xc
c000fc92:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000fc99:	e8 9e 9b ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000fc9e:	83 c4 10             	add    esp,0x10
c000fca1:	8d 76 00             	lea    esi,[esi+0x0]
c000fca4:	83 ec 0c             	sub    esp,0xc
c000fca7:	68 35 08 02 c0       	push   0xc0020835
c000fcac:	e8 f6 0f 00 00       	call   c0010ca7 <KeSetBootMessage(char const*)>
c000fcb1:	83 c4 10             	add    esp,0x10
c000fcb4:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000fcbb:	83 ec 08             	sub    esp,0x8
c000fcbe:	6a 13                	push   0x13
c000fcc0:	50                   	push   eax
c000fcc1:	e8 a0 cd ff ff       	call   c000ca66 <getDevicesOfType(DeviceType)>
c000fcc6:	83 c4 0c             	add    esp,0xc
c000fcc9:	8d 76 00             	lea    esi,[esi+0x0]
c000fccc:	83 ec 0c             	sub    esp,0xc
c000fccf:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fcd6:	50                   	push   eax
c000fcd7:	e8 54 ff 00 00       	call   c001fc30 <LinkedList<Device>::isEmpty()>
c000fcdc:	83 c4 10             	add    esp,0x10
c000fcdf:	83 f0 01             	xor    eax,0x1
c000fce2:	0f b6 c0             	movzx  eax,al
c000fce5:	85 c0                	test   eax,eax
c000fce7:	0f 84 47 01 00 00    	je     c000fe34 <ACPI::open(int, int, void*)+0x320>
c000fced:	83 ec 0c             	sub    esp,0xc
c000fcf0:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fcf7:	50                   	push   eax
c000fcf8:	e8 4f ff 00 00       	call   c001fc4c <LinkedList<Device>::getFirstElement()>
c000fcfd:	83 c4 10             	add    esp,0x10
c000fd00:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000fd07:	83 ec 0c             	sub    esp,0xc
c000fd0a:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fd11:	50                   	push   eax
c000fd12:	e8 3d ff 00 00       	call   c001fc54 <LinkedList<Device>::removeFirst()>
c000fd17:	83 c4 10             	add    esp,0x10
c000fd1a:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000fd21:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000fd28:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000fd2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fd33:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000fd39:	ba 09 00 00 00       	mov    edx,0x9
c000fd3e:	fc                   	cld    
c000fd3f:	89 c7                	mov    edi,eax
c000fd41:	89 de                	mov    esi,ebx
c000fd43:	89 d1                	mov    ecx,edx
c000fd45:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fd47:	83 ec 08             	sub    esp,0x8
c000fd4a:	8d 44 24 38          	lea    eax,[esp+0x38]
c000fd4e:	50                   	push   eax
c000fd4f:	83 ec 24             	sub    esp,0x24
c000fd52:	89 e0                	mov    eax,esp
c000fd54:	89 c3                	mov    ebx,eax
c000fd56:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000fd5a:	ba 09 00 00 00       	mov    edx,0x9
c000fd5f:	89 df                	mov    edi,ebx
c000fd61:	89 c6                	mov    esi,eax
c000fd63:	89 d1                	mov    ecx,edx
c000fd65:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fd67:	e8 36 b6 00 00       	call   c001b3a2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fd6c:	83 c4 30             	add    esp,0x30
c000fd6f:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000fd76:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000fd7e:	0f 84 48 ff ff ff    	je     c000fccc <ACPI::open(int, int, void*)+0x1b8>
c000fd84:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000fd8f:	83 ec 0c             	sub    esp,0xc
c000fd92:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fd99:	e8 18 7d ff ff       	call   c0007ab6 <malloc>
c000fd9e:	83 c4 10             	add    esp,0x10
c000fda1:	89 c3                	mov    ebx,eax
c000fda3:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fda8:	83 ec 04             	sub    esp,0x4
c000fdab:	50                   	push   eax
c000fdac:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fdb3:	53                   	push   ebx
c000fdb4:	e8 1d bb ff ff       	call   c000b8d6 <File::File(char const*, Process*)>
c000fdb9:	83 c4 10             	add    esp,0x10
c000fdbc:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000fdc3:	83 ec 0c             	sub    esp,0xc
c000fdc6:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fdcd:	e8 e6 bd ff ff       	call   c000bbb8 <File::exists()>
c000fdd2:	83 c4 10             	add    esp,0x10
c000fdd5:	0f b6 c0             	movzx  eax,al
c000fdd8:	85 c0                	test   eax,eax
c000fdda:	74 28                	je     c000fe04 <ACPI::open(int, int, void*)+0x2f0>
c000fddc:	83 ec 08             	sub    esp,0x8
c000fddf:	6a 01                	push   0x1
c000fde1:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fde8:	e8 92 55 00 00       	call   c001537f <Thr::loadDLL(char const*, bool)>
c000fded:	83 c4 10             	add    esp,0x10
c000fdf0:	83 ec 08             	sub    esp,0x8
c000fdf3:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fdfa:	50                   	push   eax
c000fdfb:	e8 b0 57 00 00       	call   c00155b0 <Thr::executeDLL(unsigned long, void*)>
c000fe00:	83 c4 10             	add    esp,0x10
c000fe03:	90                   	nop
c000fe04:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000fe0c:	0f 84 ba fe ff ff    	je     c000fccc <ACPI::open(int, int, void*)+0x1b8>
c000fe12:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000fe19:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe1b:	83 c0 08             	add    eax,0x8
c000fe1e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe20:	83 ec 0c             	sub    esp,0xc
c000fe23:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fe2a:	ff d0                	call   eax
c000fe2c:	83 c4 10             	add    esp,0x10
c000fe2f:	e9 98 fe ff ff       	jmp    c000fccc <ACPI::open(int, int, void*)+0x1b8>
c000fe34:	83 ec 0c             	sub    esp,0xc
c000fe37:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fe3e:	50                   	push   eax
c000fe3f:	e8 e8 fd 00 00       	call   c001fc2c <LinkedList<Device>::~LinkedList()>
c000fe44:	83 c4 10             	add    esp,0x10
c000fe47:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fe4d:	83 ec 08             	sub    esp,0x8
c000fe50:	6a 01                	push   0x1
c000fe52:	68 3d 1d 02 c0       	push   0xc0021d3d
c000fe57:	e8 23 55 00 00       	call   c001537f <Thr::loadDLL(char const*, bool)>
c000fe5c:	83 c4 10             	add    esp,0x10
c000fe5f:	83 ec 08             	sub    esp,0x8
c000fe62:	53                   	push   ebx
c000fe63:	50                   	push   eax
c000fe64:	e8 47 57 00 00       	call   c00155b0 <Thr::executeDLL(unsigned long, void*)>
c000fe69:	83 c4 10             	add    esp,0x10
c000fe6c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fe71:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fe77:	83 e0 04             	and    eax,0x4
c000fe7a:	0f b6 c0             	movzx  eax,al
c000fe7d:	85 c0                	test   eax,eax
c000fe7f:	0f 84 1b 01 00 00    	je     c000ffa0 <ACPI::open(int, int, void*)+0x48c>
c000fe85:	83 ec 0c             	sub    esp,0xc
c000fe88:	68 5a 1d 02 c0       	push   0xc0021d5a
c000fe8d:	e8 15 0e 00 00       	call   c0010ca7 <KeSetBootMessage(char const*)>
c000fe92:	83 c4 10             	add    esp,0x10
c000fe95:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000fea0:	83 ec 0c             	sub    esp,0xc
c000fea3:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000feaa:	e8 07 7c ff ff       	call   c0007ab6 <malloc>
c000feaf:	83 c4 10             	add    esp,0x10
c000feb2:	89 c3                	mov    ebx,eax
c000feb4:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000feb9:	83 ec 04             	sub    esp,0x4
c000febc:	50                   	push   eax
c000febd:	68 77 1d 02 c0       	push   0xc0021d77
c000fec2:	53                   	push   ebx
c000fec3:	e8 0e ba ff ff       	call   c000b8d6 <File::File(char const*, Process*)>
c000fec8:	83 c4 10             	add    esp,0x10
c000fecb:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000fed2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000feda:	74 20                	je     c000fefc <ACPI::open(int, int, void*)+0x3e8>
c000fedc:	83 ec 0c             	sub    esp,0xc
c000fedf:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000fee6:	e8 cd bc ff ff       	call   c000bbb8 <File::exists()>
c000feeb:	83 c4 10             	add    esp,0x10
c000feee:	0f b6 c0             	movzx  eax,al
c000fef1:	85 c0                	test   eax,eax
c000fef3:	74 07                	je     c000fefc <ACPI::open(int, int, void*)+0x3e8>
c000fef5:	b0 01                	mov    al,0x1
c000fef7:	eb 07                	jmp    c000ff00 <ACPI::open(int, int, void*)+0x3ec>
c000fef9:	8d 76 00             	lea    esi,[esi+0x0]
c000fefc:	b0 00                	mov    al,0x0
c000fefe:	66 90                	xchg   ax,ax
c000ff00:	0f b6 c0             	movzx  eax,al
c000ff03:	85 c0                	test   eax,eax
c000ff05:	74 25                	je     c000ff2c <ACPI::open(int, int, void*)+0x418>
c000ff07:	83 ec 08             	sub    esp,0x8
c000ff0a:	6a 01                	push   0x1
c000ff0c:	68 77 1d 02 c0       	push   0xc0021d77
c000ff11:	e8 69 54 00 00       	call   c001537f <Thr::loadDLL(char const*, bool)>
c000ff16:	83 c4 10             	add    esp,0x10
c000ff19:	83 ec 08             	sub    esp,0x8
c000ff1c:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000ff23:	50                   	push   eax
c000ff24:	e8 87 56 00 00       	call   c00155b0 <Thr::executeDLL(unsigned long, void*)>
c000ff29:	83 c4 10             	add    esp,0x10
c000ff2c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ff34:	74 2a                	je     c000ff60 <ACPI::open(int, int, void*)+0x44c>
c000ff36:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ff3e:	74 20                	je     c000ff60 <ACPI::open(int, int, void*)+0x44c>
c000ff40:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ff47:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff49:	83 c0 08             	add    eax,0x8
c000ff4c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff4e:	83 ec 0c             	sub    esp,0xc
c000ff51:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ff58:	ff d0                	call   eax
c000ff5a:	83 c4 10             	add    esp,0x10
c000ff5d:	8d 76 00             	lea    esi,[esi+0x0]
c000ff60:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000ff65:	83 ec 08             	sub    esp,0x8
c000ff68:	68 94 1d 02 c0       	push   0xc0021d94
c000ff6d:	50                   	push   eax
c000ff6e:	e8 c1 f1 ff ff       	call   c000f134 <findDataTable(unsigned char*, char*)>
c000ff73:	83 c4 10             	add    esp,0x10
c000ff76:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000ff7d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000ff85:	74 19                	je     c000ffa0 <ACPI::open(int, int, void*)+0x48c>
c000ff87:	83 ec 08             	sub    esp,0x8
c000ff8a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ff91:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ff98:	e8 13 fb ff ff       	call   c000fab0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ff9d:	83 c4 10             	add    esp,0x10
c000ffa0:	b8 00 00 00 00       	mov    eax,0x0
c000ffa5:	81 c4 70 01 00 00    	add    esp,0x170
c000ffab:	5b                   	pop    ebx
c000ffac:	5e                   	pop    esi
c000ffad:	5f                   	pop    edi
c000ffae:	c3                   	ret    
c000ffaf:	90                   	nop

c000ffb0 <CPU::close(int, int, void*)>:
c000ffb0:	31 c0                	xor    eax,eax
c000ffb2:	c3                   	ret    
c000ffb3:	90                   	nop

c000ffb4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ffb4:	60                   	pusha  
c000ffb5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ffb9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ffc1:	9c                   	pushf  
c000ffc2:	fa                   	cli    
c000ffc3:	0f 09                	wbinvd 
c000ffc5:	0f 30                	wrmsr  
c000ffc7:	9d                   	popf   
c000ffc8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ffcc:	89 02                	mov    DWORD PTR [edx],eax
c000ffce:	61                   	popa   
c000ffcf:	c3                   	ret    

c000ffd0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000ffd0:	60                   	pusha  
c000ffd1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ffd5:	9c                   	pushf  
c000ffd6:	fa                   	cli    
c000ffd7:	0f 09                	wbinvd 
c000ffd9:	31 c0                	xor    eax,eax
c000ffdb:	31 d2                	xor    edx,edx
c000ffdd:	0f 32                	rdmsr  
c000ffdf:	9d                   	popf   
c000ffe0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ffe4:	89 02                	mov    DWORD PTR [edx],eax
c000ffe6:	61                   	popa   
c000ffe7:	c3                   	ret    

c000ffe8 <CPU::AMD_K6_writeback(int, int, int)>:
c000ffe8:	56                   	push   esi
c000ffe9:	53                   	push   ebx
c000ffea:	83 ec 10             	sub    esp,0x10
c000ffed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fff1:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000fff6:	75 5d                	jne    c0010055 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fff8:	83 f8 08             	cmp    eax,0x8
c000fffb:	75 09                	jne    c0010006 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000fffd:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0010002:	7e 13                	jle    c0010017 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010004:	eb 30                	jmp    c0010036 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010006:	83 f8 06             	cmp    eax,0x6
c0010009:	7c 4a                	jl     c0010055 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001000b:	83 f8 07             	cmp    eax,0x7
c001000e:	7e 07                	jle    c0010017 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010010:	83 f8 09             	cmp    eax,0x9
c0010013:	74 21                	je     c0010036 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010015:	eb 3e                	jmp    c0010055 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0010017:	89 e6                	mov    esi,esp
c0010019:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c001001f:	56                   	push   esi
c0010020:	c1 eb 15             	shr    ebx,0x15
c0010023:	68 82 00 00 c0       	push   0xc0000082
c0010028:	83 e3 7e             	and    ebx,0x7e
c001002b:	e8 a0 ff ff ff       	call   c000ffd0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010030:	56                   	push   esi
c0010031:	6a 00                	push   0x0
c0010033:	53                   	push   ebx
c0010034:	eb 12                	jmp    c0010048 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0010036:	89 e3                	mov    ebx,esp
c0010038:	53                   	push   ebx
c0010039:	68 82 00 00 c0       	push   0xc0000082
c001003e:	e8 8d ff ff ff       	call   c000ffd0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0010043:	53                   	push   ebx
c0010044:	6a 00                	push   0x0
c0010046:	6a 00                	push   0x0
c0010048:	68 82 00 00 c0       	push   0xc0000082
c001004d:	e8 62 ff ff ff       	call   c000ffb4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0010052:	83 c4 18             	add    esp,0x18
c0010055:	83 c4 10             	add    esp,0x10
c0010058:	5b                   	pop    ebx
c0010059:	5e                   	pop    esi
c001005a:	c3                   	ret    
c001005b:	90                   	nop

c001005c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001005c:	55                   	push   ebp
c001005d:	57                   	push   edi
c001005e:	56                   	push   esi
c001005f:	53                   	push   ebx
c0010060:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010064:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010068:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001006c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0010070:	39 05 58 33 02 c0    	cmp    DWORD PTR ds:0xc0023358,eax
c0010076:	75 23                	jne    c001009b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0010078:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c001007d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010081:	89 06                	mov    DWORD PTR [esi],eax
c0010083:	a1 88 8d 02 c0       	mov    eax,ds:0xc0028d88
c0010088:	89 07                	mov    DWORD PTR [edi],eax
c001008a:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c001008f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010092:	a1 80 8d 02 c0       	mov    eax,ds:0xc0028d80
c0010097:	89 02                	mov    DWORD PTR [edx],eax
c0010099:	eb 3f                	jmp    c00100da <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001009b:	31 c9                	xor    ecx,ecx
c001009d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100a1:	0f a2                	cpuid  
c00100a3:	89 06                	mov    DWORD PTR [esi],eax
c00100a5:	89 1f                	mov    DWORD PTR [edi],ebx
c00100a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100ab:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00100ae:	89 10                	mov    DWORD PTR [eax],edx
c00100b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100b4:	a3 58 33 02 c0       	mov    ds:0xc0023358,eax
c00100b9:	8b 06                	mov    eax,DWORD PTR [esi]
c00100bb:	a3 8c 8d 02 c0       	mov    ds:0xc0028d8c,eax
c00100c0:	8b 07                	mov    eax,DWORD PTR [edi]
c00100c2:	a3 88 8d 02 c0       	mov    ds:0xc0028d88,eax
c00100c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00100ca:	a3 84 8d 02 c0       	mov    ds:0xc0028d84,eax
c00100cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00100d5:	a3 80 8d 02 c0       	mov    ds:0xc0028d80,eax
c00100da:	5b                   	pop    ebx
c00100db:	5e                   	pop    esi
c00100dc:	5f                   	pop    edi
c00100dd:	5d                   	pop    ebp
c00100de:	c3                   	ret    
c00100df:	90                   	nop

c00100e0 <CPU::cpuidCheckEDX(unsigned int)>:
c00100e0:	83 ec 10             	sub    esp,0x10
c00100e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100e7:	50                   	push   eax
c00100e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100ec:	50                   	push   eax
c00100ed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100f1:	50                   	push   eax
c00100f2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100f6:	50                   	push   eax
c00100f7:	6a 01                	push   0x1
c00100f9:	e8 5e ff ff ff       	call   c001005c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010102:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0010106:	0f 95 c0             	setne  al
c0010109:	83 c4 24             	add    esp,0x24
c001010c:	c3                   	ret    
c001010d:	90                   	nop

c001010e <CPU::cpuidCheckECX(unsigned int)>:
c001010e:	83 ec 10             	sub    esp,0x10
c0010111:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010115:	50                   	push   eax
c0010116:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001011a:	50                   	push   eax
c001011b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001011f:	50                   	push   eax
c0010120:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010124:	50                   	push   eax
c0010125:	6a 01                	push   0x1
c0010127:	e8 30 ff ff ff       	call   c001005c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001012c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010130:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010134:	0f 95 c0             	setne  al
c0010137:	83 c4 24             	add    esp,0x24
c001013a:	c3                   	ret    
c001013b:	90                   	nop

c001013c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001013c:	83 ec 10             	sub    esp,0x10
c001013f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010143:	50                   	push   eax
c0010144:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010148:	50                   	push   eax
c0010149:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001014d:	50                   	push   eax
c001014e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010152:	50                   	push   eax
c0010153:	6a 07                	push   0x7
c0010155:	e8 02 ff ff ff       	call   c001005c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001015a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001015e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0010162:	0f 95 c0             	setne  al
c0010165:	83 c4 24             	add    esp,0x24
c0010168:	c3                   	ret    
c0010169:	90                   	nop

c001016a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001016a:	83 ec 10             	sub    esp,0x10
c001016d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010171:	50                   	push   eax
c0010172:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010176:	50                   	push   eax
c0010177:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001017b:	50                   	push   eax
c001017c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010180:	50                   	push   eax
c0010181:	6a 07                	push   0x7
c0010183:	e8 d4 fe ff ff       	call   c001005c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010188:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001018c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010190:	0f 95 c0             	setne  al
c0010193:	83 c4 24             	add    esp,0x24
c0010196:	c3                   	ret    
c0010197:	90                   	nop

c0010198 <CPU::CPU()>:
c0010198:	83 ec 0c             	sub    esp,0xc
c001019b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001019f:	83 ec 08             	sub    esp,0x8
c00101a2:	68 b9 1e 02 c0       	push   0xc0021eb9
c00101a7:	50                   	push   eax
c00101a8:	e8 39 c7 ff ff       	call   c000c8e6 <Device::Device(char const*)>
c00101ad:	83 c4 10             	add    esp,0x10
c00101b0:	ba 4c 1f 02 c0       	mov    edx,0xc0021f4c
c00101b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101b9:	89 10                	mov    DWORD PTR [eax],edx
c00101bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101bf:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00101c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101cd:	05 78 01 00 00       	add    eax,0x178
c00101d2:	83 ec 0c             	sub    esp,0xc
c00101d5:	50                   	push   eax
c00101d6:	e8 81 71 ff ff       	call   c000735c <GDT::GDT()>
c00101db:	83 c4 10             	add    esp,0x10
c00101de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101e2:	05 7c 09 00 00       	add    eax,0x97c
c00101e7:	83 ec 0c             	sub    esp,0xc
c00101ea:	50                   	push   eax
c00101eb:	e8 bc 73 ff ff       	call   c00075ac <IDT::IDT()>
c00101f0:	83 c4 10             	add    esp,0x10
c00101f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101f7:	05 7c 11 00 00       	add    eax,0x117c
c00101fc:	83 ec 0c             	sub    esp,0xc
c00101ff:	50                   	push   eax
c0010200:	e8 3f 8d ff ff       	call   c0008f44 <TSS::TSS()>
c0010205:	83 c4 10             	add    esp,0x10
c0010208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001020c:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010217:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010221:	90                   	nop
c0010222:	83 c4 0c             	add    esp,0xc
c0010225:	c3                   	ret    

c0010226 <CPU::displayFeatures()>:
c0010226:	c3                   	ret    
c0010227:	90                   	nop

c0010228 <CPU::detectFeatures()>:
c0010228:	55                   	push   ebp
c0010229:	57                   	push   edi
c001022a:	56                   	push   esi
c001022b:	53                   	push   ebx
c001022c:	83 ec 30             	sub    esp,0x30
c001022f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010233:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001023d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010244:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001024a:	6a 0d                	push   0xd
c001024c:	6a 00                	push   0x0
c001024e:	55                   	push   ebp
c001024f:	e8 9c 02 ff ff       	call   c00004f0 <memset>
c0010254:	83 c4 10             	add    esp,0x10
c0010257:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001025c:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c0010263:	0f 84 db 05 00 00    	je     c0010844 <CPU::detectFeatures()+0x61c>
c0010269:	83 ec 0c             	sub    esp,0xc
c001026c:	89 ef                	mov    edi,ebp
c001026e:	6a 10                	push   0x10
c0010270:	e8 6b fe ff ff       	call   c00100e0 <CPU::cpuidCheckEDX(unsigned int)>
c0010275:	83 e0 01             	and    eax,0x1
c0010278:	8d 14 00             	lea    edx,[eax+eax*1]
c001027b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010281:	83 e0 fd             	and    eax,0xfffffffd
c0010284:	09 d0                	or     eax,edx
c0010286:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001028c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0010293:	e8 48 fe ff ff       	call   c00100e0 <CPU::cpuidCheckEDX(unsigned int)>
c0010298:	83 e0 01             	and    eax,0x1
c001029b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00102a2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00102a8:	83 e0 fb             	and    eax,0xfffffffb
c00102ab:	09 d0                	or     eax,edx
c00102ad:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00102b3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00102ba:	e8 21 fe ff ff       	call   c00100e0 <CPU::cpuidCheckEDX(unsigned int)>
c00102bf:	83 e0 01             	and    eax,0x1
c00102c2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00102c9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00102cf:	83 e0 f7             	and    eax,0xfffffff7
c00102d2:	09 d0                	or     eax,edx
c00102d4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00102da:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00102e1:	e8 fa fd ff ff       	call   c00100e0 <CPU::cpuidCheckEDX(unsigned int)>
c00102e6:	83 e0 01             	and    eax,0x1
c00102e9:	c1 e0 04             	shl    eax,0x4
c00102ec:	89 c2                	mov    edx,eax
c00102ee:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00102f4:	83 e0 ef             	and    eax,0xffffffef
c00102f7:	09 d0                	or     eax,edx
c00102f9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00102ff:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010306:	e8 d5 fd ff ff       	call   c00100e0 <CPU::cpuidCheckEDX(unsigned int)>
c001030b:	83 e0 01             	and    eax,0x1
c001030e:	c1 e0 05             	shl    eax,0x5
c0010311:	89 c2                	mov    edx,eax
c0010313:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010319:	83 e0 df             	and    eax,0xffffffdf
c001031c:	09 d0                	or     eax,edx
c001031e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010324:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001032b:	e8 b0 fd ff ff       	call   c00100e0 <CPU::cpuidCheckEDX(unsigned int)>
c0010330:	83 e0 01             	and    eax,0x1
c0010333:	8d 14 00             	lea    edx,[eax+eax*1]
c0010336:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001033c:	83 e0 fd             	and    eax,0xfffffffd
c001033f:	09 d0                	or     eax,edx
c0010341:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010347:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001034e:	e8 8d fd ff ff       	call   c00100e0 <CPU::cpuidCheckEDX(unsigned int)>
c0010353:	83 e0 01             	and    eax,0x1
c0010356:	c1 e0 06             	shl    eax,0x6
c0010359:	89 c2                	mov    edx,eax
c001035b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010361:	83 e0 bf             	and    eax,0xffffffbf
c0010364:	09 d0                	or     eax,edx
c0010366:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001036c:	58                   	pop    eax
c001036d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010371:	50                   	push   eax
c0010372:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010376:	50                   	push   eax
c0010377:	8d 74 24 28          	lea    esi,[esp+0x28]
c001037b:	56                   	push   esi
c001037c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010380:	50                   	push   eax
c0010381:	6a 00                	push   0x0
c0010383:	e8 d4 fc ff ff       	call   c001005c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010388:	b8 04 00 00 00       	mov    eax,0x4
c001038d:	89 c1                	mov    ecx,eax
c001038f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010391:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0010397:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001039b:	89 c1                	mov    ecx,eax
c001039d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001039f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00103a5:	8d 74 24 38          	lea    esi,[esp+0x38]
c00103a9:	89 c1                	mov    ecx,eax
c00103ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103ad:	83 c4 18             	add    esp,0x18
c00103b0:	68 c8 1d 02 c0       	push   0xc0021dc8
c00103b5:	55                   	push   ebp
c00103b6:	e8 95 03 ff ff       	call   c0000750 <strcmp>
c00103bb:	83 c4 10             	add    esp,0x10
c00103be:	85 c0                	test   eax,eax
c00103c0:	75 0f                	jne    c00103d1 <CPU::detectFeatures()+0x1a9>
c00103c2:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00103cc:	e9 22 02 00 00       	jmp    c00105f3 <CPU::detectFeatures()+0x3cb>
c00103d1:	50                   	push   eax
c00103d2:	50                   	push   eax
c00103d3:	68 d5 1d 02 c0       	push   0xc0021dd5
c00103d8:	55                   	push   ebp
c00103d9:	e8 72 03 ff ff       	call   c0000750 <strcmp>
c00103de:	83 c4 10             	add    esp,0x10
c00103e1:	85 c0                	test   eax,eax
c00103e3:	74 dd                	je     c00103c2 <CPU::detectFeatures()+0x19a>
c00103e5:	50                   	push   eax
c00103e6:	50                   	push   eax
c00103e7:	68 e2 1d 02 c0       	push   0xc0021de2
c00103ec:	55                   	push   ebp
c00103ed:	e8 5e 03 ff ff       	call   c0000750 <strcmp>
c00103f2:	83 c4 10             	add    esp,0x10
c00103f5:	85 c0                	test   eax,eax
c00103f7:	74 2a                	je     c0010423 <CPU::detectFeatures()+0x1fb>
c00103f9:	50                   	push   eax
c00103fa:	50                   	push   eax
c00103fb:	68 ef 1d 02 c0       	push   0xc0021def
c0010400:	55                   	push   ebp
c0010401:	e8 4a 03 ff ff       	call   c0000750 <strcmp>
c0010406:	83 c4 10             	add    esp,0x10
c0010409:	85 c0                	test   eax,eax
c001040b:	74 16                	je     c0010423 <CPU::detectFeatures()+0x1fb>
c001040d:	50                   	push   eax
c001040e:	50                   	push   eax
c001040f:	68 fc 1d 02 c0       	push   0xc0021dfc
c0010414:	55                   	push   ebp
c0010415:	e8 36 03 ff ff       	call   c0000750 <strcmp>
c001041a:	83 c4 10             	add    esp,0x10
c001041d:	85 c0                	test   eax,eax
c001041f:	74 48                	je     c0010469 <CPU::detectFeatures()+0x241>
c0010421:	eb 0f                	jmp    c0010432 <CPU::detectFeatures()+0x20a>
c0010423:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001042d:	e9 c1 01 00 00       	jmp    c00105f3 <CPU::detectFeatures()+0x3cb>
c0010432:	50                   	push   eax
c0010433:	50                   	push   eax
c0010434:	68 09 1e 02 c0       	push   0xc0021e09
c0010439:	55                   	push   ebp
c001043a:	e8 11 03 ff ff       	call   c0000750 <strcmp>
c001043f:	83 c4 10             	add    esp,0x10
c0010442:	85 c0                	test   eax,eax
c0010444:	74 23                	je     c0010469 <CPU::detectFeatures()+0x241>
c0010446:	57                   	push   edi
c0010447:	57                   	push   edi
c0010448:	68 16 1e 02 c0       	push   0xc0021e16
c001044d:	55                   	push   ebp
c001044e:	e8 fd 02 ff ff       	call   c0000750 <strcmp>
c0010453:	83 c4 10             	add    esp,0x10
c0010456:	85 c0                	test   eax,eax
c0010458:	75 1e                	jne    c0010478 <CPU::detectFeatures()+0x250>
c001045a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010464:	e9 8a 01 00 00       	jmp    c00105f3 <CPU::detectFeatures()+0x3cb>
c0010469:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0010473:	e9 7b 01 00 00       	jmp    c00105f3 <CPU::detectFeatures()+0x3cb>
c0010478:	56                   	push   esi
c0010479:	56                   	push   esi
c001047a:	68 23 1e 02 c0       	push   0xc0021e23
c001047f:	55                   	push   ebp
c0010480:	e8 cb 02 ff ff       	call   c0000750 <strcmp>
c0010485:	83 c4 10             	add    esp,0x10
c0010488:	85 c0                	test   eax,eax
c001048a:	75 0f                	jne    c001049b <CPU::detectFeatures()+0x273>
c001048c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0010496:	e9 58 01 00 00       	jmp    c00105f3 <CPU::detectFeatures()+0x3cb>
c001049b:	51                   	push   ecx
c001049c:	51                   	push   ecx
c001049d:	68 e2 1d 02 c0       	push   0xc0021de2
c00104a2:	55                   	push   ebp
c00104a3:	e8 a8 02 ff ff       	call   c0000750 <strcmp>
c00104a8:	83 c4 10             	add    esp,0x10
c00104ab:	85 c0                	test   eax,eax
c00104ad:	75 0f                	jne    c00104be <CPU::detectFeatures()+0x296>
c00104af:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00104b9:	e9 35 01 00 00       	jmp    c00105f3 <CPU::detectFeatures()+0x3cb>
c00104be:	52                   	push   edx
c00104bf:	52                   	push   edx
c00104c0:	68 30 1e 02 c0       	push   0xc0021e30
c00104c5:	55                   	push   ebp
c00104c6:	e8 85 02 ff ff       	call   c0000750 <strcmp>
c00104cb:	83 c4 10             	add    esp,0x10
c00104ce:	85 c0                	test   eax,eax
c00104d0:	75 0f                	jne    c00104e1 <CPU::detectFeatures()+0x2b9>
c00104d2:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00104dc:	e9 12 01 00 00       	jmp    c00105f3 <CPU::detectFeatures()+0x3cb>
c00104e1:	50                   	push   eax
c00104e2:	50                   	push   eax
c00104e3:	68 3d 1e 02 c0       	push   0xc0021e3d
c00104e8:	55                   	push   ebp
c00104e9:	e8 62 02 ff ff       	call   c0000750 <strcmp>
c00104ee:	83 c4 10             	add    esp,0x10
c00104f1:	85 c0                	test   eax,eax
c00104f3:	75 0f                	jne    c0010504 <CPU::detectFeatures()+0x2dc>
c00104f5:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00104ff:	e9 ef 00 00 00       	jmp    c00105f3 <CPU::detectFeatures()+0x3cb>
c0010504:	50                   	push   eax
c0010505:	50                   	push   eax
c0010506:	68 4a 1e 02 c0       	push   0xc0021e4a
c001050b:	55                   	push   ebp
c001050c:	e8 3f 02 ff ff       	call   c0000750 <strcmp>
c0010511:	83 c4 10             	add    esp,0x10
c0010514:	85 c0                	test   eax,eax
c0010516:	75 0f                	jne    c0010527 <CPU::detectFeatures()+0x2ff>
c0010518:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010522:	e9 cc 00 00 00       	jmp    c00105f3 <CPU::detectFeatures()+0x3cb>
c0010527:	50                   	push   eax
c0010528:	50                   	push   eax
c0010529:	68 57 1e 02 c0       	push   0xc0021e57
c001052e:	55                   	push   ebp
c001052f:	e8 1c 02 ff ff       	call   c0000750 <strcmp>
c0010534:	83 c4 10             	add    esp,0x10
c0010537:	85 c0                	test   eax,eax
c0010539:	75 0f                	jne    c001054a <CPU::detectFeatures()+0x322>
c001053b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010545:	e9 a9 00 00 00       	jmp    c00105f3 <CPU::detectFeatures()+0x3cb>
c001054a:	50                   	push   eax
c001054b:	50                   	push   eax
c001054c:	68 64 1e 02 c0       	push   0xc0021e64
c0010551:	55                   	push   ebp
c0010552:	e8 f9 01 ff ff       	call   c0000750 <strcmp>
c0010557:	83 c4 10             	add    esp,0x10
c001055a:	85 c0                	test   eax,eax
c001055c:	75 0f                	jne    c001056d <CPU::detectFeatures()+0x345>
c001055e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0010568:	e9 86 00 00 00       	jmp    c00105f3 <CPU::detectFeatures()+0x3cb>
c001056d:	50                   	push   eax
c001056e:	50                   	push   eax
c001056f:	68 71 1e 02 c0       	push   0xc0021e71
c0010574:	55                   	push   ebp
c0010575:	e8 d6 01 ff ff       	call   c0000750 <strcmp>
c001057a:	83 c4 10             	add    esp,0x10
c001057d:	85 c0                	test   eax,eax
c001057f:	75 0c                	jne    c001058d <CPU::detectFeatures()+0x365>
c0010581:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001058b:	eb 66                	jmp    c00105f3 <CPU::detectFeatures()+0x3cb>
c001058d:	50                   	push   eax
c001058e:	50                   	push   eax
c001058f:	68 7e 1e 02 c0       	push   0xc0021e7e
c0010594:	55                   	push   ebp
c0010595:	e8 b6 01 ff ff       	call   c0000750 <strcmp>
c001059a:	83 c4 10             	add    esp,0x10
c001059d:	85 c0                	test   eax,eax
c001059f:	75 0c                	jne    c00105ad <CPU::detectFeatures()+0x385>
c00105a1:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00105ab:	eb 46                	jmp    c00105f3 <CPU::detectFeatures()+0x3cb>
c00105ad:	57                   	push   edi
c00105ae:	57                   	push   edi
c00105af:	68 8b 1e 02 c0       	push   0xc0021e8b
c00105b4:	55                   	push   ebp
c00105b5:	e8 96 01 ff ff       	call   c0000750 <strcmp>
c00105ba:	83 c4 10             	add    esp,0x10
c00105bd:	85 c0                	test   eax,eax
c00105bf:	74 e0                	je     c00105a1 <CPU::detectFeatures()+0x379>
c00105c1:	56                   	push   esi
c00105c2:	56                   	push   esi
c00105c3:	68 98 1e 02 c0       	push   0xc0021e98
c00105c8:	55                   	push   ebp
c00105c9:	e8 82 01 ff ff       	call   c0000750 <strcmp>
c00105ce:	83 c4 10             	add    esp,0x10
c00105d1:	85 c0                	test   eax,eax
c00105d3:	74 cc                	je     c00105a1 <CPU::detectFeatures()+0x379>
c00105d5:	51                   	push   ecx
c00105d6:	51                   	push   ecx
c00105d7:	68 a5 1e 02 c0       	push   0xc0021ea5
c00105dc:	55                   	push   ebp
c00105dd:	e8 6e 01 ff ff       	call   c0000750 <strcmp>
c00105e2:	83 c4 10             	add    esp,0x10
c00105e5:	85 c0                	test   eax,eax
c00105e7:	74 b8                	je     c00105a1 <CPU::detectFeatures()+0x379>
c00105e9:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00105f3:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00105f8:	0f 86 be 00 00 00    	jbe    c00106bc <CPU::detectFeatures()+0x494>
c00105fe:	83 ec 0c             	sub    esp,0xc
c0010601:	68 80 00 00 00       	push   0x80
c0010606:	e8 31 fb ff ff       	call   c001013c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001060b:	83 e0 01             	and    eax,0x1
c001060e:	c1 e0 06             	shl    eax,0x6
c0010611:	89 c2                	mov    edx,eax
c0010613:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010619:	83 e0 bf             	and    eax,0xffffffbf
c001061c:	09 d0                	or     eax,edx
c001061e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010624:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001062b:	e8 0c fb ff ff       	call   c001013c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010630:	83 e0 01             	and    eax,0x1
c0010633:	c1 e0 04             	shl    eax,0x4
c0010636:	89 c2                	mov    edx,eax
c0010638:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001063e:	83 e0 ef             	and    eax,0xffffffef
c0010641:	09 d0                	or     eax,edx
c0010643:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010649:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010650:	e8 e7 fa ff ff       	call   c001013c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010655:	89 c2                	mov    edx,eax
c0010657:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001065d:	c1 e2 07             	shl    edx,0x7
c0010660:	83 e0 7f             	and    eax,0x7f
c0010663:	09 d0                	or     eax,edx
c0010665:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001066b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0010672:	e8 f3 fa ff ff       	call   c001016a <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010677:	83 e0 01             	and    eax,0x1
c001067a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010681:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010687:	83 e0 f7             	and    eax,0xfffffff7
c001068a:	09 d0                	or     eax,edx
c001068c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010692:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0010699:	e8 cc fa ff ff       	call   c001016a <CPU::cpuidCheckExtendedECX(unsigned int)>
c001069e:	83 c4 10             	add    esp,0x10
c00106a1:	83 e0 01             	and    eax,0x1
c00106a4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00106ab:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00106b1:	83 e0 fb             	and    eax,0xfffffffb
c00106b4:	09 d0                	or     eax,edx
c00106b6:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00106bc:	83 ec 0c             	sub    esp,0xc
c00106bf:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106c3:	50                   	push   eax
c00106c4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106c8:	50                   	push   eax
c00106c9:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00106cd:	57                   	push   edi
c00106ce:	8d 74 24 28          	lea    esi,[esp+0x28]
c00106d2:	56                   	push   esi
c00106d3:	6a 01                	push   0x1
c00106d5:	e8 82 f9 ff ff       	call   c001005c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00106da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00106de:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00106e4:	89 c1                	mov    ecx,eax
c00106e6:	83 e2 f0             	and    edx,0xfffffff0
c00106e9:	83 e1 0f             	and    ecx,0xf
c00106ec:	09 ca                	or     edx,ecx
c00106ee:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00106f4:	89 c2                	mov    edx,eax
c00106f6:	c1 ea 04             	shr    edx,0x4
c00106f9:	83 e2 0f             	and    edx,0xf
c00106fc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010700:	89 d1                	mov    ecx,edx
c0010702:	83 c4 20             	add    esp,0x20
c0010705:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001070b:	c1 e1 06             	shl    ecx,0x6
c001070e:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010714:	09 ca                	or     edx,ecx
c0010716:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001071d:	89 c2                	mov    edx,eax
c001071f:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010725:	c1 ea 08             	shr    edx,0x8
c0010728:	83 e1 3f             	and    ecx,0x3f
c001072b:	83 e2 0f             	and    edx,0xf
c001072e:	89 d5                	mov    ebp,edx
c0010730:	83 e5 03             	and    ebp,0x3
c0010733:	c1 e5 06             	shl    ebp,0x6
c0010736:	09 e9                	or     ecx,ebp
c0010738:	89 d5                	mov    ebp,edx
c001073a:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010740:	c1 ed 02             	shr    ebp,0x2
c0010743:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010749:	83 e1 c0             	and    ecx,0xffffffc0
c001074c:	09 e9                	or     ecx,ebp
c001074e:	89 c5                	mov    ebp,eax
c0010750:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010756:	c1 ed 08             	shr    ebp,0x8
c0010759:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001075f:	83 e5 30             	and    ebp,0x30
c0010762:	83 e1 cf             	and    ecx,0xffffffcf
c0010765:	09 e9                	or     ecx,ebp
c0010767:	83 fa 06             	cmp    edx,0x6
c001076a:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010770:	74 05                	je     c0010777 <CPU::detectFeatures()+0x54f>
c0010772:	83 fa 0f             	cmp    edx,0xf
c0010775:	75 64                	jne    c00107db <CPU::detectFeatures()+0x5b3>
c0010777:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001077d:	89 c1                	mov    ecx,eax
c001077f:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010785:	c1 e9 10             	shr    ecx,0x10
c0010788:	c1 e1 04             	shl    ecx,0x4
c001078b:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001078f:	0f b6 c9             	movzx  ecx,cl
c0010792:	c1 e1 06             	shl    ecx,0x6
c0010795:	09 e9                	or     ecx,ebp
c0010797:	83 fa 0f             	cmp    edx,0xf
c001079a:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c00107a1:	75 38                	jne    c00107db <CPU::detectFeatures()+0x5b3>
c00107a3:	c1 e8 14             	shr    eax,0x14
c00107a6:	83 c0 0f             	add    eax,0xf
c00107a9:	0f b6 c0             	movzx  eax,al
c00107ac:	89 c2                	mov    edx,eax
c00107ae:	c1 e8 02             	shr    eax,0x2
c00107b1:	83 e2 03             	and    edx,0x3
c00107b4:	89 d1                	mov    ecx,edx
c00107b6:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00107bc:	c1 e1 06             	shl    ecx,0x6
c00107bf:	83 e2 3f             	and    edx,0x3f
c00107c2:	09 ca                	or     edx,ecx
c00107c4:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00107ca:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00107d0:	83 e2 c0             	and    edx,0xffffffc0
c00107d3:	09 d0                	or     eax,edx
c00107d5:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00107db:	83 ec 0c             	sub    esp,0xc
c00107de:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00107e4:	83 c8 07             	or     eax,0x7
c00107e7:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00107ed:	8d 44 24 28          	lea    eax,[esp+0x28]
c00107f1:	50                   	push   eax
c00107f2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00107f6:	55                   	push   ebp
c00107f7:	57                   	push   edi
c00107f8:	56                   	push   esi
c00107f9:	68 00 00 00 80       	push   0x80000000
c00107fe:	e8 59 f8 ff ff       	call   c001005c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010803:	83 c4 20             	add    esp,0x20
c0010806:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001080e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010812:	76 1e                	jbe    c0010832 <CPU::detectFeatures()+0x60a>
c0010814:	83 ec 0c             	sub    esp,0xc
c0010817:	50                   	push   eax
c0010818:	55                   	push   ebp
c0010819:	57                   	push   edi
c001081a:	56                   	push   esi
c001081b:	68 01 00 00 80       	push   0x80000001
c0010820:	e8 37 f8 ff ff       	call   c001005c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010825:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001082f:	83 c4 20             	add    esp,0x20
c0010832:	52                   	push   edx
c0010833:	52                   	push   edx
c0010834:	68 b1 1e 02 c0       	push   0xc0021eb1
c0010839:	53                   	push   ebx
c001083a:	e8 99 c0 ff ff       	call   c000c8d8 <Device::setName(char const*)>
c001083f:	83 c4 10             	add    esp,0x10
c0010842:	eb 69                	jmp    c00108ad <CPU::detectFeatures()+0x685>
c0010844:	50                   	push   eax
c0010845:	50                   	push   eax
c0010846:	68 16 1e 02 c0       	push   0xc0021e16
c001084b:	55                   	push   ebp
c001084c:	e8 ef fd fe ff       	call   c0000640 <strcpy>
c0010851:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001085b:	e8 63 f9 fe ff       	call   c00001c3 <is486>
c0010860:	83 c4 10             	add    esp,0x10
c0010863:	85 c0                	test   eax,eax
c0010865:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001086b:	74 1f                	je     c001088c <CPU::detectFeatures()+0x664>
c001086d:	83 c8 07             	or     eax,0x7
c0010870:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010876:	0f 20 c0             	mov    eax,cr0
c0010879:	83 e0 14             	and    eax,0x14
c001087c:	83 f8 04             	cmp    eax,0x4
c001087f:	75 10                	jne    c0010891 <CPU::detectFeatures()+0x669>
c0010881:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010887:	83 e0 fd             	and    eax,0xfffffffd
c001088a:	eb 1b                	jmp    c00108a7 <CPU::detectFeatures()+0x67f>
c001088c:	83 e0 f8             	and    eax,0xfffffff8
c001088f:	eb df                	jmp    c0010870 <CPU::detectFeatures()+0x648>
c0010891:	e8 08 f9 fe ff       	call   c000019e <hasLegacyFPU>
c0010896:	83 e0 01             	and    eax,0x1
c0010899:	8d 14 00             	lea    edx,[eax+eax*1]
c001089c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00108a2:	83 e0 fd             	and    eax,0xfffffffd
c00108a5:	09 d0                	or     eax,edx
c00108a7:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00108ad:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c00108b4:	74 17                	je     c00108cd <CPU::detectFeatures()+0x6a5>
c00108b6:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c00108bc:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c00108c2:	83 c8 10             	or     eax,0x10
c00108c5:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c00108cb:	eb 20                	jmp    c00108ed <CPU::detectFeatures()+0x6c5>
c00108cd:	e8 cc f8 fe ff       	call   c000019e <hasLegacyFPU>
c00108d2:	83 e0 01             	and    eax,0x1
c00108d5:	8d 14 00             	lea    edx,[eax+eax*1]
c00108d8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00108de:	83 e0 fd             	and    eax,0xfffffffd
c00108e1:	09 d0                	or     eax,edx
c00108e3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00108e9:	a8 02                	test   al,0x2
c00108eb:	75 c9                	jne    c00108b6 <CPU::detectFeatures()+0x68e>
c00108ed:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c00108f4:	83 c4 2c             	add    esp,0x2c
c00108f7:	5b                   	pop    ebx
c00108f8:	5e                   	pop    esi
c00108f9:	5f                   	pop    edi
c00108fa:	5d                   	pop    ebp
c00108fb:	c3                   	ret    

c00108fc <CPU::setupSMEP()>:
c00108fc:	0f 20 e0             	mov    eax,cr4
c00108ff:	0d 00 00 10 00       	or     eax,0x100000
c0010904:	0f 22 e0             	mov    cr4,eax
c0010907:	c3                   	ret    

c0010908 <CPU::setupUMIP()>:
c0010908:	0f 20 e0             	mov    eax,cr4
c001090b:	80 cc 08             	or     ah,0x8
c001090e:	0f 22 e0             	mov    cr4,eax
c0010911:	c3                   	ret    

c0010912 <CPU::setupTSC()>:
c0010912:	0f 20 e0             	mov    eax,cr4
c0010915:	83 c8 04             	or     eax,0x4
c0010918:	0f 22 e0             	mov    cr4,eax
c001091b:	c3                   	ret    

c001091c <CPU::setupLargePages()>:
c001091c:	0f 20 e0             	mov    eax,cr4
c001091f:	83 c8 10             	or     eax,0x10
c0010922:	0f 22 e0             	mov    cr4,eax
c0010925:	c3                   	ret    

c0010926 <CPU::setupPAT()>:
c0010926:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001092b:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010932:	74 2c                	je     c0010960 <CPU::setupPAT()+0x3a>
c0010934:	53                   	push   ebx
c0010935:	83 ec 10             	sub    esp,0x10
c0010938:	68 77 02 00 00       	push   0x277
c001093d:	50                   	push   eax
c001093e:	e8 7d 67 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0010943:	83 e2 f8             	and    edx,0xfffffff8
c0010946:	83 ca 01             	or     edx,0x1
c0010949:	52                   	push   edx
c001094a:	50                   	push   eax
c001094b:	68 77 02 00 00       	push   0x277
c0010950:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010956:	e8 91 67 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c001095b:	83 c4 28             	add    esp,0x28
c001095e:	5b                   	pop    ebx
c001095f:	c3                   	ret    
c0010960:	c3                   	ret    
c0010961:	90                   	nop

c0010962 <CPU::setupMTRR()>:
c0010962:	c3                   	ret    
c0010963:	90                   	nop

c0010964 <CPU::setupGlobalPages()>:
c0010964:	0f 20 e0             	mov    eax,cr4
c0010967:	0c 80                	or     al,0x80
c0010969:	0f 22 e0             	mov    cr4,eax
c001096c:	c3                   	ret    
c001096d:	90                   	nop

c001096e <CPU::allowUsermodeDataAccess()>:
c001096e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010972:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010979:	74 03                	je     c001097e <CPU::allowUsermodeDataAccess()+0x10>
c001097b:	0f 01 cb             	stac   
c001097e:	c3                   	ret    
c001097f:	90                   	nop

c0010980 <CPU::prohibitUsermodeDataAccess()>:
c0010980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010984:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001098b:	74 03                	je     c0010990 <CPU::prohibitUsermodeDataAccess()+0x10>
c001098d:	0f 01 ca             	clac   
c0010990:	c3                   	ret    
c0010991:	90                   	nop

c0010992 <CPU::setupSMAP()>:
c0010992:	0f 20 e0             	mov    eax,cr4
c0010995:	0d 00 00 20 00       	or     eax,0x200000
c001099a:	0f 22 e0             	mov    cr4,eax
c001099d:	eb e1                	jmp    c0010980 <CPU::prohibitUsermodeDataAccess()>
c001099f:	90                   	nop

c00109a0 <CPU::setupFeatures()>:
c00109a0:	53                   	push   ebx
c00109a1:	83 ec 08             	sub    esp,0x8
c00109a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109a8:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c00109af:	74 18                	je     c00109c9 <CPU::setupFeatures()+0x29>
c00109b1:	83 ec 0c             	sub    esp,0xc
c00109b4:	68 bd 1e 02 c0       	push   0xc0021ebd
c00109b9:	e8 87 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00109be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109c1:	e8 42 ff ff ff       	call   c0010908 <CPU::setupUMIP()>
c00109c6:	83 c4 10             	add    esp,0x10
c00109c9:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c00109d0:	74 18                	je     c00109ea <CPU::setupFeatures()+0x4a>
c00109d2:	83 ec 0c             	sub    esp,0xc
c00109d5:	68 c7 1e 02 c0       	push   0xc0021ec7
c00109da:	e8 66 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00109df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109e2:	e8 2b ff ff ff       	call   c0010912 <CPU::setupTSC()>
c00109e7:	83 c4 10             	add    esp,0x10
c00109ea:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c00109f1:	74 18                	je     c0010a0b <CPU::setupFeatures()+0x6b>
c00109f3:	83 ec 0c             	sub    esp,0xc
c00109f6:	68 d0 1e 02 c0       	push   0xc0021ed0
c00109fb:	e8 45 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010a00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a03:	e8 14 ff ff ff       	call   c001091c <CPU::setupLargePages()>
c0010a08:	83 c4 10             	add    esp,0x10
c0010a0b:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010a12:	74 18                	je     c0010a2c <CPU::setupFeatures()+0x8c>
c0010a14:	83 ec 0c             	sub    esp,0xc
c0010a17:	68 d9 1e 02 c0       	push   0xc0021ed9
c0010a1c:	e8 24 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010a21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a24:	e8 3b ff ff ff       	call   c0010964 <CPU::setupGlobalPages()>
c0010a29:	83 c4 10             	add    esp,0x10
c0010a2c:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010a33:	74 18                	je     c0010a4d <CPU::setupFeatures()+0xad>
c0010a35:	83 ec 0c             	sub    esp,0xc
c0010a38:	68 eb 1e 02 c0       	push   0xc0021eeb
c0010a3d:	e8 03 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010a42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a45:	e8 dc fe ff ff       	call   c0010926 <CPU::setupPAT()>
c0010a4a:	83 c4 10             	add    esp,0x10
c0010a4d:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010a54:	74 11                	je     c0010a67 <CPU::setupFeatures()+0xc7>
c0010a56:	c7 44 24 10 f4 1e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021ef4
c0010a5e:	83 c4 08             	add    esp,0x8
c0010a61:	5b                   	pop    ebx
c0010a62:	e9 de 9e ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c0010a67:	83 c4 08             	add    esp,0x8
c0010a6a:	5b                   	pop    ebx
c0010a6b:	c3                   	ret    

c0010a6c <CPU::open(int, int, void*)>:
c0010a6c:	55                   	push   ebp
c0010a6d:	57                   	push   edi
c0010a6e:	56                   	push   esi
c0010a6f:	53                   	push   ebx
c0010a70:	83 ec 18             	sub    esp,0x18
c0010a73:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010a77:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010a7b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010a7f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010a85:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010a8b:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010a91:	50                   	push   eax
c0010a92:	e8 27 69 ff ff       	call   c00073be <GDT::setup()>
c0010a97:	83 c4 0c             	add    esp,0xc
c0010a9a:	6a 00                	push   0x0
c0010a9c:	68 ef be ad de       	push   0xdeadbeef
c0010aa1:	55                   	push   ebp
c0010aa2:	e8 e1 84 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c0010aa7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010aaa:	e8 b9 84 ff ff       	call   c0008f68 <TSS::flush()>
c0010aaf:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010ab5:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ab8:	e8 65 6b ff ff       	call   c0007622 <IDT::setup()>
c0010abd:	b8 00 04 00 00       	mov    eax,0x400
c0010ac2:	0f 23 f8             	mov    db7,eax
c0010ac5:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010acf:	e8 eb 72 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0010ad4:	83 c4 10             	add    esp,0x10
c0010ad7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010add:	85 f6                	test   esi,esi
c0010adf:	89 38                	mov    DWORD PTR [eax],edi
c0010ae1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010ae7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010aea:	74 10                	je     c0010afc <CPU::open(int, int, void*)+0x90>
c0010aec:	50                   	push   eax
c0010aed:	50                   	push   eax
c0010aee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010af4:	56                   	push   esi
c0010af5:	e8 b4 8d ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c0010afa:	eb 0d                	jmp    c0010b09 <CPU::open(int, int, void*)+0x9d>
c0010afc:	83 ec 0c             	sub    esp,0xc
c0010aff:	68 fe 1e 02 c0       	push   0xc0021efe
c0010b04:	e8 74 08 00 00       	call   c001137d <KePanic(char const*)>
c0010b09:	83 c4 10             	add    esp,0x10
c0010b0c:	83 ec 0c             	sub    esp,0xc
c0010b0f:	68 0c 1f 02 c0       	push   0xc0021f0c
c0010b14:	e8 8e 01 00 00       	call   c0010ca7 <KeSetBootMessage(char const*)>
c0010b19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b1c:	e8 07 f7 ff ff       	call   c0010228 <CPU::detectFeatures()>
c0010b21:	c7 04 24 2f 1f 02 c0 	mov    DWORD PTR [esp],0xc0021f2f
c0010b28:	e8 7a 01 00 00       	call   c0010ca7 <KeSetBootMessage(char const*)>
c0010b2d:	e8 83 73 00 00       	call   c0017eb5 <HalInitialise()>
c0010b32:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010b37:	83 e0 10             	and    eax,0x10
c0010b3a:	83 f8 01             	cmp    eax,0x1
c0010b3d:	19 c0                	sbb    eax,eax
c0010b3f:	83 e0 46             	and    eax,0x46
c0010b42:	83 c0 1e             	add    eax,0x1e
c0010b45:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b48:	e8 28 d6 ff ff       	call   c000e175 <setupTimer(int)>
c0010b4d:	83 c4 10             	add    esp,0x10
c0010b50:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010b56:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010b5d:	74 0c                	je     c0010b6b <CPU::open(int, int, void*)+0xff>
c0010b5f:	83 ec 0c             	sub    esp,0xc
c0010b62:	53                   	push   ebx
c0010b63:	e8 38 fe ff ff       	call   c00109a0 <CPU::setupFeatures()>
c0010b68:	83 c4 10             	add    esp,0x10
c0010b6b:	83 c4 0c             	add    esp,0xc
c0010b6e:	31 c0                	xor    eax,eax
c0010b70:	5b                   	pop    ebx
c0010b71:	5e                   	pop    esi
c0010b72:	5f                   	pop    edi
c0010b73:	5d                   	pop    ebp
c0010b74:	c3                   	ret    

c0010b75 <KeInitialiseAtexit()>:
c0010b75:	83 ec 10             	sub    esp,0x10
c0010b78:	c7 05 a0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x0
c0010b82:	6a 60                	push   0x60
c0010b84:	6a 00                	push   0x0
c0010b86:	68 20 8e 02 c0       	push   0xc0028e20
c0010b8b:	e8 60 f9 fe ff       	call   c00004f0 <memset>
c0010b90:	83 c4 1c             	add    esp,0x1c
c0010b93:	c3                   	ret    

c0010b94 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010b94:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c0010b99:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b9d:	89 14 85 20 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71e0],edx
c0010ba4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ba8:	89 14 85 c0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7240],edx
c0010baf:	40                   	inc    eax
c0010bb0:	a3 a0 8d 02 c0       	mov    ds:0xc0028da0,eax
c0010bb5:	83 f8 17             	cmp    eax,0x17
c0010bb8:	7e 0d                	jle    c0010bc7 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010bba:	c7 44 24 04 70 1f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021f70
c0010bc2:	e9 b6 07 00 00       	jmp    c001137d <KePanic(char const*)>
c0010bc7:	c3                   	ret    

c0010bc8 <KeExecuteAtexit()>:
c0010bc8:	53                   	push   ebx
c0010bc9:	31 db                	xor    ebx,ebx
c0010bcb:	83 ec 08             	sub    esp,0x8
c0010bce:	39 1d a0 8d 02 c0    	cmp    DWORD PTR ds:0xc0028da0,ebx
c0010bd4:	7e 50                	jle    c0010c26 <KeExecuteAtexit()+0x5e>
c0010bd6:	8b 04 9d 20 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd71e0]
c0010bdd:	85 c0                	test   eax,eax
c0010bdf:	74 42                	je     c0010c23 <KeExecuteAtexit()+0x5b>
c0010be1:	51                   	push   ecx
c0010be2:	50                   	push   eax
c0010be3:	53                   	push   ebx
c0010be4:	68 89 1f 02 c0       	push   0xc0021f89
c0010be9:	e8 57 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010bee:	58                   	pop    eax
c0010bef:	ff 34 9d c0 8d 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7240]
c0010bf6:	ff 14 9d 20 8e 02 c0 	call   DWORD PTR [ebx*4-0x3ffd71e0]
c0010bfd:	c7 04 24 ab 1f 02 c0 	mov    DWORD PTR [esp],0xc0021fab
c0010c04:	e8 3c 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c09:	c7 04 24 0b 31 02 c0 	mov    DWORD PTR [esp],0xc002310b
c0010c10:	c7 04 9d 20 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd71e0],0x0
c0010c1b:	e8 25 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c20:	83 c4 10             	add    esp,0x10
c0010c23:	43                   	inc    ebx
c0010c24:	eb a8                	jmp    c0010bce <KeExecuteAtexit()+0x6>
c0010c26:	83 c4 08             	add    esp,0x8
c0010c29:	5b                   	pop    ebx
c0010c2a:	c3                   	ret    

c0010c2b <KeDisplaySplashScreen()>:
c0010c2b:	55                   	push   ebp
c0010c2c:	bd 05 00 00 00       	mov    ebp,0x5
c0010c31:	57                   	push   edi
c0010c32:	bf 0a 00 00 00       	mov    edi,0xa
c0010c37:	56                   	push   esi
c0010c38:	31 f6                	xor    esi,esi
c0010c3a:	53                   	push   ebx
c0010c3b:	31 db                	xor    ebx,ebx
c0010c3d:	83 ec 0c             	sub    esp,0xc
c0010c40:	0f b6 96 60 33 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdcca0]
c0010c47:	89 d0                	mov    eax,edx
c0010c49:	85 d2                	test   edx,edx
c0010c4b:	74 52                	je     c0010c9f <KeDisplaySplashScreen()+0x74>
c0010c4d:	80 bb 96 33 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdcc6a],0xdb
c0010c54:	75 13                	jne    c0010c69 <KeDisplaySplashScreen()+0x3e>
c0010c56:	0f b6 8b 95 33 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdcc6b]
c0010c5d:	83 e1 fe             	and    ecx,0xfffffffe
c0010c60:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010c66:	75 01                	jne    c0010c69 <KeDisplaySplashScreen()+0x3e>
c0010c68:	47                   	inc    edi
c0010c69:	83 fa 0d             	cmp    edx,0xd
c0010c6c:	74 28                	je     c0010c96 <KeDisplaySplashScreen()+0x6b>
c0010c6e:	83 fa 0a             	cmp    edx,0xa
c0010c71:	75 0a                	jne    c0010c7d <KeDisplaySplashScreen()+0x52>
c0010c73:	45                   	inc    ebp
c0010c74:	bf 0a 00 00 00       	mov    edi,0xa
c0010c79:	31 db                	xor    ebx,ebx
c0010c7b:	eb 19                	jmp    c0010c96 <KeDisplaySplashScreen()+0x6b>
c0010c7d:	83 ec 0c             	sub    esp,0xc
c0010c80:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010c83:	55                   	push   ebp
c0010c84:	0f be c0             	movsx  eax,al
c0010c87:	52                   	push   edx
c0010c88:	43                   	inc    ebx
c0010c89:	6a 00                	push   0x0
c0010c8b:	6a 0e                	push   0xe
c0010c8d:	50                   	push   eax
c0010c8e:	e8 a1 7e 00 00       	call   c0018b34 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010c93:	83 c4 20             	add    esp,0x20
c0010c96:	46                   	inc    esi
c0010c97:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010c9d:	75 a1                	jne    c0010c40 <KeDisplaySplashScreen()+0x15>
c0010c9f:	83 c4 0c             	add    esp,0xc
c0010ca2:	5b                   	pop    ebx
c0010ca3:	5e                   	pop    esi
c0010ca4:	5f                   	pop    edi
c0010ca5:	5d                   	pop    ebp
c0010ca6:	c3                   	ret    

c0010ca7 <KeSetBootMessage(char const*)>:
c0010ca7:	57                   	push   edi
c0010ca8:	56                   	push   esi
c0010ca9:	53                   	push   ebx
c0010caa:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010cb0:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010cb7:	68 9e 00 00 00       	push   0x9e
c0010cbc:	6a 00                	push   0x0
c0010cbe:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010cc2:	56                   	push   esi
c0010cc3:	e8 28 f8 fe ff       	call   c00004f0 <memset>
c0010cc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ccb:	e8 a0 f8 fe ff       	call   c0000570 <strlen>
c0010cd0:	ba 50 00 00 00       	mov    edx,0x50
c0010cd5:	83 c4 10             	add    esp,0x10
c0010cd8:	29 c2                	sub    edx,eax
c0010cda:	31 c9                	xor    ecx,ecx
c0010cdc:	83 e2 fe             	and    edx,0xfffffffe
c0010cdf:	01 f2                	add    edx,esi
c0010ce1:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010ce6:	84 c0                	test   al,al
c0010ce8:	74 0a                	je     c0010cf4 <KeSetBootMessage(char const*)+0x4d>
c0010cea:	80 cc 0f             	or     ah,0xf
c0010ced:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010cf1:	41                   	inc    ecx
c0010cf2:	eb ed                	jmp    c0010ce1 <KeSetBootMessage(char const*)+0x3a>
c0010cf4:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010cf9:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010cfe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d00:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010d06:	5b                   	pop    ebx
c0010d07:	5e                   	pop    esi
c0010d08:	5f                   	pop    edi
c0010d09:	c3                   	ret    
c0010d0a:	66 90                	xchg   ax,ax

c0010d0c <Krnl::handlePowerButton()>:
c0010d0c:	83 ec 0c             	sub    esp,0xc
c0010d0f:	e8 c4 06 00 00       	call   c00113d8 <KeHandlePowerButton()>
c0010d14:	90                   	nop
c0010d15:	83 c4 0c             	add    esp,0xc
c0010d18:	c3                   	ret    
c0010d19:	8d 76 00             	lea    esi,[esi+0x0]

c0010d1c <Krnl::handleSleepButton()>:
c0010d1c:	83 ec 0c             	sub    esp,0xc
c0010d1f:	e8 e9 06 00 00       	call   c001140d <KeHandleSleepButton()>
c0010d24:	90                   	nop
c0010d25:	83 c4 0c             	add    esp,0xc
c0010d28:	c3                   	ret    
c0010d29:	90                   	nop

c0010d2a <EnvVarContainer::getEnv(char const*)>:
c0010d2a:	57                   	push   edi
c0010d2b:	56                   	push   esi
c0010d2c:	53                   	push   ebx
c0010d2d:	31 db                	xor    ebx,ebx
c0010d2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d33:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010d35:	7e 2b                	jle    c0010d62 <EnvVarContainer::getEnv(char const*)+0x38>
c0010d37:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010d3e:	50                   	push   eax
c0010d3f:	50                   	push   eax
c0010d40:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010d43:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010d46:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010d4a:	e8 01 fa fe ff       	call   c0000750 <strcmp>
c0010d4f:	83 c4 10             	add    esp,0x10
c0010d52:	85 c0                	test   eax,eax
c0010d54:	75 09                	jne    c0010d5f <EnvVarContainer::getEnv(char const*)+0x35>
c0010d56:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010d59:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010d5d:	eb 05                	jmp    c0010d64 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010d5f:	43                   	inc    ebx
c0010d60:	eb d1                	jmp    c0010d33 <EnvVarContainer::getEnv(char const*)+0x9>
c0010d62:	31 c0                	xor    eax,eax
c0010d64:	5b                   	pop    ebx
c0010d65:	5e                   	pop    esi
c0010d66:	5f                   	pop    edi
c0010d67:	c3                   	ret    

c0010d68 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010d68:	55                   	push   ebp
c0010d69:	57                   	push   edi
c0010d6a:	56                   	push   esi
c0010d6b:	53                   	push   ebx
c0010d6c:	83 ec 28             	sub    esp,0x28
c0010d6f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010d73:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010d77:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010d7b:	56                   	push   esi
c0010d7c:	e8 ef f7 fe ff       	call   c0000570 <strlen>
c0010d81:	40                   	inc    eax
c0010d82:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d85:	e8 2c 6d ff ff       	call   c0007ab6 <malloc>
c0010d8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010d91:	e8 da f7 fe ff       	call   c0000570 <strlen>
c0010d96:	40                   	inc    eax
c0010d97:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d9a:	e8 17 6d ff ff       	call   c0007ab6 <malloc>
c0010d9f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010da2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010da6:	e8 c5 f7 fe ff       	call   c0000570 <strlen>
c0010dab:	83 c4 0c             	add    esp,0xc
c0010dae:	40                   	inc    eax
c0010daf:	50                   	push   eax
c0010db0:	6a 00                	push   0x0
c0010db2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010db6:	e8 35 f7 fe ff       	call   c00004f0 <memset>
c0010dbb:	89 34 24             	mov    DWORD PTR [esp],esi
c0010dbe:	e8 ad f7 fe ff       	call   c0000570 <strlen>
c0010dc3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010dc7:	8d 48 01             	lea    ecx,[eax+0x1]
c0010dca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010dcc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dcf:	89 de                	mov    esi,ebx
c0010dd1:	e8 9a f7 fe ff       	call   c0000570 <strlen>
c0010dd6:	83 c4 0c             	add    esp,0xc
c0010dd9:	40                   	inc    eax
c0010dda:	50                   	push   eax
c0010ddb:	6a 00                	push   0x0
c0010ddd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010de1:	e8 0a f7 fe ff       	call   c00004f0 <memset>
c0010de6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010de9:	e8 82 f7 fe ff       	call   c0000570 <strlen>
c0010dee:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010df2:	8d 48 01             	lea    ecx,[eax+0x1]
c0010df5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010df7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010dfa:	40                   	inc    eax
c0010dfb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010dfe:	c1 e0 03             	shl    eax,0x3
c0010e01:	5a                   	pop    edx
c0010e02:	59                   	pop    ecx
c0010e03:	50                   	push   eax
c0010e04:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010e07:	e8 96 6c ff ff       	call   c0007aa2 <realloc>
c0010e0c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010e10:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010e13:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010e16:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010e1a:	b9 08 00 00 00       	mov    ecx,0x8
c0010e1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e21:	83 c4 2c             	add    esp,0x2c
c0010e24:	5b                   	pop    ebx
c0010e25:	5e                   	pop    esi
c0010e26:	5f                   	pop    edi
c0010e27:	5d                   	pop    ebp
c0010e28:	c3                   	ret    
c0010e29:	90                   	nop

c0010e2a <EnvVarContainer::deleteEnv(char const*)>:
c0010e2a:	c3                   	ret    
c0010e2b:	90                   	nop

c0010e2c <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010e2c:	55                   	push   ebp
c0010e2d:	57                   	push   edi
c0010e2e:	56                   	push   esi
c0010e2f:	53                   	push   ebx
c0010e30:	81 ec 38 01 00 00    	sub    esp,0x138
c0010e36:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010e3d:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010e44:	68 14 01 00 00       	push   0x114
c0010e49:	e8 68 6c ff ff       	call   c0007ab6 <malloc>
c0010e4e:	83 c4 0c             	add    esp,0xc
c0010e51:	89 c3                	mov    ebx,eax
c0010e53:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010e56:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010e5d:	50                   	push   eax
c0010e5e:	e8 73 aa ff ff       	call   c000b8d6 <File::File(char const*, Process*)>
c0010e63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e66:	e8 4d ad ff ff       	call   c000bbb8 <File::exists()>
c0010e6b:	83 c4 10             	add    esp,0x10
c0010e6e:	84 c0                	test   al,al
c0010e70:	75 31                	jne    c0010ea3 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010e72:	50                   	push   eax
c0010e73:	50                   	push   eax
c0010e74:	6a 12                	push   0x12
c0010e76:	53                   	push   ebx
c0010e77:	e8 78 aa ff ff       	call   c000b8f4 <File::open(FileOpenMode)>
c0010e7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e7e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010e81:	89 34 24             	mov    DWORD PTR [esp],esi
c0010e84:	e8 e7 f6 fe ff       	call   c0000570 <strlen>
c0010e89:	5a                   	pop    edx
c0010e8a:	31 d2                	xor    edx,edx
c0010e8c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010e90:	51                   	push   ecx
c0010e91:	56                   	push   esi
c0010e92:	52                   	push   edx
c0010e93:	50                   	push   eax
c0010e94:	53                   	push   ebx
c0010e95:	ff d7                	call   edi
c0010e97:	83 c4 14             	add    esp,0x14
c0010e9a:	53                   	push   ebx
c0010e9b:	e8 b2 aa ff ff       	call   c000b952 <File::close()>
c0010ea0:	83 c4 10             	add    esp,0x10
c0010ea3:	56                   	push   esi
c0010ea4:	31 f6                	xor    esi,esi
c0010ea6:	68 00 01 00 00       	push   0x100
c0010eab:	6a 00                	push   0x0
c0010ead:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010eb1:	50                   	push   eax
c0010eb2:	e8 39 f6 fe ff       	call   c00004f0 <memset>
c0010eb7:	5f                   	pop    edi
c0010eb8:	58                   	pop    eax
c0010eb9:	6a 01                	push   0x1
c0010ebb:	53                   	push   ebx
c0010ebc:	e8 33 aa ff ff       	call   c000b8f4 <File::open(FileOpenMode)>
c0010ec1:	83 c4 10             	add    esp,0x10
c0010ec4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010ecc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010ed4:	83 ec 0c             	sub    esp,0xc
c0010ed7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ed9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010edd:	51                   	push   ecx
c0010ede:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010ee2:	52                   	push   edx
c0010ee3:	6a 00                	push   0x0
c0010ee5:	6a 01                	push   0x1
c0010ee7:	53                   	push   ebx
c0010ee8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010eeb:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010ef0:	83 c4 20             	add    esp,0x20
c0010ef3:	89 c2                	mov    edx,eax
c0010ef5:	85 c0                	test   eax,eax
c0010ef7:	0f 84 36 01 00 00    	je     c0011033 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010efd:	83 f8 0d             	cmp    eax,0xd
c0010f00:	0f 84 22 01 00 00    	je     c0011028 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f06:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010f0b:	0f 84 f0 00 00 00    	je     c0011001 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010f11:	83 f8 0a             	cmp    eax,0xa
c0010f14:	74 13                	je     c0010f29 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010f16:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010f1b:	74 0c                	je     c0010f29 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010f1d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010f23:	0f 8e f6 00 00 00    	jle    c001101f <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010f29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f2d:	83 ec 0c             	sub    esp,0xc
c0010f30:	8d 78 01             	lea    edi,[eax+0x1]
c0010f33:	57                   	push   edi
c0010f34:	e8 7d 6b ff ff       	call   c0007ab6 <malloc>
c0010f39:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010f3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010f41:	8d 56 04             	lea    edx,[esi+0x4]
c0010f44:	89 14 24             	mov    DWORD PTR [esp],edx
c0010f47:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010f4b:	e8 66 6b ff ff       	call   c0007ab6 <malloc>
c0010f50:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010f54:	83 c4 0c             	add    esp,0xc
c0010f57:	57                   	push   edi
c0010f58:	6a 00                	push   0x0
c0010f5a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010f5e:	e8 8d f5 fe ff       	call   c00004f0 <memset>
c0010f63:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010f67:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010f6b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010f6f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f71:	83 c4 0c             	add    esp,0xc
c0010f74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f78:	52                   	push   edx
c0010f79:	6a 00                	push   0x0
c0010f7b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010f7f:	e8 6c f5 fe ff       	call   c00004f0 <memset>
c0010f84:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010f88:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010f8c:	89 34 24             	mov    DWORD PTR [esp],esi
c0010f8f:	e8 dc f5 fe ff       	call   c0000570 <strlen>
c0010f94:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010f98:	89 c1                	mov    ecx,eax
c0010f9a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f9c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010f9f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010fa2:	40                   	inc    eax
c0010fa3:	83 c4 10             	add    esp,0x10
c0010fa6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010fa9:	85 d2                	test   edx,edx
c0010fab:	75 0c                	jne    c0010fb9 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010fad:	83 ec 0c             	sub    esp,0xc
c0010fb0:	6a 08                	push   0x8
c0010fb2:	e8 ff 6a ff ff       	call   c0007ab6 <malloc>
c0010fb7:	eb 0c                	jmp    c0010fc5 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010fb9:	c1 e0 03             	shl    eax,0x3
c0010fbc:	51                   	push   ecx
c0010fbd:	51                   	push   ecx
c0010fbe:	50                   	push   eax
c0010fbf:	52                   	push   edx
c0010fc0:	e8 dd 6a ff ff       	call   c0007aa2 <realloc>
c0010fc5:	83 c4 10             	add    esp,0x10
c0010fc8:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010fcb:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010fce:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010fd1:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010fd5:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010fd9:	b9 08 00 00 00       	mov    ecx,0x8
c0010fde:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fe0:	31 f6                	xor    esi,esi
c0010fe2:	50                   	push   eax
c0010fe3:	68 00 01 00 00       	push   0x100
c0010fe8:	6a 00                	push   0x0
c0010fea:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010fee:	50                   	push   eax
c0010fef:	e8 fc f4 fe ff       	call   c00004f0 <memset>
c0010ff4:	83 c4 10             	add    esp,0x10
c0010ff7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010fff:	eb 27                	jmp    c0011028 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011001:	83 f8 3d             	cmp    eax,0x3d
c0011004:	74 1e                	je     c0011024 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0011006:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001100c:	7f 07                	jg     c0011015 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c001100e:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0011012:	46                   	inc    esi
c0011013:	eb 13                	jmp    c0011028 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0011015:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001101d:	eb 09                	jmp    c0011028 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001101f:	83 f8 3d             	cmp    eax,0x3d
c0011022:	75 ea                	jne    c001100e <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0011024:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0011028:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001102d:	0f 85 99 fe ff ff    	jne    c0010ecc <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0011033:	83 ec 0c             	sub    esp,0xc
c0011036:	53                   	push   ebx
c0011037:	e8 16 a9 ff ff       	call   c000b952 <File::close()>
c001103c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001103e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011041:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011044:	81 c4 3c 01 00 00    	add    esp,0x13c
c001104a:	5b                   	pop    ebx
c001104b:	5e                   	pop    esi
c001104c:	5f                   	pop    edi
c001104d:	5d                   	pop    ebp
c001104e:	c3                   	ret    
c001104f:	90                   	nop

c0011050 <EnvVarContainer::__loadSystem()>:
c0011050:	83 ec 10             	sub    esp,0x10
c0011053:	68 c0 34 02 c0       	push   0xc00234c0
c0011058:	68 b0 1f 02 c0       	push   0xc0021fb0
c001105d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011061:	e8 c6 fd ff ff       	call   c0010e2c <EnvVarContainer::loadFrom(char const*, char const*)>
c0011066:	83 c4 1c             	add    esp,0x1c
c0011069:	c3                   	ret    

c001106a <EnvVarContainer::__loadUser()>:
c001106a:	c3                   	ret    
c001106b:	90                   	nop

c001106c <EnvVarContainer::EnvVarContainer(Process*)>:
c001106c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011070:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011076:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001107a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001107e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011081:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011085:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001108c:	90                   	nop
c001108d:	c3                   	ret    

c001108e <EnvVarContainer::~EnvVarContainer()>:
c001108e:	83 ec 0c             	sub    esp,0xc
c0011091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011095:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011098:	85 c0                	test   eax,eax
c001109a:	74 1d                	je     c00110b9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001109c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00110a2:	85 c0                	test   eax,eax
c00110a4:	74 13                	je     c00110b9 <EnvVarContainer::~EnvVarContainer()+0x2b>
c00110a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110ad:	83 ec 0c             	sub    esp,0xc
c00110b0:	50                   	push   eax
c00110b1:	e8 10 6a ff ff       	call   c0007ac6 <free>
c00110b6:	83 c4 10             	add    esp,0x10
c00110b9:	90                   	nop
c00110ba:	83 c4 0c             	add    esp,0xc
c00110bd:	c3                   	ret    

c00110be <KeGetEnv(Process*, char const*)>:
c00110be:	53                   	push   ebx
c00110bf:	83 ec 08             	sub    esp,0x8
c00110c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00110ca:	39 05 f0 96 02 c0    	cmp    DWORD PTR ds:0xc00296f0,eax
c00110d0:	74 04                	je     c00110d6 <KeGetEnv(Process*, char const*)+0x18>
c00110d2:	85 c0                	test   eax,eax
c00110d4:	75 0b                	jne    c00110e1 <KeGetEnv(Process*, char const*)+0x23>
c00110d6:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c00110db:	85 c0                	test   eax,eax
c00110dd:	75 19                	jne    c00110f8 <KeGetEnv(Process*, char const*)+0x3a>
c00110df:	eb 27                	jmp    c0011108 <KeGetEnv(Process*, char const*)+0x4a>
c00110e1:	52                   	push   edx
c00110e2:	52                   	push   edx
c00110e3:	53                   	push   ebx
c00110e4:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00110ea:	e8 3b fc ff ff       	call   c0010d2a <EnvVarContainer::getEnv(char const*)>
c00110ef:	83 c4 10             	add    esp,0x10
c00110f2:	85 c0                	test   eax,eax
c00110f4:	75 28                	jne    c001111e <KeGetEnv(Process*, char const*)+0x60>
c00110f6:	eb de                	jmp    c00110d6 <KeGetEnv(Process*, char const*)+0x18>
c00110f8:	52                   	push   edx
c00110f9:	52                   	push   edx
c00110fa:	53                   	push   ebx
c00110fb:	50                   	push   eax
c00110fc:	e8 29 fc ff ff       	call   c0010d2a <EnvVarContainer::getEnv(char const*)>
c0011101:	83 c4 10             	add    esp,0x10
c0011104:	85 c0                	test   eax,eax
c0011106:	75 16                	jne    c001111e <KeGetEnv(Process*, char const*)+0x60>
c0011108:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001110c:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c0011111:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011115:	83 c4 08             	add    esp,0x8
c0011118:	5b                   	pop    ebx
c0011119:	e9 0c fc ff ff       	jmp    c0010d2a <EnvVarContainer::getEnv(char const*)>
c001111e:	83 c4 08             	add    esp,0x8
c0011121:	5b                   	pop    ebx
c0011122:	c3                   	ret    

c0011123 <KeSetEnvSystem(char const*, char const*)>:
c0011123:	83 ec 10             	sub    esp,0x10
c0011126:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001112a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001112e:	ff 35 84 8e 02 c0    	push   DWORD PTR ds:0xc0028e84
c0011134:	e8 2f fc ff ff       	call   c0010d68 <EnvVarContainer::setEnv(char const*, char const*)>
c0011139:	83 c4 1c             	add    esp,0x1c
c001113c:	c3                   	ret    

c001113d <KeSetEnvUser(char const*, char const*)>:
c001113d:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0011142:	85 c0                	test   eax,eax
c0011144:	74 15                	je     c001115b <KeSetEnvUser(char const*, char const*)+0x1e>
c0011146:	83 ec 10             	sub    esp,0x10
c0011149:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001114d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011151:	50                   	push   eax
c0011152:	e8 11 fc ff ff       	call   c0010d68 <EnvVarContainer::setEnv(char const*, char const*)>
c0011157:	83 c4 1c             	add    esp,0x1c
c001115a:	c3                   	ret    
c001115b:	c3                   	ret    

c001115c <KeSetEnvProcess(Process*, char const*, char const*)>:
c001115c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011160:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0011166:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001116a:	e9 f9 fb ff ff       	jmp    c0010d68 <EnvVarContainer::setEnv(char const*, char const*)>

c001116f <KeDeleteEnvSystem(char const*)>:
c001116f:	c3                   	ret    

c0011170 <KeDeleteEnvUser(char const*)>:
c0011170:	c3                   	ret    

c0011171 <KeDeleteEnvProcess(Process*, char const*)>:
c0011171:	c3                   	ret    

c0011172 <KeNewProcessEnv(Process*)>:
c0011172:	83 ec 28             	sub    esp,0x28
c0011175:	6a 0c                	push   0xc
c0011177:	e8 3a 69 ff ff       	call   c0007ab6 <malloc>
c001117c:	5a                   	pop    edx
c001117d:	59                   	pop    ecx
c001117e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011182:	50                   	push   eax
c0011183:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011187:	e8 e0 fe ff ff       	call   c001106c <EnvVarContainer::EnvVarContainer(Process*)>
c001118c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011190:	83 c4 2c             	add    esp,0x2c
c0011193:	c3                   	ret    

c0011194 <KeCopyProcessEnv(Process*, Process*)>:
c0011194:	57                   	push   edi
c0011195:	56                   	push   esi
c0011196:	53                   	push   ebx
c0011197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001119b:	83 ec 0c             	sub    esp,0xc
c001119e:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00111a4:	6a 0c                	push   0xc
c00111a6:	e8 0b 69 ff ff       	call   c0007ab6 <malloc>
c00111ab:	89 c3                	mov    ebx,eax
c00111ad:	58                   	pop    eax
c00111ae:	5a                   	pop    edx
c00111af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111b3:	53                   	push   ebx
c00111b4:	e8 b3 fe ff ff       	call   c001106c <EnvVarContainer::EnvVarContainer(Process*)>
c00111b9:	8b 07                	mov    eax,DWORD PTR [edi]
c00111bb:	89 03                	mov    DWORD PTR [ebx],eax
c00111bd:	c1 e0 03             	shl    eax,0x3
c00111c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00111c3:	e8 ee 68 ff ff       	call   c0007ab6 <malloc>
c00111c8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00111cb:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00111cd:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00111d0:	c1 e1 03             	shl    ecx,0x3
c00111d3:	89 c7                	mov    edi,eax
c00111d5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111d7:	83 c4 10             	add    esp,0x10
c00111da:	89 d8                	mov    eax,ebx
c00111dc:	5b                   	pop    ebx
c00111dd:	5e                   	pop    esi
c00111de:	5f                   	pop    edi
c00111df:	c3                   	ret    

c00111e0 <KeLoadSystemEnv()>:
c00111e0:	53                   	push   ebx
c00111e1:	83 ec 14             	sub    esp,0x14
c00111e4:	6a 0c                	push   0xc
c00111e6:	e8 cb 68 ff ff       	call   c0007ab6 <malloc>
c00111eb:	89 c3                	mov    ebx,eax
c00111ed:	58                   	pop    eax
c00111ee:	5a                   	pop    edx
c00111ef:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00111f5:	53                   	push   ebx
c00111f6:	e8 71 fe ff ff       	call   c001106c <EnvVarContainer::EnvVarContainer(Process*)>
c00111fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111fe:	89 1d 84 8e 02 c0    	mov    DWORD PTR ds:0xc0028e84,ebx
c0011204:	e8 47 fe ff ff       	call   c0011050 <EnvVarContainer::__loadSystem()>
c0011209:	83 c4 18             	add    esp,0x18
c001120c:	5b                   	pop    ebx
c001120d:	c3                   	ret    

c001120e <KeLoadUserEnv()>:
c001120e:	53                   	push   ebx
c001120f:	83 ec 14             	sub    esp,0x14
c0011212:	6a 0c                	push   0xc
c0011214:	e8 9d 68 ff ff       	call   c0007ab6 <malloc>
c0011219:	89 c3                	mov    ebx,eax
c001121b:	58                   	pop    eax
c001121c:	5a                   	pop    edx
c001121d:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011223:	53                   	push   ebx
c0011224:	e8 43 fe ff ff       	call   c001106c <EnvVarContainer::EnvVarContainer(Process*)>
c0011229:	89 1d 80 8e 02 c0    	mov    DWORD PTR ds:0xc0028e80,ebx
c001122f:	83 c4 18             	add    esp,0x18
c0011232:	5b                   	pop    ebx
c0011233:	c3                   	ret    

c0011234 <KeFlushEnv()>:
c0011234:	c3                   	ret    

c0011235 <KeGetProcessTotalEnvCount(Process*)>:
c0011235:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011239:	8b 15 80 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e80
c001123f:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011245:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c001124a:	8b 00                	mov    eax,DWORD PTR [eax]
c001124c:	03 01                	add    eax,DWORD PTR [ecx]
c001124e:	85 d2                	test   edx,edx
c0011250:	74 02                	je     c0011254 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0011252:	03 02                	add    eax,DWORD PTR [edx]
c0011254:	c3                   	ret    

c0011255 <KeGetProcessEnvPair(Process*, int)>:
c0011255:	57                   	push   edi
c0011256:	56                   	push   esi
c0011257:	8b 35 80 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e80
c001125d:	53                   	push   ebx
c001125e:	85 f6                	test   esi,esi
c0011260:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011264:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011268:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001126e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011272:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011274:	75 16                	jne    c001128c <KeGetProcessEnvPair(Process*, int)+0x37>
c0011276:	39 c2                	cmp    edx,eax
c0011278:	7c 16                	jl     c0011290 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001127a:	8b 0d 84 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e84
c0011280:	8b 31                	mov    esi,DWORD PTR [ecx]
c0011282:	01 c6                	add    esi,eax
c0011284:	39 d6                	cmp    esi,edx
c0011286:	7e 3c                	jle    c00112c4 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011288:	29 c2                	sub    edx,eax
c001128a:	eb 04                	jmp    c0011290 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001128c:	39 c2                	cmp    edx,eax
c001128e:	7d 05                	jge    c0011295 <KeGetProcessEnvPair(Process*, int)+0x40>
c0011290:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0011293:	eb 20                	jmp    c00112b5 <KeGetProcessEnvPair(Process*, int)+0x60>
c0011295:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011297:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001129a:	39 d1                	cmp    ecx,edx
c001129c:	7e 04                	jle    c00112a2 <KeGetProcessEnvPair(Process*, int)+0x4d>
c001129e:	29 c2                	sub    edx,eax
c00112a0:	eb 10                	jmp    c00112b2 <KeGetProcessEnvPair(Process*, int)+0x5d>
c00112a2:	8b 35 84 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e84
c00112a8:	03 0e                	add    ecx,DWORD PTR [esi]
c00112aa:	39 d1                	cmp    ecx,edx
c00112ac:	7e 16                	jle    c00112c4 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00112ae:	29 c2                	sub    edx,eax
c00112b0:	29 fa                	sub    edx,edi
c00112b2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00112b5:	8d 14 d0             	lea    edx,[eax+edx*8]
c00112b8:	8b 02                	mov    eax,DWORD PTR [edx]
c00112ba:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00112bd:	89 03                	mov    DWORD PTR [ebx],eax
c00112bf:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00112c2:	eb 1d                	jmp    c00112e1 <KeGetProcessEnvPair(Process*, int)+0x8c>
c00112c4:	83 ec 0c             	sub    esp,0xc
c00112c7:	68 d2 1f 02 c0       	push   0xc0021fd2
c00112cc:	e8 ac 00 00 00       	call   c001137d <KePanic(char const*)>
c00112d1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00112d7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00112de:	83 c4 10             	add    esp,0x10
c00112e1:	89 d8                	mov    eax,ebx
c00112e3:	5b                   	pop    ebx
c00112e4:	5e                   	pop    esi
c00112e5:	5f                   	pop    edi
c00112e6:	c2 04 00             	ret    0x4

c00112e9 <CPU::current()>:
c00112e9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00112ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00112f4:	c3                   	ret    

c00112f5 <operator new(unsigned long)>:
c00112f5:	e9 bc 67 ff ff       	jmp    c0007ab6 <malloc>

c00112fa <operator delete(void*)>:
c00112fa:	e9 d7 67 ff ff       	jmp    c0007ad6 <rfree>

c00112ff <disableIRQs()>:
c00112ff:	fa                   	cli    
c0011300:	c3                   	ret    

c0011301 <enableIRQs()>:
c0011301:	fb                   	sti    
c0011302:	c3                   	ret    

c0011303 <lockScheduler()>:
c0011303:	fa                   	cli    
c0011304:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001130a:	c3                   	ret    

c001130b <unlockScheduler()>:
c001130b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011310:	48                   	dec    eax
c0011311:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0011316:	75 01                	jne    c0011319 <unlockScheduler()+0xe>
c0011318:	fb                   	sti    
c0011319:	c3                   	ret    

c001131a <lockStuff()>:
c001131a:	fa                   	cli    
c001131b:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0011321:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c0011327:	c3                   	ret    

c0011328 <unlockStuff()>:
c0011328:	83 ec 0c             	sub    esp,0xc
c001132b:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0011330:	48                   	dec    eax
c0011331:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0011336:	75 18                	jne    c0011350 <unlockStuff()+0x28>
c0011338:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c001133f:	74 0f                	je     c0011350 <unlockStuff()+0x28>
c0011341:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001134b:	e8 90 4a 00 00       	call   c0015de0 <schedule()>
c0011350:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011355:	48                   	dec    eax
c0011356:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001135b:	75 01                	jne    c001135e <unlockStuff()+0x36>
c001135d:	fb                   	sti    
c001135e:	83 c4 0c             	add    esp,0xc
c0011361:	c3                   	ret    

c0011362 <Virt::getAKernelVAS()>:
c0011362:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0011367:	c3                   	ret    

c0011368 <__not_memcpy>:
c0011368:	57                   	push   edi
c0011369:	56                   	push   esi
c001136a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001136e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011372:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011376:	89 c7                	mov    edi,eax
c0011378:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001137a:	5e                   	pop    esi
c001137b:	5f                   	pop    edi
c001137c:	c3                   	ret    

c001137d <KePanic(char const*)>:
c001137d:	c6 05 88 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e88,0x1
c0011384:	e9 fd 69 00 00       	jmp    c0017d86 <HalPanic(char const*)>

c0011389 <KePowerThread(void*)>:
c0011389:	83 ec 0c             	sub    esp,0xc
c001138c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011391:	48                   	dec    eax
c0011392:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0011397:	75 01                	jne    c001139a <KePowerThread(void*)+0x11>
c0011399:	fb                   	sti    
c001139a:	83 ec 0c             	sub    esp,0xc
c001139d:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c00113a4:	6a 0a                	push   0xa
c00113a6:	e8 79 4d 00 00       	call   c0016124 <sleep(unsigned int)>
c00113ab:	83 05 e4 8e 02 c0 0a 	add    DWORD PTR ds:0xc0028ee4,0xa
c00113b2:	83 c4 10             	add    esp,0x10
c00113b5:	eb e3                	jmp    c001139a <KePowerThread(void*)+0x11>

c00113b7 <KeChangePowerSettings(PowerSettings)>:
c00113b7:	57                   	push   edi
c00113b8:	b9 09 00 00 00       	mov    ecx,0x9
c00113bd:	56                   	push   esi
c00113be:	bf c0 8e 02 c0       	mov    edi,0xc0028ec0
c00113c3:	fc                   	cld    
c00113c4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00113c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00113ca:	5e                   	pop    esi
c00113cb:	5f                   	pop    edi
c00113cc:	c3                   	ret    

c00113cd <KeUserIOReceived()>:
c00113cd:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c00113d7:	c3                   	ret    

c00113d8 <KeHandlePowerButton()>:
c00113d8:	83 ec 0c             	sub    esp,0xc
c00113db:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00113e0:	83 f8 02             	cmp    eax,0x2
c00113e3:	75 10                	jne    c00113f5 <KeHandlePowerButton()+0x1d>
c00113e5:	83 ec 0c             	sub    esp,0xc
c00113e8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00113ee:	e8 35 5d ff ff       	call   c0007128 <Computer::shutdown()>
c00113f3:	eb 11                	jmp    c0011406 <KeHandlePowerButton()+0x2e>
c00113f5:	48                   	dec    eax
c00113f6:	75 11                	jne    c0011409 <KeHandlePowerButton()+0x31>
c00113f8:	83 ec 0c             	sub    esp,0xc
c00113fb:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011401:	e8 52 5d ff ff       	call   c0007158 <Computer::sleep()>
c0011406:	83 c4 10             	add    esp,0x10
c0011409:	83 c4 0c             	add    esp,0xc
c001140c:	c3                   	ret    

c001140d <KeHandleSleepButton()>:
c001140d:	83 ec 0c             	sub    esp,0xc
c0011410:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c0011415:	83 f8 02             	cmp    eax,0x2
c0011418:	75 10                	jne    c001142a <KeHandleSleepButton()+0x1d>
c001141a:	83 ec 0c             	sub    esp,0xc
c001141d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011423:	e8 00 5d ff ff       	call   c0007128 <Computer::shutdown()>
c0011428:	eb 11                	jmp    c001143b <KeHandleSleepButton()+0x2e>
c001142a:	48                   	dec    eax
c001142b:	75 11                	jne    c001143e <KeHandleSleepButton()+0x31>
c001142d:	83 ec 0c             	sub    esp,0xc
c0011430:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011436:	e8 1d 5d ff ff       	call   c0007158 <Computer::sleep()>
c001143b:	83 c4 10             	add    esp,0x10
c001143e:	83 c4 0c             	add    esp,0xc
c0011441:	c3                   	ret    

c0011442 <KeSetupPowerManager()>:
c0011442:	83 ec 0c             	sub    esp,0xc
c0011445:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c001144f:	68 f0 00 00 00       	push   0xf0
c0011454:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c001145b:	6a 00                	push   0x0
c001145d:	68 89 13 01 c0       	push   0xc0011389
c0011462:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011468:	e8 23 47 00 00       	call   c0015b90 <Process::createThread(void (*)(void*), void*, int)>
c001146d:	c7 05 c0 8e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x2
c0011477:	c7 05 c4 8e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028ec4,0x1
c0011481:	c7 05 c8 8e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028ec8,0x3
c001148b:	c7 05 cc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ecc,0x0
c0011495:	c7 05 d8 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed8,0x0
c001149f:	c7 05 d0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed0,0x0
c00114a9:	c7 05 dc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028edc,0x0
c00114b3:	c7 05 d4 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ed4,0x3c
c00114bd:	c7 05 e0 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ee0,0x3c
c00114c7:	83 c4 1c             	add    esp,0x1c
c00114ca:	c3                   	ret    

c00114cb <KeRand()>:
c00114cb:	69 05 e8 8e 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028ee8,0x2875
c00114d5:	69 0d ec 8e 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0028eec,0xa2e7b175
c00114df:	53                   	push   ebx
c00114e0:	01 c1                	add    ecx,eax
c00114e2:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00114e7:	f7 25 e8 8e 02 c0    	mul    DWORD PTR ds:0xc0028ee8
c00114ed:	01 ca                	add    edx,ecx
c00114ef:	05 ef 04 b5 00       	add    eax,0xb504ef
c00114f4:	83 d2 00             	adc    edx,0x0
c00114f7:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c00114fc:	0f b7 da             	movzx  ebx,dx
c00114ff:	89 da                	mov    edx,ebx
c0011501:	89 1d ec 8e 02 c0    	mov    DWORD PTR ds:0xc0028eec,ebx
c0011507:	0f ac d0 0e          	shrd   eax,edx,0xe
c001150b:	5b                   	pop    ebx
c001150c:	c3                   	ret    

c001150d <KeSeedRand(unsigned int)>:
c001150d:	53                   	push   ebx
c001150e:	83 ec 08             	sub    esp,0x8
c0011511:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011515:	e8 8b 6b 00 00       	call   c00180a5 <HalGetRand()>
c001151a:	c7 05 ec 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eec,0x0
c0011524:	31 d8                	xor    eax,ebx
c0011526:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c001152b:	e8 9b ff ff ff       	call   c00114cb <KeRand()>
c0011530:	83 c4 08             	add    esp,0x8
c0011533:	5b                   	pop    ebx
c0011534:	eb 95                	jmp    c00114cb <KeRand()>

c0011536 <KeInitRand()>:
c0011536:	83 ec 0c             	sub    esp,0xc
c0011539:	e8 5c 69 00 00       	call   c0017e9a <HalQueryPerformanceCounter()>
c001153e:	0f 20 da             	mov    edx,cr3
c0011541:	0f 22 da             	mov    cr3,edx
c0011544:	0f 20 da             	mov    edx,cr3
c0011547:	0f 22 da             	mov    cr3,edx
c001154a:	0f 20 da             	mov    edx,cr3
c001154d:	0f 22 da             	mov    cr3,edx
c0011550:	0f 20 da             	mov    edx,cr3
c0011553:	0f 22 da             	mov    cr3,edx
c0011556:	83 ec 0c             	sub    esp,0xc
c0011559:	35 03 8a 95 38       	xor    eax,0x38958a03
c001155e:	50                   	push   eax
c001155f:	e8 a9 ff ff ff       	call   c001150d <KeSeedRand(unsigned int)>
c0011564:	83 c4 1c             	add    esp,0x1c
c0011567:	c3                   	ret    

c0011568 <KeResolveCompatibilitySymbol(char*)>:
c0011568:	83 ec 0c             	sub    esp,0xc
c001156b:	83 ec 08             	sub    esp,0x8
c001156e:	68 ec 1f 02 c0       	push   0xc0021fec
c0011573:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011577:	e8 d4 f1 fe ff       	call   c0000750 <strcmp>
c001157c:	83 c4 10             	add    esp,0x10
c001157f:	85 c0                	test   eax,eax
c0011581:	0f 94 c0             	sete   al
c0011584:	0f b6 c0             	movzx  eax,al
c0011587:	85 c0                	test   eax,eax
c0011589:	74 0d                	je     c0011598 <KeResolveCompatibilitySymbol(char*)+0x30>
c001158b:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c0011590:	e9 8b 01 00 00       	jmp    c0011720 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011595:	8d 76 00             	lea    esi,[esi+0x0]
c0011598:	83 ec 08             	sub    esp,0x8
c001159b:	68 f5 1f 02 c0       	push   0xc0021ff5
c00115a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115a4:	e8 a7 f1 fe ff       	call   c0000750 <strcmp>
c00115a9:	83 c4 10             	add    esp,0x10
c00115ac:	85 c0                	test   eax,eax
c00115ae:	0f 94 c0             	sete   al
c00115b1:	0f b6 c0             	movzx  eax,al
c00115b4:	85 c0                	test   eax,eax
c00115b6:	74 0c                	je     c00115c4 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00115b8:	b8 50 f4 01 c0       	mov    eax,0xc001f450
c00115bd:	e9 5e 01 00 00       	jmp    c0011720 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115c2:	66 90                	xchg   ax,ax
c00115c4:	83 ec 08             	sub    esp,0x8
c00115c7:	68 ff 1f 02 c0       	push   0xc0021fff
c00115cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115d0:	e8 7b f1 fe ff       	call   c0000750 <strcmp>
c00115d5:	83 c4 10             	add    esp,0x10
c00115d8:	85 c0                	test   eax,eax
c00115da:	0f 94 c0             	sete   al
c00115dd:	0f b6 c0             	movzx  eax,al
c00115e0:	85 c0                	test   eax,eax
c00115e2:	74 0c                	je     c00115f0 <KeResolveCompatibilitySymbol(char*)+0x88>
c00115e4:	b8 84 f1 01 c0       	mov    eax,0xc001f184
c00115e9:	e9 32 01 00 00       	jmp    c0011720 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115ee:	66 90                	xchg   ax,ax
c00115f0:	83 ec 08             	sub    esp,0x8
c00115f3:	68 08 20 02 c0       	push   0xc0022008
c00115f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115fc:	e8 4f f1 fe ff       	call   c0000750 <strcmp>
c0011601:	83 c4 10             	add    esp,0x10
c0011604:	85 c0                	test   eax,eax
c0011606:	0f 94 c0             	sete   al
c0011609:	0f b6 c0             	movzx  eax,al
c001160c:	85 c0                	test   eax,eax
c001160e:	74 0c                	je     c001161c <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011610:	b8 7d 13 01 c0       	mov    eax,0xc001137d
c0011615:	e9 06 01 00 00       	jmp    c0011720 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001161a:	66 90                	xchg   ax,ax
c001161c:	83 ec 08             	sub    esp,0x8
c001161f:	68 1b 20 02 c0       	push   0xc002201b
c0011624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011628:	e8 23 f1 fe ff       	call   c0000750 <strcmp>
c001162d:	83 c4 10             	add    esp,0x10
c0011630:	85 c0                	test   eax,eax
c0011632:	0f 94 c0             	sete   al
c0011635:	0f b6 c0             	movzx  eax,al
c0011638:	85 c0                	test   eax,eax
c001163a:	74 0c                	je     c0011648 <KeResolveCompatibilitySymbol(char*)+0xe0>
c001163c:	b8 a7 0c 01 c0       	mov    eax,0xc0010ca7
c0011641:	e9 da 00 00 00       	jmp    c0011720 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011646:	66 90                	xchg   ax,ax
c0011648:	83 ec 08             	sub    esp,0x8
c001164b:	68 38 20 02 c0       	push   0xc0022038
c0011650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011654:	e8 f7 f0 fe ff       	call   c0000750 <strcmp>
c0011659:	83 c4 10             	add    esp,0x10
c001165c:	85 c0                	test   eax,eax
c001165e:	0f 94 c0             	sete   al
c0011661:	0f b6 c0             	movzx  eax,al
c0011664:	85 c0                	test   eax,eax
c0011666:	74 0c                	je     c0011674 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011668:	b8 50 f5 01 c0       	mov    eax,0xc001f550
c001166d:	e9 ae 00 00 00       	jmp    c0011720 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011672:	66 90                	xchg   ax,ax
c0011674:	83 ec 08             	sub    esp,0x8
c0011677:	68 42 20 02 c0       	push   0xc0022042
c001167c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011680:	e8 cb f0 fe ff       	call   c0000750 <strcmp>
c0011685:	83 c4 10             	add    esp,0x10
c0011688:	85 c0                	test   eax,eax
c001168a:	0f 94 c0             	sete   al
c001168d:	0f b6 c0             	movzx  eax,al
c0011690:	85 c0                	test   eax,eax
c0011692:	74 0c                	je     c00116a0 <KeResolveCompatibilitySymbol(char*)+0x138>
c0011694:	b8 d0 f2 01 c0       	mov    eax,0xc001f2d0
c0011699:	e9 82 00 00 00       	jmp    c0011720 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001169e:	66 90                	xchg   ax,ax
c00116a0:	83 ec 08             	sub    esp,0x8
c00116a3:	68 4b 20 02 c0       	push   0xc002204b
c00116a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116ac:	e8 9f f0 fe ff       	call   c0000750 <strcmp>
c00116b1:	83 c4 10             	add    esp,0x10
c00116b4:	85 c0                	test   eax,eax
c00116b6:	0f 94 c0             	sete   al
c00116b9:	0f b6 c0             	movzx  eax,al
c00116bc:	85 c0                	test   eax,eax
c00116be:	74 08                	je     c00116c8 <KeResolveCompatibilitySymbol(char*)+0x160>
c00116c0:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c00116c5:	eb 59                	jmp    c0011720 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00116c7:	90                   	nop
c00116c8:	83 ec 08             	sub    esp,0x8
c00116cb:	68 63 20 02 c0       	push   0xc0022063
c00116d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116d4:	e8 77 f0 fe ff       	call   c0000750 <strcmp>
c00116d9:	83 c4 10             	add    esp,0x10
c00116dc:	85 c0                	test   eax,eax
c00116de:	0f 94 c0             	sete   al
c00116e1:	0f b6 c0             	movzx  eax,al
c00116e4:	85 c0                	test   eax,eax
c00116e6:	74 08                	je     c00116f0 <KeResolveCompatibilitySymbol(char*)+0x188>
c00116e8:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c00116ed:	eb 31                	jmp    c0011720 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00116ef:	90                   	nop
c00116f0:	83 ec 08             	sub    esp,0x8
c00116f3:	68 70 20 02 c0       	push   0xc0022070
c00116f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116fc:	e8 4f f0 fe ff       	call   c0000750 <strcmp>
c0011701:	83 c4 10             	add    esp,0x10
c0011704:	85 c0                	test   eax,eax
c0011706:	0f 94 c0             	sete   al
c0011709:	0f b6 c0             	movzx  eax,al
c001170c:	85 c0                	test   eax,eax
c001170e:	74 08                	je     c0011718 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011710:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c0011715:	eb 09                	jmp    c0011720 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011717:	90                   	nop
c0011718:	b8 00 00 00 00       	mov    eax,0x0
c001171d:	8d 76 00             	lea    esi,[esi+0x0]
c0011720:	83 c4 0c             	add    esp,0xc
c0011723:	c3                   	ret    

c0011724 <KiSigKill(int)>:
c0011724:	83 ec 0c             	sub    esp,0xc
c0011727:	6a 00                	push   0x0
c0011729:	6a 00                	push   0x0
c001172b:	6a ff                	push   0xffffffff
c001172d:	6a 01                	push   0x1
c001172f:	e8 1e 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011734:	83 c4 1c             	add    esp,0x1c
c0011737:	c3                   	ret    

c0011738 <KiDefaultSignalHandlerIgnore(int)>:
c0011738:	c3                   	ret    

c0011739 <KiDefaultSignalHandlerPause(int)>:
c0011739:	57                   	push   edi
c001173a:	b9 07 00 00 00       	mov    ecx,0x7
c001173f:	56                   	push   esi
c0011740:	be b9 20 02 c0       	mov    esi,0xc00220b9
c0011745:	83 ec 24             	sub    esp,0x24
c0011748:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001174c:	fc                   	cld    
c001174d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001174f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011753:	50                   	push   eax
c0011754:	6a 00                	push   0x0
c0011756:	6a 00                	push   0x0
c0011758:	6a 27                	push   0x27
c001175a:	e8 f3 28 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001175f:	83 c4 34             	add    esp,0x34
c0011762:	5e                   	pop    esi
c0011763:	5f                   	pop    edi
c0011764:	c3                   	ret    

c0011765 <KiDefaultSignalHandlerResume(int)>:
c0011765:	57                   	push   edi
c0011766:	b9 1d 00 00 00       	mov    ecx,0x1d
c001176b:	56                   	push   esi
c001176c:	be d5 20 02 c0       	mov    esi,0xc00220d5
c0011771:	83 ec 24             	sub    esp,0x24
c0011774:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011778:	fc                   	cld    
c0011779:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001177b:	8d 44 24 03          	lea    eax,[esp+0x3]
c001177f:	50                   	push   eax
c0011780:	6a 00                	push   0x0
c0011782:	6a 00                	push   0x0
c0011784:	6a 27                	push   0x27
c0011786:	e8 c7 28 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001178b:	83 c4 34             	add    esp,0x34
c001178e:	5e                   	pop    esi
c001178f:	5f                   	pop    edi
c0011790:	c3                   	ret    

c0011791 <KeDeinitSignals(SigHandlerBlock*)>:
c0011791:	e9 30 63 ff ff       	jmp    c0007ac6 <free>

c0011796 <KeInitSignals()>:
c0011796:	53                   	push   ebx
c0011797:	83 ec 14             	sub    esp,0x14
c001179a:	68 c8 00 00 00       	push   0xc8
c001179f:	e8 12 63 ff ff       	call   c0007ab6 <malloc>
c00117a4:	83 c4 0c             	add    esp,0xc
c00117a7:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00117b1:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00117bb:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00117c2:	89 c3                	mov    ebx,eax
c00117c4:	6a 20                	push   0x20
c00117c6:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00117cc:	6a 00                	push   0x0
c00117ce:	50                   	push   eax
c00117cf:	e8 1c ed fe ff       	call   c00004f0 <memset>
c00117d4:	83 c4 0c             	add    esp,0xc
c00117d7:	6a 44                	push   0x44
c00117d9:	6a 00                	push   0x0
c00117db:	53                   	push   ebx
c00117dc:	e8 0f ed fe ff       	call   c00004f0 <memset>
c00117e1:	89 d8                	mov    eax,ebx
c00117e3:	83 c4 18             	add    esp,0x18
c00117e6:	5b                   	pop    ebx
c00117e7:	c3                   	ret    

c00117e8 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00117e8:	53                   	push   ebx
c00117e9:	b8 01 00 00 00       	mov    eax,0x1
c00117ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00117f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00117f6:	83 f9 10             	cmp    ecx,0x10
c00117f9:	7f 21                	jg     c001181c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00117fb:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00117fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011802:	89 03                	mov    DWORD PTR [ebx],eax
c0011804:	b8 01 00 00 00       	mov    eax,0x1
c0011809:	d3 e0                	shl    eax,cl
c001180b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001180f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011812:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001181a:	31 c0                	xor    eax,eax
c001181c:	5b                   	pop    ebx
c001181d:	c3                   	ret    

c001181e <KeRaiseSignal(SigHandlerBlock*, int)>:
c001181e:	55                   	push   ebp
c001181f:	57                   	push   edi
c0011820:	bf 08 00 00 00       	mov    edi,0x8
c0011825:	56                   	push   esi
c0011826:	53                   	push   ebx
c0011827:	83 ec 18             	sub    esp,0x18
c001182a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001182e:	68 f2 20 02 c0       	push   0xc00220f2
c0011833:	e8 0d 91 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011838:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001183f:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011845:	83 c4 10             	add    esp,0x10
c0011848:	31 c9                	xor    ecx,ecx
c001184a:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001184e:	99                   	cdq    
c001184f:	f7 ff                	idiv   edi
c0011851:	8d 42 24             	lea    eax,[edx+0x24]
c0011854:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011858:	85 f6                	test   esi,esi
c001185a:	75 1a                	jne    c0011876 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c001185c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011860:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011864:	50                   	push   eax
c0011865:	50                   	push   eax
c0011866:	52                   	push   edx
c0011867:	68 03 21 02 c0       	push   0xc0022103
c001186c:	e8 d4 90 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011871:	83 c4 10             	add    esp,0x10
c0011874:	eb 1b                	jmp    c0011891 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011876:	41                   	inc    ecx
c0011877:	83 f9 08             	cmp    ecx,0x8
c001187a:	75 ce                	jne    c001184a <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c001187c:	83 ec 0c             	sub    esp,0xc
c001187f:	be 01 00 00 00       	mov    esi,0x1
c0011884:	68 24 21 02 c0       	push   0xc0022124
c0011889:	e8 b7 90 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001188e:	83 c4 10             	add    esp,0x10
c0011891:	83 c4 0c             	add    esp,0xc
c0011894:	89 f0                	mov    eax,esi
c0011896:	5b                   	pop    ebx
c0011897:	5e                   	pop    esi
c0011898:	5f                   	pop    edi
c0011899:	5d                   	pop    ebp
c001189a:	c3                   	ret    

c001189b <KeCheckSignal(SigHandlerBlock*, int*)>:
c001189b:	55                   	push   ebp
c001189c:	57                   	push   edi
c001189d:	56                   	push   esi
c001189e:	53                   	push   ebx
c001189f:	51                   	push   ecx
c00118a0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00118a4:	85 db                	test   ebx,ebx
c00118a6:	0f 84 bc 00 00 00    	je     c0011968 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00118ac:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00118b3:	0f 84 af 00 00 00    	je     c0011968 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00118b9:	31 c9                	xor    ecx,ecx
c00118bb:	bf 08 00 00 00       	mov    edi,0x8
c00118c0:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00118c6:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00118c9:	99                   	cdq    
c00118ca:	f7 ff                	idiv   edi
c00118cc:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00118d3:	85 ed                	test   ebp,ebp
c00118d5:	0f 84 9e 00 00 00    	je     c0011979 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00118db:	89 e9                	mov    ecx,ebp
c00118dd:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00118e3:	bf 01 00 00 00       	mov    edi,0x1
c00118e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00118eb:	d3 e7                	shl    edi,cl
c00118ed:	31 c9                	xor    ecx,ecx
c00118ef:	b8 01 00 00 00       	mov    eax,0x1
c00118f4:	d3 e0                	shl    eax,cl
c00118f6:	85 04 24             	test   DWORD PTR [esp],eax
c00118f9:	74 06                	je     c0011901 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c00118fb:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00118ff:	75 67                	jne    c0011968 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011901:	41                   	inc    ecx
c0011902:	83 f9 11             	cmp    ecx,0x11
c0011905:	75 e8                	jne    c00118ef <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011907:	46                   	inc    esi
c0011908:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001190b:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011911:	09 f8                	or     eax,edi
c0011913:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c001191e:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011924:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c001192b:	31 c0                	xor    eax,eax
c001192d:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011935:	74 09                	je     c0011940 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011937:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001193e:	eb 06                	jmp    c0011946 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011940:	40                   	inc    eax
c0011941:	83 f8 08             	cmp    eax,0x8
c0011944:	75 e7                	jne    c001192d <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011946:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011949:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001194d:	83 fd 09             	cmp    ebp,0x9
c0011950:	89 2a                	mov    DWORD PTR [edx],ebp
c0011952:	75 07                	jne    c001195b <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011954:	b8 24 17 01 c0       	mov    eax,0xc0011724
c0011959:	eb 31                	jmp    c001198c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001195b:	83 f8 01             	cmp    eax,0x1
c001195e:	75 0c                	jne    c001196c <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011960:	f7 d7                	not    edi
c0011962:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011968:	31 c0                	xor    eax,eax
c001196a:	eb 20                	jmp    c001198c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001196c:	85 c0                	test   eax,eax
c001196e:	75 1c                	jne    c001198c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011970:	8b 04 ad 20 35 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdcae0]
c0011977:	eb 13                	jmp    c001198c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011979:	46                   	inc    esi
c001197a:	41                   	inc    ecx
c001197b:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011981:	83 f9 08             	cmp    ecx,0x8
c0011984:	0f 85 36 ff ff ff    	jne    c00118c0 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c001198a:	eb dc                	jmp    c0011968 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001198c:	5a                   	pop    edx
c001198d:	5b                   	pop    ebx
c001198e:	5e                   	pop    esi
c001198f:	5f                   	pop    edi
c0011990:	5d                   	pop    ebp
c0011991:	c3                   	ret    

c0011992 <KiCheckSignalZ>:
c0011992:	83 ec 10             	sub    esp,0x10
c0011995:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011999:	50                   	push   eax
c001199a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001199f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119a2:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00119a8:	e8 ee fe ff ff       	call   c001189b <KeCheckSignal(SigHandlerBlock*, int*)>
c00119ad:	5a                   	pop    edx
c00119ae:	31 d2                	xor    edx,edx
c00119b0:	59                   	pop    ecx
c00119b1:	85 c0                	test   eax,eax
c00119b3:	74 19                	je     c00119ce <KiCheckSignalZ+0x3c>
c00119b5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00119bb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00119be:	89 02                	mov    DWORD PTR [edx],eax
c00119c0:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00119c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119cb:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00119ce:	89 d0                	mov    eax,edx
c00119d0:	83 c4 10             	add    esp,0x10
c00119d3:	c3                   	ret    

c00119d4 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00119d4:	56                   	push   esi
c00119d5:	53                   	push   ebx
c00119d6:	bb 01 00 00 00       	mov    ebx,0x1
c00119db:	52                   	push   edx
c00119dc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00119e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00119e4:	d3 e3                	shl    ebx,cl
c00119e6:	83 f9 10             	cmp    ecx,0x10
c00119e9:	7f 08                	jg     c00119f3 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00119eb:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00119f1:	75 10                	jne    c0011a03 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00119f3:	83 ec 0c             	sub    esp,0xc
c00119f6:	68 35 21 02 c0       	push   0xc0022135
c00119fb:	e8 7d f9 ff ff       	call   c001137d <KePanic(char const*)>
c0011a00:	83 c4 10             	add    esp,0x10
c0011a03:	f7 d3                	not    ebx
c0011a05:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011a0b:	58                   	pop    eax
c0011a0c:	5b                   	pop    ebx
c0011a0d:	5e                   	pop    esi
c0011a0e:	c3                   	ret    

c0011a0f <KiFinishSignalZ>:
c0011a0f:	53                   	push   ebx
c0011a10:	83 ec 10             	sub    esp,0x10
c0011a13:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011a17:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011a1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a1f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a22:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011a28:	e8 a7 ff ff ff       	call   c00119d4 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011a2d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011a33:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011a3a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011a41:	83 c4 18             	add    esp,0x18
c0011a44:	5b                   	pop    ebx
c0011a45:	c3                   	ret    

c0011a46 <SysSeekDir(regs*)>:
c0011a46:	31 c0                	xor    eax,eax
c0011a48:	31 d2                	xor    edx,edx
c0011a4a:	c3                   	ret    

c0011a4b <SysTellDir(regs*)>:
c0011a4b:	31 c0                	xor    eax,eax
c0011a4d:	31 d2                	xor    edx,edx
c0011a4f:	c3                   	ret    

c0011a50 <SysVerify(regs*)>:
c0011a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a54:	31 d2                	xor    edx,edx
c0011a56:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a59:	c3                   	ret    

c0011a5a <SysGetArgc(regs*)>:
c0011a5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a5f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a62:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011a68:	89 c2                	mov    edx,eax
c0011a6a:	c1 fa 1f             	sar    edx,0x1f
c0011a6d:	c3                   	ret    

c0011a6e <SysTTYName(regs*)>:
c0011a6e:	b8 01 00 00 00       	mov    eax,0x1
c0011a73:	31 d2                	xor    edx,edx
c0011a75:	c3                   	ret    

c0011a76 <SysFormatDisk(regs*)>:
c0011a76:	56                   	push   esi
c0011a77:	53                   	push   ebx
c0011a78:	83 ec 04             	sub    esp,0x4
c0011a7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011a7f:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c0011a85:	eb 28                	jmp    c0011aaf <SysFormatDisk(regs*)+0x39>
c0011a87:	83 ec 0c             	sub    esp,0xc
c0011a8a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011a8d:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011a90:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011a92:	51                   	push   ecx
c0011a93:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011a96:	51                   	push   ecx
c0011a97:	50                   	push   eax
c0011a98:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0011a9f:	50                   	push   eax
c0011aa0:	53                   	push   ebx
c0011aa1:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011aa4:	83 c4 20             	add    esp,0x20
c0011aa7:	83 f8 08             	cmp    eax,0x8
c0011aaa:	75 14                	jne    c0011ac0 <SysFormatDisk(regs*)+0x4a>
c0011aac:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011aaf:	85 db                	test   ebx,ebx
c0011ab1:	75 d4                	jne    c0011a87 <SysFormatDisk(regs*)+0x11>
c0011ab3:	83 c4 04             	add    esp,0x4
c0011ab6:	b8 03 00 00 00       	mov    eax,0x3
c0011abb:	31 d2                	xor    edx,edx
c0011abd:	5b                   	pop    ebx
c0011abe:	5e                   	pop    esi
c0011abf:	c3                   	ret    
c0011ac0:	85 c0                	test   eax,eax
c0011ac2:	74 1f                	je     c0011ae3 <SysFormatDisk(regs*)+0x6d>
c0011ac4:	83 f8 09             	cmp    eax,0x9
c0011ac7:	74 0d                	je     c0011ad6 <SysFormatDisk(regs*)+0x60>
c0011ac9:	83 c4 04             	add    esp,0x4
c0011acc:	b8 02 00 00 00       	mov    eax,0x2
c0011ad1:	31 d2                	xor    edx,edx
c0011ad3:	5b                   	pop    ebx
c0011ad4:	5e                   	pop    esi
c0011ad5:	c3                   	ret    
c0011ad6:	83 c4 04             	add    esp,0x4
c0011ad9:	b8 01 00 00 00       	mov    eax,0x1
c0011ade:	31 d2                	xor    edx,edx
c0011ae0:	5b                   	pop    ebx
c0011ae1:	5e                   	pop    esi
c0011ae2:	c3                   	ret    
c0011ae3:	83 c4 04             	add    esp,0x4
c0011ae6:	31 c0                	xor    eax,eax
c0011ae8:	31 d2                	xor    edx,edx
c0011aea:	5b                   	pop    ebx
c0011aeb:	5e                   	pop    esi
c0011aec:	c3                   	ret    

c0011aed <SysSetDiskVolumeLabel(regs*)>:
c0011aed:	56                   	push   esi
c0011aee:	53                   	push   ebx
c0011aef:	83 ec 04             	sub    esp,0x4
c0011af2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011af6:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011af9:	83 f8 19             	cmp    eax,0x19
c0011afc:	77 33                	ja     c0011b31 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011afe:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0011b05:	85 c9                	test   ecx,ecx
c0011b07:	74 28                	je     c0011b31 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011b09:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011b0c:	85 db                	test   ebx,ebx
c0011b0e:	74 21                	je     c0011b31 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011b10:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011b16:	85 d2                	test   edx,edx
c0011b18:	74 17                	je     c0011b31 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011b1a:	8b 32                	mov    esi,DWORD PTR [edx]
c0011b1c:	53                   	push   ebx
c0011b1d:	50                   	push   eax
c0011b1e:	51                   	push   ecx
c0011b1f:	52                   	push   edx
c0011b20:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011b23:	83 c4 10             	add    esp,0x10
c0011b26:	89 c2                	mov    edx,eax
c0011b28:	83 c4 04             	add    esp,0x4
c0011b2b:	c1 fa 1f             	sar    edx,0x1f
c0011b2e:	5b                   	pop    ebx
c0011b2f:	5e                   	pop    esi
c0011b30:	c3                   	ret    
c0011b31:	83 c4 04             	add    esp,0x4
c0011b34:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011b39:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b3e:	5b                   	pop    ebx
c0011b3f:	5e                   	pop    esi
c0011b40:	c3                   	ret    

c0011b41 <SysGetDiskVolumeLabel(regs*)>:
c0011b41:	57                   	push   edi
c0011b42:	56                   	push   esi
c0011b43:	53                   	push   ebx
c0011b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b48:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011b4b:	83 fa 19             	cmp    edx,0x19
c0011b4e:	77 3c                	ja     c0011b8c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b50:	8b 0c 95 80 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7780]
c0011b57:	85 c9                	test   ecx,ecx
c0011b59:	74 31                	je     c0011b8c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b5b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011b5e:	85 db                	test   ebx,ebx
c0011b60:	74 2a                	je     c0011b8c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b62:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011b65:	85 f6                	test   esi,esi
c0011b67:	74 23                	je     c0011b8c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b69:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011b6f:	85 c0                	test   eax,eax
c0011b71:	74 19                	je     c0011b8c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011b73:	83 ec 0c             	sub    esp,0xc
c0011b76:	8b 38                	mov    edi,DWORD PTR [eax]
c0011b78:	56                   	push   esi
c0011b79:	53                   	push   ebx
c0011b7a:	52                   	push   edx
c0011b7b:	51                   	push   ecx
c0011b7c:	50                   	push   eax
c0011b7d:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011b80:	83 c4 20             	add    esp,0x20
c0011b83:	89 c2                	mov    edx,eax
c0011b85:	5b                   	pop    ebx
c0011b86:	c1 fa 1f             	sar    edx,0x1f
c0011b89:	5e                   	pop    esi
c0011b8a:	5f                   	pop    edi
c0011b8b:	c3                   	ret    
c0011b8c:	5b                   	pop    ebx
c0011b8d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011b92:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b97:	5e                   	pop    esi
c0011b98:	5f                   	pop    edi
c0011b99:	c3                   	ret    

c0011b9a <SysShutdown(regs*)>:
c0011b9a:	83 ec 0c             	sub    esp,0xc
c0011b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ba1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ba4:	85 c0                	test   eax,eax
c0011ba6:	74 18                	je     c0011bc0 <SysShutdown(regs*)+0x26>
c0011ba8:	83 f8 01             	cmp    eax,0x1
c0011bab:	74 38                	je     c0011be5 <SysShutdown(regs*)+0x4b>
c0011bad:	83 f8 02             	cmp    eax,0x2
c0011bb0:	74 24                	je     c0011bd6 <SysShutdown(regs*)+0x3c>
c0011bb2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bb7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bbc:	83 c4 0c             	add    esp,0xc
c0011bbf:	c3                   	ret    
c0011bc0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011bc5:	8b 10                	mov    edx,DWORD PTR [eax]
c0011bc7:	6a 00                	push   0x0
c0011bc9:	6a 00                	push   0x0
c0011bcb:	6a 00                	push   0x0
c0011bcd:	50                   	push   eax
c0011bce:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011bd1:	83 c4 10             	add    esp,0x10
c0011bd4:	eb dc                	jmp    c0011bb2 <SysShutdown(regs*)+0x18>
c0011bd6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011bdb:	8b 10                	mov    edx,DWORD PTR [eax]
c0011bdd:	6a 00                	push   0x0
c0011bdf:	6a 00                	push   0x0
c0011be1:	6a 01                	push   0x1
c0011be3:	eb e8                	jmp    c0011bcd <SysShutdown(regs*)+0x33>
c0011be5:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c0011bea:	85 c0                	test   eax,eax
c0011bec:	74 02                	je     c0011bf0 <SysShutdown(regs*)+0x56>
c0011bee:	ff d0                	call   eax
c0011bf0:	31 c0                	xor    eax,eax
c0011bf2:	31 d2                	xor    edx,edx
c0011bf4:	83 c4 0c             	add    esp,0xc
c0011bf7:	c3                   	ret    

c0011bf8 <SysRealpath(regs*)>:
c0011bf8:	83 ec 0c             	sub    esp,0xc
c0011bfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bff:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011c02:	85 d2                	test   edx,edx
c0011c04:	74 07                	je     c0011c0d <SysRealpath(regs*)+0x15>
c0011c06:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011c09:	85 c0                	test   eax,eax
c0011c0b:	75 0b                	jne    c0011c18 <SysRealpath(regs*)+0x20>
c0011c0d:	b8 01 00 00 00       	mov    eax,0x1
c0011c12:	31 d2                	xor    edx,edx
c0011c14:	83 c4 0c             	add    esp,0xc
c0011c17:	c3                   	ret    
c0011c18:	6a 00                	push   0x0
c0011c1a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011c20:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011c23:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011c29:	51                   	push   ecx
c0011c2a:	52                   	push   edx
c0011c2b:	50                   	push   eax
c0011c2c:	e8 bd 99 ff ff       	call   c000b5ee <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011c31:	83 c4 10             	add    esp,0x10
c0011c34:	31 c0                	xor    eax,eax
c0011c36:	31 d2                	xor    edx,edx
c0011c38:	83 c4 0c             	add    esp,0xc
c0011c3b:	c3                   	ret    

c0011c3c <SysReadDir(regs*)>:
c0011c3c:	53                   	push   ebx
c0011c3d:	83 ec 18             	sub    esp,0x18
c0011c40:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c44:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011c47:	83 f8 02             	cmp    eax,0x2
c0011c4a:	76 61                	jbe    c0011cad <SysReadDir(regs*)+0x71>
c0011c4c:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011c53:	77 49                	ja     c0011c9e <SysReadDir(regs*)+0x62>
c0011c55:	83 ec 0c             	sub    esp,0xc
c0011c58:	50                   	push   eax
c0011c59:	e8 55 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011c5e:	83 c4 10             	add    esp,0x10
c0011c61:	85 c0                	test   eax,eax
c0011c63:	74 39                	je     c0011c9e <SysReadDir(regs*)+0x62>
c0011c65:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c6d:	83 ec 0c             	sub    esp,0xc
c0011c70:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c72:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011c76:	51                   	push   ecx
c0011c77:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011c7a:	51                   	push   ecx
c0011c7b:	6a 00                	push   0x0
c0011c7d:	68 10 01 00 00       	push   0x110
c0011c82:	50                   	push   eax
c0011c83:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011c86:	83 c4 20             	add    esp,0x20
c0011c89:	85 c0                	test   eax,eax
c0011c8b:	74 29                	je     c0011cb6 <SysReadDir(regs*)+0x7a>
c0011c8d:	83 f8 07             	cmp    eax,0x7
c0011c90:	74 1b                	je     c0011cad <SysReadDir(regs*)+0x71>
c0011c92:	b8 02 00 00 00       	mov    eax,0x2
c0011c97:	31 d2                	xor    edx,edx
c0011c99:	83 c4 18             	add    esp,0x18
c0011c9c:	5b                   	pop    ebx
c0011c9d:	c3                   	ret    
c0011c9e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ca3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ca8:	83 c4 18             	add    esp,0x18
c0011cab:	5b                   	pop    ebx
c0011cac:	c3                   	ret    
c0011cad:	b8 01 00 00 00       	mov    eax,0x1
c0011cb2:	31 d2                	xor    edx,edx
c0011cb4:	eb e3                	jmp    c0011c99 <SysReadDir(regs*)+0x5d>
c0011cb6:	31 c0                	xor    eax,eax
c0011cb8:	31 d2                	xor    edx,edx
c0011cba:	eb dd                	jmp    c0011c99 <SysReadDir(regs*)+0x5d>

c0011cbc <SysIsATTY(regs*)>:
c0011cbc:	83 ec 0c             	sub    esp,0xc
c0011cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cc3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011cc6:	83 f8 02             	cmp    eax,0x2
c0011cc9:	76 07                	jbe    c0011cd2 <SysIsATTY(regs*)+0x16>
c0011ccb:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011cd0:	75 26                	jne    c0011cf8 <SysIsATTY(regs*)+0x3c>
c0011cd2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cd7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cda:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011ce0:	85 c0                	test   eax,eax
c0011ce2:	74 24                	je     c0011d08 <SysIsATTY(regs*)+0x4c>
c0011ce4:	83 ec 0c             	sub    esp,0xc
c0011ce7:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ce9:	50                   	push   eax
c0011cea:	ff 12                	call   DWORD PTR [edx]
c0011cec:	31 d2                	xor    edx,edx
c0011cee:	0f b6 c0             	movzx  eax,al
c0011cf1:	83 c4 10             	add    esp,0x10
c0011cf4:	83 c4 0c             	add    esp,0xc
c0011cf7:	c3                   	ret    
c0011cf8:	83 ec 0c             	sub    esp,0xc
c0011cfb:	50                   	push   eax
c0011cfc:	e8 b2 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011d01:	83 c4 10             	add    esp,0x10
c0011d04:	85 c0                	test   eax,eax
c0011d06:	75 dc                	jne    c0011ce4 <SysIsATTY(regs*)+0x28>
c0011d08:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d0d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d12:	83 c4 0c             	add    esp,0xc
c0011d15:	c3                   	ret    

c0011d16 <SysSeek(regs*)>:
c0011d16:	53                   	push   ebx
c0011d17:	83 ec 08             	sub    esp,0x8
c0011d1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d1e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d21:	8d 50 fd             	lea    edx,[eax-0x3]
c0011d24:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011d2a:	77 32                	ja     c0011d5e <SysSeek(regs*)+0x48>
c0011d2c:	83 ec 0c             	sub    esp,0xc
c0011d2f:	50                   	push   eax
c0011d30:	e8 7e 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011d35:	83 c4 0c             	add    esp,0xc
c0011d38:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011d3b:	31 db                	xor    ebx,ebx
c0011d3d:	53                   	push   ebx
c0011d3e:	51                   	push   ecx
c0011d3f:	50                   	push   eax
c0011d40:	e8 6d 9c ff ff       	call   c000b9b2 <File::seek(unsigned long long)>
c0011d45:	83 c4 10             	add    esp,0x10
c0011d48:	85 c0                	test   eax,eax
c0011d4a:	0f 95 c0             	setne  al
c0011d4d:	31 d2                	xor    edx,edx
c0011d4f:	0f b6 c0             	movzx  eax,al
c0011d52:	f7 d8                	neg    eax
c0011d54:	83 d2 00             	adc    edx,0x0
c0011d57:	83 c4 08             	add    esp,0x8
c0011d5a:	f7 da                	neg    edx
c0011d5c:	5b                   	pop    ebx
c0011d5d:	c3                   	ret    
c0011d5e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d63:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d68:	83 c4 08             	add    esp,0x8
c0011d6b:	5b                   	pop    ebx
c0011d6c:	c3                   	ret    

c0011d6d <SysTell(regs*)>:
c0011d6d:	53                   	push   ebx
c0011d6e:	83 ec 08             	sub    esp,0x8
c0011d71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d75:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d78:	83 f8 02             	cmp    eax,0x2
c0011d7b:	76 4e                	jbe    c0011dcb <SysTell(regs*)+0x5e>
c0011d7d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d82:	76 19                	jbe    c0011d9d <SysTell(regs*)+0x30>
c0011d84:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011d87:	31 d2                	xor    edx,edx
c0011d89:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d8f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d96:	31 c0                	xor    eax,eax
c0011d98:	83 c4 08             	add    esp,0x8
c0011d9b:	5b                   	pop    ebx
c0011d9c:	c3                   	ret    
c0011d9d:	83 ec 0c             	sub    esp,0xc
c0011da0:	50                   	push   eax
c0011da1:	e8 0d 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011da6:	5a                   	pop    edx
c0011da7:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011daa:	59                   	pop    ecx
c0011dab:	53                   	push   ebx
c0011dac:	50                   	push   eax
c0011dad:	e8 ac 9c ff ff       	call   c000ba5e <File::tell(unsigned long long*)>
c0011db2:	83 c4 10             	add    esp,0x10
c0011db5:	85 c0                	test   eax,eax
c0011db7:	0f 95 c0             	setne  al
c0011dba:	31 d2                	xor    edx,edx
c0011dbc:	0f b6 c0             	movzx  eax,al
c0011dbf:	f7 d8                	neg    eax
c0011dc1:	83 d2 00             	adc    edx,0x0
c0011dc4:	83 c4 08             	add    esp,0x8
c0011dc7:	f7 da                	neg    edx
c0011dc9:	5b                   	pop    ebx
c0011dca:	c3                   	ret    
c0011dcb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011dd0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011dd5:	83 c4 08             	add    esp,0x8
c0011dd8:	5b                   	pop    ebx
c0011dd9:	c3                   	ret    

c0011dda <SysSize(regs*)>:
c0011dda:	53                   	push   ebx
c0011ddb:	83 ec 18             	sub    esp,0x18
c0011dde:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011de2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011de5:	83 f8 02             	cmp    eax,0x2
c0011de8:	76 54                	jbe    c0011e3e <SysSize(regs*)+0x64>
c0011dea:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011def:	76 19                	jbe    c0011e0a <SysSize(regs*)+0x30>
c0011df1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011df4:	31 d2                	xor    edx,edx
c0011df6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011dfc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e03:	31 c0                	xor    eax,eax
c0011e05:	83 c4 18             	add    esp,0x18
c0011e08:	5b                   	pop    ebx
c0011e09:	c3                   	ret    
c0011e0a:	83 ec 0c             	sub    esp,0xc
c0011e0d:	50                   	push   eax
c0011e0e:	e8 a0 76 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011e13:	83 c4 0c             	add    esp,0xc
c0011e16:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011e1a:	52                   	push   edx
c0011e1b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e1e:	52                   	push   edx
c0011e1f:	50                   	push   eax
c0011e20:	e8 d1 9d ff ff       	call   c000bbf6 <File::stat(unsigned long long*, bool*)>
c0011e25:	83 c4 10             	add    esp,0x10
c0011e28:	85 c0                	test   eax,eax
c0011e2a:	0f 95 c0             	setne  al
c0011e2d:	31 d2                	xor    edx,edx
c0011e2f:	0f b6 c0             	movzx  eax,al
c0011e32:	f7 d8                	neg    eax
c0011e34:	83 d2 00             	adc    edx,0x0
c0011e37:	83 c4 18             	add    esp,0x18
c0011e3a:	f7 da                	neg    edx
c0011e3c:	5b                   	pop    ebx
c0011e3d:	c3                   	ret    
c0011e3e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e43:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e48:	83 c4 18             	add    esp,0x18
c0011e4b:	5b                   	pop    ebx
c0011e4c:	c3                   	ret    

c0011e4d <SysSizeFromFilename(regs*)>:
c0011e4d:	55                   	push   ebp
c0011e4e:	57                   	push   edi
c0011e4f:	56                   	push   esi
c0011e50:	53                   	push   ebx
c0011e51:	81 ec 3c 01 00 00    	sub    esp,0x13c
c0011e57:	8b 9c 24 50 01 00 00 	mov    ebx,DWORD PTR [esp+0x150]
c0011e5e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011e61:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011e64:	85 f6                	test   esi,esi
c0011e66:	74 34                	je     c0011e9c <SysSizeFromFilename(regs*)+0x4f>
c0011e68:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011e6e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011e71:	83 f8 02             	cmp    eax,0x2
c0011e74:	76 2d                	jbe    c0011ea3 <SysSizeFromFilename(regs*)+0x56>
c0011e76:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011e7b:	76 3b                	jbe    c0011eb8 <SysSizeFromFilename(regs*)+0x6b>
c0011e7d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011e80:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011e86:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e8d:	81 c4 3c 01 00 00    	add    esp,0x13c
c0011e93:	31 c0                	xor    eax,eax
c0011e95:	5b                   	pop    ebx
c0011e96:	31 d2                	xor    edx,edx
c0011e98:	5e                   	pop    esi
c0011e99:	5f                   	pop    edi
c0011e9a:	5d                   	pop    ebp
c0011e9b:	c3                   	ret    
c0011e9c:	89 f8                	mov    eax,edi
c0011e9e:	83 f8 02             	cmp    eax,0x2
c0011ea1:	77 d3                	ja     c0011e76 <SysSizeFromFilename(regs*)+0x29>
c0011ea3:	81 c4 3c 01 00 00    	add    esp,0x13c
c0011ea9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011eae:	5b                   	pop    ebx
c0011eaf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011eb4:	5e                   	pop    esi
c0011eb5:	5f                   	pop    edi
c0011eb6:	5d                   	pop    ebp
c0011eb7:	c3                   	ret    
c0011eb8:	83 ec 0c             	sub    esp,0xc
c0011ebb:	68 14 01 00 00       	push   0x114
c0011ec0:	e8 f1 5b ff ff       	call   c0007ab6 <malloc>
c0011ec5:	6a 01                	push   0x1
c0011ec7:	89 c5                	mov    ebp,eax
c0011ec9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ece:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ed1:	50                   	push   eax
c0011ed2:	57                   	push   edi
c0011ed3:	55                   	push   ebp
c0011ed4:	e8 1f 99 ff ff       	call   c000b7f8 <File::File(char const*, Process*, bool)>
c0011ed9:	83 c4 1c             	add    esp,0x1c
c0011edc:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0011ee0:	50                   	push   eax
c0011ee1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011ee4:	52                   	push   edx
c0011ee5:	55                   	push   ebp
c0011ee6:	e8 0b 9d ff ff       	call   c000bbf6 <File::stat(unsigned long long*, bool*)>
c0011eeb:	83 c4 10             	add    esp,0x10
c0011eee:	85 ed                	test   ebp,ebp
c0011ef0:	74 15                	je     c0011f07 <SysSizeFromFilename(regs*)+0xba>
c0011ef2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ef6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0011ef9:	83 ec 0c             	sub    esp,0xc
c0011efc:	55                   	push   ebp
c0011efd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011f00:	83 c4 10             	add    esp,0x10
c0011f03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f07:	85 c0                	test   eax,eax
c0011f09:	75 98                	jne    c0011ea3 <SysSizeFromFilename(regs*)+0x56>
c0011f0b:	83 ec 08             	sub    esp,0x8
c0011f0e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011f12:	50                   	push   eax
c0011f13:	57                   	push   edi
c0011f14:	e8 32 90 ff ff       	call   c000af4b <KeDereferenceSymlink(char const*, char*)>
c0011f19:	83 c4 10             	add    esp,0x10
c0011f1c:	83 f8 01             	cmp    eax,0x1
c0011f1f:	74 1a                	je     c0011f3b <SysSizeFromFilename(regs*)+0xee>
c0011f21:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0011f26:	74 26                	je     c0011f4e <SysSizeFromFilename(regs*)+0x101>
c0011f28:	85 f6                	test   esi,esi
c0011f2a:	0f 84 5d ff ff ff    	je     c0011e8d <SysSizeFromFilename(regs*)+0x40>
c0011f30:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011f36:	e9 52 ff ff ff       	jmp    c0011e8d <SysSizeFromFilename(regs*)+0x40>
c0011f3b:	85 f6                	test   esi,esi
c0011f3d:	0f 84 4a ff ff ff    	je     c0011e8d <SysSizeFromFilename(regs*)+0x40>
c0011f43:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011f49:	e9 3f ff ff ff       	jmp    c0011e8d <SysSizeFromFilename(regs*)+0x40>
c0011f4e:	85 f6                	test   esi,esi
c0011f50:	0f 84 37 ff ff ff    	je     c0011e8d <SysSizeFromFilename(regs*)+0x40>
c0011f56:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011f5c:	e9 2c ff ff ff       	jmp    c0011e8d <SysSizeFromFilename(regs*)+0x40>

c0011f61 <SysSizeFromFilenameNoSymlink(regs*)>:
c0011f61:	55                   	push   ebp
c0011f62:	57                   	push   edi
c0011f63:	56                   	push   esi
c0011f64:	53                   	push   ebx
c0011f65:	81 ec 3c 01 00 00    	sub    esp,0x13c
c0011f6b:	8b 9c 24 50 01 00 00 	mov    ebx,DWORD PTR [esp+0x150]
c0011f72:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011f75:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011f78:	85 f6                	test   esi,esi
c0011f7a:	74 34                	je     c0011fb0 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0011f7c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011f82:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f85:	83 f8 02             	cmp    eax,0x2
c0011f88:	76 2d                	jbe    c0011fb7 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0011f8a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011f8f:	76 3b                	jbe    c0011fcc <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0011f91:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011f94:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011f9a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fa1:	81 c4 3c 01 00 00    	add    esp,0x13c
c0011fa7:	31 c0                	xor    eax,eax
c0011fa9:	5b                   	pop    ebx
c0011faa:	31 d2                	xor    edx,edx
c0011fac:	5e                   	pop    esi
c0011fad:	5f                   	pop    edi
c0011fae:	5d                   	pop    ebp
c0011faf:	c3                   	ret    
c0011fb0:	89 f8                	mov    eax,edi
c0011fb2:	83 f8 02             	cmp    eax,0x2
c0011fb5:	77 d3                	ja     c0011f8a <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0011fb7:	81 c4 3c 01 00 00    	add    esp,0x13c
c0011fbd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fc2:	5b                   	pop    ebx
c0011fc3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fc8:	5e                   	pop    esi
c0011fc9:	5f                   	pop    edi
c0011fca:	5d                   	pop    ebp
c0011fcb:	c3                   	ret    
c0011fcc:	83 ec 0c             	sub    esp,0xc
c0011fcf:	68 14 01 00 00       	push   0x114
c0011fd4:	e8 dd 5a ff ff       	call   c0007ab6 <malloc>
c0011fd9:	6a 00                	push   0x0
c0011fdb:	89 c5                	mov    ebp,eax
c0011fdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fe2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fe5:	50                   	push   eax
c0011fe6:	57                   	push   edi
c0011fe7:	55                   	push   ebp
c0011fe8:	e8 0b 98 ff ff       	call   c000b7f8 <File::File(char const*, Process*, bool)>
c0011fed:	83 c4 1c             	add    esp,0x1c
c0011ff0:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0011ff4:	50                   	push   eax
c0011ff5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011ff8:	52                   	push   edx
c0011ff9:	55                   	push   ebp
c0011ffa:	e8 f7 9b ff ff       	call   c000bbf6 <File::stat(unsigned long long*, bool*)>
c0011fff:	83 c4 10             	add    esp,0x10
c0012002:	85 ed                	test   ebp,ebp
c0012004:	74 15                	je     c001201b <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c0012006:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001200a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001200d:	83 ec 0c             	sub    esp,0xc
c0012010:	55                   	push   ebp
c0012011:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012014:	83 c4 10             	add    esp,0x10
c0012017:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001201b:	85 c0                	test   eax,eax
c001201d:	75 98                	jne    c0011fb7 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c001201f:	83 ec 08             	sub    esp,0x8
c0012022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012026:	50                   	push   eax
c0012027:	57                   	push   edi
c0012028:	e8 1e 8f ff ff       	call   c000af4b <KeDereferenceSymlink(char const*, char*)>
c001202d:	83 c4 10             	add    esp,0x10
c0012030:	83 f8 01             	cmp    eax,0x1
c0012033:	74 1a                	je     c001204f <SysSizeFromFilenameNoSymlink(regs*)+0xee>
c0012035:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001203a:	74 26                	je     c0012062 <SysSizeFromFilenameNoSymlink(regs*)+0x101>
c001203c:	85 f6                	test   esi,esi
c001203e:	0f 84 5d ff ff ff    	je     c0011fa1 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012044:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001204a:	e9 52 ff ff ff       	jmp    c0011fa1 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001204f:	85 f6                	test   esi,esi
c0012051:	0f 84 4a ff ff ff    	je     c0011fa1 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012057:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001205d:	e9 3f ff ff ff       	jmp    c0011fa1 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012062:	85 f6                	test   esi,esi
c0012064:	0f 84 37 ff ff ff    	je     c0011fa1 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001206a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012070:	e9 2c ff ff ff       	jmp    c0011fa1 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0012075 <SysClose(regs*)>:
c0012075:	53                   	push   ebx
c0012076:	83 ec 08             	sub    esp,0x8
c0012079:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001207d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012080:	83 f8 02             	cmp    eax,0x2
c0012083:	76 41                	jbe    c00120c6 <SysClose(regs*)+0x51>
c0012085:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001208b:	83 fa 01             	cmp    edx,0x1
c001208e:	76 2d                	jbe    c00120bd <SysClose(regs*)+0x48>
c0012090:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012095:	77 2f                	ja     c00120c6 <SysClose(regs*)+0x51>
c0012097:	83 ec 0c             	sub    esp,0xc
c001209a:	50                   	push   eax
c001209b:	e8 13 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00120a0:	89 c3                	mov    ebx,eax
c00120a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00120a5:	e8 a8 98 ff ff       	call   c000b952 <File::close()>
c00120aa:	83 c4 10             	add    esp,0x10
c00120ad:	85 db                	test   ebx,ebx
c00120af:	74 0c                	je     c00120bd <SysClose(regs*)+0x48>
c00120b1:	83 ec 0c             	sub    esp,0xc
c00120b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120b6:	53                   	push   ebx
c00120b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00120ba:	83 c4 10             	add    esp,0x10
c00120bd:	31 c0                	xor    eax,eax
c00120bf:	31 d2                	xor    edx,edx
c00120c1:	83 c4 08             	add    esp,0x8
c00120c4:	5b                   	pop    ebx
c00120c5:	c3                   	ret    
c00120c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120d0:	83 c4 08             	add    esp,0x8
c00120d3:	5b                   	pop    ebx
c00120d4:	c3                   	ret    

c00120d5 <SysOpenDir(regs*)>:
c00120d5:	56                   	push   esi
c00120d6:	53                   	push   ebx
c00120d7:	83 ec 04             	sub    esp,0x4
c00120da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120de:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00120e1:	85 c9                	test   ecx,ecx
c00120e3:	74 5d                	je     c0012142 <SysOpenDir(regs*)+0x6d>
c00120e5:	83 ec 0c             	sub    esp,0xc
c00120e8:	68 14 01 00 00       	push   0x114
c00120ed:	e8 c4 59 ff ff       	call   c0007ab6 <malloc>
c00120f2:	83 c4 0c             	add    esp,0xc
c00120f5:	89 c6                	mov    esi,eax
c00120f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120fc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120ff:	50                   	push   eax
c0012100:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012103:	52                   	push   edx
c0012104:	56                   	push   esi
c0012105:	e8 ac 9c ff ff       	call   c000bdb6 <Directory::Directory(char const*, Process*)>
c001210a:	83 c4 10             	add    esp,0x10
c001210d:	85 f6                	test   esi,esi
c001210f:	74 31                	je     c0012142 <SysOpenDir(regs*)+0x6d>
c0012111:	83 ec 0c             	sub    esp,0xc
c0012114:	56                   	push   esi
c0012115:	e8 64 9d ff ff       	call   c000be7e <Directory::open()>
c001211a:	83 c4 10             	add    esp,0x10
c001211d:	85 c0                	test   eax,eax
c001211f:	75 21                	jne    c0012142 <SysOpenDir(regs*)+0x6d>
c0012121:	83 ec 0c             	sub    esp,0xc
c0012124:	56                   	push   esi
c0012125:	e8 8c 70 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c001212a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001212d:	83 c4 10             	add    esp,0x10
c0012130:	89 02                	mov    DWORD PTR [edx],eax
c0012132:	c1 f8 1f             	sar    eax,0x1f
c0012135:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012138:	83 c4 04             	add    esp,0x4
c001213b:	31 c0                	xor    eax,eax
c001213d:	31 d2                	xor    edx,edx
c001213f:	5b                   	pop    ebx
c0012140:	5e                   	pop    esi
c0012141:	c3                   	ret    
c0012142:	83 c4 04             	add    esp,0x4
c0012145:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001214a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001214f:	5b                   	pop    ebx
c0012150:	5e                   	pop    esi
c0012151:	c3                   	ret    

c0012152 <SysMakeDir(regs*)>:
c0012152:	56                   	push   esi
c0012153:	53                   	push   ebx
c0012154:	83 ec 10             	sub    esp,0x10
c0012157:	68 14 01 00 00       	push   0x114
c001215c:	e8 55 59 ff ff       	call   c0007ab6 <malloc>
c0012161:	83 c4 0c             	add    esp,0xc
c0012164:	89 c3                	mov    ebx,eax
c0012166:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001216b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001216e:	50                   	push   eax
c001216f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012173:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0012176:	52                   	push   edx
c0012177:	53                   	push   ebx
c0012178:	e8 39 9c ff ff       	call   c000bdb6 <Directory::Directory(char const*, Process*)>
c001217d:	83 c4 10             	add    esp,0x10
c0012180:	85 db                	test   ebx,ebx
c0012182:	74 2c                	je     c00121b0 <SysMakeDir(regs*)+0x5e>
c0012184:	83 ec 0c             	sub    esp,0xc
c0012187:	53                   	push   ebx
c0012188:	e8 d1 9e ff ff       	call   c000c05e <Directory::create()>
c001218d:	89 c6                	mov    esi,eax
c001218f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012191:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012194:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012197:	83 c4 10             	add    esp,0x10
c001219a:	31 c0                	xor    eax,eax
c001219c:	85 f6                	test   esi,esi
c001219e:	0f 95 c0             	setne  al
c00121a1:	31 d2                	xor    edx,edx
c00121a3:	f7 d8                	neg    eax
c00121a5:	83 d2 00             	adc    edx,0x0
c00121a8:	83 c4 04             	add    esp,0x4
c00121ab:	f7 da                	neg    edx
c00121ad:	5b                   	pop    ebx
c00121ae:	5e                   	pop    esi
c00121af:	c3                   	ret    
c00121b0:	83 c4 04             	add    esp,0x4
c00121b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00121b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00121bd:	5b                   	pop    ebx
c00121be:	5e                   	pop    esi
c00121bf:	c3                   	ret    

c00121c0 <SysCloseDir(regs*)>:
c00121c0:	53                   	push   ebx
c00121c1:	83 ec 08             	sub    esp,0x8
c00121c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121c8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00121cb:	8d 50 fd             	lea    edx,[eax-0x3]
c00121ce:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00121d4:	77 2f                	ja     c0012205 <SysCloseDir(regs*)+0x45>
c00121d6:	83 ec 0c             	sub    esp,0xc
c00121d9:	50                   	push   eax
c00121da:	e8 d4 72 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00121df:	89 c3                	mov    ebx,eax
c00121e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00121e4:	e8 f1 9c ff ff       	call   c000beda <Directory::close()>
c00121e9:	83 c4 10             	add    esp,0x10
c00121ec:	85 db                	test   ebx,ebx
c00121ee:	74 0c                	je     c00121fc <SysCloseDir(regs*)+0x3c>
c00121f0:	83 ec 0c             	sub    esp,0xc
c00121f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00121f5:	53                   	push   ebx
c00121f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00121f9:	83 c4 10             	add    esp,0x10
c00121fc:	31 c0                	xor    eax,eax
c00121fe:	31 d2                	xor    edx,edx
c0012200:	83 c4 08             	add    esp,0x8
c0012203:	5b                   	pop    ebx
c0012204:	c3                   	ret    
c0012205:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001220a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001220f:	83 c4 08             	add    esp,0x8
c0012212:	5b                   	pop    ebx
c0012213:	c3                   	ret    

c0012214 <SysWait(regs*)>:
c0012214:	83 ec 10             	sub    esp,0x10
c0012217:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001221b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001221e:	52                   	push   edx
c001221f:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0012222:	51                   	push   ecx
c0012223:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012226:	50                   	push   eax
c0012227:	e8 00 3e 00 00       	call   c001602c <waitTask(int, int*, int)>
c001222c:	83 c4 1c             	add    esp,0x1c
c001222f:	89 c2                	mov    edx,eax
c0012231:	c1 fa 1f             	sar    edx,0x1f
c0012234:	c3                   	ret    

c0012235 <SysNotImpl(regs*)>:
c0012235:	83 ec 18             	sub    esp,0x18
c0012238:	68 46 21 02 c0       	push   0xc0022146
c001223d:	e8 3b f1 ff ff       	call   c001137d <KePanic(char const*)>
c0012242:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012247:	ba ff ff ff ff       	mov    edx,0xffffffff
c001224c:	83 c4 1c             	add    esp,0x1c
c001224f:	c3                   	ret    

c0012250 <SysPanic(regs*)>:
c0012250:	83 ec 18             	sub    esp,0x18
c0012253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012257:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001225a:	50                   	push   eax
c001225b:	e8 1d f1 ff ff       	call   c001137d <KePanic(char const*)>
c0012260:	b8 01 00 00 00       	mov    eax,0x1
c0012265:	31 d2                	xor    edx,edx
c0012267:	83 c4 1c             	add    esp,0x1c
c001226a:	c3                   	ret    

c001226b <SysRmdir(regs*)>:
c001226b:	56                   	push   esi
c001226c:	53                   	push   ebx
c001226d:	83 ec 20             	sub    esp,0x20
c0012270:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012274:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012277:	68 14 01 00 00       	push   0x114
c001227c:	e8 35 58 ff ff       	call   c0007ab6 <malloc>
c0012281:	6a 00                	push   0x0
c0012283:	89 c3                	mov    ebx,eax
c0012285:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001228a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001228d:	50                   	push   eax
c001228e:	56                   	push   esi
c001228f:	53                   	push   ebx
c0012290:	e8 63 95 ff ff       	call   c000b7f8 <File::File(char const*, Process*, bool)>
c0012295:	83 c4 14             	add    esp,0x14
c0012298:	53                   	push   ebx
c0012299:	e8 24 98 ff ff       	call   c000bac2 <File::unlink()>
c001229e:	83 c4 10             	add    esp,0x10
c00122a1:	85 db                	test   ebx,ebx
c00122a3:	74 14                	je     c00122b9 <SysRmdir(regs*)+0x4e>
c00122a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122a9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00122ab:	83 ec 0c             	sub    esp,0xc
c00122ae:	53                   	push   ebx
c00122af:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00122b2:	83 c4 10             	add    esp,0x10
c00122b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00122b9:	85 c0                	test   eax,eax
c00122bb:	0f 95 c0             	setne  al
c00122be:	31 d2                	xor    edx,edx
c00122c0:	0f b6 c0             	movzx  eax,al
c00122c3:	f7 d8                	neg    eax
c00122c5:	83 d2 00             	adc    edx,0x0
c00122c8:	83 c4 14             	add    esp,0x14
c00122cb:	f7 da                	neg    edx
c00122cd:	5b                   	pop    ebx
c00122ce:	5e                   	pop    esi
c00122cf:	c3                   	ret    

c00122d0 <SysUnlink(regs*)>:
c00122d0:	56                   	push   esi
c00122d1:	53                   	push   ebx
c00122d2:	83 ec 20             	sub    esp,0x20
c00122d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122d9:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00122dc:	68 14 01 00 00       	push   0x114
c00122e1:	e8 d0 57 ff ff       	call   c0007ab6 <malloc>
c00122e6:	6a 00                	push   0x0
c00122e8:	89 c3                	mov    ebx,eax
c00122ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122ef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122f2:	50                   	push   eax
c00122f3:	56                   	push   esi
c00122f4:	53                   	push   ebx
c00122f5:	e8 fe 94 ff ff       	call   c000b7f8 <File::File(char const*, Process*, bool)>
c00122fa:	83 c4 14             	add    esp,0x14
c00122fd:	53                   	push   ebx
c00122fe:	e8 bf 97 ff ff       	call   c000bac2 <File::unlink()>
c0012303:	83 c4 10             	add    esp,0x10
c0012306:	85 db                	test   ebx,ebx
c0012308:	74 14                	je     c001231e <SysUnlink(regs*)+0x4e>
c001230a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001230e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012310:	83 ec 0c             	sub    esp,0xc
c0012313:	53                   	push   ebx
c0012314:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012317:	83 c4 10             	add    esp,0x10
c001231a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001231e:	85 c0                	test   eax,eax
c0012320:	0f 95 c0             	setne  al
c0012323:	31 d2                	xor    edx,edx
c0012325:	0f b6 c0             	movzx  eax,al
c0012328:	f7 d8                	neg    eax
c001232a:	83 d2 00             	adc    edx,0x0
c001232d:	83 c4 14             	add    esp,0x14
c0012330:	f7 da                	neg    edx
c0012332:	5b                   	pop    ebx
c0012333:	5e                   	pop    esi
c0012334:	c3                   	ret    

c0012335 <SysGetArgv(regs*)>:
c0012335:	83 ec 0c             	sub    esp,0xc
c0012338:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001233c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001233f:	85 c0                	test   eax,eax
c0012341:	78 2c                	js     c001236f <SysGetArgv(regs*)+0x3a>
c0012343:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012349:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001234c:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012352:	7d 1b                	jge    c001236f <SysGetArgv(regs*)+0x3a>
c0012354:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001235b:	85 c0                	test   eax,eax
c001235d:	74 18                	je     c0012377 <SysGetArgv(regs*)+0x42>
c001235f:	83 ec 08             	sub    esp,0x8
c0012362:	50                   	push   eax
c0012363:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012366:	50                   	push   eax
c0012367:	e8 d4 e2 fe ff       	call   c0000640 <strcpy>
c001236c:	83 c4 10             	add    esp,0x10
c001236f:	31 c0                	xor    eax,eax
c0012371:	31 d2                	xor    edx,edx
c0012373:	83 c4 0c             	add    esp,0xc
c0012376:	c3                   	ret    
c0012377:	b8 01 00 00 00       	mov    eax,0x1
c001237c:	31 d2                	xor    edx,edx
c001237e:	83 c4 0c             	add    esp,0xc
c0012381:	c3                   	ret    

c0012382 <SysUSleep(regs*)>:
c0012382:	83 ec 1c             	sub    esp,0x1c
c0012385:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012389:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001238c:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001238f:	6a 00                	push   0x0
c0012391:	6a 64                	push   0x64
c0012393:	52                   	push   edx
c0012394:	50                   	push   eax
c0012395:	e8 b6 d0 00 00       	call   c001f450 <__udivdi3>
c001239a:	83 c4 14             	add    esp,0x14
c001239d:	50                   	push   eax
c001239e:	e8 6d 3d 00 00       	call   c0016110 <milliTenthSleep(unsigned int)>
c00123a3:	31 c0                	xor    eax,eax
c00123a5:	31 d2                	xor    edx,edx
c00123a7:	83 c4 1c             	add    esp,0x1c
c00123aa:	c3                   	ret    

c00123ab <SysSpawn(regs*)>:
c00123ab:	56                   	push   esi
c00123ac:	53                   	push   ebx
c00123ad:	83 ec 04             	sub    esp,0x4
c00123b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123b4:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00123b7:	85 f6                	test   esi,esi
c00123b9:	75 0a                	jne    c00123c5 <SysSpawn(regs*)+0x1a>
c00123bb:	83 c4 04             	add    esp,0x4
c00123be:	31 c0                	xor    eax,eax
c00123c0:	31 d2                	xor    edx,edx
c00123c2:	5b                   	pop    ebx
c00123c3:	5e                   	pop    esi
c00123c4:	c3                   	ret    
c00123c5:	83 ec 0c             	sub    esp,0xc
c00123c8:	68 24 07 00 00       	push   0x724
c00123cd:	e8 e4 56 ff ff       	call   c0007ab6 <malloc>
c00123d2:	83 c4 10             	add    esp,0x10
c00123d5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00123d8:	89 c6                	mov    esi,eax
c00123da:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00123dd:	85 c9                	test   ecx,ecx
c00123df:	75 39                	jne    c001241a <SysSpawn(regs*)+0x6f>
c00123e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123e6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123e9:	52                   	push   edx
c00123ea:	50                   	push   eax
c00123eb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123ee:	50                   	push   eax
c00123ef:	56                   	push   esi
c00123f0:	e8 6b 33 00 00       	call   c0015760 <Process::Process(char const*, Process*, char**)>
c00123f5:	83 c4 10             	add    esp,0x10
c00123f8:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00123ff:	75 ba                	jne    c00123bb <SysSpawn(regs*)+0x10>
c0012401:	83 ec 0c             	sub    esp,0xc
c0012404:	56                   	push   esi
c0012405:	e8 92 38 00 00       	call   c0015c9c <Process::createUserThread()>
c001240a:	8b 06                	mov    eax,DWORD PTR [esi]
c001240c:	83 c4 10             	add    esp,0x10
c001240f:	89 c2                	mov    edx,eax
c0012411:	83 c4 04             	add    esp,0x4
c0012414:	c1 fa 1f             	sar    edx,0x1f
c0012417:	5b                   	pop    ebx
c0012418:	5e                   	pop    esi
c0012419:	c3                   	ret    
c001241a:	31 c0                	xor    eax,eax
c001241c:	eb cb                	jmp    c00123e9 <SysSpawn(regs*)+0x3e>

c001241e <SysGetEnv(regs*)>:
c001241e:	57                   	push   edi
c001241f:	56                   	push   esi
c0012420:	53                   	push   ebx
c0012421:	83 ec 1c             	sub    esp,0x1c
c0012424:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012428:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001242d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012430:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012433:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012436:	51                   	push   ecx
c0012437:	e8 f9 ed ff ff       	call   c0011235 <KeGetProcessTotalEnvCount(Process*)>
c001243c:	83 c4 10             	add    esp,0x10
c001243f:	39 c7                	cmp    edi,eax
c0012441:	7c 14                	jl     c0012457 <SysGetEnv(regs*)+0x39>
c0012443:	85 f6                	test   esi,esi
c0012445:	75 0b                	jne    c0012452 <SysGetEnv(regs*)+0x34>
c0012447:	83 c4 10             	add    esp,0x10
c001244a:	31 c0                	xor    eax,eax
c001244c:	5b                   	pop    ebx
c001244d:	31 d2                	xor    edx,edx
c001244f:	5e                   	pop    esi
c0012450:	5f                   	pop    edi
c0012451:	c3                   	ret    
c0012452:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012455:	eb f0                	jmp    c0012447 <SysGetEnv(regs*)+0x29>
c0012457:	8d 44 24 08          	lea    eax,[esp+0x8]
c001245b:	83 ec 04             	sub    esp,0x4
c001245e:	57                   	push   edi
c001245f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012465:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012468:	57                   	push   edi
c0012469:	50                   	push   eax
c001246a:	e8 e6 ed ff ff       	call   c0011255 <KeGetProcessEnvPair(Process*, int)>
c001246f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012472:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012476:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001247a:	83 c4 0c             	add    esp,0xc
c001247d:	85 d2                	test   edx,edx
c001247f:	75 23                	jne    c00124a4 <SysGetEnv(regs*)+0x86>
c0012481:	83 ec 0c             	sub    esp,0xc
c0012484:	50                   	push   eax
c0012485:	e8 e6 e0 fe ff       	call   c0000570 <strlen>
c001248a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001248d:	89 c3                	mov    ebx,eax
c001248f:	e8 dc e0 fe ff       	call   c0000570 <strlen>
c0012494:	83 c4 10             	add    esp,0x10
c0012497:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001249b:	83 c4 10             	add    esp,0x10
c001249e:	31 d2                	xor    edx,edx
c00124a0:	5b                   	pop    ebx
c00124a1:	5e                   	pop    esi
c00124a2:	5f                   	pop    edi
c00124a3:	c3                   	ret    
c00124a4:	83 ec 08             	sub    esp,0x8
c00124a7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00124aa:	50                   	push   eax
c00124ab:	56                   	push   esi
c00124ac:	e8 8f e1 fe ff       	call   c0000640 <strcpy>
c00124b1:	58                   	pop    eax
c00124b2:	5a                   	pop    edx
c00124b3:	68 60 21 02 c0       	push   0xc0022160
c00124b8:	56                   	push   esi
c00124b9:	e8 82 e3 fe ff       	call   c0000840 <strcat>
c00124be:	59                   	pop    ecx
c00124bf:	5b                   	pop    ebx
c00124c0:	57                   	push   edi
c00124c1:	56                   	push   esi
c00124c2:	e8 79 e3 fe ff       	call   c0000840 <strcat>
c00124c7:	83 c4 10             	add    esp,0x10
c00124ca:	e9 78 ff ff ff       	jmp    c0012447 <SysGetEnv(regs*)+0x29>

c00124cf <SysSetFatAttrib(regs*)>:
c00124cf:	57                   	push   edi
c00124d0:	56                   	push   esi
c00124d1:	53                   	push   ebx
c00124d2:	83 ec 1c             	sub    esp,0x1c
c00124d5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00124d9:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00124dc:	68 14 01 00 00       	push   0x114
c00124e1:	e8 d0 55 ff ff       	call   c0007ab6 <malloc>
c00124e6:	83 c4 0c             	add    esp,0xc
c00124e9:	89 c3                	mov    ebx,eax
c00124eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124f3:	50                   	push   eax
c00124f4:	57                   	push   edi
c00124f5:	53                   	push   ebx
c00124f6:	e8 db 93 ff ff       	call   c000b8d6 <File::File(char const*, Process*)>
c00124fb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00124fe:	83 c4 0c             	add    esp,0xc
c0012501:	0f b6 d4             	movzx  edx,ah
c0012504:	0f b6 c0             	movzx  eax,al
c0012507:	52                   	push   edx
c0012508:	50                   	push   eax
c0012509:	53                   	push   ebx
c001250a:	e8 4d 96 ff ff       	call   c000bb5c <File::chfatattr(unsigned char, unsigned char)>
c001250f:	83 c4 10             	add    esp,0x10
c0012512:	85 db                	test   ebx,ebx
c0012514:	74 14                	je     c001252a <SysSetFatAttrib(regs*)+0x5b>
c0012516:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001251a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001251c:	83 ec 0c             	sub    esp,0xc
c001251f:	53                   	push   ebx
c0012520:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012523:	83 c4 10             	add    esp,0x10
c0012526:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001252a:	85 c0                	test   eax,eax
c001252c:	0f 95 c0             	setne  al
c001252f:	31 d2                	xor    edx,edx
c0012531:	0f b6 c0             	movzx  eax,al
c0012534:	f7 d8                	neg    eax
c0012536:	83 d2 00             	adc    edx,0x0
c0012539:	83 c4 10             	add    esp,0x10
c001253c:	f7 da                	neg    edx
c001253e:	5b                   	pop    ebx
c001253f:	5e                   	pop    esi
c0012540:	5f                   	pop    edi
c0012541:	c3                   	ret    

c0012542 <SysPipe(regs*)>:
c0012542:	57                   	push   edi
c0012543:	56                   	push   esi
c0012544:	53                   	push   ebx
c0012545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012549:	83 ec 0c             	sub    esp,0xc
c001254c:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001254f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012552:	6a 20                	push   0x20
c0012554:	e8 5d 55 ff ff       	call   c0007ab6 <malloc>
c0012559:	89 c3                	mov    ebx,eax
c001255b:	58                   	pop    eax
c001255c:	5a                   	pop    edx
c001255d:	68 00 50 00 00       	push   0x5000
c0012562:	53                   	push   ebx
c0012563:	e8 c0 5e ff ff       	call   c0008428 <Pipe::Pipe(int)>
c0012568:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001256b:	e8 46 6c ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012570:	89 07                	mov    DWORD PTR [edi],eax
c0012572:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012575:	e8 3c 6c ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c001257a:	83 c4 10             	add    esp,0x10
c001257d:	89 06                	mov    DWORD PTR [esi],eax
c001257f:	31 d2                	xor    edx,edx
c0012581:	5b                   	pop    ebx
c0012582:	31 c0                	xor    eax,eax
c0012584:	5e                   	pop    esi
c0012585:	5f                   	pop    edi
c0012586:	c3                   	ret    

c0012587 <SysGetUnixTime(regs*)>:
c0012587:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001258c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012592:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012596:	e9 07 9d ff ff       	jmp    c000c2a2 <Clock::timeInSecondsLocal()>

c001259b <string_ends_with(char const*, char const*)>:
c001259b:	57                   	push   edi
c001259c:	56                   	push   esi
c001259d:	53                   	push   ebx
c001259e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00125a2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00125a6:	83 ec 0c             	sub    esp,0xc
c00125a9:	53                   	push   ebx
c00125aa:	e8 c1 df fe ff       	call   c0000570 <strlen>
c00125af:	89 3c 24             	mov    DWORD PTR [esp],edi
c00125b2:	89 c6                	mov    esi,eax
c00125b4:	e8 b7 df fe ff       	call   c0000570 <strlen>
c00125b9:	83 c4 10             	add    esp,0x10
c00125bc:	39 c6                	cmp    esi,eax
c00125be:	7d 06                	jge    c00125c6 <string_ends_with(char const*, char const*)+0x2b>
c00125c0:	5b                   	pop    ebx
c00125c1:	31 c0                	xor    eax,eax
c00125c3:	5e                   	pop    esi
c00125c4:	5f                   	pop    edi
c00125c5:	c3                   	ret    
c00125c6:	83 ec 08             	sub    esp,0x8
c00125c9:	29 c6                	sub    esi,eax
c00125cb:	57                   	push   edi
c00125cc:	01 f3                	add    ebx,esi
c00125ce:	53                   	push   ebx
c00125cf:	e8 7c e1 fe ff       	call   c0000750 <strcmp>
c00125d4:	83 c4 10             	add    esp,0x10
c00125d7:	85 c0                	test   eax,eax
c00125d9:	5b                   	pop    ebx
c00125da:	0f 94 c0             	sete   al
c00125dd:	5e                   	pop    esi
c00125de:	0f b6 c0             	movzx  eax,al
c00125e1:	5f                   	pop    edi
c00125e2:	c3                   	ret    

c00125e3 <SysOpen(regs*)>:
c00125e3:	56                   	push   esi
c00125e4:	53                   	push   ebx
c00125e5:	81 ec 04 01 00 00    	sub    esp,0x104
c00125eb:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00125f2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00125f5:	85 c0                	test   eax,eax
c00125f7:	0f 84 bc 01 00 00    	je     c00127b9 <SysOpen(regs*)+0x1d6>
c00125fd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012600:	85 c0                	test   eax,eax
c0012602:	0f 84 b1 01 00 00    	je     c00127b9 <SysOpen(regs*)+0x1d6>
c0012608:	6a 00                	push   0x0
c001260a:	68 62 21 02 c0       	push   0xc0022162
c001260f:	50                   	push   eax
c0012610:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012614:	56                   	push   esi
c0012615:	e8 d4 8f ff ff       	call   c000b5ee <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001261a:	89 34 24             	mov    DWORD PTR [esp],esi
c001261d:	e8 4e df fe ff       	call   c0000570 <strlen>
c0012622:	83 c4 10             	add    esp,0x10
c0012625:	83 e8 01             	sub    eax,0x1
c0012628:	74 21                	je     c001264b <SysOpen(regs*)+0x68>
c001262a:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001262e:	eb 12                	jmp    c0012642 <SysOpen(regs*)+0x5f>
c0012630:	83 fa 3a             	cmp    edx,0x3a
c0012633:	74 12                	je     c0012647 <SysOpen(regs*)+0x64>
c0012635:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012639:	83 e8 01             	sub    eax,0x1
c001263c:	74 0d                	je     c001264b <SysOpen(regs*)+0x68>
c001263e:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012642:	83 fa 2e             	cmp    edx,0x2e
c0012645:	75 e9                	jne    c0012630 <SysOpen(regs*)+0x4d>
c0012647:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001264b:	83 ec 08             	sub    esp,0x8
c001264e:	68 66 21 02 c0       	push   0xc0022166
c0012653:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012656:	50                   	push   eax
c0012657:	e8 3f ff ff ff       	call   c001259b <string_ends_with(char const*, char const*)>
c001265c:	83 c4 10             	add    esp,0x10
c001265f:	85 c0                	test   eax,eax
c0012661:	74 1d                	je     c0012680 <SysOpen(regs*)+0x9d>
c0012663:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012666:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001266c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012673:	81 c4 04 01 00 00    	add    esp,0x104
c0012679:	31 c0                	xor    eax,eax
c001267b:	31 d2                	xor    edx,edx
c001267d:	5b                   	pop    ebx
c001267e:	5e                   	pop    esi
c001267f:	c3                   	ret    
c0012680:	83 ec 08             	sub    esp,0x8
c0012683:	68 6b 21 02 c0       	push   0xc002216b
c0012688:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001268b:	50                   	push   eax
c001268c:	e8 0a ff ff ff       	call   c001259b <string_ends_with(char const*, char const*)>
c0012691:	83 c4 10             	add    esp,0x10
c0012694:	85 c0                	test   eax,eax
c0012696:	75 cb                	jne    c0012663 <SysOpen(regs*)+0x80>
c0012698:	83 ec 08             	sub    esp,0x8
c001269b:	68 67 21 02 c0       	push   0xc0022167
c00126a0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00126a3:	50                   	push   eax
c00126a4:	e8 a7 e0 fe ff       	call   c0000750 <strcmp>
c00126a9:	83 c4 10             	add    esp,0x10
c00126ac:	85 c0                	test   eax,eax
c00126ae:	74 b3                	je     c0012663 <SysOpen(regs*)+0x80>
c00126b0:	83 ec 08             	sub    esp,0x8
c00126b3:	68 66 21 02 c0       	push   0xc0022166
c00126b8:	56                   	push   esi
c00126b9:	e8 dd fe ff ff       	call   c001259b <string_ends_with(char const*, char const*)>
c00126be:	83 c4 10             	add    esp,0x10
c00126c1:	85 c0                	test   eax,eax
c00126c3:	75 9e                	jne    c0012663 <SysOpen(regs*)+0x80>
c00126c5:	83 ec 08             	sub    esp,0x8
c00126c8:	68 70 21 02 c0       	push   0xc0022170
c00126cd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00126d0:	50                   	push   eax
c00126d1:	e8 c5 fe ff ff       	call   c001259b <string_ends_with(char const*, char const*)>
c00126d6:	83 c4 10             	add    esp,0x10
c00126d9:	85 c0                	test   eax,eax
c00126db:	0f 85 eb 00 00 00    	jne    c00127cc <SysOpen(regs*)+0x1e9>
c00126e1:	83 ec 08             	sub    esp,0x8
c00126e4:	68 75 21 02 c0       	push   0xc0022175
c00126e9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00126ec:	50                   	push   eax
c00126ed:	e8 a9 fe ff ff       	call   c001259b <string_ends_with(char const*, char const*)>
c00126f2:	83 c4 10             	add    esp,0x10
c00126f5:	85 c0                	test   eax,eax
c00126f7:	0f 85 cf 00 00 00    	jne    c00127cc <SysOpen(regs*)+0x1e9>
c00126fd:	83 ec 08             	sub    esp,0x8
c0012700:	68 71 21 02 c0       	push   0xc0022171
c0012705:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012708:	51                   	push   ecx
c0012709:	e8 42 e0 fe ff       	call   c0000750 <strcmp>
c001270e:	83 c4 10             	add    esp,0x10
c0012711:	85 c0                	test   eax,eax
c0012713:	0f 84 b3 00 00 00    	je     c00127cc <SysOpen(regs*)+0x1e9>
c0012719:	83 ec 08             	sub    esp,0x8
c001271c:	68 70 21 02 c0       	push   0xc0022170
c0012721:	56                   	push   esi
c0012722:	e8 74 fe ff ff       	call   c001259b <string_ends_with(char const*, char const*)>
c0012727:	83 c4 10             	add    esp,0x10
c001272a:	85 c0                	test   eax,eax
c001272c:	0f 85 9a 00 00 00    	jne    c00127cc <SysOpen(regs*)+0x1e9>
c0012732:	83 ec 0c             	sub    esp,0xc
c0012735:	68 14 01 00 00       	push   0x114
c001273a:	e8 77 53 ff ff       	call   c0007ab6 <malloc>
c001273f:	83 c4 0c             	add    esp,0xc
c0012742:	89 c6                	mov    esi,eax
c0012744:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012749:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001274c:	50                   	push   eax
c001274d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012750:	52                   	push   edx
c0012751:	56                   	push   esi
c0012752:	e8 7f 91 ff ff       	call   c000b8d6 <File::File(char const*, Process*)>
c0012757:	83 c4 10             	add    esp,0x10
c001275a:	85 f6                	test   esi,esi
c001275c:	74 5b                	je     c00127b9 <SysOpen(regs*)+0x1d6>
c001275e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012761:	0f b6 c2             	movzx  eax,dl
c0012764:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012767:	89 d0                	mov    eax,edx
c0012769:	83 e0 01             	and    eax,0x1
c001276c:	f6 c2 02             	test   dl,0x2
c001276f:	74 03                	je     c0012774 <SysOpen(regs*)+0x191>
c0012771:	83 c8 02             	or     eax,0x2
c0012774:	f6 c2 04             	test   dl,0x4
c0012777:	74 03                	je     c001277c <SysOpen(regs*)+0x199>
c0012779:	83 c8 04             	or     eax,0x4
c001277c:	f6 c2 08             	test   dl,0x8
c001277f:	74 03                	je     c0012784 <SysOpen(regs*)+0x1a1>
c0012781:	83 c8 0a             	or     eax,0xa
c0012784:	80 e2 10             	and    dl,0x10
c0012787:	74 03                	je     c001278c <SysOpen(regs*)+0x1a9>
c0012789:	83 c8 12             	or     eax,0x12
c001278c:	83 ec 08             	sub    esp,0x8
c001278f:	50                   	push   eax
c0012790:	56                   	push   esi
c0012791:	e8 5e 91 ff ff       	call   c000b8f4 <File::open(FileOpenMode)>
c0012796:	83 c4 10             	add    esp,0x10
c0012799:	85 c0                	test   eax,eax
c001279b:	75 1c                	jne    c00127b9 <SysOpen(regs*)+0x1d6>
c001279d:	83 ec 0c             	sub    esp,0xc
c00127a0:	56                   	push   esi
c00127a1:	e8 10 6a ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00127a6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00127a9:	83 c4 10             	add    esp,0x10
c00127ac:	89 02                	mov    DWORD PTR [edx],eax
c00127ae:	c1 f8 1f             	sar    eax,0x1f
c00127b1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00127b4:	e9 ba fe ff ff       	jmp    c0012673 <SysOpen(regs*)+0x90>
c00127b9:	81 c4 04 01 00 00    	add    esp,0x104
c00127bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00127c4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00127c9:	5b                   	pop    ebx
c00127ca:	5e                   	pop    esi
c00127cb:	c3                   	ret    
c00127cc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00127cf:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00127d5:	e9 92 fe ff ff       	jmp    c001266c <SysOpen(regs*)+0x89>

c00127da <KeSystemCall(regs*, void*)>:
c00127da:	53                   	push   ebx
c00127db:	83 ec 08             	sub    esp,0x8
c00127de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00127e2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00127e5:	83 f8 3e             	cmp    eax,0x3e
c00127e8:	77 16                	ja     c0012800 <KeSystemCall(regs*, void*)+0x26>
c00127ea:	8b 14 85 80 35 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdca80]
c00127f1:	85 d2                	test   edx,edx
c00127f3:	74 0b                	je     c0012800 <KeSystemCall(regs*, void*)+0x26>
c00127f5:	83 ec 0c             	sub    esp,0xc
c00127f8:	53                   	push   ebx
c00127f9:	ff d2                	call   edx
c00127fb:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00127fe:	eb 0d                	jmp    c001280d <KeSystemCall(regs*, void*)+0x33>
c0012800:	52                   	push   edx
c0012801:	52                   	push   edx
c0012802:	50                   	push   eax
c0012803:	68 7a 21 02 c0       	push   0xc002217a
c0012808:	e8 38 81 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001280d:	83 c4 10             	add    esp,0x10
c0012810:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012815:	31 d2                	xor    edx,edx
c0012817:	83 c4 08             	add    esp,0x8
c001281a:	5b                   	pop    ebx
c001281b:	c3                   	ret    

c001281c <KeSwitchEndian16(unsigned short)>:
c001281c:	83 ec 04             	sub    esp,0x4
c001281f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012823:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012827:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001282b:	c1 f8 08             	sar    eax,0x8
c001282e:	89 c2                	mov    edx,eax
c0012830:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012834:	c1 e0 08             	shl    eax,0x8
c0012837:	09 d0                	or     eax,edx
c0012839:	83 c4 04             	add    esp,0x4
c001283c:	c3                   	ret    
c001283d:	8d 76 00             	lea    esi,[esi+0x0]

c0012840 <KeSwitchEndian32(unsigned int)>:
c0012840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012844:	c1 e8 18             	shr    eax,0x18
c0012847:	89 c2                	mov    edx,eax
c0012849:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001284d:	c1 e0 08             	shl    eax,0x8
c0012850:	25 00 00 ff 00       	and    eax,0xff0000
c0012855:	09 c2                	or     edx,eax
c0012857:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001285b:	c1 e8 08             	shr    eax,0x8
c001285e:	25 00 ff 00 00       	and    eax,0xff00
c0012863:	09 c2                	or     edx,eax
c0012865:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012869:	c1 e0 18             	shl    eax,0x18
c001286c:	09 d0                	or     eax,edx
c001286e:	c3                   	ret    
c001286f:	90                   	nop

c0012870 <EthernetCRC32(unsigned char*, int)>:
c0012870:	83 ec 10             	sub    esp,0x10
c0012873:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012878:	75 0a                	jne    c0012884 <EthernetCRC32(unsigned char*, int)+0x14>
c001287a:	b8 00 00 00 00       	mov    eax,0x0
c001287f:	e9 8c 00 00 00       	jmp    c0012910 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012884:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012889:	7f 09                	jg     c0012894 <EthernetCRC32(unsigned char*, int)+0x24>
c001288b:	b8 00 00 00 00       	mov    eax,0x0
c0012890:	eb 7e                	jmp    c0012910 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012892:	66 90                	xchg   ax,ax
c0012894:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001289c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00128a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00128a8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00128ac:	7d 5a                	jge    c0012908 <EthernetCRC32(unsigned char*, int)+0x98>
c00128ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00128b6:	01 d0                	add    eax,edx
c00128b8:	8a 00                	mov    al,BYTE PTR [eax]
c00128ba:	0f b6 c0             	movzx  eax,al
c00128bd:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00128c1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00128c9:	8d 76 00             	lea    esi,[esi+0x0]
c00128cc:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00128d1:	7f 2d                	jg     c0012900 <EthernetCRC32(unsigned char*, int)+0x90>
c00128d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128d7:	83 e0 01             	and    eax,0x1
c00128da:	74 10                	je     c00128ec <EthernetCRC32(unsigned char*, int)+0x7c>
c00128dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128e0:	d1 e8                	shr    eax,1
c00128e2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00128e7:	eb 0b                	jmp    c00128f4 <EthernetCRC32(unsigned char*, int)+0x84>
c00128e9:	8d 76 00             	lea    esi,[esi+0x0]
c00128ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128f0:	d1 e8                	shr    eax,1
c00128f2:	66 90                	xchg   ax,ax
c00128f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128f8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00128fd:	eb cd                	jmp    c00128cc <EthernetCRC32(unsigned char*, int)+0x5c>
c00128ff:	90                   	nop
c0012900:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012905:	eb 9d                	jmp    c00128a4 <EthernetCRC32(unsigned char*, int)+0x34>
c0012907:	90                   	nop
c0012908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001290c:	f7 d0                	not    eax
c001290e:	66 90                	xchg   ax,ax
c0012910:	83 c4 10             	add    esp,0x10
c0012913:	c3                   	ret    

c0012914 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012914:	83 ec 2c             	sub    esp,0x2c
c0012917:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001291b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012920:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012924:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012928:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001292c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001292f:	0f b7 c0             	movzx  eax,ax
c0012932:	3d 06 08 00 00       	cmp    eax,0x806
c0012937:	75 13                	jne    c001294c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012939:	83 ec 0c             	sub    esp,0xc
c001293c:	68 8e 21 02 c0       	push   0xc002218e
c0012941:	e8 ff 7f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012946:	83 c4 10             	add    esp,0x10
c0012949:	eb 25                	jmp    c0012970 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c001294b:	90                   	nop
c001294c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012950:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012953:	0f b7 c0             	movzx  eax,ax
c0012956:	3d 00 08 00 00       	cmp    eax,0x800
c001295b:	75 13                	jne    c0012970 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c001295d:	83 ec 0c             	sub    esp,0xc
c0012960:	68 a4 21 02 c0       	push   0xc00221a4
c0012965:	e8 db 7f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001296a:	83 c4 10             	add    esp,0x10
c001296d:	8d 76 00             	lea    esi,[esi+0x0]
c0012970:	90                   	nop
c0012971:	83 c4 2c             	add    esp,0x2c
c0012974:	c3                   	ret    

c0012975 <CmOpen(char const*)>:
c0012975:	57                   	push   edi
c0012976:	56                   	push   esi
c0012977:	53                   	push   ebx
c0012978:	83 ec 1c             	sub    esp,0x1c
c001297b:	6a 30                	push   0x30
c001297d:	e8 34 51 ff ff       	call   c0007ab6 <malloc>
c0012982:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012989:	89 c3                	mov    ebx,eax
c001298b:	e8 26 51 ff ff       	call   c0007ab6 <malloc>
c0012990:	83 c4 0c             	add    esp,0xc
c0012993:	89 c6                	mov    esi,eax
c0012995:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001299b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001299f:	50                   	push   eax
c00129a0:	e8 31 8f ff ff       	call   c000b8d6 <File::File(char const*, Process*)>
c00129a5:	83 c4 0c             	add    esp,0xc
c00129a8:	89 33                	mov    DWORD PTR [ebx],esi
c00129aa:	8d 44 24 07          	lea    eax,[esp+0x7]
c00129ae:	50                   	push   eax
c00129af:	8d 44 24 10          	lea    eax,[esp+0x10]
c00129b3:	50                   	push   eax
c00129b4:	56                   	push   esi
c00129b5:	e8 3c 92 ff ff       	call   c000bbf6 <File::stat(unsigned long long*, bool*)>
c00129ba:	5a                   	pop    edx
c00129bb:	59                   	pop    ecx
c00129bc:	6a 01                	push   0x1
c00129be:	ff 33                	push   DWORD PTR [ebx]
c00129c0:	e8 2f 8f ff ff       	call   c000b8f4 <File::open(FileOpenMode)>
c00129c5:	5e                   	pop    esi
c00129c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00129ca:	e8 e7 50 ff ff       	call   c0007ab6 <malloc>
c00129cf:	5a                   	pop    edx
c00129d0:	89 c7                	mov    edi,eax
c00129d2:	8d 74 24 10          	lea    esi,[esp+0x10]
c00129d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00129d8:	8b 10                	mov    edx,DWORD PTR [eax]
c00129da:	56                   	push   esi
c00129db:	57                   	push   edi
c00129dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00129e0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00129e4:	50                   	push   eax
c00129e5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00129e8:	83 c4 14             	add    esp,0x14
c00129eb:	ff 33                	push   DWORD PTR [ebx]
c00129ed:	e8 60 8f ff ff       	call   c000b952 <File::close()>
c00129f2:	59                   	pop    ecx
c00129f3:	58                   	pop    eax
c00129f4:	6a 13                	push   0x13
c00129f6:	ff 33                	push   DWORD PTR [ebx]
c00129f8:	e8 f7 8e ff ff       	call   c000b8f4 <File::open(FileOpenMode)>
c00129fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00129ff:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a01:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a04:	57                   	push   edi
c0012a05:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012a09:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012a0d:	50                   	push   eax
c0012a0e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012a11:	83 c4 14             	add    esp,0x14
c0012a14:	57                   	push   edi
c0012a15:	e8 ac 50 ff ff       	call   c0007ac6 <free>
c0012a1a:	83 c4 10             	add    esp,0x10
c0012a1d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012a20:	75 10                	jne    c0012a32 <CmOpen(char const*)+0xbd>
c0012a22:	83 ec 0c             	sub    esp,0xc
c0012a25:	68 b9 21 02 c0       	push   0xc00221b9
c0012a2a:	e8 4e e9 ff ff       	call   c001137d <KePanic(char const*)>
c0012a2f:	83 c4 10             	add    esp,0x10
c0012a32:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012a35:	50                   	push   eax
c0012a36:	6a 00                	push   0x0
c0012a38:	6a 00                	push   0x0
c0012a3a:	ff 33                	push   DWORD PTR [ebx]
c0012a3c:	e8 71 8f ff ff       	call   c000b9b2 <File::seek(unsigned long long)>
c0012a41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012a43:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a45:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a48:	57                   	push   edi
c0012a49:	6a 00                	push   0x0
c0012a4b:	6a 2b                	push   0x2b
c0012a4d:	50                   	push   eax
c0012a4e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012a51:	83 c4 1c             	add    esp,0x1c
c0012a54:	6a 00                	push   0x0
c0012a56:	6a 00                	push   0x0
c0012a58:	ff 33                	push   DWORD PTR [ebx]
c0012a5a:	e8 53 8f ff ff       	call   c000b9b2 <File::seek(unsigned long long)>
c0012a5f:	83 c4 0c             	add    esp,0xc
c0012a62:	6a 08                	push   0x8
c0012a64:	68 ca 21 02 c0       	push   0xc00221ca
c0012a69:	57                   	push   edi
c0012a6a:	e8 11 d9 fe ff       	call   c0000380 <memcmp>
c0012a6f:	83 c4 10             	add    esp,0x10
c0012a72:	85 c0                	test   eax,eax
c0012a74:	74 10                	je     c0012a86 <CmOpen(char const*)+0x111>
c0012a76:	83 ec 0c             	sub    esp,0xc
c0012a79:	68 d3 21 02 c0       	push   0xc00221d3
c0012a7e:	e8 fa e8 ff ff       	call   c001137d <KePanic(char const*)>
c0012a83:	83 c4 10             	add    esp,0x10
c0012a86:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012a8a:	89 d8                	mov    eax,ebx
c0012a8c:	83 c4 10             	add    esp,0x10
c0012a8f:	5b                   	pop    ebx
c0012a90:	5e                   	pop    esi
c0012a91:	5f                   	pop    edi
c0012a92:	c3                   	ret    

c0012a93 <CmClose(Reghive_Tag*)>:
c0012a93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a97:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012a9b:	74 0b                	je     c0012aa8 <CmClose(Reghive_Tag*)+0x15>
c0012a9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a9f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012aa3:	e9 aa 8e ff ff       	jmp    c000b952 <File::close()>
c0012aa8:	c3                   	ret    

c0012aa9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012aa9:	53                   	push   ebx
c0012aaa:	83 ec 18             	sub    esp,0x18
c0012aad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012ab1:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012ab5:	74 29                	je     c0012ae0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012ab7:	50                   	push   eax
c0012ab8:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012abd:	99                   	cdq    
c0012abe:	52                   	push   edx
c0012abf:	50                   	push   eax
c0012ac0:	ff 33                	push   DWORD PTR [ebx]
c0012ac2:	e8 eb 8e ff ff       	call   c000b9b2 <File::seek(unsigned long long)>
c0012ac7:	5a                   	pop    edx
c0012ac8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012aca:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012ace:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ad0:	51                   	push   ecx
c0012ad1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012ad5:	6a 00                	push   0x0
c0012ad7:	6a 2b                	push   0x2b
c0012ad9:	50                   	push   eax
c0012ada:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012add:	83 c4 20             	add    esp,0x20
c0012ae0:	83 c4 18             	add    esp,0x18
c0012ae3:	5b                   	pop    ebx
c0012ae4:	c3                   	ret    

c0012ae5 <CmGetString(Reghive_Tag*, int, char*)>:
c0012ae5:	55                   	push   ebp
c0012ae6:	57                   	push   edi
c0012ae7:	56                   	push   esi
c0012ae8:	53                   	push   ebx
c0012ae9:	31 db                	xor    ebx,ebx
c0012aeb:	83 ec 70             	sub    esp,0x70
c0012aee:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012af5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012af9:	50                   	push   eax
c0012afa:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012b01:	55                   	push   ebp
c0012b02:	e8 a2 ff ff ff       	call   c0012aa9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012b07:	83 c4 10             	add    esp,0x10
c0012b0a:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012b0f:	c1 e0 08             	shl    eax,0x8
c0012b12:	89 c2                	mov    edx,eax
c0012b14:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012b19:	09 d0                	or     eax,edx
c0012b1b:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012b20:	c1 e0 08             	shl    eax,0x8
c0012b23:	09 d0                	or     eax,edx
c0012b25:	74 25                	je     c0012b4c <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012b27:	6b fb 0d             	imul   edi,ebx,0xd
c0012b2a:	52                   	push   edx
c0012b2b:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012b2f:	52                   	push   edx
c0012b30:	50                   	push   eax
c0012b31:	55                   	push   ebp
c0012b32:	e8 72 ff ff ff       	call   c0012aa9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012b37:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012b3b:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012b42:	b9 27 00 00 00       	mov    ecx,0x27
c0012b47:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012b49:	83 c4 10             	add    esp,0x10
c0012b4c:	83 c3 03             	add    ebx,0x3
c0012b4f:	83 fb 15             	cmp    ebx,0x15
c0012b52:	75 b6                	jne    c0012b0a <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012b54:	83 c4 6c             	add    esp,0x6c
c0012b57:	5b                   	pop    ebx
c0012b58:	5e                   	pop    esi
c0012b59:	5f                   	pop    edi
c0012b5a:	5d                   	pop    ebp
c0012b5b:	c3                   	ret    

c0012b5c <CmEnterDirectory(Reghive_Tag*, int)>:
c0012b5c:	83 ec 40             	sub    esp,0x40
c0012b5f:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012b63:	50                   	push   eax
c0012b64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012b68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012b6c:	e8 38 ff ff ff       	call   c0012aa9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012b71:	83 c4 10             	add    esp,0x10
c0012b74:	83 c8 ff             	or     eax,0xffffffff
c0012b77:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012b7c:	75 19                	jne    c0012b97 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012b7e:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012b83:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012b88:	c1 e0 08             	shl    eax,0x8
c0012b8b:	09 c2                	or     edx,eax
c0012b8d:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012b92:	c1 e0 10             	shl    eax,0x10
c0012b95:	09 d0                	or     eax,edx
c0012b97:	83 c4 3c             	add    esp,0x3c
c0012b9a:	c3                   	ret    

c0012b9b <CmGetNext(Reghive_Tag*, int)>:
c0012b9b:	83 ec 40             	sub    esp,0x40
c0012b9e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012ba2:	50                   	push   eax
c0012ba3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ba7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012bab:	e8 f9 fe ff ff       	call   c0012aa9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012bb0:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012bb5:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012bba:	c1 e0 08             	shl    eax,0x8
c0012bbd:	09 c2                	or     edx,eax
c0012bbf:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012bc4:	83 c4 4c             	add    esp,0x4c
c0012bc7:	c1 e0 10             	shl    eax,0x10
c0012bca:	09 d0                	or     eax,edx
c0012bcc:	c3                   	ret    

c0012bcd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012bcd:	53                   	push   ebx
c0012bce:	83 ec 18             	sub    esp,0x18
c0012bd1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012bd5:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012bd9:	74 29                	je     c0012c04 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012bdb:	50                   	push   eax
c0012bdc:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012be1:	99                   	cdq    
c0012be2:	52                   	push   edx
c0012be3:	50                   	push   eax
c0012be4:	ff 33                	push   DWORD PTR [ebx]
c0012be6:	e8 c7 8d ff ff       	call   c000b9b2 <File::seek(unsigned long long)>
c0012beb:	5a                   	pop    edx
c0012bec:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012bee:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012bf2:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bf4:	51                   	push   ecx
c0012bf5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012bf9:	6a 00                	push   0x0
c0012bfb:	6a 2b                	push   0x2b
c0012bfd:	50                   	push   eax
c0012bfe:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012c01:	83 c4 20             	add    esp,0x20
c0012c04:	83 c4 18             	add    esp,0x18
c0012c07:	5b                   	pop    ebx
c0012c08:	c3                   	ret    

c0012c09 <CmFreeExtent(Reghive_Tag*, int)>:
c0012c09:	53                   	push   ebx
c0012c0a:	83 ec 3c             	sub    esp,0x3c
c0012c0d:	6a 2b                	push   0x2b
c0012c0f:	6a 00                	push   0x0
c0012c11:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012c15:	53                   	push   ebx
c0012c16:	e8 d5 d8 fe ff       	call   c00004f0 <memset>
c0012c1b:	83 c4 0c             	add    esp,0xc
c0012c1e:	53                   	push   ebx
c0012c1f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012c23:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012c27:	e8 a1 ff ff ff       	call   c0012bcd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c2c:	83 c4 48             	add    esp,0x48
c0012c2f:	5b                   	pop    ebx
c0012c30:	c3                   	ret    

c0012c31 <CmUpdateHeader(Reghive_Tag*)>:
c0012c31:	83 ec 0c             	sub    esp,0xc
c0012c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c38:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012c3c:	74 10                	je     c0012c4e <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012c3e:	52                   	push   edx
c0012c3f:	8d 50 05             	lea    edx,[eax+0x5]
c0012c42:	52                   	push   edx
c0012c43:	6a 00                	push   0x0
c0012c45:	50                   	push   eax
c0012c46:	e8 82 ff ff ff       	call   c0012bcd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c4b:	83 c4 10             	add    esp,0x10
c0012c4e:	83 c4 0c             	add    esp,0xc
c0012c51:	c3                   	ret    

c0012c52 <CmExpand(Reghive_Tag*, int)>:
c0012c52:	57                   	push   edi
c0012c53:	56                   	push   esi
c0012c54:	83 ce ff             	or     esi,0xffffffff
c0012c57:	53                   	push   ebx
c0012c58:	83 ec 30             	sub    esp,0x30
c0012c5b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012c5f:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012c63:	74 5f                	je     c0012cc4 <CmExpand(Reghive_Tag*, int)+0x72>
c0012c65:	31 d2                	xor    edx,edx
c0012c67:	31 f6                	xor    esi,esi
c0012c69:	50                   	push   eax
c0012c6a:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012c6e:	52                   	push   edx
c0012c6f:	50                   	push   eax
c0012c70:	ff 33                	push   DWORD PTR [ebx]
c0012c72:	e8 3b 8d ff ff       	call   c000b9b2 <File::seek(unsigned long long)>
c0012c77:	83 c4 0c             	add    esp,0xc
c0012c7a:	6a 2b                	push   0x2b
c0012c7c:	6a 00                	push   0x0
c0012c7e:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0012c82:	57                   	push   edi
c0012c83:	e8 68 d8 fe ff       	call   c00004f0 <memset>
c0012c88:	83 c4 10             	add    esp,0x10
c0012c8b:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012c8f:	7d 1b                	jge    c0012cac <CmExpand(Reghive_Tag*, int)+0x5a>
c0012c91:	83 ec 0c             	sub    esp,0xc
c0012c94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c96:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012c9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c9c:	46                   	inc    esi
c0012c9d:	51                   	push   ecx
c0012c9e:	57                   	push   edi
c0012c9f:	6a 00                	push   0x0
c0012ca1:	6a 2b                	push   0x2b
c0012ca3:	50                   	push   eax
c0012ca4:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012ca7:	83 c4 20             	add    esp,0x20
c0012caa:	eb df                	jmp    c0012c8b <CmExpand(Reghive_Tag*, int)+0x39>
c0012cac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012cb0:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0012cb3:	83 ec 0c             	sub    esp,0xc
c0012cb6:	01 f2                	add    edx,esi
c0012cb8:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0012cbb:	53                   	push   ebx
c0012cbc:	e8 70 ff ff ff       	call   c0012c31 <CmUpdateHeader(Reghive_Tag*)>
c0012cc1:	83 c4 10             	add    esp,0x10
c0012cc4:	83 c4 30             	add    esp,0x30
c0012cc7:	89 f0                	mov    eax,esi
c0012cc9:	5b                   	pop    ebx
c0012cca:	5e                   	pop    esi
c0012ccb:	5f                   	pop    edi
c0012ccc:	c3                   	ret    

c0012ccd <CmFindUnusedExtent(Reghive_Tag*)>:
c0012ccd:	55                   	push   ebp
c0012cce:	57                   	push   edi
c0012ccf:	56                   	push   esi
c0012cd0:	53                   	push   ebx
c0012cd1:	83 cb ff             	or     ebx,0xffffffff
c0012cd4:	83 ec 1c             	sub    esp,0x1c
c0012cd7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012cdb:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012cdf:	74 68                	je     c0012d49 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012ce1:	be 2b 00 00 00       	mov    esi,0x2b
c0012ce6:	51                   	push   ecx
c0012ce7:	31 ff                	xor    edi,edi
c0012ce9:	6a 00                	push   0x0
c0012ceb:	31 db                	xor    ebx,ebx
c0012ced:	6a 00                	push   0x0
c0012cef:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012cf2:	e8 bb 8c ff ff       	call   c000b9b2 <File::seek(unsigned long long)>
c0012cf7:	83 c4 10             	add    esp,0x10
c0012cfa:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012cfd:	76 3b                	jbe    c0012d3a <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012cff:	83 ec 0c             	sub    esp,0xc
c0012d02:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d05:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012d09:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d0b:	51                   	push   ecx
c0012d0c:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012d10:	51                   	push   ecx
c0012d11:	6a 00                	push   0x0
c0012d13:	6a 01                	push   0x1
c0012d15:	50                   	push   eax
c0012d16:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d19:	83 c4 20             	add    esp,0x20
c0012d1c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012d21:	74 26                	je     c0012d49 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012d23:	43                   	inc    ebx
c0012d24:	52                   	push   edx
c0012d25:	57                   	push   edi
c0012d26:	56                   	push   esi
c0012d27:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012d2a:	e8 83 8c ff ff       	call   c000b9b2 <File::seek(unsigned long long)>
c0012d2f:	83 c6 2b             	add    esi,0x2b
c0012d32:	83 d7 00             	adc    edi,0x0
c0012d35:	83 c4 10             	add    esp,0x10
c0012d38:	eb c0                	jmp    c0012cfa <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012d3a:	50                   	push   eax
c0012d3b:	50                   	push   eax
c0012d3c:	6a 40                	push   0x40
c0012d3e:	55                   	push   ebp
c0012d3f:	e8 0e ff ff ff       	call   c0012c52 <CmExpand(Reghive_Tag*, int)>
c0012d44:	83 c4 10             	add    esp,0x10
c0012d47:	89 c3                	mov    ebx,eax
c0012d49:	83 c4 1c             	add    esp,0x1c
c0012d4c:	89 d8                	mov    eax,ebx
c0012d4e:	5b                   	pop    ebx
c0012d4f:	5e                   	pop    esi
c0012d50:	5f                   	pop    edi
c0012d51:	5d                   	pop    ebp
c0012d52:	c3                   	ret    

c0012d53 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012d53:	55                   	push   ebp
c0012d54:	57                   	push   edi
c0012d55:	56                   	push   esi
c0012d56:	53                   	push   ebx
c0012d57:	81 ec 88 00 00 00    	sub    esp,0x88
c0012d5d:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012d64:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012d6b:	e8 5d ff ff ff       	call   c0012ccd <CmFindUnusedExtent(Reghive_Tag*)>
c0012d70:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012d74:	83 c4 0c             	add    esp,0xc
c0012d77:	6a 2b                	push   0x2b
c0012d79:	6a 00                	push   0x0
c0012d7b:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012d7f:	55                   	push   ebp
c0012d80:	e8 6b d7 fe ff       	call   c00004f0 <memset>
c0012d85:	83 c4 10             	add    esp,0x10
c0012d88:	85 db                	test   ebx,ebx
c0012d8a:	74 12                	je     c0012d9e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012d8c:	51                   	push   ecx
c0012d8d:	55                   	push   ebp
c0012d8e:	53                   	push   ebx
c0012d8f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012d96:	e8 0e fd ff ff       	call   c0012aa9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d9b:	83 c4 10             	add    esp,0x10
c0012d9e:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012da2:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012da9:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012dae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012db0:	85 db                	test   ebx,ebx
c0012db2:	74 49                	je     c0012dfd <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012db4:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012db9:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012dbe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012dc2:	c1 e0 08             	shl    eax,0x8
c0012dc5:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012dcb:	09 c8                	or     eax,ecx
c0012dcd:	74 11                	je     c0012de0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012dcf:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012dd3:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012dd7:	c1 e8 10             	shr    eax,0x10
c0012dda:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012dde:	eb 0f                	jmp    c0012def <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012de0:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012de5:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012dea:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012def:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012df3:	c1 ea 08             	shr    edx,0x8
c0012df6:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012dfb:	eb 0f                	jmp    c0012e0c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012dfd:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012e02:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012e07:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012e0c:	52                   	push   edx
c0012e0d:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012e11:	50                   	push   eax
c0012e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012e16:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012e1d:	e8 ab fd ff ff       	call   c0012bcd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e22:	83 c4 10             	add    esp,0x10
c0012e25:	85 db                	test   ebx,ebx
c0012e27:	74 12                	je     c0012e3b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012e29:	50                   	push   eax
c0012e2a:	55                   	push   ebp
c0012e2b:	53                   	push   ebx
c0012e2c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012e33:	e8 95 fd ff ff       	call   c0012bcd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e38:	83 c4 10             	add    esp,0x10
c0012e3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e3f:	83 c4 7c             	add    esp,0x7c
c0012e42:	5b                   	pop    ebx
c0012e43:	5e                   	pop    esi
c0012e44:	5f                   	pop    edi
c0012e45:	5d                   	pop    ebp
c0012e46:	c3                   	ret    

c0012e47 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012e47:	55                   	push   ebp
c0012e48:	57                   	push   edi
c0012e49:	56                   	push   esi
c0012e4a:	53                   	push   ebx
c0012e4b:	bb 27 00 00 00       	mov    ebx,0x27
c0012e50:	81 ec 88 00 00 00    	sub    esp,0x88
c0012e56:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012e5d:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012e64:	e8 07 d7 fe ff       	call   c0000570 <strlen>
c0012e69:	8d 48 26             	lea    ecx,[eax+0x26]
c0012e6c:	89 c8                	mov    eax,ecx
c0012e6e:	99                   	cdq    
c0012e6f:	f7 fb                	idiv   ebx
c0012e71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012e75:	83 c4 10             	add    esp,0x10
c0012e78:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012e7e:	7e 10                	jle    c0012e90 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012e80:	83 ec 0c             	sub    esp,0xc
c0012e83:	68 e4 21 02 c0       	push   0xc00221e4
c0012e88:	e8 f0 e4 ff ff       	call   c001137d <KePanic(char const*)>
c0012e8d:	83 c4 10             	add    esp,0x10
c0012e90:	31 ff                	xor    edi,edi
c0012e92:	50                   	push   eax
c0012e93:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012e97:	53                   	push   ebx
c0012e98:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012e9f:	56                   	push   esi
c0012ea0:	e8 04 fc ff ff       	call   c0012aa9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ea5:	83 c4 10             	add    esp,0x10
c0012ea8:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0012eac:	89 d0                	mov    eax,edx
c0012eae:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0012eb2:	c1 e0 08             	shl    eax,0x8
c0012eb5:	09 c2                	or     edx,eax
c0012eb7:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012ebb:	c1 e2 08             	shl    edx,0x8
c0012ebe:	09 c2                	or     edx,eax
c0012ec0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012ec4:	7e 76                	jle    c0012f3c <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0012ec6:	85 d2                	test   edx,edx
c0012ec8:	75 25                	jne    c0012eef <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012eca:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012ecf:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012ed3:	50                   	push   eax
c0012ed4:	6a 00                	push   0x0
c0012ed6:	6a 00                	push   0x0
c0012ed8:	56                   	push   esi
c0012ed9:	e8 75 fe ff ff       	call   c0012d53 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012ede:	83 c4 10             	add    esp,0x10
c0012ee1:	89 c2                	mov    edx,eax
c0012ee3:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012ee6:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012ee9:	c1 f8 10             	sar    eax,0x10
c0012eec:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012eef:	55                   	push   ebp
c0012ef0:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012ef4:	55                   	push   ebp
c0012ef5:	52                   	push   edx
c0012ef6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012efa:	56                   	push   esi
c0012efb:	e8 a9 fb ff ff       	call   c0012aa9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f00:	83 c4 0c             	add    esp,0xc
c0012f03:	6a 27                	push   0x27
c0012f05:	6a 00                	push   0x0
c0012f07:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012f0b:	51                   	push   ecx
c0012f0c:	e8 df d5 fe ff       	call   c00004f0 <memset>
c0012f11:	83 c4 0c             	add    esp,0xc
c0012f14:	6b c7 27             	imul   eax,edi,0x27
c0012f17:	6a 27                	push   0x27
c0012f19:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012f20:	50                   	push   eax
c0012f21:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012f25:	51                   	push   ecx
c0012f26:	e8 55 d7 fe ff       	call   c0000680 <strncpy>
c0012f2b:	83 c4 0c             	add    esp,0xc
c0012f2e:	55                   	push   ebp
c0012f2f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012f33:	52                   	push   edx
c0012f34:	56                   	push   esi
c0012f35:	e8 93 fc ff ff       	call   c0012bcd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f3a:	eb 19                	jmp    c0012f55 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0012f3c:	85 d2                	test   edx,edx
c0012f3e:	74 18                	je     c0012f58 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0012f40:	51                   	push   ecx
c0012f41:	51                   	push   ecx
c0012f42:	52                   	push   edx
c0012f43:	56                   	push   esi
c0012f44:	e8 c0 fc ff ff       	call   c0012c09 <CmFreeExtent(Reghive_Tag*, int)>
c0012f49:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012f4d:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012f51:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012f55:	83 c4 10             	add    esp,0x10
c0012f58:	47                   	inc    edi
c0012f59:	83 c3 03             	add    ebx,0x3
c0012f5c:	83 ff 07             	cmp    edi,0x7
c0012f5f:	0f 85 43 ff ff ff    	jne    c0012ea8 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012f65:	50                   	push   eax
c0012f66:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012f6a:	50                   	push   eax
c0012f6b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012f72:	56                   	push   esi
c0012f73:	e8 55 fc ff ff       	call   c0012bcd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012f78:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012f7e:	5b                   	pop    ebx
c0012f7f:	5e                   	pop    esi
c0012f80:	5f                   	pop    edi
c0012f81:	5d                   	pop    ebp
c0012f82:	c3                   	ret    

c0012f83 <CmGetMatch(char*, char*, bool, bool*)>:
c0012f83:	56                   	push   esi
c0012f84:	53                   	push   ebx
c0012f85:	50                   	push   eax
c0012f86:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012f8a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012f8f:	74 25                	je     c0012fb6 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012f91:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012f94:	31 db                	xor    ebx,ebx
c0012f96:	50                   	push   eax
c0012f97:	50                   	push   eax
c0012f98:	8d 04 9d 80 36 02 c0 	lea    eax,[ebx*4-0x3ffdc980]
c0012f9f:	50                   	push   eax
c0012fa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fa4:	e8 a7 d7 fe ff       	call   c0000750 <strcmp>
c0012fa9:	83 c4 10             	add    esp,0x10
c0012fac:	85 c0                	test   eax,eax
c0012fae:	74 2e                	je     c0012fde <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012fb0:	43                   	inc    ebx
c0012fb1:	83 fb 3f             	cmp    ebx,0x3f
c0012fb4:	75 e0                	jne    c0012f96 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012fb6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012fb9:	31 db                	xor    ebx,ebx
c0012fbb:	8d 04 9d 80 36 02 c0 	lea    eax,[ebx*4-0x3ffdc980]
c0012fc2:	51                   	push   ecx
c0012fc3:	51                   	push   ecx
c0012fc4:	50                   	push   eax
c0012fc5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012fc9:	e8 82 d7 fe ff       	call   c0000750 <strcmp>
c0012fce:	83 c4 10             	add    esp,0x10
c0012fd1:	85 c0                	test   eax,eax
c0012fd3:	74 09                	je     c0012fde <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012fd5:	43                   	inc    ebx
c0012fd6:	83 fb 3f             	cmp    ebx,0x3f
c0012fd9:	75 e0                	jne    c0012fbb <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012fdb:	83 cb ff             	or     ebx,0xffffffff
c0012fde:	89 d8                	mov    eax,ebx
c0012fe0:	5a                   	pop    edx
c0012fe1:	5b                   	pop    ebx
c0012fe2:	5e                   	pop    esi
c0012fe3:	c3                   	ret    

c0012fe4 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012fe4:	55                   	push   ebp
c0012fe5:	31 c0                	xor    eax,eax
c0012fe7:	57                   	push   edi
c0012fe8:	56                   	push   esi
c0012fe9:	53                   	push   ebx
c0012fea:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012fee:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012ff2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012ff4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012ff8:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012ffb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012fff:	83 fd 1f             	cmp    ebp,0x1f
c0013002:	7f 0b                	jg     c001300f <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0013004:	0f b6 c2             	movzx  eax,dl
c0013007:	d3 e0                	shl    eax,cl
c0013009:	09 07                	or     DWORD PTR [edi],eax
c001300b:	b0 01                	mov    al,0x1
c001300d:	01 33                	add    DWORD PTR [ebx],esi
c001300f:	5b                   	pop    ebx
c0013010:	5e                   	pop    esi
c0013011:	5f                   	pop    edi
c0013012:	5d                   	pop    ebp
c0013013:	c3                   	ret    

c0013014 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0013014:	57                   	push   edi
c0013015:	56                   	push   esi
c0013016:	53                   	push   ebx
c0013017:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001301b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001301f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0013023:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013027:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0013029:	7c 17                	jl     c0013042 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c001302b:	8b 17                	mov    edx,DWORD PTR [edi]
c001302d:	b8 01 00 00 00       	mov    eax,0x1
c0013032:	d3 e0                	shl    eax,cl
c0013034:	48                   	dec    eax
c0013035:	21 d0                	and    eax,edx
c0013037:	d3 ea                	shr    edx,cl
c0013039:	89 17                	mov    DWORD PTR [edi],edx
c001303b:	29 0b                	sub    DWORD PTR [ebx],ecx
c001303d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013040:	eb 05                	jmp    c0013047 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0013042:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013045:	31 c0                	xor    eax,eax
c0013047:	5b                   	pop    ebx
c0013048:	5e                   	pop    esi
c0013049:	5f                   	pop    edi
c001304a:	c3                   	ret    

c001304b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c001304b:	83 ec 40             	sub    esp,0x40
c001304e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013052:	50                   	push   eax
c0013053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001305b:	e8 49 fa ff ff       	call   c0012aa9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013060:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0013064:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0013068:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c001306c:	89 10                	mov    DWORD PTR [eax],edx
c001306e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0013071:	83 c4 4c             	add    esp,0x4c
c0013074:	c3                   	ret    

c0013075 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0013075:	55                   	push   ebp
c0013076:	57                   	push   edi
c0013077:	56                   	push   esi
c0013078:	53                   	push   ebx
c0013079:	83 ec 40             	sub    esp,0x40
c001307c:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0013080:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0013084:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0013088:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c001308c:	53                   	push   ebx
c001308d:	56                   	push   esi
c001308e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013092:	e8 12 fa ff ff       	call   c0012aa9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013097:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c001309b:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c001309f:	83 c4 0c             	add    esp,0xc
c00130a2:	53                   	push   ebx
c00130a3:	56                   	push   esi
c00130a4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00130a8:	e8 20 fb ff ff       	call   c0012bcd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00130ad:	83 c4 4c             	add    esp,0x4c
c00130b0:	5b                   	pop    ebx
c00130b1:	5e                   	pop    esi
c00130b2:	5f                   	pop    edi
c00130b3:	5d                   	pop    ebp
c00130b4:	c3                   	ret    

c00130b5 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00130b5:	55                   	push   ebp
c00130b6:	57                   	push   edi
c00130b7:	56                   	push   esi
c00130b8:	31 f6                	xor    esi,esi
c00130ba:	53                   	push   ebx
c00130bb:	31 db                	xor    ebx,ebx
c00130bd:	83 ec 40             	sub    esp,0x40
c00130c0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00130c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00130d0:	6a 12                	push   0x12
c00130d2:	68 ee 00 00 00       	push   0xee
c00130d7:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00130db:	e8 10 d4 fe ff       	call   c00004f0 <memset>
c00130e0:	83 c4 10             	add    esp,0x10
c00130e3:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00130e7:	6a 08                	push   0x8
c00130e9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00130ed:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00130f1:	50                   	push   eax
c00130f2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00130f6:	55                   	push   ebp
c00130f7:	57                   	push   edi
c00130f8:	e8 e7 fe ff ff       	call   c0012fe4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00130fd:	83 c4 10             	add    esp,0x10
c0013100:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013104:	50                   	push   eax
c0013105:	6a 06                	push   0x6
c0013107:	55                   	push   ebp
c0013108:	57                   	push   edi
c0013109:	e8 06 ff ff ff       	call   c0013014 <CmGetShift(unsigned int*, int*, int, bool*)>
c001310e:	83 c4 10             	add    esp,0x10
c0013111:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013116:	74 07                	je     c001311f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0013118:	46                   	inc    esi
c0013119:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c001311d:	eb e1                	jmp    c0013100 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001311f:	43                   	inc    ebx
c0013120:	83 fb 12             	cmp    ebx,0x12
c0013123:	75 c2                	jne    c00130e7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0013125:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0013129:	31 db                	xor    ebx,ebx
c001312b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001312e:	50                   	push   eax
c001312f:	50                   	push   eax
c0013130:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0013135:	43                   	inc    ebx
c0013136:	8d 04 85 80 36 02 c0 	lea    eax,[eax*4-0x3ffdc980]
c001313d:	50                   	push   eax
c001313e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0013142:	e8 f9 d6 fe ff       	call   c0000840 <strcat>
c0013147:	83 c4 10             	add    esp,0x10
c001314a:	83 fb 18             	cmp    ebx,0x18
c001314d:	75 df                	jne    c001312e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001314f:	83 c4 3c             	add    esp,0x3c
c0013152:	31 c0                	xor    eax,eax
c0013154:	5b                   	pop    ebx
c0013155:	5e                   	pop    esi
c0013156:	5f                   	pop    edi
c0013157:	5d                   	pop    ebp
c0013158:	c3                   	ret    

c0013159 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013159:	83 ec 40             	sub    esp,0x40
c001315c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013160:	50                   	push   eax
c0013161:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013165:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013169:	e8 3b f9 ff ff       	call   c0012aa9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001316e:	58                   	pop    eax
c001316f:	5a                   	pop    edx
c0013170:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013174:	8d 44 24 15          	lea    eax,[esp+0x15]
c0013178:	50                   	push   eax
c0013179:	e8 37 ff ff ff       	call   c00130b5 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c001317e:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0013183:	83 c4 4c             	add    esp,0x4c
c0013186:	c3                   	ret    

c0013187 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0013187:	55                   	push   ebp
c0013188:	57                   	push   edi
c0013189:	56                   	push   esi
c001318a:	53                   	push   ebx
c001318b:	31 db                	xor    ebx,ebx
c001318d:	83 ec 70             	sub    esp,0x70
c0013190:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0013197:	6a 30                	push   0x30
c0013199:	6a 00                	push   0x0
c001319b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001319f:	56                   	push   esi
c00131a0:	e8 4b d3 fe ff       	call   c00004f0 <memset>
c00131a5:	83 c4 10             	add    esp,0x10
c00131a8:	83 ec 0c             	sub    esp,0xc
c00131ab:	57                   	push   edi
c00131ac:	e8 bf d3 fe ff       	call   c0000570 <strlen>
c00131b1:	83 c4 10             	add    esp,0x10
c00131b4:	39 d8                	cmp    eax,ebx
c00131b6:	76 16                	jbe    c00131ce <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00131b8:	83 ec 0c             	sub    esp,0xc
c00131bb:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00131bf:	50                   	push   eax
c00131c0:	e8 6b d7 fe ff       	call   c0000930 <toupper>
c00131c5:	83 c4 10             	add    esp,0x10
c00131c8:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00131cb:	43                   	inc    ebx
c00131cc:	eb da                	jmp    c00131a8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00131ce:	31 f6                	xor    esi,esi
c00131d0:	52                   	push   edx
c00131d1:	31 ff                	xor    edi,edi
c00131d3:	6a 18                	push   0x18
c00131d5:	6a 3f                	push   0x3f
c00131d7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00131db:	50                   	push   eax
c00131dc:	e8 0f d3 fe ff       	call   c00004f0 <memset>
c00131e1:	83 c4 10             	add    esp,0x10
c00131e4:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c00131e8:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c00131ec:	84 c0                	test   al,al
c00131ee:	0f 84 b0 00 00 00    	je     c00132a4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00131f4:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00131f8:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00131fd:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013201:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0013206:	8d 6e 01             	lea    ebp,[esi+0x1]
c0013209:	83 ec 0c             	sub    esp,0xc
c001320c:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0013210:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0013214:	53                   	push   ebx
c0013215:	e8 56 d3 fe ff       	call   c0000570 <strlen>
c001321a:	83 c4 10             	add    esp,0x10
c001321d:	85 c0                	test   eax,eax
c001321f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013223:	74 0b                	je     c0013230 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0013225:	50                   	push   eax
c0013226:	6a 01                	push   0x1
c0013228:	53                   	push   ebx
c0013229:	8d 44 24 20          	lea    eax,[esp+0x20]
c001322d:	50                   	push   eax
c001322e:	eb 0a                	jmp    c001323a <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013230:	50                   	push   eax
c0013231:	6a 00                	push   0x0
c0013233:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0013237:	50                   	push   eax
c0013238:	6a 00                	push   0x0
c001323a:	e8 44 fd ff ff       	call   c0012f83 <CmGetMatch(char*, char*, bool, bool*)>
c001323f:	83 c4 10             	add    esp,0x10
c0013242:	83 f8 ff             	cmp    eax,0xffffffff
c0013245:	75 1a                	jne    c0013261 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0013247:	83 ec 0c             	sub    esp,0xc
c001324a:	68 f9 21 02 c0       	push   0xc00221f9
c001324f:	e8 29 e1 ff ff       	call   c001137d <KePanic(char const*)>
c0013254:	83 c4 10             	add    esp,0x10
c0013257:	b8 02 00 00 00       	mov    eax,0x2
c001325c:	e9 bc 00 00 00       	jmp    c001331d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013261:	83 ff 18             	cmp    edi,0x18
c0013264:	75 1a                	jne    c0013280 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0013266:	83 ec 0c             	sub    esp,0xc
c0013269:	68 0e 22 02 c0       	push   0xc002220e
c001326e:	e8 0a e1 ff ff       	call   c001137d <KePanic(char const*)>
c0013273:	83 c4 10             	add    esp,0x10
c0013276:	b8 01 00 00 00       	mov    eax,0x1
c001327b:	e9 9d 00 00 00       	jmp    c001331d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013280:	47                   	inc    edi
c0013281:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013286:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001328a:	74 02                	je     c001328e <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c001328c:	89 ee                	mov    esi,ebp
c001328e:	83 ec 0c             	sub    esp,0xc
c0013291:	53                   	push   ebx
c0013292:	e8 d9 d2 fe ff       	call   c0000570 <strlen>
c0013297:	83 c4 10             	add    esp,0x10
c001329a:	85 c0                	test   eax,eax
c001329c:	74 06                	je     c00132a4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001329e:	46                   	inc    esi
c001329f:	e9 40 ff ff ff       	jmp    c00131e4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00132a4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00132ac:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00132b4:	31 f6                	xor    esi,esi
c00132b6:	50                   	push   eax
c00132b7:	31 ff                	xor    edi,edi
c00132b9:	6a 12                	push   0x12
c00132bb:	68 ee 00 00 00       	push   0xee
c00132c0:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00132c7:	e8 24 d2 fe ff       	call   c00004f0 <memset>
c00132cc:	83 c4 10             	add    esp,0x10
c00132cf:	83 fe 17             	cmp    esi,0x17
c00132d2:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00132d6:	7e 26                	jle    c00132fe <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c00132d8:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00132dc:	50                   	push   eax
c00132dd:	6a 08                	push   0x8
c00132df:	55                   	push   ebp
c00132e0:	53                   	push   ebx
c00132e1:	e8 2e fd ff ff       	call   c0013014 <CmGetShift(unsigned int*, int*, int, bool*)>
c00132e6:	83 c4 10             	add    esp,0x10
c00132e9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00132ee:	74 26                	je     c0013316 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c00132f0:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00132f7:	4e                   	dec    esi
c00132f8:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00132fb:	47                   	inc    edi
c00132fc:	eb 1c                	jmp    c001331a <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00132fe:	6a 06                	push   0x6
c0013300:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0013305:	50                   	push   eax
c0013306:	55                   	push   ebp
c0013307:	53                   	push   ebx
c0013308:	e8 d7 fc ff ff       	call   c0012fe4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001330d:	83 c4 10             	add    esp,0x10
c0013310:	84 c0                	test   al,al
c0013312:	75 06                	jne    c001331a <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0013314:	eb c2                	jmp    c00132d8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0013316:	31 c0                	xor    eax,eax
c0013318:	eb 03                	jmp    c001331d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001331a:	46                   	inc    esi
c001331b:	eb b2                	jmp    c00132cf <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c001331d:	83 c4 6c             	add    esp,0x6c
c0013320:	5b                   	pop    ebx
c0013321:	5e                   	pop    esi
c0013322:	5f                   	pop    edi
c0013323:	5d                   	pop    ebp
c0013324:	c3                   	ret    

c0013325 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013325:	53                   	push   ebx
c0013326:	83 ec 3c             	sub    esp,0x3c
c0013329:	6a 2b                	push   0x2b
c001332b:	6a 00                	push   0x0
c001332d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013331:	53                   	push   ebx
c0013332:	e8 b9 d1 fe ff       	call   c00004f0 <memset>
c0013337:	58                   	pop    eax
c0013338:	5a                   	pop    edx
c0013339:	8d 44 24 11          	lea    eax,[esp+0x11]
c001333d:	50                   	push   eax
c001333e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013342:	e8 40 fe ff ff       	call   c0013187 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013347:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c001334c:	83 c4 0c             	add    esp,0xc
c001334f:	6a 15                	push   0x15
c0013351:	6a 00                	push   0x0
c0013353:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013357:	50                   	push   eax
c0013358:	e8 93 d1 fe ff       	call   c00004f0 <memset>
c001335d:	53                   	push   ebx
c001335e:	6a 00                	push   0x0
c0013360:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013364:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013368:	e8 e6 f9 ff ff       	call   c0012d53 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001336d:	83 c4 58             	add    esp,0x58
c0013370:	5b                   	pop    ebx
c0013371:	c3                   	ret    

c0013372 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013372:	56                   	push   esi
c0013373:	53                   	push   ebx
c0013374:	83 ec 48             	sub    esp,0x48
c0013377:	6a 12                	push   0x12
c0013379:	68 ff 00 00 00       	push   0xff
c001337e:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013382:	56                   	push   esi
c0013383:	e8 68 d1 fe ff       	call   c00004f0 <memset>
c0013388:	5a                   	pop    edx
c0013389:	59                   	pop    ecx
c001338a:	56                   	push   esi
c001338b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001338f:	e8 f3 fd ff ff       	call   c0013187 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013394:	83 c4 10             	add    esp,0x10
c0013397:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001339b:	85 db                	test   ebx,ebx
c001339d:	74 42                	je     c00133e1 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001339f:	50                   	push   eax
c00133a0:	8d 44 24 19          	lea    eax,[esp+0x19]
c00133a4:	50                   	push   eax
c00133a5:	53                   	push   ebx
c00133a6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00133aa:	e8 fa f6 ff ff       	call   c0012aa9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00133af:	83 c4 0c             	add    esp,0xc
c00133b2:	6a 12                	push   0x12
c00133b4:	8d 44 24 21          	lea    eax,[esp+0x21]
c00133b8:	50                   	push   eax
c00133b9:	56                   	push   esi
c00133ba:	e8 c1 cf fe ff       	call   c0000380 <memcmp>
c00133bf:	83 c4 10             	add    esp,0x10
c00133c2:	85 c0                	test   eax,eax
c00133c4:	74 1e                	je     c00133e4 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00133c6:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00133cb:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00133d0:	c1 e3 08             	shl    ebx,0x8
c00133d3:	09 d8                	or     eax,ebx
c00133d5:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00133da:	c1 e3 10             	shl    ebx,0x10
c00133dd:	09 c3                	or     ebx,eax
c00133df:	eb ba                	jmp    c001339b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00133e1:	83 cb ff             	or     ebx,0xffffffff
c00133e4:	89 d8                	mov    eax,ebx
c00133e6:	83 c4 44             	add    esp,0x44
c00133e9:	5b                   	pop    ebx
c00133ea:	5e                   	pop    esi
c00133eb:	c3                   	ret    

c00133ec <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00133ec:	57                   	push   edi
c00133ed:	56                   	push   esi
c00133ee:	53                   	push   ebx
c00133ef:	83 ec 34             	sub    esp,0x34
c00133f2:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00133f6:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00133fa:	6a 2b                	push   0x2b
c00133fc:	6a 00                	push   0x0
c00133fe:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013402:	53                   	push   ebx
c0013403:	e8 e8 d0 fe ff       	call   c00004f0 <memset>
c0013408:	58                   	pop    eax
c0013409:	5a                   	pop    edx
c001340a:	8d 44 24 11          	lea    eax,[esp+0x11]
c001340e:	50                   	push   eax
c001340f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013413:	e8 6f fd ff ff       	call   c0013187 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013418:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001341c:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0013420:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013424:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013428:	53                   	push   ebx
c0013429:	6a 00                	push   0x0
c001342b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001342f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013433:	e8 1b f9 ff ff       	call   c0012d53 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013438:	83 c4 50             	add    esp,0x50
c001343b:	5b                   	pop    ebx
c001343c:	5e                   	pop    esi
c001343d:	5f                   	pop    edi
c001343e:	c3                   	ret    

c001343f <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001343f:	55                   	push   ebp
c0013440:	57                   	push   edi
c0013441:	56                   	push   esi
c0013442:	53                   	push   ebx
c0013443:	83 ec 40             	sub    esp,0x40
c0013446:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c001344a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001344e:	6a 2b                	push   0x2b
c0013450:	6a 00                	push   0x0
c0013452:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013456:	56                   	push   esi
c0013457:	e8 94 d0 fe ff       	call   c00004f0 <memset>
c001345c:	5f                   	pop    edi
c001345d:	89 ef                	mov    edi,ebp
c001345f:	58                   	pop    eax
c0013460:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013464:	50                   	push   eax
c0013465:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013469:	e8 19 fd ff ff       	call   c0013187 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001346e:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0013473:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013478:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c001347d:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013482:	83 c4 10             	add    esp,0x10
c0013485:	85 ed                	test   ebp,ebp
c0013487:	74 14                	je     c001349d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013489:	51                   	push   ecx
c001348a:	51                   	push   ecx
c001348b:	57                   	push   edi
c001348c:	53                   	push   ebx
c001348d:	e8 09 f7 ff ff       	call   c0012b9b <CmGetNext(Reghive_Tag*, int)>
c0013492:	83 c4 10             	add    esp,0x10
c0013495:	85 c0                	test   eax,eax
c0013497:	74 04                	je     c001349d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013499:	89 c7                	mov    edi,eax
c001349b:	eb e8                	jmp    c0013485 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c001349d:	56                   	push   esi
c001349e:	6a 00                	push   0x0
c00134a0:	57                   	push   edi
c00134a1:	53                   	push   ebx
c00134a2:	e8 ac f8 ff ff       	call   c0012d53 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00134a7:	83 c4 0c             	add    esp,0xc
c00134aa:	89 c7                	mov    edi,eax
c00134ac:	56                   	push   esi
c00134ad:	50                   	push   eax
c00134ae:	53                   	push   ebx
c00134af:	e8 f5 f5 ff ff       	call   c0012aa9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00134b4:	58                   	pop    eax
c00134b5:	5a                   	pop    edx
c00134b6:	6a 6c                	push   0x6c
c00134b8:	6a 00                	push   0x0
c00134ba:	6a 00                	push   0x0
c00134bc:	68 1f 22 02 c0       	push   0xc002221f
c00134c1:	57                   	push   edi
c00134c2:	53                   	push   ebx
c00134c3:	e8 24 ff ff ff       	call   c00133ec <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00134c8:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00134cc:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00134d0:	c1 e8 10             	shr    eax,0x10
c00134d3:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00134d7:	83 c4 1c             	add    esp,0x1c
c00134da:	56                   	push   esi
c00134db:	57                   	push   edi
c00134dc:	53                   	push   ebx
c00134dd:	e8 eb f6 ff ff       	call   c0012bcd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00134e2:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00134e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00134ec:	c1 e0 08             	shl    eax,0x8
c00134ef:	09 c2                	or     edx,eax
c00134f1:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00134f6:	83 c4 4c             	add    esp,0x4c
c00134f9:	c1 e0 10             	shl    eax,0x10
c00134fc:	5b                   	pop    ebx
c00134fd:	09 d0                	or     eax,edx
c00134ff:	5e                   	pop    esi
c0013500:	5f                   	pop    edi
c0013501:	5d                   	pop    ebp
c0013502:	c3                   	ret    

c0013503 <zStrtok(char*, char const*)>:
c0013503:	55                   	push   ebp
c0013504:	57                   	push   edi
c0013505:	56                   	push   esi
c0013506:	53                   	push   ebx
c0013507:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001350b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001350f:	85 db                	test   ebx,ebx
c0013511:	74 2f                	je     c0013542 <zStrtok(char*, char const*)+0x3f>
c0013513:	85 c0                	test   eax,eax
c0013515:	75 09                	jne    c0013520 <zStrtok(char*, char const*)+0x1d>
c0013517:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c001351c:	85 c0                	test   eax,eax
c001351e:	74 50                	je     c0013570 <zStrtok(char*, char const*)+0x6d>
c0013520:	31 c9                	xor    ecx,ecx
c0013522:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013526:	74 03                	je     c001352b <zStrtok(char*, char const*)+0x28>
c0013528:	41                   	inc    ecx
c0013529:	eb f7                	jmp    c0013522 <zStrtok(char*, char const*)+0x1f>
c001352b:	31 d2                	xor    edx,edx
c001352d:	39 ca                	cmp    edx,ecx
c001352f:	74 15                	je     c0013546 <zStrtok(char*, char const*)+0x43>
c0013531:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013535:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0013538:	8d 3c 10             	lea    edi,[eax+edx*1]
c001353b:	39 ee                	cmp    esi,ebp
c001353d:	74 13                	je     c0013552 <zStrtok(char*, char const*)+0x4f>
c001353f:	42                   	inc    edx
c0013540:	eb eb                	jmp    c001352d <zStrtok(char*, char const*)+0x2a>
c0013542:	31 c0                	xor    eax,eax
c0013544:	eb 2a                	jmp    c0013570 <zStrtok(char*, char const*)+0x6d>
c0013546:	c7 05 f0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ef0,0x0
c0013550:	eb 1e                	jmp    c0013570 <zStrtok(char*, char const*)+0x6d>
c0013552:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013555:	39 ce                	cmp    esi,ecx
c0013557:	75 0a                	jne    c0013563 <zStrtok(char*, char const*)+0x60>
c0013559:	40                   	inc    eax
c001355a:	a3 f0 8e 02 c0       	mov    ds:0xc0028ef0,eax
c001355f:	89 d8                	mov    eax,ebx
c0013561:	eb 0d                	jmp    c0013570 <zStrtok(char*, char const*)+0x6d>
c0013563:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013567:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001356a:	89 15 f0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ef0,edx
c0013570:	5b                   	pop    ebx
c0013571:	5e                   	pop    esi
c0013572:	5f                   	pop    edi
c0013573:	5d                   	pop    ebp
c0013574:	c3                   	ret    

c0013575 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013575:	57                   	push   edi
c0013576:	56                   	push   esi
c0013577:	53                   	push   ebx
c0013578:	81 ec 08 01 00 00    	sub    esp,0x108
c001357e:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013585:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001358c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013590:	53                   	push   ebx
c0013591:	e8 aa d0 fe ff       	call   c0000640 <strcpy>
c0013596:	59                   	pop    ecx
c0013597:	5e                   	pop    esi
c0013598:	68 83 25 02 c0       	push   0xc0022583
c001359d:	53                   	push   ebx
c001359e:	bb 01 00 00 00       	mov    ebx,0x1
c00135a3:	e8 5b ff ff ff       	call   c0013503 <zStrtok(char*, char const*)>
c00135a8:	83 c4 10             	add    esp,0x10
c00135ab:	85 c0                	test   eax,eax
c00135ad:	74 3b                	je     c00135ea <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00135af:	52                   	push   edx
c00135b0:	50                   	push   eax
c00135b1:	6a 01                	push   0x1
c00135b3:	57                   	push   edi
c00135b4:	e8 b9 fd ff ff       	call   c0013372 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00135b9:	59                   	pop    ecx
c00135ba:	89 c3                	mov    ebx,eax
c00135bc:	5e                   	pop    esi
c00135bd:	68 83 25 02 c0       	push   0xc0022583
c00135c2:	6a 00                	push   0x0
c00135c4:	e8 3a ff ff ff       	call   c0013503 <zStrtok(char*, char const*)>
c00135c9:	83 c4 10             	add    esp,0x10
c00135cc:	89 c6                	mov    esi,eax
c00135ce:	85 c0                	test   eax,eax
c00135d0:	74 18                	je     c00135ea <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00135d2:	52                   	push   edx
c00135d3:	52                   	push   edx
c00135d4:	53                   	push   ebx
c00135d5:	57                   	push   edi
c00135d6:	e8 81 f5 ff ff       	call   c0012b5c <CmEnterDirectory(Reghive_Tag*, int)>
c00135db:	83 c4 10             	add    esp,0x10
c00135de:	89 c3                	mov    ebx,eax
c00135e0:	83 f8 ff             	cmp    eax,0xffffffff
c00135e3:	74 05                	je     c00135ea <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00135e5:	50                   	push   eax
c00135e6:	56                   	push   esi
c00135e7:	53                   	push   ebx
c00135e8:	eb c9                	jmp    c00135b3 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00135ea:	81 c4 00 01 00 00    	add    esp,0x100
c00135f0:	89 d8                	mov    eax,ebx
c00135f2:	5b                   	pop    ebx
c00135f3:	5e                   	pop    esi
c00135f4:	5f                   	pop    edi
c00135f5:	c3                   	ret    

c00135f6 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00135f6:	55                   	push   ebp
c00135f7:	57                   	push   edi
c00135f8:	56                   	push   esi
c00135f9:	53                   	push   ebx
c00135fa:	83 ec 5c             	sub    esp,0x5c
c00135fd:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013601:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013605:	85 db                	test   ebx,ebx
c0013607:	0f 8e 84 00 00 00    	jle    c0013691 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c001360d:	31 ed                	xor    ebp,ebp
c001360f:	57                   	push   edi
c0013610:	6a 32                	push   0x32
c0013612:	6a 00                	push   0x0
c0013614:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013618:	57                   	push   edi
c0013619:	e8 d2 ce fe ff       	call   c00004f0 <memset>
c001361e:	83 c4 0c             	add    esp,0xc
c0013621:	57                   	push   edi
c0013622:	53                   	push   ebx
c0013623:	56                   	push   esi
c0013624:	e8 30 fb ff ff       	call   c0013159 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013629:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001362d:	83 c4 10             	add    esp,0x10
c0013630:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013634:	7d 13                	jge    c0013649 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013636:	83 ec 0c             	sub    esp,0xc
c0013639:	45                   	inc    ebp
c001363a:	68 27 29 02 c0       	push   0xc0022927
c001363f:	e8 01 73 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013644:	83 c4 10             	add    esp,0x10
c0013647:	eb e7                	jmp    c0013630 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013649:	51                   	push   ecx
c001364a:	57                   	push   edi
c001364b:	53                   	push   ebx
c001364c:	68 25 22 02 c0       	push   0xc0022225
c0013651:	e8 ef 72 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013656:	83 c4 10             	add    esp,0x10
c0013659:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001365e:	75 1e                	jne    c001367e <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0013660:	52                   	push   edx
c0013661:	52                   	push   edx
c0013662:	53                   	push   ebx
c0013663:	56                   	push   esi
c0013664:	e8 f3 f4 ff ff       	call   c0012b5c <CmEnterDirectory(Reghive_Tag*, int)>
c0013669:	83 c4 0c             	add    esp,0xc
c001366c:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0013670:	8d 51 04             	lea    edx,[ecx+0x4]
c0013673:	52                   	push   edx
c0013674:	50                   	push   eax
c0013675:	56                   	push   esi
c0013676:	e8 7b ff ff ff       	call   c00135f6 <CmDisplayTree(Reghive_Tag*, int, int)>
c001367b:	83 c4 10             	add    esp,0x10
c001367e:	50                   	push   eax
c001367f:	50                   	push   eax
c0013680:	53                   	push   ebx
c0013681:	56                   	push   esi
c0013682:	e8 14 f5 ff ff       	call   c0012b9b <CmGetNext(Reghive_Tag*, int)>
c0013687:	83 c4 10             	add    esp,0x10
c001368a:	89 c3                	mov    ebx,eax
c001368c:	e9 74 ff ff ff       	jmp    c0013605 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013691:	83 c4 5c             	add    esp,0x5c
c0013694:	5b                   	pop    ebx
c0013695:	5e                   	pop    esi
c0013696:	5f                   	pop    edi
c0013697:	5d                   	pop    ebp
c0013698:	c3                   	ret    

c0013699 <CmSplitFinalSlashInPlace(char*)>:
c0013699:	53                   	push   ebx
c001369a:	83 ec 14             	sub    esp,0x14
c001369d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00136a1:	53                   	push   ebx
c00136a2:	e8 c9 ce fe ff       	call   c0000570 <strlen>
c00136a7:	83 c4 10             	add    esp,0x10
c00136aa:	48                   	dec    eax
c00136ab:	85 c0                	test   eax,eax
c00136ad:	74 15                	je     c00136c4 <CmSplitFinalSlashInPlace(char*)+0x2b>
c00136af:	8d 14 03             	lea    edx,[ebx+eax*1]
c00136b2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00136b6:	75 09                	jne    c00136c1 <CmSplitFinalSlashInPlace(char*)+0x28>
c00136b8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00136bb:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00136bf:	eb 05                	jmp    c00136c6 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00136c1:	48                   	dec    eax
c00136c2:	eb e7                	jmp    c00136ab <CmSplitFinalSlashInPlace(char*)+0x12>
c00136c4:	31 c0                	xor    eax,eax
c00136c6:	83 c4 08             	add    esp,0x8
c00136c9:	5b                   	pop    ebx
c00136ca:	c3                   	ret    

c00136cb <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00136cb:	55                   	push   ebp
c00136cc:	57                   	push   edi
c00136cd:	56                   	push   esi
c00136ce:	53                   	push   ebx
c00136cf:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00136d5:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00136dc:	8a 13                	mov    dl,BYTE PTR [ebx]
c00136de:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00136e1:	80 fa 40             	cmp    dl,0x40
c00136e4:	75 1c                	jne    c0013702 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c00136e6:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c00136e9:	85 c9                	test   ecx,ecx
c00136eb:	0f 84 09 01 00 00    	je     c00137fa <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00136f1:	8d 43 01             	lea    eax,[ebx+0x1]
c00136f4:	83 f9 3a             	cmp    ecx,0x3a
c00136f7:	74 04                	je     c00136fd <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c00136f9:	89 c3                	mov    ebx,eax
c00136fb:	eb e9                	jmp    c00136e6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00136fd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013700:	89 c3                	mov    ebx,eax
c0013702:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013706:	50                   	push   eax
c0013707:	6a 40                	push   0x40
c0013709:	6a 00                	push   0x0
c001370b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001370f:	50                   	push   eax
c0013710:	e8 db cd fe ff       	call   c00004f0 <memset>
c0013715:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001371c:	31 c0                	xor    eax,eax
c001371e:	83 c4 10             	add    esp,0x10
c0013721:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0013726:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013729:	89 d1                	mov    ecx,edx
c001372b:	85 d2                	test   edx,edx
c001372d:	0f 84 c7 00 00 00    	je     c00137fa <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013733:	3d c7 00 00 00       	cmp    eax,0xc7
c0013738:	0f 8f bc 00 00 00    	jg     c00137fa <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001373e:	83 fa 0a             	cmp    edx,0xa
c0013741:	0f 85 a4 00 00 00    	jne    c00137eb <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0013747:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001374c:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013751:	89 c8                	mov    eax,ecx
c0013753:	a8 df                	test   al,0xdf
c0013755:	0f 94 c2             	sete   dl
c0013758:	83 f9 23             	cmp    ecx,0x23
c001375b:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013760:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0013764:	80 e2 01             	and    dl,0x1
c0013767:	75 4a                	jne    c00137b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013769:	83 e8 09             	sub    eax,0x9
c001376c:	3c 01                	cmp    al,0x1
c001376e:	76 43                	jbe    c00137b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013770:	83 f9 5b             	cmp    ecx,0x5b
c0013773:	75 42                	jne    c00137b7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0013775:	83 fe 40             	cmp    esi,0x40
c0013778:	75 39                	jne    c00137b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c001377a:	83 ec 0c             	sub    esp,0xc
c001377d:	8d 54 24 65          	lea    edx,[esp+0x65]
c0013781:	52                   	push   edx
c0013782:	e8 e9 cd fe ff       	call   c0000570 <strlen>
c0013787:	83 c4 10             	add    esp,0x10
c001378a:	83 f8 3f             	cmp    eax,0x3f
c001378d:	77 6b                	ja     c00137fa <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001378f:	50                   	push   eax
c0013790:	50                   	push   eax
c0013791:	8d 54 24 61          	lea    edx,[esp+0x61]
c0013795:	52                   	push   edx
c0013796:	8d 54 24 24          	lea    edx,[esp+0x24]
c001379a:	52                   	push   edx
c001379b:	e8 a0 ce fe ff       	call   c0000640 <strcpy>
c00137a0:	58                   	pop    eax
c00137a1:	8d 54 24 24          	lea    edx,[esp+0x24]
c00137a5:	52                   	push   edx
c00137a6:	e8 c5 cd fe ff       	call   c0000570 <strlen>
c00137ab:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00137b0:	83 c4 10             	add    esp,0x10
c00137b3:	31 d2                	xor    edx,edx
c00137b5:	eb 3b                	jmp    c00137f2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c00137b7:	83 fe 40             	cmp    esi,0x40
c00137ba:	74 06                	je     c00137c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c00137bc:	8d 44 24 58          	lea    eax,[esp+0x58]
c00137c0:	eb 20                	jmp    c00137e2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c00137c2:	50                   	push   eax
c00137c3:	50                   	push   eax
c00137c4:	55                   	push   ebp
c00137c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00137c9:	50                   	push   eax
c00137ca:	e8 81 cf fe ff       	call   c0000750 <strcmp>
c00137cf:	83 c4 10             	add    esp,0x10
c00137d2:	85 c0                	test   eax,eax
c00137d4:	75 dd                	jne    c00137b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00137d6:	eb e4                	jmp    c00137bc <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c00137d8:	8d 50 01             	lea    edx,[eax+0x1]
c00137db:	83 f9 3d             	cmp    ecx,0x3d
c00137de:	74 1e                	je     c00137fe <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c00137e0:	89 d0                	mov    eax,edx
c00137e2:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00137e5:	85 c9                	test   ecx,ecx
c00137e7:	75 ef                	jne    c00137d8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c00137e9:	eb 0f                	jmp    c00137fa <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00137eb:	8d 50 01             	lea    edx,[eax+0x1]
c00137ee:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00137f2:	47                   	inc    edi
c00137f3:	89 d0                	mov    eax,edx
c00137f5:	e9 2c ff ff ff       	jmp    c0013726 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c00137fa:	31 c0                	xor    eax,eax
c00137fc:	eb 33                	jmp    c0013831 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c00137fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013802:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013805:	50                   	push   eax
c0013806:	50                   	push   eax
c0013807:	8d 44 24 60          	lea    eax,[esp+0x60]
c001380b:	50                   	push   eax
c001380c:	53                   	push   ebx
c001380d:	e8 3e cf fe ff       	call   c0000750 <strcmp>
c0013812:	83 c4 10             	add    esp,0x10
c0013815:	85 c0                	test   eax,eax
c0013817:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001381b:	75 96                	jne    c00137b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c001381d:	51                   	push   ecx
c001381e:	51                   	push   ecx
c001381f:	52                   	push   edx
c0013820:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013827:	e8 14 ce fe ff       	call   c0000640 <strcpy>
c001382c:	83 c4 10             	add    esp,0x10
c001382f:	b0 01                	mov    al,0x1
c0013831:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013837:	5b                   	pop    ebx
c0013838:	5e                   	pop    esi
c0013839:	5f                   	pop    edi
c001383a:	5d                   	pop    ebp
c001383b:	c3                   	ret    

c001383c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001383c:	57                   	push   edi
c001383d:	56                   	push   esi
c001383e:	53                   	push   ebx
c001383f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013845:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001384c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013853:	53                   	push   ebx
c0013854:	e8 17 cd fe ff       	call   c0000570 <strlen>
c0013859:	89 34 24             	mov    DWORD PTR [esp],esi
c001385c:	89 c7                	mov    edi,eax
c001385e:	e8 0d cd fe ff       	call   c0000570 <strlen>
c0013863:	83 c4 10             	add    esp,0x10
c0013866:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001386a:	3d ff 00 00 00       	cmp    eax,0xff
c001386f:	0f 87 d3 00 00 00    	ja     c0013948 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013875:	57                   	push   edi
c0013876:	57                   	push   edi
c0013877:	56                   	push   esi
c0013878:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001387c:	56                   	push   esi
c001387d:	e8 be cd fe ff       	call   c0000640 <strcpy>
c0013882:	58                   	pop    eax
c0013883:	5a                   	pop    edx
c0013884:	68 83 25 02 c0       	push   0xc0022583
c0013889:	56                   	push   esi
c001388a:	e8 b1 cf fe ff       	call   c0000840 <strcat>
c001388f:	59                   	pop    ecx
c0013890:	5f                   	pop    edi
c0013891:	53                   	push   ebx
c0013892:	56                   	push   esi
c0013893:	e8 a8 cf fe ff       	call   c0000840 <strcat>
c0013898:	58                   	pop    eax
c0013899:	5a                   	pop    edx
c001389a:	68 2f 22 02 c0       	push   0xc002222f
c001389f:	56                   	push   esi
c00138a0:	e8 9b cf fe ff       	call   c0000840 <strcat>
c00138a5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00138ac:	e8 05 42 ff ff       	call   c0007ab6 <malloc>
c00138b1:	83 c4 0c             	add    esp,0xc
c00138b4:	89 c3                	mov    ebx,eax
c00138b6:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00138bc:	56                   	push   esi
c00138bd:	50                   	push   eax
c00138be:	e8 13 80 ff ff       	call   c000b8d6 <File::File(char const*, Process*)>
c00138c3:	83 c4 10             	add    esp,0x10
c00138c6:	85 db                	test   ebx,ebx
c00138c8:	74 7e                	je     c0013948 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00138ca:	51                   	push   ecx
c00138cb:	51                   	push   ecx
c00138cc:	6a 01                	push   0x1
c00138ce:	53                   	push   ebx
c00138cf:	e8 20 80 ff ff       	call   c000b8f4 <File::open(FileOpenMode)>
c00138d4:	83 c4 10             	add    esp,0x10
c00138d7:	85 c0                	test   eax,eax
c00138d9:	74 08                	je     c00138e3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00138db:	83 ec 0c             	sub    esp,0xc
c00138de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138e0:	53                   	push   ebx
c00138e1:	eb 5f                	jmp    c0013942 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00138e3:	52                   	push   edx
c00138e4:	8d 44 24 17          	lea    eax,[esp+0x17]
c00138e8:	50                   	push   eax
c00138e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00138ed:	50                   	push   eax
c00138ee:	53                   	push   ebx
c00138ef:	e8 02 83 ff ff       	call   c000bbf6 <File::stat(unsigned long long*, bool*)>
c00138f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00138f8:	83 c4 10             	add    esp,0x10
c00138fb:	89 c1                	mov    ecx,eax
c00138fd:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013901:	74 31                	je     c0013934 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013903:	83 ec 0c             	sub    esp,0xc
c0013906:	50                   	push   eax
c0013907:	e8 aa 41 ff ff       	call   c0007ab6 <malloc>
c001390c:	89 c6                	mov    esi,eax
c001390e:	58                   	pop    eax
c001390f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013911:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013915:	52                   	push   edx
c0013916:	56                   	push   esi
c0013917:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001391b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001391f:	53                   	push   ebx
c0013920:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013923:	83 c4 20             	add    esp,0x20
c0013926:	85 c0                	test   eax,eax
c0013928:	75 0a                	jne    c0013934 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001392a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001392e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013932:	74 18                	je     c001394c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013934:	83 ec 0c             	sub    esp,0xc
c0013937:	53                   	push   ebx
c0013938:	e8 15 80 ff ff       	call   c000b952 <File::close()>
c001393d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001393f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013942:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013945:	83 c4 10             	add    esp,0x10
c0013948:	31 c0                	xor    eax,eax
c001394a:	eb 3b                	jmp    c0013987 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001394c:	83 ec 0c             	sub    esp,0xc
c001394f:	53                   	push   ebx
c0013950:	e8 fd 7f ff ff       	call   c000b952 <File::close()>
c0013955:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013957:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001395a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001395d:	83 c4 0c             	add    esp,0xc
c0013960:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013967:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001396e:	56                   	push   esi
c001396f:	e8 57 fd ff ff       	call   c00136cb <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013974:	89 34 24             	mov    DWORD PTR [esp],esi
c0013977:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001397b:	e8 46 41 ff ff       	call   c0007ac6 <free>
c0013980:	83 c4 10             	add    esp,0x10
c0013983:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013987:	81 c4 20 01 00 00    	add    esp,0x120
c001398d:	5b                   	pop    ebx
c001398e:	5e                   	pop    esi
c001398f:	5f                   	pop    edi
c0013990:	c3                   	ret    

c0013991 <Reg::getLine(char*, char*, char*)>:
c0013991:	57                   	push   edi
c0013992:	56                   	push   esi
c0013993:	53                   	push   ebx
c0013994:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013998:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001399c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00139a0:	57                   	push   edi
c00139a1:	56                   	push   esi
c00139a2:	53                   	push   ebx
c00139a3:	68 34 22 02 c0       	push   0xc0022234
c00139a8:	e8 8f fe ff ff       	call   c001383c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00139ad:	83 c4 10             	add    esp,0x10
c00139b0:	84 c0                	test   al,al
c00139b2:	75 10                	jne    c00139c4 <Reg::getLine(char*, char*, char*)+0x33>
c00139b4:	57                   	push   edi
c00139b5:	56                   	push   esi
c00139b6:	53                   	push   ebx
c00139b7:	68 59 22 02 c0       	push   0xc0022259
c00139bc:	e8 7b fe ff ff       	call   c001383c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00139c1:	83 c4 10             	add    esp,0x10
c00139c4:	5b                   	pop    ebx
c00139c5:	5e                   	pop    esi
c00139c6:	5f                   	pop    edi
c00139c7:	c3                   	ret    

c00139c8 <Reg::readInt(char*, char*, int*)>:
c00139c8:	55                   	push   ebp
c00139c9:	57                   	push   edi
c00139ca:	56                   	push   esi
c00139cb:	53                   	push   ebx
c00139cc:	81 ec f0 00 00 00    	sub    esp,0xf0
c00139d2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00139d6:	55                   	push   ebp
c00139d7:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00139de:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00139e5:	e8 a7 ff ff ff       	call   c0013991 <Reg::getLine(char*, char*, char*)>
c00139ea:	83 c4 10             	add    esp,0x10
c00139ed:	84 c0                	test   al,al
c00139ef:	0f 84 b6 00 00 00    	je     c0013aab <Reg::readInt(char*, char*, int*)+0xe3>
c00139f5:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c00139fa:	83 fa 2b             	cmp    edx,0x2b
c00139fd:	74 0c                	je     c0013a0b <Reg::readInt(char*, char*, int*)+0x43>
c00139ff:	83 fa 2d             	cmp    edx,0x2d
c0013a02:	75 0e                	jne    c0013a12 <Reg::readInt(char*, char*, int*)+0x4a>
c0013a04:	ba 01 00 00 00       	mov    edx,0x1
c0013a09:	eb 0b                	jmp    c0013a16 <Reg::readInt(char*, char*, int*)+0x4e>
c0013a0b:	ba 01 00 00 00       	mov    edx,0x1
c0013a10:	eb 02                	jmp    c0013a14 <Reg::readInt(char*, char*, int*)+0x4c>
c0013a12:	31 d2                	xor    edx,edx
c0013a14:	31 c0                	xor    eax,eax
c0013a16:	be 0a 00 00 00       	mov    esi,0xa
c0013a1b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013a20:	75 21                	jne    c0013a43 <Reg::readInt(char*, char*, int*)+0x7b>
c0013a22:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013a27:	83 f9 78             	cmp    ecx,0x78
c0013a2a:	75 0a                	jne    c0013a36 <Reg::readInt(char*, char*, int*)+0x6e>
c0013a2c:	83 c2 02             	add    edx,0x2
c0013a2f:	be 10 00 00 00       	mov    esi,0x10
c0013a34:	eb 0d                	jmp    c0013a43 <Reg::readInt(char*, char*, int*)+0x7b>
c0013a36:	83 f9 62             	cmp    ecx,0x62
c0013a39:	75 08                	jne    c0013a43 <Reg::readInt(char*, char*, int*)+0x7b>
c0013a3b:	83 c2 02             	add    edx,0x2
c0013a3e:	be 02 00 00 00       	mov    esi,0x2
c0013a43:	01 d5                	add    ebp,edx
c0013a45:	31 d2                	xor    edx,edx
c0013a47:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013a4b:	83 f9 0d             	cmp    ecx,0xd
c0013a4e:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013a52:	0f 94 c3             	sete   bl
c0013a55:	85 c9                	test   ecx,ecx
c0013a57:	89 df                	mov    edi,ebx
c0013a59:	0f 94 c3             	sete   bl
c0013a5c:	09 df                	or     edi,ebx
c0013a5e:	89 fb                	mov    ebx,edi
c0013a60:	83 e7 01             	and    edi,0x1
c0013a63:	75 35                	jne    c0013a9a <Reg::readInt(char*, char*, int*)+0xd2>
c0013a65:	0f af d6             	imul   edx,esi
c0013a68:	83 fe 10             	cmp    esi,0x10
c0013a6b:	75 26                	jne    c0013a93 <Reg::readInt(char*, char*, int*)+0xcb>
c0013a6d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013a71:	83 ef 41             	sub    edi,0x41
c0013a74:	89 fb                	mov    ebx,edi
c0013a76:	80 fb 05             	cmp    bl,0x5
c0013a79:	77 06                	ja     c0013a81 <Reg::readInt(char*, char*, int*)+0xb9>
c0013a7b:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013a7f:	eb 16                	jmp    c0013a97 <Reg::readInt(char*, char*, int*)+0xcf>
c0013a81:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013a85:	83 eb 61             	sub    ebx,0x61
c0013a88:	80 fb 05             	cmp    bl,0x5
c0013a8b:	77 06                	ja     c0013a93 <Reg::readInt(char*, char*, int*)+0xcb>
c0013a8d:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013a91:	eb 04                	jmp    c0013a97 <Reg::readInt(char*, char*, int*)+0xcf>
c0013a93:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013a97:	45                   	inc    ebp
c0013a98:	eb ad                	jmp    c0013a47 <Reg::readInt(char*, char*, int*)+0x7f>
c0013a9a:	84 c0                	test   al,al
c0013a9c:	74 02                	je     c0013aa0 <Reg::readInt(char*, char*, int*)+0xd8>
c0013a9e:	f7 da                	neg    edx
c0013aa0:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013aa7:	89 10                	mov    DWORD PTR [eax],edx
c0013aa9:	88 d8                	mov    al,bl
c0013aab:	81 c4 ec 00 00 00    	add    esp,0xec
c0013ab1:	5b                   	pop    ebx
c0013ab2:	5e                   	pop    esi
c0013ab3:	5f                   	pop    edi
c0013ab4:	5d                   	pop    ebp
c0013ab5:	c3                   	ret    

c0013ab6 <Reg::readString(char*, char*, char*, int)>:
c0013ab6:	57                   	push   edi
c0013ab7:	56                   	push   esi
c0013ab8:	53                   	push   ebx
c0013ab9:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013abf:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013ac6:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013aca:	57                   	push   edi
c0013acb:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013ad2:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013ad9:	e8 b3 fe ff ff       	call   c0013991 <Reg::getLine(char*, char*, char*)>
c0013ade:	83 c4 10             	add    esp,0x10
c0013ae1:	89 c6                	mov    esi,eax
c0013ae3:	84 c0                	test   al,al
c0013ae5:	74 44                	je     c0013b2b <Reg::readString(char*, char*, char*, int)+0x75>
c0013ae7:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013aee:	31 c0                	xor    eax,eax
c0013af0:	4a                   	dec    edx
c0013af1:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013af4:	84 c9                	test   cl,cl
c0013af6:	74 0f                	je     c0013b07 <Reg::readString(char*, char*, char*, int)+0x51>
c0013af8:	39 c2                	cmp    edx,eax
c0013afa:	7e 0b                	jle    c0013b07 <Reg::readString(char*, char*, char*, int)+0x51>
c0013afc:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013aff:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013b04:	40                   	inc    eax
c0013b05:	eb ea                	jmp    c0013af1 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013b07:	83 ec 0c             	sub    esp,0xc
c0013b0a:	53                   	push   ebx
c0013b0b:	e8 60 ca fe ff       	call   c0000570 <strlen>
c0013b10:	83 c4 10             	add    esp,0x10
c0013b13:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013b18:	75 11                	jne    c0013b2b <Reg::readString(char*, char*, char*, int)+0x75>
c0013b1a:	83 ec 0c             	sub    esp,0xc
c0013b1d:	53                   	push   ebx
c0013b1e:	e8 4d ca fe ff       	call   c0000570 <strlen>
c0013b23:	83 c4 10             	add    esp,0x10
c0013b26:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013b2b:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013b31:	89 f0                	mov    eax,esi
c0013b33:	5b                   	pop    ebx
c0013b34:	5e                   	pop    esi
c0013b35:	5f                   	pop    edi
c0013b36:	c3                   	ret    

c0013b37 <Reg::readBool(char*, char*, bool*)>:
c0013b37:	83 ec 20             	sub    esp,0x20
c0013b3a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013b3e:	50                   	push   eax
c0013b3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b47:	e8 7c fe ff ff       	call   c00139c8 <Reg::readInt(char*, char*, int*)>
c0013b4c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013b51:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013b55:	0f 95 02             	setne  BYTE PTR [edx]
c0013b58:	83 c4 2c             	add    esp,0x2c
c0013b5b:	c3                   	ret    

c0013b5c <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013b5c:	53                   	push   ebx
c0013b5d:	83 ec 1c             	sub    esp,0x1c
c0013b60:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013b64:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013b68:	50                   	push   eax
c0013b69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b71:	e8 c1 ff ff ff       	call   c0013b37 <Reg::readBool(char*, char*, bool*)>
c0013b76:	83 c4 10             	add    esp,0x10
c0013b79:	84 c0                	test   al,al
c0013b7b:	74 04                	je     c0013b81 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013b7d:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013b81:	88 d8                	mov    al,bl
c0013b83:	83 c4 18             	add    esp,0x18
c0013b86:	5b                   	pop    ebx
c0013b87:	c3                   	ret    

c0013b88 <Reg::readIntWithDefault(char*, char*, int)>:
c0013b88:	53                   	push   ebx
c0013b89:	83 ec 1c             	sub    esp,0x1c
c0013b8c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013b90:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013b94:	50                   	push   eax
c0013b95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b9d:	e8 26 fe ff ff       	call   c00139c8 <Reg::readInt(char*, char*, int*)>
c0013ba2:	83 c4 10             	add    esp,0x10
c0013ba5:	84 c0                	test   al,al
c0013ba7:	74 04                	je     c0013bad <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013ba9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013bad:	89 d8                	mov    eax,ebx
c0013baf:	83 c4 18             	add    esp,0x18
c0013bb2:	5b                   	pop    ebx
c0013bb3:	c3                   	ret    

c0013bb4 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013bb4:	57                   	push   edi
c0013bb5:	56                   	push   esi
c0013bb6:	56                   	push   esi
c0013bb7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013bbb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013bbf:	56                   	push   esi
c0013bc0:	57                   	push   edi
c0013bc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bc9:	e8 e8 fe ff ff       	call   c0013ab6 <Reg::readString(char*, char*, char*, int)>
c0013bce:	83 c4 10             	add    esp,0x10
c0013bd1:	84 c0                	test   al,al
c0013bd3:	75 1a                	jne    c0013bef <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013bd5:	51                   	push   ecx
c0013bd6:	56                   	push   esi
c0013bd7:	6a 00                	push   0x0
c0013bd9:	57                   	push   edi
c0013bda:	e8 11 c9 fe ff       	call   c00004f0 <memset>
c0013bdf:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013be2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013be6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013be8:	83 c4 10             	add    esp,0x10
c0013beb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013bef:	89 f8                	mov    eax,edi
c0013bf1:	5a                   	pop    edx
c0013bf2:	5e                   	pop    esi
c0013bf3:	5f                   	pop    edi
c0013bf4:	c3                   	ret    

c0013bf5 <SysEject(regs*)>:
c0013bf5:	83 ec 0c             	sub    esp,0xc
c0013bf8:	83 ca ff             	or     edx,0xffffffff
c0013bfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bff:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013c02:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013c07:	83 e9 41             	sub    ecx,0x41
c0013c0a:	83 f9 19             	cmp    ecx,0x19
c0013c0d:	77 18                	ja     c0013c27 <SysEject(regs*)+0x32>
c0013c0f:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c0013c16:	85 c9                	test   ecx,ecx
c0013c18:	74 0d                	je     c0013c27 <SysEject(regs*)+0x32>
c0013c1a:	83 ec 0c             	sub    esp,0xc
c0013c1d:	51                   	push   ecx
c0013c1e:	e8 a3 9e ff ff       	call   c000dac6 <LogicalDisk::eject()>
c0013c23:	83 c4 10             	add    esp,0x10
c0013c26:	99                   	cdq    
c0013c27:	83 c4 0c             	add    esp,0xc
c0013c2a:	c3                   	ret    

c0013c2b <SysExit(regs*)>:
c0013c2b:	83 ec 18             	sub    esp,0x18
c0013c2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c32:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013c35:	e8 46 2b 00 00       	call   c0016780 <terminateTask(int)>
c0013c3a:	83 c8 ff             	or     eax,0xffffffff
c0013c3d:	83 c4 1c             	add    esp,0x1c
c0013c40:	89 c2                	mov    edx,eax
c0013c42:	c3                   	ret    

c0013c43 <SysGetCwd(regs*)>:
c0013c43:	83 ec 10             	sub    esp,0x10
c0013c46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c4a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013c4d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013c50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c55:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013c58:	e8 3d 79 ff ff       	call   c000b59a <Fs::getcwd(Process*, char*, int)>
c0013c5d:	83 c4 1c             	add    esp,0x1c
c0013c60:	99                   	cdq    
c0013c61:	c3                   	ret    

c0013c62 <SysGetPID(regs*)>:
c0013c62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c67:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c6c:	99                   	cdq    
c0013c6d:	c3                   	ret    

c0013c6e <SysGetRAMData(regs*)>:
c0013c6e:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013c74:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c0013c7e:	99                   	cdq    
c0013c7f:	f7 f9                	idiv   ecx
c0013c81:	c1 e0 18             	shl    eax,0x18
c0013c84:	09 c8                	or     eax,ecx
c0013c86:	99                   	cdq    
c0013c87:	c3                   	ret    

c0013c88 <SysGetVGAPtr(regs*)>:
c0013c88:	55                   	push   ebp
c0013c89:	57                   	push   edi
c0013c8a:	56                   	push   esi
c0013c8b:	53                   	push   ebx
c0013c8c:	83 ec 18             	sub    esp,0x18
c0013c8f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013c93:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013c96:	e8 b1 25 00 00       	call   c001624c <Thr::processFromPID(int)>
c0013c9b:	83 c4 10             	add    esp,0x10
c0013c9e:	89 c1                	mov    ecx,eax
c0013ca0:	b8 01 00 00 00       	mov    eax,0x1
c0013ca5:	85 c9                	test   ecx,ecx
c0013ca7:	74 57                	je     c0013d00 <SysGetVGAPtr(regs*)+0x78>
c0013ca9:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013caf:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013cb3:	74 0c                	je     c0013cc1 <SysGetVGAPtr(regs*)+0x39>
c0013cb5:	83 ec 0c             	sub    esp,0xc
c0013cb8:	55                   	push   ebp
c0013cb9:	e8 9b 4a ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013cbe:	83 c4 10             	add    esp,0x10
c0013cc1:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013cc4:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013cc7:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013ccc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013cce:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013cd1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013cd4:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013cda:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013cdd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013ce0:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013ce6:	50                   	push   eax
c0013ce7:	50                   	push   eax
c0013ce8:	68 74 22 02 c0       	push   0xc0022274
c0013ced:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013cf0:	05 a8 0f 00 00       	add    eax,0xfa8
c0013cf5:	50                   	push   eax
c0013cf6:	e8 45 c9 fe ff       	call   c0000640 <strcpy>
c0013cfb:	83 c4 10             	add    esp,0x10
c0013cfe:	31 c0                	xor    eax,eax
c0013d00:	83 c4 0c             	add    esp,0xc
c0013d03:	31 d2                	xor    edx,edx
c0013d05:	5b                   	pop    ebx
c0013d06:	5e                   	pop    esi
c0013d07:	5f                   	pop    edi
c0013d08:	5d                   	pop    ebp
c0013d09:	c3                   	ret    
c0013d0a:	66 90                	xchg   ax,ax

c0013d0c <SysKill(regs*)>:
c0013d0c:	53                   	push   ebx
c0013d0d:	83 ec 08             	sub    esp,0x8
c0013d10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d14:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013d18:	75 16                	jne    c0013d30 <SysKill(regs*)+0x24>
c0013d1a:	83 ec 0c             	sub    esp,0xc
c0013d1d:	68 7e 22 02 c0       	push   0xc002227e
c0013d22:	e8 56 d6 ff ff       	call   c001137d <KePanic(char const*)>
c0013d27:	83 c4 10             	add    esp,0x10
c0013d2a:	e9 89 00 00 00       	jmp    c0013db8 <SysKill(regs*)+0xac>
c0013d2f:	90                   	nop
c0013d30:	83 ec 0c             	sub    esp,0xc
c0013d33:	68 e4 96 02 c0       	push   0xc00296e4
c0013d38:	e8 ff bc 00 00       	call   c001fa3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0013d40:	83 c4 10             	add    esp,0x10
c0013d43:	85 c0                	test   eax,eax
c0013d45:	74 19                	je     c0013d60 <SysKill(regs*)+0x54>
c0013d47:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013d4a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013d4d:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013d4f:	74 33                	je     c0013d84 <SysKill(regs*)+0x78>
c0013d51:	52                   	push   edx
c0013d52:	52                   	push   edx
c0013d53:	50                   	push   eax
c0013d54:	68 e4 96 02 c0       	push   0xc00296e4
c0013d59:	e8 fe bf 00 00       	call   c001fd5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013d5e:	eb e0                	jmp    c0013d40 <SysKill(regs*)+0x34>
c0013d60:	83 ec 0c             	sub    esp,0xc
c0013d63:	68 d8 96 02 c0       	push   0xc00296d8
c0013d68:	e8 cf bc 00 00       	call   c001fa3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0013d70:	83 c4 10             	add    esp,0x10
c0013d73:	85 c0                	test   eax,eax
c0013d75:	74 41                	je     c0013db8 <SysKill(regs*)+0xac>
c0013d77:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013d7a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013d7d:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013d7f:	75 27                	jne    c0013da8 <SysKill(regs*)+0x9c>
c0013d81:	8d 76 00             	lea    esi,[esi+0x0]
c0013d84:	51                   	push   ecx
c0013d85:	51                   	push   ecx
c0013d86:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d8e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013d91:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013d97:	e8 82 da ff ff       	call   c001181e <KeRaiseSignal(SigHandlerBlock*, int)>
c0013d9c:	83 c4 10             	add    esp,0x10
c0013d9f:	31 c0                	xor    eax,eax
c0013da1:	31 d2                	xor    edx,edx
c0013da3:	eb 1b                	jmp    c0013dc0 <SysKill(regs*)+0xb4>
c0013da5:	8d 76 00             	lea    esi,[esi+0x0]
c0013da8:	52                   	push   edx
c0013da9:	52                   	push   edx
c0013daa:	50                   	push   eax
c0013dab:	68 d8 96 02 c0       	push   0xc00296d8
c0013db0:	e8 a7 bf 00 00       	call   c001fd5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013db5:	eb b9                	jmp    c0013d70 <SysKill(regs*)+0x64>
c0013db7:	90                   	nop
c0013db8:	83 c8 ff             	or     eax,0xffffffff
c0013dbb:	89 c2                	mov    edx,eax
c0013dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0013dc0:	83 c4 08             	add    esp,0x8
c0013dc3:	5b                   	pop    ebx
c0013dc4:	c3                   	ret    

c0013dc5 <SysLoadDLL(regs*)>:
c0013dc5:	56                   	push   esi
c0013dc6:	53                   	push   ebx
c0013dc7:	31 d2                	xor    edx,edx
c0013dc9:	51                   	push   ecx
c0013dca:	b8 01 00 00 00       	mov    eax,0x1
c0013dcf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013dd3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013dd7:	0f 84 8c 00 00 00    	je     c0013e69 <SysLoadDLL(regs*)+0xa4>
c0013ddd:	83 ec 0c             	sub    esp,0xc
c0013de0:	68 14 01 00 00       	push   0x114
c0013de5:	e8 cc 3c ff ff       	call   c0007ab6 <malloc>
c0013dea:	83 c4 0c             	add    esp,0xc
c0013ded:	89 c3                	mov    ebx,eax
c0013def:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013df4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013df7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013dfa:	53                   	push   ebx
c0013dfb:	e8 d6 7a ff ff       	call   c000b8d6 <File::File(char const*, Process*)>
c0013e00:	83 c4 10             	add    esp,0x10
c0013e03:	31 d2                	xor    edx,edx
c0013e05:	b8 02 00 00 00       	mov    eax,0x2
c0013e0a:	85 db                	test   ebx,ebx
c0013e0c:	74 5b                	je     c0013e69 <SysLoadDLL(regs*)+0xa4>
c0013e0e:	83 ec 0c             	sub    esp,0xc
c0013e11:	53                   	push   ebx
c0013e12:	e8 a1 7d ff ff       	call   c000bbb8 <File::exists()>
c0013e17:	83 c4 10             	add    esp,0x10
c0013e1a:	84 c0                	test   al,al
c0013e1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e1e:	75 11                	jne    c0013e31 <SysLoadDLL(regs*)+0x6c>
c0013e20:	83 ec 0c             	sub    esp,0xc
c0013e23:	53                   	push   ebx
c0013e24:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013e27:	83 c4 10             	add    esp,0x10
c0013e2a:	b8 03 00 00 00       	mov    eax,0x3
c0013e2f:	eb 36                	jmp    c0013e67 <SysLoadDLL(regs*)+0xa2>
c0013e31:	83 ec 0c             	sub    esp,0xc
c0013e34:	53                   	push   ebx
c0013e35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013e38:	58                   	pop    eax
c0013e39:	5a                   	pop    edx
c0013e3a:	6a 00                	push   0x0
c0013e3c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013e3f:	e8 3b 15 00 00       	call   c001537f <Thr::loadDLL(char const*, bool)>
c0013e44:	83 c4 10             	add    esp,0x10
c0013e47:	89 c1                	mov    ecx,eax
c0013e49:	31 d2                	xor    edx,edx
c0013e4b:	b8 04 00 00 00       	mov    eax,0x4
c0013e50:	85 c9                	test   ecx,ecx
c0013e52:	74 15                	je     c0013e69 <SysLoadDLL(regs*)+0xa4>
c0013e54:	53                   	push   ebx
c0013e55:	53                   	push   ebx
c0013e56:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013e5c:	51                   	push   ecx
c0013e5d:	e8 4e 17 00 00       	call   c00155b0 <Thr::executeDLL(unsigned long, void*)>
c0013e62:	83 c4 10             	add    esp,0x10
c0013e65:	31 c0                	xor    eax,eax
c0013e67:	31 d2                	xor    edx,edx
c0013e69:	59                   	pop    ecx
c0013e6a:	5b                   	pop    ebx
c0013e6b:	5e                   	pop    esi
c0013e6c:	c3                   	ret    

c0013e6d <SysRead(regs*)>:
c0013e6d:	57                   	push   edi
c0013e6e:	56                   	push   esi
c0013e6f:	53                   	push   ebx
c0013e70:	83 ec 10             	sub    esp,0x10
c0013e73:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013e77:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013e7a:	83 f8 02             	cmp    eax,0x2
c0013e7d:	77 10                	ja     c0013e8f <SysRead(regs*)+0x22>
c0013e7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e84:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e87:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013e8d:	eb 0e                	jmp    c0013e9d <SysRead(regs*)+0x30>
c0013e8f:	83 ec 0c             	sub    esp,0xc
c0013e92:	50                   	push   eax
c0013e93:	e8 1b 56 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0013e98:	83 c4 10             	add    esp,0x10
c0013e9b:	89 c1                	mov    ecx,eax
c0013e9d:	83 c8 ff             	or     eax,0xffffffff
c0013ea0:	85 c9                	test   ecx,ecx
c0013ea2:	89 c2                	mov    edx,eax
c0013ea4:	74 28                	je     c0013ece <SysRead(regs*)+0x61>
c0013ea6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013eae:	31 ff                	xor    edi,edi
c0013eb0:	83 ec 0c             	sub    esp,0xc
c0013eb3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013eb5:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013eb9:	52                   	push   edx
c0013eba:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013ebd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013ec0:	57                   	push   edi
c0013ec1:	56                   	push   esi
c0013ec2:	51                   	push   ecx
c0013ec3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ec6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013eca:	83 c4 20             	add    esp,0x20
c0013ecd:	99                   	cdq    
c0013ece:	83 c4 10             	add    esp,0x10
c0013ed1:	5b                   	pop    ebx
c0013ed2:	5e                   	pop    esi
c0013ed3:	5f                   	pop    edi
c0013ed4:	c3                   	ret    

c0013ed5 <SysRegisterSignal(regs*)>:
c0013ed5:	83 ec 18             	sub    esp,0x18
c0013ed8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013edc:	6a 00                	push   0x0
c0013ede:	6a 00                	push   0x0
c0013ee0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013ee3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013ee6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013eeb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013eee:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013ef4:	e8 ef d8 ff ff       	call   c00117e8 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013ef9:	83 c4 2c             	add    esp,0x2c
c0013efc:	99                   	cdq    
c0013efd:	c3                   	ret    

c0013efe <SysRegistryGetTypeFromPath(regs*)>:
c0013efe:	57                   	push   edi
c0013eff:	56                   	push   esi
c0013f00:	53                   	push   ebx
c0013f01:	81 ec 38 01 00 00    	sub    esp,0x138
c0013f07:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013f0e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013f11:	68 9f 22 02 c0       	push   0xc002229f
c0013f16:	e8 2a 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013f1b:	5a                   	pop    edx
c0013f1c:	59                   	pop    ecx
c0013f1d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013f20:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013f23:	e8 4d f6 ff ff       	call   c0013575 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013f28:	5f                   	pop    edi
c0013f29:	89 c6                	mov    esi,eax
c0013f2b:	5a                   	pop    edx
c0013f2c:	50                   	push   eax
c0013f2d:	68 bf 22 02 c0       	push   0xc00222bf
c0013f32:	e8 0e 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013f37:	83 c4 10             	add    esp,0x10
c0013f3a:	85 f6                	test   esi,esi
c0013f3c:	74 28                	je     c0013f66 <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013f3e:	50                   	push   eax
c0013f3f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013f43:	57                   	push   edi
c0013f44:	56                   	push   esi
c0013f45:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013f48:	e8 0c f2 ff ff       	call   c0013159 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013f4d:	83 c4 0c             	add    esp,0xc
c0013f50:	89 c3                	mov    ebx,eax
c0013f52:	57                   	push   edi
c0013f53:	50                   	push   eax
c0013f54:	68 c7 22 02 c0       	push   0xc00222c7
c0013f59:	e8 e7 69 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013f5e:	89 d8                	mov    eax,ebx
c0013f60:	83 c4 10             	add    esp,0x10
c0013f63:	99                   	cdq    
c0013f64:	eb 05                	jmp    c0013f6b <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013f66:	83 c8 ff             	or     eax,0xffffffff
c0013f69:	89 c2                	mov    edx,eax
c0013f6b:	81 c4 30 01 00 00    	add    esp,0x130
c0013f71:	5b                   	pop    ebx
c0013f72:	5e                   	pop    esi
c0013f73:	5f                   	pop    edi
c0013f74:	c3                   	ret    

c0013f75 <SysRegistryReadExtent(regs*)>:
c0013f75:	83 ec 1c             	sub    esp,0x1c
c0013f78:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013f7c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013f7f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013f82:	85 c0                	test   eax,eax
c0013f84:	79 1f                	jns    c0013fa5 <SysRegistryReadExtent(regs*)+0x30>
c0013f86:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013f8b:	52                   	push   edx
c0013f8c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013f90:	52                   	push   edx
c0013f91:	50                   	push   eax
c0013f92:	51                   	push   ecx
c0013f93:	e8 b3 f0 ff ff       	call   c001304b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013f98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f9c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013fa0:	83 c4 10             	add    esp,0x10
c0013fa3:	eb 14                	jmp    c0013fb9 <SysRegistryReadExtent(regs*)+0x44>
c0013fa5:	83 ec 04             	sub    esp,0x4
c0013fa8:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013fab:	50                   	push   eax
c0013fac:	51                   	push   ecx
c0013fad:	e8 33 eb ff ff       	call   c0012ae5 <CmGetString(Reghive_Tag*, int, char*)>
c0013fb2:	83 c4 10             	add    esp,0x10
c0013fb5:	31 c0                	xor    eax,eax
c0013fb7:	31 d2                	xor    edx,edx
c0013fb9:	83 c4 1c             	add    esp,0x1c
c0013fbc:	c3                   	ret    

c0013fbd <SysRegistryPathToExtentLookup(regs*)>:
c0013fbd:	53                   	push   ebx
c0013fbe:	83 ec 10             	sub    esp,0x10
c0013fc1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013fc5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013fc8:	68 dd 22 02 c0       	push   0xc00222dd
c0013fcd:	e8 73 69 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013fd2:	58                   	pop    eax
c0013fd3:	5a                   	pop    edx
c0013fd4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013fd7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013fda:	e8 96 f5 ff ff       	call   c0013575 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013fdf:	83 c4 18             	add    esp,0x18
c0013fe2:	99                   	cdq    
c0013fe3:	5b                   	pop    ebx
c0013fe4:	c3                   	ret    

c0013fe5 <SysRegistryEnterDirectory(regs*)>:
c0013fe5:	53                   	push   ebx
c0013fe6:	83 ec 10             	sub    esp,0x10
c0013fe9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013fed:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013ff0:	68 00 23 02 c0       	push   0xc0022300
c0013ff5:	e8 4b 69 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013ffa:	58                   	pop    eax
c0013ffb:	5a                   	pop    edx
c0013ffc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013fff:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014002:	e8 55 eb ff ff       	call   c0012b5c <CmEnterDirectory(Reghive_Tag*, int)>
c0014007:	83 c4 18             	add    esp,0x18
c001400a:	99                   	cdq    
c001400b:	5b                   	pop    ebx
c001400c:	c3                   	ret    

c001400d <SysRegistryGetNext(regs*)>:
c001400d:	53                   	push   ebx
c001400e:	83 ec 10             	sub    esp,0x10
c0014011:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014015:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014018:	68 1e 23 02 c0       	push   0xc002231e
c001401d:	e8 23 69 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014022:	58                   	pop    eax
c0014023:	5a                   	pop    edx
c0014024:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014027:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001402a:	e8 6c eb ff ff       	call   c0012b9b <CmGetNext(Reghive_Tag*, int)>
c001402f:	83 c4 18             	add    esp,0x18
c0014032:	99                   	cdq    
c0014033:	5b                   	pop    ebx
c0014034:	c3                   	ret    

c0014035 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014035:	57                   	push   edi
c0014036:	56                   	push   esi
c0014037:	53                   	push   ebx
c0014038:	81 ec 34 01 00 00    	sub    esp,0x134
c001403e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014045:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014049:	57                   	push   edi
c001404a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001404d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014050:	e8 04 f1 ff ff       	call   c0013159 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014055:	89 c3                	mov    ebx,eax
c0014057:	58                   	pop    eax
c0014058:	5a                   	pop    edx
c0014059:	57                   	push   edi
c001405a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001405d:	e8 de c5 fe ff       	call   c0000640 <strcpy>
c0014062:	89 d8                	mov    eax,ebx
c0014064:	81 c4 40 01 00 00    	add    esp,0x140
c001406a:	99                   	cdq    
c001406b:	5b                   	pop    ebx
c001406c:	5e                   	pop    esi
c001406d:	5f                   	pop    edi
c001406e:	c3                   	ret    

c001406f <SysRegistryOpen(regs*)>:
c001406f:	83 ec 18             	sub    esp,0x18
c0014072:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014076:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014079:	e8 f7 e8 ff ff       	call   c0012975 <CmOpen(char const*)>
c001407e:	83 c4 1c             	add    esp,0x1c
c0014081:	99                   	cdq    
c0014082:	c3                   	ret    

c0014083 <SysRegistryClose(regs*)>:
c0014083:	83 ec 18             	sub    esp,0x18
c0014086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001408a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001408d:	e8 01 ea ff ff       	call   c0012a93 <CmClose(Reghive_Tag*)>
c0014092:	31 c0                	xor    eax,eax
c0014094:	31 d2                	xor    edx,edx
c0014096:	83 c4 1c             	add    esp,0x1c
c0014099:	c3                   	ret    

c001409a <SysSbrk(regs*)>:
c001409a:	56                   	push   esi
c001409b:	53                   	push   ebx
c001409c:	50                   	push   eax
c001409d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00140a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00140a9:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00140ac:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00140b2:	85 db                	test   ebx,ebx
c00140b4:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00140b7:	74 02                	je     c00140bb <SysSbrk(regs*)+0x21>
c00140b9:	79 06                	jns    c00140c1 <SysSbrk(regs*)+0x27>
c00140bb:	89 f0                	mov    eax,esi
c00140bd:	31 d2                	xor    edx,edx
c00140bf:	eb 2a                	jmp    c00140eb <SysSbrk(regs*)+0x51>
c00140c1:	83 c8 ff             	or     eax,0xffffffff
c00140c4:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00140ca:	89 c2                	mov    edx,eax
c00140cc:	77 1d                	ja     c00140eb <SysSbrk(regs*)+0x51>
c00140ce:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00140d4:	50                   	push   eax
c00140d5:	c1 ea 0c             	shr    edx,0xc
c00140d8:	68 07 0c 00 00       	push   0xc07
c00140dd:	52                   	push   edx
c00140de:	51                   	push   ecx
c00140df:	e8 40 5d ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c00140e4:	89 f0                	mov    eax,esi
c00140e6:	31 d2                	xor    edx,edx
c00140e8:	83 c4 10             	add    esp,0x10
c00140eb:	59                   	pop    ecx
c00140ec:	5b                   	pop    ebx
c00140ed:	5e                   	pop    esi
c00140ee:	c3                   	ret    

c00140ef <SysSetCwd(regs*)>:
c00140ef:	83 ec 14             	sub    esp,0x14
c00140f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140f6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00140f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140fe:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014101:	e8 51 7b ff ff       	call   c000bc57 <Fs::setcwd(Process*, char*)>
c0014106:	83 c4 1c             	add    esp,0x1c
c0014109:	99                   	cdq    
c001410a:	c3                   	ret    

c001410b <SysSetTime(regs*)>:
c001410b:	55                   	push   ebp
c001410c:	31 c9                	xor    ecx,ecx
c001410e:	57                   	push   edi
c001410f:	bd 0c 00 00 00       	mov    ebp,0xc
c0014114:	56                   	push   esi
c0014115:	53                   	push   ebx
c0014116:	31 db                	xor    ebx,ebx
c0014118:	83 ec 10             	sub    esp,0x10
c001411b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001411f:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0014122:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014125:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0014128:	89 c2                	mov    edx,eax
c001412a:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0014130:	83 e2 1f             	and    edx,0x1f
c0014133:	c1 e7 10             	shl    edi,0x10
c0014136:	42                   	inc    edx
c0014137:	c1 e8 05             	shr    eax,0x5
c001413a:	88 d1                	mov    cl,dl
c001413c:	31 d2                	xor    edx,edx
c001413e:	f7 f5                	div    ebp
c0014140:	89 dd                	mov    ebp,ebx
c0014142:	88 d5                	mov    ch,dl
c0014144:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001414a:	0f b7 c1             	movzx  eax,cx
c001414d:	31 d2                	xor    edx,edx
c001414f:	09 f8                	or     eax,edi
c0014151:	bf 3c 00 00 00       	mov    edi,0x3c
c0014156:	89 c1                	mov    ecx,eax
c0014158:	89 f0                	mov    eax,esi
c001415a:	f7 f7                	div    edi
c001415c:	c1 e2 10             	shl    edx,0x10
c001415f:	09 d5                	or     ebp,edx
c0014161:	31 d2                	xor    edx,edx
c0014163:	89 eb                	mov    ebx,ebp
c0014165:	f7 f7                	div    edi
c0014167:	bf 10 0e 00 00       	mov    edi,0xe10
c001416c:	88 d7                	mov    bh,dl
c001416e:	89 f0                	mov    eax,esi
c0014170:	31 d2                	xor    edx,edx
c0014172:	f7 f7                	div    edi
c0014174:	bf 18 00 00 00       	mov    edi,0x18
c0014179:	31 d2                	xor    edx,edx
c001417b:	f7 f7                	div    edi
c001417d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0014182:	88 d3                	mov    bl,dl
c0014184:	53                   	push   ebx
c0014185:	51                   	push   ecx
c0014186:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001418c:	e8 d1 82 ff ff       	call   c000c462 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014191:	83 c4 1c             	add    esp,0x1c
c0014194:	83 f0 01             	xor    eax,0x1
c0014197:	5b                   	pop    ebx
c0014198:	0f b6 c0             	movzx  eax,al
c001419b:	5e                   	pop    esi
c001419c:	31 d2                	xor    edx,edx
c001419e:	5f                   	pop    edi
c001419f:	5d                   	pop    ebp
c00141a0:	c3                   	ret    

c00141a1 <SysSymlink(regs*)>:
c00141a1:	53                   	push   ebx
c00141a2:	83 c8 ff             	or     eax,0xffffffff
c00141a5:	83 ec 08             	sub    esp,0x8
c00141a8:	89 c2                	mov    edx,eax
c00141aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00141ae:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00141b1:	85 c9                	test   ecx,ecx
c00141b3:	74 14                	je     c00141c9 <SysSymlink(regs*)+0x28>
c00141b5:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c00141b8:	85 db                	test   ebx,ebx
c00141ba:	74 0d                	je     c00141c9 <SysSymlink(regs*)+0x28>
c00141bc:	50                   	push   eax
c00141bd:	50                   	push   eax
c00141be:	53                   	push   ebx
c00141bf:	51                   	push   ecx
c00141c0:	e8 a1 6f ff ff       	call   c000b166 <KeCreateSymlink(char const*, char const*)>
c00141c5:	83 c4 10             	add    esp,0x10
c00141c8:	99                   	cdq    
c00141c9:	83 c4 08             	add    esp,0x8
c00141cc:	5b                   	pop    ebx
c00141cd:	c3                   	ret    

c00141ce <SysTimezone(regs*)>:
c00141ce:	53                   	push   ebx
c00141cf:	83 ec 08             	sub    esp,0x8
c00141d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00141d6:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00141da:	75 17                	jne    c00141f3 <SysTimezone(regs*)+0x25>
c00141dc:	83 ec 0c             	sub    esp,0xc
c00141df:	68 35 23 02 c0       	push   0xc0022335
c00141e4:	e8 5c 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00141e9:	83 c8 ff             	or     eax,0xffffffff
c00141ec:	83 c4 10             	add    esp,0x10
c00141ef:	89 c2                	mov    edx,eax
c00141f1:	eb 20                	jmp    c0014213 <SysTimezone(regs*)+0x45>
c00141f3:	83 ec 0c             	sub    esp,0xc
c00141f6:	68 4a 23 02 c0       	push   0xc002234a
c00141fb:	e8 45 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014200:	58                   	pop    eax
c0014201:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014204:	e8 c3 7f ff ff       	call   c000c1cc <User::loadClockSettings(int)>
c0014209:	83 c4 10             	add    esp,0x10
c001420c:	b8 01 00 00 00       	mov    eax,0x1
c0014211:	31 d2                	xor    edx,edx
c0014213:	83 c4 08             	add    esp,0x8
c0014216:	5b                   	pop    ebx
c0014217:	c3                   	ret    

c0014218 <SysTruncate(regs*)>:
c0014218:	55                   	push   ebp
c0014219:	57                   	push   edi
c001421a:	31 ff                	xor    edi,edi
c001421c:	56                   	push   esi
c001421d:	53                   	push   ebx
c001421e:	83 ec 0c             	sub    esp,0xc
c0014221:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014225:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014228:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c001422b:	89 ce                	mov    esi,ecx
c001422d:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014231:	0f 84 9a 00 00 00    	je     c00142d1 <SysTruncate(regs*)+0xb9>
c0014237:	83 ec 0c             	sub    esp,0xc
c001423a:	68 14 01 00 00       	push   0x114
c001423f:	e8 72 38 ff ff       	call   c0007ab6 <malloc>
c0014244:	83 c4 0c             	add    esp,0xc
c0014247:	89 c3                	mov    ebx,eax
c0014249:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001424e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014251:	55                   	push   ebp
c0014252:	53                   	push   ebx
c0014253:	e8 7e 76 ff ff       	call   c000b8d6 <File::File(char const*, Process*)>
c0014258:	83 c4 10             	add    esp,0x10
c001425b:	31 d2                	xor    edx,edx
c001425d:	b8 03 00 00 00       	mov    eax,0x3
c0014262:	85 db                	test   ebx,ebx
c0014264:	0f 84 a2 00 00 00    	je     c001430c <SysTruncate(regs*)+0xf4>
c001426a:	51                   	push   ecx
c001426b:	51                   	push   ecx
c001426c:	6a 02                	push   0x2
c001426e:	53                   	push   ebx
c001426f:	e8 80 76 ff ff       	call   c000b8f4 <File::open(FileOpenMode)>
c0014274:	83 c4 10             	add    esp,0x10
c0014277:	85 c0                	test   eax,eax
c0014279:	74 13                	je     c001428e <SysTruncate(regs*)+0x76>
c001427b:	83 ec 0c             	sub    esp,0xc
c001427e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014280:	53                   	push   ebx
c0014281:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014284:	83 c4 10             	add    esp,0x10
c0014287:	b8 04 00 00 00       	mov    eax,0x4
c001428c:	eb 7c                	jmp    c001430a <SysTruncate(regs*)+0xf2>
c001428e:	52                   	push   edx
c001428f:	57                   	push   edi
c0014290:	56                   	push   esi
c0014291:	53                   	push   ebx
c0014292:	e8 71 77 ff ff       	call   c000ba08 <File::truncate(unsigned long long)>
c0014297:	83 c4 10             	add    esp,0x10
c001429a:	85 c0                	test   eax,eax
c001429c:	74 1b                	je     c00142b9 <SysTruncate(regs*)+0xa1>
c001429e:	83 ec 0c             	sub    esp,0xc
c00142a1:	53                   	push   ebx
c00142a2:	e8 ab 76 ff ff       	call   c000b952 <File::close()>
c00142a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00142af:	83 c4 10             	add    esp,0x10
c00142b2:	b8 05 00 00 00       	mov    eax,0x5
c00142b7:	eb 51                	jmp    c001430a <SysTruncate(regs*)+0xf2>
c00142b9:	83 ec 0c             	sub    esp,0xc
c00142bc:	53                   	push   ebx
c00142bd:	e8 90 76 ff ff       	call   c000b952 <File::close()>
c00142c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00142ca:	83 c4 10             	add    esp,0x10
c00142cd:	31 c0                	xor    eax,eax
c00142cf:	eb 39                	jmp    c001430a <SysTruncate(regs*)+0xf2>
c00142d1:	31 d2                	xor    edx,edx
c00142d3:	b8 01 00 00 00       	mov    eax,0x1
c00142d8:	83 fd 02             	cmp    ebp,0x2
c00142db:	7e 2f                	jle    c001430c <SysTruncate(regs*)+0xf4>
c00142dd:	83 ec 0c             	sub    esp,0xc
c00142e0:	51                   	push   ecx
c00142e1:	e8 cd 51 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00142e6:	83 c4 10             	add    esp,0x10
c00142e9:	89 c1                	mov    ecx,eax
c00142eb:	31 d2                	xor    edx,edx
c00142ed:	b8 02 00 00 00       	mov    eax,0x2
c00142f2:	85 c9                	test   ecx,ecx
c00142f4:	74 16                	je     c001430c <SysTruncate(regs*)+0xf4>
c00142f6:	50                   	push   eax
c00142f7:	57                   	push   edi
c00142f8:	56                   	push   esi
c00142f9:	51                   	push   ecx
c00142fa:	e8 09 77 ff ff       	call   c000ba08 <File::truncate(unsigned long long)>
c00142ff:	83 c4 10             	add    esp,0x10
c0014302:	85 c0                	test   eax,eax
c0014304:	0f 95 c0             	setne  al
c0014307:	0f b6 c0             	movzx  eax,al
c001430a:	31 d2                	xor    edx,edx
c001430c:	83 c4 0c             	add    esp,0xc
c001430f:	5b                   	pop    ebx
c0014310:	5e                   	pop    esi
c0014311:	5f                   	pop    edi
c0014312:	5d                   	pop    ebp
c0014313:	c3                   	ret    

c0014314 <SysWrite(regs*)>:
c0014314:	57                   	push   edi
c0014315:	56                   	push   esi
c0014316:	53                   	push   ebx
c0014317:	83 ec 10             	sub    esp,0x10
c001431a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001431e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014321:	83 f8 02             	cmp    eax,0x2
c0014324:	77 10                	ja     c0014336 <SysWrite(regs*)+0x22>
c0014326:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001432b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001432e:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014334:	eb 0e                	jmp    c0014344 <SysWrite(regs*)+0x30>
c0014336:	83 ec 0c             	sub    esp,0xc
c0014339:	50                   	push   eax
c001433a:	e8 74 51 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001433f:	83 c4 10             	add    esp,0x10
c0014342:	89 c1                	mov    ecx,eax
c0014344:	83 c8 ff             	or     eax,0xffffffff
c0014347:	85 c9                	test   ecx,ecx
c0014349:	89 c2                	mov    edx,eax
c001434b:	74 28                	je     c0014375 <SysWrite(regs*)+0x61>
c001434d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014355:	31 ff                	xor    edi,edi
c0014357:	83 ec 0c             	sub    esp,0xc
c001435a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001435c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014360:	52                   	push   edx
c0014361:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014364:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014367:	57                   	push   edi
c0014368:	56                   	push   esi
c0014369:	51                   	push   ecx
c001436a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001436d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014371:	83 c4 20             	add    esp,0x20
c0014374:	99                   	cdq    
c0014375:	83 c4 10             	add    esp,0x10
c0014378:	5b                   	pop    ebx
c0014379:	5e                   	pop    esi
c001437a:	5f                   	pop    edi
c001437b:	c3                   	ret    

c001437c <SysWsbe(regs*)>:
c001437c:	57                   	push   edi
c001437d:	b9 0b 00 00 00       	mov    ecx,0xb
c0014382:	56                   	push   esi
c0014383:	be 89 23 02 c0       	mov    esi,0xc0022389
c0014388:	53                   	push   ebx
c0014389:	83 ec 30             	sub    esp,0x30
c001438c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014390:	fc                   	cld    
c0014391:	83 ec 0c             	sub    esp,0xc
c0014394:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014396:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001439a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001439f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143a2:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00143a8:	8b 06                	mov    eax,DWORD PTR [esi]
c00143aa:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00143ad:	57                   	push   edi
c00143ae:	e8 bd c1 fe ff       	call   c0000570 <strlen>
c00143b3:	5a                   	pop    edx
c00143b4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00143b8:	52                   	push   edx
c00143b9:	31 d2                	xor    edx,edx
c00143bb:	57                   	push   edi
c00143bc:	52                   	push   edx
c00143bd:	50                   	push   eax
c00143be:	56                   	push   esi
c00143bf:	ff d3                	call   ebx
c00143c1:	83 c4 14             	add    esp,0x14
c00143c4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00143c8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00143cb:	e8 b0 23 00 00       	call   c0016780 <terminateTask(int)>
c00143d0:	83 c4 40             	add    esp,0x40
c00143d3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00143d8:	5b                   	pop    ebx
c00143d9:	31 d2                	xor    edx,edx
c00143db:	5e                   	pop    esi
c00143dc:	5f                   	pop    edi
c00143dd:	c3                   	ret    

c00143de <SysYield(regs*)>:
c00143de:	83 ec 0c             	sub    esp,0xc
c00143e1:	fa                   	cli    
c00143e2:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00143e8:	e8 f3 19 00 00       	call   c0015de0 <schedule()>
c00143ed:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00143f2:	48                   	dec    eax
c00143f3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00143f8:	75 01                	jne    c00143fb <SysYield(regs*)+0x1d>
c00143fa:	fb                   	sti    
c00143fb:	31 c0                	xor    eax,eax
c00143fd:	31 d2                	xor    edx,edx
c00143ff:	83 c4 0c             	add    esp,0xc
c0014402:	c3                   	ret    

c0014403 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014403:	55                   	push   ebp
c0014404:	57                   	push   edi
c0014405:	56                   	push   esi
c0014406:	53                   	push   ebx
c0014407:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001440d:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014415:	0f 95 c0             	setne  al
c0014418:	31 d2                	xor    edx,edx
c001441a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014422:	0f 94 c2             	sete   dl
c0014425:	85 c2                	test   edx,eax
c0014427:	74 34                	je     c001445d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014429:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014434:	74 27                	je     c001445d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014436:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001443d:	05 00 10 00 00       	add    eax,0x1000
c0014442:	89 c1                	mov    ecx,eax
c0014444:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014449:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c001444f:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014456:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c001445d:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014464:	83 ec 0c             	sub    esp,0xc
c0014467:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001446d:	6a 01                	push   0x1
c001446f:	e8 99 51 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0014474:	83 c4 10             	add    esp,0x10
c0014477:	89 c3                	mov    ebx,eax
c0014479:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001447f:	0f 86 25 01 00 00    	jbe    c00145aa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014485:	c1 ee 0c             	shr    esi,0xc
c0014488:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001448f:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014493:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001449b:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00144a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144a6:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00144ad:	29 ef                	sub    edi,ebp
c00144af:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00144b3:	0f 83 f8 00 00 00    	jae    c00145b1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c00144b9:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00144bf:	76 05                	jbe    c00144c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c00144c1:	bf 00 10 00 00       	mov    edi,0x1000
c00144c6:	83 ec 0c             	sub    esp,0xc
c00144c9:	31 d2                	xor    edx,edx
c00144cb:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00144d2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00144d4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00144d8:	50                   	push   eax
c00144d9:	8d 74 24 30          	lea    esi,[esp+0x30]
c00144dd:	56                   	push   esi
c00144de:	52                   	push   edx
c00144df:	57                   	push   edi
c00144e0:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00144e7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00144ea:	83 c4 20             	add    esp,0x20
c00144ed:	85 c0                	test   eax,eax
c00144ef:	75 06                	jne    c00144f7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c00144f1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00144f5:	74 13                	je     c001450a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c00144f7:	83 ec 0c             	sub    esp,0xc
c00144fa:	53                   	push   ebx
c00144fb:	e8 2b 54 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0014500:	83 c4 10             	add    esp,0x10
c0014503:	31 c0                	xor    eax,eax
c0014505:	e9 7c 01 00 00       	jmp    c0014686 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001450a:	fa                   	cli    
c001450b:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0014511:	e8 a9 38 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0014516:	6a 07                	push   0x7
c0014518:	89 c7                	mov    edi,eax
c001451a:	53                   	push   ebx
c001451b:	50                   	push   eax
c001451c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014521:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014524:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001452a:	e8 f1 57 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001452f:	83 c4 0c             	add    esp,0xc
c0014532:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014539:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001453f:	6a 00                	push   0x0
c0014541:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014546:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014549:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001454f:	e8 32 56 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0014554:	58                   	pop    eax
c0014555:	5a                   	pop    edx
c0014556:	68 07 0c 00 00       	push   0xc07
c001455b:	55                   	push   ebp
c001455c:	57                   	push   edi
c001455d:	89 df                	mov    edi,ebx
c001455f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014566:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001456c:	6a 00                	push   0x0
c001456e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014573:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014576:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001457c:	e8 f1 59 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014581:	b9 00 10 00 00       	mov    ecx,0x1000
c0014586:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014588:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001458d:	83 c4 20             	add    esp,0x20
c0014590:	48                   	dec    eax
c0014591:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014596:	85 c0                	test   eax,eax
c0014598:	75 01                	jne    c001459b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001459a:	fb                   	sti    
c001459b:	81 c5 00 10 00 00    	add    ebp,0x1000
c00145a1:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00145a5:	e9 f1 fe ff ff       	jmp    c001449b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c00145aa:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00145b1:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00145b8:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00145be:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00145c4:	0f 86 ae 00 00 00    	jbe    c0014678 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00145ca:	fa                   	cli    
c00145cb:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00145d1:	c1 ee 0c             	shr    esi,0xc
c00145d4:	51                   	push   ecx
c00145d5:	31 ff                	xor    edi,edi
c00145d7:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00145de:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00145e4:	6a 00                	push   0x0
c00145e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145eb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00145ee:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00145f4:	e8 8d 55 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c00145f9:	83 c4 10             	add    esp,0x10
c00145fc:	e8 be 37 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0014601:	47                   	inc    edi
c0014602:	6a 07                	push   0x7
c0014604:	53                   	push   ebx
c0014605:	50                   	push   eax
c0014606:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001460a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014610:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014613:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014619:	e8 02 57 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001461e:	58                   	pop    eax
c001461f:	5a                   	pop    edx
c0014620:	68 07 0c 00 00       	push   0xc07
c0014625:	55                   	push   ebp
c0014626:	81 c5 00 10 00 00    	add    ebp,0x1000
c001462c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014630:	50                   	push   eax
c0014631:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014638:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001463e:	6a 00                	push   0x0
c0014640:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014645:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014648:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001464e:	e8 1f 59 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014653:	83 c4 1c             	add    esp,0x1c
c0014656:	68 00 10 00 00       	push   0x1000
c001465b:	6a 00                	push   0x0
c001465d:	53                   	push   ebx
c001465e:	e8 8d be fe ff       	call   c00004f0 <memset>
c0014663:	83 c4 10             	add    esp,0x10
c0014666:	39 fe                	cmp    esi,edi
c0014668:	77 92                	ja     c00145fc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c001466a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001466f:	48                   	dec    eax
c0014670:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014675:	75 01                	jne    c0014678 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0014677:	fb                   	sti    
c0014678:	83 ec 0c             	sub    esp,0xc
c001467b:	53                   	push   ebx
c001467c:	e8 aa 52 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0014681:	83 c4 10             	add    esp,0x10
c0014684:	b0 01                	mov    al,0x1
c0014686:	81 c4 2c 10 00 00    	add    esp,0x102c
c001468c:	5b                   	pop    ebx
c001468d:	5e                   	pop    esi
c001468e:	5f                   	pop    edi
c001468f:	5d                   	pop    ebp
c0014690:	c3                   	ret    

c0014691 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014691:	55                   	push   ebp
c0014692:	57                   	push   edi
c0014693:	56                   	push   esi
c0014694:	53                   	push   ebx
c0014695:	83 ec 48             	sub    esp,0x48
c0014698:	68 14 01 00 00       	push   0x114
c001469d:	e8 14 34 ff ff       	call   c0007ab6 <malloc>
c00146a2:	83 c4 0c             	add    esp,0xc
c00146a5:	89 c6                	mov    esi,eax
c00146a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00146ab:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00146af:	50                   	push   eax
c00146b0:	e8 21 72 ff ff       	call   c000b8d6 <File::File(char const*, Process*)>
c00146b5:	58                   	pop    eax
c00146b6:	5a                   	pop    edx
c00146b7:	6a 01                	push   0x1
c00146b9:	56                   	push   esi
c00146ba:	e8 35 72 ff ff       	call   c000b8f4 <File::open(FileOpenMode)>
c00146bf:	83 c4 10             	add    esp,0x10
c00146c2:	85 c0                	test   eax,eax
c00146c4:	0f 85 43 01 00 00    	jne    c001480d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00146ca:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00146d2:	83 ec 0c             	sub    esp,0xc
c00146d5:	6a 34                	push   0x34
c00146d7:	e8 da 33 ff ff       	call   c0007ab6 <malloc>
c00146dc:	89 c3                	mov    ebx,eax
c00146de:	58                   	pop    eax
c00146df:	8b 06                	mov    eax,DWORD PTR [esi]
c00146e1:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00146e5:	57                   	push   edi
c00146e6:	53                   	push   ebx
c00146e7:	6a 00                	push   0x0
c00146e9:	6a 34                	push   0x34
c00146eb:	56                   	push   esi
c00146ec:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00146ef:	83 c4 20             	add    esp,0x20
c00146f2:	85 c0                	test   eax,eax
c00146f4:	0f 85 13 01 00 00    	jne    c001480d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00146fa:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014700:	0f 85 07 01 00 00    	jne    c001480d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014706:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014709:	85 c0                	test   eax,eax
c001470b:	0f 84 fc 00 00 00    	je     c001480d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014711:	31 d2                	xor    edx,edx
c0014713:	55                   	push   ebp
c0014714:	52                   	push   edx
c0014715:	50                   	push   eax
c0014716:	56                   	push   esi
c0014717:	e8 96 72 ff ff       	call   c000b9b2 <File::seek(unsigned long long)>
c001471c:	83 c4 10             	add    esp,0x10
c001471f:	85 c0                	test   eax,eax
c0014721:	0f 85 e6 00 00 00    	jne    c001480d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014727:	83 ec 0c             	sub    esp,0xc
c001472a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001472d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014735:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014739:	0f af c2             	imul   eax,edx
c001473c:	50                   	push   eax
c001473d:	e8 74 33 ff ff       	call   c0007ab6 <malloc>
c0014742:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014744:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014748:	89 3c 24             	mov    DWORD PTR [esp],edi
c001474b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001474f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014753:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014757:	0f af c2             	imul   eax,edx
c001475a:	99                   	cdq    
c001475b:	52                   	push   edx
c001475c:	50                   	push   eax
c001475d:	56                   	push   esi
c001475e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014761:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014764:	83 c4 20             	add    esp,0x20
c0014767:	85 c0                	test   eax,eax
c0014769:	0f 84 9e 00 00 00    	je     c001480d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001476f:	31 d2                	xor    edx,edx
c0014771:	51                   	push   ecx
c0014772:	52                   	push   edx
c0014773:	50                   	push   eax
c0014774:	56                   	push   esi
c0014775:	e8 38 72 ff ff       	call   c000b9b2 <File::seek(unsigned long long)>
c001477a:	83 c4 10             	add    esp,0x10
c001477d:	85 c0                	test   eax,eax
c001477f:	0f 85 88 00 00 00    	jne    c001480d <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014785:	83 ec 0c             	sub    esp,0xc
c0014788:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001478c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014790:	31 ed                	xor    ebp,ebp
c0014792:	0f af c2             	imul   eax,edx
c0014795:	50                   	push   eax
c0014796:	e8 1b 33 ff ff       	call   c0007ab6 <malloc>
c001479b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001479d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00147a1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00147a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147a8:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00147ac:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00147b0:	0f af c2             	imul   eax,edx
c00147b3:	99                   	cdq    
c00147b4:	52                   	push   edx
c00147b5:	50                   	push   eax
c00147b6:	56                   	push   esi
c00147b7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00147ba:	83 c4 20             	add    esp,0x20
c00147bd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00147c5:	0f b7 fd             	movzx  edi,bp
c00147c8:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c00147cc:	73 7d                	jae    c001484b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c00147ce:	c1 e7 05             	shl    edi,0x5
c00147d1:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00147d5:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00147d8:	75 6b                	jne    c0014845 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c00147da:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00147dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147e1:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00147e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147e8:	52                   	push   edx
c00147e9:	31 d2                	xor    edx,edx
c00147eb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00147ee:	52                   	push   edx
c00147ef:	50                   	push   eax
c00147f0:	56                   	push   esi
c00147f1:	e8 bc 71 ff ff       	call   c000b9b2 <File::seek(unsigned long long)>
c00147f6:	83 c4 10             	add    esp,0x10
c00147f9:	85 c0                	test   eax,eax
c00147fb:	74 17                	je     c0014814 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c00147fd:	83 ec 0c             	sub    esp,0xc
c0014800:	68 b5 23 02 c0       	push   0xc00223b5
c0014805:	e8 3b 61 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001480a:	83 c4 10             	add    esp,0x10
c001480d:	31 c0                	xor    eax,eax
c001480f:	e9 87 00 00 00       	jmp    c001489b <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014814:	83 ec 0c             	sub    esp,0xc
c0014817:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001481a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001481d:	50                   	push   eax
c001481e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014822:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014826:	56                   	push   esi
c0014827:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001482b:	e8 d3 fb ff ff       	call   c0014403 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014830:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014834:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014838:	83 c4 20             	add    esp,0x20
c001483b:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001483f:	73 04                	jae    c0014845 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014841:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014845:	45                   	inc    ebp
c0014846:	e9 7a ff ff ff       	jmp    c00147c5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001484b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001484f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014853:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014857:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001485d:	83 ec 0c             	sub    esp,0xc
c0014860:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014866:	25 00 f0 ff ff       	and    eax,0xfffff000
c001486b:	05 00 10 00 00       	add    eax,0x1000
c0014870:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014877:	e8 4a 32 ff ff       	call   c0007ac6 <free>
c001487c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001487f:	e8 42 32 ff ff       	call   c0007ac6 <free>
c0014884:	58                   	pop    eax
c0014885:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014889:	e8 38 32 ff ff       	call   c0007ac6 <free>
c001488e:	89 34 24             	mov    DWORD PTR [esp],esi
c0014891:	e8 bc 70 ff ff       	call   c000b952 <File::close()>
c0014896:	83 c4 10             	add    esp,0x10
c0014899:	b0 01                	mov    al,0x1
c001489b:	83 c4 3c             	add    esp,0x3c
c001489e:	5b                   	pop    ebx
c001489f:	5e                   	pop    esi
c00148a0:	5f                   	pop    edi
c00148a1:	5d                   	pop    ebp
c00148a2:	c3                   	ret    

c00148a3 <Thr::runtimeReferenceHelper()>:
c00148a3:	83 ec 18             	sub    esp,0x18
c00148a6:	68 bd 23 02 c0       	push   0xc00223bd
c00148ab:	e8 95 60 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00148b0:	fa                   	cli    
c00148b1:	83 c4 10             	add    esp,0x10
c00148b4:	eb fe                	jmp    c00148b4 <Thr::runtimeReferenceHelper()+0x11>

c00148b6 <Thr::getAddressOfKernelSymbol(char const*)>:
c00148b6:	57                   	push   edi
c00148b7:	56                   	push   esi
c00148b8:	53                   	push   ebx
c00148b9:	31 db                	xor    ebx,ebx
c00148bb:	39 1d a0 96 02 c0    	cmp    DWORD PTR ds:0xc00296a0,ebx
c00148c1:	7e 3c                	jle    c00148ff <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00148c3:	8b 34 9d 20 96 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd69e0]
c00148ca:	31 ff                	xor    edi,edi
c00148cc:	39 3c 9d 20 95 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6ae0],edi
c00148d3:	7e 27                	jle    c00148fc <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00148d5:	50                   	push   eax
c00148d6:	50                   	push   eax
c00148d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00148db:	8b 06                	mov    eax,DWORD PTR [esi]
c00148dd:	03 04 9d a0 95 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6a60]
c00148e4:	50                   	push   eax
c00148e5:	e8 66 be fe ff       	call   c0000750 <strcmp>
c00148ea:	83 c4 10             	add    esp,0x10
c00148ed:	85 c0                	test   eax,eax
c00148ef:	75 05                	jne    c00148f6 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00148f1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00148f4:	eb 0b                	jmp    c0014901 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00148f6:	83 c6 10             	add    esi,0x10
c00148f9:	47                   	inc    edi
c00148fa:	eb d0                	jmp    c00148cc <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00148fc:	43                   	inc    ebx
c00148fd:	eb bc                	jmp    c00148bb <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00148ff:	31 c0                	xor    eax,eax
c0014901:	5b                   	pop    ebx
c0014902:	5e                   	pop    esi
c0014903:	5f                   	pop    edi
c0014904:	c3                   	ret    

c0014905 <Thr::loadKernelSymbolTable(char const*)>:
c0014905:	55                   	push   ebp
c0014906:	57                   	push   edi
c0014907:	56                   	push   esi
c0014908:	53                   	push   ebx
c0014909:	83 ec 68             	sub    esp,0x68
c001490c:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c0014912:	68 14 01 00 00       	push   0x114
c0014917:	e8 9a 31 ff ff       	call   c0007ab6 <malloc>
c001491c:	83 c4 0c             	add    esp,0xc
c001491f:	89 c3                	mov    ebx,eax
c0014921:	56                   	push   esi
c0014922:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014926:	50                   	push   eax
c0014927:	e8 aa 6f ff ff       	call   c000b8d6 <File::File(char const*, Process*)>
c001492c:	5e                   	pop    esi
c001492d:	5f                   	pop    edi
c001492e:	6a 01                	push   0x1
c0014930:	53                   	push   ebx
c0014931:	e8 be 6f ff ff       	call   c000b8f4 <File::open(FileOpenMode)>
c0014936:	83 c4 10             	add    esp,0x10
c0014939:	85 c0                	test   eax,eax
c001493b:	74 0a                	je     c0014947 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001493d:	83 ec 0c             	sub    esp,0xc
c0014940:	68 df 23 02 c0       	push   0xc00223df
c0014945:	eb 34                	jmp    c001497b <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014947:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001494f:	83 ec 0c             	sub    esp,0xc
c0014952:	6a 34                	push   0x34
c0014954:	e8 5d 31 ff ff       	call   c0007ab6 <malloc>
c0014959:	59                   	pop    ecx
c001495a:	89 c7                	mov    edi,eax
c001495c:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014960:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014962:	56                   	push   esi
c0014963:	57                   	push   edi
c0014964:	6a 00                	push   0x0
c0014966:	6a 34                	push   0x34
c0014968:	53                   	push   ebx
c0014969:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001496c:	83 c4 20             	add    esp,0x20
c001496f:	85 c0                	test   eax,eax
c0014971:	74 17                	je     c001498a <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014973:	83 ec 0c             	sub    esp,0xc
c0014976:	68 f6 23 02 c0       	push   0xc00223f6
c001497b:	e8 fd c9 ff ff       	call   c001137d <KePanic(char const*)>
c0014980:	83 c4 10             	add    esp,0x10
c0014983:	31 c0                	xor    eax,eax
c0014985:	e9 31 02 00 00       	jmp    c0014bbb <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001498a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014990:	75 e1                	jne    c0014973 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014992:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014995:	85 c0                	test   eax,eax
c0014997:	74 da                	je     c0014973 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014999:	52                   	push   edx
c001499a:	31 d2                	xor    edx,edx
c001499c:	52                   	push   edx
c001499d:	50                   	push   eax
c001499e:	53                   	push   ebx
c001499f:	e8 0e 70 ff ff       	call   c000b9b2 <File::seek(unsigned long long)>
c00149a4:	83 c4 10             	add    esp,0x10
c00149a7:	85 c0                	test   eax,eax
c00149a9:	75 c8                	jne    c0014973 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00149ab:	83 ec 0c             	sub    esp,0xc
c00149ae:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00149b2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00149b6:	31 ed                	xor    ebp,ebp
c00149b8:	0f af c2             	imul   eax,edx
c00149bb:	50                   	push   eax
c00149bc:	e8 f5 30 ff ff       	call   c0007ab6 <malloc>
c00149c1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00149c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00149c7:	89 34 24             	mov    DWORD PTR [esp],esi
c00149ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00149ce:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00149d2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00149d6:	0f af c2             	imul   eax,edx
c00149d9:	99                   	cdq    
c00149da:	52                   	push   edx
c00149db:	50                   	push   eax
c00149dc:	53                   	push   ebx
c00149dd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149e0:	83 c4 20             	add    esp,0x20
c00149e3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00149eb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00149f3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00149fb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014a03:	0f b7 f5             	movzx  esi,bp
c0014a06:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014a0a:	0f 83 a7 00 00 00    	jae    c0014ab7 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014a10:	6b f6 28             	imul   esi,esi,0x28
c0014a13:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014a17:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014a1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014a1e:	50                   	push   eax
c0014a1f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a23:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014a27:	8b 16                	mov    edx,DWORD PTR [esi]
c0014a29:	6b c0 28             	imul   eax,eax,0x28
c0014a2c:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014a30:	89 d0                	mov    eax,edx
c0014a32:	31 d2                	xor    edx,edx
c0014a34:	52                   	push   edx
c0014a35:	50                   	push   eax
c0014a36:	53                   	push   ebx
c0014a37:	e8 76 6f ff ff       	call   c000b9b2 <File::seek(unsigned long long)>
c0014a3c:	83 c4 0c             	add    esp,0xc
c0014a3f:	6a 20                	push   0x20
c0014a41:	6a 00                	push   0x0
c0014a43:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014a47:	52                   	push   edx
c0014a48:	e8 a3 ba fe ff       	call   c00004f0 <memset>
c0014a4d:	58                   	pop    eax
c0014a4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a50:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014a54:	51                   	push   ecx
c0014a55:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014a59:	52                   	push   edx
c0014a5a:	6a 00                	push   0x0
c0014a5c:	6a 1f                	push   0x1f
c0014a5e:	53                   	push   ebx
c0014a5f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a62:	83 c4 18             	add    esp,0x18
c0014a65:	68 0d 24 02 c0       	push   0xc002240d
c0014a6a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014a6e:	52                   	push   edx
c0014a6f:	e8 dc bc fe ff       	call   c0000750 <strcmp>
c0014a74:	83 c4 10             	add    esp,0x10
c0014a77:	85 c0                	test   eax,eax
c0014a79:	75 0f                	jne    c0014a8a <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014a7b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014a7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a8a:	50                   	push   eax
c0014a8b:	50                   	push   eax
c0014a8c:	68 15 24 02 c0       	push   0xc0022415
c0014a91:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014a95:	50                   	push   eax
c0014a96:	e8 b5 bc fe ff       	call   c0000750 <strcmp>
c0014a9b:	83 c4 10             	add    esp,0x10
c0014a9e:	85 c0                	test   eax,eax
c0014aa0:	75 0f                	jne    c0014ab1 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014aa2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014aa5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014aa9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014aad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014ab1:	45                   	inc    ebp
c0014ab2:	e9 4c ff ff ff       	jmp    c0014a03 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014ab7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014abc:	75 10                	jne    c0014ace <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014abe:	83 ec 0c             	sub    esp,0xc
c0014ac1:	68 1d 24 02 c0       	push   0xc002241d
c0014ac6:	e8 b2 c8 ff ff       	call   c001137d <KePanic(char const*)>
c0014acb:	83 c4 10             	add    esp,0x10
c0014ace:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014ad3:	75 10                	jne    c0014ae5 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014ad5:	83 ec 0c             	sub    esp,0xc
c0014ad8:	68 1d 24 02 c0       	push   0xc002241d
c0014add:	e8 9b c8 ff ff       	call   c001137d <KePanic(char const*)>
c0014ae2:	83 c4 10             	add    esp,0x10
c0014ae5:	31 d2                	xor    edx,edx
c0014ae7:	50                   	push   eax
c0014ae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014aec:	52                   	push   edx
c0014aed:	50                   	push   eax
c0014aee:	53                   	push   ebx
c0014aef:	e8 be 6e ff ff       	call   c000b9b2 <File::seek(unsigned long long)>
c0014af4:	5a                   	pop    edx
c0014af5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014af9:	e8 b8 2f ff ff       	call   c0007ab6 <malloc>
c0014afe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014b02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014b06:	31 c9                	xor    ecx,ecx
c0014b08:	5e                   	pop    esi
c0014b09:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014b0b:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014b0f:	55                   	push   ebp
c0014b10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b14:	51                   	push   ecx
c0014b15:	52                   	push   edx
c0014b16:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014b1a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014b1e:	53                   	push   ebx
c0014b1f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014b22:	83 c4 14             	add    esp,0x14
c0014b25:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014b29:	e8 88 2f ff ff       	call   c0007ab6 <malloc>
c0014b2e:	89 c6                	mov    esi,eax
c0014b30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014b32:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014b35:	56                   	push   esi
c0014b36:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014b3a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014b3e:	51                   	push   ecx
c0014b3f:	52                   	push   edx
c0014b40:	53                   	push   ebx
c0014b41:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014b44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014b48:	8b 15 a0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296a0
c0014b4e:	83 c4 1c             	add    esp,0x1c
c0014b51:	c1 e8 04             	shr    eax,0x4
c0014b54:	89 04 95 20 95 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6ae0],eax
c0014b5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b5f:	31 d2                	xor    edx,edx
c0014b61:	52                   	push   edx
c0014b62:	50                   	push   eax
c0014b63:	53                   	push   ebx
c0014b64:	e8 49 6e ff ff       	call   c000b9b2 <File::seek(unsigned long long)>
c0014b69:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014b6b:	31 d2                	xor    edx,edx
c0014b6d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014b70:	56                   	push   esi
c0014b71:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014b75:	52                   	push   edx
c0014b76:	50                   	push   eax
c0014b77:	53                   	push   ebx
c0014b78:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b7b:	83 c4 14             	add    esp,0x14
c0014b7e:	53                   	push   ebx
c0014b7f:	e8 ce 6d ff ff       	call   c000b952 <File::close()>
c0014b84:	5d                   	pop    ebp
c0014b85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b89:	e8 38 2f ff ff       	call   c0007ac6 <free>
c0014b8e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014b91:	e8 30 2f ff ff       	call   c0007ac6 <free>
c0014b96:	a1 a0 96 02 c0       	mov    eax,ds:0xc00296a0
c0014b9b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014b9f:	8d 50 01             	lea    edx,[eax+0x1]
c0014ba2:	89 0c 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],ecx
c0014ba9:	89 34 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],esi
c0014bb0:	89 15 a0 96 02 c0    	mov    DWORD PTR ds:0xc00296a0,edx
c0014bb6:	83 c4 10             	add    esp,0x10
c0014bb9:	b0 01                	mov    al,0x1
c0014bbb:	83 c4 5c             	add    esp,0x5c
c0014bbe:	5b                   	pop    ebx
c0014bbf:	5e                   	pop    esi
c0014bc0:	5f                   	pop    edi
c0014bc1:	5d                   	pop    ebp
c0014bc2:	c3                   	ret    

c0014bc3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014bc3:	55                   	push   ebp
c0014bc4:	57                   	push   edi
c0014bc5:	56                   	push   esi
c0014bc6:	53                   	push   ebx
c0014bc7:	81 ec 68 03 00 00    	sub    esp,0x368
c0014bcd:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014bd4:	8b 1d f0 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296f0
c0014bda:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014bde:	68 14 01 00 00       	push   0x114
c0014be3:	e8 ce 2e ff ff       	call   c0007ab6 <malloc>
c0014be8:	83 c4 0c             	add    esp,0xc
c0014beb:	89 c5                	mov    ebp,eax
c0014bed:	53                   	push   ebx
c0014bee:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014bf5:	50                   	push   eax
c0014bf6:	e8 db 6c ff ff       	call   c000b8d6 <File::File(char const*, Process*)>
c0014bfb:	5e                   	pop    esi
c0014bfc:	5f                   	pop    edi
c0014bfd:	6a 01                	push   0x1
c0014bff:	55                   	push   ebp
c0014c00:	e8 ef 6c ff ff       	call   c000b8f4 <File::open(FileOpenMode)>
c0014c05:	83 c4 10             	add    esp,0x10
c0014c08:	85 c0                	test   eax,eax
c0014c0a:	0f 85 aa 06 00 00    	jne    c00152ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014c10:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014c18:	83 ec 0c             	sub    esp,0xc
c0014c1b:	6a 34                	push   0x34
c0014c1d:	e8 94 2e ff ff       	call   c0007ab6 <malloc>
c0014c22:	5b                   	pop    ebx
c0014c23:	89 c7                	mov    edi,eax
c0014c25:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014c29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014c2c:	53                   	push   ebx
c0014c2d:	57                   	push   edi
c0014c2e:	6a 00                	push   0x0
c0014c30:	6a 34                	push   0x34
c0014c32:	55                   	push   ebp
c0014c33:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c36:	83 c4 20             	add    esp,0x20
c0014c39:	85 c0                	test   eax,eax
c0014c3b:	0f 85 79 06 00 00    	jne    c00152ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014c41:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014c47:	0f 85 6d 06 00 00    	jne    c00152ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014c4d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014c50:	85 c0                	test   eax,eax
c0014c52:	0f 84 62 06 00 00    	je     c00152ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014c58:	31 d2                	xor    edx,edx
c0014c5a:	51                   	push   ecx
c0014c5b:	52                   	push   edx
c0014c5c:	50                   	push   eax
c0014c5d:	55                   	push   ebp
c0014c5e:	e8 4f 6d ff ff       	call   c000b9b2 <File::seek(unsigned long long)>
c0014c63:	83 c4 10             	add    esp,0x10
c0014c66:	85 c0                	test   eax,eax
c0014c68:	0f 85 4c 06 00 00    	jne    c00152ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014c6e:	83 ec 0c             	sub    esp,0xc
c0014c71:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014c74:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014c78:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014c7c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014c80:	0f af c2             	imul   eax,edx
c0014c83:	50                   	push   eax
c0014c84:	e8 2d 2e ff ff       	call   c0007ab6 <malloc>
c0014c89:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014c8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c97:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014c9b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014c9f:	0f af c2             	imul   eax,edx
c0014ca2:	99                   	cdq    
c0014ca3:	52                   	push   edx
c0014ca4:	50                   	push   eax
c0014ca5:	55                   	push   ebp
c0014ca6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ca9:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0014cac:	83 c4 20             	add    esp,0x20
c0014caf:	85 c0                	test   eax,eax
c0014cb1:	0f 84 03 06 00 00    	je     c00152ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014cb7:	52                   	push   edx
c0014cb8:	31 d2                	xor    edx,edx
c0014cba:	52                   	push   edx
c0014cbb:	50                   	push   eax
c0014cbc:	55                   	push   ebp
c0014cbd:	e8 f0 6c ff ff       	call   c000b9b2 <File::seek(unsigned long long)>
c0014cc2:	83 c4 10             	add    esp,0x10
c0014cc5:	85 c0                	test   eax,eax
c0014cc7:	0f 85 ed 05 00 00    	jne    c00152ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ccd:	83 ec 0c             	sub    esp,0xc
c0014cd0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014cd4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014cd8:	31 f6                	xor    esi,esi
c0014cda:	0f af c2             	imul   eax,edx
c0014cdd:	50                   	push   eax
c0014cde:	e8 d3 2d ff ff       	call   c0007ab6 <malloc>
c0014ce3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014ce6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014cea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ced:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014cf1:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014cf5:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014cf9:	0f af c2             	imul   eax,edx
c0014cfc:	99                   	cdq    
c0014cfd:	52                   	push   edx
c0014cfe:	50                   	push   eax
c0014cff:	55                   	push   ebp
c0014d00:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d03:	83 c4 20             	add    esp,0x20
c0014d06:	0f b7 de             	movzx  ebx,si
c0014d09:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0014d0d:	0f 83 87 00 00 00    	jae    c0014d9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014d13:	c1 e3 05             	shl    ebx,0x5
c0014d16:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014d1a:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014d1d:	75 75                	jne    c0014d94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014d1f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014d22:	31 d2                	xor    edx,edx
c0014d24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d28:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014d2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014d2f:	50                   	push   eax
c0014d30:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014d33:	52                   	push   edx
c0014d34:	50                   	push   eax
c0014d35:	55                   	push   ebp
c0014d36:	e8 77 6c ff ff       	call   c000b9b2 <File::seek(unsigned long long)>
c0014d3b:	83 c4 10             	add    esp,0x10
c0014d3e:	85 c0                	test   eax,eax
c0014d40:	0f 85 74 05 00 00    	jne    c00152ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014d46:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014d4d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014d50:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014d54:	31 d2                	xor    edx,edx
c0014d56:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014d5a:	83 ec 0c             	sub    esp,0xc
c0014d5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d61:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014d68:	50                   	push   eax
c0014d69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014d6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d71:	52                   	push   edx
c0014d72:	50                   	push   eax
c0014d73:	55                   	push   ebp
c0014d74:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d77:	83 c4 1c             	add    esp,0x1c
c0014d7a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014d7d:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014d80:	50                   	push   eax
c0014d81:	6a 00                	push   0x0
c0014d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d87:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014d8b:	50                   	push   eax
c0014d8c:	e8 5f b7 fe ff       	call   c00004f0 <memset>
c0014d91:	83 c4 10             	add    esp,0x10
c0014d94:	46                   	inc    esi
c0014d95:	e9 6c ff ff ff       	jmp    c0014d06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014d9a:	53                   	push   ebx
c0014d9b:	31 db                	xor    ebx,ebx
c0014d9d:	68 00 01 00 00       	push   0x100
c0014da2:	6a 00                	push   0x0
c0014da4:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014da8:	50                   	push   eax
c0014da9:	e8 42 b7 fe ff       	call   c00004f0 <memset>
c0014dae:	83 c4 0c             	add    esp,0xc
c0014db1:	68 00 01 00 00       	push   0x100
c0014db6:	6a 00                	push   0x0
c0014db8:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014dbf:	50                   	push   eax
c0014dc0:	e8 2b b7 fe ff       	call   c00004f0 <memset>
c0014dc5:	83 c4 10             	add    esp,0x10
c0014dc8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014dd0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014dd8:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014de0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014de8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014df0:	0f b7 f3             	movzx  esi,bx
c0014df3:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0014df7:	0f 83 2d 01 00 00    	jae    c0014f2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0014dfd:	6b f6 28             	imul   esi,esi,0x28
c0014e00:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014e04:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014e0b:	52                   	push   edx
c0014e0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014e10:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014e14:	8b 06                	mov    eax,DWORD PTR [esi]
c0014e16:	6b d2 28             	imul   edx,edx,0x28
c0014e19:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014e1d:	31 d2                	xor    edx,edx
c0014e1f:	52                   	push   edx
c0014e20:	50                   	push   eax
c0014e21:	55                   	push   ebp
c0014e22:	e8 8b 6b ff ff       	call   c000b9b2 <File::seek(unsigned long long)>
c0014e27:	83 c4 0c             	add    esp,0xc
c0014e2a:	6a 20                	push   0x20
c0014e2c:	6a 00                	push   0x0
c0014e2e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014e35:	51                   	push   ecx
c0014e36:	e8 b5 b6 fe ff       	call   c00004f0 <memset>
c0014e3b:	59                   	pop    ecx
c0014e3c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014e3f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014e43:	52                   	push   edx
c0014e44:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014e4b:	51                   	push   ecx
c0014e4c:	6a 00                	push   0x0
c0014e4e:	6a 1f                	push   0x1f
c0014e50:	55                   	push   ebp
c0014e51:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e54:	83 c4 1c             	add    esp,0x1c
c0014e57:	6a 09                	push   0x9
c0014e59:	68 37 24 02 c0       	push   0xc0022437
c0014e5e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014e65:	51                   	push   ecx
c0014e66:	e8 15 b5 fe ff       	call   c0000380 <memcmp>
c0014e6b:	83 c4 10             	add    esp,0x10
c0014e6e:	85 c0                	test   eax,eax
c0014e70:	75 21                	jne    c0014e93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014e72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e76:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014e7a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014e7e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014e82:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014e85:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014e8c:	89 d0                	mov    eax,edx
c0014e8e:	40                   	inc    eax
c0014e8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e93:	50                   	push   eax
c0014e94:	6a 09                	push   0x9
c0014e96:	68 41 24 02 c0       	push   0xc0022441
c0014e9b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014ea2:	50                   	push   eax
c0014ea3:	e8 d8 b4 fe ff       	call   c0000380 <memcmp>
c0014ea8:	83 c4 10             	add    esp,0x10
c0014eab:	85 c0                	test   eax,eax
c0014ead:	75 21                	jne    c0014ed0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0014eaf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014eb3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014eb7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014ebb:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0014ebf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014ec2:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014ec9:	89 d0                	mov    eax,edx
c0014ecb:	40                   	inc    eax
c0014ecc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ed0:	50                   	push   eax
c0014ed1:	50                   	push   eax
c0014ed2:	68 0d 24 02 c0       	push   0xc002240d
c0014ed7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014ede:	50                   	push   eax
c0014edf:	e8 6c b8 fe ff       	call   c0000750 <strcmp>
c0014ee4:	83 c4 10             	add    esp,0x10
c0014ee7:	85 c0                	test   eax,eax
c0014ee9:	75 0f                	jne    c0014efa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0014eeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014eee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014ef2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014ef6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014efa:	50                   	push   eax
c0014efb:	50                   	push   eax
c0014efc:	68 15 24 02 c0       	push   0xc0022415
c0014f01:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014f08:	50                   	push   eax
c0014f09:	e8 42 b8 fe ff       	call   c0000750 <strcmp>
c0014f0e:	83 c4 10             	add    esp,0x10
c0014f11:	85 c0                	test   eax,eax
c0014f13:	75 0f                	jne    c0014f24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0014f15:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014f18:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014f1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014f20:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014f24:	43                   	inc    ebx
c0014f25:	e9 c6 fe ff ff       	jmp    c0014df0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014f2a:	31 d2                	xor    edx,edx
c0014f2c:	50                   	push   eax
c0014f2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f31:	52                   	push   edx
c0014f32:	50                   	push   eax
c0014f33:	55                   	push   ebp
c0014f34:	e8 79 6a ff ff       	call   c000b9b2 <File::seek(unsigned long long)>
c0014f39:	58                   	pop    eax
c0014f3a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014f3e:	e8 73 2b ff ff       	call   c0007ab6 <malloc>
c0014f43:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014f46:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014f4a:	31 d2                	xor    edx,edx
c0014f4c:	58                   	pop    eax
c0014f4d:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014f51:	53                   	push   ebx
c0014f52:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014f56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014f5a:	52                   	push   edx
c0014f5b:	50                   	push   eax
c0014f5c:	55                   	push   ebp
c0014f5d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f60:	83 c4 14             	add    esp,0x14
c0014f63:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014f67:	e8 4a 2b ff ff       	call   c0007ab6 <malloc>
c0014f6c:	31 d2                	xor    edx,edx
c0014f6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014f72:	83 c4 0c             	add    esp,0xc
c0014f75:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014f79:	52                   	push   edx
c0014f7a:	50                   	push   eax
c0014f7b:	55                   	push   ebp
c0014f7c:	e8 31 6a ff ff       	call   c000b9b2 <File::seek(unsigned long long)>
c0014f81:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014f84:	31 d2                	xor    edx,edx
c0014f86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f8d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014f91:	52                   	push   edx
c0014f92:	50                   	push   eax
c0014f93:	55                   	push   ebp
c0014f94:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f97:	83 c4 20             	add    esp,0x20
c0014f9a:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0014f9f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014fa7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014fab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014faf:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0014fb3:	0f 84 05 03 00 00    	je     c00152be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0014fb9:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0014fc0:	31 d2                	xor    edx,edx
c0014fc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014fc6:	c1 e8 03             	shr    eax,0x3
c0014fc9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0014fcd:	51                   	push   ecx
c0014fce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fd2:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014fd6:	52                   	push   edx
c0014fd7:	50                   	push   eax
c0014fd8:	55                   	push   ebp
c0014fd9:	e8 d4 69 ff ff       	call   c000b9b2 <File::seek(unsigned long long)>
c0014fde:	5b                   	pop    ebx
c0014fdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fe3:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014fea:	e8 c7 2a ff ff       	call   c0007ab6 <malloc>
c0014fef:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014ff2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014ff6:	31 d2                	xor    edx,edx
c0014ff8:	5e                   	pop    esi
c0014ff9:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014ffd:	50                   	push   eax
c0014ffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015002:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015006:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001500d:	52                   	push   edx
c001500e:	50                   	push   eax
c001500f:	55                   	push   ebp
c0015010:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015013:	83 c4 20             	add    esp,0x20
c0015016:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001501e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015022:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0015026:	0f 8d 76 02 00 00    	jge    c00152a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c001502c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015030:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015034:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0015039:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c001503c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015040:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015044:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0015048:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001504c:	c1 e8 08             	shr    eax,0x8
c001504f:	89 c6                	mov    esi,eax
c0015051:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015055:	c1 e6 04             	shl    esi,0x4
c0015058:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001505c:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c001505f:	85 db                	test   ebx,ebx
c0015061:	0f 85 b3 00 00 00    	jne    c001511a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015067:	83 ec 0c             	sub    esp,0xc
c001506a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001506e:	03 06                	add    eax,DWORD PTR [esi]
c0015070:	50                   	push   eax
c0015071:	e8 40 f8 ff ff       	call   c00148b6 <Thr::getAddressOfKernelSymbol(char const*)>
c0015076:	83 c4 10             	add    esp,0x10
c0015079:	89 c3                	mov    ebx,eax
c001507b:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0015080:	85 c0                	test   eax,eax
c0015082:	0f 85 92 00 00 00    	jne    c001511a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015088:	83 ec 0c             	sub    esp,0xc
c001508b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001508f:	03 06                	add    eax,DWORD PTR [esi]
c0015091:	50                   	push   eax
c0015092:	e8 d1 c4 ff ff       	call   c0011568 <KeResolveCompatibilitySymbol(char*)>
c0015097:	83 c4 10             	add    esp,0x10
c001509a:	89 c3                	mov    ebx,eax
c001509c:	85 c0                	test   eax,eax
c001509e:	75 7a                	jne    c001511a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00150a0:	51                   	push   ecx
c00150a1:	51                   	push   ecx
c00150a2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00150a6:	03 06                	add    eax,DWORD PTR [esi]
c00150a8:	50                   	push   eax
c00150a9:	68 4b 24 02 c0       	push   0xc002244b
c00150ae:	e8 92 58 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00150b3:	58                   	pop    eax
c00150b4:	5a                   	pop    edx
c00150b5:	68 65 24 02 c0       	push   0xc0022465
c00150ba:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00150c1:	50                   	push   eax
c00150c2:	e8 79 b5 fe ff       	call   c0000640 <strcpy>
c00150c7:	59                   	pop    ecx
c00150c8:	58                   	pop    eax
c00150c9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00150cd:	03 06                	add    eax,DWORD PTR [esi]
c00150cf:	50                   	push   eax
c00150d0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00150d7:	50                   	push   eax
c00150d8:	e8 63 b7 fe ff       	call   c0000840 <strcat>
c00150dd:	58                   	pop    eax
c00150de:	5a                   	pop    edx
c00150df:	68 fb 24 02 c0       	push   0xc00224fb
c00150e4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00150eb:	50                   	push   eax
c00150ec:	e8 4f b7 fe ff       	call   c0000840 <strcat>
c00150f1:	83 c4 10             	add    esp,0x10
c00150f4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00150f9:	0f 84 5d 01 00 00    	je     c001525c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00150ff:	83 ec 0c             	sub    esp,0xc
c0015102:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015109:	50                   	push   eax
c001510a:	e8 6e c2 ff ff       	call   c001137d <KePanic(char const*)>
c001510f:	83 c4 10             	add    esp,0x10
c0015112:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015116:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c001511a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001511f:	83 f8 01             	cmp    eax,0x1
c0015122:	0f 85 8f 00 00 00    	jne    c00151b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0015128:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001512f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0015133:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0015137:	01 ce                	add    esi,ecx
c0015139:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0015141:	0f 94 c0             	sete   al
c0015144:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001514c:	0f 94 c2             	sete   dl
c001514f:	09 c2                	or     edx,eax
c0015151:	8b 06                	mov    eax,DWORD PTR [esi]
c0015153:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0015158:	0f b6 d2             	movzx  edx,dl
c001515b:	74 41                	je     c001519e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c001515d:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0015160:	85 d2                	test   edx,edx
c0015162:	75 15                	jne    c0015179 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0015164:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015168:	66 83 f8 0c          	cmp    ax,0xc
c001516c:	76 05                	jbe    c0015173 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c001516e:	b8 0c 00 00 00       	mov    eax,0xc
c0015173:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015177:	76 37                	jbe    c00151b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015179:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001517d:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015182:	0f 84 d4 00 00 00    	je     c001525c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015188:	83 ec 0c             	sub    esp,0xc
c001518b:	68 7c 24 02 c0       	push   0xc002247c
c0015190:	e8 e8 c1 ff ff       	call   c001137d <KePanic(char const*)>
c0015195:	83 c4 10             	add    esp,0x10
c0015198:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001519c:	eb 12                	jmp    c00151b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001519e:	01 c1                	add    ecx,eax
c00151a0:	85 d2                	test   edx,edx
c00151a2:	75 0c                	jne    c00151b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00151a4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00151a8:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00151ac:	77 02                	ja     c00151b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00151ae:	01 d9                	add    ecx,ebx
c00151b0:	89 0e                	mov    DWORD PTR [esi],ecx
c00151b2:	e9 e2 00 00 00       	jmp    c0015299 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00151b7:	83 f8 02             	cmp    eax,0x2
c00151ba:	75 77                	jne    c0015233 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c00151bc:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00151c3:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c00151c7:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c00151cb:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00151d3:	74 21                	je     c00151f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00151d5:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00151dd:	74 17                	je     c00151f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00151df:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c00151e3:	b8 0a 00 00 00       	mov    eax,0xa
c00151e8:	83 fa 0e             	cmp    edx,0xe
c00151eb:	77 03                	ja     c00151f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c00151ed:	8d 42 fc             	lea    eax,[edx-0x4]
c00151f0:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00151f4:	76 17                	jbe    c001520d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c00151f6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00151fb:	74 5f                	je     c001525c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00151fd:	83 ec 0c             	sub    esp,0xc
c0015200:	68 98 24 02 c0       	push   0xc0022498
c0015205:	e8 73 c1 ff ff       	call   c001137d <KePanic(char const*)>
c001520a:	83 c4 10             	add    esp,0x10
c001520d:	8b 06                	mov    eax,DWORD PTR [esi]
c001520f:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0015214:	74 13                	je     c0015229 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0015216:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001521a:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0015221:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0015225:	01 d0                	add    eax,edx
c0015227:	eb 04                	jmp    c001522d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0015229:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001522d:	01 c3                	add    ebx,eax
c001522f:	89 1e                	mov    DWORD PTR [esi],ebx
c0015231:	eb 66                	jmp    c0015299 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015233:	52                   	push   edx
c0015234:	52                   	push   edx
c0015235:	50                   	push   eax
c0015236:	68 b4 24 02 c0       	push   0xc00224b4
c001523b:	e8 05 57 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015240:	83 c4 10             	add    esp,0x10
c0015243:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015248:	74 12                	je     c001525c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001524a:	83 ec 0c             	sub    esp,0xc
c001524d:	68 bf 24 02 c0       	push   0xc00224bf
c0015252:	e8 26 c1 ff ff       	call   c001137d <KePanic(char const*)>
c0015257:	83 c4 10             	add    esp,0x10
c001525a:	eb 3d                	jmp    c0015299 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001525c:	83 ec 0c             	sub    esp,0xc
c001525f:	55                   	push   ebp
c0015260:	e8 ed 66 ff ff       	call   c000b952 <File::close()>
c0015265:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015268:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001526b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001526e:	59                   	pop    ecx
c001526f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015273:	e8 4e 28 ff ff       	call   c0007ac6 <free>
c0015278:	5b                   	pop    ebx
c0015279:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001527d:	e8 44 28 ff ff       	call   c0007ac6 <free>
c0015282:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015285:	e8 3c 28 ff ff       	call   c0007ac6 <free>
c001528a:	5e                   	pop    esi
c001528b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001528f:	e8 32 28 ff ff       	call   c0007ac6 <free>
c0015294:	83 c4 10             	add    esp,0x10
c0015297:	eb 21                	jmp    c00152ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015299:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001529d:	e9 7c fd ff ff       	jmp    c001501e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c00152a2:	83 ec 0c             	sub    esp,0xc
c00152a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152a9:	e8 18 28 ff ff       	call   c0007ac6 <free>
c00152ae:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00152b2:	83 c4 10             	add    esp,0x10
c00152b5:	e9 f1 fc ff ff       	jmp    c0014fab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c00152ba:	31 c0                	xor    eax,eax
c00152bc:	eb 33                	jmp    c00152f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c00152be:	83 ec 0c             	sub    esp,0xc
c00152c1:	55                   	push   ebp
c00152c2:	e8 8b 66 ff ff       	call   c000b952 <File::close()>
c00152c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00152ca:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00152cd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00152d0:	58                   	pop    eax
c00152d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00152d5:	e8 ec 27 ff ff       	call   c0007ac6 <free>
c00152da:	89 3c 24             	mov    DWORD PTR [esp],edi
c00152dd:	e8 e4 27 ff ff       	call   c0007ac6 <free>
c00152e2:	5a                   	pop    edx
c00152e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152e7:	e8 da 27 ff ff       	call   c0007ac6 <free>
c00152ec:	83 c4 10             	add    esp,0x10
c00152ef:	b0 01                	mov    al,0x1
c00152f1:	81 c4 5c 03 00 00    	add    esp,0x35c
c00152f7:	5b                   	pop    ebx
c00152f8:	5e                   	pop    esi
c00152f9:	5f                   	pop    edi
c00152fa:	5d                   	pop    ebp
c00152fb:	c3                   	ret    

c00152fc <Thr::getDriverBaseFromAddress(unsigned long)>:
c00152fc:	56                   	push   esi
c00152fd:	31 d2                	xor    edx,edx
c00152ff:	53                   	push   ebx
c0015300:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0015306:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001530a:	39 d3                	cmp    ebx,edx
c001530c:	7e 1b                	jle    c0015329 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001530e:	8b 04 95 20 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6ee0]
c0015315:	39 c8                	cmp    eax,ecx
c0015317:	77 0d                	ja     c0015326 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0015319:	8b 34 95 20 8f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd70e0]
c0015320:	01 c6                	add    esi,eax
c0015322:	39 ce                	cmp    esi,ecx
c0015324:	77 05                	ja     c001532b <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015326:	42                   	inc    edx
c0015327:	eb e1                	jmp    c001530a <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015329:	31 c0                	xor    eax,eax
c001532b:	5b                   	pop    ebx
c001532c:	5e                   	pop    esi
c001532d:	c3                   	ret    

c001532e <Thr::getDriverNameFromAddress(unsigned long)>:
c001532e:	53                   	push   ebx
c001532f:	31 c0                	xor    eax,eax
c0015331:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015335:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c001533b:	39 c3                	cmp    ebx,eax
c001533d:	7e 22                	jle    c0015361 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001533f:	8b 14 85 20 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ee0]
c0015346:	39 ca                	cmp    edx,ecx
c0015348:	77 14                	ja     c001535e <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001534a:	03 14 85 20 8f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd70e0]
c0015351:	39 ca                	cmp    edx,ecx
c0015353:	76 09                	jbe    c001535e <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015355:	8b 04 85 20 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ce0]
c001535c:	eb 05                	jmp    c0015363 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001535e:	40                   	inc    eax
c001535f:	eb da                	jmp    c001533b <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015361:	31 c0                	xor    eax,eax
c0015363:	5b                   	pop    ebx
c0015364:	c3                   	ret    

c0015365 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015365:	53                   	push   ebx
c0015366:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001536a:	53                   	push   ebx
c001536b:	e8 8c ff ff ff       	call   c00152fc <Thr::getDriverBaseFromAddress(unsigned long)>
c0015370:	5a                   	pop    edx
c0015371:	31 d2                	xor    edx,edx
c0015373:	85 c0                	test   eax,eax
c0015375:	74 04                	je     c001537b <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015377:	89 da                	mov    edx,ebx
c0015379:	29 c2                	sub    edx,eax
c001537b:	89 d0                	mov    eax,edx
c001537d:	5b                   	pop    ebx
c001537e:	c3                   	ret    

c001537f <Thr::loadDLL(char const*, bool)>:
c001537f:	55                   	push   ebp
c0015380:	57                   	push   edi
c0015381:	56                   	push   esi
c0015382:	53                   	push   ebx
c0015383:	81 ec 34 01 00 00    	sub    esp,0x134
c0015389:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015390:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015397:	56                   	push   esi
c0015398:	68 d7 24 02 c0       	push   0xc00224d7
c001539d:	e8 a3 55 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00153a2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00153a9:	e8 08 27 ff ff       	call   c0007ab6 <malloc>
c00153ae:	83 c4 0c             	add    esp,0xc
c00153b1:	89 c3                	mov    ebx,eax
c00153b3:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00153b9:	56                   	push   esi
c00153ba:	50                   	push   eax
c00153bb:	e8 16 65 ff ff       	call   c000b8d6 <File::File(char const*, Process*)>
c00153c0:	83 c4 10             	add    esp,0x10
c00153c3:	85 db                	test   ebx,ebx
c00153c5:	75 3c                	jne    c0015403 <Thr::loadDLL(char const*, bool)+0x84>
c00153c7:	89 f8                	mov    eax,edi
c00153c9:	84 c0                	test   al,al
c00153cb:	0f 84 d2 01 00 00    	je     c00155a3 <Thr::loadDLL(char const*, bool)+0x224>
c00153d1:	55                   	push   ebp
c00153d2:	55                   	push   ebp
c00153d3:	68 e8 24 02 c0       	push   0xc00224e8
c00153d8:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00153dc:	55                   	push   ebp
c00153dd:	e8 5e b2 fe ff       	call   c0000640 <strcpy>
c00153e2:	58                   	pop    eax
c00153e3:	5a                   	pop    edx
c00153e4:	56                   	push   esi
c00153e5:	55                   	push   ebp
c00153e6:	e8 55 b4 fe ff       	call   c0000840 <strcat>
c00153eb:	59                   	pop    ecx
c00153ec:	58                   	pop    eax
c00153ed:	68 fb 24 02 c0       	push   0xc00224fb
c00153f2:	55                   	push   ebp
c00153f3:	e8 48 b4 fe ff       	call   c0000840 <strcat>
c00153f8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00153fb:	e8 7d bf ff ff       	call   c001137d <KePanic(char const*)>
c0015400:	83 c4 10             	add    esp,0x10
c0015403:	51                   	push   ecx
c0015404:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0015408:	50                   	push   eax
c0015409:	8d 44 24 20          	lea    eax,[esp+0x20]
c001540d:	50                   	push   eax
c001540e:	53                   	push   ebx
c001540f:	e8 e2 67 ff ff       	call   c000bbf6 <File::stat(unsigned long long*, bool*)>
c0015414:	83 c4 10             	add    esp,0x10
c0015417:	85 db                	test   ebx,ebx
c0015419:	74 0c                	je     c0015427 <Thr::loadDLL(char const*, bool)+0xa8>
c001541b:	83 ec 0c             	sub    esp,0xc
c001541e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015420:	53                   	push   ebx
c0015421:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015424:	83 c4 10             	add    esp,0x10
c0015427:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001542c:	75 0a                	jne    c0015438 <Thr::loadDLL(char const*, bool)+0xb9>
c001542e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015432:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015436:	75 3c                	jne    c0015474 <Thr::loadDLL(char const*, bool)+0xf5>
c0015438:	89 f8                	mov    eax,edi
c001543a:	84 c0                	test   al,al
c001543c:	0f 84 49 01 00 00    	je     c001558b <Thr::loadDLL(char const*, bool)+0x20c>
c0015442:	51                   	push   ecx
c0015443:	51                   	push   ecx
c0015444:	68 e8 24 02 c0       	push   0xc00224e8
c0015449:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001544d:	53                   	push   ebx
c001544e:	e8 ed b1 fe ff       	call   c0000640 <strcpy>
c0015453:	5d                   	pop    ebp
c0015454:	58                   	pop    eax
c0015455:	56                   	push   esi
c0015456:	53                   	push   ebx
c0015457:	e8 e4 b3 fe ff       	call   c0000840 <strcat>
c001545c:	58                   	pop    eax
c001545d:	5a                   	pop    edx
c001545e:	68 fb 24 02 c0       	push   0xc00224fb
c0015463:	53                   	push   ebx
c0015464:	e8 d7 b3 fe ff       	call   c0000840 <strcat>
c0015469:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001546c:	e8 0c bf ff ff       	call   c001137d <KePanic(char const*)>
c0015471:	83 c4 10             	add    esp,0x10
c0015474:	52                   	push   edx
c0015475:	6a 03                	push   0x3
c0015477:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001547b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001547f:	05 ff 0f 00 00       	add    eax,0xfff
c0015484:	83 d2 00             	adc    edx,0x0
c0015487:	0f ac d0 0c          	shrd   eax,edx,0xc
c001548b:	50                   	push   eax
c001548c:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015492:	e8 8d 49 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0015497:	59                   	pop    ecx
c0015498:	89 c3                	mov    ebx,eax
c001549a:	5d                   	pop    ebp
c001549b:	50                   	push   eax
c001549c:	68 d2 0a 02 c0       	push   0xc0020ad2
c00154a1:	e8 9f 54 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00154a6:	89 34 24             	mov    DWORD PTR [esp],esi
c00154a9:	e8 c2 b0 fe ff       	call   c0000570 <strlen>
c00154ae:	8b 2d 00 8f 02 c0    	mov    ebp,DWORD PTR ds:0xc0028f00
c00154b4:	40                   	inc    eax
c00154b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00154b8:	e8 f9 25 ff ff       	call   c0007ab6 <malloc>
c00154bd:	89 04 ad 20 93 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6ce0],eax
c00154c4:	58                   	pop    eax
c00154c5:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c00154ca:	5a                   	pop    edx
c00154cb:	56                   	push   esi
c00154cc:	ff 34 85 20 93 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ce0]
c00154d3:	e8 68 b1 fe ff       	call   c0000640 <strcpy>
c00154d8:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c00154dd:	8d 50 01             	lea    edx,[eax+0x1]
c00154e0:	89 1c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ebx
c00154e7:	89 15 00 8f 02 c0    	mov    DWORD PTR ds:0xc0028f00,edx
c00154ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00154f1:	83 c4 0c             	add    esp,0xc
c00154f4:	89 14 85 20 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70e0],edx
c00154fb:	6a 01                	push   0x1
c00154fd:	53                   	push   ebx
c00154fe:	56                   	push   esi
c00154ff:	e8 bf f6 ff ff       	call   c0014bc3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0015504:	83 c4 10             	add    esp,0x10
c0015507:	0f b6 c0             	movzx  eax,al
c001550a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001550e:	85 c0                	test   eax,eax
c0015510:	0f 85 89 00 00 00    	jne    c001559f <Thr::loadDLL(char const*, bool)+0x220>
c0015516:	89 f8                	mov    eax,edi
c0015518:	84 c0                	test   al,al
c001551a:	74 73                	je     c001558f <Thr::loadDLL(char const*, bool)+0x210>
c001551c:	83 ec 0c             	sub    esp,0xc
c001551f:	68 fd 24 02 c0       	push   0xc00224fd
c0015524:	e8 54 be ff ff       	call   c001137d <KePanic(char const*)>
c0015529:	83 c4 10             	add    esp,0x10
c001552c:	eb 61                	jmp    c001558f <Thr::loadDLL(char const*, bool)+0x210>
c001552e:	50                   	push   eax
c001552f:	50                   	push   eax
c0015530:	89 e8                	mov    eax,ebp
c0015532:	c1 e0 0c             	shl    eax,0xc
c0015535:	01 d8                	add    eax,ebx
c0015537:	50                   	push   eax
c0015538:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001553e:	e8 c9 43 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0015543:	83 c4 10             	add    esp,0x10
c0015546:	8b 00                	mov    eax,DWORD PTR [eax]
c0015548:	a8 60                	test   al,0x60
c001554a:	75 11                	jne    c001555d <Thr::loadDLL(char const*, bool)+0x1de>
c001554c:	83 ec 0c             	sub    esp,0xc
c001554f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015554:	50                   	push   eax
c0015555:	e8 fc 27 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c001555a:	83 c4 10             	add    esp,0x10
c001555d:	45                   	inc    ebp
c001555e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015562:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015566:	05 ff 0f 00 00       	add    eax,0xfff
c001556b:	bf 00 00 00 00       	mov    edi,0x0
c0015570:	83 d2 00             	adc    edx,0x0
c0015573:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015577:	c1 ea 0c             	shr    edx,0xc
c001557a:	39 c5                	cmp    ebp,eax
c001557c:	89 d1                	mov    ecx,edx
c001557e:	89 f8                	mov    eax,edi
c0015580:	19 c8                	sbb    eax,ecx
c0015582:	72 aa                	jb     c001552e <Thr::loadDLL(char const*, bool)+0x1af>
c0015584:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015589:	75 18                	jne    c00155a3 <Thr::loadDLL(char const*, bool)+0x224>
c001558b:	31 db                	xor    ebx,ebx
c001558d:	eb 14                	jmp    c00155a3 <Thr::loadDLL(char const*, bool)+0x224>
c001558f:	83 ec 0c             	sub    esp,0xc
c0015592:	68 1c 25 02 c0       	push   0xc002251c
c0015597:	e8 e1 bd ff ff       	call   c001137d <KePanic(char const*)>
c001559c:	83 c4 10             	add    esp,0x10
c001559f:	31 ed                	xor    ebp,ebp
c00155a1:	eb bb                	jmp    c001555e <Thr::loadDLL(char const*, bool)+0x1df>
c00155a3:	81 c4 2c 01 00 00    	add    esp,0x12c
c00155a9:	89 d8                	mov    eax,ebx
c00155ab:	5b                   	pop    ebx
c00155ac:	5e                   	pop    esi
c00155ad:	5f                   	pop    edi
c00155ae:	5d                   	pop    ebp
c00155af:	c3                   	ret    

c00155b0 <Thr::executeDLL(unsigned long, void*)>:
c00155b0:	56                   	push   esi
c00155b1:	53                   	push   ebx
c00155b2:	52                   	push   edx
c00155b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00155b7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00155bb:	85 db                	test   ebx,ebx
c00155bd:	75 10                	jne    c00155cf <Thr::executeDLL(unsigned long, void*)+0x1f>
c00155bf:	83 ec 0c             	sub    esp,0xc
c00155c2:	68 38 25 02 c0       	push   0xc0022538
c00155c7:	e8 b1 bd ff ff       	call   c001137d <KePanic(char const*)>
c00155cc:	83 c4 10             	add    esp,0x10
c00155cf:	50                   	push   eax
c00155d0:	50                   	push   eax
c00155d1:	53                   	push   ebx
c00155d2:	68 62 25 02 c0       	push   0xc0022562
c00155d7:	e8 69 53 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00155dc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00155e0:	89 d8                	mov    eax,ebx
c00155e2:	83 c4 14             	add    esp,0x14
c00155e5:	5b                   	pop    ebx
c00155e6:	5e                   	pop    esi
c00155e7:	ff e0                	jmp    eax
c00155e9:	66 90                	xchg   ax,ax
c00155eb:	90                   	nop

c00155ec <userModeEntryPoint(void*)>:
c00155ec:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00155f1:	83 e8 01             	sub    eax,0x1
c00155f4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00155f9:	75 01                	jne    c00155fc <userModeEntryPoint(void*)+0x10>
c00155fb:	fb                   	sti    
c00155fc:	fb                   	sti    
c00155fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015602:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015605:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001560b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001560f:	e9 2b ac fe ff       	jmp    c000023f <goToUsermode>

c0015614 <changeTSS>:
c0015614:	83 ec 14             	sub    esp,0x14
c0015617:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001561c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001561f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015624:	c1 e2 15             	shl    edx,0x15
c0015627:	29 d0                	sub    eax,edx
c0015629:	50                   	push   eax
c001562a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001562f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015635:	05 7c 11 00 00       	add    eax,0x117c
c001563a:	50                   	push   eax
c001563b:	e8 14 39 ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c0015640:	83 c4 1c             	add    esp,0x1c
c0015643:	c3                   	ret    

c0015644 <switchToThread(ThreadControlBlock*)>:
c0015644:	57                   	push   edi
c0015645:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c001564b:	56                   	push   esi
c001564c:	85 c9                	test   ecx,ecx
c001564e:	53                   	push   ebx
c001564f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015653:	0f 85 8b 00 00 00    	jne    c00156e4 <switchToThread(ThreadControlBlock*)+0xa0>
c0015659:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c001565d:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015663:	74 7b                	je     c00156e0 <switchToThread(ThreadControlBlock*)+0x9c>
c0015665:	b8 00 04 00 00       	mov    eax,0x400
c001566a:	29 d0                	sub    eax,edx
c001566c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001566f:	d1 f8                	sar    eax,1
c0015671:	01 d0                	add    eax,edx
c0015673:	90                   	nop
c0015674:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015677:	e8 1e 28 00 00       	call   c0017e9a <HalQueryPerformanceCounter()>
c001567c:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c0015681:	89 15 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,edx
c0015687:	89 c6                	mov    esi,eax
c0015689:	89 d7                	mov    edi,edx
c001568b:	2b 35 f8 96 02 c0    	sub    esi,DWORD PTR ds:0xc00296f8
c0015691:	a3 f8 96 02 c0       	mov    ds:0xc00296f8,eax
c0015696:	1b 3d fc 96 02 c0    	sbb    edi,DWORD PTR ds:0xc00296fc
c001569c:	89 35 00 97 02 c0    	mov    DWORD PTR ds:0xc0029700,esi
c00156a2:	89 3d 04 97 02 c0    	mov    DWORD PTR ds:0xc0029704,edi
c00156a8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00156ae:	89 15 fc 96 02 c0    	mov    DWORD PTR ds:0xc00296fc,edx
c00156b4:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00156b7:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00156ba:	01 c6                	add    esi,eax
c00156bc:	11 d7                	adc    edi,edx
c00156be:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00156c1:	83 ec 0c             	sub    esp,0xc
c00156c4:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00156c7:	53                   	push   ebx
c00156c8:	e8 aa ab fe ff       	call   c0000277 <switchToThreadASM>
c00156cd:	0f 20 c0             	mov    eax,cr0
c00156d0:	83 c8 08             	or     eax,0x8
c00156d3:	0f 22 c0             	mov    cr0,eax
c00156d6:	83 c4 10             	add    esp,0x10
c00156d9:	5b                   	pop    ebx
c00156da:	5e                   	pop    esi
c00156db:	5f                   	pop    edi
c00156dc:	c3                   	ret    
c00156dd:	8d 76 00             	lea    esi,[esi+0x0]
c00156e0:	31 c0                	xor    eax,eax
c00156e2:	eb 90                	jmp    c0015674 <switchToThread(ThreadControlBlock*)+0x30>
c00156e4:	5b                   	pop    ebx
c00156e5:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c00156ef:	5e                   	pop    esi
c00156f0:	5f                   	pop    edi
c00156f1:	c3                   	ret    
c00156f2:	66 90                	xchg   ax,ax

c00156f4 <Process::addArgs(char**)>:
c00156f4:	57                   	push   edi
c00156f5:	56                   	push   esi
c00156f6:	53                   	push   ebx
c00156f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00156fb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00156ff:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015709:	85 ff                	test   edi,edi
c001570b:	74 4f                	je     c001575c <Process::addArgs(char**)+0x68>
c001570d:	8b 07                	mov    eax,DWORD PTR [edi]
c001570f:	85 c0                	test   eax,eax
c0015711:	74 49                	je     c001575c <Process::addArgs(char**)+0x68>
c0015713:	31 db                	xor    ebx,ebx
c0015715:	8d 76 00             	lea    esi,[esi+0x0]
c0015718:	83 ec 0c             	sub    esp,0xc
c001571b:	50                   	push   eax
c001571c:	e8 4f ae fe ff       	call   c0000570 <strlen>
c0015721:	83 c0 01             	add    eax,0x1
c0015724:	89 04 24             	mov    DWORD PTR [esp],eax
c0015727:	e8 8a 23 ff ff       	call   c0007ab6 <malloc>
c001572c:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015733:	5a                   	pop    edx
c0015734:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015737:	59                   	pop    ecx
c0015738:	83 c3 01             	add    ebx,0x1
c001573b:	52                   	push   edx
c001573c:	50                   	push   eax
c001573d:	e8 fe ae fe ff       	call   c0000640 <strcpy>
c0015742:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015748:	83 c4 10             	add    esp,0x10
c001574b:	83 c1 01             	add    ecx,0x1
c001574e:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015754:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015757:	85 c0                	test   eax,eax
c0015759:	75 bd                	jne    c0015718 <Process::addArgs(char**)+0x24>
c001575b:	90                   	nop
c001575c:	5b                   	pop    ebx
c001575d:	5e                   	pop    esi
c001575e:	5f                   	pop    edi
c001575f:	c3                   	ret    

c0015760 <Process::Process(char const*, Process*, char**)>:
c0015760:	56                   	push   esi
c0015761:	53                   	push   ebx
c0015762:	83 ec 14             	sub    esp,0x14
c0015765:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015769:	05 0c 02 00 00       	add    eax,0x20c
c001576e:	bb 07 00 00 00       	mov    ebx,0x7
c0015773:	89 c6                	mov    esi,eax
c0015775:	8d 76 00             	lea    esi,[esi+0x0]
c0015778:	85 db                	test   ebx,ebx
c001577a:	78 14                	js     c0015790 <Process::Process(char const*, Process*, char**)+0x30>
c001577c:	83 ec 0c             	sub    esp,0xc
c001577f:	56                   	push   esi
c0015780:	e8 e3 a5 00 00       	call   c001fd68 <ThreadControlBlock::ThreadControlBlock()>
c0015785:	83 c4 10             	add    esp,0x10
c0015788:	83 c6 5f             	add    esi,0x5f
c001578b:	83 eb 01             	sub    ebx,0x1
c001578e:	eb e8                	jmp    c0015778 <Process::Process(char const*, Process*, char**)+0x18>
c0015790:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015794:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001579b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001579f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00157a6:	83 ec 0c             	sub    esp,0xc
c00157a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157ad:	e8 c0 b9 ff ff       	call   c0011172 <KeNewProcessEnv(Process*)>
c00157b2:	83 c4 10             	add    esp,0x10
c00157b5:	89 c2                	mov    edx,eax
c00157b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157bb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00157c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157c5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00157ce:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c00157d3:	8d 50 01             	lea    edx,[eax+0x1]
c00157d6:	89 15 80 37 02 c0    	mov    DWORD PTR ds:0xc0023780,edx
c00157dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00157e0:	89 02                	mov    DWORD PTR [edx],eax
c00157e2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00157ea:	83 ec 0c             	sub    esp,0xc
c00157ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00157f1:	e8 c0 22 ff ff       	call   c0007ab6 <malloc>
c00157f6:	83 c4 10             	add    esp,0x10
c00157f9:	89 c3                	mov    ebx,eax
c00157fb:	83 ec 08             	sub    esp,0x8
c00157fe:	6a 00                	push   0x0
c0015800:	53                   	push   ebx
c0015801:	e8 62 48 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015806:	83 c4 10             	add    esp,0x10
c0015809:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001580d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015813:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015817:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015821:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015825:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015829:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001582f:	e8 62 bf ff ff       	call   c0011796 <KeInitSignals()>
c0015834:	89 c2                	mov    edx,eax
c0015836:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001583a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015840:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015844:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001584a:	85 c0                	test   eax,eax
c001584c:	74 42                	je     c0015890 <Process::Process(char const*, Process*, char**)+0x130>
c001584e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015852:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015858:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001585e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015862:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015868:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001586c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015872:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015878:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001587c:	05 0c 01 00 00       	add    eax,0x10c
c0015881:	83 ec 08             	sub    esp,0x8
c0015884:	52                   	push   edx
c0015885:	50                   	push   eax
c0015886:	e8 b5 ad fe ff       	call   c0000640 <strcpy>
c001588b:	83 c4 10             	add    esp,0x10
c001588e:	eb 64                	jmp    c00158f4 <Process::Process(char const*, Process*, char**)+0x194>
c0015890:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015898:	83 ec 0c             	sub    esp,0xc
c001589b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001589f:	e8 12 22 ff ff       	call   c0007ab6 <malloc>
c00158a4:	83 c4 10             	add    esp,0x10
c00158a7:	89 c3                	mov    ebx,eax
c00158a9:	83 ec 08             	sub    esp,0x8
c00158ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158b0:	53                   	push   ebx
c00158b1:	e8 b0 33 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c00158b6:	83 c4 10             	add    esp,0x10
c00158b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00158bd:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00158c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00158c7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00158cd:	83 ec 0c             	sub    esp,0xc
c00158d0:	50                   	push   eax
c00158d1:	e8 2e 2c ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c00158d6:	83 c4 10             	add    esp,0x10
c00158d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00158dd:	05 0c 01 00 00       	add    eax,0x10c
c00158e2:	83 ec 08             	sub    esp,0x8
c00158e5:	68 81 25 02 c0       	push   0xc0022581
c00158ea:	50                   	push   eax
c00158eb:	e8 50 ad fe ff       	call   c0000640 <strcpy>
c00158f0:	83 c4 10             	add    esp,0x10
c00158f3:	90                   	nop
c00158f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00158f8:	83 c0 0c             	add    eax,0xc
c00158fb:	83 ec 08             	sub    esp,0x8
c00158fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015902:	50                   	push   eax
c0015903:	e8 38 ad fe ff       	call   c0000640 <strcpy>
c0015908:	83 c4 10             	add    esp,0x10
c001590b:	83 ec 08             	sub    esp,0x8
c001590e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015912:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015916:	e8 d9 fd ff ff       	call   c00156f4 <Process::addArgs(char**)>
c001591b:	83 c4 10             	add    esp,0x10
c001591e:	83 ec 08             	sub    esp,0x8
c0015921:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015925:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015929:	e8 63 ed ff ff       	call   c0014691 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001592e:	83 c4 10             	add    esp,0x10
c0015931:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015935:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015939:	83 f0 01             	xor    eax,0x1
c001593c:	88 c2                	mov    dl,al
c001593e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015942:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015948:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001594d:	83 ec 04             	sub    esp,0x4
c0015950:	50                   	push   eax
c0015951:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015955:	68 d8 25 02 c0       	push   0xc00225d8
c001595a:	e8 e6 4f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001595f:	83 c4 10             	add    esp,0x10
c0015962:	90                   	nop
c0015963:	83 c4 14             	add    esp,0x14
c0015966:	5b                   	pop    ebx
c0015967:	5e                   	pop    esi
c0015968:	c3                   	ret    
c0015969:	90                   	nop
c001596a:	66 90                	xchg   ax,ax

c001596c <Process::Process(bool, char const*, Process*, char**)>:
c001596c:	56                   	push   esi
c001596d:	53                   	push   ebx
c001596e:	83 ec 24             	sub    esp,0x24
c0015971:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015975:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015979:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001597d:	05 0c 02 00 00       	add    eax,0x20c
c0015982:	bb 07 00 00 00       	mov    ebx,0x7
c0015987:	89 c6                	mov    esi,eax
c0015989:	8d 76 00             	lea    esi,[esi+0x0]
c001598c:	85 db                	test   ebx,ebx
c001598e:	78 14                	js     c00159a4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015990:	83 ec 0c             	sub    esp,0xc
c0015993:	56                   	push   esi
c0015994:	e8 cf a3 00 00       	call   c001fd68 <ThreadControlBlock::ThreadControlBlock()>
c0015999:	83 c4 10             	add    esp,0x10
c001599c:	83 c6 5f             	add    esi,0x5f
c001599f:	83 eb 01             	sub    ebx,0x1
c00159a2:	eb e8                	jmp    c001598c <Process::Process(bool, char const*, Process*, char**)+0x20>
c00159a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159a8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00159af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159b3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00159ba:	83 ec 0c             	sub    esp,0xc
c00159bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00159c1:	e8 ac b7 ff ff       	call   c0011172 <KeNewProcessEnv(Process*)>
c00159c6:	83 c4 10             	add    esp,0x10
c00159c9:	89 c2                	mov    edx,eax
c00159cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159cf:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00159d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00159d9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00159e2:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c00159e7:	8d 50 01             	lea    edx,[eax+0x1]
c00159ea:	89 15 80 37 02 c0    	mov    DWORD PTR ds:0xc0023780,edx
c00159f0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00159f4:	89 02                	mov    DWORD PTR [edx],eax
c00159f6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00159fe:	83 ec 0c             	sub    esp,0xc
c0015a01:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015a05:	e8 ac 20 ff ff       	call   c0007ab6 <malloc>
c0015a0a:	83 c4 10             	add    esp,0x10
c0015a0d:	89 c3                	mov    ebx,eax
c0015a0f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015a14:	83 ec 08             	sub    esp,0x8
c0015a17:	50                   	push   eax
c0015a18:	53                   	push   ebx
c0015a19:	e8 4a 46 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015a1e:	83 c4 10             	add    esp,0x10
c0015a21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a25:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015a2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a2f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015a39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a3d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015a41:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015a47:	e8 4a bd ff ff       	call   c0011796 <KeInitSignals()>
c0015a4c:	89 c2                	mov    edx,eax
c0015a4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a52:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015a58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a5c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015a62:	85 c0                	test   eax,eax
c0015a64:	74 42                	je     c0015aa8 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015a66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a6a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015a70:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015a76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a7a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015a80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a84:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015a8a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015a90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015a94:	05 0c 01 00 00       	add    eax,0x10c
c0015a99:	83 ec 08             	sub    esp,0x8
c0015a9c:	52                   	push   edx
c0015a9d:	50                   	push   eax
c0015a9e:	e8 9d ab fe ff       	call   c0000640 <strcpy>
c0015aa3:	83 c4 10             	add    esp,0x10
c0015aa6:	eb 64                	jmp    c0015b0c <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015aa8:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015ab0:	83 ec 0c             	sub    esp,0xc
c0015ab3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015ab7:	e8 fa 1f ff ff       	call   c0007ab6 <malloc>
c0015abc:	83 c4 10             	add    esp,0x10
c0015abf:	89 c3                	mov    ebx,eax
c0015ac1:	83 ec 08             	sub    esp,0x8
c0015ac4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015ac8:	53                   	push   ebx
c0015ac9:	e8 98 31 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015ace:	83 c4 10             	add    esp,0x10
c0015ad1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ad5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015adb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015adf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015ae5:	83 ec 0c             	sub    esp,0xc
c0015ae8:	50                   	push   eax
c0015ae9:	e8 16 2a ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015aee:	83 c4 10             	add    esp,0x10
c0015af1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015af5:	05 0c 01 00 00       	add    eax,0x10c
c0015afa:	83 ec 08             	sub    esp,0x8
c0015afd:	68 81 25 02 c0       	push   0xc0022581
c0015b02:	50                   	push   eax
c0015b03:	e8 38 ab fe ff       	call   c0000640 <strcpy>
c0015b08:	83 c4 10             	add    esp,0x10
c0015b0b:	90                   	nop
c0015b0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015b10:	83 c0 0c             	add    eax,0xc
c0015b13:	83 ec 08             	sub    esp,0x8
c0015b16:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015b1a:	50                   	push   eax
c0015b1b:	e8 20 ab fe ff       	call   c0000640 <strcpy>
c0015b20:	83 c4 10             	add    esp,0x10
c0015b23:	83 ec 08             	sub    esp,0x8
c0015b26:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015b2a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015b2e:	e8 c1 fb ff ff       	call   c00156f4 <Process::addArgs(char**)>
c0015b33:	83 c4 10             	add    esp,0x10
c0015b36:	90                   	nop
c0015b37:	83 c4 24             	add    esp,0x24
c0015b3a:	5b                   	pop    ebx
c0015b3b:	5e                   	pop    esi
c0015b3c:	c3                   	ret    
c0015b3d:	8d 76 00             	lea    esi,[esi+0x0]

c0015b40 <taskStartupFunction>:
c0015b40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b45:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015b48:	c3                   	ret    
c0015b49:	90                   	nop
c0015b4a:	66 90                	xchg   ax,ax

c0015b4c <Semaphore::Semaphore(int)>:
c0015b4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015b54:	89 10                	mov    DWORD PTR [eax],edx
c0015b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b5a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015b61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b65:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015b6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b70:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015b77:	90                   	nop
c0015b78:	c3                   	ret    
c0015b79:	90                   	nop
c0015b7a:	66 90                	xchg   ax,ax

c0015b7c <Mutex::Mutex()>:
c0015b7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b80:	6a 01                	push   0x1
c0015b82:	50                   	push   eax
c0015b83:	e8 c4 ff ff ff       	call   c0015b4c <Semaphore::Semaphore(int)>
c0015b88:	83 c4 08             	add    esp,0x8
c0015b8b:	90                   	nop
c0015b8c:	c3                   	ret    
c0015b8d:	90                   	nop
c0015b8e:	66 90                	xchg   ax,ax

c0015b90 <Process::createThread(void (*)(void*), void*, int)>:
c0015b90:	57                   	push   edi
c0015b91:	31 c9                	xor    ecx,ecx
c0015b93:	56                   	push   esi
c0015b94:	53                   	push   ebx
c0015b95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015b99:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015ba0:	89 f2                	mov    edx,esi
c0015ba2:	66 90                	xchg   ax,ax
c0015ba4:	0f b7 c2             	movzx  eax,dx
c0015ba7:	80 e2 01             	and    dl,0x1
c0015baa:	74 14                	je     c0015bc0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015bac:	d1 f8                	sar    eax,1
c0015bae:	83 c1 01             	add    ecx,0x1
c0015bb1:	89 c2                	mov    edx,eax
c0015bb3:	83 f9 10             	cmp    ecx,0x10
c0015bb6:	75 ec                	jne    c0015ba4 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015bb8:	31 db                	xor    ebx,ebx
c0015bba:	89 d8                	mov    eax,ebx
c0015bbc:	5b                   	pop    ebx
c0015bbd:	5e                   	pop    esi
c0015bbe:	5f                   	pop    edi
c0015bbf:	c3                   	ret    
c0015bc0:	b8 01 00 00 00       	mov    eax,0x1
c0015bc5:	d3 e0                	shl    eax,cl
c0015bc7:	09 c6                	or     esi,eax
c0015bc9:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015bcc:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015bd3:	01 c0                	add    eax,eax
c0015bd5:	01 c8                	add    eax,ecx
c0015bd7:	8d 04 80             	lea    eax,[eax+eax*4]
c0015bda:	01 d8                	add    eax,ebx
c0015bdc:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015be3:	75 0b                	jne    c0015bf0 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015be5:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015bef:	90                   	nop
c0015bf0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015bf6:	83 ec 0c             	sub    esp,0xc
c0015bf9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015bfc:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015bff:	01 c0                	add    eax,eax
c0015c01:	01 c8                	add    eax,ecx
c0015c03:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015c06:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015c09:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015c0f:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015c15:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015c19:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015c1f:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015c25:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015c2b:	89 ca                	mov    edx,ecx
c0015c2d:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015c34:	f7 da                	neg    edx
c0015c36:	c1 e2 15             	shl    edx,0x15
c0015c39:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015c3f:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015c45:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015c49:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015c53:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015c59:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015c5d:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015c63:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015c6d:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015c77:	68 00 01 00 00       	push   0x100
c0015c7c:	e8 35 1e ff ff       	call   c0007ab6 <malloc>
c0015c81:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015c84:	58                   	pop    eax
c0015c85:	5a                   	pop    edx
c0015c86:	53                   	push   ebx
c0015c87:	68 e4 96 02 c0       	push   0xc00296e4
c0015c8c:	e8 6f 9e 00 00       	call   c001fb00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015c91:	83 c4 10             	add    esp,0x10
c0015c94:	89 d8                	mov    eax,ebx
c0015c96:	5b                   	pop    ebx
c0015c97:	5e                   	pop    esi
c0015c98:	5f                   	pop    edi
c0015c99:	c3                   	ret    
c0015c9a:	66 90                	xchg   ax,ax

c0015c9c <Process::createUserThread()>:
c0015c9c:	83 ec 0c             	sub    esp,0xc
c0015c9f:	68 80 00 00 00       	push   0x80
c0015ca4:	6a 00                	push   0x0
c0015ca6:	68 ec 55 01 c0       	push   0xc00155ec
c0015cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015caf:	50                   	push   eax
c0015cb0:	e8 db fe ff ff       	call   c0015b90 <Process::createThread(void (*)(void*), void*, int)>
c0015cb5:	83 c4 1c             	add    esp,0x1c
c0015cb8:	c3                   	ret    
c0015cb9:	8d 76 00             	lea    esi,[esi+0x0]

c0015cbc <setupMultitasking(void (*)())>:
c0015cbc:	56                   	push   esi
c0015cbd:	53                   	push   ebx
c0015cbe:	83 ec 04             	sub    esp,0x4
c0015cc1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015cc5:	eb 11                	jmp    c0015cd8 <setupMultitasking(void (*)())+0x1c>
c0015cc7:	90                   	nop
c0015cc8:	83 ec 0c             	sub    esp,0xc
c0015ccb:	68 e4 96 02 c0       	push   0xc00296e4
c0015cd0:	e8 6f 9d 00 00       	call   c001fa44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015cd5:	83 c4 10             	add    esp,0x10
c0015cd8:	83 ec 0c             	sub    esp,0xc
c0015cdb:	68 e4 96 02 c0       	push   0xc00296e4
c0015ce0:	e8 3b 9d 00 00       	call   c001fa20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015ce5:	83 c4 10             	add    esp,0x10
c0015ce8:	84 c0                	test   al,al
c0015cea:	74 dc                	je     c0015cc8 <setupMultitasking(void (*)())+0xc>
c0015cec:	83 ec 0c             	sub    esp,0xc
c0015cef:	68 24 07 00 00       	push   0x724
c0015cf4:	e8 bd 1d ff ff       	call   c0007ab6 <malloc>
c0015cf9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015d00:	89 c3                	mov    ebx,eax
c0015d02:	6a 00                	push   0x0
c0015d04:	68 85 25 02 c0       	push   0xc0022585
c0015d09:	6a 01                	push   0x1
c0015d0b:	50                   	push   eax
c0015d0c:	e8 5b fc ff ff       	call   c001596c <Process::Process(bool, char const*, Process*, char**)>
c0015d11:	83 c4 14             	add    esp,0x14
c0015d14:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015d1a:	89 1d f0 96 02 c0    	mov    DWORD PTR ds:0xc00296f0,ebx
c0015d20:	50                   	push   eax
c0015d21:	e8 33 2a ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0015d26:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015d2d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015d37:	83 c8 01             	or     eax,0x1
c0015d3a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015d41:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015d47:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015d4a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015d54:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015d5a:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015d60:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015d6a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015d74:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015d7e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015d84:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015d8e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015d94:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015d9e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015da5:	e8 0c 1d ff ff       	call   c0007ab6 <malloc>
c0015daa:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015db0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015db6:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015dbc:	5a                   	pop    edx
c0015dbd:	59                   	pop    ecx
c0015dbe:	68 81 25 02 c0       	push   0xc0022581
c0015dc3:	50                   	push   eax
c0015dc4:	e8 77 a8 fe ff       	call   c0000640 <strcpy>
c0015dc9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015dd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015dd4:	83 c4 14             	add    esp,0x14
c0015dd7:	5b                   	pop    ebx
c0015dd8:	5e                   	pop    esi
c0015dd9:	e9 8b a4 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015dde:	66 90                	xchg   ax,ax

c0015de0 <schedule()>:
c0015de0:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015de6:	85 d2                	test   edx,edx
c0015de8:	74 0e                	je     c0015df8 <schedule()+0x18>
c0015dea:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015df4:	c3                   	ret    
c0015df5:	8d 76 00             	lea    esi,[esi+0x0]
c0015df8:	53                   	push   ebx
c0015df9:	83 ec 14             	sub    esp,0x14
c0015dfc:	68 e4 96 02 c0       	push   0xc00296e4
c0015e01:	e8 1a 9c 00 00       	call   c001fa20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015e06:	83 c4 10             	add    esp,0x10
c0015e09:	84 c0                	test   al,al
c0015e0b:	75 3f                	jne    c0015e4c <schedule()+0x6c>
c0015e0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e12:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015e15:	83 fa 01             	cmp    edx,0x1
c0015e18:	74 3a                	je     c0015e54 <schedule()+0x74>
c0015e1a:	66 90                	xchg   ax,ax
c0015e1c:	83 ec 0c             	sub    esp,0xc
c0015e1f:	68 e4 96 02 c0       	push   0xc00296e4
c0015e24:	e8 13 9c 00 00       	call   c001fa3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e29:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015e30:	89 c3                	mov    ebx,eax
c0015e32:	e8 0d 9c 00 00       	call   c001fa44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015e37:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015e3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e41:	e8 fe f7 ff ff       	call   c0015644 <switchToThread(ThreadControlBlock*)>
c0015e46:	83 c4 10             	add    esp,0x10
c0015e49:	8d 76 00             	lea    esi,[esi+0x0]
c0015e4c:	83 c4 08             	add    esp,0x8
c0015e4f:	5b                   	pop    ebx
c0015e50:	c3                   	ret    
c0015e51:	8d 76 00             	lea    esi,[esi+0x0]
c0015e54:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015e5b:	83 ec 08             	sub    esp,0x8
c0015e5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e63:	50                   	push   eax
c0015e64:	68 e4 96 02 c0       	push   0xc00296e4
c0015e69:	e8 92 9c 00 00       	call   c001fb00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015e6e:	83 c4 10             	add    esp,0x10
c0015e71:	eb a9                	jmp    c0015e1c <schedule()+0x3c>
c0015e73:	90                   	nop

c0015e74 <Semaphore::tryAcquire()>:
c0015e74:	53                   	push   ebx
c0015e75:	83 ec 08             	sub    esp,0x8
c0015e78:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015e7c:	fa                   	cli    
c0015e7d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e82:	8d 50 01             	lea    edx,[eax+0x1]
c0015e85:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015e8b:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015e91:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015e94:	89 1d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ebx
c0015e9a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015e9d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015e9f:	7c 33                	jl     c0015ed4 <Semaphore::tryAcquire()+0x60>
c0015ea1:	89 15 c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,edx
c0015ea7:	85 d2                	test   edx,edx
c0015ea9:	75 0d                	jne    c0015eb8 <Semaphore::tryAcquire()+0x44>
c0015eab:	8b 15 c0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c0
c0015eb1:	85 d2                	test   edx,edx
c0015eb3:	75 6f                	jne    c0015f24 <Semaphore::tryAcquire()+0xb0>
c0015eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0015eb8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ebd:	85 c0                	test   eax,eax
c0015ebf:	74 0b                	je     c0015ecc <Semaphore::tryAcquire()+0x58>
c0015ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ec4:	31 c0                	xor    eax,eax
c0015ec6:	83 c4 08             	add    esp,0x8
c0015ec9:	5b                   	pop    ebx
c0015eca:	c3                   	ret    
c0015ecb:	90                   	nop
c0015ecc:	fb                   	sti    
c0015ecd:	83 c4 08             	add    esp,0x8
c0015ed0:	5b                   	pop    ebx
c0015ed1:	c3                   	ret    
c0015ed2:	66 90                	xchg   ax,ax
c0015ed4:	83 c3 01             	add    ebx,0x1
c0015ed7:	89 15 c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,edx
c0015edd:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015ee0:	85 d2                	test   edx,edx
c0015ee2:	75 24                	jne    c0015f08 <Semaphore::tryAcquire()+0x94>
c0015ee4:	8b 0d c0 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c0
c0015eea:	85 c9                	test   ecx,ecx
c0015eec:	74 1a                	je     c0015f08 <Semaphore::tryAcquire()+0x94>
c0015eee:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015ef8:	e8 e3 fe ff ff       	call   c0015de0 <schedule()>
c0015efd:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f02:	83 e8 01             	sub    eax,0x1
c0015f05:	8d 76 00             	lea    esi,[esi+0x0]
c0015f08:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f0d:	85 c0                	test   eax,eax
c0015f0f:	75 0b                	jne    c0015f1c <Semaphore::tryAcquire()+0xa8>
c0015f11:	fb                   	sti    
c0015f12:	b0 01                	mov    al,0x1
c0015f14:	83 c4 08             	add    esp,0x8
c0015f17:	5b                   	pop    ebx
c0015f18:	c3                   	ret    
c0015f19:	8d 76 00             	lea    esi,[esi+0x0]
c0015f1c:	b0 01                	mov    al,0x1
c0015f1e:	83 c4 08             	add    esp,0x8
c0015f21:	5b                   	pop    ebx
c0015f22:	c3                   	ret    
c0015f23:	90                   	nop
c0015f24:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015f2e:	e8 ad fe ff ff       	call   c0015de0 <schedule()>
c0015f33:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f38:	83 e8 01             	sub    eax,0x1
c0015f3b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f40:	85 c0                	test   eax,eax
c0015f42:	75 80                	jne    c0015ec4 <Semaphore::tryAcquire()+0x50>
c0015f44:	eb 86                	jmp    c0015ecc <Semaphore::tryAcquire()+0x58>
c0015f46:	66 90                	xchg   ax,ax

c0015f48 <Semaphore::assertLocked(char const*)>:
c0015f48:	83 ec 0c             	sub    esp,0xc
c0015f4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f4f:	fa                   	cli    
c0015f50:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015f56:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015f5b:	83 c1 01             	add    ecx,0x1
c0015f5e:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015f64:	8d 48 01             	lea    ecx,[eax+0x1]
c0015f67:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015f6d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015f6f:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015f72:	7c 28                	jl     c0015f9c <Semaphore::assertLocked(char const*)+0x54>
c0015f74:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015f79:	85 c0                	test   eax,eax
c0015f7b:	75 0b                	jne    c0015f88 <Semaphore::assertLocked(char const*)+0x40>
c0015f7d:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015f82:	85 c0                	test   eax,eax
c0015f84:	75 32                	jne    c0015fb8 <Semaphore::assertLocked(char const*)+0x70>
c0015f86:	66 90                	xchg   ax,ax
c0015f88:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f8d:	83 e8 01             	sub    eax,0x1
c0015f90:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f95:	75 01                	jne    c0015f98 <Semaphore::assertLocked(char const*)+0x50>
c0015f97:	fb                   	sti    
c0015f98:	83 c4 0c             	add    esp,0xc
c0015f9b:	c3                   	ret    
c0015f9c:	83 ec 0c             	sub    esp,0xc
c0015f9f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015fa3:	52                   	push   edx
c0015fa4:	e8 d4 b3 ff ff       	call   c001137d <KePanic(char const*)>
c0015fa9:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015fae:	83 c4 10             	add    esp,0x10
c0015fb1:	83 e8 01             	sub    eax,0x1
c0015fb4:	eb be                	jmp    c0015f74 <Semaphore::assertLocked(char const*)+0x2c>
c0015fb6:	66 90                	xchg   ax,ax
c0015fb8:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015fc2:	e8 19 fe ff ff       	call   c0015de0 <schedule()>
c0015fc7:	eb bf                	jmp    c0015f88 <Semaphore::assertLocked(char const*)+0x40>
c0015fc9:	8d 76 00             	lea    esi,[esi+0x0]

c0015fcc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015fcc:	83 ec 0c             	sub    esp,0xc
c0015fcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015fd8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015fdb:	e8 00 fe ff ff       	call   c0015de0 <schedule()>
c0015fe0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015fe5:	83 e8 01             	sub    eax,0x1
c0015fe8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015fed:	75 01                	jne    c0015ff0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015fef:	fb                   	sti    
c0015ff0:	83 c4 0c             	add    esp,0xc
c0015ff3:	c3                   	ret    

c0015ff4 <blockTask(TaskState)>:
c0015ff4:	83 ec 0c             	sub    esp,0xc
c0015ff7:	fa                   	cli    
c0015ff8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ffd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016001:	83 c0 01             	add    eax,0x1
c0016004:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016009:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001600e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016011:	e8 ca fd ff ff       	call   c0015de0 <schedule()>
c0016016:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001601b:	83 e8 01             	sub    eax,0x1
c001601e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016023:	75 03                	jne    c0016028 <blockTask(TaskState)+0x34>
c0016025:	fb                   	sti    
c0016026:	66 90                	xchg   ax,ax
c0016028:	83 c4 0c             	add    esp,0xc
c001602b:	c3                   	ret    

c001602c <waitTask(int, int*, int)>:
c001602c:	83 ec 18             	sub    esp,0x18
c001602f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016034:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016038:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001603b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001603f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016044:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016047:	6a 07                	push   0x7
c0016049:	e8 a6 ff ff ff       	call   c0015ff4 <blockTask(TaskState)>
c001604e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016053:	83 c4 10             	add    esp,0x10
c0016056:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016059:	85 d2                	test   edx,edx
c001605b:	74 0b                	je     c0016068 <waitTask(int, int*, int)+0x3c>
c001605d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0016060:	89 02                	mov    DWORD PTR [edx],eax
c0016062:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016067:	90                   	nop
c0016068:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001606b:	83 c4 0c             	add    esp,0xc
c001606e:	c3                   	ret    
c001606f:	90                   	nop

c0016070 <milliTenthSleepUntil(unsigned int)>:
c0016070:	83 ec 0c             	sub    esp,0xc
c0016073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016077:	39 05 ec 88 02 c0    	cmp    DWORD PTR ds:0xc00288ec,eax
c001607d:	76 05                	jbe    c0016084 <milliTenthSleepUntil(unsigned int)+0x14>
c001607f:	90                   	nop
c0016080:	83 c4 0c             	add    esp,0xc
c0016083:	c3                   	ret    
c0016084:	fa                   	cli    
c0016085:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c001608b:	83 ec 08             	sub    esp,0x8
c001608e:	83 c2 01             	add    edx,0x1
c0016091:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016097:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c001609d:	83 c1 01             	add    ecx,0x1
c00160a0:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00160a6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00160ac:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00160af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160b4:	50                   	push   eax
c00160b5:	68 d8 96 02 c0       	push   0xc00296d8
c00160ba:	e8 41 9a 00 00       	call   c001fb00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00160bf:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00160c6:	e8 29 ff ff ff       	call   c0015ff4 <blockTask(TaskState)>
c00160cb:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00160d0:	83 c4 10             	add    esp,0x10
c00160d3:	83 e8 01             	sub    eax,0x1
c00160d6:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00160db:	85 c0                	test   eax,eax
c00160dd:	75 09                	jne    c00160e8 <milliTenthSleepUntil(unsigned int)+0x78>
c00160df:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c00160e4:	85 c0                	test   eax,eax
c00160e6:	75 14                	jne    c00160fc <milliTenthSleepUntil(unsigned int)+0x8c>
c00160e8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160ed:	83 e8 01             	sub    eax,0x1
c00160f0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160f5:	75 89                	jne    c0016080 <milliTenthSleepUntil(unsigned int)+0x10>
c00160f7:	fb                   	sti    
c00160f8:	83 c4 0c             	add    esp,0xc
c00160fb:	c3                   	ret    
c00160fc:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016106:	e8 d5 fc ff ff       	call   c0015de0 <schedule()>
c001610b:	eb db                	jmp    c00160e8 <milliTenthSleepUntil(unsigned int)+0x78>
c001610d:	8d 76 00             	lea    esi,[esi+0x0]

c0016110 <milliTenthSleep(unsigned int)>:
c0016110:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016114:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0016119:	01 c2                	add    edx,eax
c001611b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001611f:	e9 4c ff ff ff       	jmp    c0016070 <milliTenthSleepUntil(unsigned int)>

c0016124 <sleep(unsigned int)>:
c0016124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016128:	8d 04 80             	lea    eax,[eax+eax*4]
c001612b:	8d 04 80             	lea    eax,[eax+eax*4]
c001612e:	8d 04 80             	lea    eax,[eax+eax*4]
c0016131:	8d 04 80             	lea    eax,[eax+eax*4]
c0016134:	c1 e0 04             	shl    eax,0x4
c0016137:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001613b:	eb d3                	jmp    c0016110 <milliTenthSleep(unsigned int)>
c001613d:	90                   	nop
c001613e:	66 90                	xchg   ax,ax

c0016140 <Semaphore::acquire()>:
c0016140:	83 ec 0c             	sub    esp,0xc
c0016143:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016147:	fa                   	cli    
c0016148:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001614d:	83 c0 01             	add    eax,0x1
c0016150:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016155:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001615a:	8d 48 01             	lea    ecx,[eax+0x1]
c001615d:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0016163:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016166:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016168:	7d 2e                	jge    c0016198 <Semaphore::acquire()+0x58>
c001616a:	83 c1 01             	add    ecx,0x1
c001616d:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016170:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016175:	85 c0                	test   eax,eax
c0016177:	75 0b                	jne    c0016184 <Semaphore::acquire()+0x44>
c0016179:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c001617e:	85 c0                	test   eax,eax
c0016180:	75 66                	jne    c00161e8 <Semaphore::acquire()+0xa8>
c0016182:	66 90                	xchg   ax,ax
c0016184:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016189:	83 e8 01             	sub    eax,0x1
c001618c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016191:	75 01                	jne    c0016194 <Semaphore::acquire()+0x54>
c0016193:	fb                   	sti    
c0016194:	83 c4 0c             	add    esp,0xc
c0016197:	c3                   	ret    
c0016198:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001619d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00161a4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00161a7:	85 c9                	test   ecx,ecx
c00161a9:	74 51                	je     c00161fc <Semaphore::acquire()+0xbc>
c00161ab:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00161ae:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00161b4:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00161b7:	90                   	nop
c00161b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161bd:	83 ec 0c             	sub    esp,0xc
c00161c0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00161c3:	68 04 26 02 c0       	push   0xc0022604
c00161c8:	e8 78 47 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00161cd:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00161d4:	e8 1b fe ff ff       	call   c0015ff4 <blockTask(TaskState)>
c00161d9:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00161de:	83 c4 10             	add    esp,0x10
c00161e1:	83 e8 01             	sub    eax,0x1
c00161e4:	eb 8a                	jmp    c0016170 <Semaphore::acquire()+0x30>
c00161e6:	66 90                	xchg   ax,ax
c00161e8:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00161f2:	e8 e9 fb ff ff       	call   c0015de0 <schedule()>
c00161f7:	eb 8b                	jmp    c0016184 <Semaphore::acquire()+0x44>
c00161f9:	8d 76 00             	lea    esi,[esi+0x0]
c00161fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016201:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016204:	eb b2                	jmp    c00161b8 <Semaphore::acquire()+0x78>
c0016206:	66 90                	xchg   ax,ax

c0016208 <taskReturned>:
c0016208:	83 ec 18             	sub    esp,0x18
c001620b:	68 24 26 02 c0       	push   0xc0022624
c0016210:	e8 68 b1 ff ff       	call   c001137d <KePanic(char const*)>
c0016215:	83 c4 10             	add    esp,0x10
c0016218:	83 ec 0c             	sub    esp,0xc
c001621b:	6a 02                	push   0x2
c001621d:	e8 d2 fd ff ff       	call   c0015ff4 <blockTask(TaskState)>
c0016222:	fa                   	cli    
c0016223:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016228:	83 c0 01             	add    eax,0x1
c001622b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016230:	e8 ab fb ff ff       	call   c0015de0 <schedule()>
c0016235:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001623a:	83 c4 10             	add    esp,0x10
c001623d:	83 e8 01             	sub    eax,0x1
c0016240:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016245:	85 c0                	test   eax,eax
c0016247:	75 cf                	jne    c0016218 <taskReturned+0x10>
c0016249:	fb                   	sti    
c001624a:	eb cc                	jmp    c0016218 <taskReturned+0x10>

c001624c <Thr::processFromPID(int)>:
c001624c:	57                   	push   edi
c001624d:	56                   	push   esi
c001624e:	53                   	push   ebx
c001624f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016253:	fa                   	cli    
c0016254:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c001625a:	83 ec 0c             	sub    esp,0xc
c001625d:	83 c1 01             	add    ecx,0x1
c0016260:	68 e4 96 02 c0       	push   0xc00296e4
c0016265:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c001626b:	e8 cc 97 00 00       	call   c001fa3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016270:	83 c4 10             	add    esp,0x10
c0016273:	89 c7                	mov    edi,eax
c0016275:	eb 15                	jmp    c001628c <Thr::processFromPID(int)+0x40>
c0016277:	90                   	nop
c0016278:	83 ec 0c             	sub    esp,0xc
c001627b:	68 e4 96 02 c0       	push   0xc00296e4
c0016280:	e8 b7 97 00 00       	call   c001fa3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016285:	83 c4 10             	add    esp,0x10
c0016288:	39 f8                	cmp    eax,edi
c001628a:	74 50                	je     c00162dc <Thr::processFromPID(int)+0x90>
c001628c:	83 ec 0c             	sub    esp,0xc
c001628f:	68 e4 96 02 c0       	push   0xc00296e4
c0016294:	e8 a3 97 00 00       	call   c001fa3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016299:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00162a0:	89 c3                	mov    ebx,eax
c00162a2:	e8 9d 97 00 00       	call   c001fa44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00162a7:	58                   	pop    eax
c00162a8:	5a                   	pop    edx
c00162a9:	53                   	push   ebx
c00162aa:	68 e4 96 02 c0       	push   0xc00296e4
c00162af:	e8 4c 98 00 00       	call   c001fb00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00162b4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00162b7:	83 c4 10             	add    esp,0x10
c00162ba:	39 30                	cmp    DWORD PTR [eax],esi
c00162bc:	75 ba                	jne    c0016278 <Thr::processFromPID(int)+0x2c>
c00162be:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00162c3:	83 e8 01             	sub    eax,0x1
c00162c6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00162cb:	74 0b                	je     c00162d8 <Thr::processFromPID(int)+0x8c>
c00162cd:	8d 76 00             	lea    esi,[esi+0x0]
c00162d0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00162d3:	5b                   	pop    ebx
c00162d4:	5e                   	pop    esi
c00162d5:	5f                   	pop    edi
c00162d6:	c3                   	ret    
c00162d7:	90                   	nop
c00162d8:	fb                   	sti    
c00162d9:	eb f5                	jmp    c00162d0 <Thr::processFromPID(int)+0x84>
c00162db:	90                   	nop
c00162dc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00162e1:	83 e8 01             	sub    eax,0x1
c00162e4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00162e9:	75 05                	jne    c00162f0 <Thr::processFromPID(int)+0xa4>
c00162eb:	fb                   	sti    
c00162ec:	5b                   	pop    ebx
c00162ed:	5e                   	pop    esi
c00162ee:	5f                   	pop    edi
c00162ef:	c3                   	ret    
c00162f0:	5b                   	pop    ebx
c00162f1:	31 c0                	xor    eax,eax
c00162f3:	5e                   	pop    esi
c00162f4:	5f                   	pop    edi
c00162f5:	c3                   	ret    
c00162f6:	66 90                	xchg   ax,ax

c00162f8 <unblockTask(ThreadControlBlock*)>:
c00162f8:	53                   	push   ebx
c00162f9:	83 ec 08             	sub    esp,0x8
c00162fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016300:	fa                   	cli    
c0016301:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016306:	83 c0 01             	add    eax,0x1
c0016309:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001630e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016311:	85 c0                	test   eax,eax
c0016313:	74 67                	je     c001637c <unblockTask(ThreadControlBlock*)+0x84>
c0016315:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016318:	83 f8 01             	cmp    eax,0x1
c001631b:	74 37                	je     c0016354 <unblockTask(ThreadControlBlock*)+0x5c>
c001631d:	83 ec 0c             	sub    esp,0xc
c0016320:	68 e4 96 02 c0       	push   0xc00296e4
c0016325:	e8 12 97 00 00       	call   c001fa3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001632a:	83 c4 10             	add    esp,0x10
c001632d:	85 c0                	test   eax,eax
c001632f:	75 1b                	jne    c001634c <unblockTask(ThreadControlBlock*)+0x54>
c0016331:	eb 5d                	jmp    c0016390 <unblockTask(ThreadControlBlock*)+0x98>
c0016333:	90                   	nop
c0016334:	83 ec 08             	sub    esp,0x8
c0016337:	50                   	push   eax
c0016338:	68 e4 96 02 c0       	push   0xc00296e4
c001633d:	e8 1a 9a 00 00       	call   c001fd5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016342:	83 c4 10             	add    esp,0x10
c0016345:	85 c0                	test   eax,eax
c0016347:	74 47                	je     c0016390 <unblockTask(ThreadControlBlock*)+0x98>
c0016349:	8d 76 00             	lea    esi,[esi+0x0]
c001634c:	39 c3                	cmp    ebx,eax
c001634e:	75 e4                	jne    c0016334 <unblockTask(ThreadControlBlock*)+0x3c>
c0016350:	eb 12                	jmp    c0016364 <unblockTask(ThreadControlBlock*)+0x6c>
c0016352:	66 90                	xchg   ax,ax
c0016354:	83 ec 0c             	sub    esp,0xc
c0016357:	68 a3 25 02 c0       	push   0xc00225a3
c001635c:	e8 e4 45 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016361:	83 c4 10             	add    esp,0x10
c0016364:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016369:	83 e8 01             	sub    eax,0x1
c001636c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016371:	75 01                	jne    c0016374 <unblockTask(ThreadControlBlock*)+0x7c>
c0016373:	fb                   	sti    
c0016374:	83 c4 08             	add    esp,0x8
c0016377:	5b                   	pop    ebx
c0016378:	c3                   	ret    
c0016379:	8d 76 00             	lea    esi,[esi+0x0]
c001637c:	83 ec 0c             	sub    esp,0xc
c001637f:	68 8c 25 02 c0       	push   0xc002258c
c0016384:	e8 bc 45 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016389:	83 c4 10             	add    esp,0x10
c001638c:	eb d6                	jmp    c0016364 <unblockTask(ThreadControlBlock*)+0x6c>
c001638e:	66 90                	xchg   ax,ax
c0016390:	83 ec 08             	sub    esp,0x8
c0016393:	53                   	push   ebx
c0016394:	68 e4 96 02 c0       	push   0xc00296e4
c0016399:	e8 62 97 00 00       	call   c001fb00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001639e:	83 c4 10             	add    esp,0x10
c00163a1:	eb c1                	jmp    c0016364 <unblockTask(ThreadControlBlock*)+0x6c>
c00163a3:	90                   	nop

c00163a4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00163a4:	55                   	push   ebp
c00163a5:	57                   	push   edi
c00163a6:	56                   	push   esi
c00163a7:	53                   	push   ebx
c00163a8:	83 ec 1c             	sub    esp,0x1c
c00163ab:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00163af:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00163b2:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00163b8:	85 ed                	test   ebp,ebp
c00163ba:	7e 28                	jle    c00163e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00163bc:	31 f6                	xor    esi,esi
c00163be:	66 90                	xchg   ax,ax
c00163c0:	83 ec 0c             	sub    esp,0xc
c00163c3:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00163ca:	83 c6 01             	add    esi,0x1
c00163cd:	57                   	push   edi
c00163ce:	e8 f3 16 ff ff       	call   c0007ac6 <free>
c00163d3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00163d6:	83 c4 10             	add    esp,0x10
c00163d9:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00163df:	7f df                	jg     c00163c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00163e1:	8d 76 00             	lea    esi,[esi+0x0]
c00163e4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00163ee:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00163f3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00163f6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00163f9:	d3 c0                	rol    eax,cl
c00163fb:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0016402:	21 c8                	and    eax,ecx
c0016404:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001640b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001640e:	89 f7                	mov    edi,esi
c0016410:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016418:	0f 85 72 01 00 00    	jne    c0016590 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001641e:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016424:	85 ed                	test   ebp,ebp
c0016426:	74 1c                	je     c0016444 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016428:	83 ec 0c             	sub    esp,0xc
c001642b:	55                   	push   ebp
c001642c:	e8 5d ac ff ff       	call   c001108e <EnvVarContainer::~EnvVarContainer()>
c0016431:	59                   	pop    ecx
c0016432:	5e                   	pop    esi
c0016433:	6a 0c                	push   0xc
c0016435:	55                   	push   ebp
c0016436:	e8 dd 43 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001643b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001643e:	83 c4 10             	add    esp,0x10
c0016441:	89 f7                	mov    edi,esi
c0016443:	90                   	nop
c0016444:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001644a:	85 c0                	test   eax,eax
c001644c:	0f 84 b2 00 00 00    	je     c0016504 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016452:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016455:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016459:	31 c9                	xor    ecx,ecx
c001645b:	eb 17                	jmp    c0016474 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c001645d:	8d 76 00             	lea    esi,[esi+0x0]
c0016460:	83 c1 01             	add    ecx,0x1
c0016463:	83 f9 10             	cmp    ecx,0x10
c0016466:	0f 84 98 00 00 00    	je     c0016504 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001646c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016472:	66 90                	xchg   ax,ax
c0016474:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001647b:	d3 fa                	sar    edx,cl
c001647d:	80 e2 01             	and    dl,0x1
c0016480:	74 de                	je     c0016460 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016482:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0016485:	01 d2                	add    edx,edx
c0016487:	01 ca                	add    edx,ecx
c0016489:	8d 14 92             	lea    edx,[edx+edx*4]
c001648c:	01 d0                	add    eax,edx
c001648e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016494:	83 fd 07             	cmp    ebp,0x7
c0016497:	75 c7                	jne    c0016460 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016499:	05 40 02 00 00       	add    eax,0x240
c001649e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00164a1:	83 fd ff             	cmp    ebp,0xffffffff
c00164a4:	0f 8c ee 00 00 00    	jl     c0016598 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00164aa:	0f 84 ac 01 00 00    	je     c001665c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00164b0:	85 ed                	test   ebp,ebp
c00164b2:	0f 84 90 01 00 00    	je     c0016648 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00164b8:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00164ba:	75 a4                	jne    c0016460 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00164bc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00164c2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00164c6:	01 d0                	add    eax,edx
c00164c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00164cc:	83 ec 0c             	sub    esp,0xc
c00164cf:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00164d5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00164d8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00164de:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00164e5:	50                   	push   eax
c00164e6:	e8 0d fe ff ff       	call   c00162f8 <unblockTask(ThreadControlBlock*)>
c00164eb:	83 c4 10             	add    esp,0x10
c00164ee:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00164f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164f5:	89 f7                	mov    edi,esi
c00164f7:	83 c1 01             	add    ecx,0x1
c00164fa:	83 f9 10             	cmp    ecx,0x10
c00164fd:	0f 85 69 ff ff ff    	jne    c001646c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016503:	90                   	nop
c0016504:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001650a:	85 c0                	test   eax,eax
c001650c:	74 62                	je     c0016570 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001650e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016514:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001651a:	74 54                	je     c0016570 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001651c:	83 ec 0c             	sub    esp,0xc
c001651f:	68 e4 96 02 c0       	push   0xc00296e4
c0016524:	e8 13 95 00 00       	call   c001fa3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016529:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016530:	89 c7                	mov    edi,eax
c0016532:	e8 e9 94 00 00       	call   c001fa20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016537:	83 c4 10             	add    esp,0x10
c001653a:	84 c0                	test   al,al
c001653c:	0f 84 ce 00 00 00    	je     c0016610 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0016542:	66 90                	xchg   ax,ax
c0016544:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016547:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001654d:	85 d2                	test   edx,edx
c001654f:	74 0f                	je     c0016560 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016551:	83 ec 0c             	sub    esp,0xc
c0016554:	8b 02                	mov    eax,DWORD PTR [edx]
c0016556:	52                   	push   edx
c0016557:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001655a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001655d:	83 c4 10             	add    esp,0x10
c0016560:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001656a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001656d:	8d 76 00             	lea    esi,[esi+0x0]
c0016570:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016576:	85 db                	test   ebx,ebx
c0016578:	74 16                	je     c0016590 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001657a:	83 ec 0c             	sub    esp,0xc
c001657d:	53                   	push   ebx
c001657e:	e8 2f 36 ff ff       	call   c0009bb2 <VAS::~VAS()>
c0016583:	58                   	pop    eax
c0016584:	5a                   	pop    edx
c0016585:	6a 14                	push   0x14
c0016587:	53                   	push   ebx
c0016588:	e8 8b 42 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001658d:	83 c4 10             	add    esp,0x10
c0016590:	83 c4 1c             	add    esp,0x1c
c0016593:	5b                   	pop    ebx
c0016594:	5e                   	pop    esi
c0016595:	5f                   	pop    edi
c0016596:	5d                   	pop    ebp
c0016597:	c3                   	ret    
c0016598:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001659c:	83 ec 0c             	sub    esp,0xc
c001659f:	68 58 26 02 c0       	push   0xc0022658
c00165a4:	e8 d4 ad ff ff       	call   c001137d <KePanic(char const*)>
c00165a9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00165ac:	83 c4 10             	add    esp,0x10
c00165af:	89 f7                	mov    edi,esi
c00165b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165b5:	e9 a6 fe ff ff       	jmp    c0016460 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00165ba:	66 90                	xchg   ax,ax
c00165bc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00165c2:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00165c8:	75 1e                	jne    c00165e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00165ca:	83 ec 0c             	sub    esp,0xc
c00165cd:	68 c0 26 02 c0       	push   0xc00226c0
c00165d2:	e8 6e 43 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00165d7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00165de:	e8 11 fa ff ff       	call   c0015ff4 <blockTask(TaskState)>
c00165e3:	83 c4 10             	add    esp,0x10
c00165e6:	66 90                	xchg   ax,ax
c00165e8:	83 ec 08             	sub    esp,0x8
c00165eb:	56                   	push   esi
c00165ec:	68 e4 96 02 c0       	push   0xc00296e4
c00165f1:	e8 0a 95 00 00       	call   c001fb00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00165f6:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00165fd:	e8 3a 94 00 00       	call   c001fa3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016602:	83 c4 10             	add    esp,0x10
c0016605:	39 f8                	cmp    eax,edi
c0016607:	0f 84 37 ff ff ff    	je     c0016544 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001660d:	8d 76 00             	lea    esi,[esi+0x0]
c0016610:	83 ec 0c             	sub    esp,0xc
c0016613:	68 e4 96 02 c0       	push   0xc00296e4
c0016618:	e8 1f 94 00 00       	call   c001fa3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001661d:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016624:	89 c6                	mov    esi,eax
c0016626:	e8 19 94 00 00       	call   c001fa44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001662b:	83 c4 10             	add    esp,0x10
c001662e:	39 f3                	cmp    ebx,esi
c0016630:	74 b6                	je     c00165e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016632:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016635:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016638:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001663e:	75 a8                	jne    c00165e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016640:	e9 77 ff ff ff       	jmp    c00165bc <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016645:	8d 76 00             	lea    esi,[esi+0x0]
c0016648:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001664c:	83 ec 0c             	sub    esp,0xc
c001664f:	68 8c 26 02 c0       	push   0xc002268c
c0016654:	e9 4b ff ff ff       	jmp    c00165a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016659:	8d 76 00             	lea    esi,[esi+0x0]
c001665c:	8b 36                	mov    esi,DWORD PTR [esi]
c001665e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016662:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016665:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016668:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001666e:	01 d7                	add    edi,edx
c0016670:	89 f8                	mov    eax,edi
c0016672:	e9 51 fe ff ff       	jmp    c00164c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016677:	90                   	nop

c0016678 <cleanerTaskFunction(void*)>:
c0016678:	53                   	push   ebx
c0016679:	83 ec 08             	sub    esp,0x8
c001667c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016681:	83 e8 01             	sub    eax,0x1
c0016684:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016689:	75 01                	jne    c001668c <cleanerTaskFunction(void*)+0x14>
c001668b:	fb                   	sti    
c001668c:	fa                   	cli    
c001668d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016692:	80 3d ac 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296ac,0x0
c0016699:	8d 50 01             	lea    edx,[eax+0x1]
c001669c:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00166a2:	0f 84 c4 00 00 00    	je     c001676c <cleanerTaskFunction(void*)+0xf4>
c00166a8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00166ad:	85 c0                	test   eax,eax
c00166af:	75 03                	jne    c00166b4 <cleanerTaskFunction(void*)+0x3c>
c00166b1:	fb                   	sti    
c00166b2:	66 90                	xchg   ax,ax
c00166b4:	c6 05 ac 96 02 c0 00 	mov    BYTE PTR ds:0xc00296ac,0x0
c00166bb:	fa                   	cli    
c00166bc:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c00166c2:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c00166c8:	83 c2 01             	add    edx,0x1
c00166cb:	83 c1 01             	add    ecx,0x1
c00166ce:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00166d4:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00166da:	fa                   	cli    
c00166db:	8b 1d c8 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296c8
c00166e1:	83 c3 01             	add    ebx,0x1
c00166e4:	89 1d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ebx
c00166ea:	eb 28                	jmp    c0016714 <cleanerTaskFunction(void*)+0x9c>
c00166ec:	83 ec 0c             	sub    esp,0xc
c00166ef:	68 cc 96 02 c0       	push   0xc00296cc
c00166f4:	e8 43 93 00 00       	call   c001fa3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166f9:	c7 04 24 cc 96 02 c0 	mov    DWORD PTR [esp],0xc00296cc
c0016700:	89 c3                	mov    ebx,eax
c0016702:	e8 3d 93 00 00       	call   c001fa44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016707:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001670a:	e8 95 fc ff ff       	call   c00163a4 <cleanupTerminatedTask(ThreadControlBlock*)>
c001670f:	83 c4 10             	add    esp,0x10
c0016712:	66 90                	xchg   ax,ax
c0016714:	83 ec 0c             	sub    esp,0xc
c0016717:	68 cc 96 02 c0       	push   0xc00296cc
c001671c:	e8 ff 92 00 00       	call   c001fa20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016721:	83 c4 10             	add    esp,0x10
c0016724:	84 c0                	test   al,al
c0016726:	74 c4                	je     c00166ec <cleanerTaskFunction(void*)+0x74>
c0016728:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001672d:	83 e8 01             	sub    eax,0x1
c0016730:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016735:	75 01                	jne    c0016738 <cleanerTaskFunction(void*)+0xc0>
c0016737:	fb                   	sti    
c0016738:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001673d:	83 e8 01             	sub    eax,0x1
c0016740:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016745:	0f 85 31 ff ff ff    	jne    c001667c <cleanerTaskFunction(void*)+0x4>
c001674b:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0016750:	85 c0                	test   eax,eax
c0016752:	0f 84 24 ff ff ff    	je     c001667c <cleanerTaskFunction(void*)+0x4>
c0016758:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016762:	e8 79 f6 ff ff       	call   c0015de0 <schedule()>
c0016767:	e9 10 ff ff ff       	jmp    c001667c <cleanerTaskFunction(void*)+0x4>
c001676c:	83 ec 0c             	sub    esp,0xc
c001676f:	6a 02                	push   0x2
c0016771:	e8 56 f8 ff ff       	call   c0015fcc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016776:	83 c4 10             	add    esp,0x10
c0016779:	e9 36 ff ff ff       	jmp    c00166b4 <cleanerTaskFunction(void*)+0x3c>
c001677e:	66 90                	xchg   ax,ax

c0016780 <terminateTask(int)>:
c0016780:	83 ec 14             	sub    esp,0x14
c0016783:	fa                   	cli    
c0016784:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c001678a:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016790:	83 c2 01             	add    edx,0x1
c0016793:	83 c1 01             	add    ecx,0x1
c0016796:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c001679c:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00167a2:	fa                   	cli    
c00167a3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00167a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00167ac:	83 c0 01             	add    eax,0x1
c00167af:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00167b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167b9:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00167bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167c1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00167c4:	50                   	push   eax
c00167c5:	68 cc 96 02 c0       	push   0xc00296cc
c00167ca:	e8 31 93 00 00       	call   c001fb00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00167cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167d4:	83 c4 10             	add    esp,0x10
c00167d7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00167de:	a1 a8 96 02 c0       	mov    eax,ds:0xc00296a8
c00167e3:	85 c0                	test   eax,eax
c00167e5:	74 65                	je     c001684c <terminateTask(int)+0xcc>
c00167e7:	83 ec 0c             	sub    esp,0xc
c00167ea:	c6 05 ac 96 02 c0 01 	mov    BYTE PTR ds:0xc00296ac,0x1
c00167f1:	50                   	push   eax
c00167f2:	e8 01 fb ff ff       	call   c00162f8 <unblockTask(ThreadControlBlock*)>
c00167f7:	83 c4 10             	add    esp,0x10
c00167fa:	66 90                	xchg   ax,ax
c00167fc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016801:	83 e8 01             	sub    eax,0x1
c0016804:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016809:	75 01                	jne    c001680c <terminateTask(int)+0x8c>
c001680b:	fb                   	sti    
c001680c:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016811:	83 e8 01             	sub    eax,0x1
c0016814:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016819:	75 09                	jne    c0016824 <terminateTask(int)+0xa4>
c001681b:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c0016822:	75 3c                	jne    c0016860 <terminateTask(int)+0xe0>
c0016824:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016829:	83 e8 01             	sub    eax,0x1
c001682c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016831:	75 01                	jne    c0016834 <terminateTask(int)+0xb4>
c0016833:	fb                   	sti    
c0016834:	fa                   	cli    
c0016835:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001683a:	83 c0 01             	add    eax,0x1
c001683d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016842:	66 90                	xchg   ax,ax
c0016844:	e8 97 f5 ff ff       	call   c0015de0 <schedule()>
c0016849:	eb d9                	jmp    c0016824 <terminateTask(int)+0xa4>
c001684b:	90                   	nop
c001684c:	83 ec 0c             	sub    esp,0xc
c001684f:	68 ba 25 02 c0       	push   0xc00225ba
c0016854:	e8 ec 40 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016859:	83 c4 10             	add    esp,0x10
c001685c:	eb 9e                	jmp    c00167fc <terminateTask(int)+0x7c>
c001685e:	66 90                	xchg   ax,ax
c0016860:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001686a:	eb d8                	jmp    c0016844 <terminateTask(int)+0xc4>

c001686c <Thr::terminateFromIRQ(int)>:
c001686c:	83 ec 18             	sub    esp,0x18
c001686f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016873:	50                   	push   eax
c0016874:	e8 07 ff ff ff       	call   c0016780 <terminateTask(int)>
c0016879:	90                   	nop
c001687a:	66 90                	xchg   ax,ax

c001687c <Semaphore::release()>:
c001687c:	83 ec 0c             	sub    esp,0xc
c001687f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016883:	fa                   	cli    
c0016884:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016889:	83 c0 01             	add    eax,0x1
c001688c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016891:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016896:	8d 48 01             	lea    ecx,[eax+0x1]
c0016899:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001689f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00168a2:	85 c9                	test   ecx,ecx
c00168a4:	74 42                	je     c00168e8 <Semaphore::release()+0x6c>
c00168a6:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00168a9:	83 ec 0c             	sub    esp,0xc
c00168ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00168af:	51                   	push   ecx
c00168b0:	e8 43 fa ff ff       	call   c00162f8 <unblockTask(ThreadControlBlock*)>
c00168b5:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00168ba:	83 c4 10             	add    esp,0x10
c00168bd:	83 e8 01             	sub    eax,0x1
c00168c0:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00168c5:	85 c0                	test   eax,eax
c00168c7:	75 0b                	jne    c00168d4 <Semaphore::release()+0x58>
c00168c9:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c00168ce:	85 c0                	test   eax,eax
c00168d0:	75 22                	jne    c00168f4 <Semaphore::release()+0x78>
c00168d2:	66 90                	xchg   ax,ax
c00168d4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00168d9:	83 e8 01             	sub    eax,0x1
c00168dc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00168e1:	75 01                	jne    c00168e4 <Semaphore::release()+0x68>
c00168e3:	fb                   	sti    
c00168e4:	83 c4 0c             	add    esp,0xc
c00168e7:	c3                   	ret    
c00168e8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00168eb:	83 e9 01             	sub    ecx,0x1
c00168ee:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00168f1:	eb cd                	jmp    c00168c0 <Semaphore::release()+0x44>
c00168f3:	90                   	nop
c00168f4:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00168fe:	e8 dd f4 ff ff       	call   c0015de0 <schedule()>
c0016903:	eb cf                	jmp    c00168d4 <Semaphore::release()+0x58>
c0016905:	8d 76 00             	lea    esi,[esi+0x0]

c0016908 <__static_initialization_and_destruction_0(int, int)>:
c0016908:	83 ec 0c             	sub    esp,0xc
c001690b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016910:	0f 85 8e 00 00 00    	jne    c00169a4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016916:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001691e:	0f 85 80 00 00 00    	jne    c00169a4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016924:	83 ec 0c             	sub    esp,0xc
c0016927:	68 e4 96 02 c0       	push   0xc00296e4
c001692c:	e8 83 94 00 00       	call   c001fdb4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016931:	83 c4 10             	add    esp,0x10
c0016934:	83 ec 04             	sub    esp,0x4
c0016937:	68 90 32 02 c0       	push   0xc0023290
c001693c:	68 e4 96 02 c0       	push   0xc00296e4
c0016941:	68 64 fd 01 c0       	push   0xc001fd64
c0016946:	e8 7d 3e ff ff       	call   c000a7c8 <__cxa_atexit>
c001694b:	83 c4 10             	add    esp,0x10
c001694e:	83 ec 0c             	sub    esp,0xc
c0016951:	68 d8 96 02 c0       	push   0xc00296d8
c0016956:	e8 59 94 00 00       	call   c001fdb4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001695b:	83 c4 10             	add    esp,0x10
c001695e:	83 ec 04             	sub    esp,0x4
c0016961:	68 90 32 02 c0       	push   0xc0023290
c0016966:	68 d8 96 02 c0       	push   0xc00296d8
c001696b:	68 64 fd 01 c0       	push   0xc001fd64
c0016970:	e8 53 3e ff ff       	call   c000a7c8 <__cxa_atexit>
c0016975:	83 c4 10             	add    esp,0x10
c0016978:	83 ec 0c             	sub    esp,0xc
c001697b:	68 cc 96 02 c0       	push   0xc00296cc
c0016980:	e8 2f 94 00 00       	call   c001fdb4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016985:	83 c4 10             	add    esp,0x10
c0016988:	83 ec 04             	sub    esp,0x4
c001698b:	68 90 32 02 c0       	push   0xc0023290
c0016990:	68 cc 96 02 c0       	push   0xc00296cc
c0016995:	68 64 fd 01 c0       	push   0xc001fd64
c001699a:	e8 29 3e ff ff       	call   c000a7c8 <__cxa_atexit>
c001699f:	83 c4 10             	add    esp,0x10
c00169a2:	66 90                	xchg   ax,ax
c00169a4:	90                   	nop
c00169a5:	83 c4 0c             	add    esp,0xc
c00169a8:	c3                   	ret    
c00169a9:	8d 76 00             	lea    esi,[esi+0x0]

c00169ac <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00169ac:	83 ec 0c             	sub    esp,0xc
c00169af:	83 ec 08             	sub    esp,0x8
c00169b2:	68 ff ff 00 00       	push   0xffff
c00169b7:	6a 01                	push   0x1
c00169b9:	e8 4a ff ff ff       	call   c0016908 <__static_initialization_and_destruction_0(int, int)>
c00169be:	83 c4 10             	add    esp,0x10
c00169c1:	83 c4 0c             	add    esp,0xc
c00169c4:	c3                   	ret    

c00169c5 <Vm::inbv(unsigned short)>:
c00169c5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00169c9:	66 81 fa fe fe       	cmp    dx,0xfefe
c00169ce:	75 06                	jne    c00169d6 <Vm::inbv(unsigned short)+0x11>
c00169d0:	a0 2c 97 02 c0       	mov    al,ds:0xc002972c
c00169d5:	c3                   	ret    
c00169d6:	ec                   	in     al,dx
c00169d7:	c3                   	ret    

c00169d8 <Vm::outbv(unsigned short, unsigned char)>:
c00169d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00169dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00169e0:	66 81 fa fe fe       	cmp    dx,0xfefe
c00169e5:	75 25                	jne    c0016a0c <Vm::outbv(unsigned short, unsigned char)+0x34>
c00169e7:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c00169ed:	8d 51 01             	lea    edx,[ecx+0x1]
c00169f0:	88 81 40 97 02 c0    	mov    BYTE PTR [ecx-0x3ffd68c0],al
c00169f6:	89 15 2c 97 02 c0    	mov    DWORD PTR ds:0xc002972c,edx
c00169fc:	83 fa 20             	cmp    edx,0x20
c00169ff:	75 0c                	jne    c0016a0d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016a01:	c7 05 2c 97 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x1f
c0016a0b:	c3                   	ret    
c0016a0c:	ee                   	out    dx,al
c0016a0d:	c3                   	ret    

c0016a0e <Vm::realToLinear(unsigned short, unsigned short)>:
c0016a0e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016a13:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016a18:	c1 e0 04             	shl    eax,0x4
c0016a1b:	01 d0                	add    eax,edx
c0016a1d:	c3                   	ret    

c0016a1e <Vm::getSegment(unsigned int)>:
c0016a1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016a22:	c1 e8 10             	shr    eax,0x10
c0016a25:	c3                   	ret    

c0016a26 <Vm::getOffset(unsigned int)>:
c0016a26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016a2a:	c3                   	ret    

c0016a2b <Vm::mainloop2()>:
c0016a2b:	83 ec 18             	sub    esp,0x18
c0016a2e:	fa                   	cli    
c0016a2f:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016a35:	6a 02                	push   0x2
c0016a37:	c6 05 25 97 02 c0 01 	mov    BYTE PTR ds:0xc0029725,0x1
c0016a3e:	e8 89 f5 ff ff       	call   c0015fcc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016a43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a48:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016a4c:	52                   	push   edx
c0016a4d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016a51:	52                   	push   edx
c0016a52:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016a56:	52                   	push   edx
c0016a57:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016a5b:	50                   	push   eax
c0016a5c:	e8 ae 97 fe ff       	call   c000020f <goToVM86>
c0016a61:	83 c4 2c             	add    esp,0x2c
c0016a64:	c3                   	ret    

c0016a65 <Vm::mainVm8086Loop(void*)>:
c0016a65:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a6a:	48                   	dec    eax
c0016a6b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a70:	75 01                	jne    c0016a73 <Vm::mainVm8086Loop(void*)+0xe>
c0016a72:	fb                   	sti    
c0016a73:	eb b6                	jmp    c0016a2b <Vm::mainloop2()>

c0016a75 <Vm::mainloop3(unsigned long)>:
c0016a75:	83 ec 18             	sub    esp,0x18
c0016a78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a7c:	fa                   	cli    
c0016a7d:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016a83:	6a 02                	push   0x2
c0016a85:	c6 05 24 97 02 c0 01 	mov    BYTE PTR ds:0xc0029724,0x1
c0016a8c:	a3 20 97 02 c0       	mov    ds:0xc0029720,eax
c0016a91:	e8 36 f5 ff ff       	call   c0015fcc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016a96:	83 c4 1c             	add    esp,0x1c
c0016a99:	eb 90                	jmp    c0016a2b <Vm::mainloop2()>

c0016a9b <Vm::initialise8086()>:
c0016a9b:	83 ec 0c             	sub    esp,0xc
c0016a9e:	68 80 00 00 00       	push   0x80
c0016aa3:	6a 00                	push   0x0
c0016aa5:	68 65 6a 01 c0       	push   0xc0016a65
c0016aaa:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016ab0:	e8 db f0 ff ff       	call   c0015b90 <Process::createThread(void (*)(void*), void*, int)>
c0016ab5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016abc:	a3 28 97 02 c0       	mov    ds:0xc0029728,eax
c0016ac1:	68 00 01 00 00       	push   0x100
c0016ac6:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0016acb:	6a 00                	push   0x0
c0016acd:	6a 00                	push   0x0
c0016acf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016ad5:	e8 40 34 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016ada:	83 c4 2c             	add    esp,0x2c
c0016add:	c3                   	ret    

c0016ade <Vm::finish8086()>:
c0016ade:	53                   	push   ebx
c0016adf:	83 ec 08             	sub    esp,0x8
c0016ae2:	fa                   	cli    
c0016ae3:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016ae9:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c0016af0:	75 15                	jne    c0016b07 <Vm::finish8086()+0x29>
c0016af2:	e8 e9 f2 ff ff       	call   c0015de0 <schedule()>
c0016af7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016afc:	48                   	dec    eax
c0016afd:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016b02:	75 de                	jne    c0016ae2 <Vm::finish8086()+0x4>
c0016b04:	fb                   	sti    
c0016b05:	eb db                	jmp    c0016ae2 <Vm::finish8086()+0x4>
c0016b07:	83 ec 0c             	sub    esp,0xc
c0016b0a:	8b 1d 20 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029720
c0016b10:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016b16:	c6 05 24 97 02 c0 00 	mov    BYTE PTR ds:0xc0029724,0x0
c0016b1d:	e8 d6 f7 ff ff       	call   c00162f8 <unblockTask(ThreadControlBlock*)>
c0016b22:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016b27:	83 c4 10             	add    esp,0x10
c0016b2a:	8d 50 ff             	lea    edx,[eax-0x1]
c0016b2d:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016b33:	85 d2                	test   edx,edx
c0016b35:	75 01                	jne    c0016b38 <Vm::finish8086()+0x5a>
c0016b37:	fb                   	sti    
c0016b38:	89 d8                	mov    eax,ebx
c0016b3a:	83 c4 08             	add    esp,0x8
c0016b3d:	5b                   	pop    ebx
c0016b3e:	c3                   	ret    

c0016b3f <Vm::getOutput8086(unsigned char*)>:
c0016b3f:	57                   	push   edi
c0016b40:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c0016b46:	56                   	push   esi
c0016b47:	be 40 97 02 c0       	mov    esi,0xc0029740
c0016b4c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016b50:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b52:	a1 2c 97 02 c0       	mov    eax,ds:0xc002972c
c0016b57:	5e                   	pop    esi
c0016b58:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016b62:	5f                   	pop    edi
c0016b63:	c3                   	ret    

c0016b64 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016b64:	55                   	push   ebp
c0016b65:	57                   	push   edi
c0016b66:	56                   	push   esi
c0016b67:	53                   	push   ebx
c0016b68:	83 ec 0c             	sub    esp,0xc
c0016b6b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016b6f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016b73:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016b77:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016b7b:	fa                   	cli    
c0016b7c:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016b82:	80 3d 25 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029725,0x0
c0016b89:	75 15                	jne    c0016ba0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016b8b:	e8 50 f2 ff ff       	call   c0015de0 <schedule()>
c0016b90:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016b95:	48                   	dec    eax
c0016b96:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016b9b:	75 de                	jne    c0016b7b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016b9d:	fb                   	sti    
c0016b9e:	eb db                	jmp    c0016b7b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016ba0:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016ba5:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016baf:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016bb3:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016bb7:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016bbb:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016bbf:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016bc3:	0f b7 ff             	movzx  edi,di
c0016bc6:	0f b7 f6             	movzx  esi,si
c0016bc9:	50                   	push   eax
c0016bca:	6a 20                	push   0x20
c0016bcc:	6a 00                	push   0x0
c0016bce:	68 40 97 02 c0       	push   0xc0029740
c0016bd3:	e8 18 99 fe ff       	call   c00004f0 <memset>
c0016bd8:	5a                   	pop    edx
c0016bd9:	59                   	pop    ecx
c0016bda:	57                   	push   edi
c0016bdb:	56                   	push   esi
c0016bdc:	e8 2d fe ff ff       	call   c0016a0e <Vm::realToLinear(unsigned short, unsigned short)>
c0016be1:	83 c4 10             	add    esp,0x10
c0016be4:	89 c7                	mov    edi,eax
c0016be6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016bea:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016bee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016bf0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016bf5:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016bfc:	48                   	dec    eax
c0016bfd:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016c02:	75 01                	jne    c0016c05 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016c04:	fb                   	sti    
c0016c05:	83 ec 0c             	sub    esp,0xc
c0016c08:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016c0e:	e8 e5 f6 ff ff       	call   c00162f8 <unblockTask(ThreadControlBlock*)>
c0016c13:	83 c4 1c             	add    esp,0x1c
c0016c16:	b0 01                	mov    al,0x1
c0016c18:	5b                   	pop    ebx
c0016c19:	5e                   	pop    esi
c0016c1a:	5f                   	pop    edi
c0016c1b:	5d                   	pop    ebp
c0016c1c:	c3                   	ret    

c0016c1d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016c1d:	55                   	push   ebp
c0016c1e:	57                   	push   edi
c0016c1f:	56                   	push   esi
c0016c20:	53                   	push   ebx
c0016c21:	83 ec 34             	sub    esp,0x34
c0016c24:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016c28:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016c2c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016c30:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016c34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c38:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016c3c:	68 e8 26 02 c0       	push   0xc00226e8
c0016c41:	e8 ff 3c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016c46:	83 c4 10             	add    esp,0x10
c0016c49:	fa                   	cli    
c0016c4a:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016c50:	8a 1d 25 97 02 c0    	mov    bl,BYTE PTR ds:0xc0029725
c0016c56:	84 db                	test   bl,bl
c0016c58:	75 15                	jne    c0016c6f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016c5a:	e8 81 f1 ff ff       	call   c0015de0 <schedule()>
c0016c5f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016c64:	48                   	dec    eax
c0016c65:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016c6a:	75 dd                	jne    c0016c49 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016c6c:	fb                   	sti    
c0016c6d:	eb da                	jmp    c0016c49 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016c6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c73:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016c78:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016c82:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016c86:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016c8a:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016c8e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016c92:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016c96:	50                   	push   eax
c0016c97:	6a 20                	push   0x20
c0016c99:	6a 00                	push   0x0
c0016c9b:	68 40 97 02 c0       	push   0xc0029740
c0016ca0:	e8 4b 98 fe ff       	call   c00004f0 <memset>
c0016ca5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016cac:	e8 05 0e ff ff       	call   c0007ab6 <malloc>
c0016cb1:	83 c4 0c             	add    esp,0xc
c0016cb4:	89 c5                	mov    ebp,eax
c0016cb6:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016cbc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016cc0:	50                   	push   eax
c0016cc1:	e8 10 4c ff ff       	call   c000b8d6 <File::File(char const*, Process*)>
c0016cc6:	83 c4 10             	add    esp,0x10
c0016cc9:	85 ed                	test   ebp,ebp
c0016ccb:	75 0a                	jne    c0016cd7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016ccd:	83 ec 0c             	sub    esp,0xc
c0016cd0:	68 0a 27 02 c0       	push   0xc002270a
c0016cd5:	eb 2b                	jmp    c0016d02 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016cd7:	50                   	push   eax
c0016cd8:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016cdc:	50                   	push   eax
c0016cdd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016ce1:	50                   	push   eax
c0016ce2:	55                   	push   ebp
c0016ce3:	e8 0e 4f ff ff       	call   c000bbf6 <File::stat(unsigned long long*, bool*)>
c0016ce8:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016cec:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016cf0:	83 c4 10             	add    esp,0x10
c0016cf3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016cf8:	74 27                	je     c0016d21 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016cfa:	83 ec 0c             	sub    esp,0xc
c0016cfd:	68 1e 27 02 c0       	push   0xc002271e
c0016d02:	e8 76 a6 ff ff       	call   c001137d <KePanic(char const*)>
c0016d07:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016d0c:	83 c4 10             	add    esp,0x10
c0016d0f:	48                   	dec    eax
c0016d10:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016d15:	85 c0                	test   eax,eax
c0016d17:	75 01                	jne    c0016d1a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016d19:	fb                   	sti    
c0016d1a:	31 db                	xor    ebx,ebx
c0016d1c:	e9 90 00 00 00       	jmp    c0016db1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016d21:	51                   	push   ecx
c0016d22:	51                   	push   ecx
c0016d23:	6a 01                	push   0x1
c0016d25:	55                   	push   ebp
c0016d26:	e8 c9 4b ff ff       	call   c000b8f4 <File::open(FileOpenMode)>
c0016d2b:	83 c4 10             	add    esp,0x10
c0016d2e:	85 c0                	test   eax,eax
c0016d30:	74 26                	je     c0016d58 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016d32:	83 ec 0c             	sub    esp,0xc
c0016d35:	68 37 27 02 c0       	push   0xc0022737
c0016d3a:	e8 3e a6 ff ff       	call   c001137d <KePanic(char const*)>
c0016d3f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016d44:	83 c4 10             	add    esp,0x10
c0016d47:	48                   	dec    eax
c0016d48:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016d4d:	85 c0                	test   eax,eax
c0016d4f:	75 c9                	jne    c0016d1a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016d51:	fb                   	sti    
c0016d52:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016d56:	eb 59                	jmp    c0016db1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016d58:	0f b7 ff             	movzx  edi,di
c0016d5b:	50                   	push   eax
c0016d5c:	0f b7 f6             	movzx  esi,si
c0016d5f:	50                   	push   eax
c0016d60:	57                   	push   edi
c0016d61:	56                   	push   esi
c0016d62:	e8 a7 fc ff ff       	call   c0016a0e <Vm::realToLinear(unsigned short, unsigned short)>
c0016d67:	5a                   	pop    edx
c0016d68:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0016d6b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016d6f:	51                   	push   ecx
c0016d70:	50                   	push   eax
c0016d71:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016d75:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016d79:	55                   	push   ebp
c0016d7a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016d7d:	83 c4 14             	add    esp,0x14
c0016d80:	55                   	push   ebp
c0016d81:	e8 cc 4b ff ff       	call   c000b952 <File::close()>
c0016d86:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016d8b:	83 c4 10             	add    esp,0x10
c0016d8e:	48                   	dec    eax
c0016d8f:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016d96:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016d9b:	85 c0                	test   eax,eax
c0016d9d:	75 01                	jne    c0016da0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016d9f:	fb                   	sti    
c0016da0:	83 ec 0c             	sub    esp,0xc
c0016da3:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016da9:	e8 4a f5 ff ff       	call   c00162f8 <unblockTask(ThreadControlBlock*)>
c0016dae:	83 c4 10             	add    esp,0x10
c0016db1:	83 c4 2c             	add    esp,0x2c
c0016db4:	88 d8                	mov    al,bl
c0016db6:	5b                   	pop    ebx
c0016db7:	5e                   	pop    esi
c0016db8:	5f                   	pop    edi
c0016db9:	5d                   	pop    ebp
c0016dba:	c3                   	ret    

c0016dbb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016dbb:	57                   	push   edi
c0016dbc:	56                   	push   esi
c0016dbd:	53                   	push   ebx
c0016dbe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016dc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dc6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016dca:	83 e8 06             	sub    eax,0x6
c0016dcd:	0f b7 c0             	movzx  eax,ax
c0016dd0:	50                   	push   eax
c0016dd1:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016dd6:	50                   	push   eax
c0016dd7:	e8 32 fc ff ff       	call   c0016a0e <Vm::realToLinear(unsigned short, unsigned short)>
c0016ddc:	5a                   	pop    edx
c0016ddd:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0016de0:	59                   	pop    ecx
c0016de1:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016de4:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016de7:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016ded:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016df0:	8d 56 02             	lea    edx,[esi+0x2]
c0016df3:	66 89 10             	mov    WORD PTR [eax],dx
c0016df6:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016dfa:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016dfe:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016e01:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016e05:	0f b6 f1             	movzx  esi,cl
c0016e08:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016e0c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e12:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016e16:	0f b6 d5             	movzx  edx,ch
c0016e19:	74 0a                	je     c0016e25 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0016e1b:	c1 e2 08             	shl    edx,0x8
c0016e1e:	09 f2                	or     edx,esi
c0016e20:	80 ce 02             	or     dh,0x2
c0016e23:	eb 08                	jmp    c0016e2d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0016e25:	c1 e2 08             	shl    edx,0x8
c0016e28:	09 f2                	or     edx,esi
c0016e2a:	80 e6 fd             	and    dh,0xfd
c0016e2d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e36:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016e3a:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016e42:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016e45:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016e4d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016e50:	5b                   	pop    ebx
c0016e51:	5e                   	pop    esi
c0016e52:	5f                   	pop    edi
c0016e53:	c3                   	ret    

c0016e54 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016e54:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016e59:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016e5e:	c1 e0 04             	shl    eax,0x4
c0016e61:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016e64:	c3                   	ret    

c0016e65 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016e65:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016e6a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016e6f:	c1 e0 04             	shl    eax,0x4
c0016e72:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016e76:	c3                   	ret    

c0016e77 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016e77:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016e7c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016e81:	c1 e0 04             	shl    eax,0x4
c0016e84:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016e87:	c3                   	ret    

c0016e88 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016e88:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016e8d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016e92:	c1 e0 04             	shl    eax,0x4
c0016e95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e99:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016e9c:	c3                   	ret    

c0016e9d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016e9d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016ea2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016ea7:	c1 e0 04             	shl    eax,0x4
c0016eaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016eae:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016eb2:	c3                   	ret    

c0016eb3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016eb3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016eb8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016ebd:	c1 e0 04             	shl    eax,0x4
c0016ec0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016ec4:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016ec7:	c3                   	ret    

c0016ec8 <Vm::faultHandler(regs*)>:
c0016ec8:	55                   	push   ebp
c0016ec9:	57                   	push   edi
c0016eca:	56                   	push   esi
c0016ecb:	53                   	push   ebx
c0016ecc:	83 ec 2c             	sub    esp,0x2c
c0016ecf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016ed3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016ed6:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016eda:	0f b7 f8             	movzx  edi,ax
c0016edd:	52                   	push   edx
c0016ede:	0f b7 c0             	movzx  eax,ax
c0016ee1:	50                   	push   eax
c0016ee2:	e8 27 fb ff ff       	call   c0016a0e <Vm::realToLinear(unsigned short, unsigned short)>
c0016ee7:	5a                   	pop    edx
c0016ee8:	59                   	pop    ecx
c0016ee9:	89 c1                	mov    ecx,eax
c0016eeb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016eee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ef2:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016ef7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016efb:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016efe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016f02:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016f07:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f0f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016f13:	e8 f6 fa ff ff       	call   c0016a0e <Vm::realToLinear(unsigned short, unsigned short)>
c0016f18:	5e                   	pop    esi
c0016f19:	be 06 00 00 00       	mov    esi,0x6
c0016f1e:	5d                   	pop    ebp
c0016f1f:	31 ed                	xor    ebp,ebp
c0016f21:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016f26:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016f29:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016f2f:	0f 84 74 02 00 00    	je     c00171a9 <Vm::faultHandler(regs*)+0x2e1>
c0016f35:	0f 87 94 00 00 00    	ja     c0016fcf <Vm::faultHandler(regs*)+0x107>
c0016f3b:	83 fa 66             	cmp    edx,0x66
c0016f3e:	0f 84 e2 01 00 00    	je     c0017126 <Vm::faultHandler(regs*)+0x25e>
c0016f44:	77 47                	ja     c0016f8d <Vm::faultHandler(regs*)+0xc5>
c0016f46:	83 fa 36             	cmp    edx,0x36
c0016f49:	0f 84 ca 01 00 00    	je     c0017119 <Vm::faultHandler(regs*)+0x251>
c0016f4f:	77 1a                	ja     c0016f6b <Vm::faultHandler(regs*)+0xa3>
c0016f51:	83 fa 26             	cmp    edx,0x26
c0016f54:	0f 84 98 01 00 00    	je     c00170f2 <Vm::faultHandler(regs*)+0x22a>
c0016f5a:	83 fa 2e             	cmp    edx,0x2e
c0016f5d:	0f 85 21 06 00 00    	jne    c0017584 <Vm::faultHandler(regs*)+0x6bc>
c0016f63:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f66:	31 f6                	xor    esi,esi
c0016f68:	41                   	inc    ecx
c0016f69:	eb bb                	jmp    c0016f26 <Vm::faultHandler(regs*)+0x5e>
c0016f6b:	83 fa 64             	cmp    edx,0x64
c0016f6e:	0f 84 8b 01 00 00    	je     c00170ff <Vm::faultHandler(regs*)+0x237>
c0016f74:	0f 87 92 01 00 00    	ja     c001710c <Vm::faultHandler(regs*)+0x244>
c0016f7a:	83 fa 3e             	cmp    edx,0x3e
c0016f7d:	0f 85 01 06 00 00    	jne    c0017584 <Vm::faultHandler(regs*)+0x6bc>
c0016f83:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f86:	be 01 00 00 00       	mov    esi,0x1
c0016f8b:	eb db                	jmp    c0016f68 <Vm::faultHandler(regs*)+0xa0>
c0016f8d:	83 fa 6d             	cmp    edx,0x6d
c0016f90:	0f 84 34 03 00 00    	je     c00172ca <Vm::faultHandler(regs*)+0x402>
c0016f96:	77 17                	ja     c0016faf <Vm::faultHandler(regs*)+0xe7>
c0016f98:	83 fa 67             	cmp    edx,0x67
c0016f9b:	0f 84 92 01 00 00    	je     c0017133 <Vm::faultHandler(regs*)+0x26b>
c0016fa1:	83 fa 6c             	cmp    edx,0x6c
c0016fa4:	0f 84 b1 02 00 00    	je     c001725b <Vm::faultHandler(regs*)+0x393>
c0016faa:	e9 d5 05 00 00       	jmp    c0017584 <Vm::faultHandler(regs*)+0x6bc>
c0016faf:	83 fa 6f             	cmp    edx,0x6f
c0016fb2:	0f 84 3d 04 00 00    	je     c00173f5 <Vm::faultHandler(regs*)+0x52d>
c0016fb8:	0f 82 9f 03 00 00    	jb     c001735d <Vm::faultHandler(regs*)+0x495>
c0016fbe:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016fc4:	0f 84 76 01 00 00    	je     c0017140 <Vm::faultHandler(regs*)+0x278>
c0016fca:	e9 b5 05 00 00       	jmp    c0017584 <Vm::faultHandler(regs*)+0x6bc>
c0016fcf:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016fd5:	0f 84 51 05 00 00    	je     c001752c <Vm::faultHandler(regs*)+0x664>
c0016fdb:	0f 87 a9 00 00 00    	ja     c001708a <Vm::faultHandler(regs*)+0x1c2>
c0016fe1:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016fe7:	0f 84 d0 04 00 00    	je     c00174bd <Vm::faultHandler(regs*)+0x5f5>
c0016fed:	77 78                	ja     c0017067 <Vm::faultHandler(regs*)+0x19f>
c0016fef:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016ff5:	0f 84 0e 02 00 00    	je     c0017209 <Vm::faultHandler(regs*)+0x341>
c0016ffb:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0017001:	0f 85 7d 05 00 00    	jne    c0017584 <Vm::faultHandler(regs*)+0x6bc>
c0017007:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001700b:	89 d1                	mov    ecx,edx
c001700d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017010:	c1 e1 08             	shl    ecx,0x8
c0017013:	09 ca                	or     edx,ecx
c0017015:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017018:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001701c:	89 d1                	mov    ecx,edx
c001701e:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0017022:	c1 e1 08             	shl    ecx,0x8
c0017025:	09 ca                	or     edx,ecx
c0017027:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001702a:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c001702e:	89 d1                	mov    ecx,edx
c0017030:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0017034:	c1 e1 08             	shl    ecx,0x8
c0017037:	09 ca                	or     edx,ecx
c0017039:	81 ca 00 02 02 00    	or     edx,0x20200
c001703f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017042:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0017046:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001704c:	d1 e8                	shr    eax,1
c001704e:	83 e0 01             	and    eax,0x1
c0017051:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017054:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017057:	83 c0 06             	add    eax,0x6
c001705a:	25 ff ff 00 00       	and    eax,0xffff
c001705f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017062:	e9 19 05 00 00       	jmp    c0017580 <Vm::faultHandler(regs*)+0x6b8>
c0017067:	81 fa e6 00 00 00    	cmp    edx,0xe6
c001706d:	0f 84 8f 04 00 00    	je     c0017502 <Vm::faultHandler(regs*)+0x63a>
c0017073:	0f 82 60 04 00 00    	jb     c00174d9 <Vm::faultHandler(regs*)+0x611>
c0017079:	81 fa e7 00 00 00    	cmp    edx,0xe7
c001707f:	0f 84 94 04 00 00    	je     c0017519 <Vm::faultHandler(regs*)+0x651>
c0017085:	e9 fa 04 00 00       	jmp    c0017584 <Vm::faultHandler(regs*)+0x6bc>
c001708a:	81 fa ef 00 00 00    	cmp    edx,0xef
c0017090:	0f 84 d7 04 00 00    	je     c001756d <Vm::faultHandler(regs*)+0x6a5>
c0017096:	77 2e                	ja     c00170c6 <Vm::faultHandler(regs*)+0x1fe>
c0017098:	81 fa ed 00 00 00    	cmp    edx,0xed
c001709e:	0f 84 a4 04 00 00    	je     c0017548 <Vm::faultHandler(regs*)+0x680>
c00170a4:	81 fa ee 00 00 00    	cmp    edx,0xee
c00170aa:	0f 85 d4 04 00 00    	jne    c0017584 <Vm::faultHandler(regs*)+0x6bc>
c00170b0:	50                   	push   eax
c00170b1:	50                   	push   eax
c00170b2:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00170b6:	50                   	push   eax
c00170b7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00170bb:	50                   	push   eax
c00170bc:	e8 17 f9 ff ff       	call   c00169d8 <Vm::outbv(unsigned short, unsigned char)>
c00170c1:	e9 9f 04 00 00       	jmp    c0017565 <Vm::faultHandler(regs*)+0x69d>
c00170c6:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00170cc:	0f 84 6d 01 00 00    	je     c001723f <Vm::faultHandler(regs*)+0x377>
c00170d2:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00170d8:	0f 84 6f 01 00 00    	je     c001724d <Vm::faultHandler(regs*)+0x385>
c00170de:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00170e4:	0f 85 9a 04 00 00    	jne    c0017584 <Vm::faultHandler(regs*)+0x6bc>
c00170ea:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00170ed:	e9 76 fe ff ff       	jmp    c0016f68 <Vm::faultHandler(regs*)+0xa0>
c00170f2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00170f5:	be 02 00 00 00       	mov    esi,0x2
c00170fa:	e9 69 fe ff ff       	jmp    c0016f68 <Vm::faultHandler(regs*)+0xa0>
c00170ff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017102:	be 03 00 00 00       	mov    esi,0x3
c0017107:	e9 5c fe ff ff       	jmp    c0016f68 <Vm::faultHandler(regs*)+0xa0>
c001710c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001710f:	be 04 00 00 00       	mov    esi,0x4
c0017114:	e9 4f fe ff ff       	jmp    c0016f68 <Vm::faultHandler(regs*)+0xa0>
c0017119:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001711c:	be 05 00 00 00       	mov    esi,0x5
c0017121:	e9 42 fe ff ff       	jmp    c0016f68 <Vm::faultHandler(regs*)+0xa0>
c0017126:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017129:	bd 01 00 00 00       	mov    ebp,0x1
c001712e:	e9 35 fe ff ff       	jmp    c0016f68 <Vm::faultHandler(regs*)+0xa0>
c0017133:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017136:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001713b:	e9 28 fe ff ff       	jmp    c0016f68 <Vm::faultHandler(regs*)+0xa0>
c0017140:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017143:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017147:	83 e5 01             	and    ebp,0x1
c001714a:	74 30                	je     c001717c <Vm::faultHandler(regs*)+0x2b4>
c001714c:	83 e9 04             	sub    ecx,0x4
c001714f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017155:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001715b:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001715e:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017161:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017167:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001716b:	0f 84 0c 04 00 00    	je     c001757d <Vm::faultHandler(regs*)+0x6b5>
c0017171:	80 ce 02             	or     dh,0x2
c0017174:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017177:	e9 01 04 00 00       	jmp    c001757d <Vm::faultHandler(regs*)+0x6b5>
c001717c:	83 e9 02             	sub    ecx,0x2
c001717f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017185:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017188:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001718c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017192:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017196:	74 05                	je     c001719d <Vm::faultHandler(regs*)+0x2d5>
c0017198:	80 ce 02             	or     dh,0x2
c001719b:	eb 03                	jmp    c00171a0 <Vm::faultHandler(regs*)+0x2d8>
c001719d:	80 e6 fd             	and    dh,0xfd
c00171a0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00171a4:	e9 d4 03 00 00       	jmp    c001757d <Vm::faultHandler(regs*)+0x6b5>
c00171a9:	83 e5 01             	and    ebp,0x1
c00171ac:	74 2a                	je     c00171d8 <Vm::faultHandler(regs*)+0x310>
c00171ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00171b0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00171b6:	81 ca 00 02 02 00    	or     edx,0x20200
c00171bc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00171bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00171c1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00171c7:	c1 e8 09             	shr    eax,0x9
c00171ca:	83 e0 01             	and    eax,0x1
c00171cd:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00171d0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00171d3:	83 c0 04             	add    eax,0x4
c00171d6:	eb 24                	jmp    c00171fc <Vm::faultHandler(regs*)+0x334>
c00171d8:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00171db:	81 ca 00 02 02 00    	or     edx,0x20200
c00171e1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00171e4:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00171e7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00171ed:	c1 e8 09             	shr    eax,0x9
c00171f0:	83 e0 01             	and    eax,0x1
c00171f3:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00171f6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00171f9:	83 c0 02             	add    eax,0x2
c00171fc:	25 ff ff 00 00       	and    eax,0xffff
c0017201:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017204:	e9 74 03 00 00       	jmp    c001757d <Vm::faultHandler(regs*)+0x6b5>
c0017209:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001720d:	3d ee 00 00 00       	cmp    eax,0xee
c0017212:	75 10                	jne    c0017224 <Vm::faultHandler(regs*)+0x35c>
c0017214:	83 ec 0c             	sub    esp,0xc
c0017217:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001721a:	e8 56 f8 ff ff       	call   c0016a75 <Vm::mainloop3(unsigned long)>
c001721f:	e9 44 03 00 00       	jmp    c0017568 <Vm::faultHandler(regs*)+0x6a0>
c0017224:	83 ec 0c             	sub    esp,0xc
c0017227:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001722b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001722f:	51                   	push   ecx
c0017230:	50                   	push   eax
c0017231:	53                   	push   ebx
c0017232:	e8 84 fb ff ff       	call   c0016dbb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017237:	83 c4 20             	add    esp,0x20
c001723a:	e9 41 03 00 00       	jmp    c0017580 <Vm::faultHandler(regs*)+0x6b8>
c001723f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017244:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017248:	e9 30 03 00 00       	jmp    c001757d <Vm::faultHandler(regs*)+0x6b5>
c001724d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017252:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0017256:	e9 22 03 00 00       	jmp    c001757d <Vm::faultHandler(regs*)+0x6b5>
c001725b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001725e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017263:	74 2b                	je     c0017290 <Vm::faultHandler(regs*)+0x3c8>
c0017265:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001726c:	76 22                	jbe    c0017290 <Vm::faultHandler(regs*)+0x3c8>
c001726e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017272:	50                   	push   eax
c0017273:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017277:	50                   	push   eax
c0017278:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001727c:	50                   	push   eax
c001727d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017281:	50                   	push   eax
c0017282:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017286:	50                   	push   eax
c0017287:	6a 6c                	push   0x6c
c0017289:	6a 6c                	push   0x6c
c001728b:	e9 bd 01 00 00       	jmp    c001744d <Vm::faultHandler(regs*)+0x585>
c0017290:	83 ec 0c             	sub    esp,0xc
c0017293:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017297:	0f b7 f6             	movzx  esi,si
c001729a:	50                   	push   eax
c001729b:	e8 25 f7 ff ff       	call   c00169c5 <Vm::inbv(unsigned short)>
c00172a0:	83 c4 0c             	add    esp,0xc
c00172a3:	0f b6 c0             	movzx  eax,al
c00172a6:	50                   	push   eax
c00172a7:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00172ab:	50                   	push   eax
c00172ac:	56                   	push   esi
c00172ad:	e8 d6 fb ff ff       	call   c0016e88 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00172b2:	83 c4 10             	add    esp,0x10
c00172b5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00172b8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00172bc:	74 03                	je     c00172c1 <Vm::faultHandler(regs*)+0x3f9>
c00172be:	48                   	dec    eax
c00172bf:	eb 01                	jmp    c00172c2 <Vm::faultHandler(regs*)+0x3fa>
c00172c1:	40                   	inc    eax
c00172c2:	0f b7 c0             	movzx  eax,ax
c00172c5:	e9 8b 00 00 00       	jmp    c0017355 <Vm::faultHandler(regs*)+0x48d>
c00172ca:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00172cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00172d0:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00172d5:	74 29                	je     c0017300 <Vm::faultHandler(regs*)+0x438>
c00172d7:	3d ff ff 00 00       	cmp    eax,0xffff
c00172dc:	76 22                	jbe    c0017300 <Vm::faultHandler(regs*)+0x438>
c00172de:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00172e2:	50                   	push   eax
c00172e3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00172e7:	50                   	push   eax
c00172e8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00172ec:	50                   	push   eax
c00172ed:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00172f1:	50                   	push   eax
c00172f2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00172f6:	50                   	push   eax
c00172f7:	6a 6d                	push   0x6d
c00172f9:	6a 6d                	push   0x6d
c00172fb:	e9 4d 01 00 00       	jmp    c001744d <Vm::faultHandler(regs*)+0x585>
c0017300:	0f b7 c8             	movzx  ecx,ax
c0017303:	0f b7 f6             	movzx  esi,si
c0017306:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017309:	83 e5 01             	and    ebp,0x1
c001730c:	74 20                	je     c001732e <Vm::faultHandler(regs*)+0x466>
c001730e:	ed                   	in     eax,dx
c001730f:	55                   	push   ebp
c0017310:	50                   	push   eax
c0017311:	51                   	push   ecx
c0017312:	56                   	push   esi
c0017313:	e8 9b fb ff ff       	call   c0016eb3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017318:	83 c4 10             	add    esp,0x10
c001731b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001731e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017322:	74 05                	je     c0017329 <Vm::faultHandler(regs*)+0x461>
c0017324:	83 e8 04             	sub    eax,0x4
c0017327:	eb 27                	jmp    c0017350 <Vm::faultHandler(regs*)+0x488>
c0017329:	83 c0 04             	add    eax,0x4
c001732c:	eb 22                	jmp    c0017350 <Vm::faultHandler(regs*)+0x488>
c001732e:	66 ed                	in     ax,dx
c0017330:	0f b7 c0             	movzx  eax,ax
c0017333:	57                   	push   edi
c0017334:	50                   	push   eax
c0017335:	51                   	push   ecx
c0017336:	56                   	push   esi
c0017337:	e8 61 fb ff ff       	call   c0016e9d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001733c:	83 c4 10             	add    esp,0x10
c001733f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017342:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017346:	74 05                	je     c001734d <Vm::faultHandler(regs*)+0x485>
c0017348:	83 e8 02             	sub    eax,0x2
c001734b:	eb 03                	jmp    c0017350 <Vm::faultHandler(regs*)+0x488>
c001734d:	83 c0 02             	add    eax,0x2
c0017350:	25 ff ff 00 00       	and    eax,0xffff
c0017355:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017358:	e9 20 02 00 00       	jmp    c001757d <Vm::faultHandler(regs*)+0x6b5>
c001735d:	8d 46 ff             	lea    eax,[esi-0x1]
c0017360:	0f b6 f0             	movzx  esi,al
c0017363:	83 fe 05             	cmp    esi,0x5
c0017366:	77 23                	ja     c001738b <Vm::faultHandler(regs*)+0x4c3>
c0017368:	ff 24 b5 ac 27 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd854]
c001736f:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0017374:	eb 15                	jmp    c001738b <Vm::faultHandler(regs*)+0x4c3>
c0017376:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001737a:	eb 0f                	jmp    c001738b <Vm::faultHandler(regs*)+0x4c3>
c001737c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017380:	eb 09                	jmp    c001738b <Vm::faultHandler(regs*)+0x4c3>
c0017382:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017386:	eb 03                	jmp    c001738b <Vm::faultHandler(regs*)+0x4c3>
c0017388:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001738b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001738e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017393:	74 29                	je     c00173be <Vm::faultHandler(regs*)+0x4f6>
c0017395:	3d ff ff 00 00       	cmp    eax,0xffff
c001739a:	76 22                	jbe    c00173be <Vm::faultHandler(regs*)+0x4f6>
c001739c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00173a0:	50                   	push   eax
c00173a1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00173a5:	50                   	push   eax
c00173a6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00173aa:	50                   	push   eax
c00173ab:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00173af:	50                   	push   eax
c00173b0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00173b4:	50                   	push   eax
c00173b5:	6a 6e                	push   0x6e
c00173b7:	6a 6e                	push   0x6e
c00173b9:	e9 8f 00 00 00       	jmp    c001744d <Vm::faultHandler(regs*)+0x585>
c00173be:	0f b7 c0             	movzx  eax,ax
c00173c1:	52                   	push   edx
c00173c2:	52                   	push   edx
c00173c3:	50                   	push   eax
c00173c4:	57                   	push   edi
c00173c5:	e8 8a fa ff ff       	call   c0016e54 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00173ca:	59                   	pop    ecx
c00173cb:	0f b6 c0             	movzx  eax,al
c00173ce:	5e                   	pop    esi
c00173cf:	50                   	push   eax
c00173d0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00173d4:	50                   	push   eax
c00173d5:	e8 fe f5 ff ff       	call   c00169d8 <Vm::outbv(unsigned short, unsigned char)>
c00173da:	83 c4 10             	add    esp,0x10
c00173dd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00173e0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00173e4:	74 03                	je     c00173e9 <Vm::faultHandler(regs*)+0x521>
c00173e6:	48                   	dec    eax
c00173e7:	eb 01                	jmp    c00173ea <Vm::faultHandler(regs*)+0x522>
c00173e9:	40                   	inc    eax
c00173ea:	0f b7 c0             	movzx  eax,ax
c00173ed:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00173f0:	e9 88 01 00 00       	jmp    c001757d <Vm::faultHandler(regs*)+0x6b5>
c00173f5:	8d 46 ff             	lea    eax,[esi-0x1]
c00173f8:	0f b6 f0             	movzx  esi,al
c00173fb:	83 fe 05             	cmp    esi,0x5
c00173fe:	77 1e                	ja     c001741e <Vm::faultHandler(regs*)+0x556>
c0017400:	ff 24 b5 c4 27 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd83c]
c0017407:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001740b:	eb 11                	jmp    c001741e <Vm::faultHandler(regs*)+0x556>
c001740d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017410:	eb 0c                	jmp    c001741e <Vm::faultHandler(regs*)+0x556>
c0017412:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017415:	eb 07                	jmp    c001741e <Vm::faultHandler(regs*)+0x556>
c0017417:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001741a:	eb 02                	jmp    c001741e <Vm::faultHandler(regs*)+0x556>
c001741c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001741e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017421:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017426:	74 37                	je     c001745f <Vm::faultHandler(regs*)+0x597>
c0017428:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001742e:	76 2f                	jbe    c001745f <Vm::faultHandler(regs*)+0x597>
c0017430:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017434:	50                   	push   eax
c0017435:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017439:	50                   	push   eax
c001743a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001743e:	50                   	push   eax
c001743f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017443:	50                   	push   eax
c0017444:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017448:	50                   	push   eax
c0017449:	6a 6f                	push   0x6f
c001744b:	6a 6f                	push   0x6f
c001744d:	68 50 27 02 c0       	push   0xc0022750
c0017452:	e8 ee 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017457:	83 c4 20             	add    esp,0x20
c001745a:	e9 83 01 00 00       	jmp    c00175e2 <Vm::faultHandler(regs*)+0x71a>
c001745f:	0f b7 d7             	movzx  edx,di
c0017462:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017465:	0f b7 c6             	movzx  eax,si
c0017468:	81 e1 00 04 00 00    	and    ecx,0x400
c001746e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017471:	83 e5 01             	and    ebp,0x1
c0017474:	74 1d                	je     c0017493 <Vm::faultHandler(regs*)+0x5cb>
c0017476:	55                   	push   ebp
c0017477:	55                   	push   ebp
c0017478:	50                   	push   eax
c0017479:	52                   	push   edx
c001747a:	e8 f8 f9 ff ff       	call   c0016e77 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001747f:	83 c4 10             	add    esp,0x10
c0017482:	89 fa                	mov    edx,edi
c0017484:	ef                   	out    dx,eax
c0017485:	85 c9                	test   ecx,ecx
c0017487:	74 05                	je     c001748e <Vm::faultHandler(regs*)+0x5c6>
c0017489:	83 ee 04             	sub    esi,0x4
c001748c:	eb 21                	jmp    c00174af <Vm::faultHandler(regs*)+0x5e7>
c001748e:	83 c6 04             	add    esi,0x4
c0017491:	eb 1c                	jmp    c00174af <Vm::faultHandler(regs*)+0x5e7>
c0017493:	55                   	push   ebp
c0017494:	55                   	push   ebp
c0017495:	50                   	push   eax
c0017496:	52                   	push   edx
c0017497:	e8 c9 f9 ff ff       	call   c0016e65 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001749c:	83 c4 10             	add    esp,0x10
c001749f:	89 fa                	mov    edx,edi
c00174a1:	66 ef                	out    dx,ax
c00174a3:	85 c9                	test   ecx,ecx
c00174a5:	74 05                	je     c00174ac <Vm::faultHandler(regs*)+0x5e4>
c00174a7:	83 ee 02             	sub    esi,0x2
c00174aa:	eb 03                	jmp    c00174af <Vm::faultHandler(regs*)+0x5e7>
c00174ac:	83 c6 02             	add    esi,0x2
c00174af:	81 e6 ff ff 00 00    	and    esi,0xffff
c00174b5:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00174b8:	e9 c0 00 00 00       	jmp    c001757d <Vm::faultHandler(regs*)+0x6b5>
c00174bd:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00174c4:	83 ec 0c             	sub    esp,0xc
c00174c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00174cb:	50                   	push   eax
c00174cc:	e8 f4 f4 ff ff       	call   c00169c5 <Vm::inbv(unsigned short)>
c00174d1:	0f b6 c0             	movzx  eax,al
c00174d4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00174d7:	eb 3a                	jmp    c0017513 <Vm::faultHandler(regs*)+0x64b>
c00174d9:	83 e5 01             	and    ebp,0x1
c00174dc:	74 07                	je     c00174e5 <Vm::faultHandler(regs*)+0x61d>
c00174de:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00174e2:	ed                   	in     eax,dx
c00174e3:	eb 14                	jmp    c00174f9 <Vm::faultHandler(regs*)+0x631>
c00174e5:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00174e8:	66 31 f6             	xor    si,si
c00174eb:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00174ee:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00174f2:	66 ed                	in     ax,dx
c00174f4:	0f b7 c0             	movzx  eax,ax
c00174f7:	09 f0                	or     eax,esi
c00174f9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00174fc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017500:	eb 7e                	jmp    c0017580 <Vm::faultHandler(regs*)+0x6b8>
c0017502:	52                   	push   edx
c0017503:	52                   	push   edx
c0017504:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017508:	50                   	push   eax
c0017509:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001750d:	50                   	push   eax
c001750e:	e8 c5 f4 ff ff       	call   c00169d8 <Vm::outbv(unsigned short, unsigned char)>
c0017513:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017517:	eb 4f                	jmp    c0017568 <Vm::faultHandler(regs*)+0x6a0>
c0017519:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001751c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017520:	83 e5 01             	and    ebp,0x1
c0017523:	74 03                	je     c0017528 <Vm::faultHandler(regs*)+0x660>
c0017525:	ef                   	out    dx,eax
c0017526:	eb d4                	jmp    c00174fc <Vm::faultHandler(regs*)+0x634>
c0017528:	66 ef                	out    dx,ax
c001752a:	eb d0                	jmp    c00174fc <Vm::faultHandler(regs*)+0x634>
c001752c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017533:	83 ec 0c             	sub    esp,0xc
c0017536:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001753a:	50                   	push   eax
c001753b:	e8 85 f4 ff ff       	call   c00169c5 <Vm::inbv(unsigned short)>
c0017540:	0f b6 c0             	movzx  eax,al
c0017543:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017546:	eb 1d                	jmp    c0017565 <Vm::faultHandler(regs*)+0x69d>
c0017548:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001754b:	83 e5 01             	and    ebp,0x1
c001754e:	74 03                	je     c0017553 <Vm::faultHandler(regs*)+0x68b>
c0017550:	ed                   	in     eax,dx
c0017551:	eb 0d                	jmp    c0017560 <Vm::faultHandler(regs*)+0x698>
c0017553:	66 ed                	in     ax,dx
c0017555:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017558:	0f b7 c0             	movzx  eax,ax
c001755b:	66 31 d2             	xor    dx,dx
c001755e:	09 d0                	or     eax,edx
c0017560:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017563:	eb 18                	jmp    c001757d <Vm::faultHandler(regs*)+0x6b5>
c0017565:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017568:	83 c4 10             	add    esp,0x10
c001756b:	eb 13                	jmp    c0017580 <Vm::faultHandler(regs*)+0x6b8>
c001756d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017570:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017573:	83 e5 01             	and    ebp,0x1
c0017576:	74 03                	je     c001757b <Vm::faultHandler(regs*)+0x6b3>
c0017578:	ef                   	out    dx,eax
c0017579:	eb 02                	jmp    c001757d <Vm::faultHandler(regs*)+0x6b5>
c001757b:	66 ef                	out    dx,ax
c001757d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017580:	b0 01                	mov    al,0x1
c0017582:	eb 60                	jmp    c00175e4 <Vm::faultHandler(regs*)+0x71c>
c0017584:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017588:	50                   	push   eax
c0017589:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001758d:	50                   	push   eax
c001758e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017592:	50                   	push   eax
c0017593:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017597:	50                   	push   eax
c0017598:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001759c:	50                   	push   eax
c001759d:	52                   	push   edx
c001759e:	52                   	push   edx
c001759f:	68 7d 27 02 c0       	push   0xc002277d
c00175a4:	e8 9c 33 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00175a9:	83 c4 20             	add    esp,0x20
c00175ac:	83 ec 0c             	sub    esp,0xc
c00175af:	6a 60                	push   0x60
c00175b1:	e8 0f f4 ff ff       	call   c00169c5 <Vm::inbv(unsigned short)>
c00175b6:	83 c4 10             	add    esp,0x10
c00175b9:	0f b6 d0             	movzx  edx,al
c00175bc:	83 fa 1c             	cmp    edx,0x1c
c00175bf:	74 05                	je     c00175c6 <Vm::faultHandler(regs*)+0x6fe>
c00175c1:	83 fa 5a             	cmp    edx,0x5a
c00175c4:	75 e6                	jne    c00175ac <Vm::faultHandler(regs*)+0x6e4>
c00175c6:	0f b6 c0             	movzx  eax,al
c00175c9:	83 f8 1c             	cmp    eax,0x1c
c00175cc:	74 05                	je     c00175d3 <Vm::faultHandler(regs*)+0x70b>
c00175ce:	83 f8 5a             	cmp    eax,0x5a
c00175d1:	75 0f                	jne    c00175e2 <Vm::faultHandler(regs*)+0x71a>
c00175d3:	83 ec 0c             	sub    esp,0xc
c00175d6:	6a 60                	push   0x60
c00175d8:	e8 e8 f3 ff ff       	call   c00169c5 <Vm::inbv(unsigned short)>
c00175dd:	83 c4 10             	add    esp,0x10
c00175e0:	eb e4                	jmp    c00175c6 <Vm::faultHandler(regs*)+0x6fe>
c00175e2:	31 c0                	xor    eax,eax
c00175e4:	83 c4 2c             	add    esp,0x2c
c00175e7:	5b                   	pop    ebx
c00175e8:	5e                   	pop    esi
c00175e9:	5f                   	pop    edi
c00175ea:	5d                   	pop    ebp
c00175eb:	c3                   	ret    

c00175ec <noCopro(unsigned long)>:
c00175ec:	c3                   	ret    

c00175ed <nmiHandler(regs*, void*)>:
c00175ed:	83 ec 0c             	sub    esp,0xc
c00175f0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00175f5:	83 ec 0c             	sub    esp,0xc
c00175f8:	50                   	push   eax
c00175f9:	e8 b8 fc fe ff       	call   c00072b6 <Computer::handleNMI()>
c00175fe:	83 c4 10             	add    esp,0x10
c0017601:	90                   	nop
c0017602:	83 c4 0c             	add    esp,0xc
c0017605:	c3                   	ret    

c0017606 <doubleFault(regs*, void*)>:
c0017606:	55                   	push   ebp
c0017607:	89 e5                	mov    ebp,esp
c0017609:	83 ec 08             	sub    esp,0x8
c001760c:	83 ec 0c             	sub    esp,0xc
c001760f:	68 dc 27 02 c0       	push   0xc00227dc
c0017614:	e8 64 9d ff ff       	call   c001137d <KePanic(char const*)>
c0017619:	83 c4 10             	add    esp,0x10
c001761c:	90                   	nop
c001761d:	c9                   	leave  
c001761e:	c3                   	ret    

c001761f <displayDebugInfo(regs*)>:
c001761f:	83 ec 1c             	sub    esp,0x1c
c0017622:	0f 20 c0             	mov    eax,cr0
c0017625:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017629:	0f 20 d0             	mov    eax,cr2
c001762c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017630:	0f 20 d8             	mov    eax,cr3
c0017633:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017637:	0f 20 e0             	mov    eax,cr4
c001763a:	89 04 24             	mov    DWORD PTR [esp],eax
c001763d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017641:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017644:	83 ec 08             	sub    esp,0x8
c0017647:	50                   	push   eax
c0017648:	68 f8 27 02 c0       	push   0xc00227f8
c001764d:	e8 f3 32 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017652:	83 c4 10             	add    esp,0x10
c0017655:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017659:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001765c:	83 ec 08             	sub    esp,0x8
c001765f:	50                   	push   eax
c0017660:	68 e9 27 02 c0       	push   0xc00227e9
c0017665:	e8 db 32 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001766a:	83 c4 10             	add    esp,0x10
c001766d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017671:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017674:	83 ec 08             	sub    esp,0x8
c0017677:	50                   	push   eax
c0017678:	68 f4 27 02 c0       	push   0xc00227f4
c001767d:	e8 c3 32 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017682:	83 c4 10             	add    esp,0x10
c0017685:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017689:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001768c:	83 ec 08             	sub    esp,0x8
c001768f:	50                   	push   eax
c0017690:	68 03 28 02 c0       	push   0xc0022803
c0017695:	e8 ab 32 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001769a:	83 c4 10             	add    esp,0x10
c001769d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176a1:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00176a4:	83 ec 08             	sub    esp,0x8
c00176a7:	50                   	push   eax
c00176a8:	68 0e 28 02 c0       	push   0xc002280e
c00176ad:	e8 93 32 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00176b2:	83 c4 10             	add    esp,0x10
c00176b5:	83 ec 08             	sub    esp,0x8
c00176b8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176bc:	68 19 28 02 c0       	push   0xc0022819
c00176c1:	e8 7f 32 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00176c6:	83 c4 10             	add    esp,0x10
c00176c9:	83 ec 08             	sub    esp,0x8
c00176cc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00176d0:	68 24 28 02 c0       	push   0xc0022824
c00176d5:	e8 6b 32 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00176da:	83 c4 10             	add    esp,0x10
c00176dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176e1:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00176e4:	c1 e0 05             	shl    eax,0x5
c00176e7:	8d 90 a0 37 02 c0    	lea    edx,[eax-0x3ffdc860]
c00176ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176f1:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00176f4:	83 ec 04             	sub    esp,0x4
c00176f7:	52                   	push   edx
c00176f8:	50                   	push   eax
c00176f9:	68 2f 28 02 c0       	push   0xc002282f
c00176fe:	e8 42 32 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017703:	83 c4 10             	add    esp,0x10
c0017706:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001770b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017711:	83 ec 0c             	sub    esp,0xc
c0017714:	50                   	push   eax
c0017715:	e8 3f 10 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c001771a:	83 c4 10             	add    esp,0x10
c001771d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017722:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017728:	83 ec 08             	sub    esp,0x8
c001772b:	68 3e 28 02 c0       	push   0xc002283e
c0017730:	50                   	push   eax
c0017731:	e8 70 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017736:	83 c4 10             	add    esp,0x10
c0017739:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001773e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017744:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017748:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001774b:	83 ec 08             	sub    esp,0x8
c001774e:	52                   	push   edx
c001774f:	50                   	push   eax
c0017750:	e8 0b 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017755:	83 c4 10             	add    esp,0x10
c0017758:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001775d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017763:	83 ec 08             	sub    esp,0x8
c0017766:	68 4c 28 02 c0       	push   0xc002284c
c001776b:	50                   	push   eax
c001776c:	e8 35 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017771:	83 c4 10             	add    esp,0x10
c0017774:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017779:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001777f:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017784:	8b 12                	mov    edx,DWORD PTR [edx]
c0017786:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017789:	83 c2 0c             	add    edx,0xc
c001778c:	83 ec 08             	sub    esp,0x8
c001778f:	52                   	push   edx
c0017790:	50                   	push   eax
c0017791:	e8 10 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017796:	83 c4 10             	add    esp,0x10
c0017799:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001779e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177a4:	83 ec 08             	sub    esp,0x8
c00177a7:	68 55 28 02 c0       	push   0xc0022855
c00177ac:	50                   	push   eax
c00177ad:	e8 f4 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00177b2:	83 c4 10             	add    esp,0x10
c00177b5:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177ba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00177c4:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00177c7:	83 ec 08             	sub    esp,0x8
c00177ca:	52                   	push   edx
c00177cb:	50                   	push   eax
c00177cc:	e8 8f 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00177d1:	83 c4 10             	add    esp,0x10
c00177d4:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177d9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177df:	83 ec 08             	sub    esp,0x8
c00177e2:	68 5d 28 02 c0       	push   0xc002285d
c00177e7:	50                   	push   eax
c00177e8:	e8 b9 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00177ed:	83 c4 10             	add    esp,0x10
c00177f0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00177f5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00177ff:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017802:	83 ec 08             	sub    esp,0x8
c0017805:	52                   	push   edx
c0017806:	50                   	push   eax
c0017807:	e8 54 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001780c:	83 c4 10             	add    esp,0x10
c001780f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017814:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001781a:	83 ec 08             	sub    esp,0x8
c001781d:	68 65 28 02 c0       	push   0xc0022865
c0017822:	50                   	push   eax
c0017823:	e8 7e 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017828:	83 c4 10             	add    esp,0x10
c001782b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017830:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017836:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001783a:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001783d:	83 ec 08             	sub    esp,0x8
c0017840:	52                   	push   edx
c0017841:	50                   	push   eax
c0017842:	e8 19 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017847:	83 c4 10             	add    esp,0x10
c001784a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001784f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017855:	83 ec 08             	sub    esp,0x8
c0017858:	68 6d 28 02 c0       	push   0xc002286d
c001785d:	50                   	push   eax
c001785e:	e8 43 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017863:	83 c4 10             	add    esp,0x10
c0017866:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001786b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017871:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017875:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017878:	83 ec 08             	sub    esp,0x8
c001787b:	52                   	push   edx
c001787c:	50                   	push   eax
c001787d:	e8 de 11 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017882:	83 c4 10             	add    esp,0x10
c0017885:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001788a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017890:	83 ec 08             	sub    esp,0x8
c0017893:	68 75 28 02 c0       	push   0xc0022875
c0017898:	50                   	push   eax
c0017899:	e8 08 12 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001789e:	83 c4 10             	add    esp,0x10
c00178a1:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00178a6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00178ac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00178b0:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00178b3:	83 ec 08             	sub    esp,0x8
c00178b6:	52                   	push   edx
c00178b7:	50                   	push   eax
c00178b8:	e8 a3 11 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00178bd:	83 c4 10             	add    esp,0x10
c00178c0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00178c5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00178cb:	83 ec 08             	sub    esp,0x8
c00178ce:	68 7d 28 02 c0       	push   0xc002287d
c00178d3:	50                   	push   eax
c00178d4:	e8 cd 11 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00178d9:	83 c4 10             	add    esp,0x10
c00178dc:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00178e1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00178e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00178eb:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00178ee:	83 ec 08             	sub    esp,0x8
c00178f1:	52                   	push   edx
c00178f2:	50                   	push   eax
c00178f3:	e8 68 11 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00178f8:	83 c4 10             	add    esp,0x10
c00178fb:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017900:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017906:	83 ec 08             	sub    esp,0x8
c0017909:	68 85 28 02 c0       	push   0xc0022885
c001790e:	50                   	push   eax
c001790f:	e8 92 11 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017914:	83 c4 10             	add    esp,0x10
c0017917:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001791c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017922:	83 ec 08             	sub    esp,0x8
c0017925:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017929:	50                   	push   eax
c001792a:	e8 31 11 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001792f:	83 c4 10             	add    esp,0x10
c0017932:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017937:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001793d:	83 ec 08             	sub    esp,0x8
c0017940:	68 8e 28 02 c0       	push   0xc002288e
c0017945:	50                   	push   eax
c0017946:	e8 5b 11 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001794b:	83 c4 10             	add    esp,0x10
c001794e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017953:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017959:	83 ec 08             	sub    esp,0x8
c001795c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017960:	50                   	push   eax
c0017961:	e8 fa 10 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017966:	83 c4 10             	add    esp,0x10
c0017969:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001796e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017974:	83 ec 08             	sub    esp,0x8
c0017977:	68 96 28 02 c0       	push   0xc0022896
c001797c:	50                   	push   eax
c001797d:	e8 24 11 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017982:	83 c4 10             	add    esp,0x10
c0017985:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001798a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017990:	83 ec 08             	sub    esp,0x8
c0017993:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017997:	50                   	push   eax
c0017998:	e8 c3 10 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001799d:	83 c4 10             	add    esp,0x10
c00179a0:	fa                   	cli    
c00179a1:	f4                   	hlt    
c00179a2:	eb fe                	jmp    c00179a2 <displayDebugInfo(regs*)+0x383>

c00179a4 <HalSystemIdle()>:
c00179a4:	56                   	push   esi
c00179a5:	53                   	push   ebx
c00179a6:	83 ec 14             	sub    esp,0x14
c00179a9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00179ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00179b4:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00179ba:	83 e0 04             	and    eax,0x4
c00179bd:	0f b6 c0             	movzx  eax,al
c00179c0:	85 c0                	test   eax,eax
c00179c2:	0f 95 c0             	setne  al
c00179c5:	0f b6 c0             	movzx  eax,al
c00179c8:	85 c0                	test   eax,eax
c00179ca:	74 4c                	je     c0017a18 <HalSystemIdle()+0x74>
c00179cc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00179d1:	83 ec 08             	sub    esp,0x8
c00179d4:	68 e1 00 00 00       	push   0xe1
c00179d9:	50                   	push   eax
c00179da:	e8 e1 f6 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c00179df:	83 c4 10             	add    esp,0x10
c00179e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00179e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00179ea:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00179ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00179f3:	83 e2 02             	and    edx,0x2
c00179f6:	89 d3                	mov    ebx,edx
c00179f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00179fc:	83 e2 00             	and    edx,0x0
c00179ff:	89 d6                	mov    esi,edx
c0017a01:	56                   	push   esi
c0017a02:	53                   	push   ebx
c0017a03:	68 e1 00 00 00       	push   0xe1
c0017a08:	50                   	push   eax
c0017a09:	e8 de f6 fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0017a0e:	83 c4 10             	add    esp,0x10
c0017a11:	e8 7e 87 fe ff       	call   c0000194 <doTPAUSE>
c0017a16:	eb 01                	jmp    c0017a19 <HalSystemIdle()+0x75>
c0017a18:	f4                   	hlt    
c0017a19:	90                   	nop
c0017a1a:	83 c4 14             	add    esp,0x14
c0017a1d:	5b                   	pop    ebx
c0017a1e:	5e                   	pop    esi
c0017a1f:	c3                   	ret    

c0017a20 <displayProgramFault(char const*)>:
c0017a20:	83 ec 0c             	sub    esp,0xc
c0017a23:	83 ec 0c             	sub    esp,0xc
c0017a26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a2a:	e8 16 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a2f:	83 c4 10             	add    esp,0x10
c0017a32:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017a37:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a39:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017a3c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a42:	85 c0                	test   eax,eax
c0017a44:	74 21                	je     c0017a67 <displayProgramFault(char const*)+0x47>
c0017a46:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017a4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a4d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017a50:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a56:	6a 04                	push   0x4
c0017a58:	6a 0f                	push   0xf
c0017a5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a5e:	50                   	push   eax
c0017a5f:	e8 b4 10 ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017a64:	83 c4 10             	add    esp,0x10
c0017a67:	90                   	nop
c0017a68:	83 c4 0c             	add    esp,0xc
c0017a6b:	c3                   	ret    

c0017a6c <gpFault(regs*, void*)>:
c0017a6c:	83 ec 1c             	sub    esp,0x1c
c0017a6f:	c7 05 74 97 02 c0 c8 6e 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016ec8
c0017a79:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0017a7e:	85 c0                	test   eax,eax
c0017a80:	74 1e                	je     c0017aa0 <gpFault(regs*, void*)+0x34>
c0017a82:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0017a87:	83 ec 0c             	sub    esp,0xc
c0017a8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a8e:	ff d0                	call   eax
c0017a90:	83 c4 10             	add    esp,0x10
c0017a93:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017a97:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017a9c:	85 c0                	test   eax,eax
c0017a9e:	75 2e                	jne    c0017ace <gpFault(regs*, void*)+0x62>
c0017aa0:	83 ec 0c             	sub    esp,0xc
c0017aa3:	68 9e 28 02 c0       	push   0xc002289e
c0017aa8:	e8 73 ff ff ff       	call   c0017a20 <displayProgramFault(char const*)>
c0017aad:	83 c4 10             	add    esp,0x10
c0017ab0:	83 ec 0c             	sub    esp,0xc
c0017ab3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ab7:	e8 63 fb ff ff       	call   c001761f <displayDebugInfo(regs*)>
c0017abc:	83 c4 10             	add    esp,0x10
c0017abf:	83 ec 0c             	sub    esp,0xc
c0017ac2:	6a 00                	push   0x0
c0017ac4:	e8 a3 ed ff ff       	call   c001686c <Thr::terminateFromIRQ(int)>
c0017ac9:	83 c4 10             	add    esp,0x10
c0017acc:	eb 01                	jmp    c0017acf <gpFault(regs*, void*)+0x63>
c0017ace:	90                   	nop
c0017acf:	83 c4 1c             	add    esp,0x1c
c0017ad2:	c3                   	ret    

c0017ad3 <pgFault(regs*, void*)>:
c0017ad3:	83 ec 1c             	sub    esp,0x1c
c0017ad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ada:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017add:	0f 20 d0             	mov    eax,cr2
c0017ae0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ae4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ae8:	83 ec 04             	sub    esp,0x4
c0017aeb:	52                   	push   edx
c0017aec:	50                   	push   eax
c0017aed:	68 7c 29 02 c0       	push   0xc002297c
c0017af2:	e8 4e 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017af7:	83 c4 10             	add    esp,0x10
c0017afa:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017aff:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b01:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017b04:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017b0a:	0f 20 d2             	mov    edx,cr2
c0017b0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017b11:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b15:	83 ec 08             	sub    esp,0x8
c0017b18:	52                   	push   edx
c0017b19:	50                   	push   eax
c0017b1a:	e8 71 28 ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017b1f:	83 c4 10             	add    esp,0x10
c0017b22:	0f b6 c0             	movzx  eax,al
c0017b25:	85 c0                	test   eax,eax
c0017b27:	75 2e                	jne    c0017b57 <pgFault(regs*, void*)+0x84>
c0017b29:	83 ec 0c             	sub    esp,0xc
c0017b2c:	68 b7 28 02 c0       	push   0xc00228b7
c0017b31:	e8 ea fe ff ff       	call   c0017a20 <displayProgramFault(char const*)>
c0017b36:	83 c4 10             	add    esp,0x10
c0017b39:	83 ec 0c             	sub    esp,0xc
c0017b3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b40:	e8 da fa ff ff       	call   c001761f <displayDebugInfo(regs*)>
c0017b45:	83 c4 10             	add    esp,0x10
c0017b48:	83 ec 0c             	sub    esp,0xc
c0017b4b:	6a 00                	push   0x0
c0017b4d:	e8 1a ed ff ff       	call   c001686c <Thr::terminateFromIRQ(int)>
c0017b52:	83 c4 10             	add    esp,0x10
c0017b55:	eb 01                	jmp    c0017b58 <pgFault(regs*, void*)+0x85>
c0017b57:	90                   	nop
c0017b58:	83 c4 1c             	add    esp,0x1c
c0017b5b:	c3                   	ret    

c0017b5c <otherISRHandler(regs*, void*)>:
c0017b5c:	83 ec 0c             	sub    esp,0xc
c0017b5f:	83 ec 0c             	sub    esp,0xc
c0017b62:	68 a4 29 02 c0       	push   0xc00229a4
c0017b67:	e8 b4 fe ff ff       	call   c0017a20 <displayProgramFault(char const*)>
c0017b6c:	83 c4 10             	add    esp,0x10
c0017b6f:	83 ec 0c             	sub    esp,0xc
c0017b72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b76:	e8 a4 fa ff ff       	call   c001761f <displayDebugInfo(regs*)>
c0017b7b:	83 c4 10             	add    esp,0x10
c0017b7e:	83 ec 0c             	sub    esp,0xc
c0017b81:	6a 00                	push   0x0
c0017b83:	e8 e4 ec ff ff       	call   c001686c <Thr::terminateFromIRQ(int)>
c0017b88:	83 c4 10             	add    esp,0x10
c0017b8b:	90                   	nop
c0017b8c:	83 c4 0c             	add    esp,0xc
c0017b8f:	c3                   	ret    

c0017b90 <opcodeFault(regs*, void*)>:
c0017b90:	55                   	push   ebp
c0017b91:	89 e5                	mov    ebp,esp
c0017b93:	83 ec 08             	sub    esp,0x8
c0017b96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b99:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017b9c:	83 ec 08             	sub    esp,0x8
c0017b9f:	50                   	push   eax
c0017ba0:	68 c2 28 02 c0       	push   0xc00228c2
c0017ba5:	e8 9b 2d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017baa:	83 c4 10             	add    esp,0x10
c0017bad:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017bb2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017bb8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017bbe:	0f b6 c0             	movzx  eax,al
c0017bc1:	85 c0                	test   eax,eax
c0017bc3:	74 21                	je     c0017be6 <opcodeFault(regs*, void*)+0x56>
c0017bc5:	83 ec 0c             	sub    esp,0xc
c0017bc8:	68 cc 29 02 c0       	push   0xc00229cc
c0017bcd:	e8 73 2d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017bd2:	83 c4 10             	add    esp,0x10
c0017bd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bd8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017bdb:	8d 50 19             	lea    edx,[eax+0x19]
c0017bde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017be1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017be4:	eb 2b                	jmp    c0017c11 <opcodeFault(regs*, void*)+0x81>
c0017be6:	83 ec 0c             	sub    esp,0xc
c0017be9:	68 d0 28 02 c0       	push   0xc00228d0
c0017bee:	e8 2d fe ff ff       	call   c0017a20 <displayProgramFault(char const*)>
c0017bf3:	83 c4 10             	add    esp,0x10
c0017bf6:	83 ec 0c             	sub    esp,0xc
c0017bf9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017bfc:	e8 1e fa ff ff       	call   c001761f <displayDebugInfo(regs*)>
c0017c01:	83 c4 10             	add    esp,0x10
c0017c04:	83 ec 0c             	sub    esp,0xc
c0017c07:	6a 00                	push   0x0
c0017c09:	e8 5e ec ff ff       	call   c001686c <Thr::terminateFromIRQ(int)>
c0017c0e:	83 c4 10             	add    esp,0x10
c0017c11:	c9                   	leave  
c0017c12:	c3                   	ret    

c0017c13 <i386SaveCoprocessor(void*)>:
c0017c13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c17:	83 c0 3f             	add    eax,0x3f
c0017c1a:	83 e0 c0             	and    eax,0xffffffc0
c0017c1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c21:	ff 25 70 97 02 c0    	jmp    DWORD PTR ds:0xc0029770

c0017c27 <i386LoadCoprocessor(void*)>:
c0017c27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c2b:	83 c0 3f             	add    eax,0x3f
c0017c2e:	83 e0 c0             	and    eax,0xffffffc0
c0017c31:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c35:	ff 25 6c 97 02 c0    	jmp    DWORD PTR ds:0xc002976c

c0017c3b <x87EmulHandler(regs*, void*)>:
c0017c3b:	53                   	push   ebx
c0017c3c:	83 ec 08             	sub    esp,0x8
c0017c3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c44:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017c48:	74 10                	je     c0017c5a <x87EmulHandler(regs*, void*)+0x1f>
c0017c4a:	83 ec 0c             	sub    esp,0xc
c0017c4d:	68 dd 28 02 c0       	push   0xc00228dd
c0017c52:	e8 26 97 ff ff       	call   c001137d <KePanic(char const*)>
c0017c57:	83 c4 10             	add    esp,0x10
c0017c5a:	0f 20 c0             	mov    eax,cr0
c0017c5d:	a8 08                	test   al,0x8
c0017c5f:	74 59                	je     c0017cba <x87EmulHandler(regs*, void*)+0x7f>
c0017c61:	0f 06                	clts   
c0017c63:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017c68:	85 c0                	test   eax,eax
c0017c6a:	74 0e                	je     c0017c7a <x87EmulHandler(regs*, void*)+0x3f>
c0017c6c:	83 ec 0c             	sub    esp,0xc
c0017c6f:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017c72:	e8 9c ff ff ff       	call   c0017c13 <i386SaveCoprocessor(void*)>
c0017c77:	83 c4 10             	add    esp,0x10
c0017c7a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017c80:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017c84:	75 12                	jne    c0017c98 <x87EmulHandler(regs*, void*)+0x5d>
c0017c86:	83 ec 0c             	sub    esp,0xc
c0017c89:	68 40 02 00 00       	push   0x240
c0017c8e:	e8 23 fe fe ff       	call   c0007ab6 <malloc>
c0017c93:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017c96:	eb 10                	jmp    c0017ca8 <x87EmulHandler(regs*, void*)+0x6d>
c0017c98:	83 ec 0c             	sub    esp,0xc
c0017c9b:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017ca0:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017ca3:	e8 7f ff ff ff       	call   c0017c27 <i386LoadCoprocessor(void*)>
c0017ca8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017cad:	83 c4 10             	add    esp,0x10
c0017cb0:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c0017cb5:	83 c4 08             	add    esp,0x8
c0017cb8:	5b                   	pop    ebx
c0017cb9:	c3                   	ret    
c0017cba:	83 ec 0c             	sub    esp,0xc
c0017cbd:	68 f1 28 02 c0       	push   0xc00228f1
c0017cc2:	e8 7e 2c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017cc7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017ccf:	83 c4 18             	add    esp,0x18
c0017cd2:	5b                   	pop    ebx
c0017cd3:	e9 94 eb ff ff       	jmp    c001686c <Thr::terminateFromIRQ(int)>

c0017cd8 <HalInitialiseCoprocessor()>:
c0017cd8:	83 ec 10             	sub    esp,0x10
c0017cdb:	c7 05 68 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029768,0x0
c0017ce5:	6a 00                	push   0x0
c0017ce7:	68 3b 7c 01 c0       	push   0xc0017c3b
c0017cec:	6a 07                	push   0x7
c0017cee:	e8 8f 4f ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cf3:	e8 48 70 00 00       	call   c001ed40 <avxDetect>
c0017cf8:	83 c4 10             	add    esp,0x10
c0017cfb:	85 c0                	test   eax,eax
c0017cfd:	74 1c                	je     c0017d1b <HalInitialiseCoprocessor()+0x43>
c0017cff:	c7 05 70 97 02 c0 6a ed 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ed6a
c0017d09:	c7 05 6c 97 02 c0 7b ed 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ed7b
c0017d13:	83 c4 0c             	add    esp,0xc
c0017d16:	e9 71 70 00 00       	jmp    c001ed8c <avxInit>
c0017d1b:	e8 b0 73 00 00       	call   c001f0d0 <absolutelyNoChanceInHell>
c0017d20:	85 c0                	test   eax,eax
c0017d22:	74 1c                	je     c0017d40 <HalInitialiseCoprocessor()+0x68>
c0017d24:	c7 05 70 97 02 c0 e8 f0 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001f0e8
c0017d2e:	c7 05 6c 97 02 c0 f0 f0 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001f0f0
c0017d38:	83 c4 0c             	add    esp,0xc
c0017d3b:	e9 b8 73 00 00       	jmp    c001f0f8 <sseInit>
c0017d40:	e8 d1 73 00 00       	call   c001f116 <x87Detect>
c0017d45:	85 c0                	test   eax,eax
c0017d47:	74 1c                	je     c0017d65 <HalInitialiseCoprocessor()+0x8d>
c0017d49:	c7 05 70 97 02 c0 31 f1 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001f131
c0017d53:	c7 05 6c 97 02 c0 38 f1 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001f138
c0017d5d:	83 c4 0c             	add    esp,0xc
c0017d60:	e9 da 73 00 00       	jmp    c001f13f <x87Init>
c0017d65:	c7 05 70 97 02 c0 ec 75 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc00175ec
c0017d6f:	c7 05 6c 97 02 c0 ec 75 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc00175ec
c0017d79:	0f 20 c0             	mov    eax,cr0
c0017d7c:	83 c8 04             	or     eax,0x4
c0017d7f:	0f 22 c0             	mov    cr0,eax
c0017d82:	83 c4 0c             	add    esp,0xc
c0017d85:	c3                   	ret    

c0017d86 <HalPanic(char const*)>:
c0017d86:	53                   	push   ebx
c0017d87:	83 ec 10             	sub    esp,0x10
c0017d8a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017d8e:	fa                   	cli    
c0017d8f:	53                   	push   ebx
c0017d90:	68 07 29 02 c0       	push   0xc0022907
c0017d95:	e8 ab 2b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017d9a:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c0017d9f:	83 c4 10             	add    esp,0x10
c0017da2:	85 c0                	test   eax,eax
c0017da4:	74 09                	je     c0017daf <HalPanic(char const*)+0x29>
c0017da6:	83 ec 0c             	sub    esp,0xc
c0017da9:	53                   	push   ebx
c0017daa:	ff d0                	call   eax
c0017dac:	83 c4 10             	add    esp,0x10
c0017daf:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017db4:	85 c0                	test   eax,eax
c0017db6:	0f 84 dc 00 00 00    	je     c0017e98 <HalPanic(char const*)+0x112>
c0017dbc:	52                   	push   edx
c0017dbd:	6a 01                	push   0x1
c0017dbf:	6a 0f                	push   0xf
c0017dc1:	50                   	push   eax
c0017dc2:	e8 ed 07 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017dc7:	59                   	pop    ecx
c0017dc8:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017dce:	e8 d1 09 ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0017dd3:	58                   	pop    eax
c0017dd4:	5a                   	pop    edx
c0017dd5:	68 84 0b 02 c0       	push   0xc0020b84
c0017dda:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017de0:	e8 07 08 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0017de5:	83 c4 0c             	add    esp,0xc
c0017de8:	6a 01                	push   0x1
c0017dea:	6a 0f                	push   0xf
c0017dec:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017df2:	e8 bd 07 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017df7:	59                   	pop    ecx
c0017df8:	58                   	pop    eax
c0017df9:	68 20 29 02 c0       	push   0xc0022920
c0017dfe:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017e04:	e8 9d 0c ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017e09:	83 c4 0c             	add    esp,0xc
c0017e0c:	6a 0f                	push   0xf
c0017e0e:	6a 01                	push   0x1
c0017e10:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017e16:	e8 99 07 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017e1b:	58                   	pop    eax
c0017e1c:	5a                   	pop    edx
c0017e1d:	68 29 29 02 c0       	push   0xc0022929
c0017e22:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017e28:	e8 79 0c ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017e2d:	83 c4 0c             	add    esp,0xc
c0017e30:	6a 01                	push   0x1
c0017e32:	6a 0f                	push   0xf
c0017e34:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017e3a:	e8 75 07 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017e3f:	59                   	pop    ecx
c0017e40:	58                   	pop    eax
c0017e41:	68 6d 29 02 c0       	push   0xc002296d
c0017e46:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017e4c:	e8 55 0c ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017e51:	58                   	pop    eax
c0017e52:	5a                   	pop    edx
c0017e53:	68 36 29 02 c0       	push   0xc0022936
c0017e58:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017e5e:	e8 43 0c ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017e63:	59                   	pop    ecx
c0017e64:	58                   	pop    eax
c0017e65:	68 70 29 02 c0       	push   0xc0022970
c0017e6a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017e70:	e8 31 0c ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017e75:	58                   	pop    eax
c0017e76:	5a                   	pop    edx
c0017e77:	53                   	push   ebx
c0017e78:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017e7e:	e8 23 0c ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017e83:	59                   	pop    ecx
c0017e84:	5b                   	pop    ebx
c0017e85:	68 6d 29 02 c0       	push   0xc002296d
c0017e8a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017e90:	e8 11 0c ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017e95:	83 c4 10             	add    esp,0x10
c0017e98:	eb fe                	jmp    c0017e98 <HalPanic(char const*)+0x112>

c0017e9a <HalQueryPerformanceCounter()>:
c0017e9a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017e9f:	31 d2                	xor    edx,edx
c0017ea1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017ea7:	31 c0                	xor    eax,eax
c0017ea9:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017eb0:	74 02                	je     c0017eb4 <HalQueryPerformanceCounter()+0x1a>
c0017eb2:	0f 31                	rdtsc  
c0017eb4:	c3                   	ret    

c0017eb5 <HalInitialise()>:
c0017eb5:	53                   	push   ebx
c0017eb6:	83 ec 08             	sub    esp,0x8
c0017eb9:	e8 f4 4f ff ff       	call   c000ceb2 <setupINTS()>
c0017ebe:	80 3d e0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028be0,0x0
c0017ec5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017eca:	75 0f                	jne    c0017edb <HalInitialise()+0x26>
c0017ecc:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017ed2:	83 e2 fe             	and    edx,0xfffffffe
c0017ed5:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017edb:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017ee1:	c6 05 60 97 02 c0 00 	mov    BYTE PTR ds:0xc0029760,0x0
c0017ee8:	83 e2 fe             	and    edx,0xfffffffe
c0017eeb:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017ef1:	e8 9e 02 00 00       	call   c0018194 <picOpen()>
c0017ef6:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017efd:	74 0a                	je     c0017f09 <HalInitialise()+0x54>
c0017eff:	e8 e0 01 00 00       	call   c00180e4 <picDisable()>
c0017f04:	e8 ad 67 00 00       	call   c001e6b6 <apicOpen()>
c0017f09:	bb 0f 00 00 00       	mov    ebx,0xf
c0017f0e:	50                   	push   eax
c0017f0f:	6a 00                	push   0x0
c0017f11:	68 5c 7b 01 c0       	push   0xc0017b5c
c0017f16:	6a 00                	push   0x0
c0017f18:	e8 65 4d ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f1d:	83 c4 0c             	add    esp,0xc
c0017f20:	6a 00                	push   0x0
c0017f22:	68 5c 7b 01 c0       	push   0xc0017b5c
c0017f27:	6a 01                	push   0x1
c0017f29:	e8 54 4d ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f2e:	83 c4 0c             	add    esp,0xc
c0017f31:	6a 00                	push   0x0
c0017f33:	68 ed 75 01 c0       	push   0xc00175ed
c0017f38:	6a 02                	push   0x2
c0017f3a:	e8 43 4d ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f3f:	83 c4 0c             	add    esp,0xc
c0017f42:	6a 00                	push   0x0
c0017f44:	68 5c 7b 01 c0       	push   0xc0017b5c
c0017f49:	6a 03                	push   0x3
c0017f4b:	e8 32 4d ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f50:	83 c4 0c             	add    esp,0xc
c0017f53:	6a 00                	push   0x0
c0017f55:	68 5c 7b 01 c0       	push   0xc0017b5c
c0017f5a:	6a 04                	push   0x4
c0017f5c:	e8 21 4d ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f61:	83 c4 0c             	add    esp,0xc
c0017f64:	6a 00                	push   0x0
c0017f66:	68 5c 7b 01 c0       	push   0xc0017b5c
c0017f6b:	6a 05                	push   0x5
c0017f6d:	e8 10 4d ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f72:	83 c4 0c             	add    esp,0xc
c0017f75:	6a 00                	push   0x0
c0017f77:	68 90 7b 01 c0       	push   0xc0017b90
c0017f7c:	6a 06                	push   0x6
c0017f7e:	e8 ff 4c ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f83:	83 c4 0c             	add    esp,0xc
c0017f86:	6a 00                	push   0x0
c0017f88:	68 06 76 01 c0       	push   0xc0017606
c0017f8d:	6a 08                	push   0x8
c0017f8f:	e8 ee 4c ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017f94:	83 c4 0c             	add    esp,0xc
c0017f97:	6a 00                	push   0x0
c0017f99:	68 5c 7b 01 c0       	push   0xc0017b5c
c0017f9e:	6a 09                	push   0x9
c0017fa0:	e8 dd 4c ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017fa5:	83 c4 0c             	add    esp,0xc
c0017fa8:	6a 00                	push   0x0
c0017faa:	68 5c 7b 01 c0       	push   0xc0017b5c
c0017faf:	6a 0a                	push   0xa
c0017fb1:	e8 cc 4c ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017fb6:	83 c4 0c             	add    esp,0xc
c0017fb9:	6a 00                	push   0x0
c0017fbb:	68 5c 7b 01 c0       	push   0xc0017b5c
c0017fc0:	6a 0b                	push   0xb
c0017fc2:	e8 bb 4c ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017fc7:	83 c4 0c             	add    esp,0xc
c0017fca:	6a 00                	push   0x0
c0017fcc:	68 6c 7a 01 c0       	push   0xc0017a6c
c0017fd1:	6a 0d                	push   0xd
c0017fd3:	e8 aa 4c ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017fd8:	83 c4 0c             	add    esp,0xc
c0017fdb:	6a 00                	push   0x0
c0017fdd:	68 d3 7a 01 c0       	push   0xc0017ad3
c0017fe2:	6a 0e                	push   0xe
c0017fe4:	e8 99 4c ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017fe9:	83 c4 10             	add    esp,0x10
c0017fec:	50                   	push   eax
c0017fed:	6a 00                	push   0x0
c0017fef:	68 5c 7b 01 c0       	push   0xc0017b5c
c0017ff4:	53                   	push   ebx
c0017ff5:	43                   	inc    ebx
c0017ff6:	e8 87 4c ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ffb:	83 c4 10             	add    esp,0x10
c0017ffe:	83 fb 1e             	cmp    ebx,0x1e
c0018001:	75 e9                	jne    c0017fec <HalInitialise()+0x137>
c0018003:	50                   	push   eax
c0018004:	6a 00                	push   0x0
c0018006:	68 da 27 01 c0       	push   0xc00127da
c001800b:	6a 60                	push   0x60
c001800d:	e8 70 4c ff ff       	call   c000cc82 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018012:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018017:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0018021:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018028:	e8 89 fa fe ff       	call   c0007ab6 <malloc>
c001802d:	89 04 24             	mov    DWORD PTR [esp],eax
c0018030:	89 c3                	mov    ebx,eax
c0018032:	e8 3b 09 00 00       	call   c0018972 <RTC::RTC()>
c0018037:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0018041:	5a                   	pop    edx
c0018042:	59                   	pop    ecx
c0018043:	53                   	push   ebx
c0018044:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001804a:	e8 ff 46 ff ff       	call   c000c74e <Device::addChild(Device*)>
c001804f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018051:	6a 00                	push   0x0
c0018053:	6a 00                	push   0x0
c0018055:	6a 00                	push   0x0
c0018057:	53                   	push   ebx
c0018058:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001805b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018060:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018066:	83 c4 28             	add    esp,0x28
c0018069:	5b                   	pop    ebx
c001806a:	c3                   	ret    

c001806b <HalMakeBeep(int)>:
c001806b:	53                   	push   ebx
c001806c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018070:	85 db                	test   ebx,ebx
c0018072:	75 07                	jne    c001807b <HalMakeBeep(int)+0x10>
c0018074:	e4 61                	in     al,0x61
c0018076:	83 e0 fc             	and    eax,0xfffffffc
c0018079:	eb 26                	jmp    c00180a1 <HalMakeBeep(int)+0x36>
c001807b:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0018080:	99                   	cdq    
c0018081:	f7 fb                	idiv   ebx
c0018083:	89 c1                	mov    ecx,eax
c0018085:	b0 b6                	mov    al,0xb6
c0018087:	e6 43                	out    0x43,al
c0018089:	88 c8                	mov    al,cl
c001808b:	e6 42                	out    0x42,al
c001808d:	89 c8                	mov    eax,ecx
c001808f:	c1 e8 08             	shr    eax,0x8
c0018092:	e6 42                	out    0x42,al
c0018094:	e4 61                	in     al,0x61
c0018096:	89 c2                	mov    edx,eax
c0018098:	83 ca 03             	or     edx,0x3
c001809b:	38 d0                	cmp    al,dl
c001809d:	74 04                	je     c00180a3 <HalMakeBeep(int)+0x38>
c001809f:	88 d0                	mov    al,dl
c00180a1:	e6 61                	out    0x61,al
c00180a3:	5b                   	pop    ebx
c00180a4:	c3                   	ret    

c00180a5 <HalGetRand()>:
c00180a5:	31 c0                	xor    eax,eax
c00180a7:	c3                   	ret    

c00180a8 <HalEndOfInterrupt(int)>:
c00180a8:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c00180af:	74 23                	je     c00180d4 <HalEndOfInterrupt(int)+0x2c>
c00180b1:	83 ec 14             	sub    esp,0x14
c00180b4:	6a 1b                	push   0x1b
c00180b6:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00180bc:	e8 ff ef fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c00180c1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00180c6:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00180d0:	83 c4 1c             	add    esp,0x1c
c00180d3:	c3                   	ret    
c00180d4:	e9 3f 02 00 00       	jmp    c0018318 <picEOI(int)>

c00180d9 <HalRestart()>:
c00180d9:	c3                   	ret    

c00180da <HalShutdown()>:
c00180da:	c3                   	ret    

c00180db <HalSleep()>:
c00180db:	c3                   	ret    

c00180dc <picIoWait()>:
c00180dc:	eb 00                	jmp    c00180de <picIoWait()+0x2>
c00180de:	eb 00                	jmp    c00180e0 <picIoWait()+0x4>
c00180e0:	90                   	nop
c00180e1:	c3                   	ret    
c00180e2:	66 90                	xchg   ax,ax

c00180e4 <picDisable()>:
c00180e4:	83 ec 10             	sub    esp,0x10
c00180e7:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00180ee:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00180f3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00180f7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00180fc:	ee                   	out    dx,al
c00180fd:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018104:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018109:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001810d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018112:	ee                   	out    dx,al
c0018113:	90                   	nop
c0018114:	83 c4 10             	add    esp,0x10
c0018117:	c3                   	ret    

c0018118 <picGetIRQReg(int)>:
c0018118:	83 ec 10             	sub    esp,0x10
c001811b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001811f:	0f b6 c0             	movzx  eax,al
c0018122:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018129:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001812d:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018131:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018136:	ee                   	out    dx,al
c0018137:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001813b:	0f b6 c0             	movzx  eax,al
c001813e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018145:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018149:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001814d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018152:	ee                   	out    dx,al
c0018153:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001815a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001815f:	89 c2                	mov    edx,eax
c0018161:	ec                   	in     al,dx
c0018162:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018166:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001816a:	0f b6 c0             	movzx  eax,al
c001816d:	c1 e0 08             	shl    eax,0x8
c0018170:	89 c1                	mov    ecx,eax
c0018172:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018179:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001817e:	89 c2                	mov    edx,eax
c0018180:	ec                   	in     al,dx
c0018181:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018185:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018189:	0f b6 c0             	movzx  eax,al
c001818c:	09 c8                	or     eax,ecx
c001818e:	83 c4 10             	add    esp,0x10
c0018191:	c3                   	ret    
c0018192:	66 90                	xchg   ax,ax

c0018194 <picOpen()>:
c0018194:	83 ec 50             	sub    esp,0x50
c0018197:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001819e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00181a3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00181a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00181ab:	ee                   	out    dx,al
c00181ac:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00181b3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00181b8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00181bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00181c0:	ee                   	out    dx,al
c00181c1:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00181c9:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00181d1:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00181d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181dc:	89 c2                	mov    edx,eax
c00181de:	ec                   	in     al,dx
c00181df:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00181e3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00181e7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00181eb:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00181f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00181f6:	89 c2                	mov    edx,eax
c00181f8:	ec                   	in     al,dx
c00181f9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00181fd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018201:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018205:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001820c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018211:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018215:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018219:	ee                   	out    dx,al
c001821a:	e8 bd fe ff ff       	call   c00180dc <picIoWait()>
c001821f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018226:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001822b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001822f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018233:	ee                   	out    dx,al
c0018234:	e8 a3 fe ff ff       	call   c00180dc <picIoWait()>
c0018239:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001823d:	0f b6 c0             	movzx  eax,al
c0018240:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018247:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001824b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001824f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018253:	ee                   	out    dx,al
c0018254:	e8 83 fe ff ff       	call   c00180dc <picIoWait()>
c0018259:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001825d:	0f b6 c0             	movzx  eax,al
c0018260:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018267:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001826b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001826f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018273:	ee                   	out    dx,al
c0018274:	e8 63 fe ff ff       	call   c00180dc <picIoWait()>
c0018279:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018280:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018285:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018289:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001828d:	ee                   	out    dx,al
c001828e:	e8 49 fe ff ff       	call   c00180dc <picIoWait()>
c0018293:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001829a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001829f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00182a3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00182a7:	ee                   	out    dx,al
c00182a8:	e8 2f fe ff ff       	call   c00180dc <picIoWait()>
c00182ad:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00182b4:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00182b9:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00182bd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00182c1:	ee                   	out    dx,al
c00182c2:	e8 15 fe ff ff       	call   c00180dc <picIoWait()>
c00182c7:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00182ce:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00182d3:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00182d7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00182db:	ee                   	out    dx,al
c00182dc:	e8 fb fd ff ff       	call   c00180dc <picIoWait()>
c00182e1:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00182e6:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00182ed:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00182f1:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00182f5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00182f9:	ee                   	out    dx,al
c00182fa:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00182ff:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018306:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001830a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001830e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018312:	ee                   	out    dx,al
c0018313:	90                   	nop
c0018314:	83 c4 50             	add    esp,0x50
c0018317:	c3                   	ret    

c0018318 <picEOI(int)>:
c0018318:	83 ec 10             	sub    esp,0x10
c001831b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018320:	75 1e                	jne    c0018340 <picEOI(int)+0x28>
c0018322:	6a 0b                	push   0xb
c0018324:	e8 ef fd ff ff       	call   c0018118 <picGetIRQReg(int)>
c0018329:	83 c4 04             	add    esp,0x4
c001832c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018331:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018336:	25 80 00 00 00       	and    eax,0x80
c001833b:	74 73                	je     c00183b0 <picEOI(int)+0x98>
c001833d:	8d 76 00             	lea    esi,[esi+0x0]
c0018340:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018345:	75 31                	jne    c0018378 <picEOI(int)+0x60>
c0018347:	6a 0b                	push   0xb
c0018349:	e8 ca fd ff ff       	call   c0018118 <picGetIRQReg(int)>
c001834e:	83 c4 04             	add    esp,0x4
c0018351:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018356:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001835a:	98                   	cwde   
c001835b:	85 c0                	test   eax,eax
c001835d:	78 19                	js     c0018378 <picEOI(int)+0x60>
c001835f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018366:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001836b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001836f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018374:	ee                   	out    dx,al
c0018375:	eb 3d                	jmp    c00183b4 <picEOI(int)+0x9c>
c0018377:	90                   	nop
c0018378:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001837d:	7e 19                	jle    c0018398 <picEOI(int)+0x80>
c001837f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018386:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001838b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001838f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018394:	ee                   	out    dx,al
c0018395:	8d 76 00             	lea    esi,[esi+0x0]
c0018398:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001839f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00183a4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00183a8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00183ad:	ee                   	out    dx,al
c00183ae:	eb 04                	jmp    c00183b4 <picEOI(int)+0x9c>
c00183b0:	90                   	nop
c00183b1:	8d 76 00             	lea    esi,[esi+0x0]
c00183b4:	83 c4 10             	add    esp,0x10
c00183b7:	c3                   	ret    

c00183b8 <RTC::open(int, int, void*)>:
c00183b8:	31 c0                	xor    eax,eax
c00183ba:	c3                   	ret    
c00183bb:	90                   	nop

c00183bc <RTC::close(int, int, void*)>:
c00183bc:	31 c0                	xor    eax,eax
c00183be:	c3                   	ret    
c00183bf:	90                   	nop

c00183c0 <RTC::timeInSecondsUTC()>:
c00183c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183c4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00183ca:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00183d0:	c3                   	ret    
c00183d1:	90                   	nop

c00183d2 <RTC::timeInDatetimeUTC()>:
c00183d2:	53                   	push   ebx
c00183d3:	83 ec 14             	sub    esp,0x14
c00183d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00183da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183de:	8b 10                	mov    edx,DWORD PTR [eax]
c00183e0:	50                   	push   eax
c00183e1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00183e4:	83 c4 0c             	add    esp,0xc
c00183e7:	52                   	push   edx
c00183e8:	50                   	push   eax
c00183e9:	53                   	push   ebx
c00183ea:	e8 d3 40 ff ff       	call   c000c4c2 <secondsToDatetime(unsigned long long)>
c00183ef:	89 d8                	mov    eax,ebx
c00183f1:	83 c4 14             	add    esp,0x14
c00183f4:	5b                   	pop    ebx
c00183f5:	c2 04 00             	ret    0x4

c00183f8 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00183f8:	56                   	push   esi
c00183f9:	53                   	push   ebx
c00183fa:	83 ec 14             	sub    esp,0x14
c00183fd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018401:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018403:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018406:	8d 44 24 08          	lea    eax,[esp+0x8]
c001840a:	52                   	push   edx
c001840b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001840f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018413:	50                   	push   eax
c0018414:	e8 a9 40 ff ff       	call   c000c4c2 <secondsToDatetime(unsigned long long)>
c0018419:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001841d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018421:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018425:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018429:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001842d:	89 f0                	mov    eax,esi
c001842f:	83 c4 20             	add    esp,0x20
c0018432:	5b                   	pop    ebx
c0018433:	5e                   	pop    esi
c0018434:	ff e0                	jmp    eax

c0018436 <RTC::~RTC()>:
c0018436:	83 ec 0c             	sub    esp,0xc
c0018439:	ba 0c 2a 02 c0       	mov    edx,0xc0022a0c
c001843e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018442:	89 10                	mov    DWORD PTR [eax],edx
c0018444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018448:	83 ec 0c             	sub    esp,0xc
c001844b:	50                   	push   eax
c001844c:	e8 03 3e ff ff       	call   c000c254 <Clock::~Clock()>
c0018451:	83 c4 10             	add    esp,0x10
c0018454:	90                   	nop
c0018455:	83 c4 0c             	add    esp,0xc
c0018458:	c3                   	ret    
c0018459:	90                   	nop

c001845a <RTC::~RTC()>:
c001845a:	83 ec 0c             	sub    esp,0xc
c001845d:	83 ec 0c             	sub    esp,0xc
c0018460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018464:	e8 cd ff ff ff       	call   c0018436 <RTC::~RTC()>
c0018469:	83 c4 10             	add    esp,0x10
c001846c:	83 ec 08             	sub    esp,0x8
c001846f:	68 60 01 00 00       	push   0x160
c0018474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018478:	e8 9b 23 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001847d:	83 c4 10             	add    esp,0x10
c0018480:	83 c4 0c             	add    esp,0xc
c0018483:	c3                   	ret    

c0018484 <RTC::get_update_in_progress_flag()>:
c0018484:	83 ec 14             	sub    esp,0x14
c0018487:	6a 0a                	push   0xa
c0018489:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001848f:	e8 e4 ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018494:	83 c4 1c             	add    esp,0x1c
c0018497:	0f b6 c0             	movzx  eax,al
c001849a:	c1 e8 07             	shr    eax,0x7
c001849d:	c3                   	ret    

c001849e <RTC::completeRTCRefresh()>:
c001849e:	55                   	push   ebp
c001849f:	57                   	push   edi
c00184a0:	56                   	push   esi
c00184a1:	53                   	push   ebx
c00184a2:	83 ec 3c             	sub    esp,0x3c
c00184a5:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c00184ab:	83 ec 0c             	sub    esp,0xc
c00184ae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00184b2:	e8 cd ff ff ff       	call   c0018484 <RTC::get_update_in_progress_flag()>
c00184b7:	83 c4 10             	add    esp,0x10
c00184ba:	84 c0                	test   al,al
c00184bc:	74 0e                	je     c00184cc <RTC::completeRTCRefresh()+0x2e>
c00184be:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00184c4:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c00184ca:	73 df                	jae    c00184ab <RTC::completeRTCRefresh()+0xd>
c00184cc:	51                   	push   ecx
c00184cd:	51                   	push   ecx
c00184ce:	6a 00                	push   0x0
c00184d0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184d6:	e8 9d ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00184db:	5b                   	pop    ebx
c00184dc:	89 c7                	mov    edi,eax
c00184de:	5e                   	pop    esi
c00184df:	6a 02                	push   0x2
c00184e1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184e7:	e8 8c ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00184ec:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00184f0:	5d                   	pop    ebp
c00184f1:	58                   	pop    eax
c00184f2:	6a 04                	push   0x4
c00184f4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184fa:	e8 79 ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00184ff:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018503:	58                   	pop    eax
c0018504:	5a                   	pop    edx
c0018505:	6a 07                	push   0x7
c0018507:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001850d:	e8 66 ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018512:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018516:	59                   	pop    ecx
c0018517:	5b                   	pop    ebx
c0018518:	6a 08                	push   0x8
c001851a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018520:	e8 53 ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018525:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018529:	5e                   	pop    esi
c001852a:	5d                   	pop    ebp
c001852b:	6a 09                	push   0x9
c001852d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018533:	e8 40 ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018538:	0f b6 c0             	movzx  eax,al
c001853b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001853f:	83 c4 10             	add    esp,0x10
c0018542:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c0018548:	83 ec 0c             	sub    esp,0xc
c001854b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001854f:	e8 30 ff ff ff       	call   c0018484 <RTC::get_update_in_progress_flag()>
c0018554:	83 c4 10             	add    esp,0x10
c0018557:	84 c0                	test   al,al
c0018559:	74 0e                	je     c0018569 <RTC::completeRTCRefresh()+0xcb>
c001855b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018561:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c0018567:	73 df                	jae    c0018548 <RTC::completeRTCRefresh()+0xaa>
c0018569:	51                   	push   ecx
c001856a:	51                   	push   ecx
c001856b:	6a 00                	push   0x0
c001856d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018573:	e8 00 ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018578:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001857c:	5b                   	pop    ebx
c001857d:	5e                   	pop    esi
c001857e:	6a 02                	push   0x2
c0018580:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018586:	e8 ed eb fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001858b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001858f:	5d                   	pop    ebp
c0018590:	58                   	pop    eax
c0018591:	6a 04                	push   0x4
c0018593:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018599:	e8 da eb fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001859e:	88 c3                	mov    bl,al
c00185a0:	58                   	pop    eax
c00185a1:	5a                   	pop    edx
c00185a2:	6a 07                	push   0x7
c00185a4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185aa:	e8 c9 eb fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00185af:	59                   	pop    ecx
c00185b0:	89 c6                	mov    esi,eax
c00185b2:	5d                   	pop    ebp
c00185b3:	6a 08                	push   0x8
c00185b5:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185bb:	e8 b8 eb fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00185c0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00185c4:	58                   	pop    eax
c00185c5:	5a                   	pop    edx
c00185c6:	6a 09                	push   0x9
c00185c8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185ce:	e8 a5 eb fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00185d3:	89 f9                	mov    ecx,edi
c00185d5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00185d9:	0f b6 e8             	movzx  ebp,al
c00185dc:	83 c4 10             	add    esp,0x10
c00185df:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00185e3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00185e8:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c00185ed:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00185f1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00185f5:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00185f9:	0f 94 c0             	sete   al
c00185fc:	0f b6 fb             	movzx  edi,bl
c00185ff:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0018603:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0018608:	0f 94 c2             	sete   dl
c001860b:	21 d0                	and    eax,edx
c001860d:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018611:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018615:	0f 94 c2             	sete   dl
c0018618:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001861c:	21 c2                	and    edx,eax
c001861e:	89 f0                	mov    eax,esi
c0018620:	0f b6 c0             	movzx  eax,al
c0018623:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018627:	89 f0                	mov    eax,esi
c0018629:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001862d:	0f 94 c0             	sete   al
c0018630:	21 d0                	and    eax,edx
c0018632:	31 d2                	xor    edx,edx
c0018634:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018638:	0f 94 c2             	sete   dl
c001863b:	85 c2                	test   edx,eax
c001863d:	75 27                	jne    c0018666 <RTC::completeRTCRefresh()+0x1c8>
c001863f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018643:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0018647:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001864b:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001864f:	89 f0                	mov    eax,esi
c0018651:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018655:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018659:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001865d:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018661:	e9 dc fe ff ff       	jmp    c0018542 <RTC::completeRTCRefresh()+0xa4>
c0018666:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001866a:	75 d3                	jne    c001863f <RTC::completeRTCRefresh()+0x1a1>
c001866c:	52                   	push   edx
c001866d:	52                   	push   edx
c001866e:	6a 0b                	push   0xb
c0018670:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018676:	e8 fd ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001867b:	83 c4 10             	add    esp,0x10
c001867e:	a8 04                	test   al,0x4
c0018680:	75 7a                	jne    c00186fc <RTC::completeRTCRefresh()+0x25e>
c0018682:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018686:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001868a:	83 e1 0f             	and    ecx,0xf
c001868d:	c1 ea 04             	shr    edx,0x4
c0018690:	c1 ef 04             	shr    edi,0x4
c0018693:	6b d2 0a             	imul   edx,edx,0xa
c0018696:	83 e6 0f             	and    esi,0xf
c0018699:	01 d1                	add    ecx,edx
c001869b:	c1 ed 04             	shr    ebp,0x4
c001869e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00186a2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00186a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00186aa:	c1 ea 04             	shr    edx,0x4
c00186ad:	83 e1 0f             	and    ecx,0xf
c00186b0:	6b d2 0a             	imul   edx,edx,0xa
c00186b3:	6b ed 0a             	imul   ebp,ebp,0xa
c00186b6:	01 d1                	add    ecx,edx
c00186b8:	89 fa                	mov    edx,edi
c00186ba:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00186be:	83 e2 07             	and    edx,0x7
c00186c1:	89 d9                	mov    ecx,ebx
c00186c3:	6b d2 0a             	imul   edx,edx,0xa
c00186c6:	83 e1 0f             	and    ecx,0xf
c00186c9:	83 e3 80             	and    ebx,0xffffff80
c00186cc:	01 d1                	add    ecx,edx
c00186ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00186d2:	09 cb                	or     ebx,ecx
c00186d4:	c1 ea 04             	shr    edx,0x4
c00186d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186db:	6b d2 0a             	imul   edx,edx,0xa
c00186de:	83 e1 0f             	and    ecx,0xf
c00186e1:	01 d6                	add    esi,edx
c00186e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00186e7:	c1 ea 04             	shr    edx,0x4
c00186ea:	6b d2 0a             	imul   edx,edx,0xa
c00186ed:	01 d1                	add    ecx,edx
c00186ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00186f3:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00186f7:	83 e2 0f             	and    edx,0xf
c00186fa:	01 d5                	add    ebp,edx
c00186fc:	a8 02                	test   al,0x2
c00186fe:	75 15                	jne    c0018715 <RTC::completeRTCRefresh()+0x277>
c0018700:	f6 c3 80             	test   bl,0x80
c0018703:	74 10                	je     c0018715 <RTC::completeRTCRefresh()+0x277>
c0018705:	83 e3 7f             	and    ebx,0x7f
c0018708:	b9 18 00 00 00       	mov    ecx,0x18
c001870d:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018710:	99                   	cdq    
c0018711:	f7 f9                	idiv   ecx
c0018713:	88 d3                	mov    bl,dl
c0018715:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001871b:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018721:	77 06                	ja     c0018729 <RTC::completeRTCRefresh()+0x28b>
c0018723:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018729:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001872e:	31 c9                	xor    ecx,ecx
c0018730:	c1 e0 10             	shl    eax,0x10
c0018733:	89 cd                	mov    ebp,ecx
c0018735:	c1 e7 10             	shl    edi,0x10
c0018738:	31 d2                	xor    edx,edx
c001873a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018740:	09 c5                	or     ebp,eax
c0018742:	89 f0                	mov    eax,esi
c0018744:	89 e9                	mov    ecx,ebp
c0018746:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001874a:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001874e:	88 c2                	mov    dl,al
c0018750:	88 d9                	mov    cl,bl
c0018752:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0018756:	0f b7 c2             	movzx  eax,dx
c0018759:	09 f8                	or     eax,edi
c001875b:	89 c2                	mov    edx,eax
c001875d:	50                   	push   eax
c001875e:	50                   	push   eax
c001875f:	51                   	push   ecx
c0018760:	52                   	push   edx
c0018761:	e8 dd 3b ff ff       	call   c000c343 <datetimeToSeconds(datetime_t)>
c0018766:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001876a:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018770:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018776:	83 c4 4c             	add    esp,0x4c
c0018779:	5b                   	pop    ebx
c001877a:	5e                   	pop    esi
c001877b:	5f                   	pop    edi
c001877c:	5d                   	pop    ebp
c001877d:	c3                   	ret    

c001877e <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001877e:	55                   	push   ebp
c001877f:	57                   	push   edi
c0018780:	56                   	push   esi
c0018781:	53                   	push   ebx
c0018782:	83 ec 30             	sub    esp,0x30
c0018785:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018789:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001878d:	6a 00                	push   0x0
c001878f:	6a 00                	push   0x0
c0018791:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018797:	e8 f6 ea fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001879c:	83 c4 0c             	add    esp,0xc
c001879f:	6a 00                	push   0x0
c00187a1:	6a 02                	push   0x2
c00187a3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00187a9:	e8 e4 ea fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00187ae:	31 d2                	xor    edx,edx
c00187b0:	89 f9                	mov    ecx,edi
c00187b2:	89 f8                	mov    eax,edi
c00187b4:	c1 e9 10             	shr    ecx,0x10
c00187b7:	0f b6 c4             	movzx  eax,ah
c00187ba:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00187be:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00187c2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00187c6:	b9 64 00 00 00       	mov    ecx,0x64
c00187cb:	89 f0                	mov    eax,esi
c00187cd:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00187d1:	89 f0                	mov    eax,esi
c00187d3:	0f b6 c4             	movzx  eax,ah
c00187d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00187da:	89 f0                	mov    eax,esi
c00187dc:	c1 e8 10             	shr    eax,0x10
c00187df:	f7 f1                	div    ecx
c00187e1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00187e5:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00187e9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00187ed:	59                   	pop    ecx
c00187ee:	5b                   	pop    ebx
c00187ef:	89 fb                	mov    ebx,edi
c00187f1:	6a 0b                	push   0xb
c00187f3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00187f9:	e8 7a e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187fe:	83 c4 10             	add    esp,0x10
c0018801:	89 c5                	mov    ebp,eax
c0018803:	a8 04                	test   al,0x4
c0018805:	75 6e                	jne    c0018875 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018807:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001880b:	31 d2                	xor    edx,edx
c001880d:	0f b6 c1             	movzx  eax,cl
c0018810:	b9 0a 00 00 00       	mov    ecx,0xa
c0018815:	f7 f1                	div    ecx
c0018817:	c1 e0 04             	shl    eax,0x4
c001881a:	09 d0                	or     eax,edx
c001881c:	31 d2                	xor    edx,edx
c001881e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018822:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018827:	f7 f1                	div    ecx
c0018829:	c1 e0 04             	shl    eax,0x4
c001882c:	09 d0                	or     eax,edx
c001882e:	31 d2                	xor    edx,edx
c0018830:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018834:	0f b6 c3             	movzx  eax,bl
c0018837:	f7 f1                	div    ecx
c0018839:	c1 e0 04             	shl    eax,0x4
c001883c:	09 d0                	or     eax,edx
c001883e:	31 d2                	xor    edx,edx
c0018840:	89 c3                	mov    ebx,eax
c0018842:	89 f0                	mov    eax,esi
c0018844:	0f b6 c0             	movzx  eax,al
c0018847:	f7 f1                	div    ecx
c0018849:	c1 e0 04             	shl    eax,0x4
c001884c:	09 d0                	or     eax,edx
c001884e:	31 d2                	xor    edx,edx
c0018850:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018854:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018859:	f7 f1                	div    ecx
c001885b:	c1 e0 04             	shl    eax,0x4
c001885e:	09 d0                	or     eax,edx
c0018860:	31 d2                	xor    edx,edx
c0018862:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018866:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001886a:	f7 f1                	div    ecx
c001886c:	c1 e0 04             	shl    eax,0x4
c001886f:	09 d0                	or     eax,edx
c0018871:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018875:	83 e5 02             	and    ebp,0x2
c0018878:	75 1e                	jne    c0018898 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c001887a:	0f b6 c3             	movzx  eax,bl
c001887d:	83 f8 0b             	cmp    eax,0xb
c0018880:	76 10                	jbe    c0018892 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018882:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018885:	88 d3                	mov    bl,dl
c0018887:	84 d2                	test   dl,dl
c0018889:	75 02                	jne    c001888d <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c001888b:	b3 0c                	mov    bl,0xc
c001888d:	83 cb 80             	or     ebx,0xffffff80
c0018890:	eb 06                	jmp    c0018898 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018892:	85 c0                	test   eax,eax
c0018894:	75 02                	jne    c0018898 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018896:	b3 0c                	mov    bl,0xc
c0018898:	0f b6 db             	movzx  ebx,bl
c001889b:	50                   	push   eax
c001889c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00188a1:	52                   	push   edx
c00188a2:	6a 00                	push   0x0
c00188a4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00188aa:	e8 e3 e9 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00188af:	83 c4 0c             	add    esp,0xc
c00188b2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00188b7:	50                   	push   eax
c00188b8:	6a 02                	push   0x2
c00188ba:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00188c0:	e8 cd e9 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00188c5:	83 c4 0c             	add    esp,0xc
c00188c8:	53                   	push   ebx
c00188c9:	6a 04                	push   0x4
c00188cb:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00188d1:	e8 bc e9 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00188d6:	83 c4 0c             	add    esp,0xc
c00188d9:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00188de:	52                   	push   edx
c00188df:	6a 07                	push   0x7
c00188e1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00188e7:	e8 a6 e9 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00188ec:	83 c4 0c             	add    esp,0xc
c00188ef:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00188f4:	50                   	push   eax
c00188f5:	6a 08                	push   0x8
c00188f7:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00188fd:	e8 90 e9 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018902:	83 c4 0c             	add    esp,0xc
c0018905:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001890a:	55                   	push   ebp
c001890b:	6a 09                	push   0x9
c001890d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018913:	e8 7a e9 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018918:	5a                   	pop    edx
c0018919:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001891d:	e8 7c fb ff ff       	call   c001849e <RTC::completeRTCRefresh()>
c0018922:	83 c4 3c             	add    esp,0x3c
c0018925:	b0 01                	mov    al,0x1
c0018927:	5b                   	pop    ebx
c0018928:	5e                   	pop    esi
c0018929:	5f                   	pop    edi
c001892a:	5d                   	pop    ebp
c001892b:	c3                   	ret    

c001892c <rtcIRQHandler(regs*, void*)>:
c001892c:	53                   	push   ebx
c001892d:	83 ec 10             	sub    esp,0x10
c0018930:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018934:	6a 0c                	push   0xc
c0018936:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001893c:	e8 37 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018941:	83 c4 10             	add    esp,0x10
c0018944:	a8 80                	test   al,0x80
c0018946:	74 24                	je     c001896c <rtcIRQHandler(regs*, void*)+0x40>
c0018948:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001894f:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018956:	66 ff 05 78 97 02 c0 	inc    WORD PTR ds:0xc0029778
c001895d:	75 0d                	jne    c001896c <rtcIRQHandler(regs*, void*)+0x40>
c001895f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018963:	83 c4 08             	add    esp,0x8
c0018966:	5b                   	pop    ebx
c0018967:	e9 32 fb ff ff       	jmp    c001849e <RTC::completeRTCRefresh()>
c001896c:	83 c4 08             	add    esp,0x8
c001896f:	5b                   	pop    ebx
c0018970:	c3                   	ret    
c0018971:	90                   	nop

c0018972 <RTC::RTC()>:
c0018972:	83 ec 1c             	sub    esp,0x1c
c0018975:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018979:	83 ec 08             	sub    esp,0x8
c001897c:	68 ef 29 02 c0       	push   0xc00229ef
c0018981:	50                   	push   eax
c0018982:	e8 97 38 ff ff       	call   c000c21e <Clock::Clock(char const*)>
c0018987:	83 c4 10             	add    esp,0x10
c001898a:	ba 0c 2a 02 c0       	mov    edx,0xc0022a0c
c001898f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018993:	89 10                	mov    DWORD PTR [eax],edx
c0018995:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018999:	83 ec 0c             	sub    esp,0xc
c001899c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00189a0:	6a 01                	push   0x1
c00189a2:	68 2c 89 01 c0       	push   0xc001892c
c00189a7:	6a 08                	push   0x8
c00189a9:	50                   	push   eax
c00189aa:	e8 4b 3d ff ff       	call   c000c6fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00189af:	83 c4 20             	add    esp,0x20
c00189b2:	89 c2                	mov    edx,eax
c00189b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189b8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00189be:	fa                   	cli    
c00189bf:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00189c4:	83 c0 01             	add    eax,0x1
c00189c7:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00189cc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00189d1:	83 ec 08             	sub    esp,0x8
c00189d4:	6a 0b                	push   0xb
c00189d6:	50                   	push   eax
c00189d7:	e8 9c e7 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00189dc:	83 c4 10             	add    esp,0x10
c00189df:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00189e3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00189e8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00189ec:	83 ca 10             	or     edx,0x10
c00189ef:	0f b6 d2             	movzx  edx,dl
c00189f2:	83 ec 04             	sub    esp,0x4
c00189f5:	52                   	push   edx
c00189f6:	6a 0b                	push   0xb
c00189f8:	50                   	push   eax
c00189f9:	e8 94 e8 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00189fe:	83 c4 10             	add    esp,0x10
c0018a01:	83 ec 0c             	sub    esp,0xc
c0018a04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a08:	e8 91 fa ff ff       	call   c001849e <RTC::completeRTCRefresh()>
c0018a0d:	83 c4 10             	add    esp,0x10
c0018a10:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018a15:	83 e8 01             	sub    eax,0x1
c0018a18:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0018a1d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018a22:	85 c0                	test   eax,eax
c0018a24:	75 01                	jne    c0018a27 <RTC::RTC()+0xb5>
c0018a26:	fb                   	sti    
c0018a27:	90                   	nop
c0018a28:	83 c4 1c             	add    esp,0x1c
c0018a2b:	c3                   	ret    

c0018a2c <HalConsoleScroll(int, int)>:
c0018a2c:	83 ec 10             	sub    esp,0x10
c0018a2f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018a37:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018a3f:	90                   	nop
c0018a40:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018a45:	0f 8f e1 00 00 00    	jg     c0018b2c <HalConsoleScroll(int, int)+0x100>
c0018a4b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018a53:	90                   	nop
c0018a54:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018a5c:	0f 8f be 00 00 00    	jg     c0018b20 <HalConsoleScroll(int, int)+0xf4>
c0018a62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a66:	89 d0                	mov    eax,edx
c0018a68:	c1 e0 02             	shl    eax,0x2
c0018a6b:	01 d0                	add    eax,edx
c0018a6d:	c1 e0 05             	shl    eax,0x5
c0018a70:	89 c2                	mov    edx,eax
c0018a72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a76:	01 d0                	add    eax,edx
c0018a78:	89 c2                	mov    edx,eax
c0018a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a7e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018a81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a85:	89 d0                	mov    eax,edx
c0018a87:	c1 e0 02             	shl    eax,0x2
c0018a8a:	01 d0                	add    eax,edx
c0018a8c:	c1 e0 05             	shl    eax,0x5
c0018a8f:	89 c2                	mov    edx,eax
c0018a91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a95:	01 d0                	add    eax,edx
c0018a97:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018a9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018aa1:	01 c2                	add    edx,eax
c0018aa3:	8a 01                	mov    al,BYTE PTR [ecx]
c0018aa5:	88 02                	mov    BYTE PTR [edx],al
c0018aa7:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018aac:	75 66                	jne    c0018b14 <HalConsoleScroll(int, int)+0xe8>
c0018aae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ab2:	83 e0 01             	and    eax,0x1
c0018ab5:	74 39                	je     c0018af0 <HalConsoleScroll(int, int)+0xc4>
c0018ab7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018abb:	83 e0 0f             	and    eax,0xf
c0018abe:	88 c2                	mov    dl,al
c0018ac0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ac4:	c1 e0 04             	shl    eax,0x4
c0018ac7:	09 d0                	or     eax,edx
c0018ac9:	88 c1                	mov    cl,al
c0018acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018acf:	89 d0                	mov    eax,edx
c0018ad1:	c1 e0 02             	shl    eax,0x2
c0018ad4:	01 d0                	add    eax,edx
c0018ad6:	c1 e0 05             	shl    eax,0x5
c0018ad9:	89 c2                	mov    edx,eax
c0018adb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018adf:	01 d0                	add    eax,edx
c0018ae1:	89 c2                	mov    edx,eax
c0018ae3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ae7:	01 d0                	add    eax,edx
c0018ae9:	88 ca                	mov    dl,cl
c0018aeb:	88 10                	mov    BYTE PTR [eax],dl
c0018aed:	eb 25                	jmp    c0018b14 <HalConsoleScroll(int, int)+0xe8>
c0018aef:	90                   	nop
c0018af0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018af4:	89 d0                	mov    eax,edx
c0018af6:	c1 e0 02             	shl    eax,0x2
c0018af9:	01 d0                	add    eax,edx
c0018afb:	c1 e0 05             	shl    eax,0x5
c0018afe:	89 c2                	mov    edx,eax
c0018b00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b04:	01 d0                	add    eax,edx
c0018b06:	89 c2                	mov    edx,eax
c0018b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b0c:	01 d0                	add    eax,edx
c0018b0e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018b11:	8d 76 00             	lea    esi,[esi+0x0]
c0018b14:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018b19:	e9 36 ff ff ff       	jmp    c0018a54 <HalConsoleScroll(int, int)+0x28>
c0018b1e:	66 90                	xchg   ax,ax
c0018b20:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018b25:	e9 16 ff ff ff       	jmp    c0018a40 <HalConsoleScroll(int, int)+0x14>
c0018b2a:	66 90                	xchg   ax,ax
c0018b2c:	90                   	nop
c0018b2d:	83 c4 10             	add    esp,0x10
c0018b30:	c3                   	ret    
c0018b31:	8d 76 00             	lea    esi,[esi+0x0]

c0018b34 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018b34:	83 ec 14             	sub    esp,0x14
c0018b37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018b3b:	88 04 24             	mov    BYTE PTR [esp],al
c0018b3e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018b41:	0f b6 c0             	movzx  eax,al
c0018b44:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018b48:	89 d1                	mov    ecx,edx
c0018b4a:	83 e1 0f             	and    ecx,0xf
c0018b4d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018b51:	c1 e2 04             	shl    edx,0x4
c0018b54:	0f b6 d2             	movzx  edx,dl
c0018b57:	09 ca                	or     edx,ecx
c0018b59:	c1 e2 08             	shl    edx,0x8
c0018b5c:	09 d0                	or     eax,edx
c0018b5e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018b63:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018b6b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018b6f:	89 d0                	mov    eax,edx
c0018b71:	c1 e0 02             	shl    eax,0x2
c0018b74:	01 d0                	add    eax,edx
c0018b76:	c1 e0 04             	shl    eax,0x4
c0018b79:	89 c2                	mov    edx,eax
c0018b7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b7f:	01 d0                	add    eax,edx
c0018b81:	01 c0                	add    eax,eax
c0018b83:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018b87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018b8b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018b90:	66 89 02             	mov    WORD PTR [edx],ax
c0018b93:	90                   	nop
c0018b94:	83 c4 14             	add    esp,0x14
c0018b97:	c3                   	ret    

c0018b98 <HalConsoleCursorUpdate(int, int)>:
c0018b98:	83 ec 20             	sub    esp,0x20
c0018b9b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b9f:	89 c2                	mov    edx,eax
c0018ba1:	c1 e2 02             	shl    edx,0x2
c0018ba4:	01 d0                	add    eax,edx
c0018ba6:	c1 e0 04             	shl    eax,0x4
c0018ba9:	89 c2                	mov    edx,eax
c0018bab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018baf:	01 d0                	add    eax,edx
c0018bb1:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018bb6:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018bbd:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018bc2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018bc6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018bca:	ee                   	out    dx,al
c0018bcb:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018bd0:	0f b6 c0             	movzx  eax,al
c0018bd3:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018bda:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018bde:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018be2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018be6:	ee                   	out    dx,al
c0018be7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018bee:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018bf3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018bf7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018bfb:	ee                   	out    dx,al
c0018bfc:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018c01:	c1 e8 08             	shr    eax,0x8
c0018c04:	0f b6 c0             	movzx  eax,al
c0018c07:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018c0e:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018c12:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018c16:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018c1a:	ee                   	out    dx,al
c0018c1b:	90                   	nop
c0018c1c:	83 c4 20             	add    esp,0x20
c0018c1f:	c3                   	ret    

c0018c20 <FAT::getName()>:
c0018c20:	b8 40 2a 02 c0       	mov    eax,0xc0022a40
c0018c25:	c3                   	ret    
c0018c26:	66 90                	xchg   ax,ax

c0018c28 <FAT::tell(void*, unsigned long long*)>:
c0018c28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018c2d:	75 09                	jne    c0018c38 <FAT::tell(void*, unsigned long long*)+0x10>
c0018c2f:	b8 04 00 00 00       	mov    eax,0x4
c0018c34:	c3                   	ret    
c0018c35:	8d 76 00             	lea    esi,[esi+0x0]
c0018c38:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018c3d:	75 09                	jne    c0018c48 <FAT::tell(void*, unsigned long long*)+0x20>
c0018c3f:	b8 04 00 00 00       	mov    eax,0x4
c0018c44:	c3                   	ret    
c0018c45:	8d 76 00             	lea    esi,[esi+0x0]
c0018c48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c4c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018c4f:	ba 00 00 00 00       	mov    edx,0x0
c0018c54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c58:	89 01                	mov    DWORD PTR [ecx],eax
c0018c5a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018c5d:	b8 00 00 00 00       	mov    eax,0x0
c0018c62:	c3                   	ret    
c0018c63:	90                   	nop

c0018c64 <FAT::stat(void*, unsigned long long*)>:
c0018c64:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018c69:	75 09                	jne    c0018c74 <FAT::stat(void*, unsigned long long*)+0x10>
c0018c6b:	b8 04 00 00 00       	mov    eax,0x4
c0018c70:	c3                   	ret    
c0018c71:	8d 76 00             	lea    esi,[esi+0x0]
c0018c74:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018c79:	75 09                	jne    c0018c84 <FAT::stat(void*, unsigned long long*)+0x20>
c0018c7b:	b8 04 00 00 00       	mov    eax,0x4
c0018c80:	c3                   	ret    
c0018c81:	8d 76 00             	lea    esi,[esi+0x0]
c0018c84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c88:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018c8b:	ba 00 00 00 00       	mov    edx,0x0
c0018c90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c94:	89 01                	mov    DWORD PTR [ecx],eax
c0018c96:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018c99:	b8 00 00 00 00       	mov    eax,0x0
c0018c9e:	c3                   	ret    
c0018c9f:	90                   	nop

c0018ca0 <FAT::~FAT()>:
c0018ca0:	83 ec 0c             	sub    esp,0xc
c0018ca3:	ba 8c 2a 02 c0       	mov    edx,0xc0022a8c
c0018ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cac:	89 10                	mov    DWORD PTR [eax],edx
c0018cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cb2:	83 ec 0c             	sub    esp,0xc
c0018cb5:	50                   	push   eax
c0018cb6:	e8 ad 28 ff ff       	call   c000b568 <Filesystem::~Filesystem()>
c0018cbb:	83 c4 10             	add    esp,0x10
c0018cbe:	90                   	nop
c0018cbf:	83 c4 0c             	add    esp,0xc
c0018cc2:	c3                   	ret    
c0018cc3:	90                   	nop

c0018cc4 <FAT::~FAT()>:
c0018cc4:	83 ec 0c             	sub    esp,0xc
c0018cc7:	83 ec 0c             	sub    esp,0xc
c0018cca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018cce:	e8 cd ff ff ff       	call   c0018ca0 <FAT::~FAT()>
c0018cd3:	83 c4 10             	add    esp,0x10
c0018cd6:	83 ec 08             	sub    esp,0x8
c0018cd9:	6a 08                	push   0x8
c0018cdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018cdf:	e8 34 1b ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018ce4:	83 c4 10             	add    esp,0x10
c0018ce7:	83 c4 0c             	add    esp,0xc
c0018cea:	c3                   	ret    
c0018ceb:	90                   	nop

c0018cec <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018cec:	83 ec 1c             	sub    esp,0x1c
c0018cef:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018cf6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018cfb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018cff:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018d06:	83 f8 ff             	cmp    eax,0xffffffff
c0018d09:	75 35                	jne    c0018d40 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018d0b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018d0f:	88 c2                	mov    dl,al
c0018d11:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d16:	01 d0                	add    eax,edx
c0018d18:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018d1c:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018d22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d26:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018d2d:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d32:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018d36:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018d3d:	eb 19                	jmp    c0018d58 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018d3f:	90                   	nop
c0018d40:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018d44:	88 c2                	mov    dl,al
c0018d46:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d4a:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018d51:	01 d0                	add    eax,edx
c0018d53:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018d57:	90                   	nop
c0018d58:	83 ec 04             	sub    esp,0x4
c0018d5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018d5f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018d63:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018d67:	50                   	push   eax
c0018d68:	e8 62 c2 fe ff       	call   c0004fcf <f_getlabel>
c0018d6d:	83 c4 10             	add    esp,0x10
c0018d70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d74:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018d79:	75 09                	jne    c0018d84 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018d7b:	b8 00 00 00 00       	mov    eax,0x0
c0018d80:	eb 0a                	jmp    c0018d8c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018d82:	66 90                	xchg   ax,ax
c0018d84:	b8 01 00 00 00       	mov    eax,0x1
c0018d89:	8d 76 00             	lea    esi,[esi+0x0]
c0018d8c:	83 c4 1c             	add    esp,0x1c
c0018d8f:	c3                   	ret    

c0018d90 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018d90:	57                   	push   edi
c0018d91:	83 ec 58             	sub    esp,0x58
c0018d94:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018d9c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018da0:	b8 00 00 00 00       	mov    eax,0x0
c0018da5:	b9 0f 00 00 00       	mov    ecx,0xf
c0018daa:	fc                   	cld    
c0018dab:	89 d7                	mov    edi,edx
c0018dad:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018daf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018db3:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018dba:	83 f8 ff             	cmp    eax,0xffffffff
c0018dbd:	75 35                	jne    c0018df4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0018dbf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018dc3:	88 c2                	mov    dl,al
c0018dc5:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018dca:	01 d0                	add    eax,edx
c0018dcc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018dd0:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018dd6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018dda:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018de1:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018de6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018dea:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018df1:	eb 19                	jmp    c0018e0c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0018df3:	90                   	nop
c0018df4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018df8:	88 c2                	mov    dl,al
c0018dfa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018dfe:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018e05:	01 d0                	add    eax,edx
c0018e07:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018e0b:	90                   	nop
c0018e0c:	83 ec 08             	sub    esp,0x8
c0018e0f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018e13:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e17:	50                   	push   eax
c0018e18:	e8 23 7a fe ff       	call   c0000840 <strcat>
c0018e1d:	83 c4 10             	add    esp,0x10
c0018e20:	83 ec 0c             	sub    esp,0xc
c0018e23:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e27:	50                   	push   eax
c0018e28:	e8 f3 c2 fe ff       	call   c0005120 <f_setlabel>
c0018e2d:	83 c4 10             	add    esp,0x10
c0018e30:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018e34:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018e39:	75 09                	jne    c0018e44 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0018e3b:	b8 00 00 00 00       	mov    eax,0x0
c0018e40:	eb 0a                	jmp    c0018e4c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0018e42:	66 90                	xchg   ax,ax
c0018e44:	b8 01 00 00 00       	mov    eax,0x1
c0018e49:	8d 76 00             	lea    esi,[esi+0x0]
c0018e4c:	83 c4 58             	add    esp,0x58
c0018e4f:	5f                   	pop    edi
c0018e50:	c3                   	ret    
c0018e51:	90                   	nop
c0018e52:	66 90                	xchg   ax,ax

c0018e54 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018e54:	83 ec 2c             	sub    esp,0x2c
c0018e57:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018e5f:	83 ec 08             	sub    esp,0x8
c0018e62:	68 64 2a 02 c0       	push   0xc0022a64
c0018e67:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018e6b:	e8 e0 78 fe ff       	call   c0000750 <strcmp>
c0018e70:	83 c4 10             	add    esp,0x10
c0018e73:	85 c0                	test   eax,eax
c0018e75:	0f 94 c0             	sete   al
c0018e78:	0f b6 c0             	movzx  eax,al
c0018e7b:	85 c0                	test   eax,eax
c0018e7d:	74 0d                	je     c0018e8c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018e7f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018e87:	e9 c0 00 00 00       	jmp    c0018f4c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018e8c:	83 ec 08             	sub    esp,0x8
c0018e8f:	68 56 2a 02 c0       	push   0xc0022a56
c0018e94:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018e98:	e8 b3 78 fe ff       	call   c0000750 <strcmp>
c0018e9d:	83 c4 10             	add    esp,0x10
c0018ea0:	85 c0                	test   eax,eax
c0018ea2:	0f 94 c0             	sete   al
c0018ea5:	0f b6 c0             	movzx  eax,al
c0018ea8:	85 c0                	test   eax,eax
c0018eaa:	74 10                	je     c0018ebc <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018eac:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018eb4:	e9 93 00 00 00       	jmp    c0018f4c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0018ebc:	83 ec 08             	sub    esp,0x8
c0018ebf:	68 5c 2a 02 c0       	push   0xc0022a5c
c0018ec4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018ec8:	e8 83 78 fe ff       	call   c0000750 <strcmp>
c0018ecd:	83 c4 10             	add    esp,0x10
c0018ed0:	85 c0                	test   eax,eax
c0018ed2:	0f 94 c0             	sete   al
c0018ed5:	0f b6 c0             	movzx  eax,al
c0018ed8:	85 c0                	test   eax,eax
c0018eda:	74 0c                	je     c0018ee8 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018edc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018ee4:	eb 66                	jmp    c0018f4c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018ee6:	66 90                	xchg   ax,ax
c0018ee8:	83 ec 08             	sub    esp,0x8
c0018eeb:	68 3c 02 02 c0       	push   0xc002023c
c0018ef0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018ef4:	e8 57 78 fe ff       	call   c0000750 <strcmp>
c0018ef9:	83 c4 10             	add    esp,0x10
c0018efc:	85 c0                	test   eax,eax
c0018efe:	0f 94 c0             	sete   al
c0018f01:	0f b6 c0             	movzx  eax,al
c0018f04:	85 c0                	test   eax,eax
c0018f06:	74 0c                	je     c0018f14 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018f08:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018f10:	eb 3a                	jmp    c0018f4c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018f12:	66 90                	xchg   ax,ax
c0018f14:	83 ec 08             	sub    esp,0x8
c0018f17:	68 62 2a 02 c0       	push   0xc0022a62
c0018f1c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018f20:	e8 2b 78 fe ff       	call   c0000750 <strcmp>
c0018f25:	83 c4 10             	add    esp,0x10
c0018f28:	85 c0                	test   eax,eax
c0018f2a:	0f 94 c0             	sete   al
c0018f2d:	0f b6 c0             	movzx  eax,al
c0018f30:	85 c0                	test   eax,eax
c0018f32:	74 0c                	je     c0018f40 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018f34:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018f3c:	eb 0e                	jmp    c0018f4c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018f3e:	66 90                	xchg   ax,ax
c0018f40:	b8 08 00 00 00       	mov    eax,0x8
c0018f45:	e9 ea 00 00 00       	jmp    c0019034 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018f4a:	66 90                	xchg   ax,ax
c0018f4c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018f53:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018f58:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018f5c:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018f63:	83 f8 ff             	cmp    eax,0xffffffff
c0018f66:	75 34                	jne    c0018f9c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018f68:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018f6c:	88 c2                	mov    dl,al
c0018f6e:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018f73:	01 d0                	add    eax,edx
c0018f75:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018f79:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018f7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018f83:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018f8a:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018f8f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018f93:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018f9a:	eb 18                	jmp    c0018fb4 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018f9c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018fa0:	88 c2                	mov    dl,al
c0018fa2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018fa6:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018fad:	01 d0                	add    eax,edx
c0018faf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018fb3:	90                   	nop
c0018fb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018fb8:	88 04 24             	mov    BYTE PTR [esp],al
c0018fbb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018fbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018fc3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018fcb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018fd0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018fd8:	83 ec 0c             	sub    esp,0xc
c0018fdb:	68 00 20 00 00       	push   0x2000
c0018fe0:	e8 d1 ea fe ff       	call   c0007ab6 <malloc>
c0018fe5:	83 c4 10             	add    esp,0x10
c0018fe8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018fec:	68 00 20 00 00       	push   0x2000
c0018ff1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ff5:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018ff9:	50                   	push   eax
c0018ffa:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018ffe:	50                   	push   eax
c0018fff:	e8 19 c4 fe ff       	call   c000541d <f_mkfs>
c0019004:	83 c4 10             	add    esp,0x10
c0019007:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001900b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019010:	75 0a                	jne    c001901c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019012:	b8 00 00 00 00       	mov    eax,0x0
c0019017:	eb 1b                	jmp    c0019034 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019019:	8d 76 00             	lea    esi,[esi+0x0]
c001901c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019021:	75 09                	jne    c001902c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019023:	b8 09 00 00 00       	mov    eax,0x9
c0019028:	eb 0a                	jmp    c0019034 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001902a:	66 90                	xchg   ax,ax
c001902c:	b8 01 00 00 00       	mov    eax,0x1
c0019031:	8d 76 00             	lea    esi,[esi+0x0]
c0019034:	83 c4 2c             	add    esp,0x2c
c0019037:	c3                   	ret    

c0019038 <FAT::tryMount(LogicalDisk*, int)>:
c0019038:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001903e:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0019043:	83 f8 14             	cmp    eax,0x14
c0019046:	75 18                	jne    c0019060 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019048:	83 ec 0c             	sub    esp,0xc
c001904b:	68 68 2a 02 c0       	push   0xc0022a68
c0019050:	e8 28 83 ff ff       	call   c001137d <KePanic(char const*)>
c0019055:	83 c4 10             	add    esp,0x10
c0019058:	b0 00                	mov    al,0x0
c001905a:	e9 ed 01 00 00       	jmp    c001924c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001905f:	90                   	nop
c0019060:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019067:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001906d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019073:	3d 00 02 00 00       	cmp    eax,0x200
c0019078:	74 0a                	je     c0019084 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001907a:	b0 00                	mov    al,0x0
c001907c:	e9 cb 01 00 00       	jmp    c001924c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019081:	8d 76 00             	lea    esi,[esi+0x0]
c0019084:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001908c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019093:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001909a:	83 f8 ff             	cmp    eax,0xffffffff
c001909d:	74 09                	je     c00190a8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001909f:	b0 01                	mov    al,0x1
c00190a1:	e9 a6 01 00 00       	jmp    c001924c <FAT::tryMount(LogicalDisk*, int)+0x214>
c00190a6:	66 90                	xchg   ax,ax
c00190a8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00190b2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00190ba:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00190c1:	88 c2                	mov    dl,al
c00190c3:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c00190c8:	01 d0                	add    eax,edx
c00190ca:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00190d1:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c00190d7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00190de:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c00190e5:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c00190ea:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00190f1:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c00190f8:	83 ec 0c             	sub    esp,0xc
c00190fb:	68 34 02 00 00       	push   0x234
c0019100:	e8 b1 e9 fe ff       	call   c0007ab6 <malloc>
c0019105:	83 c4 10             	add    esp,0x10
c0019108:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001910f:	83 ec 04             	sub    esp,0x4
c0019112:	6a 00                	push   0x0
c0019114:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001911b:	50                   	push   eax
c001911c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019123:	e8 d0 aa fe ff       	call   c0003bf8 <f_mount>
c0019128:	83 c4 10             	add    esp,0x10
c001912b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019132:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001913a:	74 1c                	je     c0019158 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001913c:	83 ec 0c             	sub    esp,0xc
c001913f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019146:	e8 8b e9 fe ff       	call   c0007ad6 <rfree>
c001914b:	83 c4 10             	add    esp,0x10
c001914e:	b0 00                	mov    al,0x0
c0019150:	e9 f7 00 00 00       	jmp    c001924c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019155:	8d 76 00             	lea    esi,[esi+0x0]
c0019158:	83 ec 04             	sub    esp,0x4
c001915b:	68 00 01 00 00       	push   0x100
c0019160:	6a 00                	push   0x0
c0019162:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019169:	50                   	push   eax
c001916a:	e8 81 73 fe ff       	call   c00004f0 <memset>
c001916f:	83 c4 10             	add    esp,0x10
c0019172:	83 ec 08             	sub    esp,0x8
c0019175:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001917c:	50                   	push   eax
c001917d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019184:	50                   	push   eax
c0019185:	e8 b6 76 fe ff       	call   c0000840 <strcat>
c001918a:	83 c4 10             	add    esp,0x10
c001918d:	83 ec 08             	sub    esp,0x8
c0019190:	68 76 2a 02 c0       	push   0xc0022a76
c0019195:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001919c:	50                   	push   eax
c001919d:	e8 9e 76 fe ff       	call   c0000840 <strcat>
c00191a2:	83 c4 10             	add    esp,0x10
c00191a5:	83 ec 04             	sub    esp,0x4
c00191a8:	6a 01                	push   0x1
c00191aa:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00191b1:	50                   	push   eax
c00191b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00191b6:	50                   	push   eax
c00191b7:	e8 9e aa fe ff       	call   c0003c5a <f_open>
c00191bc:	83 c4 10             	add    esp,0x10
c00191bf:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00191c6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00191cd:	85 c0                	test   eax,eax
c00191cf:	74 0b                	je     c00191dc <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00191d1:	78 31                	js     c0019204 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00191d3:	83 e8 04             	sub    eax,0x4
c00191d6:	83 f8 01             	cmp    eax,0x1
c00191d9:	77 29                	ja     c0019204 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00191db:	90                   	nop
c00191dc:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00191e4:	83 ec 0c             	sub    esp,0xc
c00191e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00191eb:	50                   	push   eax
c00191ec:	e8 38 b2 fe ff       	call   c0004429 <f_close>
c00191f1:	83 c4 10             	add    esp,0x10
c00191f4:	90                   	nop
c00191f5:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00191fd:	85 c0                	test   eax,eax
c00191ff:	74 43                	je     c0019244 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019201:	eb 31                	jmp    c0019234 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019203:	90                   	nop
c0019204:	83 ec 0c             	sub    esp,0xc
c0019207:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001920e:	e8 c3 e8 fe ff       	call   c0007ad6 <rfree>
c0019213:	83 c4 10             	add    esp,0x10
c0019216:	83 ec 04             	sub    esp,0x4
c0019219:	6a 00                	push   0x0
c001921b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019222:	50                   	push   eax
c0019223:	6a 00                	push   0x0
c0019225:	e8 ce a9 fe ff       	call   c0003bf8 <f_mount>
c001922a:	83 c4 10             	add    esp,0x10
c001922d:	b0 00                	mov    al,0x0
c001922f:	eb 1b                	jmp    c001924c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019231:	8d 76 00             	lea    esi,[esi+0x0]
c0019234:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0019239:	83 c0 01             	add    eax,0x1
c001923c:	a3 80 97 02 c0       	mov    ds:0xc0029780,eax
c0019241:	8d 76 00             	lea    esi,[esi+0x0]
c0019244:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001924b:	90                   	nop
c001924c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019252:	c3                   	ret    
c0019253:	90                   	nop

c0019254 <FAT::allocateSwapfile(char const*, int)>:
c0019254:	55                   	push   ebp
c0019255:	57                   	push   edi
c0019256:	56                   	push   esi
c0019257:	53                   	push   ebx
c0019258:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001925e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019269:	83 ec 0c             	sub    esp,0xc
c001926c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019273:	e8 3e e8 fe ff       	call   c0007ab6 <malloc>
c0019278:	83 c4 10             	add    esp,0x10
c001927b:	89 c7                	mov    edi,eax
c001927d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0019282:	83 ec 04             	sub    esp,0x4
c0019285:	50                   	push   eax
c0019286:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001928d:	57                   	push   edi
c001928e:	e8 43 26 ff ff       	call   c000b8d6 <File::File(char const*, Process*)>
c0019293:	83 c4 10             	add    esp,0x10
c0019296:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001929d:	83 ec 04             	sub    esp,0x4
c00192a0:	8d 44 24 13          	lea    eax,[esp+0x13]
c00192a4:	50                   	push   eax
c00192a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00192a9:	50                   	push   eax
c00192aa:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00192b1:	e8 40 29 ff ff       	call   c000bbf6 <File::stat(unsigned long long*, bool*)>
c00192b6:	83 c4 10             	add    esp,0x10
c00192b9:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00192c0:	c1 e0 14             	shl    eax,0x14
c00192c3:	89 c7                	mov    edi,eax
c00192c5:	89 c5                	mov    ebp,eax
c00192c7:	c1 fd 1f             	sar    ebp,0x1f
c00192ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00192d2:	89 f9                	mov    ecx,edi
c00192d4:	31 c1                	xor    ecx,eax
c00192d6:	89 cb                	mov    ebx,ecx
c00192d8:	89 e9                	mov    ecx,ebp
c00192da:	31 d1                	xor    ecx,edx
c00192dc:	89 ce                	mov    esi,ecx
c00192de:	89 f0                	mov    eax,esi
c00192e0:	09 d8                	or     eax,ebx
c00192e2:	0f 84 9c 00 00 00    	je     c0019384 <FAT::allocateSwapfile(char const*, int)+0x130>
c00192e8:	83 ec 0c             	sub    esp,0xc
c00192eb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00192f2:	e8 cb 27 ff ff       	call   c000bac2 <File::unlink()>
c00192f7:	83 c4 10             	add    esp,0x10
c00192fa:	83 ec 08             	sub    esp,0x8
c00192fd:	6a 12                	push   0x12
c00192ff:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019306:	e8 e9 25 ff ff       	call   c000b8f4 <File::open(FileOpenMode)>
c001930b:	83 c4 10             	add    esp,0x10
c001930e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019315:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001931b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019322:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019329:	c1 e0 14             	shl    eax,0x14
c001932c:	83 ec 04             	sub    esp,0x4
c001932f:	6a 01                	push   0x1
c0019331:	50                   	push   eax
c0019332:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019339:	e8 72 bf fe ff       	call   c00052b0 <f_expand>
c001933e:	83 c4 10             	add    esp,0x10
c0019341:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019348:	8b 00                	mov    eax,DWORD PTR [eax]
c001934a:	83 c0 10             	add    eax,0x10
c001934d:	8b 00                	mov    eax,DWORD PTR [eax]
c001934f:	83 ec 0c             	sub    esp,0xc
c0019352:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019356:	52                   	push   edx
c0019357:	8d 54 24 30          	lea    edx,[esp+0x30]
c001935b:	52                   	push   edx
c001935c:	6a 00                	push   0x0
c001935e:	68 00 04 00 00       	push   0x400
c0019363:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001936a:	ff d0                	call   eax
c001936c:	83 c4 20             	add    esp,0x20
c001936f:	83 ec 0c             	sub    esp,0xc
c0019372:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019379:	e8 d4 25 ff ff       	call   c000b952 <File::close()>
c001937e:	83 c4 10             	add    esp,0x10
c0019381:	8d 76 00             	lea    esi,[esi+0x0]
c0019384:	83 ec 08             	sub    esp,0x8
c0019387:	6a 01                	push   0x1
c0019389:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019390:	e8 5f 25 ff ff       	call   c000b8f4 <File::open(FileOpenMode)>
c0019395:	83 c4 10             	add    esp,0x10
c0019398:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001939f:	8b 00                	mov    eax,DWORD PTR [eax]
c00193a1:	83 c0 0c             	add    eax,0xc
c00193a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00193a6:	83 ec 0c             	sub    esp,0xc
c00193a9:	8d 54 24 24          	lea    edx,[esp+0x24]
c00193ad:	52                   	push   edx
c00193ae:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00193b2:	52                   	push   edx
c00193b3:	6a 00                	push   0x0
c00193b5:	6a 04                	push   0x4
c00193b7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00193be:	ff d0                	call   eax
c00193c0:	83 c4 20             	add    esp,0x20
c00193c3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00193ca:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00193d0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00193d7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00193de:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00193e1:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00193e8:	83 ec 0c             	sub    esp,0xc
c00193eb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00193f2:	e8 5b 25 ff ff       	call   c000b952 <File::close()>
c00193f7:	83 c4 10             	add    esp,0x10
c00193fa:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019401:	ba 00 00 00 00       	mov    edx,0x0
c0019406:	81 c4 3c 04 00 00    	add    esp,0x43c
c001940c:	5b                   	pop    ebx
c001940d:	5e                   	pop    esi
c001940e:	5f                   	pop    edi
c001940f:	5d                   	pop    ebp
c0019410:	c3                   	ret    
c0019411:	90                   	nop
c0019412:	66 90                	xchg   ax,ax

c0019414 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019414:	57                   	push   edi
c0019415:	56                   	push   esi
c0019416:	53                   	push   ebx
c0019417:	81 ec 50 02 00 00    	sub    esp,0x250
c001941d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019425:	74 0d                	je     c0019434 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019427:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001942f:	75 0f                	jne    c0019440 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019431:	8d 76 00             	lea    esi,[esi+0x0]
c0019434:	b8 04 00 00 00       	mov    eax,0x4
c0019439:	e9 3a 01 00 00       	jmp    c0019578 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001943e:	66 90                	xchg   ax,ax
c0019440:	83 ec 08             	sub    esp,0x8
c0019443:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001944a:	50                   	push   eax
c001944b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019452:	e8 9f b2 fe ff       	call   c00046f6 <f_readdir>
c0019457:	83 c4 10             	add    esp,0x10
c001945a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019461:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019468:	83 ec 0c             	sub    esp,0xc
c001946b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019472:	83 c0 16             	add    eax,0x16
c0019475:	50                   	push   eax
c0019476:	e8 f5 70 fe ff       	call   c0000570 <strlen>
c001947b:	83 c4 10             	add    esp,0x10
c001947e:	ba 00 00 00 00       	mov    edx,0x0
c0019483:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019487:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001948b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019492:	0f b6 c0             	movzx  eax,al
c0019495:	83 e0 10             	and    eax,0x10
c0019498:	74 0a                	je     c00194a4 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001949a:	b8 02 00 00 00       	mov    eax,0x2
c001949f:	eb 0b                	jmp    c00194ac <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00194a1:	8d 76 00             	lea    esi,[esi+0x0]
c00194a4:	b8 01 00 00 00       	mov    eax,0x1
c00194a9:	8d 76 00             	lea    esi,[esi+0x0]
c00194ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00194b0:	83 ec 08             	sub    esp,0x8
c00194b3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00194ba:	83 c0 16             	add    eax,0x16
c00194bd:	50                   	push   eax
c00194be:	8d 44 24 14          	lea    eax,[esp+0x14]
c00194c2:	83 c0 10             	add    eax,0x10
c00194c5:	50                   	push   eax
c00194c6:	e8 75 71 fe ff       	call   c0000640 <strcpy>
c00194cb:	83 c4 10             	add    esp,0x10
c00194ce:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00194d5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00194dc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00194e0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00194e7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00194ee:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00194f5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00194fc:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019503:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001950a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019511:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019518:	89 c6                	mov    esi,eax
c001951a:	89 d7                	mov    edi,edx
c001951c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001951e:	89 c8                	mov    eax,ecx
c0019520:	89 fa                	mov    edx,edi
c0019522:	89 f3                	mov    ebx,esi
c0019524:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001952b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019532:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019539:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019540:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019546:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001954d:	0f be c0             	movsx  eax,al
c0019550:	85 c0                	test   eax,eax
c0019552:	75 08                	jne    c001955c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019554:	b8 07 00 00 00       	mov    eax,0x7
c0019559:	eb 1d                	jmp    c0019578 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001955b:	90                   	nop
c001955c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019563:	85 c0                	test   eax,eax
c0019565:	75 09                	jne    c0019570 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019567:	b8 00 00 00 00       	mov    eax,0x0
c001956c:	eb 0a                	jmp    c0019578 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001956e:	66 90                	xchg   ax,ax
c0019570:	b8 01 00 00 00       	mov    eax,0x1
c0019575:	8d 76 00             	lea    esi,[esi+0x0]
c0019578:	81 c4 50 02 00 00    	add    esp,0x250
c001957e:	5b                   	pop    ebx
c001957f:	5e                   	pop    esi
c0019580:	5f                   	pop    edi
c0019581:	c3                   	ret    
c0019582:	66 90                	xchg   ax,ax

c0019584 <FAT::read(void*, unsigned long, void*, int*)>:
c0019584:	83 ec 1c             	sub    esp,0x1c
c0019587:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001958c:	74 0a                	je     c0019598 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001958e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019593:	75 0b                	jne    c00195a0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019595:	8d 76 00             	lea    esi,[esi+0x0]
c0019598:	b8 04 00 00 00       	mov    eax,0x4
c001959d:	eb 41                	jmp    c00195e0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001959f:	90                   	nop
c00195a0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00195a4:	50                   	push   eax
c00195a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00195a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00195ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195b1:	e8 67 a9 fe ff       	call   c0003f1d <f_read>
c00195b6:	83 c4 10             	add    esp,0x10
c00195b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00195c1:	89 c2                	mov    edx,eax
c00195c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00195c7:	89 10                	mov    DWORD PTR [eax],edx
c00195c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195cd:	85 c0                	test   eax,eax
c00195cf:	75 07                	jne    c00195d8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00195d1:	b8 00 00 00 00       	mov    eax,0x0
c00195d6:	eb 08                	jmp    c00195e0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00195d8:	b8 01 00 00 00       	mov    eax,0x1
c00195dd:	8d 76 00             	lea    esi,[esi+0x0]
c00195e0:	83 c4 1c             	add    esp,0x1c
c00195e3:	c3                   	ret    

c00195e4 <FAT::write(void*, unsigned long, void*, int*)>:
c00195e4:	83 ec 1c             	sub    esp,0x1c
c00195e7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00195ec:	74 0a                	je     c00195f8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00195ee:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00195f3:	75 0b                	jne    c0019600 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00195f5:	8d 76 00             	lea    esi,[esi+0x0]
c00195f8:	b8 04 00 00 00       	mov    eax,0x4
c00195fd:	eb 41                	jmp    c0019640 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00195ff:	90                   	nop
c0019600:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019604:	50                   	push   eax
c0019605:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019609:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001960d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019611:	e8 06 ab fe ff       	call   c000411c <f_write>
c0019616:	83 c4 10             	add    esp,0x10
c0019619:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001961d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019621:	89 c2                	mov    edx,eax
c0019623:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019627:	89 10                	mov    DWORD PTR [eax],edx
c0019629:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001962d:	85 c0                	test   eax,eax
c001962f:	75 07                	jne    c0019638 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019631:	b8 00 00 00 00       	mov    eax,0x0
c0019636:	eb 08                	jmp    c0019640 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019638:	b8 01 00 00 00       	mov    eax,0x1
c001963d:	8d 76 00             	lea    esi,[esi+0x0]
c0019640:	83 c4 1c             	add    esp,0x1c
c0019643:	c3                   	ret    

c0019644 <FAT::close(void*)>:
c0019644:	83 ec 1c             	sub    esp,0x1c
c0019647:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001964c:	75 0a                	jne    c0019658 <FAT::close(void*)+0x14>
c001964e:	b8 04 00 00 00       	mov    eax,0x4
c0019653:	eb 3f                	jmp    c0019694 <FAT::close(void*)+0x50>
c0019655:	8d 76 00             	lea    esi,[esi+0x0]
c0019658:	83 ec 0c             	sub    esp,0xc
c001965b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001965f:	e8 c5 ad fe ff       	call   c0004429 <f_close>
c0019664:	83 c4 10             	add    esp,0x10
c0019667:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001966b:	83 ec 0c             	sub    esp,0xc
c001966e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019672:	e8 4f e4 fe ff       	call   c0007ac6 <free>
c0019677:	83 c4 10             	add    esp,0x10
c001967a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001967e:	85 c0                	test   eax,eax
c0019680:	75 0a                	jne    c001968c <FAT::close(void*)+0x48>
c0019682:	b8 00 00 00 00       	mov    eax,0x0
c0019687:	eb 0b                	jmp    c0019694 <FAT::close(void*)+0x50>
c0019689:	8d 76 00             	lea    esi,[esi+0x0]
c001968c:	b8 01 00 00 00       	mov    eax,0x1
c0019691:	8d 76 00             	lea    esi,[esi+0x0]
c0019694:	83 c4 1c             	add    esp,0x1c
c0019697:	c3                   	ret    

c0019698 <FAT::closeDir(void*)>:
c0019698:	83 ec 1c             	sub    esp,0x1c
c001969b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00196a0:	75 0a                	jne    c00196ac <FAT::closeDir(void*)+0x14>
c00196a2:	b8 04 00 00 00       	mov    eax,0x4
c00196a7:	eb 3f                	jmp    c00196e8 <FAT::closeDir(void*)+0x50>
c00196a9:	8d 76 00             	lea    esi,[esi+0x0]
c00196ac:	83 ec 0c             	sub    esp,0xc
c00196af:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196b3:	e8 1c b0 fe ff       	call   c00046d4 <f_closedir>
c00196b8:	83 c4 10             	add    esp,0x10
c00196bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00196bf:	83 ec 0c             	sub    esp,0xc
c00196c2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196c6:	e8 fb e3 fe ff       	call   c0007ac6 <free>
c00196cb:	83 c4 10             	add    esp,0x10
c00196ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00196d2:	85 c0                	test   eax,eax
c00196d4:	75 0a                	jne    c00196e0 <FAT::closeDir(void*)+0x48>
c00196d6:	b8 00 00 00 00       	mov    eax,0x0
c00196db:	eb 0b                	jmp    c00196e8 <FAT::closeDir(void*)+0x50>
c00196dd:	8d 76 00             	lea    esi,[esi+0x0]
c00196e0:	b8 01 00 00 00       	mov    eax,0x1
c00196e5:	8d 76 00             	lea    esi,[esi+0x0]
c00196e8:	83 c4 1c             	add    esp,0x1c
c00196eb:	c3                   	ret    

c00196ec <FAT::truncate(void*, unsigned long long)>:
c00196ec:	83 ec 2c             	sub    esp,0x2c
c00196ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00196f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00196f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00196fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00196ff:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019704:	75 0a                	jne    c0019710 <FAT::truncate(void*, unsigned long long)+0x24>
c0019706:	b8 04 00 00 00       	mov    eax,0x4
c001970b:	eb 47                	jmp    c0019754 <FAT::truncate(void*, unsigned long long)+0x68>
c001970d:	8d 76 00             	lea    esi,[esi+0x0]
c0019710:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019714:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019717:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001971b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019723:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019727:	83 ec 08             	sub    esp,0x8
c001972a:	50                   	push   eax
c001972b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001972f:	e8 24 ad fe ff       	call   c0004458 <f_lseek>
c0019734:	83 c4 10             	add    esp,0x10
c0019737:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001973b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001973f:	85 c0                	test   eax,eax
c0019741:	75 09                	jne    c001974c <FAT::truncate(void*, unsigned long long)+0x60>
c0019743:	b8 00 00 00 00       	mov    eax,0x0
c0019748:	eb 0a                	jmp    c0019754 <FAT::truncate(void*, unsigned long long)+0x68>
c001974a:	66 90                	xchg   ax,ax
c001974c:	b8 01 00 00 00       	mov    eax,0x1
c0019751:	8d 76 00             	lea    esi,[esi+0x0]
c0019754:	83 c4 2c             	add    esp,0x2c
c0019757:	c3                   	ret    

c0019758 <FAT::seek(void*, unsigned long long)>:
c0019758:	83 ec 2c             	sub    esp,0x2c
c001975b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001975f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019763:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019767:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001976b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019770:	75 0a                	jne    c001977c <FAT::seek(void*, unsigned long long)+0x24>
c0019772:	b8 04 00 00 00       	mov    eax,0x4
c0019777:	eb 33                	jmp    c00197ac <FAT::seek(void*, unsigned long long)+0x54>
c0019779:	8d 76 00             	lea    esi,[esi+0x0]
c001977c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019780:	83 ec 08             	sub    esp,0x8
c0019783:	50                   	push   eax
c0019784:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019788:	e8 cb ac fe ff       	call   c0004458 <f_lseek>
c001978d:	83 c4 10             	add    esp,0x10
c0019790:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019794:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019798:	85 c0                	test   eax,eax
c001979a:	75 08                	jne    c00197a4 <FAT::seek(void*, unsigned long long)+0x4c>
c001979c:	b8 00 00 00 00       	mov    eax,0x0
c00197a1:	eb 09                	jmp    c00197ac <FAT::seek(void*, unsigned long long)+0x54>
c00197a3:	90                   	nop
c00197a4:	b8 01 00 00 00       	mov    eax,0x1
c00197a9:	8d 76 00             	lea    esi,[esi+0x0]
c00197ac:	83 c4 2c             	add    esp,0x2c
c00197af:	c3                   	ret    

c00197b0 <fatWrapperReadDisk>:
c00197b0:	53                   	push   ebx
c00197b1:	83 ec 18             	sub    esp,0x18
c00197b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00197bc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00197c1:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c00197c8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00197cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00197d0:	ba 00 00 00 00       	mov    edx,0x0
c00197d5:	83 ec 0c             	sub    esp,0xc
c00197d8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197dc:	53                   	push   ebx
c00197dd:	52                   	push   edx
c00197de:	50                   	push   eax
c00197df:	51                   	push   ecx
c00197e0:	e8 4b 43 ff ff       	call   c000db30 <LogicalDisk::read(unsigned long long, int, void*)>
c00197e5:	83 c4 20             	add    esp,0x20
c00197e8:	83 c4 18             	add    esp,0x18
c00197eb:	5b                   	pop    ebx
c00197ec:	c3                   	ret    
c00197ed:	8d 76 00             	lea    esi,[esi+0x0]

c00197f0 <fatWrapperWriteDisk>:
c00197f0:	53                   	push   ebx
c00197f1:	83 ec 18             	sub    esp,0x18
c00197f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197f8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00197fc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019801:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019808:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001980c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019810:	ba 00 00 00 00       	mov    edx,0x0
c0019815:	83 ec 0c             	sub    esp,0xc
c0019818:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001981c:	53                   	push   ebx
c001981d:	52                   	push   edx
c001981e:	50                   	push   eax
c001981f:	51                   	push   ecx
c0019820:	e8 77 43 ff ff       	call   c000db9c <LogicalDisk::write(unsigned long long, int, void*)>
c0019825:	83 c4 20             	add    esp,0x20
c0019828:	83 c4 18             	add    esp,0x18
c001982b:	5b                   	pop    ebx
c001982c:	c3                   	ret    
c001982d:	8d 76 00             	lea    esi,[esi+0x0]

c0019830 <fatWrapperIoctl>:
c0019830:	53                   	push   ebx
c0019831:	83 ec 28             	sub    esp,0x28
c0019834:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019838:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001983c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019840:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019844:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019849:	83 f8 02             	cmp    eax,0x2
c001984c:	75 32                	jne    c0019880 <fatWrapperIoctl+0x50>
c001984e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019852:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019856:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001985b:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0019862:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019868:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001986e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019872:	66 89 02             	mov    WORD PTR [edx],ax
c0019875:	b8 00 00 00 00       	mov    eax,0x0
c001987a:	e9 c5 00 00 00       	jmp    c0019944 <fatWrapperIoctl+0x114>
c001987f:	90                   	nop
c0019880:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019885:	83 f8 01             	cmp    eax,0x1
c0019888:	75 6a                	jne    c00198f4 <fatWrapperIoctl+0xc4>
c001988a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001988e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019892:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019897:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c001989e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00198a4:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00198aa:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00198b0:	89 c8                	mov    eax,ecx
c00198b2:	89 da                	mov    edx,ebx
c00198b4:	0f a4 c2 0a          	shld   edx,eax,0xa
c00198b8:	c1 e0 0a             	shl    eax,0xa
c00198bb:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00198c0:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c00198c7:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00198cd:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00198d3:	89 cb                	mov    ebx,ecx
c00198d5:	c1 fb 1f             	sar    ebx,0x1f
c00198d8:	53                   	push   ebx
c00198d9:	51                   	push   ecx
c00198da:	52                   	push   edx
c00198db:	50                   	push   eax
c00198dc:	e8 6f 5b 00 00       	call   c001f450 <__udivdi3>
c00198e1:	83 c4 10             	add    esp,0x10
c00198e4:	89 c2                	mov    edx,eax
c00198e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00198ea:	89 10                	mov    DWORD PTR [eax],edx
c00198ec:	b8 00 00 00 00       	mov    eax,0x0
c00198f1:	eb 51                	jmp    c0019944 <fatWrapperIoctl+0x114>
c00198f3:	90                   	nop
c00198f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00198f9:	85 c0                	test   eax,eax
c00198fb:	75 07                	jne    c0019904 <fatWrapperIoctl+0xd4>
c00198fd:	b8 00 00 00 00       	mov    eax,0x0
c0019902:	eb 40                	jmp    c0019944 <fatWrapperIoctl+0x114>
c0019904:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019909:	83 f8 03             	cmp    eax,0x3
c001990c:	75 1a                	jne    c0019928 <fatWrapperIoctl+0xf8>
c001990e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019912:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019916:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001991a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019920:	b8 00 00 00 00       	mov    eax,0x0
c0019925:	eb 1d                	jmp    c0019944 <fatWrapperIoctl+0x114>
c0019927:	90                   	nop
c0019928:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001992d:	83 f8 04             	cmp    eax,0x4
c0019930:	75 0a                	jne    c001993c <fatWrapperIoctl+0x10c>
c0019932:	b8 00 00 00 00       	mov    eax,0x0
c0019937:	eb 0b                	jmp    c0019944 <fatWrapperIoctl+0x114>
c0019939:	8d 76 00             	lea    esi,[esi+0x0]
c001993c:	b8 04 00 00 00       	mov    eax,0x4
c0019941:	8d 76 00             	lea    esi,[esi+0x0]
c0019944:	83 c4 28             	add    esp,0x28
c0019947:	5b                   	pop    ebx
c0019948:	c3                   	ret    
c0019949:	90                   	nop
c001994a:	66 90                	xchg   ax,ax

c001994c <FAT::FAT()>:
c001994c:	83 ec 1c             	sub    esp,0x1c
c001994f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019953:	83 ec 0c             	sub    esp,0xc
c0019956:	50                   	push   eax
c0019957:	e8 e8 1b ff ff       	call   c000b544 <Filesystem::Filesystem()>
c001995c:	83 c4 10             	add    esp,0x10
c001995f:	ba 8c 2a 02 c0       	mov    edx,0xc0022a8c
c0019964:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019968:	89 10                	mov    DWORD PTR [eax],edx
c001996a:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c0019974:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001997c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019981:	7f 19                	jg     c001999c <FAT::FAT()+0x50>
c0019983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019987:	c7 04 85 a0 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6860],0xffffffff
c0019992:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019997:	eb e3                	jmp    c001997c <FAT::FAT()+0x30>
c0019999:	8d 76 00             	lea    esi,[esi+0x0]
c001999c:	90                   	nop
c001999d:	83 c4 1c             	add    esp,0x1c
c00199a0:	c3                   	ret    
c00199a1:	90                   	nop
c00199a2:	66 90                	xchg   ax,ax

c00199a4 <FAT::fixFilepath(char*)>:
c00199a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199a8:	8a 00                	mov    al,BYTE PTR [eax]
c00199aa:	0f be c0             	movsx  eax,al
c00199ad:	83 f8 40             	cmp    eax,0x40
c00199b0:	7e 2e                	jle    c00199e0 <FAT::fixFilepath(char*)+0x3c>
c00199b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199b6:	8a 00                	mov    al,BYTE PTR [eax]
c00199b8:	83 e8 41             	sub    eax,0x41
c00199bb:	88 c2                	mov    dl,al
c00199bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199c1:	88 10                	mov    BYTE PTR [eax],dl
c00199c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199c7:	8a 00                	mov    al,BYTE PTR [eax]
c00199c9:	0f be c0             	movsx  eax,al
c00199cc:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c00199d3:	83 c0 30             	add    eax,0x30
c00199d6:	88 c2                	mov    dl,al
c00199d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199dc:	88 10                	mov    BYTE PTR [eax],dl
c00199de:	66 90                	xchg   ax,ax
c00199e0:	90                   	nop
c00199e1:	c3                   	ret    
c00199e2:	66 90                	xchg   ax,ax

c00199e4 <FAT::open(char const*, void**, FileOpenMode)>:
c00199e4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00199ea:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00199f2:	74 0c                	je     c0019a00 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00199f4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00199fc:	75 0e                	jne    c0019a0c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00199fe:	66 90                	xchg   ax,ax
c0019a00:	b8 04 00 00 00       	mov    eax,0x4
c0019a05:	e9 46 01 00 00       	jmp    c0019b50 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019a0a:	66 90                	xchg   ax,ax
c0019a0c:	83 ec 08             	sub    esp,0x8
c0019a0f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a16:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a1a:	50                   	push   eax
c0019a1b:	e8 20 6c fe ff       	call   c0000640 <strcpy>
c0019a20:	83 c4 10             	add    esp,0x10
c0019a23:	83 ec 08             	sub    esp,0x8
c0019a26:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019a2a:	50                   	push   eax
c0019a2b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a32:	e8 6d ff ff ff       	call   c00199a4 <FAT::fixFilepath(char*)>
c0019a37:	83 c4 10             	add    esp,0x10
c0019a3a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019a42:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019a49:	83 e0 01             	and    eax,0x1
c0019a4c:	74 12                	je     c0019a60 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019a4e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019a55:	83 c8 01             	or     eax,0x1
c0019a58:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019a5f:	90                   	nop
c0019a60:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019a67:	83 e0 04             	and    eax,0x4
c0019a6a:	74 24                	je     c0019a90 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019a6c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019a73:	83 c8 30             	or     eax,0x30
c0019a76:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019a7d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019a84:	83 c8 02             	or     eax,0x2
c0019a87:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019a8e:	66 90                	xchg   ax,ax
c0019a90:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019a97:	83 e0 02             	and    eax,0x2
c0019a9a:	74 14                	je     c0019ab0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019a9c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019aa3:	83 c8 02             	or     eax,0x2
c0019aa6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019aad:	8d 76 00             	lea    esi,[esi+0x0]
c0019ab0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019ab7:	83 e0 08             	and    eax,0x8
c0019aba:	74 14                	je     c0019ad0 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019abc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019ac3:	83 c8 04             	or     eax,0x4
c0019ac6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019acd:	8d 76 00             	lea    esi,[esi+0x0]
c0019ad0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019ad7:	83 e0 10             	and    eax,0x10
c0019ada:	74 14                	je     c0019af0 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019adc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019ae3:	83 c8 08             	or     eax,0x8
c0019ae6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019aed:	8d 76 00             	lea    esi,[esi+0x0]
c0019af0:	83 ec 0c             	sub    esp,0xc
c0019af3:	68 28 02 00 00       	push   0x228
c0019af8:	e8 b9 df fe ff       	call   c0007ab6 <malloc>
c0019afd:	83 c4 10             	add    esp,0x10
c0019b00:	89 c2                	mov    edx,eax
c0019b02:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019b09:	89 10                	mov    DWORD PTR [eax],edx
c0019b0b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019b13:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019b1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b1c:	83 ec 04             	sub    esp,0x4
c0019b1f:	52                   	push   edx
c0019b20:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019b24:	52                   	push   edx
c0019b25:	50                   	push   eax
c0019b26:	e8 2f a1 fe ff       	call   c0003c5a <f_open>
c0019b2b:	83 c4 10             	add    esp,0x10
c0019b2e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019b35:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019b3d:	74 09                	je     c0019b48 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019b3f:	b8 01 00 00 00       	mov    eax,0x1
c0019b44:	eb 0a                	jmp    c0019b50 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019b46:	66 90                	xchg   ax,ax
c0019b48:	b8 00 00 00 00       	mov    eax,0x0
c0019b4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019b50:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019b56:	c3                   	ret    
c0019b57:	90                   	nop

c0019b58 <FAT::openDir(char const*, void**)>:
c0019b58:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019b5e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019b66:	74 0c                	je     c0019b74 <FAT::openDir(char const*, void**)+0x1c>
c0019b68:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019b70:	75 0e                	jne    c0019b80 <FAT::openDir(char const*, void**)+0x28>
c0019b72:	66 90                	xchg   ax,ax
c0019b74:	b8 04 00 00 00       	mov    eax,0x4
c0019b79:	e9 82 00 00 00       	jmp    c0019c00 <FAT::openDir(char const*, void**)+0xa8>
c0019b7e:	66 90                	xchg   ax,ax
c0019b80:	83 ec 08             	sub    esp,0x8
c0019b83:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b8a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b8e:	50                   	push   eax
c0019b8f:	e8 ac 6a fe ff       	call   c0000640 <strcpy>
c0019b94:	83 c4 10             	add    esp,0x10
c0019b97:	83 ec 08             	sub    esp,0x8
c0019b9a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019b9e:	50                   	push   eax
c0019b9f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ba6:	e8 f9 fd ff ff       	call   c00199a4 <FAT::fixFilepath(char*)>
c0019bab:	83 c4 10             	add    esp,0x10
c0019bae:	83 ec 0c             	sub    esp,0xc
c0019bb1:	6a 30                	push   0x30
c0019bb3:	e8 fe de fe ff       	call   c0007ab6 <malloc>
c0019bb8:	83 c4 10             	add    esp,0x10
c0019bbb:	89 c2                	mov    edx,eax
c0019bbd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019bc4:	89 10                	mov    DWORD PTR [eax],edx
c0019bc6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019bcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0019bcf:	83 ec 08             	sub    esp,0x8
c0019bd2:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019bd6:	52                   	push   edx
c0019bd7:	50                   	push   eax
c0019bd8:	e8 2c aa fe ff       	call   c0004609 <f_opendir>
c0019bdd:	83 c4 10             	add    esp,0x10
c0019be0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019be7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019bef:	74 07                	je     c0019bf8 <FAT::openDir(char const*, void**)+0xa0>
c0019bf1:	b8 01 00 00 00       	mov    eax,0x1
c0019bf6:	eb 08                	jmp    c0019c00 <FAT::openDir(char const*, void**)+0xa8>
c0019bf8:	b8 00 00 00 00       	mov    eax,0x0
c0019bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0019c00:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019c06:	c3                   	ret    
c0019c07:	90                   	nop

c0019c08 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019c08:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019c0e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019c16:	75 0c                	jne    c0019c24 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019c18:	b8 04 00 00 00       	mov    eax,0x4
c0019c1d:	e9 d6 00 00 00       	jmp    c0019cf8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019c22:	66 90                	xchg   ax,ax
c0019c24:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019c2c:	75 0a                	jne    c0019c38 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019c2e:	b8 04 00 00 00       	mov    eax,0x4
c0019c33:	e9 c0 00 00 00       	jmp    c0019cf8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019c38:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019c40:	75 0a                	jne    c0019c4c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019c42:	b8 04 00 00 00       	mov    eax,0x4
c0019c47:	e9 ac 00 00 00       	jmp    c0019cf8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019c4c:	83 ec 08             	sub    esp,0x8
c0019c4f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019c56:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019c5d:	50                   	push   eax
c0019c5e:	e8 dd 69 fe ff       	call   c0000640 <strcpy>
c0019c63:	83 c4 10             	add    esp,0x10
c0019c66:	83 ec 08             	sub    esp,0x8
c0019c69:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019c70:	50                   	push   eax
c0019c71:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019c78:	e8 27 fd ff ff       	call   c00199a4 <FAT::fixFilepath(char*)>
c0019c7d:	83 c4 10             	add    esp,0x10
c0019c80:	83 ec 08             	sub    esp,0x8
c0019c83:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019c87:	50                   	push   eax
c0019c88:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019c8f:	50                   	push   eax
c0019c90:	e8 f3 aa fe ff       	call   c0004788 <f_stat>
c0019c95:	83 c4 10             	add    esp,0x10
c0019c98:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019c9f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019ca6:	85 c0                	test   eax,eax
c0019ca8:	74 0a                	je     c0019cb4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019caa:	83 f8 04             	cmp    eax,0x4
c0019cad:	74 39                	je     c0019ce8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019caf:	eb 3f                	jmp    c0019cf0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0019cb4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019cb8:	0f b6 c0             	movzx  eax,al
c0019cbb:	83 e0 10             	and    eax,0x10
c0019cbe:	0f 95 c2             	setne  dl
c0019cc1:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019cc8:	88 10                	mov    BYTE PTR [eax],dl
c0019cca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cce:	ba 00 00 00 00       	mov    edx,0x0
c0019cd3:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019cda:	89 01                	mov    DWORD PTR [ecx],eax
c0019cdc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019cdf:	b8 00 00 00 00       	mov    eax,0x0
c0019ce4:	eb 12                	jmp    c0019cf8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ce6:	66 90                	xchg   ax,ax
c0019ce8:	b8 02 00 00 00       	mov    eax,0x2
c0019ced:	eb 09                	jmp    c0019cf8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019cef:	90                   	nop
c0019cf0:	b8 01 00 00 00       	mov    eax,0x1
c0019cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0019cf8:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019cfe:	c3                   	ret    
c0019cff:	90                   	nop

c0019d00 <FAT::unlink(char const*)>:
c0019d00:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d06:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d0e:	75 08                	jne    c0019d18 <FAT::unlink(char const*)+0x18>
c0019d10:	b8 04 00 00 00       	mov    eax,0x4
c0019d15:	eb 61                	jmp    c0019d78 <FAT::unlink(char const*)+0x78>
c0019d17:	90                   	nop
c0019d18:	83 ec 08             	sub    esp,0x8
c0019d1b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d22:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d26:	50                   	push   eax
c0019d27:	e8 14 69 fe ff       	call   c0000640 <strcpy>
c0019d2c:	83 c4 10             	add    esp,0x10
c0019d2f:	83 ec 08             	sub    esp,0x8
c0019d32:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d36:	50                   	push   eax
c0019d37:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d3e:	e8 61 fc ff ff       	call   c00199a4 <FAT::fixFilepath(char*)>
c0019d43:	83 c4 10             	add    esp,0x10
c0019d46:	83 ec 0c             	sub    esp,0xc
c0019d49:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d4d:	50                   	push   eax
c0019d4e:	e8 a7 ac fe ff       	call   c00049fa <f_unlink>
c0019d53:	83 c4 10             	add    esp,0x10
c0019d56:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019d5d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019d64:	85 c0                	test   eax,eax
c0019d66:	75 08                	jne    c0019d70 <FAT::unlink(char const*)+0x70>
c0019d68:	b8 00 00 00 00       	mov    eax,0x0
c0019d6d:	eb 09                	jmp    c0019d78 <FAT::unlink(char const*)+0x78>
c0019d6f:	90                   	nop
c0019d70:	b8 01 00 00 00       	mov    eax,0x1
c0019d75:	8d 76 00             	lea    esi,[esi+0x0]
c0019d78:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019d7e:	c3                   	ret    
c0019d7f:	90                   	nop

c0019d80 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019d80:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019d86:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019d8d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019d94:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019d98:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019d9c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019da4:	75 0a                	jne    c0019db0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019da6:	b8 04 00 00 00       	mov    eax,0x4
c0019dab:	e9 7c 01 00 00       	jmp    c0019f2c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019db0:	83 ec 08             	sub    esp,0x8
c0019db3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019dba:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019dbe:	50                   	push   eax
c0019dbf:	e8 7c 68 fe ff       	call   c0000640 <strcpy>
c0019dc4:	83 c4 10             	add    esp,0x10
c0019dc7:	83 ec 08             	sub    esp,0x8
c0019dca:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019dce:	50                   	push   eax
c0019dcf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019dd6:	e8 c9 fb ff ff       	call   c00199a4 <FAT::fixFilepath(char*)>
c0019ddb:	83 c4 10             	add    esp,0x10
c0019dde:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019de6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019dee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019df3:	83 e0 01             	and    eax,0x1
c0019df6:	74 14                	je     c0019e0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0019df8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019dff:	83 c8 01             	or     eax,0x1
c0019e02:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019e09:	8d 76 00             	lea    esi,[esi+0x0]
c0019e0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019e11:	83 e0 02             	and    eax,0x2
c0019e14:	74 12                	je     c0019e28 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0019e16:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019e1d:	83 c8 20             	or     eax,0x20
c0019e20:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019e27:	90                   	nop
c0019e28:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019e2d:	83 e0 04             	and    eax,0x4
c0019e30:	74 12                	je     c0019e44 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0019e32:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019e39:	83 c8 04             	or     eax,0x4
c0019e3c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019e43:	90                   	nop
c0019e44:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019e49:	83 e0 08             	and    eax,0x8
c0019e4c:	74 12                	je     c0019e60 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0019e4e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019e55:	83 c8 02             	or     eax,0x2
c0019e58:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019e5f:	90                   	nop
c0019e60:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019e65:	83 e0 01             	and    eax,0x1
c0019e68:	74 12                	je     c0019e7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0019e6a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019e71:	83 c8 01             	or     eax,0x1
c0019e74:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019e7b:	90                   	nop
c0019e7c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019e81:	83 e0 02             	and    eax,0x2
c0019e84:	74 12                	je     c0019e98 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0019e86:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019e8d:	83 c8 20             	or     eax,0x20
c0019e90:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019e97:	90                   	nop
c0019e98:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019e9d:	83 e0 04             	and    eax,0x4
c0019ea0:	74 12                	je     c0019eb4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0019ea2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019ea9:	83 c8 04             	or     eax,0x4
c0019eac:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019eb3:	90                   	nop
c0019eb4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019eb9:	83 e0 08             	and    eax,0x8
c0019ebc:	74 12                	je     c0019ed0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c0019ebe:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019ec5:	83 c8 02             	or     eax,0x2
c0019ec8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019ecf:	90                   	nop
c0019ed0:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019ed7:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019ede:	09 d0                	or     eax,edx
c0019ee0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019ee7:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019eef:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019ef7:	83 ec 04             	sub    esp,0x4
c0019efa:	52                   	push   edx
c0019efb:	50                   	push   eax
c0019efc:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019f00:	50                   	push   eax
c0019f01:	e8 69 af fe ff       	call   c0004e6f <f_chmod>
c0019f06:	83 c4 10             	add    esp,0x10
c0019f09:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019f10:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019f17:	85 c0                	test   eax,eax
c0019f19:	75 09                	jne    c0019f24 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c0019f1b:	b8 00 00 00 00       	mov    eax,0x0
c0019f20:	eb 0a                	jmp    c0019f2c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019f22:	66 90                	xchg   ax,ax
c0019f24:	b8 01 00 00 00       	mov    eax,0x1
c0019f29:	8d 76 00             	lea    esi,[esi+0x0]
c0019f2c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019f32:	c3                   	ret    
c0019f33:	90                   	nop

c0019f34 <FAT::rename(char const*, char const*)>:
c0019f34:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019f3a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019f42:	74 0c                	je     c0019f50 <FAT::rename(char const*, char const*)+0x1c>
c0019f44:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019f4c:	75 0e                	jne    c0019f5c <FAT::rename(char const*, char const*)+0x28>
c0019f4e:	66 90                	xchg   ax,ax
c0019f50:	b8 04 00 00 00       	mov    eax,0x4
c0019f55:	e9 9e 00 00 00       	jmp    c0019ff8 <FAT::rename(char const*, char const*)+0xc4>
c0019f5a:	66 90                	xchg   ax,ax
c0019f5c:	83 ec 08             	sub    esp,0x8
c0019f5f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019f66:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019f6d:	50                   	push   eax
c0019f6e:	e8 cd 66 fe ff       	call   c0000640 <strcpy>
c0019f73:	83 c4 10             	add    esp,0x10
c0019f76:	83 ec 08             	sub    esp,0x8
c0019f79:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019f80:	50                   	push   eax
c0019f81:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019f88:	e8 17 fa ff ff       	call   c00199a4 <FAT::fixFilepath(char*)>
c0019f8d:	83 c4 10             	add    esp,0x10
c0019f90:	83 ec 08             	sub    esp,0x8
c0019f93:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019f9a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019f9e:	50                   	push   eax
c0019f9f:	e8 9c 66 fe ff       	call   c0000640 <strcpy>
c0019fa4:	83 c4 10             	add    esp,0x10
c0019fa7:	83 ec 08             	sub    esp,0x8
c0019faa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019fae:	50                   	push   eax
c0019faf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019fb6:	e8 e9 f9 ff ff       	call   c00199a4 <FAT::fixFilepath(char*)>
c0019fbb:	83 c4 10             	add    esp,0x10
c0019fbe:	83 ec 08             	sub    esp,0x8
c0019fc1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019fc5:	50                   	push   eax
c0019fc6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019fcd:	50                   	push   eax
c0019fce:	e8 e4 ac fe ff       	call   c0004cb7 <f_rename>
c0019fd3:	83 c4 10             	add    esp,0x10
c0019fd6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019fdd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019fe4:	85 c0                	test   eax,eax
c0019fe6:	75 08                	jne    c0019ff0 <FAT::rename(char const*, char const*)+0xbc>
c0019fe8:	b8 00 00 00 00       	mov    eax,0x0
c0019fed:	eb 09                	jmp    c0019ff8 <FAT::rename(char const*, char const*)+0xc4>
c0019fef:	90                   	nop
c0019ff0:	b8 01 00 00 00       	mov    eax,0x1
c0019ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ff8:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019ffe:	c3                   	ret    
c0019fff:	90                   	nop

c001a000 <FAT::mkdir(char const*)>:
c001a000:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a006:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a00e:	75 08                	jne    c001a018 <FAT::mkdir(char const*)+0x18>
c001a010:	b8 04 00 00 00       	mov    eax,0x4
c001a015:	eb 61                	jmp    c001a078 <FAT::mkdir(char const*)+0x78>
c001a017:	90                   	nop
c001a018:	83 ec 08             	sub    esp,0x8
c001a01b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a022:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a026:	50                   	push   eax
c001a027:	e8 14 66 fe ff       	call   c0000640 <strcpy>
c001a02c:	83 c4 10             	add    esp,0x10
c001a02f:	83 ec 08             	sub    esp,0x8
c001a032:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a036:	50                   	push   eax
c001a037:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a03e:	e8 61 f9 ff ff       	call   c00199a4 <FAT::fixFilepath(char*)>
c001a043:	83 c4 10             	add    esp,0x10
c001a046:	83 ec 0c             	sub    esp,0xc
c001a049:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a04d:	50                   	push   eax
c001a04e:	e8 c9 aa fe ff       	call   c0004b1c <f_mkdir>
c001a053:	83 c4 10             	add    esp,0x10
c001a056:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a05d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a064:	85 c0                	test   eax,eax
c001a066:	75 08                	jne    c001a070 <FAT::mkdir(char const*)+0x70>
c001a068:	b8 00 00 00 00       	mov    eax,0x0
c001a06d:	eb 09                	jmp    c001a078 <FAT::mkdir(char const*)+0x78>
c001a06f:	90                   	nop
c001a070:	b8 01 00 00 00       	mov    eax,0x1
c001a075:	8d 76 00             	lea    esi,[esi+0x0]
c001a078:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a07e:	c3                   	ret    
c001a07f:	90                   	nop

c001a080 <FAT::exists(char const*)>:
c001a080:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a086:	83 ec 08             	sub    esp,0x8
c001a089:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a090:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a094:	50                   	push   eax
c001a095:	e8 a6 65 fe ff       	call   c0000640 <strcpy>
c001a09a:	83 c4 10             	add    esp,0x10
c001a09d:	83 ec 08             	sub    esp,0x8
c001a0a0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a0a4:	50                   	push   eax
c001a0a5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a0ac:	e8 f3 f8 ff ff       	call   c00199a4 <FAT::fixFilepath(char*)>
c001a0b1:	83 c4 10             	add    esp,0x10
c001a0b4:	83 ec 08             	sub    esp,0x8
c001a0b7:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a0be:	50                   	push   eax
c001a0bf:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a0c3:	50                   	push   eax
c001a0c4:	e8 bf a6 fe ff       	call   c0004788 <f_stat>
c001a0c9:	83 c4 10             	add    esp,0x10
c001a0cc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a0d3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a0da:	85 c0                	test   eax,eax
c001a0dc:	75 06                	jne    c001a0e4 <FAT::exists(char const*)+0x64>
c001a0de:	b0 01                	mov    al,0x1
c001a0e0:	eb 06                	jmp    c001a0e8 <FAT::exists(char const*)+0x68>
c001a0e2:	66 90                	xchg   ax,ax
c001a0e4:	b0 00                	mov    al,0x0
c001a0e6:	66 90                	xchg   ax,ax
c001a0e8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a0ee:	c3                   	ret    
c001a0ef:	90                   	nop

c001a0f0 <isoReadDiscSectorHelper>:
c001a0f0:	83 ec 2c             	sub    esp,0x2c
c001a0f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a0f7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0fb:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a100:	83 e8 41             	sub    eax,0x41
c001a103:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c001a10a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a10e:	ba 00 00 00 00       	mov    edx,0x0
c001a113:	83 ec 0c             	sub    esp,0xc
c001a116:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a11a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a11e:	52                   	push   edx
c001a11f:	50                   	push   eax
c001a120:	51                   	push   ecx
c001a121:	e8 0a 3a ff ff       	call   c000db30 <LogicalDisk::read(unsigned long long, int, void*)>
c001a126:	83 c4 20             	add    esp,0x20
c001a129:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a12d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a132:	74 0c                	je     c001a140 <isoReadDiscSectorHelper+0x50>
c001a134:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a138:	c1 e0 0b             	shl    eax,0xb
c001a13b:	eb 0b                	jmp    c001a148 <isoReadDiscSectorHelper+0x58>
c001a13d:	8d 76 00             	lea    esi,[esi+0x0]
c001a140:	b8 00 00 00 00       	mov    eax,0x0
c001a145:	8d 76 00             	lea    esi,[esi+0x0]
c001a148:	83 c4 2c             	add    esp,0x2c
c001a14b:	c3                   	ret    

c001a14c <iso_kprintf>:
c001a14c:	83 ec 0c             	sub    esp,0xc
c001a14f:	83 ec 08             	sub    esp,0x8
c001a152:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a156:	68 3a 28 02 c0       	push   0xc002283a
c001a15b:	e8 e5 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a160:	83 c4 10             	add    esp,0x10
c001a163:	90                   	nop
c001a164:	83 c4 0c             	add    esp,0xc
c001a167:	c3                   	ret    

c001a168 <iso_kprintfd>:
c001a168:	83 ec 0c             	sub    esp,0xc
c001a16b:	83 ec 08             	sub    esp,0x8
c001a16e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a172:	68 1a 10 02 c0       	push   0xc002101a
c001a177:	e8 c9 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a17c:	83 c4 10             	add    esp,0x10
c001a17f:	90                   	nop
c001a180:	83 c4 0c             	add    esp,0xc
c001a183:	c3                   	ret    

c001a184 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a184:	b8 08 00 00 00       	mov    eax,0x8
c001a189:	c3                   	ret    

c001a18a <ISO9660::truncate(void*, unsigned long long)>:
c001a18a:	b8 01 00 00 00       	mov    eax,0x1
c001a18f:	c3                   	ret    

c001a190 <ISO9660::getName()>:
c001a190:	b8 f0 2a 02 c0       	mov    eax,0xc0022af0
c001a195:	c3                   	ret    

c001a196 <ISO9660::closeDir(void*)>:
c001a196:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a19a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a19c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a19f:	90                   	nop

c001a1a0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a1a0:	b8 01 00 00 00       	mov    eax,0x1
c001a1a5:	c3                   	ret    

c001a1a6 <ISO9660::unlink(char const*)>:
c001a1a6:	b8 01 00 00 00       	mov    eax,0x1
c001a1ab:	c3                   	ret    

c001a1ac <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a1ac:	b8 03 00 00 00       	mov    eax,0x3
c001a1b1:	c3                   	ret    

c001a1b2 <ISO9660::rename(char const*, char const*)>:
c001a1b2:	b8 01 00 00 00       	mov    eax,0x1
c001a1b7:	c3                   	ret    

c001a1b8 <ISO9660::mkdir(char const*)>:
c001a1b8:	b8 01 00 00 00       	mov    eax,0x1
c001a1bd:	c3                   	ret    

c001a1be <ISO9660::~ISO9660()>:
c001a1be:	83 ec 0c             	sub    esp,0xc
c001a1c1:	ba 30 2c 02 c0       	mov    edx,0xc0022c30
c001a1c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1ca:	89 10                	mov    DWORD PTR [eax],edx
c001a1cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1d0:	83 ec 0c             	sub    esp,0xc
c001a1d3:	50                   	push   eax
c001a1d4:	e8 8f 13 ff ff       	call   c000b568 <Filesystem::~Filesystem()>
c001a1d9:	83 c4 10             	add    esp,0x10
c001a1dc:	90                   	nop
c001a1dd:	83 c4 0c             	add    esp,0xc
c001a1e0:	c3                   	ret    
c001a1e1:	90                   	nop

c001a1e2 <ISO9660::~ISO9660()>:
c001a1e2:	83 ec 0c             	sub    esp,0xc
c001a1e5:	83 ec 0c             	sub    esp,0xc
c001a1e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a1ec:	e8 cd ff ff ff       	call   c001a1be <ISO9660::~ISO9660()>
c001a1f1:	83 c4 10             	add    esp,0x10
c001a1f4:	83 ec 08             	sub    esp,0x8
c001a1f7:	6a 08                	push   0x8
c001a1f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a1fd:	e8 16 06 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a202:	83 c4 10             	add    esp,0x10
c001a205:	83 c4 0c             	add    esp,0xc
c001a208:	c3                   	ret    
c001a209:	90                   	nop

c001a20a <ISO9660::exists(char const*)>:
c001a20a:	83 ec 18             	sub    esp,0x18
c001a20d:	68 0b 2b 02 c0       	push   0xc0022b0b
c001a212:	e8 66 71 ff ff       	call   c001137d <KePanic(char const*)>
c001a217:	31 c0                	xor    eax,eax
c001a219:	83 c4 1c             	add    esp,0x1c
c001a21c:	c3                   	ret    
c001a21d:	90                   	nop

c001a21e <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a21e:	56                   	push   esi
c001a21f:	53                   	push   ebx
c001a220:	53                   	push   ebx
c001a221:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a225:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a229:	85 db                	test   ebx,ebx
c001a22b:	0f 84 ca 00 00 00    	je     c001a2fb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a231:	85 f6                	test   esi,esi
c001a233:	0f 84 c2 00 00 00    	je     c001a2fb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a239:	b8 03 00 00 00       	mov    eax,0x3
c001a23e:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a243:	0f 85 b7 00 00 00    	jne    c001a300 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a249:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a24b:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a252:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a258:	74 1b                	je     c001a275 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a25a:	85 c0                	test   eax,eax
c001a25c:	74 10                	je     c001a26e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a25e:	83 ec 0c             	sub    esp,0xc
c001a261:	68 29 2b 02 c0       	push   0xc0022b29
c001a266:	e8 12 71 ff ff       	call   c001137d <KePanic(char const*)>
c001a26b:	83 c4 10             	add    esp,0x10
c001a26e:	8a 03                	mov    al,BYTE PTR [ebx]
c001a270:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a275:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a278:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a27f:	85 c0                	test   eax,eax
c001a281:	74 09                	je     c001a28c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a283:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a28a:	74 48                	je     c001a2d4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a28c:	83 ec 0c             	sub    esp,0xc
c001a28f:	68 39 2b 02 c0       	push   0xc0022b39
c001a294:	e8 ac 06 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a299:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a29c:	83 c4 10             	add    esp,0x10
c001a29f:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a2a6:	85 c0                	test   eax,eax
c001a2a8:	74 17                	je     c001a2c1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a2aa:	83 ec 0c             	sub    esp,0xc
c001a2ad:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a2b4:	68 59 2b 02 c0       	push   0xc0022b59
c001a2b9:	e8 87 06 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a2be:	83 c4 10             	add    esp,0x10
c001a2c1:	83 ec 0c             	sub    esp,0xc
c001a2c4:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a2cb:	50                   	push   eax
c001a2cc:	e8 75 c7 fe ff       	call   c0006a46 <init_percd>
c001a2d1:	83 c4 10             	add    esp,0x10
c001a2d4:	83 c3 03             	add    ebx,0x3
c001a2d7:	51                   	push   ecx
c001a2d8:	51                   	push   ecx
c001a2d9:	6a 00                	push   0x0
c001a2db:	53                   	push   ebx
c001a2dc:	e8 2c c2 fe ff       	call   c000650d <iso_open>
c001a2e1:	83 c4 10             	add    esp,0x10
c001a2e4:	89 c2                	mov    edx,eax
c001a2e6:	b8 01 00 00 00       	mov    eax,0x1
c001a2eb:	83 fa ff             	cmp    edx,0xffffffff
c001a2ee:	74 10                	je     c001a300 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a2f0:	83 c2 32             	add    edx,0x32
c001a2f3:	31 c0                	xor    eax,eax
c001a2f5:	01 d2                	add    edx,edx
c001a2f7:	89 16                	mov    DWORD PTR [esi],edx
c001a2f9:	eb 05                	jmp    c001a300 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a2fb:	b8 04 00 00 00       	mov    eax,0x4
c001a300:	5a                   	pop    edx
c001a301:	5b                   	pop    ebx
c001a302:	5e                   	pop    esi
c001a303:	c3                   	ret    

c001a304 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a304:	53                   	push   ebx
c001a305:	83 ec 08             	sub    esp,0x8
c001a308:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a30c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a310:	85 c0                	test   eax,eax
c001a312:	74 2d                	je     c001a341 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a314:	85 db                	test   ebx,ebx
c001a316:	74 29                	je     c001a341 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a318:	b9 02 00 00 00       	mov    ecx,0x2
c001a31d:	52                   	push   edx
c001a31e:	99                   	cdq    
c001a31f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a323:	f7 f9                	idiv   ecx
c001a325:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a329:	83 e8 32             	sub    eax,0x32
c001a32c:	50                   	push   eax
c001a32d:	e8 83 c2 fe ff       	call   c00065b5 <iso_read>
c001a332:	83 c4 10             	add    esp,0x10
c001a335:	89 03                	mov    DWORD PTR [ebx],eax
c001a337:	09 d0                	or     eax,edx
c001a339:	0f 94 c0             	sete   al
c001a33c:	0f b6 c0             	movzx  eax,al
c001a33f:	eb 05                	jmp    c001a346 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a341:	b8 04 00 00 00       	mov    eax,0x4
c001a346:	83 c4 08             	add    esp,0x8
c001a349:	5b                   	pop    ebx
c001a34a:	c3                   	ret    
c001a34b:	90                   	nop

c001a34c <ISO9660::seek(void*, unsigned long long)>:
c001a34c:	57                   	push   edi
c001a34d:	56                   	push   esi
c001a34e:	b8 04 00 00 00       	mov    eax,0x4
c001a353:	51                   	push   ecx
c001a354:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a358:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a35c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a360:	85 d2                	test   edx,edx
c001a362:	74 26                	je     c001a38a <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a364:	6a 00                	push   0x0
c001a366:	b9 02 00 00 00       	mov    ecx,0x2
c001a36b:	57                   	push   edi
c001a36c:	89 d0                	mov    eax,edx
c001a36e:	56                   	push   esi
c001a36f:	99                   	cdq    
c001a370:	f7 f9                	idiv   ecx
c001a372:	83 e8 32             	sub    eax,0x32
c001a375:	50                   	push   eax
c001a376:	e8 50 c3 fe ff       	call   c00066cb <iso_seek>
c001a37b:	83 c4 10             	add    esp,0x10
c001a37e:	31 f0                	xor    eax,esi
c001a380:	31 fa                	xor    edx,edi
c001a382:	09 d0                	or     eax,edx
c001a384:	0f 95 c0             	setne  al
c001a387:	0f b6 c0             	movzx  eax,al
c001a38a:	5a                   	pop    edx
c001a38b:	5e                   	pop    esi
c001a38c:	5f                   	pop    edi
c001a38d:	c3                   	ret    

c001a38e <ISO9660::tell(void*, unsigned long long*)>:
c001a38e:	53                   	push   ebx
c001a38f:	83 ec 08             	sub    esp,0x8
c001a392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a396:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a39a:	85 c0                	test   eax,eax
c001a39c:	74 24                	je     c001a3c2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a39e:	85 db                	test   ebx,ebx
c001a3a0:	74 20                	je     c001a3c2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a3a2:	83 ec 0c             	sub    esp,0xc
c001a3a5:	b9 02 00 00 00       	mov    ecx,0x2
c001a3aa:	99                   	cdq    
c001a3ab:	f7 f9                	idiv   ecx
c001a3ad:	83 e8 32             	sub    eax,0x32
c001a3b0:	50                   	push   eax
c001a3b1:	e8 99 c3 fe ff       	call   c000674f <iso_tell>
c001a3b6:	83 c4 10             	add    esp,0x10
c001a3b9:	89 03                	mov    DWORD PTR [ebx],eax
c001a3bb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a3be:	31 c0                	xor    eax,eax
c001a3c0:	eb 05                	jmp    c001a3c7 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a3c2:	b8 04 00 00 00       	mov    eax,0x4
c001a3c7:	83 c4 08             	add    esp,0x8
c001a3ca:	5b                   	pop    ebx
c001a3cb:	c3                   	ret    

c001a3cc <ISO9660::stat(void*, unsigned long long*)>:
c001a3cc:	53                   	push   ebx
c001a3cd:	83 ec 14             	sub    esp,0x14
c001a3d0:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a3d4:	68 7d 2b 02 c0       	push   0xc0022b7d
c001a3d9:	e8 67 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a3de:	83 c4 10             	add    esp,0x10
c001a3e1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a3e6:	74 2c                	je     c001a414 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a3e8:	85 db                	test   ebx,ebx
c001a3ea:	74 28                	je     c001a414 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a3ec:	83 ec 0c             	sub    esp,0xc
c001a3ef:	b9 02 00 00 00       	mov    ecx,0x2
c001a3f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3f8:	99                   	cdq    
c001a3f9:	f7 f9                	idiv   ecx
c001a3fb:	83 e8 32             	sub    eax,0x32
c001a3fe:	50                   	push   eax
c001a3ff:	e8 7c c3 fe ff       	call   c0006780 <iso_total>
c001a404:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a40b:	89 03                	mov    DWORD PTR [ebx],eax
c001a40d:	83 c4 10             	add    esp,0x10
c001a410:	31 c0                	xor    eax,eax
c001a412:	eb 05                	jmp    c001a419 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a414:	b8 04 00 00 00       	mov    eax,0x4
c001a419:	83 c4 08             	add    esp,0x8
c001a41c:	5b                   	pop    ebx
c001a41d:	c3                   	ret    

c001a41e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a41e:	55                   	push   ebp
c001a41f:	57                   	push   edi
c001a420:	56                   	push   esi
c001a421:	53                   	push   ebx
c001a422:	83 ec 18             	sub    esp,0x18
c001a425:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a429:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a42d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a431:	68 85 2b 02 c0       	push   0xc0022b85
c001a436:	e8 0a 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a43b:	83 c4 10             	add    esp,0x10
c001a43e:	85 ff                	test   edi,edi
c001a440:	0f 94 c0             	sete   al
c001a443:	85 f6                	test   esi,esi
c001a445:	0f 94 c2             	sete   dl
c001a448:	09 d0                	or     eax,edx
c001a44a:	a8 01                	test   al,0x1
c001a44c:	0f 85 dd 00 00 00    	jne    c001a52f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a452:	85 db                	test   ebx,ebx
c001a454:	0f 84 d5 00 00 00    	je     c001a52f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a45a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a45d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a463:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a46a:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a471:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a473:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a479:	74 1b                	je     c001a496 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a47b:	85 c0                	test   eax,eax
c001a47d:	74 10                	je     c001a48f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a47f:	83 ec 0c             	sub    esp,0xc
c001a482:	68 29 2b 02 c0       	push   0xc0022b29
c001a487:	e8 f1 6e ff ff       	call   c001137d <KePanic(char const*)>
c001a48c:	83 c4 10             	add    esp,0x10
c001a48f:	8a 03                	mov    al,BYTE PTR [ebx]
c001a491:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a496:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a499:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a4a0:	85 c0                	test   eax,eax
c001a4a2:	74 09                	je     c001a4ad <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a4a4:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a4ab:	74 51                	je     c001a4fe <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a4ad:	83 ec 0c             	sub    esp,0xc
c001a4b0:	68 8d 2b 02 c0       	push   0xc0022b8d
c001a4b5:	e8 8b 04 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a4ba:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a4bd:	83 c4 10             	add    esp,0x10
c001a4c0:	83 3c 85 7c 87 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7884],0x0
c001a4c8:	74 21                	je     c001a4eb <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a4ca:	83 ec 0c             	sub    esp,0xc
c001a4cd:	68 ad 2b 02 c0       	push   0xc0022bad
c001a4d2:	e8 6e 04 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a4d7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a4da:	83 c4 10             	add    esp,0x10
c001a4dd:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a4e4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a4eb:	83 ec 0c             	sub    esp,0xc
c001a4ee:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a4f5:	50                   	push   eax
c001a4f6:	e8 4b c5 fe ff       	call   c0006a46 <init_percd>
c001a4fb:	83 c4 10             	add    esp,0x10
c001a4fe:	83 c3 03             	add    ebx,0x3
c001a501:	52                   	push   edx
c001a502:	52                   	push   edx
c001a503:	6a 00                	push   0x0
c001a505:	53                   	push   ebx
c001a506:	e8 02 c0 fe ff       	call   c000650d <iso_open>
c001a50b:	83 c4 10             	add    esp,0x10
c001a50e:	89 c5                	mov    ebp,eax
c001a510:	83 f8 ff             	cmp    eax,0xffffffff
c001a513:	75 21                	jne    c001a536 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a515:	50                   	push   eax
c001a516:	50                   	push   eax
c001a517:	6a 01                	push   0x1
c001a519:	53                   	push   ebx
c001a51a:	e8 ee bf fe ff       	call   c000650d <iso_open>
c001a51f:	83 c4 10             	add    esp,0x10
c001a522:	ba 02 00 00 00       	mov    edx,0x2
c001a527:	40                   	inc    eax
c001a528:	74 2b                	je     c001a555 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a52a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a52d:	eb 24                	jmp    c001a553 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a52f:	ba 04 00 00 00       	mov    edx,0x4
c001a534:	eb 1f                	jmp    c001a555 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a536:	83 ec 0c             	sub    esp,0xc
c001a539:	50                   	push   eax
c001a53a:	e8 41 c2 fe ff       	call   c0006780 <iso_total>
c001a53f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a546:	89 07                	mov    DWORD PTR [edi],eax
c001a548:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a54b:	e8 47 c0 fe ff       	call   c0006597 <iso_close>
c001a550:	83 c4 10             	add    esp,0x10
c001a553:	31 d2                	xor    edx,edx
c001a555:	83 c4 0c             	add    esp,0xc
c001a558:	89 d0                	mov    eax,edx
c001a55a:	5b                   	pop    ebx
c001a55b:	5e                   	pop    esi
c001a55c:	5f                   	pop    edi
c001a55d:	5d                   	pop    ebp
c001a55e:	c3                   	ret    
c001a55f:	90                   	nop

c001a560 <ISO9660::close(void*)>:
c001a560:	83 ec 0c             	sub    esp,0xc
c001a563:	b8 04 00 00 00       	mov    eax,0x4
c001a568:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a56c:	85 d2                	test   edx,edx
c001a56e:	74 1b                	je     c001a58b <ISO9660::close(void*)+0x2b>
c001a570:	83 ec 0c             	sub    esp,0xc
c001a573:	b9 02 00 00 00       	mov    ecx,0x2
c001a578:	89 d0                	mov    eax,edx
c001a57a:	99                   	cdq    
c001a57b:	f7 f9                	idiv   ecx
c001a57d:	83 e8 32             	sub    eax,0x32
c001a580:	50                   	push   eax
c001a581:	e8 11 c0 fe ff       	call   c0006597 <iso_close>
c001a586:	83 c4 10             	add    esp,0x10
c001a589:	31 c0                	xor    eax,eax
c001a58b:	83 c4 0c             	add    esp,0xc
c001a58e:	c3                   	ret    
c001a58f:	90                   	nop

c001a590 <ISO9660::openDir(char const*, void**)>:
c001a590:	56                   	push   esi
c001a591:	53                   	push   ebx
c001a592:	50                   	push   eax
c001a593:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a597:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a59b:	85 db                	test   ebx,ebx
c001a59d:	0f 84 bd 00 00 00    	je     c001a660 <ISO9660::openDir(char const*, void**)+0xd0>
c001a5a3:	85 f6                	test   esi,esi
c001a5a5:	0f 84 b5 00 00 00    	je     c001a660 <ISO9660::openDir(char const*, void**)+0xd0>
c001a5ab:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a5ad:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a5b4:	38 15 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,dl
c001a5ba:	74 1b                	je     c001a5d7 <ISO9660::openDir(char const*, void**)+0x47>
c001a5bc:	85 c0                	test   eax,eax
c001a5be:	74 10                	je     c001a5d0 <ISO9660::openDir(char const*, void**)+0x40>
c001a5c0:	83 ec 0c             	sub    esp,0xc
c001a5c3:	68 29 2b 02 c0       	push   0xc0022b29
c001a5c8:	e8 b0 6d ff ff       	call   c001137d <KePanic(char const*)>
c001a5cd:	83 c4 10             	add    esp,0x10
c001a5d0:	8a 03                	mov    al,BYTE PTR [ebx]
c001a5d2:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a5d7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a5da:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a5e1:	85 c0                	test   eax,eax
c001a5e3:	74 10                	je     c001a5f5 <ISO9660::openDir(char const*, void**)+0x65>
c001a5e5:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a5ec:	74 1a                	je     c001a608 <ISO9660::openDir(char const*, void**)+0x78>
c001a5ee:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a5f5:	83 ec 0c             	sub    esp,0xc
c001a5f8:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a5ff:	50                   	push   eax
c001a600:	e8 41 c4 fe ff       	call   c0006a46 <init_percd>
c001a605:	83 c4 10             	add    esp,0x10
c001a608:	83 c3 03             	add    ebx,0x3
c001a60b:	50                   	push   eax
c001a60c:	50                   	push   eax
c001a60d:	6a 01                	push   0x1
c001a60f:	53                   	push   ebx
c001a610:	e8 f8 be fe ff       	call   c000650d <iso_open>
c001a615:	83 c4 10             	add    esp,0x10
c001a618:	89 c3                	mov    ebx,eax
c001a61a:	83 f8 ff             	cmp    eax,0xffffffff
c001a61d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a622:	75 1c                	jne    c001a640 <ISO9660::openDir(char const*, void**)+0xb0>
c001a624:	53                   	push   ebx
c001a625:	53                   	push   ebx
c001a626:	68 d1 2b 02 c0       	push   0xc0022bd1
c001a62b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a631:	e8 70 e4 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a636:	83 c4 10             	add    esp,0x10
c001a639:	b8 01 00 00 00       	mov    eax,0x1
c001a63e:	eb 25                	jmp    c001a665 <ISO9660::openDir(char const*, void**)+0xd5>
c001a640:	01 db                	add    ebx,ebx
c001a642:	51                   	push   ecx
c001a643:	83 c3 65             	add    ebx,0x65
c001a646:	51                   	push   ecx
c001a647:	68 e4 2b 02 c0       	push   0xc0022be4
c001a64c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a652:	e8 4f e4 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a657:	89 1e                	mov    DWORD PTR [esi],ebx
c001a659:	83 c4 10             	add    esp,0x10
c001a65c:	31 c0                	xor    eax,eax
c001a65e:	eb 05                	jmp    c001a665 <ISO9660::openDir(char const*, void**)+0xd5>
c001a660:	b8 04 00 00 00       	mov    eax,0x4
c001a665:	5a                   	pop    edx
c001a666:	5b                   	pop    ebx
c001a667:	5e                   	pop    esi
c001a668:	c3                   	ret    
c001a669:	90                   	nop

c001a66a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a66a:	55                   	push   ebp
c001a66b:	57                   	push   edi
c001a66c:	56                   	push   esi
c001a66d:	53                   	push   ebx
c001a66e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a674:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a67b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a682:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a68a:	0f 84 e7 00 00 00    	je     c001a777 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a690:	85 db                	test   ebx,ebx
c001a692:	0f 84 df 00 00 00    	je     c001a777 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a698:	83 ec 0c             	sub    esp,0xc
c001a69b:	68 f7 2b 02 c0       	push   0xc0022bf7
c001a6a0:	e8 a0 02 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a6a5:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a6ac:	b9 02 00 00 00       	mov    ecx,0x2
c001a6b1:	99                   	cdq    
c001a6b2:	f7 f9                	idiv   ecx
c001a6b4:	83 e8 32             	sub    eax,0x32
c001a6b7:	89 04 24             	mov    DWORD PTR [esp],eax
c001a6ba:	e8 13 c1 fe ff       	call   c00067d2 <iso_readdir>
c001a6bf:	83 c4 10             	add    esp,0x10
c001a6c2:	89 c6                	mov    esi,eax
c001a6c4:	85 c0                	test   eax,eax
c001a6c6:	75 37                	jne    c001a6ff <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001a6c8:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a6cd:	56                   	push   esi
c001a6ce:	56                   	push   esi
c001a6cf:	68 02 2c 02 c0       	push   0xc0022c02
c001a6d4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a6da:	e8 c7 e3 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a6df:	83 c4 0c             	add    esp,0xc
c001a6e2:	68 10 01 00 00       	push   0x110
c001a6e7:	6a 00                	push   0x0
c001a6e9:	57                   	push   edi
c001a6ea:	e8 01 5e fe ff       	call   c00004f0 <memset>
c001a6ef:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a6f5:	83 c4 10             	add    esp,0x10
c001a6f8:	b8 01 00 00 00       	mov    eax,0x1
c001a6fd:	eb 7d                	jmp    c001a77c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a6ff:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a705:	8d 68 08             	lea    ebp,[eax+0x8]
c001a708:	83 ec 0c             	sub    esp,0xc
c001a70b:	55                   	push   ebp
c001a70c:	e8 5f 5e fe ff       	call   c0000570 <strlen>
c001a711:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a719:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a71d:	83 c4 10             	add    esp,0x10
c001a720:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001a724:	75 0a                	jne    c001a730 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a726:	b8 02 00 00 00       	mov    eax,0x2
c001a72b:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001a72e:	74 05                	je     c001a735 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001a730:	b8 01 00 00 00       	mov    eax,0x1
c001a735:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a739:	50                   	push   eax
c001a73a:	50                   	push   eax
c001a73b:	55                   	push   ebp
c001a73c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a740:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a744:	50                   	push   eax
c001a745:	e8 f6 5e fe ff       	call   c0000640 <strcpy>
c001a74a:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a751:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a753:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001a759:	5a                   	pop    edx
c001a75a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a75f:	59                   	pop    ecx
c001a760:	68 15 2c 02 c0       	push   0xc0022c15
c001a765:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a76b:	e8 36 e3 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a770:	83 c4 10             	add    esp,0x10
c001a773:	31 c0                	xor    eax,eax
c001a775:	eb 05                	jmp    c001a77c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a777:	b8 04 00 00 00       	mov    eax,0x4
c001a77c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a782:	5b                   	pop    ebx
c001a783:	5e                   	pop    esi
c001a784:	5f                   	pop    edi
c001a785:	5d                   	pop    ebp
c001a786:	c3                   	ret    

c001a787 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a787:	57                   	push   edi
c001a788:	56                   	push   esi
c001a789:	53                   	push   ebx
c001a78a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a78e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a792:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a796:	39 35 84 98 02 c0    	cmp    DWORD PTR ds:0xc0029884,esi
c001a79c:	0f be cb             	movsx  ecx,bl
c001a79f:	75 0b                	jne    c001a7ac <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a7a1:	0f be 05 40 3a 02 c0 	movsx  eax,BYTE PTR ds:0xc0023a40
c001a7a8:	39 c8                	cmp    eax,ecx
c001a7aa:	74 47                	je     c001a7f3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a7ac:	83 ec 0c             	sub    esp,0xc
c001a7af:	31 d2                	xor    edx,edx
c001a7b1:	68 a0 98 02 c0       	push   0xc00298a0
c001a7b6:	6a 01                	push   0x1
c001a7b8:	52                   	push   edx
c001a7b9:	56                   	push   esi
c001a7ba:	ff 34 8d 7c 87 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7884]
c001a7c1:	e8 6a 33 ff ff       	call   c000db30 <LogicalDisk::read(unsigned long long, int, void*)>
c001a7c6:	83 c4 20             	add    esp,0x20
c001a7c9:	85 c0                	test   eax,eax
c001a7cb:	75 0e                	jne    c001a7db <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a7cd:	89 35 84 98 02 c0    	mov    DWORD PTR ds:0xc0029884,esi
c001a7d3:	88 1d 40 3a 02 c0    	mov    BYTE PTR ds:0xc0023a40,bl
c001a7d9:	eb 18                	jmp    c001a7f3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a7db:	50                   	push   eax
c001a7dc:	68 00 08 00 00       	push   0x800
c001a7e1:	6a 00                	push   0x0
c001a7e3:	57                   	push   edi
c001a7e4:	e8 07 5d fe ff       	call   c00004f0 <memset>
c001a7e9:	83 c4 10             	add    esp,0x10
c001a7ec:	b8 01 00 00 00       	mov    eax,0x1
c001a7f1:	eb 0e                	jmp    c001a801 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a7f3:	be a0 98 02 c0       	mov    esi,0xc00298a0
c001a7f8:	b9 00 08 00 00       	mov    ecx,0x800
c001a7fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a7ff:	31 c0                	xor    eax,eax
c001a801:	5b                   	pop    ebx
c001a802:	5e                   	pop    esi
c001a803:	5f                   	pop    edi
c001a804:	c3                   	ret    
c001a805:	90                   	nop

c001a806 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a806:	53                   	push   ebx
c001a807:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a80d:	c7 05 84 98 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029884,0xdeadbeef
c001a817:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a81e:	8d 58 41             	lea    ebx,[eax+0x41]
c001a821:	0f be db             	movsx  ebx,bl
c001a824:	53                   	push   ebx
c001a825:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a829:	50                   	push   eax
c001a82a:	6a 10                	push   0x10
c001a82c:	e8 56 ff ff ff       	call   c001a787 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a831:	83 c4 10             	add    esp,0x10
c001a834:	31 d2                	xor    edx,edx
c001a836:	85 c0                	test   eax,eax
c001a838:	75 33                	jne    c001a86d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a83a:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a83f:	75 2c                	jne    c001a86d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a841:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a846:	75 25                	jne    c001a86d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a848:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a84d:	75 1e                	jne    c001a86d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a84f:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a854:	75 17                	jne    c001a86d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a856:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a85b:	75 10                	jne    c001a86d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a85d:	83 ec 0c             	sub    esp,0xc
c001a860:	53                   	push   ebx
c001a861:	e8 e0 c1 fe ff       	call   c0006a46 <init_percd>
c001a866:	83 c4 10             	add    esp,0x10
c001a869:	40                   	inc    eax
c001a86a:	0f 95 c2             	setne  dl
c001a86d:	88 d0                	mov    al,dl
c001a86f:	81 c4 08 08 00 00    	add    esp,0x808
c001a875:	5b                   	pop    ebx
c001a876:	c3                   	ret    
c001a877:	90                   	nop

c001a878 <ISO9660::ISO9660()>:
c001a878:	83 ec 0c             	sub    esp,0xc
c001a87b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a87f:	83 ec 0c             	sub    esp,0xc
c001a882:	50                   	push   eax
c001a883:	e8 bc 0c ff ff       	call   c000b544 <Filesystem::Filesystem()>
c001a888:	83 c4 10             	add    esp,0x10
c001a88b:	ba 30 2c 02 c0       	mov    edx,0xc0022c30
c001a890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a894:	89 10                	mov    DWORD PTR [eax],edx
c001a896:	e8 bd c2 fe ff       	call   c0006b58 <fs_iso9660_init>
c001a89b:	90                   	nop
c001a89c:	83 c4 0c             	add    esp,0xc
c001a89f:	c3                   	ret    

c001a8a0 <SoundCard::beginPlayback()>:
c001a8a0:	c7 44 24 04 94 2c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022c94
c001a8a8:	e9 d0 6a ff ff       	jmp    c001137d <KePanic(char const*)>
c001a8ad:	90                   	nop

c001a8ae <SoundCard::stopPlayback()>:
c001a8ae:	c7 44 24 04 94 2c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022c94
c001a8b6:	e9 c2 6a ff ff       	jmp    c001137d <KePanic(char const*)>
c001a8bb:	90                   	nop

c001a8bc <SoundCard::SoundCard(char const*)>:
c001a8bc:	83 ec 1c             	sub    esp,0x1c
c001a8bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a8c3:	83 ec 08             	sub    esp,0x8
c001a8c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a8ca:	50                   	push   eax
c001a8cb:	e8 16 20 ff ff       	call   c000c8e6 <Device::Device(char const*)>
c001a8d0:	83 c4 10             	add    esp,0x10
c001a8d3:	ba e0 2c 02 c0       	mov    edx,0xc0022ce0
c001a8d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a8dc:	89 10                	mov    DWORD PTR [eax],edx
c001a8de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a8e2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a8e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a8ed:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a8f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a8fb:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a905:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a909:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a913:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a917:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a921:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a929:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a92e:	7f 1a                	jg     c001a94a <SoundCard::SoundCard(char const*)+0x8e>
c001a930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a934:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a938:	83 c2 54             	add    edx,0x54
c001a93b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a943:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a948:	eb df                	jmp    c001a929 <SoundCard::SoundCard(char const*)+0x6d>
c001a94a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a94e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a955:	90                   	nop
c001a956:	83 c4 1c             	add    esp,0x1c
c001a959:	c3                   	ret    

c001a95a <SoundCard::~SoundCard()>:
c001a95a:	83 ec 0c             	sub    esp,0xc
c001a95d:	ba e0 2c 02 c0       	mov    edx,0xc0022ce0
c001a962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a966:	89 10                	mov    DWORD PTR [eax],edx
c001a968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a96c:	83 ec 0c             	sub    esp,0xc
c001a96f:	50                   	push   eax
c001a970:	e8 db 1c ff ff       	call   c000c650 <Device::~Device()>
c001a975:	83 c4 10             	add    esp,0x10
c001a978:	90                   	nop
c001a979:	83 c4 0c             	add    esp,0xc
c001a97c:	c3                   	ret    
c001a97d:	90                   	nop

c001a97e <SoundCard::~SoundCard()>:
c001a97e:	83 ec 0c             	sub    esp,0xc
c001a981:	83 ec 0c             	sub    esp,0xc
c001a984:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a988:	e8 cd ff ff ff       	call   c001a95a <SoundCard::~SoundCard()>
c001a98d:	83 c4 10             	add    esp,0x10
c001a990:	83 ec 08             	sub    esp,0x8
c001a993:	68 e8 01 00 00       	push   0x1e8
c001a998:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a99c:	e8 77 fe fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a9a1:	83 c4 10             	add    esp,0x10
c001a9a4:	83 c4 0c             	add    esp,0xc
c001a9a7:	c3                   	ret    

c001a9a8 <SoundCard::configureRates(int, int, int)>:
c001a9a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a9ac:	31 c0                	xor    eax,eax
c001a9ae:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a9b5:	75 20                	jne    c001a9d7 <SoundCard::configureRates(int, int, int)+0x2f>
c001a9b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9bb:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a9c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a9c5:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a9cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9cf:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a9d5:	b0 01                	mov    al,0x1
c001a9d7:	c3                   	ret    

c001a9d8 <SoundCard::getSamples16(int, short*)>:
c001a9d8:	55                   	push   ebp
c001a9d9:	57                   	push   edi
c001a9da:	31 ff                	xor    edi,edi
c001a9dc:	56                   	push   esi
c001a9dd:	53                   	push   ebx
c001a9de:	31 db                	xor    ebx,ebx
c001a9e0:	83 ec 10             	sub    esp,0x10
c001a9e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a9e7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a9eb:	8d 04 36             	lea    eax,[esi+esi*1]
c001a9ee:	50                   	push   eax
c001a9ef:	6a 00                	push   0x0
c001a9f1:	55                   	push   ebp
c001a9f2:	e8 f9 5a fe ff       	call   c00004f0 <memset>
c001a9f7:	83 c4 10             	add    esp,0x10
c001a9fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9fe:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001aa05:	85 c0                	test   eax,eax
c001aa07:	74 1b                	je     c001aa24 <SoundCard::getSamples16(int, short*)+0x4c>
c001aa09:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001aa0d:	75 15                	jne    c001aa24 <SoundCard::getSamples16(int, short*)+0x4c>
c001aa0f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aa13:	55                   	push   ebp
c001aa14:	56                   	push   esi
c001aa15:	50                   	push   eax
c001aa16:	e8 f1 02 00 00       	call   c001ad0c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001aa1b:	83 c4 10             	add    esp,0x10
c001aa1e:	39 c7                	cmp    edi,eax
c001aa20:	7d 02                	jge    c001aa24 <SoundCard::getSamples16(int, short*)+0x4c>
c001aa22:	89 c7                	mov    edi,eax
c001aa24:	43                   	inc    ebx
c001aa25:	83 fb 20             	cmp    ebx,0x20
c001aa28:	75 d0                	jne    c001a9fa <SoundCard::getSamples16(int, short*)+0x22>
c001aa2a:	83 c4 0c             	add    esp,0xc
c001aa2d:	89 f8                	mov    eax,edi
c001aa2f:	5b                   	pop    ebx
c001aa30:	5e                   	pop    esi
c001aa31:	5f                   	pop    edi
c001aa32:	5d                   	pop    ebp
c001aa33:	c3                   	ret    

c001aa34 <SoundCard::getSamples32(int, int*)>:
c001aa34:	55                   	push   ebp
c001aa35:	57                   	push   edi
c001aa36:	31 ff                	xor    edi,edi
c001aa38:	56                   	push   esi
c001aa39:	31 f6                	xor    esi,esi
c001aa3b:	53                   	push   ebx
c001aa3c:	83 ec 10             	sub    esp,0x10
c001aa3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aa43:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001aa47:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001aa4b:	c1 e0 02             	shl    eax,0x2
c001aa4e:	50                   	push   eax
c001aa4f:	6a 00                	push   0x0
c001aa51:	55                   	push   ebp
c001aa52:	e8 99 5a fe ff       	call   c00004f0 <memset>
c001aa57:	83 c4 10             	add    esp,0x10
c001aa5a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001aa61:	85 c0                	test   eax,eax
c001aa63:	74 1b                	je     c001aa80 <SoundCard::getSamples32(int, int*)+0x4c>
c001aa65:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001aa69:	75 15                	jne    c001aa80 <SoundCard::getSamples32(int, int*)+0x4c>
c001aa6b:	53                   	push   ebx
c001aa6c:	55                   	push   ebp
c001aa6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa71:	50                   	push   eax
c001aa72:	e8 61 03 00 00       	call   c001add8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001aa77:	83 c4 10             	add    esp,0x10
c001aa7a:	39 c6                	cmp    esi,eax
c001aa7c:	7d 02                	jge    c001aa80 <SoundCard::getSamples32(int, int*)+0x4c>
c001aa7e:	89 c6                	mov    esi,eax
c001aa80:	47                   	inc    edi
c001aa81:	83 ff 20             	cmp    edi,0x20
c001aa84:	75 d4                	jne    c001aa5a <SoundCard::getSamples32(int, int*)+0x26>
c001aa86:	85 f6                	test   esi,esi
c001aa88:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001aa8f:	75 0f                	jne    c001aaa0 <SoundCard::getSamples32(int, int*)+0x6c>
c001aa91:	85 c0                	test   eax,eax
c001aa93:	74 1b                	je     c001aab0 <SoundCard::getSamples32(int, int*)+0x7c>
c001aa95:	83 ec 0c             	sub    esp,0xc
c001aa98:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa9a:	53                   	push   ebx
c001aa9b:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001aa9e:	eb 0d                	jmp    c001aaad <SoundCard::getSamples32(int, int*)+0x79>
c001aaa0:	85 c0                	test   eax,eax
c001aaa2:	75 0c                	jne    c001aab0 <SoundCard::getSamples32(int, int*)+0x7c>
c001aaa4:	83 ec 0c             	sub    esp,0xc
c001aaa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aaa9:	53                   	push   ebx
c001aaaa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001aaad:	83 c4 10             	add    esp,0x10
c001aab0:	83 c4 0c             	add    esp,0xc
c001aab3:	89 f0                	mov    eax,esi
c001aab5:	5b                   	pop    ebx
c001aab6:	5e                   	pop    esi
c001aab7:	5f                   	pop    edi
c001aab8:	5d                   	pop    ebp
c001aab9:	c3                   	ret    

c001aaba <SoundCard::addChannel(SoundPort*)>:
c001aaba:	83 ec 0c             	sub    esp,0xc
c001aabd:	31 c0                	xor    eax,eax
c001aabf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aac3:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001aacb:	74 1b                	je     c001aae8 <SoundCard::addChannel(SoundPort*)+0x2e>
c001aacd:	40                   	inc    eax
c001aace:	83 f8 20             	cmp    eax,0x20
c001aad1:	75 f0                	jne    c001aac3 <SoundCard::addChannel(SoundPort*)+0x9>
c001aad3:	83 ec 0c             	sub    esp,0xc
c001aad6:	68 b9 2c 02 c0       	push   0xc0022cb9
c001aadb:	e8 9d 68 ff ff       	call   c001137d <KePanic(char const*)>
c001aae0:	83 c4 10             	add    esp,0x10
c001aae3:	83 c8 ff             	or     eax,0xffffffff
c001aae6:	eb 0b                	jmp    c001aaf3 <SoundCard::addChannel(SoundPort*)+0x39>
c001aae8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001aaec:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001aaf3:	83 c4 0c             	add    esp,0xc
c001aaf6:	c3                   	ret    
c001aaf7:	90                   	nop

c001aaf8 <SoundCard::removeChannel(int)>:
c001aaf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aafc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ab00:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001ab0b:	c3                   	ret    

c001ab0c <SoundPort::SoundPort(int, int, int, int)>:
c001ab0c:	83 ec 0c             	sub    esp,0xc
c001ab0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab13:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ab1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab1e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ab22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab2a:	89 10                	mov    DWORD PTR [eax],edx
c001ab2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab30:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ab34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ab37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab3b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ab3f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ab42:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001ab47:	75 13                	jne    c001ab5c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001ab49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab4d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab4f:	05 a0 0f 00 00       	add    eax,0xfa0
c001ab54:	01 c0                	add    eax,eax
c001ab56:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ab5a:	66 90                	xchg   ax,ax
c001ab5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab60:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ab64:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ab67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab6b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001ab72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab76:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ab79:	c1 e0 02             	shl    eax,0x2
c001ab7c:	83 ec 0c             	sub    esp,0xc
c001ab7f:	50                   	push   eax
c001ab80:	e8 31 cf fe ff       	call   c0007ab6 <malloc>
c001ab85:	83 c4 10             	add    esp,0x10
c001ab88:	89 c2                	mov    edx,eax
c001ab8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab8e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ab91:	90                   	nop
c001ab92:	83 c4 0c             	add    esp,0xc
c001ab95:	c3                   	ret    
c001ab96:	66 90                	xchg   ax,ax

c001ab98 <SoundPort::~SoundPort()>:
c001ab98:	83 ec 0c             	sub    esp,0xc
c001ab9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab9f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aba2:	85 c0                	test   eax,eax
c001aba4:	74 1e                	je     c001abc4 <SoundPort::~SoundPort()+0x2c>
c001aba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abaa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001abad:	83 ec 0c             	sub    esp,0xc
c001abb0:	50                   	push   eax
c001abb1:	e8 10 cf fe ff       	call   c0007ac6 <free>
c001abb6:	83 c4 10             	add    esp,0x10
c001abb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abbd:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001abc4:	90                   	nop
c001abc5:	83 c4 0c             	add    esp,0xc
c001abc8:	c3                   	ret    
c001abc9:	90                   	nop
c001abca:	66 90                	xchg   ax,ax

c001abcc <SoundPort::unpause()>:
c001abcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abd0:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001abd4:	c3                   	ret    
c001abd5:	90                   	nop
c001abd6:	66 90                	xchg   ax,ax

c001abd8 <SoundPort::pause()>:
c001abd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abdc:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001abe0:	c3                   	ret    
c001abe1:	90                   	nop
c001abe2:	66 90                	xchg   ax,ax

c001abe4 <SoundPort::getBufferUsed()>:
c001abe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abe8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001abeb:	c3                   	ret    

c001abec <SoundPort::getBufferSize()>:
c001abec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abf0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001abf3:	c3                   	ret    

c001abf4 <SoundPort::buffer16(short*, int)>:
c001abf4:	55                   	push   ebp
c001abf5:	57                   	push   edi
c001abf6:	56                   	push   esi
c001abf7:	53                   	push   ebx
c001abf8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001abfc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001ac00:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001ac03:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001ac06:	74 68                	je     c001ac70 <SoundPort::buffer16(short*, int)+0x7c>
c001ac08:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ac0c:	85 c9                	test   ecx,ecx
c001ac0e:	7e 60                	jle    c001ac70 <SoundPort::buffer16(short*, int)+0x7c>
c001ac10:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001ac14:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ac17:	c1 e1 0f             	shl    ecx,0xf
c001ac1a:	8d 70 01             	lea    esi,[eax+0x1]
c001ac1d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001ac20:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001ac23:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ac26:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ac29:	74 4d                	je     c001ac78 <SoundPort::buffer16(short*, int)+0x84>
c001ac2b:	31 f6                	xor    esi,esi
c001ac2d:	eb 21                	jmp    c001ac50 <SoundPort::buffer16(short*, int)+0x5c>
c001ac2f:	90                   	nop
c001ac30:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001ac35:	8d 79 01             	lea    edi,[ecx+0x1]
c001ac38:	c1 e3 0f             	shl    ebx,0xf
c001ac3b:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001ac3e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001ac41:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001ac44:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ac47:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ac4a:	74 1c                	je     c001ac68 <SoundPort::buffer16(short*, int)+0x74>
c001ac4c:	89 c6                	mov    esi,eax
c001ac4e:	66 90                	xchg   ax,ax
c001ac50:	8d 46 01             	lea    eax,[esi+0x1]
c001ac53:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001ac57:	75 d7                	jne    c001ac30 <SoundPort::buffer16(short*, int)+0x3c>
c001ac59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac5d:	8d 76 00             	lea    esi,[esi+0x0]
c001ac60:	5b                   	pop    ebx
c001ac61:	5e                   	pop    esi
c001ac62:	5f                   	pop    edi
c001ac63:	5d                   	pop    ebp
c001ac64:	c3                   	ret    
c001ac65:	8d 76 00             	lea    esi,[esi+0x0]
c001ac68:	5b                   	pop    ebx
c001ac69:	8d 46 02             	lea    eax,[esi+0x2]
c001ac6c:	5e                   	pop    esi
c001ac6d:	5f                   	pop    edi
c001ac6e:	5d                   	pop    ebp
c001ac6f:	c3                   	ret    
c001ac70:	5b                   	pop    ebx
c001ac71:	31 c0                	xor    eax,eax
c001ac73:	5e                   	pop    esi
c001ac74:	5f                   	pop    edi
c001ac75:	5d                   	pop    ebp
c001ac76:	c3                   	ret    
c001ac77:	90                   	nop
c001ac78:	b8 01 00 00 00       	mov    eax,0x1
c001ac7d:	eb e1                	jmp    c001ac60 <SoundPort::buffer16(short*, int)+0x6c>
c001ac7f:	90                   	nop

c001ac80 <SoundPort::buffer32(int*, int)>:
c001ac80:	55                   	push   ebp
c001ac81:	57                   	push   edi
c001ac82:	56                   	push   esi
c001ac83:	53                   	push   ebx
c001ac84:	83 ec 04             	sub    esp,0x4
c001ac87:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ac8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac8f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ac92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ac96:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac99:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ac9c:	74 5a                	je     c001acf8 <SoundPort::buffer32(int*, int)+0x78>
c001ac9e:	85 c0                	test   eax,eax
c001aca0:	7e 56                	jle    c001acf8 <SoundPort::buffer32(int*, int)+0x78>
c001aca2:	8d 71 01             	lea    esi,[ecx+0x1]
c001aca5:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aca8:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001acab:	8b 37                	mov    esi,DWORD PTR [edi]
c001acad:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001acb0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001acb3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001acb6:	74 4c                	je     c001ad04 <SoundPort::buffer32(int*, int)+0x84>
c001acb8:	31 f6                	xor    esi,esi
c001acba:	eb 1c                	jmp    c001acd8 <SoundPort::buffer32(int*, int)+0x58>
c001acbc:	8d 69 01             	lea    ebp,[ecx+0x1]
c001acbf:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001acc2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001acc5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001acc8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001accc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001accf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001acd2:	74 18                	je     c001acec <SoundPort::buffer32(int*, int)+0x6c>
c001acd4:	89 de                	mov    esi,ebx
c001acd6:	66 90                	xchg   ax,ax
c001acd8:	8d 5e 01             	lea    ebx,[esi+0x1]
c001acdb:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001acde:	75 dc                	jne    c001acbc <SoundPort::buffer32(int*, int)+0x3c>
c001ace0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ace3:	90                   	nop
c001ace4:	83 c4 04             	add    esp,0x4
c001ace7:	5b                   	pop    ebx
c001ace8:	5e                   	pop    esi
c001ace9:	5f                   	pop    edi
c001acea:	5d                   	pop    ebp
c001aceb:	c3                   	ret    
c001acec:	83 c4 04             	add    esp,0x4
c001acef:	8d 46 02             	lea    eax,[esi+0x2]
c001acf2:	5b                   	pop    ebx
c001acf3:	5e                   	pop    esi
c001acf4:	5f                   	pop    edi
c001acf5:	5d                   	pop    ebp
c001acf6:	c3                   	ret    
c001acf7:	90                   	nop
c001acf8:	83 c4 04             	add    esp,0x4
c001acfb:	31 c0                	xor    eax,eax
c001acfd:	5b                   	pop    ebx
c001acfe:	5e                   	pop    esi
c001acff:	5f                   	pop    edi
c001ad00:	5d                   	pop    ebp
c001ad01:	c3                   	ret    
c001ad02:	66 90                	xchg   ax,ax
c001ad04:	b8 01 00 00 00       	mov    eax,0x1
c001ad09:	eb d9                	jmp    c001ace4 <SoundPort::buffer32(int*, int)+0x64>
c001ad0b:	90                   	nop

c001ad0c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001ad0c:	57                   	push   edi
c001ad0d:	56                   	push   esi
c001ad0e:	53                   	push   ebx
c001ad0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ad13:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ad17:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001ad1d:	39 03                	cmp    DWORD PTR [ebx],eax
c001ad1f:	74 13                	je     c001ad34 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001ad21:	83 ec 0c             	sub    esp,0xc
c001ad24:	68 0c 2d 02 c0       	push   0xc0022d0c
c001ad29:	e8 4f 66 ff ff       	call   c001137d <KePanic(char const*)>
c001ad2e:	83 c4 10             	add    esp,0x10
c001ad31:	8d 76 00             	lea    esi,[esi+0x0]
c001ad34:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001ad3a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ad3d:	74 11                	je     c001ad50 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001ad3f:	83 ec 0c             	sub    esp,0xc
c001ad42:	68 4b 2d 02 c0       	push   0xc0022d4b
c001ad47:	e8 31 66 ff ff       	call   c001137d <KePanic(char const*)>
c001ad4c:	83 c4 10             	add    esp,0x10
c001ad4f:	90                   	nop
c001ad50:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001ad56:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ad59:	74 11                	je     c001ad6c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001ad5b:	83 ec 0c             	sub    esp,0xc
c001ad5e:	68 4b 2d 02 c0       	push   0xc0022d4b
c001ad63:	e8 15 66 ff ff       	call   c001137d <KePanic(char const*)>
c001ad68:	83 c4 10             	add    esp,0x10
c001ad6b:	90                   	nop
c001ad6c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ad6f:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001ad73:	7e 07                	jle    c001ad7c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001ad75:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ad79:	8d 76 00             	lea    esi,[esi+0x0]
c001ad7c:	85 f6                	test   esi,esi
c001ad7e:	7e 2c                	jle    c001adac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001ad80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ad84:	8d 3c 36             	lea    edi,[esi+esi*1]
c001ad87:	31 c9                	xor    ecx,ecx
c001ad89:	01 d7                	add    edi,edx
c001ad8b:	90                   	nop
c001ad8c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001ad8f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001ad92:	85 c0                	test   eax,eax
c001ad94:	79 06                	jns    c001ad9c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001ad96:	05 ff 7f 00 00       	add    eax,0x7fff
c001ad9b:	90                   	nop
c001ad9c:	c1 f8 0f             	sar    eax,0xf
c001ad9f:	83 c1 04             	add    ecx,0x4
c001ada2:	66 01 02             	add    WORD PTR [edx],ax
c001ada5:	83 c2 02             	add    edx,0x2
c001ada8:	39 d7                	cmp    edi,edx
c001adaa:	75 e0                	jne    c001ad8c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001adac:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001adaf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001adb2:	83 ec 04             	sub    esp,0x4
c001adb5:	29 f0                	sub    eax,esi
c001adb7:	c1 e0 02             	shl    eax,0x2
c001adba:	50                   	push   eax
c001adbb:	8d 04 b2             	lea    eax,[edx+esi*4]
c001adbe:	50                   	push   eax
c001adbf:	52                   	push   edx
c001adc0:	e8 0b 56 fe ff       	call   c00003d0 <memmove>
c001adc5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001adc8:	83 c4 10             	add    esp,0x10
c001adcb:	29 f0                	sub    eax,esi
c001adcd:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001add0:	89 f0                	mov    eax,esi
c001add2:	5b                   	pop    ebx
c001add3:	5e                   	pop    esi
c001add4:	5f                   	pop    edi
c001add5:	c3                   	ret    
c001add6:	66 90                	xchg   ax,ax

c001add8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001add8:	57                   	push   edi
c001add9:	56                   	push   esi
c001adda:	53                   	push   ebx
c001addb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001addf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ade3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ade7:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001aded:	39 06                	cmp    DWORD PTR [esi],eax
c001adef:	74 13                	je     c001ae04 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001adf1:	83 ec 0c             	sub    esp,0xc
c001adf4:	68 2c 2d 02 c0       	push   0xc0022d2c
c001adf9:	e8 7f 65 ff ff       	call   c001137d <KePanic(char const*)>
c001adfe:	83 c4 10             	add    esp,0x10
c001ae01:	8d 76 00             	lea    esi,[esi+0x0]
c001ae04:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001ae0a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001ae0d:	74 11                	je     c001ae20 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001ae0f:	83 ec 0c             	sub    esp,0xc
c001ae12:	68 67 2d 02 c0       	push   0xc0022d67
c001ae17:	e8 61 65 ff ff       	call   c001137d <KePanic(char const*)>
c001ae1c:	83 c4 10             	add    esp,0x10
c001ae1f:	90                   	nop
c001ae20:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001ae26:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001ae29:	74 11                	je     c001ae3c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001ae2b:	83 ec 0c             	sub    esp,0xc
c001ae2e:	68 67 2d 02 c0       	push   0xc0022d67
c001ae33:	e8 45 65 ff ff       	call   c001137d <KePanic(char const*)>
c001ae38:	83 c4 10             	add    esp,0x10
c001ae3b:	90                   	nop
c001ae3c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001ae3f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001ae43:	7e 07                	jle    c001ae4c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001ae45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ae49:	8d 76 00             	lea    esi,[esi+0x0]
c001ae4c:	85 ff                	test   edi,edi
c001ae4e:	7e 1c                	jle    c001ae6c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001ae50:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ae57:	31 c0                	xor    eax,eax
c001ae59:	8d 76 00             	lea    esi,[esi+0x0]
c001ae5c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ae5f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ae62:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001ae65:	83 c0 04             	add    eax,0x4
c001ae68:	39 c1                	cmp    ecx,eax
c001ae6a:	75 f0                	jne    c001ae5c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001ae6c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ae6f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ae72:	83 ec 04             	sub    esp,0x4
c001ae75:	29 f8                	sub    eax,edi
c001ae77:	c1 e0 02             	shl    eax,0x2
c001ae7a:	50                   	push   eax
c001ae7b:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ae7e:	50                   	push   eax
c001ae7f:	52                   	push   edx
c001ae80:	e8 4b 55 fe ff       	call   c00003d0 <memmove>
c001ae85:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae88:	83 c4 10             	add    esp,0x10
c001ae8b:	29 f8                	sub    eax,edi
c001ae8d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001ae90:	89 f8                	mov    eax,edi
c001ae92:	5b                   	pop    ebx
c001ae93:	5e                   	pop    esi
c001ae94:	5f                   	pop    edi
c001ae95:	c3                   	ret    

c001ae96 <PCI::open(int, int, void*)>:
c001ae96:	83 ec 18             	sub    esp,0x18
c001ae99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae9d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aea1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001aea7:	8b 10                	mov    edx,DWORD PTR [eax]
c001aea9:	50                   	push   eax
c001aeaa:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001aead:	31 c0                	xor    eax,eax
c001aeaf:	83 c4 1c             	add    esp,0x1c
c001aeb2:	c3                   	ret    
c001aeb3:	90                   	nop

c001aeb4 <PCI::close(int, int, void*)>:
c001aeb4:	31 c0                	xor    eax,eax
c001aeb6:	c3                   	ret    
c001aeb7:	90                   	nop

c001aeb8 <PCI::PCI()>:
c001aeb8:	83 ec 0c             	sub    esp,0xc
c001aebb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aebf:	83 ec 08             	sub    esp,0x8
c001aec2:	68 83 2d 02 c0       	push   0xc0022d83
c001aec7:	50                   	push   eax
c001aec8:	e8 e3 11 ff ff       	call   c000c0b0 <Bus::Bus(char const*)>
c001aecd:	83 c4 10             	add    esp,0x10
c001aed0:	ba 2c 2e 02 c0       	mov    edx,0xc0022e2c
c001aed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aed9:	89 10                	mov    DWORD PTR [eax],edx
c001aedb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aedf:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001aee9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeed:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c001aef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aef6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001aefc:	0f b6 d0             	movzx  edx,al
c001aeff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af03:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001af0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af0e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001af14:	0f b6 d0             	movzx  edx,al
c001af17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af1b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001af20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af24:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001af2a:	8d 50 01             	lea    edx,[eax+0x1]
c001af2d:	88 d1                	mov    cl,dl
c001af2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001af33:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001af39:	0f b6 d0             	movzx  edx,al
c001af3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af40:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001af44:	83 c9 c0             	or     ecx,0xffffffc0
c001af47:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001af4b:	90                   	nop
c001af4c:	83 c4 0c             	add    esp,0xc
c001af4f:	c3                   	ret    

c001af50 <PCI::readBAR8(unsigned int, int)>:
c001af50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af58:	f6 c2 01             	test   dl,0x1
c001af5b:	74 07                	je     c001af64 <PCI::readBAR8(unsigned int, int)+0x14>
c001af5d:	83 e2 fc             	and    edx,0xfffffffc
c001af60:	01 c2                	add    edx,eax
c001af62:	ec                   	in     al,dx
c001af63:	c3                   	ret    
c001af64:	83 e2 f0             	and    edx,0xfffffff0
c001af67:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001af6a:	c3                   	ret    
c001af6b:	90                   	nop

c001af6c <PCI::readBAR16(unsigned int, int)>:
c001af6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af74:	f6 c2 01             	test   dl,0x1
c001af77:	74 08                	je     c001af81 <PCI::readBAR16(unsigned int, int)+0x15>
c001af79:	83 e2 fc             	and    edx,0xfffffffc
c001af7c:	01 c2                	add    edx,eax
c001af7e:	66 ed                	in     ax,dx
c001af80:	c3                   	ret    
c001af81:	83 e2 f0             	and    edx,0xfffffff0
c001af84:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001af88:	c3                   	ret    
c001af89:	90                   	nop

c001af8a <PCI::readBAR32(unsigned int, int)>:
c001af8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001af8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af92:	f6 c2 01             	test   dl,0x1
c001af95:	74 07                	je     c001af9e <PCI::readBAR32(unsigned int, int)+0x14>
c001af97:	83 e2 fc             	and    edx,0xfffffffc
c001af9a:	01 c2                	add    edx,eax
c001af9c:	ed                   	in     eax,dx
c001af9d:	c3                   	ret    
c001af9e:	83 e2 f0             	and    edx,0xfffffff0
c001afa1:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001afa4:	c3                   	ret    
c001afa5:	90                   	nop

c001afa6 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001afa6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001afaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001afae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001afb2:	f6 c2 01             	test   dl,0x1
c001afb5:	74 07                	je     c001afbe <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001afb7:	83 e2 fc             	and    edx,0xfffffffc
c001afba:	01 ca                	add    edx,ecx
c001afbc:	ee                   	out    dx,al
c001afbd:	c3                   	ret    
c001afbe:	83 e2 f0             	and    edx,0xfffffff0
c001afc1:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001afc4:	c3                   	ret    
c001afc5:	90                   	nop

c001afc6 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001afc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001afca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001afce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001afd2:	f6 c2 01             	test   dl,0x1
c001afd5:	74 08                	je     c001afdf <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001afd7:	83 e2 fc             	and    edx,0xfffffffc
c001afda:	01 ca                	add    edx,ecx
c001afdc:	66 ef                	out    dx,ax
c001afde:	c3                   	ret    
c001afdf:	83 e2 f0             	and    edx,0xfffffff0
c001afe2:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001afe6:	c3                   	ret    
c001afe7:	90                   	nop

c001afe8 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001afe8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001afec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aff0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aff4:	f6 c2 01             	test   dl,0x1
c001aff7:	74 07                	je     c001b000 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001aff9:	83 e2 fc             	and    edx,0xfffffffc
c001affc:	01 ca                	add    edx,ecx
c001affe:	ef                   	out    dx,eax
c001afff:	c3                   	ret    
c001b000:	83 e2 f0             	and    edx,0xfffffff0
c001b003:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b006:	c3                   	ret    
c001b007:	90                   	nop

c001b008 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b008:	55                   	push   ebp
c001b009:	57                   	push   edi
c001b00a:	56                   	push   esi
c001b00b:	53                   	push   ebx
c001b00c:	83 ec 0c             	sub    esp,0xc
c001b00f:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b014:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b018:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b01c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b020:	83 fe 07             	cmp    esi,0x7
c001b023:	76 10                	jbe    c001b035 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b025:	83 ec 0c             	sub    esp,0xc
c001b028:	68 8b 2d 02 c0       	push   0xc0022d8b
c001b02d:	e8 4b 63 ff ff       	call   c001137d <KePanic(char const*)>
c001b032:	83 c4 10             	add    esp,0x10
c001b035:	0f b6 db             	movzx  ebx,bl
c001b038:	83 fb 0f             	cmp    ebx,0xf
c001b03b:	76 10                	jbe    c001b04d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b03d:	83 ec 0c             	sub    esp,0xc
c001b040:	68 bb 2d 02 c0       	push   0xc0022dbb
c001b045:	e8 33 63 ff ff       	call   c001137d <KePanic(char const*)>
c001b04a:	83 c4 10             	add    esp,0x10
c001b04d:	8d 04 36             	lea    eax,[esi+esi*1]
c001b050:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b055:	83 c8 f0             	or     eax,0xfffffff0
c001b058:	ee                   	out    dx,al
c001b059:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b05e:	89 e8                	mov    eax,ebp
c001b060:	ee                   	out    dx,al
c001b061:	83 c4 0c             	add    esp,0xc
c001b064:	89 d8                	mov    eax,ebx
c001b066:	89 f9                	mov    ecx,edi
c001b068:	c1 e0 08             	shl    eax,0x8
c001b06b:	0f b6 d9             	movzx  ebx,cl
c001b06e:	83 e3 fc             	and    ebx,0xfffffffc
c001b071:	09 d8                	or     eax,ebx
c001b073:	5b                   	pop    ebx
c001b074:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b079:	5e                   	pop    esi
c001b07a:	5f                   	pop    edi
c001b07b:	5d                   	pop    ebp
c001b07c:	c3                   	ret    
c001b07d:	90                   	nop

c001b07e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b07e:	57                   	push   edi
c001b07f:	56                   	push   esi
c001b080:	53                   	push   ebx
c001b081:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b085:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b089:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b08f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b093:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b097:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b09b:	83 ff 01             	cmp    edi,0x1
c001b09e:	75 3f                	jne    c001b0df <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b0a0:	89 de                	mov    esi,ebx
c001b0a2:	0f b6 c0             	movzx  eax,al
c001b0a5:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b0ab:	c1 e0 10             	shl    eax,0x10
c001b0ae:	0f b6 c9             	movzx  ecx,cl
c001b0b1:	09 f0                	or     eax,esi
c001b0b3:	c1 e1 08             	shl    ecx,0x8
c001b0b6:	0f b6 d2             	movzx  edx,dl
c001b0b9:	09 c8                	or     eax,ecx
c001b0bb:	c1 e2 0b             	shl    edx,0xb
c001b0be:	09 d0                	or     eax,edx
c001b0c0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b0c5:	0d 00 00 00 80       	or     eax,0x80000000
c001b0ca:	ef                   	out    dx,eax
c001b0cb:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b0d0:	ed                   	in     eax,dx
c001b0d1:	83 e3 02             	and    ebx,0x2
c001b0d4:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b0db:	d3 e8                	shr    eax,cl
c001b0dd:	eb 44                	jmp    c001b123 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b0df:	83 ff 02             	cmp    edi,0x2
c001b0e2:	75 2d                	jne    c001b111 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b0e4:	83 ec 0c             	sub    esp,0xc
c001b0e7:	0f b6 c9             	movzx  ecx,cl
c001b0ea:	0f b6 d2             	movzx  edx,dl
c001b0ed:	0f b6 fb             	movzx  edi,bl
c001b0f0:	0f b6 c0             	movzx  eax,al
c001b0f3:	57                   	push   edi
c001b0f4:	51                   	push   ecx
c001b0f5:	52                   	push   edx
c001b0f6:	50                   	push   eax
c001b0f7:	56                   	push   esi
c001b0f8:	e8 0b ff ff ff       	call   c001b008 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0fd:	89 c2                	mov    edx,eax
c001b0ff:	ed                   	in     eax,dx
c001b100:	83 e3 02             	and    ebx,0x2
c001b103:	83 c4 20             	add    esp,0x20
c001b106:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b10d:	d3 e8                	shr    eax,cl
c001b10f:	eb 12                	jmp    c001b123 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b111:	83 ec 0c             	sub    esp,0xc
c001b114:	68 eb 2d 02 c0       	push   0xc0022deb
c001b119:	e8 5f 62 ff ff       	call   c001137d <KePanic(char const*)>
c001b11e:	83 c4 10             	add    esp,0x10
c001b121:	31 c0                	xor    eax,eax
c001b123:	5b                   	pop    ebx
c001b124:	5e                   	pop    esi
c001b125:	5f                   	pop    edi
c001b126:	c3                   	ret    
c001b127:	90                   	nop

c001b128 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b128:	83 ec 18             	sub    esp,0x18
c001b12b:	6a 00                	push   0x0
c001b12d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b132:	50                   	push   eax
c001b133:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b138:	50                   	push   eax
c001b139:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b13e:	50                   	push   eax
c001b13f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b143:	e8 36 ff ff ff       	call   c001b07e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b148:	83 c4 2c             	add    esp,0x2c
c001b14b:	c3                   	ret    

c001b14c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b14c:	83 ec 18             	sub    esp,0x18
c001b14f:	6a 0e                	push   0xe
c001b151:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b156:	50                   	push   eax
c001b157:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b15c:	50                   	push   eax
c001b15d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b162:	50                   	push   eax
c001b163:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b167:	e8 12 ff ff ff       	call   c001b07e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b16c:	83 c4 2c             	add    esp,0x2c
c001b16f:	0f b6 c0             	movzx  eax,al
c001b172:	c3                   	ret    
c001b173:	90                   	nop

c001b174 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b174:	55                   	push   ebp
c001b175:	57                   	push   edi
c001b176:	56                   	push   esi
c001b177:	53                   	push   ebx
c001b178:	83 ec 18             	sub    esp,0x18
c001b17b:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b180:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b185:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b18a:	6a 0a                	push   0xa
c001b18c:	56                   	push   esi
c001b18d:	55                   	push   ebp
c001b18e:	57                   	push   edi
c001b18f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b193:	e8 e6 fe ff ff       	call   c001b07e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b198:	83 c4 14             	add    esp,0x14
c001b19b:	89 c3                	mov    ebx,eax
c001b19d:	6a 0a                	push   0xa
c001b19f:	0f b6 db             	movzx  ebx,bl
c001b1a2:	56                   	push   esi
c001b1a3:	55                   	push   ebp
c001b1a4:	57                   	push   edi
c001b1a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b1a9:	e8 d0 fe ff ff       	call   c001b07e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1ae:	83 c4 2c             	add    esp,0x2c
c001b1b1:	25 00 ff 00 00       	and    eax,0xff00
c001b1b6:	09 d8                	or     eax,ebx
c001b1b8:	5b                   	pop    ebx
c001b1b9:	5e                   	pop    esi
c001b1ba:	5f                   	pop    edi
c001b1bb:	5d                   	pop    ebp
c001b1bc:	c3                   	ret    
c001b1bd:	90                   	nop

c001b1be <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b1be:	83 ec 18             	sub    esp,0x18
c001b1c1:	6a 08                	push   0x8
c001b1c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b1c8:	50                   	push   eax
c001b1c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b1ce:	50                   	push   eax
c001b1cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b1d4:	50                   	push   eax
c001b1d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1d9:	e8 a0 fe ff ff       	call   c001b07e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1de:	83 c4 2c             	add    esp,0x2c
c001b1e1:	0f b6 c4             	movzx  eax,ah
c001b1e4:	c3                   	ret    
c001b1e5:	90                   	nop

c001b1e6 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b1e6:	83 ec 18             	sub    esp,0x18
c001b1e9:	6a 08                	push   0x8
c001b1eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b1f0:	50                   	push   eax
c001b1f1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b1f6:	50                   	push   eax
c001b1f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b1fc:	50                   	push   eax
c001b1fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b201:	e8 78 fe ff ff       	call   c001b07e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b206:	83 c4 2c             	add    esp,0x2c
c001b209:	c3                   	ret    

c001b20a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b20a:	83 ec 18             	sub    esp,0x18
c001b20d:	6a 3c                	push   0x3c
c001b20f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b214:	50                   	push   eax
c001b215:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b21a:	50                   	push   eax
c001b21b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b220:	50                   	push   eax
c001b221:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b225:	e8 54 fe ff ff       	call   c001b07e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b22a:	83 c4 2c             	add    esp,0x2c
c001b22d:	c3                   	ret    

c001b22e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b22e:	83 ec 18             	sub    esp,0x18
c001b231:	6a 18                	push   0x18
c001b233:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b238:	50                   	push   eax
c001b239:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b23e:	50                   	push   eax
c001b23f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b244:	50                   	push   eax
c001b245:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b249:	e8 30 fe ff ff       	call   c001b07e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b24e:	83 c4 2c             	add    esp,0x2c
c001b251:	0f b6 c4             	movzx  eax,ah
c001b254:	c3                   	ret    
c001b255:	90                   	nop

c001b256 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b256:	55                   	push   ebp
c001b257:	57                   	push   edi
c001b258:	56                   	push   esi
c001b259:	53                   	push   ebx
c001b25a:	83 ec 28             	sub    esp,0x28
c001b25d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b261:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b266:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b26b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b270:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b277:	8d 43 12             	lea    eax,[ebx+0x12]
c001b27a:	83 c3 10             	add    ebx,0x10
c001b27d:	0f b6 c0             	movzx  eax,al
c001b280:	0f b6 db             	movzx  ebx,bl
c001b283:	50                   	push   eax
c001b284:	51                   	push   ecx
c001b285:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b289:	57                   	push   edi
c001b28a:	55                   	push   ebp
c001b28b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b28f:	e8 ea fd ff ff       	call   c001b07e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b294:	83 c4 14             	add    esp,0x14
c001b297:	89 c6                	mov    esi,eax
c001b299:	53                   	push   ebx
c001b29a:	c1 e6 10             	shl    esi,0x10
c001b29d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b2a1:	51                   	push   ecx
c001b2a2:	57                   	push   edi
c001b2a3:	55                   	push   ebp
c001b2a4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b2a8:	e8 d1 fd ff ff       	call   c001b07e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b2ad:	83 c4 3c             	add    esp,0x3c
c001b2b0:	0f b7 c0             	movzx  eax,ax
c001b2b3:	5b                   	pop    ebx
c001b2b4:	09 f0                	or     eax,esi
c001b2b6:	5e                   	pop    esi
c001b2b7:	5f                   	pop    edi
c001b2b8:	5d                   	pop    ebp
c001b2b9:	c3                   	ret    

c001b2ba <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b2ba:	55                   	push   ebp
c001b2bb:	57                   	push   edi
c001b2bc:	56                   	push   esi
c001b2bd:	53                   	push   ebx
c001b2be:	83 ec 0c             	sub    esp,0xc
c001b2c1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b2c5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b2c9:	89 f5                	mov    ebp,esi
c001b2cb:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b2d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b2d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b2d9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b2dd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b2e1:	83 f9 01             	cmp    ecx,0x1
c001b2e4:	75 5d                	jne    c001b343 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b2e6:	0f b6 c8             	movzx  ecx,al
c001b2e9:	0f b6 d2             	movzx  edx,dl
c001b2ec:	c1 e1 10             	shl    ecx,0x10
c001b2ef:	c1 e2 0b             	shl    edx,0xb
c001b2f2:	89 f0                	mov    eax,esi
c001b2f4:	25 fc 00 00 00       	and    eax,0xfc
c001b2f9:	09 c1                	or     ecx,eax
c001b2fb:	89 e8                	mov    eax,ebp
c001b2fd:	0f b6 c0             	movzx  eax,al
c001b300:	c1 e0 08             	shl    eax,0x8
c001b303:	09 c1                	or     ecx,eax
c001b305:	09 d1                	or     ecx,edx
c001b307:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b30c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b312:	89 c8                	mov    eax,ecx
c001b314:	ef                   	out    dx,eax
c001b315:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b31a:	ed                   	in     eax,dx
c001b31b:	0f b7 db             	movzx  ebx,bx
c001b31e:	83 e6 02             	and    esi,0x2
c001b321:	74 0a                	je     c001b32d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b323:	0f b7 d0             	movzx  edx,ax
c001b326:	c1 e3 10             	shl    ebx,0x10
c001b329:	09 d3                	or     ebx,edx
c001b32b:	eb 05                	jmp    c001b332 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b32d:	66 31 c0             	xor    ax,ax
c001b330:	09 c3                	or     ebx,eax
c001b332:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b337:	89 c8                	mov    eax,ecx
c001b339:	ef                   	out    dx,eax
c001b33a:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b33f:	89 d8                	mov    eax,ebx
c001b341:	eb 41                	jmp    c001b384 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b343:	83 f9 02             	cmp    ecx,0x2
c001b346:	75 45                	jne    c001b38d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b348:	83 ec 0c             	sub    esp,0xc
c001b34b:	0f b6 d2             	movzx  edx,dl
c001b34e:	89 f1                	mov    ecx,esi
c001b350:	0f b6 c0             	movzx  eax,al
c001b353:	0f b6 f1             	movzx  esi,cl
c001b356:	89 e9                	mov    ecx,ebp
c001b358:	56                   	push   esi
c001b359:	0f b6 c9             	movzx  ecx,cl
c001b35c:	51                   	push   ecx
c001b35d:	52                   	push   edx
c001b35e:	50                   	push   eax
c001b35f:	57                   	push   edi
c001b360:	e8 a3 fc ff ff       	call   c001b008 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b365:	89 c2                	mov    edx,eax
c001b367:	ed                   	in     eax,dx
c001b368:	83 c4 20             	add    esp,0x20
c001b36b:	0f b7 db             	movzx  ebx,bx
c001b36e:	f6 c2 02             	test   dl,0x2
c001b371:	74 0c                	je     c001b37f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b373:	0f b7 c8             	movzx  ecx,ax
c001b376:	89 d8                	mov    eax,ebx
c001b378:	c1 e0 10             	shl    eax,0x10
c001b37b:	09 c8                	or     eax,ecx
c001b37d:	eb 05                	jmp    c001b384 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b37f:	66 31 c0             	xor    ax,ax
c001b382:	09 d8                	or     eax,ebx
c001b384:	ef                   	out    dx,eax
c001b385:	83 c4 0c             	add    esp,0xc
c001b388:	5b                   	pop    ebx
c001b389:	5e                   	pop    esi
c001b38a:	5f                   	pop    edi
c001b38b:	5d                   	pop    ebp
c001b38c:	c3                   	ret    
c001b38d:	c7 44 24 20 eb 2d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022deb
c001b395:	83 c4 0c             	add    esp,0xc
c001b398:	5b                   	pop    ebx
c001b399:	5e                   	pop    esi
c001b39a:	5f                   	pop    edi
c001b39b:	5d                   	pop    ebp
c001b39c:	e9 dc 5f ff ff       	jmp    c001137d <KePanic(char const*)>
c001b3a1:	90                   	nop

c001b3a2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b3a2:	55                   	push   ebp
c001b3a3:	57                   	push   edi
c001b3a4:	56                   	push   esi
c001b3a5:	53                   	push   ebx
c001b3a6:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b3ac:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b3b3:	80 3d ac a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0ac,0x0
c001b3ba:	0f 85 bd 00 00 00    	jne    c001b47d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b3c0:	83 ec 0c             	sub    esp,0xc
c001b3c3:	68 14 01 00 00       	push   0x114
c001b3c8:	e8 e9 c6 fe ff       	call   c0007ab6 <malloc>
c001b3cd:	83 c4 0c             	add    esp,0xc
c001b3d0:	89 c3                	mov    ebx,eax
c001b3d2:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001b3d8:	68 f1 2d 02 c0       	push   0xc0022df1
c001b3dd:	50                   	push   eax
c001b3de:	e8 f3 04 ff ff       	call   c000b8d6 <File::File(char const*, Process*)>
c001b3e3:	83 c4 10             	add    esp,0x10
c001b3e6:	85 db                	test   ebx,ebx
c001b3e8:	0f 84 67 02 00 00    	je     c001b655 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b3ee:	56                   	push   esi
c001b3ef:	56                   	push   esi
c001b3f0:	6a 01                	push   0x1
c001b3f2:	53                   	push   ebx
c001b3f3:	e8 fc 04 ff ff       	call   c000b8f4 <File::open(FileOpenMode)>
c001b3f8:	83 c4 10             	add    esp,0x10
c001b3fb:	85 c0                	test   eax,eax
c001b3fd:	0f 85 52 02 00 00    	jne    c001b655 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b403:	52                   	push   edx
c001b404:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b408:	50                   	push   eax
c001b409:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b40d:	50                   	push   eax
c001b40e:	53                   	push   ebx
c001b40f:	e8 e2 07 ff ff       	call   c000bbf6 <File::stat(unsigned long long*, bool*)>
c001b414:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b418:	40                   	inc    eax
c001b419:	89 04 24             	mov    DWORD PTR [esp],eax
c001b41c:	e8 95 c6 fe ff       	call   c0007ab6 <malloc>
c001b421:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b425:	a3 a8 a0 02 c0       	mov    ds:0xc002a0a8,eax
c001b42a:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b42e:	59                   	pop    ecx
c001b42f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b431:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b435:	51                   	push   ecx
c001b436:	50                   	push   eax
c001b437:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b43b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b43f:	53                   	push   ebx
c001b440:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b443:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b447:	83 c4 20             	add    esp,0x20
c001b44a:	89 c8                	mov    eax,ecx
c001b44c:	99                   	cdq    
c001b44d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b451:	0f 85 fe 01 00 00    	jne    c001b655 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b457:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b45b:	0f 85 f4 01 00 00    	jne    c001b655 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b461:	83 ec 0c             	sub    esp,0xc
c001b464:	53                   	push   ebx
c001b465:	e8 e8 04 ff ff       	call   c000b952 <File::close()>
c001b46a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b46e:	c6 05 ac a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0ac,0x1
c001b475:	a3 a4 a0 02 c0       	mov    ds:0xc002a0a4,eax
c001b47a:	83 c4 10             	add    esp,0x10
c001b47d:	a1 a4 a0 02 c0       	mov    eax,ds:0xc002a0a4
c001b482:	8b 1d a8 a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a0a8
c001b488:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b48c:	31 f6                	xor    esi,esi
c001b48e:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b496:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b49d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b4a2:	31 c9                	xor    ecx,ecx
c001b4a4:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b4ac:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b4b1:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b4b9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b4bd:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b4c5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b4c9:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b4cd:	0f 8e 82 01 00 00    	jle    c001b655 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b4d3:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b4d6:	d4 40                	aam    0x40
c001b4d8:	d5 39                	aad    0x39
c001b4da:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b4de:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b4e2:	d4 40                	aam    0x40
c001b4e4:	d5 39                	aad    0x39
c001b4e6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b4ea:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b4ee:	d4 40                	aam    0x40
c001b4f0:	d5 39                	aad    0x39
c001b4f2:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b4f6:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b4fa:	d4 40                	aam    0x40
c001b4fc:	d5 39                	aad    0x39
c001b4fe:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b502:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b506:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b50a:	3c 56                	cmp    al,0x56
c001b50c:	74 43                	je     c001b551 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b50e:	d4 40                	aam    0x40
c001b510:	d5 39                	aad    0x39
c001b512:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b515:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b519:	0f b6 c9             	movzx  ecx,cl
c001b51c:	c1 e1 04             	shl    ecx,0x4
c001b51f:	d4 40                	aam    0x40
c001b521:	d5 39                	aad    0x39
c001b523:	83 e8 30             	sub    eax,0x30
c001b526:	0f b6 c0             	movzx  eax,al
c001b529:	09 c1                	or     ecx,eax
c001b52b:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b52f:	c1 e1 04             	shl    ecx,0x4
c001b532:	d4 40                	aam    0x40
c001b534:	d5 39                	aad    0x39
c001b536:	83 e8 30             	sub    eax,0x30
c001b539:	0f b6 c0             	movzx  eax,al
c001b53c:	09 c1                	or     ecx,eax
c001b53e:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b542:	c1 e1 04             	shl    ecx,0x4
c001b545:	d4 40                	aam    0x40
c001b547:	d5 39                	aad    0x39
c001b549:	83 e8 30             	sub    eax,0x30
c001b54c:	0f b6 c0             	movzx  eax,al
c001b54f:	09 c1                	or     ecx,eax
c001b551:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b555:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b559:	3c 58                	cmp    al,0x58
c001b55b:	74 47                	je     c001b5a4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b55d:	d4 40                	aam    0x40
c001b55f:	d5 39                	aad    0x39
c001b561:	8d 50 d0             	lea    edx,[eax-0x30]
c001b564:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b568:	0f b6 d2             	movzx  edx,dl
c001b56b:	c1 e2 04             	shl    edx,0x4
c001b56e:	d4 40                	aam    0x40
c001b570:	d5 39                	aad    0x39
c001b572:	83 e8 30             	sub    eax,0x30
c001b575:	0f b6 c0             	movzx  eax,al
c001b578:	09 c2                	or     edx,eax
c001b57a:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b57e:	c1 e2 04             	shl    edx,0x4
c001b581:	d4 40                	aam    0x40
c001b583:	d5 39                	aad    0x39
c001b585:	83 e8 30             	sub    eax,0x30
c001b588:	0f b6 c0             	movzx  eax,al
c001b58b:	09 c2                	or     edx,eax
c001b58d:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b591:	c1 e2 04             	shl    edx,0x4
c001b594:	d4 40                	aam    0x40
c001b596:	d5 39                	aad    0x39
c001b598:	83 e8 30             	sub    eax,0x30
c001b59b:	0f b6 c0             	movzx  eax,al
c001b59e:	09 c2                	or     edx,eax
c001b5a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b5a4:	83 c6 10             	add    esi,0x10
c001b5a7:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b5ab:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b5af:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b5b3:	83 fa 0a             	cmp    edx,0xa
c001b5b6:	74 0b                	je     c001b5c3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b5b8:	47                   	inc    edi
c001b5b9:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b5bd:	75 19                	jne    c001b5d8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b5bf:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b5c3:	31 c0                	xor    eax,eax
c001b5c5:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b5ca:	0f 94 c0             	sete   al
c001b5cd:	01 c6                	add    esi,eax
c001b5cf:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b5d4:	75 0b                	jne    c001b5e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b5d6:	eb 14                	jmp    c001b5ec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b5d8:	46                   	inc    esi
c001b5d9:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b5dc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b5df:	eb ca                	jmp    c001b5ab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b5e1:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b5e6:	0f 85 dd fe ff ff    	jne    c001b4c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b5ec:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b5f1:	74 10                	je     c001b603 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b5f3:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b5f8:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b5fd:	0f 85 c6 fe ff ff    	jne    c001b4c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b603:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b607:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b60b:	83 e8 30             	sub    eax,0x30
c001b60e:	83 ef 30             	sub    edi,0x30
c001b611:	c1 e0 04             	shl    eax,0x4
c001b614:	09 f8                	or     eax,edi
c001b616:	0f b6 c0             	movzx  eax,al
c001b619:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b61d:	0f 85 a6 fe ff ff    	jne    c001b4c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b623:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b627:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b62b:	83 e8 30             	sub    eax,0x30
c001b62e:	83 ef 30             	sub    edi,0x30
c001b631:	c1 e0 04             	shl    eax,0x4
c001b634:	09 f8                	or     eax,edi
c001b636:	0f b6 c0             	movzx  eax,al
c001b639:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b63d:	0f 85 86 fe ff ff    	jne    c001b4c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b643:	50                   	push   eax
c001b644:	50                   	push   eax
c001b645:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b649:	50                   	push   eax
c001b64a:	55                   	push   ebp
c001b64b:	e8 f0 4f fe ff       	call   c0000640 <strcpy>
c001b650:	83 c4 10             	add    esp,0x10
c001b653:	eb 06                	jmp    c001b65b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b655:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b659:	31 ed                	xor    ebp,ebp
c001b65b:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b661:	89 e8                	mov    eax,ebp
c001b663:	5b                   	pop    ebx
c001b664:	5e                   	pop    esi
c001b665:	5f                   	pop    edi
c001b666:	5d                   	pop    ebp
c001b667:	c3                   	ret    

c001b668 <PCI::checkBus(unsigned char)>:
c001b668:	56                   	push   esi
c001b669:	53                   	push   ebx
c001b66a:	31 db                	xor    ebx,ebx
c001b66c:	51                   	push   ecx
c001b66d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b672:	52                   	push   edx
c001b673:	53                   	push   ebx
c001b674:	43                   	inc    ebx
c001b675:	56                   	push   esi
c001b676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b67a:	e8 03 03 00 00       	call   c001b982 <PCI::checkDevice(unsigned char, unsigned char)>
c001b67f:	83 c4 10             	add    esp,0x10
c001b682:	83 fb 20             	cmp    ebx,0x20
c001b685:	75 eb                	jne    c001b672 <PCI::checkBus(unsigned char)+0xa>
c001b687:	58                   	pop    eax
c001b688:	5b                   	pop    ebx
c001b689:	5e                   	pop    esi
c001b68a:	c3                   	ret    
c001b68b:	90                   	nop

c001b68c <PCI::foundDevice(PCIDeviceInfo)>:
c001b68c:	55                   	push   ebp
c001b68d:	57                   	push   edi
c001b68e:	56                   	push   esi
c001b68f:	53                   	push   ebx
c001b690:	83 ec 1c             	sub    esp,0x1c
c001b693:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b698:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b69c:	3d ff ff 00 00       	cmp    eax,0xffff
c001b6a1:	0f 84 57 01 00 00    	je     c001b7fe <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b6a7:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b6ac:	66 3d 06 04          	cmp    ax,0x406
c001b6b0:	75 2c                	jne    c001b6de <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b6b2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b6b7:	50                   	push   eax
c001b6b8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b6bd:	50                   	push   eax
c001b6be:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b6c3:	50                   	push   eax
c001b6c4:	53                   	push   ebx
c001b6c5:	e8 64 fb ff ff       	call   c001b22e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b6ca:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b6ce:	0f b6 c0             	movzx  eax,al
c001b6d1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b6d5:	83 c4 2c             	add    esp,0x2c
c001b6d8:	5b                   	pop    ebx
c001b6d9:	5e                   	pop    esi
c001b6da:	5f                   	pop    edi
c001b6db:	5d                   	pop    ebp
c001b6dc:	eb 8a                	jmp    c001b668 <PCI::checkBus(unsigned char)>
c001b6de:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b6e2:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b6e8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b6ec:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b6f0:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001b6f5:	85 d2                	test   edx,edx
c001b6f7:	74 36                	je     c001b72f <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001b6f9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b6fc:	85 c9                	test   ecx,ecx
c001b6fe:	74 2b                	je     c001b72b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b700:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001b706:	31 ee                	xor    esi,ebp
c001b708:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001b70e:	75 1b                	jne    c001b72b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b710:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001b714:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001b71a:	75 0f                	jne    c001b72b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b71c:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b723:	39 f9                	cmp    ecx,edi
c001b725:	0f 84 d3 00 00 00    	je     c001b7fe <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b72b:	8b 12                	mov    edx,DWORD PTR [edx]
c001b72d:	eb c6                	jmp    c001b6f5 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b72f:	3d 01 06 00 00       	cmp    eax,0x601
c001b734:	75 19                	jne    c001b74f <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001b736:	83 ec 0c             	sub    esp,0xc
c001b739:	68 64 01 00 00       	push   0x164
c001b73e:	e8 73 c3 fe ff       	call   c0007ab6 <malloc>
c001b743:	89 c5                	mov    ebp,eax
c001b745:	89 04 24             	mov    DWORD PTR [esp],eax
c001b748:	e8 a1 0e 00 00       	call   c001c5ee <SATABus::SATABus()>
c001b74d:	eb 1e                	jmp    c001b76d <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001b74f:	3d 01 01 00 00       	cmp    eax,0x101
c001b754:	75 62                	jne    c001b7b8 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001b756:	83 ec 0c             	sub    esp,0xc
c001b759:	68 70 02 00 00       	push   0x270
c001b75e:	e8 53 c3 fe ff       	call   c0007ab6 <malloc>
c001b763:	89 c5                	mov    ebp,eax
c001b765:	89 04 24             	mov    DWORD PTR [esp],eax
c001b768:	e8 e5 02 00 00       	call   c001ba52 <IDE::IDE()>
c001b76d:	5f                   	pop    edi
c001b76e:	58                   	pop    eax
c001b76f:	55                   	push   ebp
c001b770:	53                   	push   ebx
c001b771:	e8 d8 0f ff ff       	call   c000c74e <Device::addChild(Device*)>
c001b776:	83 ec 1c             	sub    esp,0x1c
c001b779:	b9 09 00 00 00       	mov    ecx,0x9
c001b77e:	fc                   	cld    
c001b77f:	89 e7                	mov    edi,esp
c001b781:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b785:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b787:	55                   	push   ebp
c001b788:	e8 07 0f ff ff       	call   c000c694 <Device::preOpenPCI(PCIDeviceInfo)>
c001b78d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b790:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b794:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b79c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b7a4:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b7ac:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b7af:	83 c4 4c             	add    esp,0x4c
c001b7b2:	5b                   	pop    ebx
c001b7b3:	5e                   	pop    esi
c001b7b4:	5f                   	pop    edi
c001b7b5:	5d                   	pop    ebp
c001b7b6:	ff e0                	jmp    eax
c001b7b8:	83 ec 0c             	sub    esp,0xc
c001b7bb:	68 58 01 00 00       	push   0x158
c001b7c0:	e8 f1 c2 fe ff       	call   c0007ab6 <malloc>
c001b7c5:	89 c5                	mov    ebp,eax
c001b7c7:	58                   	pop    eax
c001b7c8:	5a                   	pop    edx
c001b7c9:	68 0a 2e 02 c0       	push   0xc0022e0a
c001b7ce:	55                   	push   ebp
c001b7cf:	e8 18 12 ff ff       	call   c000c9ec <DriverlessDevice::DriverlessDevice(char const*)>
c001b7d4:	59                   	pop    ecx
c001b7d5:	5e                   	pop    esi
c001b7d6:	55                   	push   ebp
c001b7d7:	53                   	push   ebx
c001b7d8:	e8 71 0f ff ff       	call   c000c74e <Device::addChild(Device*)>
c001b7dd:	83 c4 10             	add    esp,0x10
c001b7e0:	b9 09 00 00 00       	mov    ecx,0x9
c001b7e5:	fc                   	cld    
c001b7e6:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b7ea:	89 fe                	mov    esi,edi
c001b7ec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b7ee:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001b7f2:	83 c4 1c             	add    esp,0x1c
c001b7f5:	5b                   	pop    ebx
c001b7f6:	5e                   	pop    esi
c001b7f7:	5f                   	pop    edi
c001b7f8:	5d                   	pop    ebp
c001b7f9:	e9 96 0e ff ff       	jmp    c000c694 <Device::preOpenPCI(PCIDeviceInfo)>
c001b7fe:	83 c4 1c             	add    esp,0x1c
c001b801:	5b                   	pop    ebx
c001b802:	5e                   	pop    esi
c001b803:	5f                   	pop    edi
c001b804:	5d                   	pop    ebp
c001b805:	c3                   	ret    

c001b806 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b806:	55                   	push   ebp
c001b807:	57                   	push   edi
c001b808:	56                   	push   esi
c001b809:	53                   	push   ebx
c001b80a:	83 ec 68             	sub    esp,0x68
c001b80d:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b811:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b818:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b81c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b823:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b828:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b82c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b833:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b838:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b83c:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b841:	6a 0c                	push   0xc
c001b843:	57                   	push   edi
c001b844:	53                   	push   ebx
c001b845:	56                   	push   esi
c001b846:	55                   	push   ebp
c001b847:	e8 32 f8 ff ff       	call   c001b07e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b84c:	83 c4 20             	add    esp,0x20
c001b84f:	57                   	push   edi
c001b850:	53                   	push   ebx
c001b851:	56                   	push   esi
c001b852:	55                   	push   ebp
c001b853:	e8 1c f9 ff ff       	call   c001b174 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b858:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b85d:	57                   	push   edi
c001b85e:	53                   	push   ebx
c001b85f:	56                   	push   esi
c001b860:	55                   	push   ebp
c001b861:	e8 a4 f9 ff ff       	call   c001b20a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b866:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b86a:	83 c4 14             	add    esp,0x14
c001b86d:	6a 3c                	push   0x3c
c001b86f:	57                   	push   edi
c001b870:	53                   	push   ebx
c001b871:	56                   	push   esi
c001b872:	55                   	push   ebp
c001b873:	e8 06 f8 ff ff       	call   c001b07e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b878:	0f b6 c4             	movzx  eax,ah
c001b87b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b87f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b883:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b887:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b88c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b892:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b898:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b89c:	83 c4 20             	add    esp,0x20
c001b89f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b8a4:	74 30                	je     c001b8d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b8a6:	31 c0                	xor    eax,eax
c001b8a8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b8ac:	7e 28                	jle    c001b8d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b8ae:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b8b6:	39 cb                	cmp    ebx,ecx
c001b8b8:	75 19                	jne    c001b8d3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b8ba:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b8c2:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b8c6:	75 0b                	jne    c001b8d3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b8c8:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b8cf:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b8d3:	40                   	inc    eax
c001b8d4:	eb d2                	jmp    c001b8a8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b8d6:	31 d2                	xor    edx,edx
c001b8d8:	83 ec 0c             	sub    esp,0xc
c001b8db:	57                   	push   edi
c001b8dc:	53                   	push   ebx
c001b8dd:	56                   	push   esi
c001b8de:	52                   	push   edx
c001b8df:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b8e3:	55                   	push   ebp
c001b8e4:	e8 6d f9 ff ff       	call   c001b256 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b8e9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b8ed:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b8f1:	42                   	inc    edx
c001b8f2:	83 c4 20             	add    esp,0x20
c001b8f5:	83 fa 06             	cmp    edx,0x6
c001b8f8:	75 de                	jne    c001b8d8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b8fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b8fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b902:	c1 e2 08             	shl    edx,0x8
c001b905:	83 ec 0c             	sub    esp,0xc
c001b908:	0f b6 c4             	movzx  eax,ah
c001b90b:	09 d0                	or     eax,edx
c001b90d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b912:	6a 02                	push   0x2
c001b914:	57                   	push   edi
c001b915:	53                   	push   ebx
c001b916:	56                   	push   esi
c001b917:	55                   	push   ebp
c001b918:	e8 61 f7 ff ff       	call   c001b07e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b91d:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b922:	83 c4 20             	add    esp,0x20
c001b925:	57                   	push   edi
c001b926:	53                   	push   ebx
c001b927:	56                   	push   esi
c001b928:	55                   	push   ebp
c001b929:	e8 90 f8 ff ff       	call   c001b1be <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b92e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b932:	57                   	push   edi
c001b933:	53                   	push   ebx
c001b934:	56                   	push   esi
c001b935:	55                   	push   ebp
c001b936:	e8 ed f7 ff ff       	call   c001b128 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b93b:	b9 09 00 00 00       	mov    ecx,0x9
c001b940:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b945:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b949:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b94d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b951:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b955:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b959:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b95d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b961:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b965:	83 ec 0c             	sub    esp,0xc
c001b968:	fc                   	cld    
c001b969:	89 e7                	mov    edi,esp
c001b96b:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b96f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b971:	55                   	push   ebp
c001b972:	e8 15 fd ff ff       	call   c001b68c <PCI::foundDevice(PCIDeviceInfo)>
c001b977:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b97d:	5b                   	pop    ebx
c001b97e:	5e                   	pop    esi
c001b97f:	5f                   	pop    edi
c001b980:	5d                   	pop    ebp
c001b981:	c3                   	ret    

c001b982 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b982:	55                   	push   ebp
c001b983:	57                   	push   edi
c001b984:	56                   	push   esi
c001b985:	53                   	push   ebx
c001b986:	83 ec 0c             	sub    esp,0xc
c001b989:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b98d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b992:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b997:	6a 00                	push   0x0
c001b999:	56                   	push   esi
c001b99a:	57                   	push   edi
c001b99b:	55                   	push   ebp
c001b99c:	e8 87 f7 ff ff       	call   c001b128 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b9a1:	6a 00                	push   0x0
c001b9a3:	56                   	push   esi
c001b9a4:	57                   	push   edi
c001b9a5:	55                   	push   ebp
c001b9a6:	e8 5b fe ff ff       	call   c001b806 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b9ab:	83 c4 20             	add    esp,0x20
c001b9ae:	6a 00                	push   0x0
c001b9b0:	56                   	push   esi
c001b9b1:	57                   	push   edi
c001b9b2:	55                   	push   ebp
c001b9b3:	e8 94 f7 ff ff       	call   c001b14c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b9b8:	83 c4 10             	add    esp,0x10
c001b9bb:	a8 80                	test   al,0x80
c001b9bd:	74 2d                	je     c001b9ec <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b9bf:	bb 01 00 00 00       	mov    ebx,0x1
c001b9c4:	53                   	push   ebx
c001b9c5:	56                   	push   esi
c001b9c6:	57                   	push   edi
c001b9c7:	55                   	push   ebp
c001b9c8:	e8 5b f7 ff ff       	call   c001b128 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b9cd:	83 c4 10             	add    esp,0x10
c001b9d0:	0f b7 c0             	movzx  eax,ax
c001b9d3:	3d ff ff 00 00       	cmp    eax,0xffff
c001b9d8:	74 0c                	je     c001b9e6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b9da:	53                   	push   ebx
c001b9db:	56                   	push   esi
c001b9dc:	57                   	push   edi
c001b9dd:	55                   	push   ebp
c001b9de:	e8 23 fe ff ff       	call   c001b806 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b9e3:	83 c4 10             	add    esp,0x10
c001b9e6:	43                   	inc    ebx
c001b9e7:	83 fb 08             	cmp    ebx,0x8
c001b9ea:	75 d8                	jne    c001b9c4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b9ec:	83 c4 0c             	add    esp,0xc
c001b9ef:	5b                   	pop    ebx
c001b9f0:	5e                   	pop    esi
c001b9f1:	5f                   	pop    edi
c001b9f2:	5d                   	pop    ebp
c001b9f3:	c3                   	ret    

c001b9f4 <PCI::detect()>:
c001b9f4:	56                   	push   esi
c001b9f5:	53                   	push   ebx
c001b9f6:	53                   	push   ebx
c001b9f7:	31 db                	xor    ebx,ebx
c001b9f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b9fd:	6a 00                	push   0x0
c001b9ff:	6a 00                	push   0x0
c001ba01:	6a 00                	push   0x0
c001ba03:	56                   	push   esi
c001ba04:	e8 43 f7 ff ff       	call   c001b14c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ba09:	83 c4 10             	add    esp,0x10
c001ba0c:	a8 80                	test   al,0x80
c001ba0e:	75 21                	jne    c001ba31 <PCI::detect()+0x3d>
c001ba10:	51                   	push   ecx
c001ba11:	51                   	push   ecx
c001ba12:	6a 00                	push   0x0
c001ba14:	56                   	push   esi
c001ba15:	e8 4e fc ff ff       	call   c001b668 <PCI::checkBus(unsigned char)>
c001ba1a:	83 c4 10             	add    esp,0x10
c001ba1d:	eb 2a                	jmp    c001ba49 <PCI::detect()+0x55>
c001ba1f:	52                   	push   edx
c001ba20:	52                   	push   edx
c001ba21:	53                   	push   ebx
c001ba22:	43                   	inc    ebx
c001ba23:	56                   	push   esi
c001ba24:	e8 3f fc ff ff       	call   c001b668 <PCI::checkBus(unsigned char)>
c001ba29:	83 c4 10             	add    esp,0x10
c001ba2c:	83 fb 08             	cmp    ebx,0x8
c001ba2f:	74 18                	je     c001ba49 <PCI::detect()+0x55>
c001ba31:	53                   	push   ebx
c001ba32:	6a 00                	push   0x0
c001ba34:	6a 00                	push   0x0
c001ba36:	56                   	push   esi
c001ba37:	e8 ec f6 ff ff       	call   c001b128 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ba3c:	83 c4 10             	add    esp,0x10
c001ba3f:	0f b7 c0             	movzx  eax,ax
c001ba42:	3d ff ff 00 00       	cmp    eax,0xffff
c001ba47:	74 d6                	je     c001ba1f <PCI::detect()+0x2b>
c001ba49:	58                   	pop    eax
c001ba4a:	5b                   	pop    ebx
c001ba4b:	5e                   	pop    esi
c001ba4c:	c3                   	ret    
c001ba4d:	90                   	nop

c001ba4e <IDE::close(int, int, void*)>:
c001ba4e:	83 c8 ff             	or     eax,0xffffffff
c001ba51:	c3                   	ret    

c001ba52 <IDE::IDE()>:
c001ba52:	83 ec 0c             	sub    esp,0xc
c001ba55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba59:	83 ec 08             	sub    esp,0x8
c001ba5c:	68 50 2e 02 c0       	push   0xc0022e50
c001ba61:	50                   	push   eax
c001ba62:	e8 29 10 ff ff       	call   c000ca90 <HardDiskController::HardDiskController(char const*)>
c001ba67:	83 c4 10             	add    esp,0x10
c001ba6a:	ba e0 2e 02 c0       	mov    edx,0xc0022ee0
c001ba6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba73:	89 10                	mov    DWORD PTR [eax],edx
c001ba75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba79:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ba80:	90                   	nop
c001ba81:	83 c4 0c             	add    esp,0xc
c001ba84:	c3                   	ret    
c001ba85:	90                   	nop

c001ba86 <IDE::prepareInterrupt(unsigned char)>:
c001ba86:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ba8b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ba8f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ba97:	c3                   	ret    

c001ba98 <selectDrive(unsigned char, unsigned char)>:
c001ba98:	c3                   	ret    
c001ba99:	90                   	nop

c001ba9a <IDE::getBase(unsigned char)>:
c001ba9a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ba9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001baa3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001baab:	c3                   	ret    

c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001baac:	55                   	push   ebp
c001baad:	57                   	push   edi
c001baae:	56                   	push   esi
c001baaf:	53                   	push   ebx
c001bab0:	83 ec 1c             	sub    esp,0x1c
c001bab3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bab7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001babb:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001babe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bac2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bac6:	80 f9 03             	cmp    cl,0x3
c001bac9:	77 4f                	ja     c001bb1a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001bacb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bacf:	0f b6 fa             	movzx  edi,dl
c001bad2:	0f b6 db             	movzx  ebx,bl
c001bad5:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bad8:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001badd:	80 ca 80             	or     dl,0x80
c001bae0:	52                   	push   edx
c001bae1:	6a 0c                	push   0xc
c001bae3:	57                   	push   edi
c001bae4:	56                   	push   esi
c001bae5:	e8 c2 ff ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001baea:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001baef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001baf3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001baf7:	ee                   	out    dx,al
c001baf8:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bafd:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001bb01:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bb05:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bb09:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bb11:	83 c4 2c             	add    esp,0x2c
c001bb14:	5b                   	pop    ebx
c001bb15:	5e                   	pop    esi
c001bb16:	5f                   	pop    edi
c001bb17:	5d                   	pop    ebp
c001bb18:	eb 92                	jmp    c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb1a:	0f b6 cb             	movzx  ecx,bl
c001bb1d:	83 f9 07             	cmp    ecx,0x7
c001bb20:	77 12                	ja     c001bb34 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001bb22:	0f b6 d2             	movzx  edx,dl
c001bb25:	0f b6 db             	movzx  ebx,bl
c001bb28:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001bb30:	01 da                	add    edx,ebx
c001bb32:	eb 2f                	jmp    c001bb63 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bb34:	83 f9 0d             	cmp    ecx,0xd
c001bb37:	77 13                	ja     c001bb4c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001bb39:	0f b6 d2             	movzx  edx,dl
c001bb3c:	0f b6 db             	movzx  ebx,bl
c001bb3f:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001bb46:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bb4a:	eb 17                	jmp    c001bb63 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bb4c:	83 f9 15             	cmp    ecx,0x15
c001bb4f:	77 13                	ja     c001bb64 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001bb51:	0f b6 d2             	movzx  edx,dl
c001bb54:	0f b6 db             	movzx  ebx,bl
c001bb57:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001bb5f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bb63:	ee                   	out    dx,al
c001bb64:	83 c4 1c             	add    esp,0x1c
c001bb67:	5b                   	pop    ebx
c001bb68:	5e                   	pop    esi
c001bb69:	5f                   	pop    edi
c001bb6a:	5d                   	pop    ebp
c001bb6b:	c3                   	ret    

c001bb6c <IDE::read(unsigned char, unsigned char)>:
c001bb6c:	55                   	push   ebp
c001bb6d:	57                   	push   edi
c001bb6e:	56                   	push   esi
c001bb6f:	53                   	push   ebx
c001bb70:	83 ec 1c             	sub    esp,0x1c
c001bb73:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bb77:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bb7b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bb7e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001bb82:	3c 03                	cmp    al,0x3
c001bb84:	77 40                	ja     c001bbc6 <IDE::read(unsigned char, unsigned char)+0x5a>
c001bb86:	0f b6 f9             	movzx  edi,cl
c001bb89:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bb8c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bb91:	0c 80                	or     al,0x80
c001bb93:	50                   	push   eax
c001bb94:	6a 0c                	push   0xc
c001bb96:	57                   	push   edi
c001bb97:	56                   	push   esi
c001bb98:	e8 0f ff ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb9d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001bba2:	0f b6 d3             	movzx  edx,bl
c001bba5:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bba9:	ec                   	in     al,dx
c001bbaa:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bbae:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001bbb3:	52                   	push   edx
c001bbb4:	6a 0c                	push   0xc
c001bbb6:	57                   	push   edi
c001bbb7:	56                   	push   esi
c001bbb8:	e8 ef fe ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbbd:	83 c4 20             	add    esp,0x20
c001bbc0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bbc4:	eb 4c                	jmp    c001bc12 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bbc6:	0f b6 d3             	movzx  edx,bl
c001bbc9:	83 fa 07             	cmp    edx,0x7
c001bbcc:	77 12                	ja     c001bbe0 <IDE::read(unsigned char, unsigned char)+0x74>
c001bbce:	0f b6 c9             	movzx  ecx,cl
c001bbd1:	0f b6 d3             	movzx  edx,bl
c001bbd4:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001bbdc:	01 c2                	add    edx,eax
c001bbde:	eb 31                	jmp    c001bc11 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bbe0:	83 fa 0d             	cmp    edx,0xd
c001bbe3:	77 13                	ja     c001bbf8 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bbe5:	0f b6 c9             	movzx  ecx,cl
c001bbe8:	0f b6 d3             	movzx  edx,bl
c001bbeb:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001bbf2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bbf6:	eb 19                	jmp    c001bc11 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bbf8:	31 c0                	xor    eax,eax
c001bbfa:	83 fa 15             	cmp    edx,0x15
c001bbfd:	77 13                	ja     c001bc12 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bbff:	0f b6 c9             	movzx  ecx,cl
c001bc02:	0f b6 d3             	movzx  edx,bl
c001bc05:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001bc0d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bc11:	ec                   	in     al,dx
c001bc12:	83 c4 1c             	add    esp,0x1c
c001bc15:	5b                   	pop    ebx
c001bc16:	5e                   	pop    esi
c001bc17:	5f                   	pop    edi
c001bc18:	5d                   	pop    ebp
c001bc19:	c3                   	ret    

c001bc1a <IDE::waitInterrupt(unsigned char)>:
c001bc1a:	55                   	push   ebp
c001bc1b:	57                   	push   edi
c001bc1c:	56                   	push   esi
c001bc1d:	53                   	push   ebx
c001bc1e:	31 db                	xor    ebx,ebx
c001bc20:	83 ec 0c             	sub    esp,0xc
c001bc23:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bc27:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bc2c:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bc34:	89 e8                	mov    eax,ebp
c001bc36:	84 c0                	test   al,al
c001bc38:	75 30                	jne    c001bc6a <IDE::waitInterrupt(unsigned char)+0x50>
c001bc3a:	50                   	push   eax
c001bc3b:	6a 0c                	push   0xc
c001bc3d:	56                   	push   esi
c001bc3e:	57                   	push   edi
c001bc3f:	e8 28 ff ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001bc44:	83 c4 10             	add    esp,0x10
c001bc47:	a8 01                	test   al,0x1
c001bc49:	75 27                	jne    c001bc72 <IDE::waitInterrupt(unsigned char)+0x58>
c001bc4b:	f6 c3 04             	test   bl,0x4
c001bc4e:	75 12                	jne    c001bc62 <IDE::waitInterrupt(unsigned char)+0x48>
c001bc50:	83 fb 32             	cmp    ebx,0x32
c001bc53:	7e 0d                	jle    c001bc62 <IDE::waitInterrupt(unsigned char)+0x48>
c001bc55:	83 ec 0c             	sub    esp,0xc
c001bc58:	6a 64                	push   0x64
c001bc5a:	e8 b1 a4 ff ff       	call   c0016110 <milliTenthSleep(unsigned int)>
c001bc5f:	83 c4 10             	add    esp,0x10
c001bc62:	83 fb 3c             	cmp    ebx,0x3c
c001bc65:	74 0b                	je     c001bc72 <IDE::waitInterrupt(unsigned char)+0x58>
c001bc67:	43                   	inc    ebx
c001bc68:	eb c2                	jmp    c001bc2c <IDE::waitInterrupt(unsigned char)+0x12>
c001bc6a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bc72:	83 c4 0c             	add    esp,0xc
c001bc75:	89 e8                	mov    eax,ebp
c001bc77:	5b                   	pop    ebx
c001bc78:	5e                   	pop    esi
c001bc79:	5f                   	pop    edi
c001bc7a:	5d                   	pop    ebp
c001bc7b:	c3                   	ret    

c001bc7c <ideChannel0IRQHandler(regs*, void*)>:
c001bc7c:	83 ec 10             	sub    esp,0x10
c001bc7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc83:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bc8a:	6a 07                	push   0x7
c001bc8c:	6a 00                	push   0x0
c001bc8e:	50                   	push   eax
c001bc8f:	e8 d8 fe ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001bc94:	83 c4 1c             	add    esp,0x1c
c001bc97:	c3                   	ret    

c001bc98 <ideChannel1IRQHandler(regs*, void*)>:
c001bc98:	83 ec 10             	sub    esp,0x10
c001bc9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc9f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bca6:	6a 07                	push   0x7
c001bca8:	6a 01                	push   0x1
c001bcaa:	50                   	push   eax
c001bcab:	e8 bc fe ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001bcb0:	83 c4 1c             	add    esp,0x1c
c001bcb3:	c3                   	ret    

c001bcb4 <IDE::enableIRQs(unsigned char, bool)>:
c001bcb4:	57                   	push   edi
c001bcb5:	b8 02 00 00 00       	mov    eax,0x2
c001bcba:	56                   	push   esi
c001bcbb:	53                   	push   ebx
c001bcbc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bcc0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bcc4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bcc9:	74 02                	je     c001bccd <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bccb:	31 c0                	xor    eax,eax
c001bccd:	0f b6 db             	movzx  ebx,bl
c001bcd0:	bf 04 00 00 00       	mov    edi,0x4
c001bcd5:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bcdc:	50                   	push   eax
c001bcdd:	6a 0c                	push   0xc
c001bcdf:	53                   	push   ebx
c001bce0:	56                   	push   esi
c001bce1:	e8 c6 fd ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bce6:	83 c4 10             	add    esp,0x10
c001bce9:	50                   	push   eax
c001bcea:	6a 0c                	push   0xc
c001bcec:	53                   	push   ebx
c001bced:	56                   	push   esi
c001bcee:	e8 79 fe ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001bcf3:	83 c4 10             	add    esp,0x10
c001bcf6:	4f                   	dec    edi
c001bcf7:	75 f0                	jne    c001bce9 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bcf9:	5b                   	pop    ebx
c001bcfa:	5e                   	pop    esi
c001bcfb:	5f                   	pop    edi
c001bcfc:	c3                   	ret    
c001bcfd:	90                   	nop

c001bcfe <IDE::open(int, int, void*)>:
c001bcfe:	55                   	push   ebp
c001bcff:	57                   	push   edi
c001bd00:	56                   	push   esi
c001bd01:	53                   	push   ebx
c001bd02:	83 ec 1c             	sub    esp,0x1c
c001bd05:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bd09:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bd12:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bd1b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bd22:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bd29:	0f 85 de 02 00 00    	jne    c001c00d <IDE::open(int, int, void*)+0x30f>
c001bd2f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bd35:	88 04 24             	mov    BYTE PTR [esp],al
c001bd38:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bd3b:	83 e0 7f             	and    eax,0x7f
c001bd3e:	83 f8 05             	cmp    eax,0x5
c001bd41:	74 05                	je     c001bd48 <IDE::open(int, int, void*)+0x4a>
c001bd43:	83 f8 0f             	cmp    eax,0xf
c001bd46:	75 32                	jne    c001bd7a <IDE::open(int, int, void*)+0x7c>
c001bd48:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bd4e:	83 e0 fc             	and    eax,0xfffffffc
c001bd51:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bd58:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bd5e:	83 e0 fc             	and    eax,0xfffffffc
c001bd61:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bd68:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bd6e:	83 e0 fc             	and    eax,0xfffffffc
c001bd71:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bd78:	eb 14                	jmp    c001bd8e <IDE::open(int, int, void*)+0x90>
c001bd7a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bd84:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bd8e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001bd95:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bd9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bda0:	89 c6                	mov    esi,eax
c001bda2:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bda7:	c1 e6 10             	shl    esi,0x10
c001bdaa:	89 e8                	mov    eax,ebp
c001bdac:	89 fa                	mov    edx,edi
c001bdae:	c1 e0 0b             	shl    eax,0xb
c001bdb1:	09 f0                	or     eax,esi
c001bdb3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001bdba:	c1 e6 08             	shl    esi,0x8
c001bdbd:	09 c6                	or     esi,eax
c001bdbf:	89 f0                	mov    eax,esi
c001bdc1:	0d 08 00 00 80       	or     eax,0x80000008
c001bdc6:	ef                   	out    dx,eax
c001bdc7:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bdcc:	89 ca                	mov    edx,ecx
c001bdce:	ed                   	in     eax,dx
c001bdcf:	c1 e8 10             	shr    eax,0x10
c001bdd2:	3d ff ff 00 00       	cmp    eax,0xffff
c001bdd7:	0f 84 f9 00 00 00    	je     c001bed6 <IDE::open(int, int, void*)+0x1d8>
c001bddd:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bde3:	89 fa                	mov    edx,edi
c001bde5:	89 f0                	mov    eax,esi
c001bde7:	ef                   	out    dx,eax
c001bde8:	b0 fe                	mov    al,0xfe
c001bdea:	89 ca                	mov    edx,ecx
c001bdec:	ee                   	out    dx,al
c001bded:	89 f0                	mov    eax,esi
c001bdef:	89 fa                	mov    edx,edi
c001bdf1:	ef                   	out    dx,eax
c001bdf2:	89 ca                	mov    edx,ecx
c001bdf4:	ed                   	in     eax,dx
c001bdf5:	3c fe                	cmp    al,0xfe
c001bdf7:	0f 85 a9 00 00 00    	jne    c001bea6 <IDE::open(int, int, void*)+0x1a8>
c001bdfd:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001be03:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001be0a:	74 33                	je     c001be3f <IDE::open(int, int, void*)+0x141>
c001be0c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001be12:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001be16:	40                   	inc    eax
c001be17:	83 ec 0c             	sub    esp,0xc
c001be1a:	0f b6 c0             	movzx  eax,al
c001be1d:	50                   	push   eax
c001be1e:	55                   	push   ebp
c001be1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001be23:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001be29:	51                   	push   ecx
c001be2a:	e8 91 38 ff ff       	call   c000f6c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001be2f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001be34:	83 c4 1c             	add    esp,0x1c
c001be37:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001be3d:	eb 0a                	jmp    c001be49 <IDE::open(int, int, void*)+0x14b>
c001be3f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001be49:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001be50:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001be57:	c1 e1 10             	shl    ecx,0x10
c001be5a:	c1 e0 08             	shl    eax,0x8
c001be5d:	bf f8 0c 00 00       	mov    edi,0xcf8
c001be62:	09 c1                	or     ecx,eax
c001be64:	89 fa                	mov    edx,edi
c001be66:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001be6d:	c1 e0 0b             	shl    eax,0xb
c001be70:	09 c1                	or     ecx,eax
c001be72:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001be78:	89 c8                	mov    eax,ecx
c001be7a:	ef                   	out    dx,eax
c001be7b:	be fc 0c 00 00       	mov    esi,0xcfc
c001be80:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001be86:	89 f2                	mov    edx,esi
c001be88:	ee                   	out    dx,al
c001be89:	89 c8                	mov    eax,ecx
c001be8b:	89 fa                	mov    edx,edi
c001be8d:	ef                   	out    dx,eax
c001be8e:	89 f2                	mov    edx,esi
c001be90:	ed                   	in     eax,dx
c001be91:	0f b6 c0             	movzx  eax,al
c001be94:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001be9a:	74 4a                	je     c001bee6 <IDE::open(int, int, void*)+0x1e8>
c001be9c:	83 ec 0c             	sub    esp,0xc
c001be9f:	68 68 2e 02 c0       	push   0xc0022e68
c001bea4:	eb 38                	jmp    c001bede <IDE::open(int, int, void*)+0x1e0>
c001bea6:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001beaf:	75 1b                	jne    c001becc <IDE::open(int, int, void*)+0x1ce>
c001beb1:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001beb5:	3d 80 00 00 00       	cmp    eax,0x80
c001beba:	74 07                	je     c001bec3 <IDE::open(int, int, void*)+0x1c5>
c001bebc:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bec1:	75 09                	jne    c001becc <IDE::open(int, int, void*)+0x1ce>
c001bec3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001beca:	eb 1a                	jmp    c001bee6 <IDE::open(int, int, void*)+0x1e8>
c001becc:	83 ec 0c             	sub    esp,0xc
c001becf:	68 70 2e 02 c0       	push   0xc0022e70
c001bed4:	eb 08                	jmp    c001bede <IDE::open(int, int, void*)+0x1e0>
c001bed6:	83 ec 0c             	sub    esp,0xc
c001bed9:	68 a1 2e 02 c0       	push   0xc0022ea1
c001bede:	e8 9a 54 ff ff       	call   c001137d <KePanic(char const*)>
c001bee3:	83 c4 10             	add    esp,0x10
c001bee6:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001beed:	74 1a                	je     c001bf09 <IDE::open(int, int, void*)+0x20b>
c001beef:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bef5:	83 e0 fc             	and    eax,0xfffffffc
c001bef8:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001beff:	83 c0 08             	add    eax,0x8
c001bf02:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bf09:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bf0f:	89 c2                	mov    edx,eax
c001bf11:	83 e2 0f             	and    edx,0xf
c001bf14:	83 fa 08             	cmp    edx,0x8
c001bf17:	75 0a                	jne    c001bf23 <IDE::open(int, int, void*)+0x225>
c001bf19:	83 e8 02             	sub    eax,0x2
c001bf1c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bf23:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bf29:	89 c2                	mov    edx,eax
c001bf2b:	83 e2 0f             	and    edx,0xf
c001bf2e:	83 fa 08             	cmp    edx,0x8
c001bf31:	75 0a                	jne    c001bf3d <IDE::open(int, int, void*)+0x23f>
c001bf33:	83 e8 02             	sub    eax,0x2
c001bf36:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bf3d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bf44:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bf4b:	89 d0                	mov    eax,edx
c001bf4d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bf50:	8d 7a 01             	lea    edi,[edx+0x1]
c001bf53:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bf57:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bf5b:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bf5f:	83 e1 3f             	and    ecx,0x3f
c001bf62:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bf66:	89 f9                	mov    ecx,edi
c001bf68:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bf6f:	0f b6 c9             	movzx  ecx,cl
c001bf72:	8d 78 02             	lea    edi,[eax+0x2]
c001bf75:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bf78:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bf7c:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bf80:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bf84:	83 e2 3f             	and    edx,0x3f
c001bf87:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bf8b:	89 f9                	mov    ecx,edi
c001bf8d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bf93:	0f b6 d1             	movzx  edx,cl
c001bf96:	8d 78 03             	lea    edi,[eax+0x3]
c001bf99:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bf9c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bfa0:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bfa4:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bfa8:	83 e1 3f             	and    ecx,0x3f
c001bfab:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bfaf:	89 f9                	mov    ecx,edi
c001bfb1:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bfb7:	0f b6 c9             	movzx  ecx,cl
c001bfba:	8d 78 04             	lea    edi,[eax+0x4]
c001bfbd:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bfc0:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bfc4:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bfc8:	89 fa                	mov    edx,edi
c001bfca:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bfd0:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bfd4:	83 e2 3f             	and    edx,0x3f
c001bfd7:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bfdb:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bfe2:	66 85 f6             	test   si,si
c001bfe5:	74 65                	je     c001c04c <IDE::open(int, int, void*)+0x34e>
c001bfe7:	89 f9                	mov    ecx,edi
c001bfe9:	83 c0 05             	add    eax,0x5
c001bfec:	0f b6 d1             	movzx  edx,cl
c001bfef:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bff2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bff6:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bffa:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c000:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c004:	83 e0 3f             	and    eax,0x3f
c001c007:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c00b:	eb 3f                	jmp    c001c04c <IDE::open(int, int, void*)+0x34e>
c001c00d:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c013:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c01a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c021:	05 06 02 00 00       	add    eax,0x206
c001c026:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c02d:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c034:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c03b:	05 06 02 00 00       	add    eax,0x206
c001c040:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c047:	e9 bd fe ff ff       	jmp    c001bf09 <IDE::open(int, int, void*)+0x20b>
c001c04c:	50                   	push   eax
c001c04d:	50                   	push   eax
c001c04e:	6a 00                	push   0x0
c001c050:	53                   	push   ebx
c001c051:	e8 30 fa ff ff       	call   c001ba86 <IDE::prepareInterrupt(unsigned char)>
c001c056:	5a                   	pop    edx
c001c057:	59                   	pop    ecx
c001c058:	6a 01                	push   0x1
c001c05a:	53                   	push   ebx
c001c05b:	e8 26 fa ff ff       	call   c001ba86 <IDE::prepareInterrupt(unsigned char)>
c001c060:	83 c4 0c             	add    esp,0xc
c001c063:	6a 00                	push   0x0
c001c065:	6a 00                	push   0x0
c001c067:	53                   	push   ebx
c001c068:	e8 47 fc ff ff       	call   c001bcb4 <IDE::enableIRQs(unsigned char, bool)>
c001c06d:	83 c4 0c             	add    esp,0xc
c001c070:	6a 00                	push   0x0
c001c072:	6a 01                	push   0x1
c001c074:	53                   	push   ebx
c001c075:	e8 3a fc ff ff       	call   c001bcb4 <IDE::enableIRQs(unsigned char, bool)>
c001c07a:	83 c4 10             	add    esp,0x10
c001c07d:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c084:	74 34                	je     c001c0ba <IDE::open(int, int, void*)+0x3bc>
c001c086:	83 ec 0c             	sub    esp,0xc
c001c089:	53                   	push   ebx
c001c08a:	6a 01                	push   0x1
c001c08c:	68 7c bc 01 c0       	push   0xc001bc7c
c001c091:	6a 0e                	push   0xe
c001c093:	53                   	push   ebx
c001c094:	e8 61 06 ff ff       	call   c000c6fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c099:	83 c4 14             	add    esp,0x14
c001c09c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c0a2:	53                   	push   ebx
c001c0a3:	6a 01                	push   0x1
c001c0a5:	68 98 bc 01 c0       	push   0xc001bc98
c001c0aa:	6a 0f                	push   0xf
c001c0ac:	53                   	push   ebx
c001c0ad:	e8 48 06 ff ff       	call   c000c6fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c0b2:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c0b8:	eb 38                	jmp    c001c0f2 <IDE::open(int, int, void*)+0x3f4>
c001c0ba:	83 ec 0c             	sub    esp,0xc
c001c0bd:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c0c7:	53                   	push   ebx
c001c0c8:	6a 00                	push   0x0
c001c0ca:	68 7c bc 01 c0       	push   0xc001bc7c
c001c0cf:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c0d5:	53                   	push   ebx
c001c0d6:	e8 1f 06 ff ff       	call   c000c6fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c0db:	83 c4 14             	add    esp,0x14
c001c0de:	53                   	push   ebx
c001c0df:	6a 00                	push   0x0
c001c0e1:	68 98 bc 01 c0       	push   0xc001bc98
c001c0e6:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c0ec:	53                   	push   ebx
c001c0ed:	e8 08 06 ff ff       	call   c000c6fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c0f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c0f4:	83 c4 20             	add    esp,0x20
c001c0f7:	83 ec 0c             	sub    esp,0xc
c001c0fa:	53                   	push   ebx
c001c0fb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c0fe:	83 c4 0c             	add    esp,0xc
c001c101:	6a 07                	push   0x7
c001c103:	6a 00                	push   0x0
c001c105:	53                   	push   ebx
c001c106:	e8 61 fa ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001c10b:	83 c4 0c             	add    esp,0xc
c001c10e:	6a 07                	push   0x7
c001c110:	6a 01                	push   0x1
c001c112:	53                   	push   ebx
c001c113:	e8 54 fa ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001c118:	83 c4 0c             	add    esp,0xc
c001c11b:	6a 01                	push   0x1
c001c11d:	6a 00                	push   0x0
c001c11f:	53                   	push   ebx
c001c120:	e8 8f fb ff ff       	call   c001bcb4 <IDE::enableIRQs(unsigned char, bool)>
c001c125:	83 c4 0c             	add    esp,0xc
c001c128:	6a 01                	push   0x1
c001c12a:	6a 01                	push   0x1
c001c12c:	53                   	push   ebx
c001c12d:	e8 82 fb ff ff       	call   c001bcb4 <IDE::enableIRQs(unsigned char, bool)>
c001c132:	83 c4 2c             	add    esp,0x2c
c001c135:	31 c0                	xor    eax,eax
c001c137:	5b                   	pop    ebx
c001c138:	5e                   	pop    esi
c001c139:	5f                   	pop    edi
c001c13a:	5d                   	pop    ebp
c001c13b:	c3                   	ret    

c001c13c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c13c:	55                   	push   ebp
c001c13d:	57                   	push   edi
c001c13e:	56                   	push   esi
c001c13f:	53                   	push   ebx
c001c140:	83 ec 1c             	sub    esp,0x1c
c001c143:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c147:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c14b:	8d 42 f8             	lea    eax,[edx-0x8]
c001c14e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c152:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c156:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c15a:	3c 03                	cmp    al,0x3
c001c15c:	77 5a                	ja     c001c1b8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c15e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c162:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c166:	0f b6 db             	movzx  ebx,bl
c001c169:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c16c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c171:	0c 80                	or     al,0x80
c001c173:	50                   	push   eax
c001c174:	6a 0c                	push   0xc
c001c176:	53                   	push   ebx
c001c177:	56                   	push   esi
c001c178:	e8 2f f9 ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c17d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c182:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c18a:	0f b6 d2             	movzx  edx,dl
c001c18d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c191:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c193:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c198:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c19c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c1a0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c1a4:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c1ac:	83 c4 2c             	add    esp,0x2c
c001c1af:	5b                   	pop    ebx
c001c1b0:	5e                   	pop    esi
c001c1b1:	5f                   	pop    edi
c001c1b2:	5d                   	pop    ebp
c001c1b3:	e9 f4 f8 ff ff       	jmp    c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1b8:	0f b6 c2             	movzx  eax,dl
c001c1bb:	83 f8 07             	cmp    eax,0x7
c001c1be:	77 12                	ja     c001c1d2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c1c0:	0f b6 c2             	movzx  eax,dl
c001c1c3:	0f b6 db             	movzx  ebx,bl
c001c1c6:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c1ce:	01 c2                	add    edx,eax
c001c1d0:	eb 2f                	jmp    c001c201 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c1d2:	83 f8 0d             	cmp    eax,0xd
c001c1d5:	77 13                	ja     c001c1ea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c1d7:	0f b6 db             	movzx  ebx,bl
c001c1da:	0f b6 d2             	movzx  edx,dl
c001c1dd:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c1e4:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c1e8:	eb 17                	jmp    c001c201 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c1ea:	83 f8 15             	cmp    eax,0x15
c001c1ed:	77 14                	ja     c001c203 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c1ef:	0f b6 db             	movzx  ebx,bl
c001c1f2:	0f b6 d2             	movzx  edx,dl
c001c1f5:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c1fd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c201:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c203:	83 c4 1c             	add    esp,0x1c
c001c206:	5b                   	pop    ebx
c001c207:	5e                   	pop    esi
c001c208:	5f                   	pop    edi
c001c209:	5d                   	pop    ebp
c001c20a:	c3                   	ret    
c001c20b:	90                   	nop

c001c20c <IDE::detect()>:
c001c20c:	55                   	push   ebp
c001c20d:	57                   	push   edi
c001c20e:	56                   	push   esi
c001c20f:	53                   	push   ebx
c001c210:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c216:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c21d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c224:	0f 85 a4 02 00 00    	jne    c001c4ce <IDE::detect()+0x2c2>
c001c22a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c231:	31 f6                	xor    esi,esi
c001c233:	31 ed                	xor    ebp,ebp
c001c235:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c23d:	89 e8                	mov    eax,ebp
c001c23f:	c1 e0 06             	shl    eax,0x6
c001c242:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c24a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c24e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c252:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c256:	c1 e0 04             	shl    eax,0x4
c001c259:	83 c8 a0             	or     eax,0xffffffa0
c001c25c:	0f b6 c0             	movzx  eax,al
c001c25f:	50                   	push   eax
c001c260:	6a 06                	push   0x6
c001c262:	56                   	push   esi
c001c263:	53                   	push   ebx
c001c264:	e8 43 f8 ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c269:	83 c4 0c             	add    esp,0xc
c001c26c:	6a 0c                	push   0xc
c001c26e:	56                   	push   esi
c001c26f:	53                   	push   ebx
c001c270:	e8 f7 f8 ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001c275:	83 c4 0c             	add    esp,0xc
c001c278:	6a 0c                	push   0xc
c001c27a:	56                   	push   esi
c001c27b:	53                   	push   ebx
c001c27c:	e8 eb f8 ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001c281:	83 c4 0c             	add    esp,0xc
c001c284:	6a 0c                	push   0xc
c001c286:	56                   	push   esi
c001c287:	53                   	push   ebx
c001c288:	e8 df f8 ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001c28d:	83 c4 0c             	add    esp,0xc
c001c290:	6a 0c                	push   0xc
c001c292:	56                   	push   esi
c001c293:	53                   	push   ebx
c001c294:	e8 d3 f8 ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001c299:	68 ec 00 00 00       	push   0xec
c001c29e:	6a 07                	push   0x7
c001c2a0:	56                   	push   esi
c001c2a1:	53                   	push   ebx
c001c2a2:	e8 05 f8 ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2a7:	83 c4 1c             	add    esp,0x1c
c001c2aa:	6a 0c                	push   0xc
c001c2ac:	56                   	push   esi
c001c2ad:	53                   	push   ebx
c001c2ae:	e8 b9 f8 ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001c2b3:	83 c4 0c             	add    esp,0xc
c001c2b6:	6a 0c                	push   0xc
c001c2b8:	56                   	push   esi
c001c2b9:	53                   	push   ebx
c001c2ba:	e8 ad f8 ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001c2bf:	83 c4 0c             	add    esp,0xc
c001c2c2:	6a 0c                	push   0xc
c001c2c4:	56                   	push   esi
c001c2c5:	53                   	push   ebx
c001c2c6:	e8 a1 f8 ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001c2cb:	83 c4 0c             	add    esp,0xc
c001c2ce:	6a 0c                	push   0xc
c001c2d0:	56                   	push   esi
c001c2d1:	53                   	push   ebx
c001c2d2:	e8 95 f8 ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001c2d7:	83 c4 0c             	add    esp,0xc
c001c2da:	6a 0c                	push   0xc
c001c2dc:	56                   	push   esi
c001c2dd:	53                   	push   ebx
c001c2de:	e8 89 f8 ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001c2e3:	83 c4 10             	add    esp,0x10
c001c2e6:	84 c0                	test   al,al
c001c2e8:	0f 84 60 01 00 00    	je     c001c44e <IDE::detect()+0x242>
c001c2ee:	31 ff                	xor    edi,edi
c001c2f0:	50                   	push   eax
c001c2f1:	6a 0c                	push   0xc
c001c2f3:	56                   	push   esi
c001c2f4:	53                   	push   ebx
c001c2f5:	e8 72 f8 ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001c2fa:	83 c4 10             	add    esp,0x10
c001c2fd:	a8 01                	test   al,0x1
c001c2ff:	0f 85 6a 01 00 00    	jne    c001c46f <IDE::detect()+0x263>
c001c305:	a8 80                	test   al,0x80
c001c307:	75 04                	jne    c001c30d <IDE::detect()+0x101>
c001c309:	a8 08                	test   al,0x8
c001c30b:	75 23                	jne    c001c330 <IDE::detect()+0x124>
c001c30d:	47                   	inc    edi
c001c30e:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c314:	7e da                	jle    c001c2f0 <IDE::detect()+0xe4>
c001c316:	83 ec 0c             	sub    esp,0xc
c001c319:	6a 32                	push   0x32
c001c31b:	e8 f0 9d ff ff       	call   c0016110 <milliTenthSleep(unsigned int)>
c001c320:	83 c4 10             	add    esp,0x10
c001c323:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c329:	75 c5                	jne    c001c2f0 <IDE::detect()+0xe4>
c001c32b:	e9 3f 01 00 00       	jmp    c001c46f <IDE::detect()+0x263>
c001c330:	31 c9                	xor    ecx,ecx
c001c332:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c336:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c33a:	83 ec 0c             	sub    esp,0xc
c001c33d:	68 80 00 00 00       	push   0x80
c001c342:	57                   	push   edi
c001c343:	6a 00                	push   0x0
c001c345:	56                   	push   esi
c001c346:	53                   	push   ebx
c001c347:	e8 f0 fd ff ff       	call   c001c13c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c34c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c351:	89 e8                	mov    eax,ebp
c001c353:	89 d1                	mov    ecx,edx
c001c355:	c1 e0 06             	shl    eax,0x6
c001c358:	01 d8                	add    eax,ebx
c001c35a:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c361:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c368:	89 f2                	mov    edx,esi
c001c36a:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c370:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c374:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c37a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c37e:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c385:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c38d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c394:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c39c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c3a2:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c3a9:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c3af:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c3b3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c3b7:	83 c4 20             	add    esp,0x20
c001c3ba:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c3bd:	83 c0 02             	add    eax,0x2
c001c3c0:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c3c6:	83 c7 02             	add    edi,0x2
c001c3c9:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c3cc:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c3d2:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c3d6:	75 e2                	jne    c001c3ba <IDE::detect()+0x1ae>
c001c3d8:	89 e8                	mov    eax,ebp
c001c3da:	c1 e0 06             	shl    eax,0x6
c001c3dd:	01 d8                	add    eax,ebx
c001c3df:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c3e6:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c3ed:	c1 ea 09             	shr    edx,0x9
c001c3f0:	83 e2 01             	and    edx,0x1
c001c3f3:	80 e1 01             	and    cl,0x1
c001c3f6:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c3fc:	75 22                	jne    c001c420 <IDE::detect()+0x214>
c001c3fe:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c405:	74 46                	je     c001c44d <IDE::detect()+0x241>
c001c407:	83 ec 0c             	sub    esp,0xc
c001c40a:	68 7c 01 00 00       	push   0x17c
c001c40f:	e8 a2 b6 fe ff       	call   c0007ab6 <malloc>
c001c414:	89 c7                	mov    edi,eax
c001c416:	89 04 24             	mov    DWORD PTR [esp],eax
c001c419:	e8 1a 05 00 00       	call   c001c938 <ATA::ATA()>
c001c41e:	eb 17                	jmp    c001c437 <IDE::detect()+0x22b>
c001c420:	83 ec 0c             	sub    esp,0xc
c001c423:	68 84 01 00 00       	push   0x184
c001c428:	e8 89 b6 fe ff       	call   c0007ab6 <malloc>
c001c42d:	89 c7                	mov    edi,eax
c001c42f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c432:	e8 45 0e 00 00       	call   c001d27c <ATAPI::ATAPI()>
c001c437:	5a                   	pop    edx
c001c438:	59                   	pop    ecx
c001c439:	57                   	push   edi
c001c43a:	53                   	push   ebx
c001c43b:	e8 0e 03 ff ff       	call   c000c74e <Device::addChild(Device*)>
c001c440:	8b 07                	mov    eax,DWORD PTR [edi]
c001c442:	53                   	push   ebx
c001c443:	55                   	push   ebp
c001c444:	6a 00                	push   0x0
c001c446:	57                   	push   edi
c001c447:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c44a:	83 c4 20             	add    esp,0x20
c001c44d:	45                   	inc    ebp
c001c44e:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c453:	74 0d                	je     c001c462 <IDE::detect()+0x256>
c001c455:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c45d:	e9 db fd ff ff       	jmp    c001c23d <IDE::detect()+0x31>
c001c462:	4e                   	dec    esi
c001c463:	74 69                	je     c001c4ce <IDE::detect()+0x2c2>
c001c465:	be 01 00 00 00       	mov    esi,0x1
c001c46a:	e9 c6 fd ff ff       	jmp    c001c235 <IDE::detect()+0x29>
c001c46f:	50                   	push   eax
c001c470:	6a 04                	push   0x4
c001c472:	56                   	push   esi
c001c473:	53                   	push   ebx
c001c474:	e8 f3 f6 ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001c479:	83 c4 0c             	add    esp,0xc
c001c47c:	89 c7                	mov    edi,eax
c001c47e:	6a 05                	push   0x5
c001c480:	56                   	push   esi
c001c481:	53                   	push   ebx
c001c482:	e8 e5 f6 ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001c487:	83 c4 10             	add    esp,0x10
c001c48a:	89 f9                	mov    ecx,edi
c001c48c:	0f b6 c0             	movzx  eax,al
c001c48f:	0f b6 f9             	movzx  edi,cl
c001c492:	83 ff 14             	cmp    edi,0x14
c001c495:	75 07                	jne    c001c49e <IDE::detect()+0x292>
c001c497:	3d eb 00 00 00       	cmp    eax,0xeb
c001c49c:	eb 0a                	jmp    c001c4a8 <IDE::detect()+0x29c>
c001c49e:	3d 96 00 00 00       	cmp    eax,0x96
c001c4a3:	75 a9                	jne    c001c44e <IDE::detect()+0x242>
c001c4a5:	83 ff 69             	cmp    edi,0x69
c001c4a8:	75 a4                	jne    c001c44e <IDE::detect()+0x242>
c001c4aa:	68 a1 00 00 00       	push   0xa1
c001c4af:	6a 07                	push   0x7
c001c4b1:	56                   	push   esi
c001c4b2:	53                   	push   ebx
c001c4b3:	e8 f4 f5 ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4b8:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c4bf:	e8 4c 9c ff ff       	call   c0016110 <milliTenthSleep(unsigned int)>
c001c4c4:	83 c4 10             	add    esp,0x10
c001c4c7:	b1 01                	mov    cl,0x1
c001c4c9:	e9 64 fe ff ff       	jmp    c001c332 <IDE::detect()+0x126>
c001c4ce:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c4d4:	5b                   	pop    ebx
c001c4d5:	5e                   	pop    esi
c001c4d6:	5f                   	pop    edi
c001c4d7:	5d                   	pop    ebp
c001c4d8:	c3                   	ret    
c001c4d9:	90                   	nop

c001c4da <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c4da:	55                   	push   ebp
c001c4db:	57                   	push   edi
c001c4dc:	56                   	push   esi
c001c4dd:	53                   	push   ebx
c001c4de:	83 ec 1c             	sub    esp,0x1c
c001c4e1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c4e5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c4e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c4ed:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c4f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c4f5:	88 c3                	mov    bl,al
c001c4f7:	25 ff 00 00 00       	and    eax,0xff
c001c4fc:	0f 84 88 00 00 00    	je     c001c58a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c502:	83 ec 0c             	sub    esp,0xc
c001c505:	89 c7                	mov    edi,eax
c001c507:	68 cb 2e 02 c0       	push   0xc0022ecb
c001c50c:	e8 34 e4 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c511:	83 c4 10             	add    esp,0x10
c001c514:	83 ff 01             	cmp    edi,0x1
c001c517:	74 6b                	je     c001c584 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c519:	83 ff 02             	cmp    edi,0x2
c001c51c:	75 58                	jne    c001c576 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c51e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c523:	01 ff                	add    edi,edi
c001c525:	50                   	push   eax
c001c526:	09 fe                	or     esi,edi
c001c528:	6a 01                	push   0x1
c001c52a:	89 f0                	mov    eax,esi
c001c52c:	0f b6 f0             	movzx  esi,al
c001c52f:	c1 e6 06             	shl    esi,0x6
c001c532:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c53a:	50                   	push   eax
c001c53b:	55                   	push   ebp
c001c53c:	e8 2b f6 ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001c541:	83 c4 10             	add    esp,0x10
c001c544:	a8 01                	test   al,0x1
c001c546:	74 02                	je     c001c54a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c548:	b3 07                	mov    bl,0x7
c001c54a:	a8 02                	test   al,0x2
c001c54c:	74 02                	je     c001c550 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c54e:	b3 03                	mov    bl,0x3
c001c550:	a8 04                	test   al,0x4
c001c552:	74 02                	je     c001c556 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c554:	b3 14                	mov    bl,0x14
c001c556:	a8 08                	test   al,0x8
c001c558:	74 02                	je     c001c55c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c55a:	b3 03                	mov    bl,0x3
c001c55c:	a8 10                	test   al,0x10
c001c55e:	74 02                	je     c001c562 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c560:	b3 15                	mov    bl,0x15
c001c562:	a8 20                	test   al,0x20
c001c564:	74 02                	je     c001c568 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c566:	b3 03                	mov    bl,0x3
c001c568:	a8 40                	test   al,0x40
c001c56a:	74 02                	je     c001c56e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c56c:	b3 16                	mov    bl,0x16
c001c56e:	a8 80                	test   al,0x80
c001c570:	74 18                	je     c001c58a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c572:	b3 0d                	mov    bl,0xd
c001c574:	eb 14                	jmp    c001c58a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c576:	83 ff 03             	cmp    edi,0x3
c001c579:	74 0d                	je     c001c588 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c57b:	83 ff 04             	cmp    edi,0x4
c001c57e:	75 0a                	jne    c001c58a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c580:	b3 08                	mov    bl,0x8
c001c582:	eb 06                	jmp    c001c58a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c584:	b3 13                	mov    bl,0x13
c001c586:	eb 02                	jmp    c001c58a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c588:	b3 17                	mov    bl,0x17
c001c58a:	83 c4 1c             	add    esp,0x1c
c001c58d:	88 d8                	mov    al,bl
c001c58f:	5b                   	pop    ebx
c001c590:	5e                   	pop    esi
c001c591:	5f                   	pop    edi
c001c592:	5d                   	pop    ebp
c001c593:	c3                   	ret    

c001c594 <IDE::polling(unsigned char, unsigned int)>:
c001c594:	57                   	push   edi
c001c595:	56                   	push   esi
c001c596:	53                   	push   ebx
c001c597:	bb 04 00 00 00       	mov    ebx,0x4
c001c59c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c5a0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c5a5:	52                   	push   edx
c001c5a6:	6a 0c                	push   0xc
c001c5a8:	56                   	push   esi
c001c5a9:	57                   	push   edi
c001c5aa:	e8 bd f5 ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001c5af:	83 c4 10             	add    esp,0x10
c001c5b2:	4b                   	dec    ebx
c001c5b3:	75 f0                	jne    c001c5a5 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c5b5:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c5ba:	50                   	push   eax
c001c5bb:	6a 0c                	push   0xc
c001c5bd:	56                   	push   esi
c001c5be:	57                   	push   edi
c001c5bf:	e8 a8 f5 ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001c5c4:	83 c4 10             	add    esp,0x10
c001c5c7:	a8 01                	test   al,0x1
c001c5c9:	75 17                	jne    c001c5e2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c5cb:	a8 20                	test   al,0x20
c001c5cd:	75 0f                	jne    c001c5de <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c5cf:	4b                   	dec    ebx
c001c5d0:	74 10                	je     c001c5e2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c5d2:	a8 80                	test   al,0x80
c001c5d4:	75 e4                	jne    c001c5ba <IDE::polling(unsigned char, unsigned int)+0x26>
c001c5d6:	a8 08                	test   al,0x8
c001c5d8:	74 e0                	je     c001c5ba <IDE::polling(unsigned char, unsigned int)+0x26>
c001c5da:	31 c0                	xor    eax,eax
c001c5dc:	eb 06                	jmp    c001c5e4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c5de:	b0 01                	mov    al,0x1
c001c5e0:	eb 02                	jmp    c001c5e4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c5e2:	b0 02                	mov    al,0x2
c001c5e4:	5b                   	pop    ebx
c001c5e5:	5e                   	pop    esi
c001c5e6:	5f                   	pop    edi
c001c5e7:	c3                   	ret    

c001c5e8 <SATABus::close(int, int, void*)>:
c001c5e8:	31 c0                	xor    eax,eax
c001c5ea:	c3                   	ret    
c001c5eb:	90                   	nop

c001c5ec <SATABus::detect()>:
c001c5ec:	c3                   	ret    
c001c5ed:	90                   	nop

c001c5ee <SATABus::SATABus()>:
c001c5ee:	83 ec 0c             	sub    esp,0xc
c001c5f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f5:	83 ec 08             	sub    esp,0x8
c001c5f8:	68 04 2f 02 c0       	push   0xc0022f04
c001c5fd:	50                   	push   eax
c001c5fe:	e8 8d 04 ff ff       	call   c000ca90 <HardDiskController::HardDiskController(char const*)>
c001c603:	83 c4 10             	add    esp,0x10
c001c606:	ba 30 2f 02 c0       	mov    edx,0xc0022f30
c001c60b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c60f:	89 10                	mov    DWORD PTR [eax],edx
c001c611:	83 ec 0c             	sub    esp,0xc
c001c614:	6a 50                	push   0x50
c001c616:	e8 73 b8 fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c61b:	83 c4 10             	add    esp,0x10
c001c61e:	89 c2                	mov    edx,eax
c001c620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c624:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c62a:	83 ec 0c             	sub    esp,0xc
c001c62d:	6a 50                	push   0x50
c001c62f:	e8 d9 cf fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c634:	83 c4 10             	add    esp,0x10
c001c637:	89 c2                	mov    edx,eax
c001c639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c63d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c643:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c648:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c64c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c652:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c656:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c65c:	83 ec 0c             	sub    esp,0xc
c001c65f:	6a 03                	push   0x3
c001c661:	6a 50                	push   0x50
c001c663:	51                   	push   ecx
c001c664:	52                   	push   edx
c001c665:	50                   	push   eax
c001c666:	e8 af d8 fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c66b:	83 c4 20             	add    esp,0x20
c001c66e:	90                   	nop
c001c66f:	83 c4 0c             	add    esp,0xc
c001c672:	c3                   	ret    
c001c673:	90                   	nop

c001c674 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c674:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c678:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c67b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c67e:	09 c2                	or     edx,eax
c001c680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c684:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c68a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c68c:	31 c0                	xor    eax,eax
c001c68e:	c1 e9 08             	shr    ecx,0x8
c001c691:	83 e1 0f             	and    ecx,0xf
c001c694:	39 c8                	cmp    eax,ecx
c001c696:	74 0a                	je     c001c6a2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c698:	f6 c2 01             	test   dl,0x1
c001c69b:	74 08                	je     c001c6a5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c69d:	d1 ea                	shr    edx,1
c001c69f:	40                   	inc    eax
c001c6a0:	eb f2                	jmp    c001c694 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c6a2:	83 c8 ff             	or     eax,0xffffffff
c001c6a5:	c3                   	ret    

c001c6a6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c6a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c6aa:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c6ad:	89 c2                	mov    edx,eax
c001c6af:	c1 ea 08             	shr    edx,0x8
c001c6b2:	83 e2 0f             	and    edx,0xf
c001c6b5:	4a                   	dec    edx
c001c6b6:	75 32                	jne    c001c6ea <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c6b8:	83 e0 0f             	and    eax,0xf
c001c6bb:	83 f8 03             	cmp    eax,0x3
c001c6be:	75 2a                	jne    c001c6ea <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c6c0:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c6c3:	b8 02 00 00 00       	mov    eax,0x2
c001c6c8:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c6ce:	74 1c                	je     c001c6ec <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c6d0:	b8 04 00 00 00       	mov    eax,0x4
c001c6d5:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c6db:	74 0f                	je     c001c6ec <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c6dd:	31 c0                	xor    eax,eax
c001c6df:	83 fa 03             	cmp    edx,0x3
c001c6e2:	0f 94 c0             	sete   al
c001c6e5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c6e9:	c3                   	ret    
c001c6ea:	31 c0                	xor    eax,eax
c001c6ec:	c3                   	ret    
c001c6ed:	90                   	nop

c001c6ee <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c6ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c6f2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c6f5:	0f ba e2 0f          	bt     edx,0xf
c001c6f9:	72 f7                	jb     c001c6f2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c6fb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c6fe:	83 ca 10             	or     edx,0x10
c001c701:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c704:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c707:	83 ca 01             	or     edx,0x1
c001c70a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c70d:	c3                   	ret    

c001c70e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c70e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c712:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c715:	83 e2 fe             	and    edx,0xfffffffe
c001c718:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c71b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c71e:	83 e2 ef             	and    edx,0xffffffef
c001c721:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c724:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c727:	0f ba e2 0e          	bt     edx,0xe
c001c72b:	72 f7                	jb     c001c724 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c72d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c730:	0f ba e2 0f          	bt     edx,0xf
c001c734:	72 ee                	jb     c001c724 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c736:	c3                   	ret    
c001c737:	90                   	nop

c001c738 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c738:	55                   	push   ebp
c001c739:	57                   	push   edi
c001c73a:	56                   	push   esi
c001c73b:	53                   	push   ebx
c001c73c:	83 ec 1c             	sub    esp,0x1c
c001c73f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c743:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c747:	53                   	push   ebx
c001c748:	56                   	push   esi
c001c749:	e8 c0 ff ff ff       	call   c001c70e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c74e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c752:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c758:	83 ec 0c             	sub    esp,0xc
c001c75b:	c1 e5 0a             	shl    ebp,0xa
c001c75e:	01 e8                	add    eax,ebp
c001c760:	89 03                	mov    DWORD PTR [ebx],eax
c001c762:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c764:	68 00 04 00 00       	push   0x400
c001c769:	6a 00                	push   0x0
c001c76b:	50                   	push   eax
c001c76c:	e8 7f 3d fe ff       	call   c00004f0 <memset>
c001c771:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001c777:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001c77b:	01 e8                	add    eax,ebp
c001c77d:	83 c4 1c             	add    esp,0x1c
c001c780:	89 03                	mov    DWORD PTR [ebx],eax
c001c782:	c1 e2 08             	shl    edx,0x8
c001c785:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c78c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001c792:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c798:	01 f8                	add    eax,edi
c001c79a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c79d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c7a0:	68 00 01 00 00       	push   0x100
c001c7a5:	6a 00                	push   0x0
c001c7a7:	50                   	push   eax
c001c7a8:	e8 43 3d fe ff       	call   c00004f0 <memset>
c001c7ad:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001c7b3:	01 fa                	add    edx,edi
c001c7b5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c7b9:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001c7bc:	c1 e7 0d             	shl    edi,0xd
c001c7bf:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c7c6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001c7cc:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001c7d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c7d6:	31 ff                	xor    edi,edi
c001c7d8:	83 c4 10             	add    esp,0x10
c001c7db:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001c7e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7e5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c7eb:	83 c5 20             	add    ebp,0x20
c001c7ee:	01 f8                	add    eax,edi
c001c7f0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c7f3:	52                   	push   edx
c001c7f4:	68 00 01 00 00       	push   0x100
c001c7f9:	6a 00                	push   0x0
c001c7fb:	50                   	push   eax
c001c7fc:	e8 ef 3c fe ff       	call   c00004f0 <memset>
c001c801:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c805:	83 c4 10             	add    esp,0x10
c001c808:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001c80e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001c815:	01 f8                	add    eax,edi
c001c817:	81 c7 00 01 00 00    	add    edi,0x100
c001c81d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c820:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001c826:	75 b3                	jne    c001c7db <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001c828:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c82f:	50                   	push   eax
c001c830:	50                   	push   eax
c001c831:	53                   	push   ebx
c001c832:	56                   	push   esi
c001c833:	e8 b6 fe ff ff       	call   c001c6ee <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c838:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c83f:	83 c4 2c             	add    esp,0x2c
c001c842:	5b                   	pop    ebx
c001c843:	5e                   	pop    esi
c001c844:	5f                   	pop    edi
c001c845:	5d                   	pop    ebp
c001c846:	c3                   	ret    
c001c847:	90                   	nop

c001c848 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c848:	55                   	push   ebp
c001c849:	57                   	push   edi
c001c84a:	56                   	push   esi
c001c84b:	53                   	push   ebx
c001c84c:	31 db                	xor    ebx,ebx
c001c84e:	83 ec 0c             	sub    esp,0xc
c001c851:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c855:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c859:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c85c:	f7 c7 01 00 00 00    	test   edi,0x1
c001c862:	74 7a                	je     c001c8de <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c864:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c868:	89 d8                	mov    eax,ebx
c001c86a:	c1 e0 07             	shl    eax,0x7
c001c86d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c874:	55                   	push   ebp
c001c875:	56                   	push   esi
c001c876:	e8 2b fe ff ff       	call   c001c6a6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c87b:	5a                   	pop    edx
c001c87c:	83 f8 01             	cmp    eax,0x1
c001c87f:	59                   	pop    ecx
c001c880:	75 21                	jne    c001c8a3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c882:	50                   	push   eax
c001c883:	53                   	push   ebx
c001c884:	55                   	push   ebp
c001c885:	56                   	push   esi
c001c886:	e8 ad fe ff ff       	call   c001c738 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c88b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c892:	e8 1f b2 fe ff       	call   c0007ab6 <malloc>
c001c897:	89 c5                	mov    ebp,eax
c001c899:	89 04 24             	mov    DWORD PTR [esp],eax
c001c89c:	e8 99 10 00 00       	call   c001d93a <SATA::SATA()>
c001c8a1:	eb 24                	jmp    c001c8c7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c8a3:	83 f8 04             	cmp    eax,0x4
c001c8a6:	75 36                	jne    c001c8de <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c8a8:	51                   	push   ecx
c001c8a9:	53                   	push   ebx
c001c8aa:	55                   	push   ebp
c001c8ab:	56                   	push   esi
c001c8ac:	e8 87 fe ff ff       	call   c001c738 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c8b1:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c8b8:	e8 f9 b1 fe ff       	call   c0007ab6 <malloc>
c001c8bd:	89 c5                	mov    ebp,eax
c001c8bf:	89 04 24             	mov    DWORD PTR [esp],eax
c001c8c2:	e8 d5 17 00 00       	call   c001e09c <SATAPI::SATAPI()>
c001c8c7:	58                   	pop    eax
c001c8c8:	5a                   	pop    edx
c001c8c9:	55                   	push   ebp
c001c8ca:	56                   	push   esi
c001c8cb:	e8 7e fe fe ff       	call   c000c74e <Device::addChild(Device*)>
c001c8d0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c8d3:	56                   	push   esi
c001c8d4:	6a 00                	push   0x0
c001c8d6:	53                   	push   ebx
c001c8d7:	55                   	push   ebp
c001c8d8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c8db:	83 c4 20             	add    esp,0x20
c001c8de:	d1 ef                	shr    edi,1
c001c8e0:	43                   	inc    ebx
c001c8e1:	83 fb 20             	cmp    ebx,0x20
c001c8e4:	0f 85 72 ff ff ff    	jne    c001c85c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c8ea:	83 c4 0c             	add    esp,0xc
c001c8ed:	5b                   	pop    ebx
c001c8ee:	5e                   	pop    esi
c001c8ef:	5f                   	pop    edi
c001c8f0:	5d                   	pop    ebp
c001c8f1:	c3                   	ret    

c001c8f2 <SATABus::open(int, int, void*)>:
c001c8f2:	83 ec 14             	sub    esp,0x14
c001c8f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c8f9:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c8ff:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c905:	52                   	push   edx
c001c906:	50                   	push   eax
c001c907:	e8 3c ff ff ff       	call   c001c848 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c90c:	31 c0                	xor    eax,eax
c001c90e:	83 c4 1c             	add    esp,0x1c
c001c911:	c3                   	ret    

c001c912 <ATA::close(int, int, void*)>:
c001c912:	83 ec 0c             	sub    esp,0xc
c001c915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c919:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c91f:	85 c0                	test   eax,eax
c001c921:	74 0c                	je     c001c92f <ATA::close(int, int, void*)+0x1d>
c001c923:	83 ec 0c             	sub    esp,0xc
c001c926:	8b 10                	mov    edx,DWORD PTR [eax]
c001c928:	50                   	push   eax
c001c929:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c92c:	83 c4 10             	add    esp,0x10
c001c92f:	31 c0                	xor    eax,eax
c001c931:	83 c4 0c             	add    esp,0xc
c001c934:	c3                   	ret    
c001c935:	90                   	nop

c001c936 <ATA::powerSaving(PowerSavingLevel)>:
c001c936:	c3                   	ret    
c001c937:	90                   	nop

c001c938 <ATA::ATA()>:
c001c938:	83 ec 0c             	sub    esp,0xc
c001c93b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c93f:	83 ec 04             	sub    esp,0x4
c001c942:	68 00 02 00 00       	push   0x200
c001c947:	68 fd 2f 02 c0       	push   0xc0022ffd
c001c94c:	50                   	push   eax
c001c94d:	e8 c8 01 ff ff       	call   c000cb1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c952:	83 c4 10             	add    esp,0x10
c001c955:	ba 70 2f 02 c0       	mov    edx,0xc0022f70
c001c95a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c95e:	89 10                	mov    DWORD PTR [eax],edx
c001c960:	90                   	nop
c001c961:	83 c4 0c             	add    esp,0xc
c001c964:	c3                   	ret    
c001c965:	90                   	nop

c001c966 <ATA::flush(bool)>:
c001c966:	53                   	push   ebx
c001c967:	83 ec 08             	sub    esp,0x8
c001c96a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c96e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c973:	83 f8 01             	cmp    eax,0x1
c001c976:	19 c0                	sbb    eax,eax
c001c978:	83 e0 fd             	and    eax,0xfffffffd
c001c97b:	05 ea 00 00 00       	add    eax,0xea
c001c980:	50                   	push   eax
c001c981:	6a 07                	push   0x7
c001c983:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c98a:	50                   	push   eax
c001c98b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c991:	e8 16 f1 ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c996:	83 c4 0c             	add    esp,0xc
c001c999:	6a 00                	push   0x0
c001c99b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9a2:	50                   	push   eax
c001c9a3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9a9:	e8 e6 fb ff ff       	call   c001c594 <IDE::polling(unsigned char, unsigned int)>
c001c9ae:	83 c4 18             	add    esp,0x18
c001c9b1:	5b                   	pop    ebx
c001c9b2:	c3                   	ret    
c001c9b3:	90                   	nop

c001c9b4 <ATA::readyForCommand()>:
c001c9b4:	56                   	push   esi
c001c9b5:	53                   	push   ebx
c001c9b6:	53                   	push   ebx
c001c9b7:	31 db                	xor    ebx,ebx
c001c9b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c9bd:	51                   	push   ecx
c001c9be:	6a 0c                	push   0xc
c001c9c0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c9c7:	50                   	push   eax
c001c9c8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c9ce:	e8 99 f1 ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001c9d3:	83 c4 10             	add    esp,0x10
c001c9d6:	a8 88                	test   al,0x88
c001c9d8:	74 1f                	je     c001c9f9 <ATA::readyForCommand()+0x45>
c001c9da:	43                   	inc    ebx
c001c9db:	83 fb 63             	cmp    ebx,0x63
c001c9de:	7e dd                	jle    c001c9bd <ATA::readyForCommand()+0x9>
c001c9e0:	83 ec 0c             	sub    esp,0xc
c001c9e3:	6a 0a                	push   0xa
c001c9e5:	e8 26 97 ff ff       	call   c0016110 <milliTenthSleep(unsigned int)>
c001c9ea:	83 c4 10             	add    esp,0x10
c001c9ed:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c9f3:	75 c8                	jne    c001c9bd <ATA::readyForCommand()+0x9>
c001c9f5:	31 c0                	xor    eax,eax
c001c9f7:	eb 02                	jmp    c001c9fb <ATA::readyForCommand()+0x47>
c001c9f9:	b0 01                	mov    al,0x1
c001c9fb:	5a                   	pop    edx
c001c9fc:	5b                   	pop    ebx
c001c9fd:	5e                   	pop    esi
c001c9fe:	c3                   	ret    
c001c9ff:	90                   	nop

c001ca00 <ATA::access(unsigned long long, int, void*, bool)>:
c001ca00:	55                   	push   ebp
c001ca01:	57                   	push   edi
c001ca02:	56                   	push   esi
c001ca03:	53                   	push   ebx
c001ca04:	83 ec 2c             	sub    esp,0x2c
c001ca07:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ca0b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ca0f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ca13:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ca17:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ca1b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ca1f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ca23:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ca29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ca2d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ca33:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ca37:	c1 e0 06             	shl    eax,0x6
c001ca3a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001ca42:	74 5d                	je     c001caa1 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001ca44:	89 fa                	mov    edx,edi
c001ca46:	89 f0                	mov    eax,esi
c001ca48:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001ca4c:	c1 ea 1c             	shr    edx,0x1c
c001ca4f:	89 d1                	mov    ecx,edx
c001ca51:	09 c1                	or     ecx,eax
c001ca53:	74 25                	je     c001ca7a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001ca55:	31 ed                	xor    ebp,ebp
c001ca57:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001ca5e:	89 fa                	mov    edx,edi
c001ca60:	89 f0                	mov    eax,esi
c001ca62:	0f ad d0             	shrd   eax,edx,cl
c001ca65:	d3 ea                	shr    edx,cl
c001ca67:	f6 c1 20             	test   cl,0x20
c001ca6a:	74 02                	je     c001ca6e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001ca6c:	89 d0                	mov    eax,edx
c001ca6e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001ca72:	45                   	inc    ebp
c001ca73:	83 fd 06             	cmp    ebp,0x6
c001ca76:	75 df                	jne    c001ca57 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001ca78:	eb 76                	jmp    c001caf0 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001ca7a:	89 f0                	mov    eax,esi
c001ca7c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001ca81:	89 fa                	mov    edx,edi
c001ca83:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ca8a:	0f ac d0 10          	shrd   eax,edx,0x10
c001ca8e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ca93:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ca97:	c1 ee 18             	shr    esi,0x18
c001ca9a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001ca9f:	eb 56                	jmp    c001caf7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001caa1:	6a 00                	push   0x0
c001caa3:	6a 3f                	push   0x3f
c001caa5:	57                   	push   edi
c001caa6:	56                   	push   esi
c001caa7:	e8 a4 2a 00 00       	call   c001f550 <__umoddi3>
c001caac:	83 c4 10             	add    esp,0x10
c001caaf:	40                   	inc    eax
c001cab0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001cab4:	6a 00                	push   0x0
c001cab6:	68 f0 03 00 00       	push   0x3f0
c001cabb:	57                   	push   edi
c001cabc:	56                   	push   esi
c001cabd:	e8 8e 29 00 00       	call   c001f450 <__udivdi3>
c001cac2:	83 c4 10             	add    esp,0x10
c001cac5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001caca:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cad1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cad6:	6a 00                	push   0x0
c001cad8:	6a 3f                	push   0x3f
c001cada:	57                   	push   edi
c001cadb:	56                   	push   esi
c001cadc:	e8 6f 29 00 00       	call   c001f450 <__udivdi3>
c001cae1:	83 c4 10             	add    esp,0x10
c001cae4:	83 e0 0f             	and    eax,0xf
c001cae7:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001caec:	89 c6                	mov    esi,eax
c001caee:	eb 07                	jmp    c001caf7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001caf0:	31 f6                	xor    esi,esi
c001caf2:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001caf7:	bf 01 00 00 00       	mov    edi,0x1
c001cafc:	50                   	push   eax
c001cafd:	6a 00                	push   0x0
c001caff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb06:	50                   	push   eax
c001cb07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cb0b:	e8 a4 f1 ff ff       	call   c001bcb4 <IDE::enableIRQs(unsigned char, bool)>
c001cb10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb13:	e8 9c fe ff ff       	call   c001c9b4 <ATA::readyForCommand()>
c001cb18:	83 c4 10             	add    esp,0x10
c001cb1b:	84 c0                	test   al,al
c001cb1d:	0f 84 69 02 00 00    	je     c001cd8c <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001cb23:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cb29:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cb2f:	c1 e0 04             	shl    eax,0x4
c001cb32:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001cb39:	09 c6                	or     esi,eax
c001cb3b:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001cb40:	75 05                	jne    c001cb47 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001cb42:	83 ce a0             	or     esi,0xffffffa0
c001cb45:	eb 03                	jmp    c001cb4a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001cb47:	83 ce e0             	or     esi,0xffffffe0
c001cb4a:	89 f0                	mov    eax,esi
c001cb4c:	0f b6 f0             	movzx  esi,al
c001cb4f:	56                   	push   esi
c001cb50:	6a 06                	push   0x6
c001cb52:	51                   	push   ecx
c001cb53:	52                   	push   edx
c001cb54:	e8 53 ef ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb59:	83 c4 10             	add    esp,0x10
c001cb5c:	6a 00                	push   0x0
c001cb5e:	6a 01                	push   0x1
c001cb60:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb67:	50                   	push   eax
c001cb68:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb6e:	e8 39 ef ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb73:	83 c4 10             	add    esp,0x10
c001cb76:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001cb7b:	83 f8 02             	cmp    eax,0x2
c001cb7e:	75 6e                	jne    c001cbee <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001cb80:	6a 00                	push   0x0
c001cb82:	6a 08                	push   0x8
c001cb84:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb8b:	50                   	push   eax
c001cb8c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb92:	e8 15 ef ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb97:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001cb9c:	50                   	push   eax
c001cb9d:	6a 09                	push   0x9
c001cb9f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cba6:	50                   	push   eax
c001cba7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbad:	e8 fa ee ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbb2:	83 c4 20             	add    esp,0x20
c001cbb5:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001cbba:	50                   	push   eax
c001cbbb:	6a 0a                	push   0xa
c001cbbd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbc4:	50                   	push   eax
c001cbc5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbcb:	e8 dc ee ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbd0:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001cbd5:	50                   	push   eax
c001cbd6:	6a 0b                	push   0xb
c001cbd8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbdf:	50                   	push   eax
c001cbe0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbe6:	e8 c1 ee ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbeb:	83 c4 20             	add    esp,0x20
c001cbee:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cbf3:	50                   	push   eax
c001cbf4:	6a 02                	push   0x2
c001cbf6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbfd:	50                   	push   eax
c001cbfe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc04:	e8 a3 ee ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc09:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cc0e:	50                   	push   eax
c001cc0f:	6a 03                	push   0x3
c001cc11:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc18:	50                   	push   eax
c001cc19:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc1f:	e8 88 ee ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc24:	83 c4 20             	add    esp,0x20
c001cc27:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cc2c:	50                   	push   eax
c001cc2d:	6a 04                	push   0x4
c001cc2f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc36:	50                   	push   eax
c001cc37:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc3d:	e8 6a ee ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc42:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc47:	50                   	push   eax
c001cc48:	6a 05                	push   0x5
c001cc4a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc51:	50                   	push   eax
c001cc52:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc58:	e8 4f ee ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc5d:	83 c4 20             	add    esp,0x20
c001cc60:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cc65:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001cc6a:	74 11                	je     c001cc7d <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001cc6c:	b8 30 00 00 00       	mov    eax,0x30
c001cc71:	83 fa 02             	cmp    edx,0x2
c001cc74:	75 16                	jne    c001cc8c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cc76:	b8 34 00 00 00       	mov    eax,0x34
c001cc7b:	eb 0f                	jmp    c001cc8c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cc7d:	b8 20 00 00 00       	mov    eax,0x20
c001cc82:	83 fa 02             	cmp    edx,0x2
c001cc85:	75 05                	jne    c001cc8c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cc87:	b8 24 00 00 00       	mov    eax,0x24
c001cc8c:	50                   	push   eax
c001cc8d:	6a 07                	push   0x7
c001cc8f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc96:	50                   	push   eax
c001cc97:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc9d:	e8 0a ee ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cca2:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cca6:	83 c4 10             	add    esp,0x10
c001cca9:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ccae:	85 f6                	test   esi,esi
c001ccb0:	0f 84 b3 00 00 00    	je     c001cd69 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001ccb6:	50                   	push   eax
c001ccb7:	6a 01                	push   0x1
c001ccb9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ccc0:	50                   	push   eax
c001ccc1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ccc7:	e8 c8 f8 ff ff       	call   c001c594 <IDE::polling(unsigned char, unsigned int)>
c001cccc:	83 c4 10             	add    esp,0x10
c001cccf:	0f b6 f8             	movzx  edi,al
c001ccd2:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ccd8:	85 ff                	test   edi,edi
c001ccda:	74 1d                	je     c001ccf9 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001ccdc:	57                   	push   edi
c001ccdd:	0f b6 d2             	movzx  edx,dl
c001cce0:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cce7:	50                   	push   eax
c001cce8:	52                   	push   edx
c001cce9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ccef:	e8 e6 f7 ff ff       	call   c001c4da <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ccf4:	e9 90 00 00 00       	jmp    c001cd89 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001ccf9:	85 ed                	test   ebp,ebp
c001ccfb:	74 3b                	je     c001cd38 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001ccfd:	31 c9                	xor    ecx,ecx
c001ccff:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cd03:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cd07:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001cd0b:	50                   	push   eax
c001cd0c:	50                   	push   eax
c001cd0d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd14:	50                   	push   eax
c001cd15:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd1b:	e8 7a ed ff ff       	call   c001ba9a <IDE::getBase(unsigned char)>
c001cd20:	89 c2                	mov    edx,eax
c001cd22:	89 f8                	mov    eax,edi
c001cd24:	66 ef                	out    dx,ax
c001cd26:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cd2a:	83 c4 10             	add    esp,0x10
c001cd2d:	41                   	inc    ecx
c001cd2e:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cd34:	75 c9                	jne    c001ccff <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001cd36:	eb 23                	jmp    c001cd5b <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001cd38:	0f b6 d2             	movzx  edx,dl
c001cd3b:	51                   	push   ecx
c001cd3c:	51                   	push   ecx
c001cd3d:	52                   	push   edx
c001cd3e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cd44:	e8 51 ed ff ff       	call   c001ba9a <IDE::getBase(unsigned char)>
c001cd49:	b9 00 01 00 00       	mov    ecx,0x100
c001cd4e:	89 c2                	mov    edx,eax
c001cd50:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cd54:	fc                   	cld    
c001cd55:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cd58:	83 c4 10             	add    esp,0x10
c001cd5b:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001cd63:	4e                   	dec    esi
c001cd64:	e9 45 ff ff ff       	jmp    c001ccae <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001cd69:	31 ff                	xor    edi,edi
c001cd6b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cd70:	74 1a                	je     c001cd8c <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001cd72:	50                   	push   eax
c001cd73:	50                   	push   eax
c001cd74:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001cd79:	83 f8 02             	cmp    eax,0x2
c001cd7c:	0f 94 c0             	sete   al
c001cd7f:	0f b6 c0             	movzx  eax,al
c001cd82:	50                   	push   eax
c001cd83:	53                   	push   ebx
c001cd84:	e8 dd fb ff ff       	call   c001c966 <ATA::flush(bool)>
c001cd89:	83 c4 10             	add    esp,0x10
c001cd8c:	83 c4 2c             	add    esp,0x2c
c001cd8f:	89 f8                	mov    eax,edi
c001cd91:	5b                   	pop    ebx
c001cd92:	5e                   	pop    esi
c001cd93:	5f                   	pop    edi
c001cd94:	5d                   	pop    ebp
c001cd95:	c3                   	ret    

c001cd96 <ATA::detectCHS()>:
c001cd96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cd9a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cda0:	c1 e0 06             	shl    eax,0x6
c001cda3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cda9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cdb3:	c7 44 24 04 54 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022f54
c001cdbb:	e9 bd 45 ff ff       	jmp    c001137d <KePanic(char const*)>

c001cdc0 <ATA::open(int, int, void*)>:
c001cdc0:	53                   	push   ebx
c001cdc1:	83 ec 08             	sub    esp,0x8
c001cdc4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cdc8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cdcc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cdd0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cdd6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cddc:	c1 e0 06             	shl    eax,0x6
c001cddf:	01 d0                	add    eax,edx
c001cde1:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cde8:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cdee:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cdf5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cdff:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001ce05:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ce0c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001ce13:	75 0c                	jne    c001ce21 <ATA::open(int, int, void*)+0x61>
c001ce15:	83 ec 0c             	sub    esp,0xc
c001ce18:	53                   	push   ebx
c001ce19:	e8 78 ff ff ff       	call   c001cd96 <ATA::detectCHS()>
c001ce1e:	83 c4 10             	add    esp,0x10
c001ce21:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ce27:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ce2d:	c1 e0 06             	shl    eax,0x6
c001ce30:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001ce37:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ce41:	d1 e8                	shr    eax,1
c001ce43:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ce49:	6a 04                	push   0x4
c001ce4b:	6a 0c                	push   0xc
c001ce4d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce54:	50                   	push   eax
c001ce55:	52                   	push   edx
c001ce56:	e8 51 ec ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce5b:	90                   	nop
c001ce5c:	90                   	nop
c001ce5d:	6a 00                	push   0x0
c001ce5f:	6a 0c                	push   0xc
c001ce61:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce68:	50                   	push   eax
c001ce69:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce6f:	e8 38 ec ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce74:	83 c4 14             	add    esp,0x14
c001ce77:	53                   	push   ebx
c001ce78:	e8 05 fd fe ff       	call   c000cb82 <PhysicalDisk::startCache()>
c001ce7d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce80:	e8 41 0f ff ff       	call   c000ddc6 <createPartitionsForDisk(PhysicalDisk*)>
c001ce85:	31 c0                	xor    eax,eax
c001ce87:	83 c4 18             	add    esp,0x18
c001ce8a:	5b                   	pop    ebx
c001ce8b:	c3                   	ret    

c001ce8c <combineCharAndColour(char, unsigned char)>:
c001ce8c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ce91:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001ce97:	c1 e0 08             	shl    eax,0x8
c001ce9a:	09 d0                	or     eax,edx
c001ce9c:	c3                   	ret    

c001ce9d <combineColours(unsigned char, unsigned char)>:
c001ce9d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cea2:	c1 e0 04             	shl    eax,0x4
c001cea5:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cea9:	c3                   	ret    

c001ceaa <ATA::read(unsigned long long, int, void*)>:
c001ceaa:	55                   	push   ebp
c001ceab:	57                   	push   edi
c001ceac:	56                   	push   esi
c001cead:	be 04 00 00 00       	mov    esi,0x4
c001ceb2:	53                   	push   ebx
c001ceb3:	83 ec 0c             	sub    esp,0xc
c001ceb6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ceba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cebe:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cec1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cec5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cec9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cecf:	0f 87 a1 01 00 00    	ja     c001d076 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001ced5:	be 06 00 00 00       	mov    esi,0x6
c001ceda:	85 c9                	test   ecx,ecx
c001cedc:	0f 84 94 01 00 00    	je     c001d076 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cee2:	55                   	push   ebp
c001cee3:	55                   	push   ebp
c001cee4:	6a 00                	push   0x0
c001cee6:	51                   	push   ecx
c001cee7:	53                   	push   ebx
c001cee8:	52                   	push   edx
c001cee9:	50                   	push   eax
c001ceea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ceee:	e8 0d fb ff ff       	call   c001ca00 <ATA::access(unsigned long long, int, void*, bool)>
c001cef3:	83 c4 20             	add    esp,0x20
c001cef6:	89 c6                	mov    esi,eax
c001cef8:	85 c0                	test   eax,eax
c001cefa:	0f 85 71 01 00 00    	jne    c001d071 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001cf00:	03 1d b4 a0 02 c0    	add    ebx,DWORD PTR ds:0xc002a0b4
c001cf06:	89 da                	mov    edx,ebx
c001cf08:	50                   	push   eax
c001cf09:	bd 10 27 00 00       	mov    ebp,0x2710
c001cf0e:	50                   	push   eax
c001cf0f:	89 1d b4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0b4,ebx
c001cf15:	6a 0f                	push   0xf
c001cf17:	6a 00                	push   0x0
c001cf19:	e8 7f ff ff ff       	call   c001ce9d <combineColours(unsigned char, unsigned char)>
c001cf1e:	59                   	pop    ecx
c001cf1f:	b9 0a 00 00 00       	mov    ecx,0xa
c001cf24:	5b                   	pop    ebx
c001cf25:	0f b6 d8             	movzx  ebx,al
c001cf28:	89 d0                	mov    eax,edx
c001cf2a:	53                   	push   ebx
c001cf2b:	99                   	cdq    
c001cf2c:	f7 fd                	idiv   ebp
c001cf2e:	99                   	cdq    
c001cf2f:	f7 f9                	idiv   ecx
c001cf31:	83 c2 30             	add    edx,0x30
c001cf34:	0f b6 d2             	movzx  edx,dl
c001cf37:	52                   	push   edx
c001cf38:	e8 4f ff ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001cf3d:	5f                   	pop    edi
c001cf3e:	bf e8 03 00 00       	mov    edi,0x3e8
c001cf43:	5a                   	pop    edx
c001cf44:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cf4a:	53                   	push   ebx
c001cf4b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf50:	99                   	cdq    
c001cf51:	f7 ff                	idiv   edi
c001cf53:	99                   	cdq    
c001cf54:	f7 f9                	idiv   ecx
c001cf56:	8d 42 30             	lea    eax,[edx+0x30]
c001cf59:	0f b6 c0             	movzx  eax,al
c001cf5c:	50                   	push   eax
c001cf5d:	e8 2a ff ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001cf62:	5f                   	pop    edi
c001cf63:	bf 64 00 00 00       	mov    edi,0x64
c001cf68:	5a                   	pop    edx
c001cf69:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cf6f:	53                   	push   ebx
c001cf70:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf75:	99                   	cdq    
c001cf76:	f7 ff                	idiv   edi
c001cf78:	99                   	cdq    
c001cf79:	f7 f9                	idiv   ecx
c001cf7b:	8d 42 30             	lea    eax,[edx+0x30]
c001cf7e:	0f b6 c0             	movzx  eax,al
c001cf81:	50                   	push   eax
c001cf82:	e8 05 ff ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001cf87:	5a                   	pop    edx
c001cf88:	5a                   	pop    edx
c001cf89:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cf8f:	53                   	push   ebx
c001cf90:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf95:	99                   	cdq    
c001cf96:	f7 f9                	idiv   ecx
c001cf98:	99                   	cdq    
c001cf99:	f7 f9                	idiv   ecx
c001cf9b:	8d 42 30             	lea    eax,[edx+0x30]
c001cf9e:	0f b6 c0             	movzx  eax,al
c001cfa1:	50                   	push   eax
c001cfa2:	e8 e5 fe ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001cfa7:	5a                   	pop    edx
c001cfa8:	5a                   	pop    edx
c001cfa9:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cfaf:	53                   	push   ebx
c001cfb0:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cfb5:	99                   	cdq    
c001cfb6:	f7 f9                	idiv   ecx
c001cfb8:	83 c2 30             	add    edx,0x30
c001cfbb:	0f b6 d2             	movzx  edx,dl
c001cfbe:	52                   	push   edx
c001cfbf:	e8 c8 fe ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001cfc4:	5a                   	pop    edx
c001cfc5:	5a                   	pop    edx
c001cfc6:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cfcc:	53                   	push   ebx
c001cfcd:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cfd2:	99                   	cdq    
c001cfd3:	f7 fd                	idiv   ebp
c001cfd5:	99                   	cdq    
c001cfd6:	f7 f9                	idiv   ecx
c001cfd8:	8d 42 30             	lea    eax,[edx+0x30]
c001cfdb:	0f b6 c0             	movzx  eax,al
c001cfde:	50                   	push   eax
c001cfdf:	e8 a8 fe ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001cfe4:	5d                   	pop    ebp
c001cfe5:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cfea:	5a                   	pop    edx
c001cfeb:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cff1:	53                   	push   ebx
c001cff2:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cff7:	99                   	cdq    
c001cff8:	f7 fd                	idiv   ebp
c001cffa:	99                   	cdq    
c001cffb:	f7 f9                	idiv   ecx
c001cffd:	8d 42 30             	lea    eax,[edx+0x30]
c001d000:	0f b6 c0             	movzx  eax,al
c001d003:	50                   	push   eax
c001d004:	e8 83 fe ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001d009:	5d                   	pop    ebp
c001d00a:	5a                   	pop    edx
c001d00b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d011:	53                   	push   ebx
c001d012:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d017:	99                   	cdq    
c001d018:	f7 ff                	idiv   edi
c001d01a:	99                   	cdq    
c001d01b:	f7 f9                	idiv   ecx
c001d01d:	8d 42 30             	lea    eax,[edx+0x30]
c001d020:	0f b6 c0             	movzx  eax,al
c001d023:	50                   	push   eax
c001d024:	e8 63 fe ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001d029:	5f                   	pop    edi
c001d02a:	5d                   	pop    ebp
c001d02b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d031:	53                   	push   ebx
c001d032:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d037:	99                   	cdq    
c001d038:	f7 f9                	idiv   ecx
c001d03a:	99                   	cdq    
c001d03b:	f7 f9                	idiv   ecx
c001d03d:	8d 42 30             	lea    eax,[edx+0x30]
c001d040:	0f b6 c0             	movzx  eax,al
c001d043:	50                   	push   eax
c001d044:	e8 43 fe ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001d049:	5a                   	pop    edx
c001d04a:	5f                   	pop    edi
c001d04b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d051:	53                   	push   ebx
c001d052:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d057:	99                   	cdq    
c001d058:	f7 f9                	idiv   ecx
c001d05a:	83 c2 30             	add    edx,0x30
c001d05d:	0f b6 d2             	movzx  edx,dl
c001d060:	52                   	push   edx
c001d061:	e8 26 fe ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001d066:	83 c4 10             	add    esp,0x10
c001d069:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d06f:	eb 05                	jmp    c001d076 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d071:	be 01 00 00 00       	mov    esi,0x1
c001d076:	83 c4 0c             	add    esp,0xc
c001d079:	89 f0                	mov    eax,esi
c001d07b:	5b                   	pop    ebx
c001d07c:	5e                   	pop    esi
c001d07d:	5f                   	pop    edi
c001d07e:	5d                   	pop    ebp
c001d07f:	c3                   	ret    

c001d080 <ATA::write(unsigned long long, int, void*)>:
c001d080:	55                   	push   ebp
c001d081:	57                   	push   edi
c001d082:	56                   	push   esi
c001d083:	be 04 00 00 00       	mov    esi,0x4
c001d088:	53                   	push   ebx
c001d089:	83 ec 0c             	sub    esp,0xc
c001d08c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d090:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d094:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d097:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d09b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d09f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d0a5:	0f 87 9c 01 00 00    	ja     c001d247 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d0ab:	be 06 00 00 00       	mov    esi,0x6
c001d0b0:	85 c9                	test   ecx,ecx
c001d0b2:	0f 84 8f 01 00 00    	je     c001d247 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d0b8:	55                   	push   ebp
c001d0b9:	55                   	push   ebp
c001d0ba:	6a 01                	push   0x1
c001d0bc:	51                   	push   ecx
c001d0bd:	53                   	push   ebx
c001d0be:	52                   	push   edx
c001d0bf:	50                   	push   eax
c001d0c0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d0c4:	e8 37 f9 ff ff       	call   c001ca00 <ATA::access(unsigned long long, int, void*, bool)>
c001d0c9:	83 c4 20             	add    esp,0x20
c001d0cc:	89 c6                	mov    esi,eax
c001d0ce:	85 c0                	test   eax,eax
c001d0d0:	0f 85 6c 01 00 00    	jne    c001d242 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d0d6:	01 1d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebx
c001d0dc:	bd 10 27 00 00       	mov    ebp,0x2710
c001d0e1:	50                   	push   eax
c001d0e2:	50                   	push   eax
c001d0e3:	6a 0f                	push   0xf
c001d0e5:	6a 00                	push   0x0
c001d0e7:	e8 b1 fd ff ff       	call   c001ce9d <combineColours(unsigned char, unsigned char)>
c001d0ec:	5a                   	pop    edx
c001d0ed:	0f b6 d8             	movzx  ebx,al
c001d0f0:	59                   	pop    ecx
c001d0f1:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d0f6:	53                   	push   ebx
c001d0f7:	b9 0a 00 00 00       	mov    ecx,0xa
c001d0fc:	99                   	cdq    
c001d0fd:	f7 fd                	idiv   ebp
c001d0ff:	99                   	cdq    
c001d100:	f7 f9                	idiv   ecx
c001d102:	8d 42 30             	lea    eax,[edx+0x30]
c001d105:	0f b6 c0             	movzx  eax,al
c001d108:	50                   	push   eax
c001d109:	e8 7e fd ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001d10e:	5f                   	pop    edi
c001d10f:	bf e8 03 00 00       	mov    edi,0x3e8
c001d114:	5a                   	pop    edx
c001d115:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d11b:	53                   	push   ebx
c001d11c:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d121:	99                   	cdq    
c001d122:	f7 ff                	idiv   edi
c001d124:	99                   	cdq    
c001d125:	f7 f9                	idiv   ecx
c001d127:	8d 42 30             	lea    eax,[edx+0x30]
c001d12a:	0f b6 c0             	movzx  eax,al
c001d12d:	50                   	push   eax
c001d12e:	e8 59 fd ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001d133:	5f                   	pop    edi
c001d134:	bf 64 00 00 00       	mov    edi,0x64
c001d139:	5a                   	pop    edx
c001d13a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d140:	53                   	push   ebx
c001d141:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d146:	99                   	cdq    
c001d147:	f7 ff                	idiv   edi
c001d149:	99                   	cdq    
c001d14a:	f7 f9                	idiv   ecx
c001d14c:	8d 42 30             	lea    eax,[edx+0x30]
c001d14f:	0f b6 c0             	movzx  eax,al
c001d152:	50                   	push   eax
c001d153:	e8 34 fd ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001d158:	5a                   	pop    edx
c001d159:	5a                   	pop    edx
c001d15a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d160:	53                   	push   ebx
c001d161:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d166:	99                   	cdq    
c001d167:	f7 f9                	idiv   ecx
c001d169:	99                   	cdq    
c001d16a:	f7 f9                	idiv   ecx
c001d16c:	8d 42 30             	lea    eax,[edx+0x30]
c001d16f:	0f b6 c0             	movzx  eax,al
c001d172:	50                   	push   eax
c001d173:	e8 14 fd ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001d178:	5a                   	pop    edx
c001d179:	5a                   	pop    edx
c001d17a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d180:	53                   	push   ebx
c001d181:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d186:	99                   	cdq    
c001d187:	f7 f9                	idiv   ecx
c001d189:	8d 42 30             	lea    eax,[edx+0x30]
c001d18c:	0f b6 c0             	movzx  eax,al
c001d18f:	50                   	push   eax
c001d190:	e8 f7 fc ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001d195:	5a                   	pop    edx
c001d196:	5a                   	pop    edx
c001d197:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d19d:	53                   	push   ebx
c001d19e:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d1a3:	99                   	cdq    
c001d1a4:	f7 fd                	idiv   ebp
c001d1a6:	99                   	cdq    
c001d1a7:	f7 f9                	idiv   ecx
c001d1a9:	8d 42 30             	lea    eax,[edx+0x30]
c001d1ac:	0f b6 c0             	movzx  eax,al
c001d1af:	50                   	push   eax
c001d1b0:	e8 d7 fc ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001d1b5:	5d                   	pop    ebp
c001d1b6:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d1bb:	5a                   	pop    edx
c001d1bc:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d1c2:	53                   	push   ebx
c001d1c3:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d1c8:	99                   	cdq    
c001d1c9:	f7 fd                	idiv   ebp
c001d1cb:	99                   	cdq    
c001d1cc:	f7 f9                	idiv   ecx
c001d1ce:	8d 42 30             	lea    eax,[edx+0x30]
c001d1d1:	0f b6 c0             	movzx  eax,al
c001d1d4:	50                   	push   eax
c001d1d5:	e8 b2 fc ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001d1da:	5d                   	pop    ebp
c001d1db:	5a                   	pop    edx
c001d1dc:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d1e2:	53                   	push   ebx
c001d1e3:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d1e8:	99                   	cdq    
c001d1e9:	f7 ff                	idiv   edi
c001d1eb:	99                   	cdq    
c001d1ec:	f7 f9                	idiv   ecx
c001d1ee:	8d 42 30             	lea    eax,[edx+0x30]
c001d1f1:	0f b6 c0             	movzx  eax,al
c001d1f4:	50                   	push   eax
c001d1f5:	e8 92 fc ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001d1fa:	5f                   	pop    edi
c001d1fb:	5d                   	pop    ebp
c001d1fc:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d202:	53                   	push   ebx
c001d203:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d208:	99                   	cdq    
c001d209:	f7 f9                	idiv   ecx
c001d20b:	99                   	cdq    
c001d20c:	f7 f9                	idiv   ecx
c001d20e:	8d 42 30             	lea    eax,[edx+0x30]
c001d211:	0f b6 c0             	movzx  eax,al
c001d214:	50                   	push   eax
c001d215:	e8 72 fc ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001d21a:	5a                   	pop    edx
c001d21b:	5f                   	pop    edi
c001d21c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d222:	53                   	push   ebx
c001d223:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001d228:	99                   	cdq    
c001d229:	f7 f9                	idiv   ecx
c001d22b:	83 c2 30             	add    edx,0x30
c001d22e:	0f b6 d2             	movzx  edx,dl
c001d231:	52                   	push   edx
c001d232:	e8 55 fc ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001d237:	83 c4 10             	add    esp,0x10
c001d23a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d240:	eb 05                	jmp    c001d247 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d242:	be 01 00 00 00       	mov    esi,0x1
c001d247:	83 c4 0c             	add    esp,0xc
c001d24a:	89 f0                	mov    eax,esi
c001d24c:	5b                   	pop    ebx
c001d24d:	5e                   	pop    esi
c001d24e:	5f                   	pop    edi
c001d24f:	5d                   	pop    ebp
c001d250:	c3                   	ret    
c001d251:	90                   	nop

c001d252 <ATAPI::write(unsigned long long, int, void*)>:
c001d252:	b8 03 00 00 00       	mov    eax,0x3
c001d257:	c3                   	ret    

c001d258 <ATAPI::close(int, int, void*)>:
c001d258:	83 ec 0c             	sub    esp,0xc
c001d25b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d25f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d265:	85 c0                	test   eax,eax
c001d267:	74 0c                	je     c001d275 <ATAPI::close(int, int, void*)+0x1d>
c001d269:	83 ec 0c             	sub    esp,0xc
c001d26c:	8b 10                	mov    edx,DWORD PTR [eax]
c001d26e:	50                   	push   eax
c001d26f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d272:	83 c4 10             	add    esp,0x10
c001d275:	31 c0                	xor    eax,eax
c001d277:	83 c4 0c             	add    esp,0xc
c001d27a:	c3                   	ret    
c001d27b:	90                   	nop

c001d27c <ATAPI::ATAPI()>:
c001d27c:	83 ec 0c             	sub    esp,0xc
c001d27f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d283:	83 ec 04             	sub    esp,0x4
c001d286:	68 00 08 00 00       	push   0x800
c001d28b:	68 9d 30 02 c0       	push   0xc002309d
c001d290:	50                   	push   eax
c001d291:	e8 84 f8 fe ff       	call   c000cb1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d296:	83 c4 10             	add    esp,0x10
c001d299:	ba b8 2f 02 c0       	mov    edx,0xc0022fb8
c001d29e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2a2:	89 10                	mov    DWORD PTR [eax],edx
c001d2a4:	90                   	nop
c001d2a5:	83 c4 0c             	add    esp,0xc
c001d2a8:	c3                   	ret    
c001d2a9:	90                   	nop

c001d2aa <ATAPI::readyForCommand()>:
c001d2aa:	56                   	push   esi
c001d2ab:	53                   	push   ebx
c001d2ac:	53                   	push   ebx
c001d2ad:	31 db                	xor    ebx,ebx
c001d2af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d2b3:	51                   	push   ecx
c001d2b4:	6a 0c                	push   0xc
c001d2b6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d2bd:	50                   	push   eax
c001d2be:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d2c4:	e8 a3 e8 ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001d2c9:	83 c4 10             	add    esp,0x10
c001d2cc:	a8 88                	test   al,0x88
c001d2ce:	74 25                	je     c001d2f5 <ATAPI::readyForCommand()+0x4b>
c001d2d0:	43                   	inc    ebx
c001d2d1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d2d7:	7e da                	jle    c001d2b3 <ATAPI::readyForCommand()+0x9>
c001d2d9:	83 ec 0c             	sub    esp,0xc
c001d2dc:	68 5e 01 00 00       	push   0x15e
c001d2e1:	e8 2a 8e ff ff       	call   c0016110 <milliTenthSleep(unsigned int)>
c001d2e6:	83 c4 10             	add    esp,0x10
c001d2e9:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d2ef:	75 c2                	jne    c001d2b3 <ATAPI::readyForCommand()+0x9>
c001d2f1:	31 c0                	xor    eax,eax
c001d2f3:	eb 02                	jmp    c001d2f7 <ATAPI::readyForCommand()+0x4d>
c001d2f5:	b0 01                	mov    al,0x1
c001d2f7:	5a                   	pop    edx
c001d2f8:	5b                   	pop    ebx
c001d2f9:	5e                   	pop    esi
c001d2fa:	c3                   	ret    
c001d2fb:	90                   	nop

c001d2fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d2fc:	55                   	push   ebp
c001d2fd:	57                   	push   edi
c001d2fe:	56                   	push   esi
c001d2ff:	53                   	push   ebx
c001d300:	83 ec 20             	sub    esp,0x20
c001d303:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d307:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d30b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d30f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d313:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d317:	6a 01                	push   0x1
c001d319:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d320:	50                   	push   eax
c001d321:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d327:	e8 88 e9 ff ff       	call   c001bcb4 <IDE::enableIRQs(unsigned char, bool)>
c001d32c:	5e                   	pop    esi
c001d32d:	58                   	pop    eax
c001d32e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d335:	50                   	push   eax
c001d336:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d33c:	e8 45 e7 ff ff       	call   c001ba86 <IDE::prepareInterrupt(unsigned char)>
c001d341:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d344:	e8 61 ff ff ff       	call   c001d2aa <ATAPI::readyForCommand()>
c001d349:	83 c4 10             	add    esp,0x10
c001d34c:	84 c0                	test   al,al
c001d34e:	75 0a                	jne    c001d35a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d350:	bb 01 00 00 00       	mov    ebx,0x1
c001d355:	e9 60 02 00 00       	jmp    c001d5ba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d35a:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d360:	c1 e0 04             	shl    eax,0x4
c001d363:	0f b6 c0             	movzx  eax,al
c001d366:	50                   	push   eax
c001d367:	6a 06                	push   0x6
c001d369:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d370:	50                   	push   eax
c001d371:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d377:	e8 30 e7 ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d37c:	6a 00                	push   0x0
c001d37e:	6a 01                	push   0x1
c001d380:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d387:	50                   	push   eax
c001d388:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d38e:	e8 19 e7 ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d393:	83 c4 20             	add    esp,0x20
c001d396:	0f b6 c3             	movzx  eax,bl
c001d399:	0f b6 df             	movzx  ebx,bh
c001d39c:	50                   	push   eax
c001d39d:	6a 04                	push   0x4
c001d39f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3a6:	50                   	push   eax
c001d3a7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3ad:	e8 fa e6 ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d3b2:	53                   	push   ebx
c001d3b3:	6a 05                	push   0x5
c001d3b5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3bc:	50                   	push   eax
c001d3bd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3c3:	e8 e4 e6 ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d3c8:	83 c4 20             	add    esp,0x20
c001d3cb:	68 a0 00 00 00       	push   0xa0
c001d3d0:	6a 07                	push   0x7
c001d3d2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3d9:	50                   	push   eax
c001d3da:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3e0:	e8 c7 e6 ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d3e5:	83 c4 0c             	add    esp,0xc
c001d3e8:	6a 01                	push   0x1
c001d3ea:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d3f1:	50                   	push   eax
c001d3f2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d3f8:	e8 97 f1 ff ff       	call   c001c594 <IDE::polling(unsigned char, unsigned int)>
c001d3fd:	83 c4 10             	add    esp,0x10
c001d400:	0f b6 d8             	movzx  ebx,al
c001d403:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d409:	85 db                	test   ebx,ebx
c001d40b:	74 20                	je     c001d42d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d40d:	53                   	push   ebx
c001d40e:	0f b6 c0             	movzx  eax,al
c001d411:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d418:	52                   	push   edx
c001d419:	50                   	push   eax
c001d41a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d420:	e8 b5 f0 ff ff       	call   c001c4da <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d425:	83 c4 10             	add    esp,0x10
c001d428:	e9 8d 01 00 00       	jmp    c001d5ba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d42d:	0f b6 c0             	movzx  eax,al
c001d430:	53                   	push   ebx
c001d431:	53                   	push   ebx
c001d432:	50                   	push   eax
c001d433:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d439:	e8 5c e6 ff ff       	call   c001ba9a <IDE::getBase(unsigned char)>
c001d43e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d442:	b9 06 00 00 00       	mov    ecx,0x6
c001d447:	89 c2                	mov    edx,eax
c001d449:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d44c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d450:	83 c4 10             	add    esp,0x10
c001d453:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d458:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d45c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d462:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d469:	85 db                	test   ebx,ebx
c001d46b:	0f 84 ec 00 00 00    	je     c001d55d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d471:	51                   	push   ecx
c001d472:	51                   	push   ecx
c001d473:	52                   	push   edx
c001d474:	50                   	push   eax
c001d475:	e8 a0 e7 ff ff       	call   c001bc1a <IDE::waitInterrupt(unsigned char)>
c001d47a:	83 c4 10             	add    esp,0x10
c001d47d:	84 c0                	test   al,al
c001d47f:	0f 84 cb fe ff ff    	je     c001d350 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d485:	56                   	push   esi
c001d486:	56                   	push   esi
c001d487:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d48e:	50                   	push   eax
c001d48f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d495:	e8 ec e5 ff ff       	call   c001ba86 <IDE::prepareInterrupt(unsigned char)>
c001d49a:	83 c4 0c             	add    esp,0xc
c001d49d:	6a 04                	push   0x4
c001d49f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d4a6:	50                   	push   eax
c001d4a7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d4ad:	e8 ba e6 ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001d4b2:	83 c4 0c             	add    esp,0xc
c001d4b5:	89 c6                	mov    esi,eax
c001d4b7:	6a 05                	push   0x5
c001d4b9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d4c0:	50                   	push   eax
c001d4c1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d4c7:	e8 a0 e6 ff ff       	call   c001bb6c <IDE::read(unsigned char, unsigned char)>
c001d4cc:	89 f1                	mov    ecx,esi
c001d4ce:	0f b6 c0             	movzx  eax,al
c001d4d1:	0f b6 f1             	movzx  esi,cl
c001d4d4:	c1 e0 08             	shl    eax,0x8
c001d4d7:	09 c6                	or     esi,eax
c001d4d9:	d1 fe                	sar    esi,1
c001d4db:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d4df:	83 c4 10             	add    esp,0x10
c001d4e2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d4e7:	74 41                	je     c001d52a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d4e9:	31 c9                	xor    ecx,ecx
c001d4eb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d4f1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d4f8:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d4fc:	75 0a                	jne    c001d508 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d4fe:	01 c9                	add    ecx,ecx
c001d500:	01 cd                	add    ebp,ecx
c001d502:	4b                   	dec    ebx
c001d503:	e9 54 ff ff ff       	jmp    c001d45c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d508:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d50d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d511:	51                   	push   ecx
c001d512:	51                   	push   ecx
c001d513:	52                   	push   edx
c001d514:	50                   	push   eax
c001d515:	e8 80 e5 ff ff       	call   c001ba9a <IDE::getBase(unsigned char)>
c001d51a:	89 c2                	mov    edx,eax
c001d51c:	89 f0                	mov    eax,esi
c001d51e:	66 ef                	out    dx,ax
c001d520:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d524:	83 c4 10             	add    esp,0x10
c001d527:	41                   	inc    ecx
c001d528:	eb c1                	jmp    c001d4eb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d52a:	31 f6                	xor    esi,esi
c001d52c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d532:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d539:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d53d:	75 06                	jne    c001d545 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d53f:	01 f6                	add    esi,esi
c001d541:	01 f5                	add    ebp,esi
c001d543:	eb bd                	jmp    c001d502 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d545:	51                   	push   ecx
c001d546:	51                   	push   ecx
c001d547:	52                   	push   edx
c001d548:	50                   	push   eax
c001d549:	e8 4c e5 ff ff       	call   c001ba9a <IDE::getBase(unsigned char)>
c001d54e:	89 c2                	mov    edx,eax
c001d550:	66 ed                	in     ax,dx
c001d552:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d557:	83 c4 10             	add    esp,0x10
c001d55a:	46                   	inc    esi
c001d55b:	eb cf                	jmp    c001d52c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d55d:	51                   	push   ecx
c001d55e:	51                   	push   ecx
c001d55f:	52                   	push   edx
c001d560:	50                   	push   eax
c001d561:	e8 b4 e6 ff ff       	call   c001bc1a <IDE::waitInterrupt(unsigned char)>
c001d566:	83 c4 10             	add    esp,0x10
c001d569:	84 c0                	test   al,al
c001d56b:	0f 84 df fd ff ff    	je     c001d350 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d571:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d576:	52                   	push   edx
c001d577:	52                   	push   edx
c001d578:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d57f:	50                   	push   eax
c001d580:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d586:	e8 fb e4 ff ff       	call   c001ba86 <IDE::prepareInterrupt(unsigned char)>
c001d58b:	83 c4 10             	add    esp,0x10
c001d58e:	50                   	push   eax
c001d58f:	50                   	push   eax
c001d590:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d597:	50                   	push   eax
c001d598:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d59e:	e8 f7 e4 ff ff       	call   c001ba9a <IDE::getBase(unsigned char)>
c001d5a3:	8d 50 07             	lea    edx,[eax+0x7]
c001d5a6:	ec                   	in     al,dx
c001d5a7:	83 c4 10             	add    esp,0x10
c001d5aa:	a8 88                	test   al,0x88
c001d5ac:	74 0a                	je     c001d5b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d5ae:	4b                   	dec    ebx
c001d5af:	75 dd                	jne    c001d58e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d5b1:	bb 02 00 00 00       	mov    ebx,0x2
c001d5b6:	eb 02                	jmp    c001d5ba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d5b8:	31 db                	xor    ebx,ebx
c001d5ba:	83 c4 1c             	add    esp,0x1c
c001d5bd:	89 d8                	mov    eax,ebx
c001d5bf:	5b                   	pop    ebx
c001d5c0:	5e                   	pop    esi
c001d5c1:	5f                   	pop    edi
c001d5c2:	5d                   	pop    ebp
c001d5c3:	c3                   	ret    

c001d5c4 <ATAPI::diskRemoved()>:
c001d5c4:	53                   	push   ebx
c001d5c5:	83 ec 14             	sub    esp,0x14
c001d5c8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d5cc:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d5d3:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d5d9:	e8 d8 04 ff ff       	call   c000dab6 <LogicalDisk::unmount()>
c001d5de:	58                   	pop    eax
c001d5df:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d5e5:	e8 ae 0e ff ff       	call   c000e498 <VCache::writeWriteBuffer()>
c001d5ea:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d5f0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d5f4:	83 c4 18             	add    esp,0x18
c001d5f7:	5b                   	pop    ebx
c001d5f8:	e9 8b 0e ff ff       	jmp    c000e488 <VCache::invalidateReadBuffer()>
c001d5fd:	90                   	nop

c001d5fe <ATAPI::eject()>:
c001d5fe:	57                   	push   edi
c001d5ff:	b9 03 00 00 00       	mov    ecx,0x3
c001d604:	53                   	push   ebx
c001d605:	83 ec 14             	sub    esp,0x14
c001d608:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d60c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d610:	fc                   	cld    
c001d611:	31 c0                	xor    eax,eax
c001d613:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d615:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d61a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d61f:	50                   	push   eax
c001d620:	50                   	push   eax
c001d621:	6a 00                	push   0x0
c001d623:	6a 00                	push   0x0
c001d625:	6a 00                	push   0x0
c001d627:	6a 02                	push   0x2
c001d629:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d62d:	50                   	push   eax
c001d62e:	53                   	push   ebx
c001d62f:	e8 c8 fc ff ff       	call   c001d2fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d634:	83 c4 14             	add    esp,0x14
c001d637:	53                   	push   ebx
c001d638:	e8 87 ff ff ff       	call   c001d5c4 <ATAPI::diskRemoved()>
c001d63d:	83 c4 24             	add    esp,0x24
c001d640:	31 c0                	xor    eax,eax
c001d642:	5b                   	pop    ebx
c001d643:	5f                   	pop    edi
c001d644:	c3                   	ret    
c001d645:	90                   	nop

c001d646 <ATAPI::diskInserted()>:
c001d646:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d64a:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d651:	c3                   	ret    

c001d652 <ATAPI::detectMedia()>:
c001d652:	56                   	push   esi
c001d653:	53                   	push   ebx
c001d654:	83 ec 28             	sub    esp,0x28
c001d657:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d65b:	6a 0c                	push   0xc
c001d65d:	6a 00                	push   0x0
c001d65f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d663:	56                   	push   esi
c001d664:	e8 87 2e fe ff       	call   c00004f0 <memset>
c001d669:	58                   	pop    eax
c001d66a:	5a                   	pop    edx
c001d66b:	6a 00                	push   0x0
c001d66d:	6a 00                	push   0x0
c001d66f:	6a 00                	push   0x0
c001d671:	6a 00                	push   0x0
c001d673:	56                   	push   esi
c001d674:	53                   	push   ebx
c001d675:	e8 82 fc ff ff       	call   c001d2fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d67a:	83 c4 1c             	add    esp,0x1c
c001d67d:	6a 0c                	push   0xc
c001d67f:	6a 00                	push   0x0
c001d681:	56                   	push   esi
c001d682:	e8 69 2e fe ff       	call   c00004f0 <memset>
c001d687:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d68c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d691:	59                   	pop    ecx
c001d692:	58                   	pop    eax
c001d693:	6a 01                	push   0x1
c001d695:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d699:	50                   	push   eax
c001d69a:	6a 00                	push   0x0
c001d69c:	6a 12                	push   0x12
c001d69e:	56                   	push   esi
c001d69f:	53                   	push   ebx
c001d6a0:	e8 57 fc ff ff       	call   c001d2fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d6a5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d6a9:	83 c4 20             	add    esp,0x20
c001d6ac:	83 e0 7f             	and    eax,0x7f
c001d6af:	83 f8 70             	cmp    eax,0x70
c001d6b2:	74 15                	je     c001d6c9 <ATAPI::detectMedia()+0x77>
c001d6b4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d6bb:	75 0c                	jne    c001d6c9 <ATAPI::detectMedia()+0x77>
c001d6bd:	83 ec 0c             	sub    esp,0xc
c001d6c0:	53                   	push   ebx
c001d6c1:	e8 80 ff ff ff       	call   c001d646 <ATAPI::diskInserted()>
c001d6c6:	83 c4 10             	add    esp,0x10
c001d6c9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d6cd:	83 e0 0f             	and    eax,0xf
c001d6d0:	83 f8 02             	cmp    eax,0x2
c001d6d3:	75 1b                	jne    c001d6f0 <ATAPI::detectMedia()+0x9e>
c001d6d5:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d6da:	75 2d                	jne    c001d709 <ATAPI::detectMedia()+0xb7>
c001d6dc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d6e3:	74 24                	je     c001d709 <ATAPI::detectMedia()+0xb7>
c001d6e5:	83 ec 0c             	sub    esp,0xc
c001d6e8:	53                   	push   ebx
c001d6e9:	e8 d6 fe ff ff       	call   c001d5c4 <ATAPI::diskRemoved()>
c001d6ee:	eb 16                	jmp    c001d706 <ATAPI::detectMedia()+0xb4>
c001d6f0:	85 c0                	test   eax,eax
c001d6f2:	75 15                	jne    c001d709 <ATAPI::detectMedia()+0xb7>
c001d6f4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d6fb:	75 0c                	jne    c001d709 <ATAPI::detectMedia()+0xb7>
c001d6fd:	83 ec 0c             	sub    esp,0xc
c001d700:	53                   	push   ebx
c001d701:	e8 40 ff ff ff       	call   c001d646 <ATAPI::diskInserted()>
c001d706:	83 c4 10             	add    esp,0x10
c001d709:	83 c4 24             	add    esp,0x24
c001d70c:	5b                   	pop    ebx
c001d70d:	5e                   	pop    esi
c001d70e:	c3                   	ret    
c001d70f:	90                   	nop

c001d710 <ATAPI::open(int, int, void*)>:
c001d710:	56                   	push   esi
c001d711:	53                   	push   ebx
c001d712:	50                   	push   eax
c001d713:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d717:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d71b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d71f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d725:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d72b:	c1 e0 06             	shl    eax,0x6
c001d72e:	01 d0                	add    eax,edx
c001d730:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d737:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d73d:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d744:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d74e:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d754:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d75b:	6a 04                	push   0x4
c001d75d:	6a 0c                	push   0xc
c001d75f:	51                   	push   ecx
c001d760:	52                   	push   edx
c001d761:	e8 46 e3 ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d766:	90                   	nop
c001d767:	90                   	nop
c001d768:	6a 00                	push   0x0
c001d76a:	6a 0c                	push   0xc
c001d76c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d773:	50                   	push   eax
c001d774:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d77a:	e8 2d e3 ff ff       	call   c001baac <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d77f:	83 c4 14             	add    esp,0x14
c001d782:	68 78 01 00 00       	push   0x178
c001d787:	e8 2a a3 fe ff       	call   c0007ab6 <malloc>
c001d78c:	83 c4 0c             	add    esp,0xc
c001d78f:	89 c6                	mov    esi,eax
c001d791:	6a 00                	push   0x0
c001d793:	68 ff ff ff 7f       	push   0x7fffffff
c001d798:	6a 00                	push   0x0
c001d79a:	6a 00                	push   0x0
c001d79c:	53                   	push   ebx
c001d79d:	68 4f 31 02 c0       	push   0xc002314f
c001d7a2:	50                   	push   eax
c001d7a3:	e8 4c 01 ff ff       	call   c000d8f4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d7a8:	83 c4 14             	add    esp,0x14
c001d7ab:	56                   	push   esi
c001d7ac:	e8 03 02 ff ff       	call   c000d9b4 <LogicalDisk::assignDriveLetter()>
c001d7b1:	5a                   	pop    edx
c001d7b2:	0f be c0             	movsx  eax,al
c001d7b5:	59                   	pop    ecx
c001d7b6:	50                   	push   eax
c001d7b7:	68 a0 2f 02 c0       	push   0xc0022fa0
c001d7bc:	e8 84 d1 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d7c1:	58                   	pop    eax
c001d7c2:	5a                   	pop    edx
c001d7c3:	56                   	push   esi
c001d7c4:	53                   	push   ebx
c001d7c5:	e8 84 ef fe ff       	call   c000c74e <Device::addChild(Device*)>
c001d7ca:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d7d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d7d3:	e8 aa f3 fe ff       	call   c000cb82 <PhysicalDisk::startCache()>
c001d7d8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d7df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d7e2:	e8 6b fe ff ff       	call   c001d652 <ATAPI::detectMedia()>
c001d7e7:	83 c4 14             	add    esp,0x14
c001d7ea:	31 c0                	xor    eax,eax
c001d7ec:	5b                   	pop    ebx
c001d7ed:	5e                   	pop    esi
c001d7ee:	c3                   	ret    
c001d7ef:	90                   	nop

c001d7f0 <ATAPI::read(unsigned long long, int, void*)>:
c001d7f0:	55                   	push   ebp
c001d7f1:	57                   	push   edi
c001d7f2:	56                   	push   esi
c001d7f3:	53                   	push   ebx
c001d7f4:	83 ec 1c             	sub    esp,0x1c
c001d7f7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d7fb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d7ff:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d803:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d80a:	74 3c                	je     c001d848 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d80c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d810:	b9 03 00 00 00       	mov    ecx,0x3
c001d815:	fc                   	cld    
c001d816:	31 c0                	xor    eax,eax
c001d818:	0f ce                	bswap  esi
c001d81a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d81c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d821:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d825:	89 e8                	mov    eax,ebp
c001d827:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d82b:	50                   	push   eax
c001d82c:	50                   	push   eax
c001d82d:	55                   	push   ebp
c001d82e:	c1 e5 0b             	shl    ebp,0xb
c001d831:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d835:	6a 00                	push   0x0
c001d837:	55                   	push   ebp
c001d838:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d83c:	50                   	push   eax
c001d83d:	53                   	push   ebx
c001d83e:	e8 b9 fa ff ff       	call   c001d2fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d843:	83 c4 20             	add    esp,0x20
c001d846:	eb 1a                	jmp    c001d862 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d848:	83 ec 0c             	sub    esp,0xc
c001d84b:	53                   	push   ebx
c001d84c:	e8 01 fe ff ff       	call   c001d652 <ATAPI::detectMedia()>
c001d851:	83 c4 10             	add    esp,0x10
c001d854:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d85b:	75 af                	jne    c001d80c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d85d:	b8 02 00 00 00       	mov    eax,0x2
c001d862:	83 c4 1c             	add    esp,0x1c
c001d865:	5b                   	pop    ebx
c001d866:	5e                   	pop    esi
c001d867:	5f                   	pop    edi
c001d868:	5d                   	pop    ebp
c001d869:	c3                   	ret    

c001d86a <SATA::close(int, int, void*)>:
c001d86a:	83 ec 0c             	sub    esp,0xc
c001d86d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d871:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d877:	85 c0                	test   eax,eax
c001d879:	74 0c                	je     c001d887 <SATA::close(int, int, void*)+0x1d>
c001d87b:	83 ec 0c             	sub    esp,0xc
c001d87e:	8b 10                	mov    edx,DWORD PTR [eax]
c001d880:	50                   	push   eax
c001d881:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d884:	83 c4 10             	add    esp,0x10
c001d887:	31 c0                	xor    eax,eax
c001d889:	83 c4 0c             	add    esp,0xc
c001d88c:	c3                   	ret    
c001d88d:	90                   	nop

c001d88e <SATA::powerSaving(PowerSavingLevel)>:
c001d88e:	c3                   	ret    
c001d88f:	90                   	nop

c001d890 <SATA::open(int, int, void*)>:
c001d890:	56                   	push   esi
c001d891:	53                   	push   ebx
c001d892:	50                   	push   eax
c001d893:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d897:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d89b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d8a5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d8ab:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d8b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d8b9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d8c3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d8c9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d8d0:	e8 ea a4 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d8d5:	89 c6                	mov    esi,eax
c001d8d7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d8dd:	81 c6 00 10 00 00    	add    esi,0x1000
c001d8e3:	e8 d7 a4 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d8e8:	39 c6                	cmp    esi,eax
c001d8ea:	74 10                	je     c001d8fc <SATA::open(int, int, void*)+0x6c>
c001d8ec:	83 ec 0c             	sub    esp,0xc
c001d8ef:	68 e8 2f 02 c0       	push   0xc0022fe8
c001d8f4:	e8 84 3a ff ff       	call   c001137d <KePanic(char const*)>
c001d8f9:	83 c4 10             	add    esp,0x10
c001d8fc:	83 ec 0c             	sub    esp,0xc
c001d8ff:	6a 02                	push   0x2
c001d901:	e8 07 bd fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001d906:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d90c:	6a 03                	push   0x3
c001d90e:	50                   	push   eax
c001d90f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d915:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d91b:	e8 00 c4 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d920:	83 c4 14             	add    esp,0x14
c001d923:	53                   	push   ebx
c001d924:	e8 59 f2 fe ff       	call   c000cb82 <PhysicalDisk::startCache()>
c001d929:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d92c:	e8 95 04 ff ff       	call   c000ddc6 <createPartitionsForDisk(PhysicalDisk*)>
c001d931:	83 c4 14             	add    esp,0x14
c001d934:	31 c0                	xor    eax,eax
c001d936:	5b                   	pop    ebx
c001d937:	5e                   	pop    esi
c001d938:	c3                   	ret    
c001d939:	90                   	nop

c001d93a <SATA::SATA()>:
c001d93a:	83 ec 0c             	sub    esp,0xc
c001d93d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d941:	83 ec 04             	sub    esp,0x4
c001d944:	68 00 02 00 00       	push   0x200
c001d949:	68 fc 2f 02 c0       	push   0xc0022ffc
c001d94e:	50                   	push   eax
c001d94f:	e8 c6 f1 fe ff       	call   c000cb1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d954:	83 c4 10             	add    esp,0x10
c001d957:	ba 6c 30 02 c0       	mov    edx,0xc002306c
c001d95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d960:	89 10                	mov    DWORD PTR [eax],edx
c001d962:	90                   	nop
c001d963:	83 c4 0c             	add    esp,0xc
c001d966:	c3                   	ret    
c001d967:	90                   	nop

c001d968 <SATA::access(unsigned long long, int, void*, bool)>:
c001d968:	55                   	push   ebp
c001d969:	57                   	push   edi
c001d96a:	56                   	push   esi
c001d96b:	53                   	push   ebx
c001d96c:	83 ec 2c             	sub    esp,0x2c
c001d96f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d973:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d977:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d97b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d97f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d983:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d988:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d98c:	7e 10                	jle    c001d99e <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001d98e:	83 ec 0c             	sub    esp,0xc
c001d991:	68 0c 30 02 c0       	push   0xc002300c
c001d996:	e8 e2 39 ff ff       	call   c001137d <KePanic(char const*)>
c001d99b:	83 c4 10             	add    esp,0x10
c001d99e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d9a4:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d9aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d9b4:	89 d0                	mov    eax,edx
c001d9b6:	c1 e0 07             	shl    eax,0x7
c001d9b9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d9bd:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d9c7:	51                   	push   ecx
c001d9c8:	8d 42 02             	lea    eax,[edx+0x2]
c001d9cb:	51                   	push   ecx
c001d9cc:	c1 e0 07             	shl    eax,0x7
c001d9cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d9d3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d9d7:	50                   	push   eax
c001d9d8:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d9de:	e8 91 ec ff ff       	call   c001c674 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d9e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d9e7:	83 c4 10             	add    esp,0x10
c001d9ea:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d9ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d9f3:	0f 84 57 01 00 00    	je     c001db50 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d9f9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d9fd:	c1 e0 09             	shl    eax,0x9
c001da00:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001da05:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001da09:	74 0e                	je     c001da19 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001da0b:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001da11:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001da15:	89 c1                	mov    ecx,eax
c001da17:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001da19:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001da1f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001da23:	8d 42 02             	lea    eax,[edx+0x2]
c001da26:	c1 e0 07             	shl    eax,0x7
c001da29:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001da2d:	8b 00                	mov    eax,DWORD PTR [eax]
c001da2f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001da35:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001da3b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da3f:	c1 e1 05             	shl    ecx,0x5
c001da42:	01 c8                	add    eax,ecx
c001da44:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001da48:	83 e1 01             	and    ecx,0x1
c001da4b:	89 ce                	mov    esi,ecx
c001da4d:	8a 08                	mov    cl,BYTE PTR [eax]
c001da4f:	c1 e6 06             	shl    esi,0x6
c001da52:	83 e1 bf             	and    ecx,0xffffffbf
c001da55:	09 f1                	or     ecx,esi
c001da57:	88 08                	mov    BYTE PTR [eax],cl
c001da59:	8b 08                	mov    ecx,DWORD PTR [eax]
c001da5b:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001da61:	81 c9 05 00 01 00    	or     ecx,0x10005
c001da67:	89 08                	mov    DWORD PTR [eax],ecx
c001da69:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001da6f:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001da75:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001da7b:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001da7e:	50                   	push   eax
c001da7f:	68 90 00 00 00       	push   0x90
c001da84:	6a 00                	push   0x0
c001da86:	56                   	push   esi
c001da87:	e8 64 2a fe ff       	call   c00004f0 <memset>
c001da8c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001da92:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001da98:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001da9c:	83 c4 10             	add    esp,0x10
c001da9f:	48                   	dec    eax
c001daa0:	25 ff ff 3f 00       	and    eax,0x3fffff
c001daa5:	89 c1                	mov    ecx,eax
c001daa7:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001daad:	25 00 00 c0 ff       	and    eax,0xffc00000
c001dab2:	09 c8                	or     eax,ecx
c001dab4:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001daba:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001dac0:	83 c8 80             	or     eax,0xffffff80
c001dac3:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001dac9:	66 8b 06             	mov    ax,WORD PTR [esi]
c001dacc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dad0:	25 00 7f 00 00       	and    eax,0x7f00
c001dad5:	0d 27 80 ff ff       	or     eax,0xffff8027
c001dada:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dadf:	66 89 06             	mov    WORD PTR [esi],ax
c001dae2:	b0 35                	mov    al,0x35
c001dae4:	75 02                	jne    c001dae8 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001dae6:	b0 25                	mov    al,0x25
c001dae8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001daeb:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001daef:	89 e8                	mov    eax,ebp
c001daf1:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001daf5:	c1 e8 10             	shr    eax,0x10
c001daf8:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001dafb:	89 e8                	mov    eax,ebp
c001dafd:	c1 e8 18             	shr    eax,0x18
c001db00:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001db03:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001db07:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001db0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001db0e:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001db11:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001db15:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001db19:	89 d6                	mov    esi,edx
c001db1b:	31 c0                	xor    eax,eax
c001db1d:	c1 e6 07             	shl    esi,0x7
c001db20:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001db24:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001db2a:	80 e1 88             	and    cl,0x88
c001db2d:	74 0a                	je     c001db39 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001db2f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001db34:	74 0a                	je     c001db40 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001db36:	40                   	inc    eax
c001db37:	eb eb                	jmp    c001db24 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001db39:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001db3e:	75 17                	jne    c001db57 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001db40:	83 ec 0c             	sub    esp,0xc
c001db43:	68 45 30 02 c0       	push   0xc0023045
c001db48:	e8 f8 cd fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001db4d:	83 c4 10             	add    esp,0x10
c001db50:	b8 01 00 00 00       	mov    eax,0x1
c001db55:	eb 5d                	jmp    c001dbb4 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001db57:	b8 01 00 00 00       	mov    eax,0x1
c001db5c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001db60:	c1 e2 07             	shl    edx,0x7
c001db63:	d3 e0                	shl    eax,cl
c001db65:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001db69:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001db6f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001db75:	85 c8                	test   eax,ecx
c001db77:	74 16                	je     c001db8f <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001db79:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001db7f:	0f ba e1 1e          	bt     ecx,0x1e
c001db83:	73 ea                	jae    c001db6f <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001db85:	83 ec 0c             	sub    esp,0xc
c001db88:	68 53 30 02 c0       	push   0xc0023053
c001db8d:	eb b9                	jmp    c001db48 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001db8f:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001db95:	0f ba e0 1e          	bt     eax,0x1e
c001db99:	72 b5                	jb     c001db50 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001db9b:	31 c0                	xor    eax,eax
c001db9d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dba2:	75 10                	jne    c001dbb4 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001dba4:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001dbaa:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001dbae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dbb2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dbb4:	83 c4 2c             	add    esp,0x2c
c001dbb7:	5b                   	pop    ebx
c001dbb8:	5e                   	pop    esi
c001dbb9:	5f                   	pop    edi
c001dbba:	5d                   	pop    ebp
c001dbbb:	c3                   	ret    

c001dbbc <SATA::read(unsigned long long, int, void*)>:
c001dbbc:	55                   	push   ebp
c001dbbd:	57                   	push   edi
c001dbbe:	56                   	push   esi
c001dbbf:	be 04 00 00 00       	mov    esi,0x4
c001dbc4:	53                   	push   ebx
c001dbc5:	83 ec 0c             	sub    esp,0xc
c001dbc8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001dbcc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dbd0:	8d 7b ff             	lea    edi,[ebx-0x1]
c001dbd3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dbd7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001dbdb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dbe1:	0f 87 1a 02 00 00    	ja     c001de01 <SATA::read(unsigned long long, int, void*)+0x245>
c001dbe7:	be 06 00 00 00       	mov    esi,0x6
c001dbec:	85 c9                	test   ecx,ecx
c001dbee:	0f 84 0d 02 00 00    	je     c001de01 <SATA::read(unsigned long long, int, void*)+0x245>
c001dbf4:	56                   	push   esi
c001dbf5:	56                   	push   esi
c001dbf6:	6a 00                	push   0x0
c001dbf8:	51                   	push   ecx
c001dbf9:	53                   	push   ebx
c001dbfa:	52                   	push   edx
c001dbfb:	50                   	push   eax
c001dbfc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc00:	e8 63 fd ff ff       	call   c001d968 <SATA::access(unsigned long long, int, void*, bool)>
c001dc05:	83 c4 20             	add    esp,0x20
c001dc08:	89 c6                	mov    esi,eax
c001dc0a:	85 c0                	test   eax,eax
c001dc0c:	0f 85 ea 01 00 00    	jne    c001ddfc <SATA::read(unsigned long long, int, void*)+0x240>
c001dc12:	01 1d b4 a0 02 c0    	add    DWORD PTR ds:0xc002a0b4,ebx
c001dc18:	bb 0a 00 00 00       	mov    ebx,0xa
c001dc1d:	50                   	push   eax
c001dc1e:	50                   	push   eax
c001dc1f:	6a 0f                	push   0xf
c001dc21:	6a 00                	push   0x0
c001dc23:	e8 75 f2 ff ff       	call   c001ce9d <combineColours(unsigned char, unsigned char)>
c001dc28:	5a                   	pop    edx
c001dc29:	0f b6 c0             	movzx  eax,al
c001dc2c:	59                   	pop    ecx
c001dc2d:	b9 10 27 00 00       	mov    ecx,0x2710
c001dc32:	50                   	push   eax
c001dc33:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc38:	99                   	cdq    
c001dc39:	f7 f9                	idiv   ecx
c001dc3b:	99                   	cdq    
c001dc3c:	f7 fb                	idiv   ebx
c001dc3e:	8d 42 30             	lea    eax,[edx+0x30]
c001dc41:	0f b6 c0             	movzx  eax,al
c001dc44:	50                   	push   eax
c001dc45:	e8 42 f2 ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001dc4a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dc50:	5f                   	pop    edi
c001dc51:	5d                   	pop    ebp
c001dc52:	bd e8 03 00 00       	mov    ebp,0x3e8
c001dc57:	6a 0f                	push   0xf
c001dc59:	6a 00                	push   0x0
c001dc5b:	e8 3d f2 ff ff       	call   c001ce9d <combineColours(unsigned char, unsigned char)>
c001dc60:	5a                   	pop    edx
c001dc61:	0f b6 c0             	movzx  eax,al
c001dc64:	59                   	pop    ecx
c001dc65:	50                   	push   eax
c001dc66:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc6b:	99                   	cdq    
c001dc6c:	f7 fd                	idiv   ebp
c001dc6e:	99                   	cdq    
c001dc6f:	f7 fb                	idiv   ebx
c001dc71:	8d 42 30             	lea    eax,[edx+0x30]
c001dc74:	0f b6 c0             	movzx  eax,al
c001dc77:	50                   	push   eax
c001dc78:	e8 0f f2 ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001dc7d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dc83:	5f                   	pop    edi
c001dc84:	bf 64 00 00 00       	mov    edi,0x64
c001dc89:	58                   	pop    eax
c001dc8a:	6a 0f                	push   0xf
c001dc8c:	6a 00                	push   0x0
c001dc8e:	e8 0a f2 ff ff       	call   c001ce9d <combineColours(unsigned char, unsigned char)>
c001dc93:	5a                   	pop    edx
c001dc94:	0f b6 c0             	movzx  eax,al
c001dc97:	59                   	pop    ecx
c001dc98:	50                   	push   eax
c001dc99:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc9e:	99                   	cdq    
c001dc9f:	f7 ff                	idiv   edi
c001dca1:	99                   	cdq    
c001dca2:	f7 fb                	idiv   ebx
c001dca4:	8d 42 30             	lea    eax,[edx+0x30]
c001dca7:	0f b6 c0             	movzx  eax,al
c001dcaa:	50                   	push   eax
c001dcab:	e8 dc f1 ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001dcb0:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dcb6:	58                   	pop    eax
c001dcb7:	5a                   	pop    edx
c001dcb8:	6a 0f                	push   0xf
c001dcba:	6a 00                	push   0x0
c001dcbc:	e8 dc f1 ff ff       	call   c001ce9d <combineColours(unsigned char, unsigned char)>
c001dcc1:	59                   	pop    ecx
c001dcc2:	0f b6 c0             	movzx  eax,al
c001dcc5:	5a                   	pop    edx
c001dcc6:	50                   	push   eax
c001dcc7:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dccc:	99                   	cdq    
c001dccd:	f7 fb                	idiv   ebx
c001dccf:	99                   	cdq    
c001dcd0:	f7 fb                	idiv   ebx
c001dcd2:	8d 42 30             	lea    eax,[edx+0x30]
c001dcd5:	0f b6 c0             	movzx  eax,al
c001dcd8:	50                   	push   eax
c001dcd9:	e8 ae f1 ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001dcde:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dce4:	59                   	pop    ecx
c001dce5:	58                   	pop    eax
c001dce6:	6a 0f                	push   0xf
c001dce8:	6a 00                	push   0x0
c001dcea:	e8 ae f1 ff ff       	call   c001ce9d <combineColours(unsigned char, unsigned char)>
c001dcef:	5a                   	pop    edx
c001dcf0:	0f b6 c0             	movzx  eax,al
c001dcf3:	59                   	pop    ecx
c001dcf4:	50                   	push   eax
c001dcf5:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dcfa:	99                   	cdq    
c001dcfb:	f7 fb                	idiv   ebx
c001dcfd:	8d 42 30             	lea    eax,[edx+0x30]
c001dd00:	0f b6 c0             	movzx  eax,al
c001dd03:	50                   	push   eax
c001dd04:	e8 83 f1 ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001dd09:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dd0f:	58                   	pop    eax
c001dd10:	5a                   	pop    edx
c001dd11:	6a 0f                	push   0xf
c001dd13:	6a 00                	push   0x0
c001dd15:	e8 83 f1 ff ff       	call   c001ce9d <combineColours(unsigned char, unsigned char)>
c001dd1a:	59                   	pop    ecx
c001dd1b:	0f b6 c0             	movzx  eax,al
c001dd1e:	5a                   	pop    edx
c001dd1f:	b9 10 27 00 00       	mov    ecx,0x2710
c001dd24:	50                   	push   eax
c001dd25:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd2a:	99                   	cdq    
c001dd2b:	f7 f9                	idiv   ecx
c001dd2d:	99                   	cdq    
c001dd2e:	f7 fb                	idiv   ebx
c001dd30:	8d 42 30             	lea    eax,[edx+0x30]
c001dd33:	0f b6 c0             	movzx  eax,al
c001dd36:	50                   	push   eax
c001dd37:	e8 50 f1 ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001dd3c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dd42:	59                   	pop    ecx
c001dd43:	58                   	pop    eax
c001dd44:	6a 0f                	push   0xf
c001dd46:	6a 00                	push   0x0
c001dd48:	e8 50 f1 ff ff       	call   c001ce9d <combineColours(unsigned char, unsigned char)>
c001dd4d:	5a                   	pop    edx
c001dd4e:	0f b6 c0             	movzx  eax,al
c001dd51:	59                   	pop    ecx
c001dd52:	50                   	push   eax
c001dd53:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd58:	99                   	cdq    
c001dd59:	f7 fd                	idiv   ebp
c001dd5b:	99                   	cdq    
c001dd5c:	f7 fb                	idiv   ebx
c001dd5e:	8d 42 30             	lea    eax,[edx+0x30]
c001dd61:	0f b6 c0             	movzx  eax,al
c001dd64:	50                   	push   eax
c001dd65:	e8 22 f1 ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001dd6a:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dd70:	5d                   	pop    ebp
c001dd71:	58                   	pop    eax
c001dd72:	6a 0f                	push   0xf
c001dd74:	6a 00                	push   0x0
c001dd76:	e8 22 f1 ff ff       	call   c001ce9d <combineColours(unsigned char, unsigned char)>
c001dd7b:	5a                   	pop    edx
c001dd7c:	0f b6 c0             	movzx  eax,al
c001dd7f:	59                   	pop    ecx
c001dd80:	50                   	push   eax
c001dd81:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd86:	99                   	cdq    
c001dd87:	f7 ff                	idiv   edi
c001dd89:	99                   	cdq    
c001dd8a:	f7 fb                	idiv   ebx
c001dd8c:	8d 42 30             	lea    eax,[edx+0x30]
c001dd8f:	0f b6 c0             	movzx  eax,al
c001dd92:	50                   	push   eax
c001dd93:	e8 f4 f0 ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001dd98:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dd9e:	5f                   	pop    edi
c001dd9f:	5d                   	pop    ebp
c001dda0:	6a 0f                	push   0xf
c001dda2:	6a 00                	push   0x0
c001dda4:	e8 f4 f0 ff ff       	call   c001ce9d <combineColours(unsigned char, unsigned char)>
c001dda9:	5a                   	pop    edx
c001ddaa:	0f b6 c0             	movzx  eax,al
c001ddad:	59                   	pop    ecx
c001ddae:	50                   	push   eax
c001ddaf:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ddb4:	99                   	cdq    
c001ddb5:	f7 fb                	idiv   ebx
c001ddb7:	99                   	cdq    
c001ddb8:	f7 fb                	idiv   ebx
c001ddba:	8d 42 30             	lea    eax,[edx+0x30]
c001ddbd:	0f b6 c0             	movzx  eax,al
c001ddc0:	50                   	push   eax
c001ddc1:	e8 c6 f0 ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001ddc6:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001ddcc:	5f                   	pop    edi
c001ddcd:	5d                   	pop    ebp
c001ddce:	6a 0f                	push   0xf
c001ddd0:	6a 00                	push   0x0
c001ddd2:	e8 c6 f0 ff ff       	call   c001ce9d <combineColours(unsigned char, unsigned char)>
c001ddd7:	5a                   	pop    edx
c001ddd8:	0f b6 c0             	movzx  eax,al
c001dddb:	59                   	pop    ecx
c001dddc:	50                   	push   eax
c001dddd:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dde2:	99                   	cdq    
c001dde3:	f7 fb                	idiv   ebx
c001dde5:	83 c2 30             	add    edx,0x30
c001dde8:	0f b6 d2             	movzx  edx,dl
c001ddeb:	52                   	push   edx
c001ddec:	e8 9b f0 ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001ddf1:	83 c4 10             	add    esp,0x10
c001ddf4:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001ddfa:	eb 05                	jmp    c001de01 <SATA::read(unsigned long long, int, void*)+0x245>
c001ddfc:	be 01 00 00 00       	mov    esi,0x1
c001de01:	83 c4 0c             	add    esp,0xc
c001de04:	89 f0                	mov    eax,esi
c001de06:	5b                   	pop    ebx
c001de07:	5e                   	pop    esi
c001de08:	5f                   	pop    edi
c001de09:	5d                   	pop    ebp
c001de0a:	c3                   	ret    
c001de0b:	90                   	nop

c001de0c <SATA::write(unsigned long long, int, void*)>:
c001de0c:	55                   	push   ebp
c001de0d:	b8 04 00 00 00       	mov    eax,0x4
c001de12:	57                   	push   edi
c001de13:	56                   	push   esi
c001de14:	53                   	push   ebx
c001de15:	83 ec 1c             	sub    esp,0x1c
c001de18:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001de1c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001de20:	8d 75 ff             	lea    esi,[ebp-0x1]
c001de23:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001de27:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001de2b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001de31:	0f 87 32 02 00 00    	ja     c001e069 <SATA::write(unsigned long long, int, void*)+0x25d>
c001de37:	b8 06 00 00 00       	mov    eax,0x6
c001de3c:	85 ff                	test   edi,edi
c001de3e:	0f 84 25 02 00 00    	je     c001e069 <SATA::write(unsigned long long, int, void*)+0x25d>
c001de44:	89 ee                	mov    esi,ebp
c001de46:	c1 e6 09             	shl    esi,0x9
c001de49:	01 fe                	add    esi,edi
c001de4b:	89 c8                	mov    eax,ecx
c001de4d:	89 da                	mov    edx,ebx
c001de4f:	83 c0 01             	add    eax,0x1
c001de52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001de56:	83 d2 00             	adc    edx,0x0
c001de59:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001de5d:	50                   	push   eax
c001de5e:	50                   	push   eax
c001de5f:	6a 01                	push   0x1
c001de61:	57                   	push   edi
c001de62:	81 c7 00 02 00 00    	add    edi,0x200
c001de68:	6a 01                	push   0x1
c001de6a:	53                   	push   ebx
c001de6b:	51                   	push   ecx
c001de6c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001de70:	e8 f3 fa ff ff       	call   c001d968 <SATA::access(unsigned long long, int, void*, bool)>
c001de75:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001de79:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001de7d:	83 c4 20             	add    esp,0x20
c001de80:	39 f7                	cmp    edi,esi
c001de82:	75 c7                	jne    c001de4b <SATA::write(unsigned long long, int, void*)+0x3f>
c001de84:	bb 0a 00 00 00       	mov    ebx,0xa
c001de89:	01 2d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebp
c001de8f:	bd 10 27 00 00       	mov    ebp,0x2710
c001de94:	50                   	push   eax
c001de95:	50                   	push   eax
c001de96:	6a 0f                	push   0xf
c001de98:	6a 00                	push   0x0
c001de9a:	e8 fe ef ff ff       	call   c001ce9d <combineColours(unsigned char, unsigned char)>
c001de9f:	5a                   	pop    edx
c001dea0:	0f b6 c0             	movzx  eax,al
c001dea3:	59                   	pop    ecx
c001dea4:	50                   	push   eax
c001dea5:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001deaa:	99                   	cdq    
c001deab:	f7 fd                	idiv   ebp
c001dead:	99                   	cdq    
c001deae:	f7 fb                	idiv   ebx
c001deb0:	8d 42 30             	lea    eax,[edx+0x30]
c001deb3:	0f b6 c0             	movzx  eax,al
c001deb6:	50                   	push   eax
c001deb7:	e8 d0 ef ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001debc:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dec2:	5e                   	pop    esi
c001dec3:	5f                   	pop    edi
c001dec4:	bf e8 03 00 00       	mov    edi,0x3e8
c001dec9:	6a 0f                	push   0xf
c001decb:	6a 00                	push   0x0
c001decd:	e8 cb ef ff ff       	call   c001ce9d <combineColours(unsigned char, unsigned char)>
c001ded2:	5a                   	pop    edx
c001ded3:	0f b6 c0             	movzx  eax,al
c001ded6:	59                   	pop    ecx
c001ded7:	50                   	push   eax
c001ded8:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dedd:	99                   	cdq    
c001dede:	f7 ff                	idiv   edi
c001dee0:	99                   	cdq    
c001dee1:	f7 fb                	idiv   ebx
c001dee3:	8d 42 30             	lea    eax,[edx+0x30]
c001dee6:	0f b6 c0             	movzx  eax,al
c001dee9:	50                   	push   eax
c001deea:	e8 9d ef ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001deef:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001def5:	5e                   	pop    esi
c001def6:	be 64 00 00 00       	mov    esi,0x64
c001defb:	58                   	pop    eax
c001defc:	6a 0f                	push   0xf
c001defe:	6a 00                	push   0x0
c001df00:	e8 98 ef ff ff       	call   c001ce9d <combineColours(unsigned char, unsigned char)>
c001df05:	5a                   	pop    edx
c001df06:	0f b6 c0             	movzx  eax,al
c001df09:	59                   	pop    ecx
c001df0a:	50                   	push   eax
c001df0b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001df10:	99                   	cdq    
c001df11:	f7 fe                	idiv   esi
c001df13:	99                   	cdq    
c001df14:	f7 fb                	idiv   ebx
c001df16:	8d 42 30             	lea    eax,[edx+0x30]
c001df19:	0f b6 c0             	movzx  eax,al
c001df1c:	50                   	push   eax
c001df1d:	e8 6a ef ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001df22:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001df28:	58                   	pop    eax
c001df29:	5a                   	pop    edx
c001df2a:	6a 0f                	push   0xf
c001df2c:	6a 00                	push   0x0
c001df2e:	e8 6a ef ff ff       	call   c001ce9d <combineColours(unsigned char, unsigned char)>
c001df33:	59                   	pop    ecx
c001df34:	0f b6 c0             	movzx  eax,al
c001df37:	5a                   	pop    edx
c001df38:	50                   	push   eax
c001df39:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001df3e:	99                   	cdq    
c001df3f:	f7 fb                	idiv   ebx
c001df41:	99                   	cdq    
c001df42:	f7 fb                	idiv   ebx
c001df44:	8d 42 30             	lea    eax,[edx+0x30]
c001df47:	0f b6 c0             	movzx  eax,al
c001df4a:	50                   	push   eax
c001df4b:	e8 3c ef ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001df50:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001df56:	59                   	pop    ecx
c001df57:	58                   	pop    eax
c001df58:	6a 0f                	push   0xf
c001df5a:	6a 00                	push   0x0
c001df5c:	e8 3c ef ff ff       	call   c001ce9d <combineColours(unsigned char, unsigned char)>
c001df61:	5a                   	pop    edx
c001df62:	0f b6 c0             	movzx  eax,al
c001df65:	59                   	pop    ecx
c001df66:	50                   	push   eax
c001df67:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001df6c:	99                   	cdq    
c001df6d:	f7 fb                	idiv   ebx
c001df6f:	83 c2 30             	add    edx,0x30
c001df72:	0f b6 d2             	movzx  edx,dl
c001df75:	52                   	push   edx
c001df76:	e8 11 ef ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001df7b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001df81:	58                   	pop    eax
c001df82:	5a                   	pop    edx
c001df83:	6a 0f                	push   0xf
c001df85:	6a 00                	push   0x0
c001df87:	e8 11 ef ff ff       	call   c001ce9d <combineColours(unsigned char, unsigned char)>
c001df8c:	59                   	pop    ecx
c001df8d:	0f b6 c0             	movzx  eax,al
c001df90:	5a                   	pop    edx
c001df91:	50                   	push   eax
c001df92:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001df97:	99                   	cdq    
c001df98:	f7 fd                	idiv   ebp
c001df9a:	99                   	cdq    
c001df9b:	f7 fb                	idiv   ebx
c001df9d:	8d 42 30             	lea    eax,[edx+0x30]
c001dfa0:	0f b6 c0             	movzx  eax,al
c001dfa3:	50                   	push   eax
c001dfa4:	e8 e3 ee ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001dfa9:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dfaf:	59                   	pop    ecx
c001dfb0:	5d                   	pop    ebp
c001dfb1:	6a 0f                	push   0xf
c001dfb3:	6a 00                	push   0x0
c001dfb5:	e8 e3 ee ff ff       	call   c001ce9d <combineColours(unsigned char, unsigned char)>
c001dfba:	5a                   	pop    edx
c001dfbb:	0f b6 c0             	movzx  eax,al
c001dfbe:	59                   	pop    ecx
c001dfbf:	50                   	push   eax
c001dfc0:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dfc5:	99                   	cdq    
c001dfc6:	f7 ff                	idiv   edi
c001dfc8:	99                   	cdq    
c001dfc9:	f7 fb                	idiv   ebx
c001dfcb:	8d 42 30             	lea    eax,[edx+0x30]
c001dfce:	0f b6 c0             	movzx  eax,al
c001dfd1:	50                   	push   eax
c001dfd2:	e8 b5 ee ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001dfd7:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dfdd:	5f                   	pop    edi
c001dfde:	5d                   	pop    ebp
c001dfdf:	6a 0f                	push   0xf
c001dfe1:	6a 00                	push   0x0
c001dfe3:	e8 b5 ee ff ff       	call   c001ce9d <combineColours(unsigned char, unsigned char)>
c001dfe8:	5a                   	pop    edx
c001dfe9:	0f b6 c0             	movzx  eax,al
c001dfec:	59                   	pop    ecx
c001dfed:	50                   	push   eax
c001dfee:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dff3:	99                   	cdq    
c001dff4:	f7 fe                	idiv   esi
c001dff6:	99                   	cdq    
c001dff7:	f7 fb                	idiv   ebx
c001dff9:	8d 42 30             	lea    eax,[edx+0x30]
c001dffc:	0f b6 c0             	movzx  eax,al
c001dfff:	50                   	push   eax
c001e000:	e8 87 ee ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001e005:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e00b:	5e                   	pop    esi
c001e00c:	5f                   	pop    edi
c001e00d:	6a 0f                	push   0xf
c001e00f:	6a 00                	push   0x0
c001e011:	e8 87 ee ff ff       	call   c001ce9d <combineColours(unsigned char, unsigned char)>
c001e016:	5d                   	pop    ebp
c001e017:	0f b6 c0             	movzx  eax,al
c001e01a:	5a                   	pop    edx
c001e01b:	50                   	push   eax
c001e01c:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001e021:	99                   	cdq    
c001e022:	f7 fb                	idiv   ebx
c001e024:	99                   	cdq    
c001e025:	f7 fb                	idiv   ebx
c001e027:	8d 42 30             	lea    eax,[edx+0x30]
c001e02a:	0f b6 c0             	movzx  eax,al
c001e02d:	50                   	push   eax
c001e02e:	e8 59 ee ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001e033:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e039:	59                   	pop    ecx
c001e03a:	5e                   	pop    esi
c001e03b:	6a 0f                	push   0xf
c001e03d:	6a 00                	push   0x0
c001e03f:	e8 59 ee ff ff       	call   c001ce9d <combineColours(unsigned char, unsigned char)>
c001e044:	5f                   	pop    edi
c001e045:	0f b6 c0             	movzx  eax,al
c001e048:	5d                   	pop    ebp
c001e049:	50                   	push   eax
c001e04a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001e04f:	99                   	cdq    
c001e050:	f7 fb                	idiv   ebx
c001e052:	83 c2 30             	add    edx,0x30
c001e055:	0f b6 d2             	movzx  edx,dl
c001e058:	52                   	push   edx
c001e059:	e8 2e ee ff ff       	call   c001ce8c <combineCharAndColour(char, unsigned char)>
c001e05e:	83 c4 10             	add    esp,0x10
c001e061:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e067:	31 c0                	xor    eax,eax
c001e069:	83 c4 1c             	add    esp,0x1c
c001e06c:	5b                   	pop    ebx
c001e06d:	5e                   	pop    esi
c001e06e:	5f                   	pop    edi
c001e06f:	5d                   	pop    ebp
c001e070:	c3                   	ret    
c001e071:	90                   	nop

c001e072 <SATAPI::write(unsigned long long, int, void*)>:
c001e072:	b8 03 00 00 00       	mov    eax,0x3
c001e077:	c3                   	ret    

c001e078 <SATAPI::close(int, int, void*)>:
c001e078:	83 ec 0c             	sub    esp,0xc
c001e07b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e07f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e085:	85 c0                	test   eax,eax
c001e087:	74 0c                	je     c001e095 <SATAPI::close(int, int, void*)+0x1d>
c001e089:	83 ec 0c             	sub    esp,0xc
c001e08c:	8b 10                	mov    edx,DWORD PTR [eax]
c001e08e:	50                   	push   eax
c001e08f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e092:	83 c4 10             	add    esp,0x10
c001e095:	31 c0                	xor    eax,eax
c001e097:	83 c4 0c             	add    esp,0xc
c001e09a:	c3                   	ret    
c001e09b:	90                   	nop

c001e09c <SATAPI::SATAPI()>:
c001e09c:	83 ec 0c             	sub    esp,0xc
c001e09f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0a3:	83 ec 04             	sub    esp,0x4
c001e0a6:	68 00 08 00 00       	push   0x800
c001e0ab:	68 9c 30 02 c0       	push   0xc002309c
c001e0b0:	50                   	push   eax
c001e0b1:	e8 64 ea fe ff       	call   c000cb1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e0b6:	83 c4 10             	add    esp,0x10
c001e0b9:	ba 90 31 02 c0       	mov    edx,0xc0023190
c001e0be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0c2:	89 10                	mov    DWORD PTR [eax],edx
c001e0c4:	90                   	nop
c001e0c5:	83 c4 0c             	add    esp,0xc
c001e0c8:	c3                   	ret    
c001e0c9:	90                   	nop

c001e0ca <SATAPI::diskRemoved()>:
c001e0ca:	c3                   	ret    
c001e0cb:	90                   	nop

c001e0cc <SATAPI::diskInserted()>:
c001e0cc:	83 ec 18             	sub    esp,0x18
c001e0cf:	68 a8 30 02 c0       	push   0xc00230a8
c001e0d4:	e8 6c c8 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e0d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0dd:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e0e4:	83 c4 1c             	add    esp,0x1c
c001e0e7:	c3                   	ret    

c001e0e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e0e8:	55                   	push   ebp
c001e0e9:	57                   	push   edi
c001e0ea:	56                   	push   esi
c001e0eb:	53                   	push   ebx
c001e0ec:	83 ec 34             	sub    esp,0x34
c001e0ef:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e0f3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e0f7:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001e0fb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e0ff:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001e103:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e109:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e10f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e113:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e119:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e11d:	83 c0 02             	add    eax,0x2
c001e120:	c1 e0 07             	shl    eax,0x7
c001e123:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e12b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e12f:	c1 e0 07             	shl    eax,0x7
c001e132:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e136:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e13a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e144:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e148:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e14e:	e8 21 e5 ff ff       	call   c001c674 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e153:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e157:	83 c4 10             	add    esp,0x10
c001e15a:	b8 01 00 00 00       	mov    eax,0x1
c001e15f:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e164:	0f 84 53 02 00 00    	je     c001e3bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e16a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e174:	8b 00                	mov    eax,DWORD PTR [eax]
c001e176:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e17c:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e182:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e186:	c1 e1 05             	shl    ecx,0x5
c001e189:	01 c8                	add    eax,ecx
c001e18b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e18d:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e193:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e199:	89 08                	mov    DWORD PTR [eax],ecx
c001e19b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e1a1:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e1a7:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e1ad:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e1b0:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e1b3:	50                   	push   eax
c001e1b4:	68 90 00 00 00       	push   0x90
c001e1b9:	6a 00                	push   0x0
c001e1bb:	53                   	push   ebx
c001e1bc:	e8 2f 23 fe ff       	call   c00004f0 <memset>
c001e1c1:	b9 0c 00 00 00       	mov    ecx,0xc
c001e1c6:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e1ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e1cc:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e1d2:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e1d6:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e1dc:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e1e0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e1e4:	48                   	dec    eax
c001e1e5:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e1ea:	89 c1                	mov    ecx,eax
c001e1ec:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e1f2:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e1f7:	09 c8                	or     eax,ecx
c001e1f9:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e1ff:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e205:	83 c8 80             	or     eax,0xffffff80
c001e208:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e20e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e211:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e215:	25 00 7f 00 00       	and    eax,0x7f00
c001e21a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e21e:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e223:	66 89 03             	mov    WORD PTR [ebx],ax
c001e226:	89 d0                	mov    eax,edx
c001e228:	c1 ea 18             	shr    edx,0x18
c001e22b:	c1 e8 10             	shr    eax,0x10
c001e22e:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e231:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e234:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e238:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e23b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e23f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e242:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e246:	83 c4 10             	add    esp,0x10
c001e249:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e24d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e251:	31 c0                	xor    eax,eax
c001e253:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e259:	80 e1 88             	and    cl,0x88
c001e25c:	74 0a                	je     c001e268 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e25e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e263:	74 0a                	je     c001e26f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e265:	40                   	inc    eax
c001e266:	eb eb                	jmp    c001e253 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e268:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e26d:	75 43                	jne    c001e2b2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e26f:	83 ec 0c             	sub    esp,0xc
c001e272:	68 c0 30 02 c0       	push   0xc00230c0
c001e277:	e8 c9 c6 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e27c:	58                   	pop    eax
c001e27d:	5a                   	pop    edx
c001e27e:	68 d5 30 02 c0       	push   0xc00230d5
c001e283:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001e289:	e8 18 a8 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001e28e:	59                   	pop    ecx
c001e28f:	5b                   	pop    ebx
c001e290:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e294:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e29a:	e8 6f e4 ff ff       	call   c001c70e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e29f:	5e                   	pop    esi
c001e2a0:	5f                   	pop    edi
c001e2a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e2a5:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e2ab:	e8 3e e4 ff ff       	call   c001c6ee <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e2b0:	eb 48                	jmp    c001e2fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e2b2:	be 01 00 00 00       	mov    esi,0x1
c001e2b7:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e2bb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e2bf:	d3 e6                	shl    esi,cl
c001e2c1:	c1 e7 07             	shl    edi,0x7
c001e2c4:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e2ca:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e2cf:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e2d3:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e2d9:	85 c6                	test   esi,eax
c001e2db:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e2e1:	0f 84 a3 00 00 00    	je     c001e38a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e2e7:	0f ba e0 1e          	bt     eax,0x1e
c001e2eb:	73 1a                	jae    c001e307 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e2ed:	83 ec 0c             	sub    esp,0xc
c001e2f0:	68 e7 30 02 c0       	push   0xc00230e7
c001e2f5:	e8 4b c6 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e2fa:	83 c4 10             	add    esp,0x10
c001e2fd:	b8 01 00 00 00       	mov    eax,0x1
c001e302:	e9 b6 00 00 00       	jmp    c001e3bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e307:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e30d:	83 f8 0d             	cmp    eax,0xd
c001e310:	77 0a                	ja     c001e31c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e312:	83 ec 0c             	sub    esp,0xc
c001e315:	68 c8 00 00 00       	push   0xc8
c001e31a:	eb 28                	jmp    c001e344 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e31c:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e322:	83 f8 0d             	cmp    eax,0xd
c001e325:	77 0a                	ja     c001e331 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e327:	83 ec 0c             	sub    esp,0xc
c001e32a:	68 58 02 00 00       	push   0x258
c001e32f:	eb 13                	jmp    c001e344 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e331:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e337:	83 f8 06             	cmp    eax,0x6
c001e33a:	77 10                	ja     c001e34c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e33c:	83 ec 0c             	sub    esp,0xc
c001e33f:	68 dc 05 00 00       	push   0x5dc
c001e344:	e8 c7 7d ff ff       	call   c0016110 <milliTenthSleep(unsigned int)>
c001e349:	83 c4 10             	add    esp,0x10
c001e34c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e350:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e353:	75 06                	jne    c001e35b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e355:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e359:	74 15                	je     c001e370 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e35b:	83 fb 06             	cmp    ebx,0x6
c001e35e:	77 10                	ja     c001e370 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e360:	83 ec 0c             	sub    esp,0xc
c001e363:	68 c4 09 00 00       	push   0x9c4
c001e368:	e8 a3 7d ff ff       	call   c0016110 <milliTenthSleep(unsigned int)>
c001e36d:	83 c4 10             	add    esp,0x10
c001e370:	43                   	inc    ebx
c001e371:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e377:	0f 85 56 ff ff ff    	jne    c001e2d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e37d:	83 ec 0c             	sub    esp,0xc
c001e380:	68 fa 30 02 c0       	push   0xc00230fa
c001e385:	e9 6b ff ff ff       	jmp    c001e2f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e38a:	0f ba e0 1e          	bt     eax,0x1e
c001e38e:	73 0d                	jae    c001e39d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e390:	83 ec 0c             	sub    esp,0xc
c001e393:	68 0e 31 02 c0       	push   0xc002310e
c001e398:	e9 58 ff ff ff       	jmp    c001e2f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e39d:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e3a2:	74 17                	je     c001e3bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e3a4:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e3a9:	74 10                	je     c001e3bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e3ab:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e3b1:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e3b5:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e3b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e3bb:	31 c0                	xor    eax,eax
c001e3bd:	83 c4 2c             	add    esp,0x2c
c001e3c0:	5b                   	pop    ebx
c001e3c1:	5e                   	pop    esi
c001e3c2:	5f                   	pop    edi
c001e3c3:	5d                   	pop    ebp
c001e3c4:	c3                   	ret    
c001e3c5:	90                   	nop

c001e3c6 <SATAPI::eject()>:
c001e3c6:	57                   	push   edi
c001e3c7:	b9 03 00 00 00       	mov    ecx,0x3
c001e3cc:	83 ec 18             	sub    esp,0x18
c001e3cf:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e3d3:	fc                   	cld    
c001e3d4:	31 c0                	xor    eax,eax
c001e3d6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e3d8:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e3dd:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e3e2:	50                   	push   eax
c001e3e3:	6a 00                	push   0x0
c001e3e5:	6a 00                	push   0x0
c001e3e7:	6a 00                	push   0x0
c001e3e9:	6a 00                	push   0x0
c001e3eb:	6a 02                	push   0x2
c001e3ed:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e3f1:	50                   	push   eax
c001e3f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e3f6:	e8 ed fc ff ff       	call   c001e0e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e3fb:	31 c0                	xor    eax,eax
c001e3fd:	83 c4 38             	add    esp,0x38
c001e400:	5f                   	pop    edi
c001e401:	c3                   	ret    

c001e402 <SATAPI::detectMedia()>:
c001e402:	53                   	push   ebx
c001e403:	83 ec 14             	sub    esp,0x14
c001e406:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e40a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e410:	e8 83 00 ff ff       	call   c000e498 <VCache::writeWriteBuffer()>
c001e415:	59                   	pop    ecx
c001e416:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e41c:	e8 67 00 ff ff       	call   c000e488 <VCache::invalidateReadBuffer()>
c001e421:	c7 04 24 23 31 02 c0 	mov    DWORD PTR [esp],0xc0023123
c001e428:	e8 18 c5 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e42d:	83 c4 10             	add    esp,0x10
c001e430:	31 c0                	xor    eax,eax
c001e432:	8b 14 85 80 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7780]
c001e439:	85 d2                	test   edx,edx
c001e43b:	74 0f                	je     c001e44c <SATAPI::detectMedia()+0x4a>
c001e43d:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e443:	75 07                	jne    c001e44c <SATAPI::detectMedia()+0x4a>
c001e445:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e44c:	40                   	inc    eax
c001e44d:	83 f8 1a             	cmp    eax,0x1a
c001e450:	75 e0                	jne    c001e432 <SATAPI::detectMedia()+0x30>
c001e452:	83 c4 08             	add    esp,0x8
c001e455:	5b                   	pop    ebx
c001e456:	c3                   	ret    
c001e457:	90                   	nop

c001e458 <SATAPI::open(int, int, void*)>:
c001e458:	56                   	push   esi
c001e459:	53                   	push   ebx
c001e45a:	51                   	push   ecx
c001e45b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e45f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e463:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e46d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e473:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e47d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e481:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e48b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e491:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e498:	e8 22 99 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e49d:	89 c6                	mov    esi,eax
c001e49f:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e4a5:	81 c6 00 10 00 00    	add    esi,0x1000
c001e4ab:	e8 0f 99 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e4b0:	39 c6                	cmp    esi,eax
c001e4b2:	74 10                	je     c001e4c4 <SATAPI::open(int, int, void*)+0x6c>
c001e4b4:	83 ec 0c             	sub    esp,0xc
c001e4b7:	68 38 31 02 c0       	push   0xc0023138
c001e4bc:	e8 bc 2e ff ff       	call   c001137d <KePanic(char const*)>
c001e4c1:	83 c4 10             	add    esp,0x10
c001e4c4:	83 ec 0c             	sub    esp,0xc
c001e4c7:	6a 02                	push   0x2
c001e4c9:	e8 3f b1 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e4ce:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e4d4:	6a 03                	push   0x3
c001e4d6:	50                   	push   eax
c001e4d7:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e4dd:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e4e3:	e8 38 b8 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e4e8:	83 c4 14             	add    esp,0x14
c001e4eb:	68 78 01 00 00       	push   0x178
c001e4f0:	e8 c1 95 fe ff       	call   c0007ab6 <malloc>
c001e4f5:	83 c4 0c             	add    esp,0xc
c001e4f8:	89 c6                	mov    esi,eax
c001e4fa:	6a 00                	push   0x0
c001e4fc:	68 ff ff ff 7f       	push   0x7fffffff
c001e501:	6a 00                	push   0x0
c001e503:	6a 00                	push   0x0
c001e505:	53                   	push   ebx
c001e506:	68 4e 31 02 c0       	push   0xc002314e
c001e50b:	50                   	push   eax
c001e50c:	e8 e3 f3 fe ff       	call   c000d8f4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e511:	83 c4 14             	add    esp,0x14
c001e514:	56                   	push   esi
c001e515:	e8 9a f4 fe ff       	call   c000d9b4 <LogicalDisk::assignDriveLetter()>
c001e51a:	5a                   	pop    edx
c001e51b:	0f be c0             	movsx  eax,al
c001e51e:	59                   	pop    ecx
c001e51f:	50                   	push   eax
c001e520:	68 a0 2f 02 c0       	push   0xc0022fa0
c001e525:	e8 1b c4 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e52a:	58                   	pop    eax
c001e52b:	5a                   	pop    edx
c001e52c:	56                   	push   esi
c001e52d:	53                   	push   ebx
c001e52e:	e8 1b e2 fe ff       	call   c000c74e <Device::addChild(Device*)>
c001e533:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e539:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e53c:	e8 41 e6 fe ff       	call   c000cb82 <PhysicalDisk::startCache()>
c001e541:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e548:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e54b:	e8 b2 fe ff ff       	call   c001e402 <SATAPI::detectMedia()>
c001e550:	83 c4 14             	add    esp,0x14
c001e553:	31 c0                	xor    eax,eax
c001e555:	5b                   	pop    ebx
c001e556:	5e                   	pop    esi
c001e557:	c3                   	ret    

c001e558 <SATAPI::read(unsigned long long, int, void*)>:
c001e558:	57                   	push   edi
c001e559:	56                   	push   esi
c001e55a:	53                   	push   ebx
c001e55b:	83 ec 30             	sub    esp,0x30
c001e55e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e562:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e566:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e56a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e56e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e572:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e576:	83 fe 04             	cmp    esi,0x4
c001e579:	7e 10                	jle    c001e58b <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e57b:	83 ec 0c             	sub    esp,0xc
c001e57e:	68 5c 31 02 c0       	push   0xc002315c
c001e583:	e8 f5 2d ff ff       	call   c001137d <KePanic(char const*)>
c001e588:	83 c4 10             	add    esp,0x10
c001e58b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e591:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e597:	51                   	push   ecx
c001e598:	50                   	push   eax
c001e599:	83 c0 02             	add    eax,0x2
c001e59c:	c1 e0 07             	shl    eax,0x7
c001e59f:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e5a5:	50                   	push   eax
c001e5a6:	52                   	push   edx
c001e5a7:	e8 8c e1 ff ff       	call   c001c738 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e5ac:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e5b0:	b9 03 00 00 00       	mov    ecx,0x3
c001e5b5:	fc                   	cld    
c001e5b6:	31 c0                	xor    eax,eax
c001e5b8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e5ba:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e5bf:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e5c4:	83 c4 0c             	add    esp,0xc
c001e5c7:	6a 00                	push   0x0
c001e5c9:	6a 00                	push   0x0
c001e5cb:	6a 00                	push   0x0
c001e5cd:	6a 00                	push   0x0
c001e5cf:	6a 02                	push   0x2
c001e5d1:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e5d5:	50                   	push   eax
c001e5d6:	53                   	push   ebx
c001e5d7:	e8 0c fb ff ff       	call   c001e0e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e5dc:	83 c4 20             	add    esp,0x20
c001e5df:	85 c0                	test   eax,eax
c001e5e1:	75 44                	jne    c001e627 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e5e3:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e5e7:	b9 03 00 00 00       	mov    ecx,0x3
c001e5ec:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e5ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e5f2:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e5f7:	0f c8                	bswap  eax
c001e5f9:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e5fd:	89 f0                	mov    eax,esi
c001e5ff:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e603:	50                   	push   eax
c001e604:	56                   	push   esi
c001e605:	c1 e6 0b             	shl    esi,0xb
c001e608:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e60c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e610:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e614:	56                   	push   esi
c001e615:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e619:	50                   	push   eax
c001e61a:	53                   	push   ebx
c001e61b:	e8 c8 fa ff ff       	call   c001e0e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e620:	83 c4 20             	add    esp,0x20
c001e623:	85 c0                	test   eax,eax
c001e625:	74 14                	je     c001e63b <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e627:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e62b:	83 ec 0c             	sub    esp,0xc
c001e62e:	53                   	push   ebx
c001e62f:	e8 ce fd ff ff       	call   c001e402 <SATAPI::detectMedia()>
c001e634:	83 c4 10             	add    esp,0x10
c001e637:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e63b:	83 c4 30             	add    esp,0x30
c001e63e:	5b                   	pop    ebx
c001e63f:	5e                   	pop    esi
c001e640:	5f                   	pop    edi
c001e641:	c3                   	ret    

c001e642 <IOAPIC::close(int, int, void*)>:
c001e642:	b8 00 00 00 00       	mov    eax,0x0
c001e647:	c3                   	ret    

c001e648 <apicGetBase()>:
c001e648:	55                   	push   ebp
c001e649:	89 e5                	mov    ebp,esp
c001e64b:	83 ec 18             	sub    esp,0x18
c001e64e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e653:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e659:	83 e0 08             	and    eax,0x8
c001e65c:	0f b6 c0             	movzx  eax,al
c001e65f:	85 c0                	test   eax,eax
c001e661:	75 07                	jne    c001e66a <apicGetBase()+0x22>
c001e663:	b8 00 00 00 00       	mov    eax,0x0
c001e668:	eb 21                	jmp    c001e68b <apicGetBase()+0x43>
c001e66a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e66f:	83 ec 08             	sub    esp,0x8
c001e672:	6a 1b                	push   0x1b
c001e674:	50                   	push   eax
c001e675:	e8 46 8a fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e67a:	83 c4 10             	add    esp,0x10
c001e67d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e680:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e683:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e686:	25 00 00 ff ff       	and    eax,0xffff0000
c001e68b:	c9                   	leave  
c001e68c:	c3                   	ret    
c001e68d:	90                   	nop

c001e68e <IOAPIC::IOAPIC()>:
c001e68e:	83 ec 0c             	sub    esp,0xc
c001e691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e695:	83 ec 08             	sub    esp,0x8
c001e698:	68 c0 31 02 c0       	push   0xc00231c0
c001e69d:	50                   	push   eax
c001e69e:	e8 43 e2 fe ff       	call   c000c8e6 <Device::Device(char const*)>
c001e6a3:	83 c4 10             	add    esp,0x10
c001e6a6:	ba d0 31 02 c0       	mov    edx,0xc00231d0
c001e6ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6af:	89 10                	mov    DWORD PTR [eax],edx
c001e6b1:	90                   	nop
c001e6b2:	83 c4 0c             	add    esp,0xc
c001e6b5:	c3                   	ret    

c001e6b6 <apicOpen()>:
c001e6b6:	55                   	push   ebp
c001e6b7:	89 e5                	mov    ebp,esp
c001e6b9:	53                   	push   ebx
c001e6ba:	83 ec 34             	sub    esp,0x34
c001e6bd:	a0 00 a1 02 c0       	mov    al,ds:0xc002a100
c001e6c2:	83 f0 01             	xor    eax,0x1
c001e6c5:	0f b6 c0             	movzx  eax,al
c001e6c8:	85 c0                	test   eax,eax
c001e6ca:	0f 84 a3 00 00 00    	je     c001e773 <apicOpen()+0xbd>
c001e6d0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e6d4:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c001e6d9:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e6dd:	0f b6 c0             	movzx  eax,al
c001e6e0:	39 c2                	cmp    edx,eax
c001e6e2:	0f 83 84 00 00 00    	jae    c001e76c <apicOpen()+0xb6>
c001e6e8:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e6ef:	83 ec 0c             	sub    esp,0xc
c001e6f2:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e6f5:	e8 bc 93 fe ff       	call   c0007ab6 <malloc>
c001e6fa:	83 c4 10             	add    esp,0x10
c001e6fd:	89 c3                	mov    ebx,eax
c001e6ff:	83 ec 0c             	sub    esp,0xc
c001e702:	53                   	push   ebx
c001e703:	e8 86 ff ff ff       	call   c001e68e <IOAPIC::IOAPIC()>
c001e708:	83 c4 10             	add    esp,0x10
c001e70b:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e70e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e712:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e715:	89 14 85 e0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f20],edx
c001e71c:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001e721:	83 c0 01             	add    eax,0x1
c001e724:	a3 c0 a0 02 c0       	mov    ds:0xc002a0c0,eax
c001e729:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e72e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e734:	83 ec 08             	sub    esp,0x8
c001e737:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e73a:	50                   	push   eax
c001e73b:	e8 0e e0 fe ff       	call   c000c74e <Device::addChild(Device*)>
c001e740:	83 c4 10             	add    esp,0x10
c001e743:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e746:	8b 00                	mov    eax,DWORD PTR [eax]
c001e748:	83 c0 08             	add    eax,0x8
c001e74b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e74d:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e751:	6a 00                	push   0x0
c001e753:	6a 00                	push   0x0
c001e755:	52                   	push   edx
c001e756:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e759:	ff d0                	call   eax
c001e75b:	83 c4 10             	add    esp,0x10
c001e75e:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e761:	83 c0 01             	add    eax,0x1
c001e764:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e767:	e9 68 ff ff ff       	jmp    c001e6d4 <apicOpen()+0x1e>
c001e76c:	c6 05 00 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a100,0x1
c001e773:	e8 d0 fe ff ff       	call   c001e648 <apicGetBase()>
c001e778:	05 f0 00 00 00       	add    eax,0xf0
c001e77d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e780:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e783:	8b 00                	mov    eax,DWORD PTR [eax]
c001e785:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e788:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e78f:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e796:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e799:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e79c:	89 10                	mov    DWORD PTR [eax],edx
c001e79e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e7a5:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c001e7aa:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e7ad:	7d 7c                	jge    c001e82b <apicOpen()+0x175>
c001e7af:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e7b2:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e7b9:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e7bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e7bf:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e7c6:	c1 e8 08             	shr    eax,0x8
c001e7c9:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e7cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e7d0:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e7d7:	c1 e8 18             	shr    eax,0x18
c001e7da:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e7dd:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e7e1:	3d ff 00 00 00       	cmp    eax,0xff
c001e7e6:	75 3a                	jne    c001e822 <apicOpen()+0x16c>
c001e7e8:	e8 5b fe ff ff       	call   c001e648 <apicGetBase()>
c001e7ed:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e7f1:	83 fa 01             	cmp    edx,0x1
c001e7f4:	75 07                	jne    c001e7fd <apicOpen()+0x147>
c001e7f6:	ba 60 03 00 00       	mov    edx,0x360
c001e7fb:	eb 05                	jmp    c001e802 <apicOpen()+0x14c>
c001e7fd:	ba 50 03 00 00       	mov    edx,0x350
c001e802:	01 d0                	add    eax,edx
c001e804:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e807:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e80a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e80c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e80f:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e816:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e81a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e81d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e820:	89 10                	mov    DWORD PTR [eax],edx
c001e822:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e826:	e9 7a ff ff ff       	jmp    c001e7a5 <apicOpen()+0xef>
c001e82b:	90                   	nop
c001e82c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e82f:	c9                   	leave  
c001e830:	c3                   	ret    
c001e831:	90                   	nop

c001e832 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e832:	55                   	push   ebp
c001e833:	89 e5                	mov    ebp,esp
c001e835:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e838:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e83e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e841:	72 1d                	jb     c001e860 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e843:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e846:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e84c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e84f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e855:	01 d0                	add    eax,edx
c001e857:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e85a:	73 04                	jae    c001e860 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e85c:	b0 01                	mov    al,0x1
c001e85e:	eb 02                	jmp    c001e862 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e860:	b0 00                	mov    al,0x0
c001e862:	5d                   	pop    ebp
c001e863:	c3                   	ret    

c001e864 <IOAPIC::read(int)>:
c001e864:	55                   	push   ebp
c001e865:	89 e5                	mov    ebp,esp
c001e867:	83 ec 10             	sub    esp,0x10
c001e86a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e86d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e873:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e876:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e879:	0f b6 d0             	movzx  edx,al
c001e87c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e87f:	89 10                	mov    DWORD PTR [eax],edx
c001e881:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e884:	83 c0 10             	add    eax,0x10
c001e887:	8b 00                	mov    eax,DWORD PTR [eax]
c001e889:	c9                   	leave  
c001e88a:	c3                   	ret    
c001e88b:	90                   	nop

c001e88c <IOAPIC::open(int, int, void*)>:
c001e88c:	55                   	push   ebp
c001e88d:	89 e5                	mov    ebp,esp
c001e88f:	57                   	push   edi
c001e890:	56                   	push   esi
c001e891:	53                   	push   ebx
c001e892:	83 ec 04             	sub    esp,0x4
c001e895:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e898:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e89b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e8a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8a4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e8aa:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c001e8b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8b4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e8ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8bd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e8c3:	8b 14 85 a0 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7360]
c001e8ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8cd:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e8d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8d6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e8dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8df:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e8e5:	0f b6 f0             	movzx  esi,al
c001e8e8:	89 d0                	mov    eax,edx
c001e8ea:	ba 00 00 00 00       	mov    edx,0x0
c001e8ef:	89 c7                	mov    edi,eax
c001e8f1:	83 e7 ff             	and    edi,0xffffffff
c001e8f4:	89 f9                	mov    ecx,edi
c001e8f6:	0f b6 da             	movzx  ebx,dl
c001e8f9:	89 c8                	mov    eax,ecx
c001e8fb:	89 da                	mov    edx,ebx
c001e8fd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e900:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e903:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e907:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e90b:	83 e0 00             	and    eax,0x0
c001e90e:	09 d0                	or     eax,edx
c001e910:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e914:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e917:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e91d:	8d 50 01             	lea    edx,[eax+0x1]
c001e920:	88 d1                	mov    cl,dl
c001e922:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e925:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e92b:	0f b6 d0             	movzx  edx,al
c001e92e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e931:	83 c2 08             	add    edx,0x8
c001e934:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e938:	0f b6 c9             	movzx  ecx,cl
c001e93b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e941:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e945:	6a 01                	push   0x1
c001e947:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e94a:	e8 15 ff ff ff       	call   c001e864 <IOAPIC::read(int)>
c001e94f:	83 c4 08             	add    esp,0x8
c001e952:	c1 f8 10             	sar    eax,0x10
c001e955:	0f b6 c0             	movzx  eax,al
c001e958:	8d 50 01             	lea    edx,[eax+0x1]
c001e95b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e95e:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e964:	b8 00 00 00 00       	mov    eax,0x0
c001e969:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e96c:	5b                   	pop    ebx
c001e96d:	5e                   	pop    esi
c001e96e:	5f                   	pop    edi
c001e96f:	5d                   	pop    ebp
c001e970:	c3                   	ret    
c001e971:	90                   	nop

c001e972 <IOAPIC::write(int, int)>:
c001e972:	55                   	push   ebp
c001e973:	89 e5                	mov    ebp,esp
c001e975:	83 ec 10             	sub    esp,0x10
c001e978:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e97b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e981:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e984:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e987:	0f b6 d0             	movzx  edx,al
c001e98a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e98d:	89 10                	mov    DWORD PTR [eax],edx
c001e98f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e992:	8d 50 10             	lea    edx,[eax+0x10]
c001e995:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e998:	89 02                	mov    DWORD PTR [edx],eax
c001e99a:	90                   	nop
c001e99b:	c9                   	leave  
c001e99c:	c3                   	ret    
c001e99d:	90                   	nop

c001e99e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e99e:	55                   	push   ebp
c001e99f:	89 e5                	mov    ebp,esp
c001e9a1:	53                   	push   ebx
c001e9a2:	83 ec 2c             	sub    esp,0x2c
c001e9a5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e9a8:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e9ab:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e9ae:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e9b1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e9b4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e9b7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e9ba:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e9bd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e9c0:	88 d8                	mov    al,bl
c001e9c2:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e9c5:	88 c8                	mov    al,cl
c001e9c7:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e9ca:	88 d0                	mov    al,dl
c001e9cc:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e9cf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e9d3:	83 c0 08             	add    eax,0x8
c001e9d6:	01 c0                	add    eax,eax
c001e9d8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e9db:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e9df:	83 c0 08             	add    eax,0x8
c001e9e2:	01 c0                	add    eax,eax
c001e9e4:	83 c0 01             	add    eax,0x1
c001e9e7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e9ea:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e9ed:	50                   	push   eax
c001e9ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9f1:	e8 6e fe ff ff       	call   c001e864 <IOAPIC::read(int)>
c001e9f6:	83 c4 08             	add    esp,0x8
c001e9f9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e9fc:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ea03:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ea06:	c1 e0 18             	shl    eax,0x18
c001ea09:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ea0c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ea0f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ea12:	52                   	push   edx
c001ea13:	50                   	push   eax
c001ea14:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ea17:	e8 56 ff ff ff       	call   c001e972 <IOAPIC::write(int, int)>
c001ea1c:	83 c4 0c             	add    esp,0xc
c001ea1f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea22:	50                   	push   eax
c001ea23:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ea26:	e8 39 fe ff ff       	call   c001e864 <IOAPIC::read(int)>
c001ea2b:	83 c4 08             	add    esp,0x8
c001ea2e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ea31:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ea38:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ea3f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ea46:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ea4a:	85 c0                	test   eax,eax
c001ea4c:	74 09                	je     c001ea57 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ea4e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ea55:	eb 07                	jmp    c001ea5e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001ea57:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ea5e:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ea62:	85 c0                	test   eax,eax
c001ea64:	74 09                	je     c001ea6f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ea66:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ea6d:	eb 07                	jmp    c001ea76 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ea6f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ea76:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ea7d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ea81:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ea84:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ea87:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea8a:	52                   	push   edx
c001ea8b:	50                   	push   eax
c001ea8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ea8f:	e8 de fe ff ff       	call   c001e972 <IOAPIC::write(int, int)>
c001ea94:	83 c4 0c             	add    esp,0xc
c001ea97:	90                   	nop
c001ea98:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ea9b:	c9                   	leave  
c001ea9c:	c3                   	ret    
c001ea9d:	66 90                	xchg   ax,ax
c001ea9f:	90                   	nop

c001eaa0 <APICTimer::close(int, int, void*)>:
c001eaa0:	b8 00 00 00 00       	mov    eax,0x0
c001eaa5:	c3                   	ret    
c001eaa6:	66 90                	xchg   ax,ax

c001eaa8 <apicTimerHandler(regs*, void*)>:
c001eaa8:	83 ec 0c             	sub    esp,0xc
c001eaab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eaaf:	8b 08                	mov    ecx,DWORD PTR [eax]
c001eab1:	b8 10 27 00 00       	mov    eax,0x2710
c001eab6:	ba 00 00 00 00       	mov    edx,0x0
c001eabb:	f7 f1                	div    ecx
c001eabd:	83 ec 0c             	sub    esp,0xc
c001eac0:	50                   	push   eax
c001eac1:	e8 ea f6 fe ff       	call   c000e1b0 <timerHandler(unsigned int)>
c001eac6:	83 c4 10             	add    esp,0x10
c001eac9:	90                   	nop
c001eaca:	83 c4 0c             	add    esp,0xc
c001eacd:	c3                   	ret    
c001eace:	66 90                	xchg   ax,ax

c001ead0 <APICTimer::open(int, int, void*)>:
c001ead0:	83 ec 0c             	sub    esp,0xc
c001ead3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ead7:	8b 00                	mov    eax,DWORD PTR [eax]
c001ead9:	83 c0 24             	add    eax,0x24
c001eadc:	8b 00                	mov    eax,DWORD PTR [eax]
c001eade:	83 ec 08             	sub    esp,0x8
c001eae1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eae5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eae9:	ff d0                	call   eax
c001eaeb:	83 c4 10             	add    esp,0x10
c001eaee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eaf6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eafc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eb04:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001eb0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eb0e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001eb14:	83 ec 0c             	sub    esp,0xc
c001eb17:	51                   	push   ecx
c001eb18:	6a 01                	push   0x1
c001eb1a:	68 a8 ea 01 c0       	push   0xc001eaa8
c001eb1f:	52                   	push   edx
c001eb20:	50                   	push   eax
c001eb21:	e8 d4 db fe ff       	call   c000c6fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eb26:	83 c4 20             	add    esp,0x20
c001eb29:	89 c2                	mov    edx,eax
c001eb2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb2f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001eb35:	b8 00 00 00 00       	mov    eax,0x0
c001eb3a:	83 c4 0c             	add    esp,0xc
c001eb3d:	c3                   	ret    
c001eb3e:	66 90                	xchg   ax,ax

c001eb40 <APICTimer::write(int)>:
c001eb40:	83 ec 0c             	sub    esp,0xc
c001eb43:	83 ec 0c             	sub    esp,0xc
c001eb46:	68 f4 31 02 c0       	push   0xc00231f4
c001eb4b:	e8 2d 28 ff ff       	call   c001137d <KePanic(char const*)>
c001eb50:	83 c4 10             	add    esp,0x10
c001eb53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb5b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eb61:	90                   	nop
c001eb62:	83 c4 0c             	add    esp,0xc
c001eb65:	c3                   	ret    
c001eb66:	66 90                	xchg   ax,ax

c001eb68 <APICTimer::APICTimer()>:
c001eb68:	83 ec 0c             	sub    esp,0xc
c001eb6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb6f:	83 ec 08             	sub    esp,0x8
c001eb72:	68 04 32 02 c0       	push   0xc0023204
c001eb77:	50                   	push   eax
c001eb78:	e8 67 f5 fe ff       	call   c000e0e4 <Timer::Timer(char const*)>
c001eb7d:	83 c4 10             	add    esp,0x10
c001eb80:	ba 18 32 02 c0       	mov    edx,0xc0023218
c001eb85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb89:	89 10                	mov    DWORD PTR [eax],edx
c001eb8b:	90                   	nop
c001eb8c:	83 c4 0c             	add    esp,0xc
c001eb8f:	c3                   	ret    

c001eb90 <PIT::write(int)>:
c001eb90:	83 ec 10             	sub    esp,0x10
c001eb93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eb97:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eb9b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eba1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eba5:	a3 04 a1 02 c0       	mov    ds:0xc002a104,eax
c001ebaa:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ebaf:	89 c2                	mov    edx,eax
c001ebb1:	c1 fa 1f             	sar    edx,0x1f
c001ebb4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ebb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ebbc:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ebc3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ebc8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ebcc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ebd1:	ee                   	out    dx,al
c001ebd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ebd6:	0f b6 c0             	movzx  eax,al
c001ebd9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ebe0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ebe4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ebe8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ebed:	ee                   	out    dx,al
c001ebee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ebf2:	c1 f8 08             	sar    eax,0x8
c001ebf5:	0f b6 c0             	movzx  eax,al
c001ebf8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ebff:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ec03:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ec07:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ec0c:	ee                   	out    dx,al
c001ec0d:	90                   	nop
c001ec0e:	83 c4 10             	add    esp,0x10
c001ec11:	c3                   	ret    
c001ec12:	66 90                	xchg   ax,ax

c001ec14 <pitHandler(regs*, void*)>:
c001ec14:	83 ec 0c             	sub    esp,0xc
c001ec17:	8b 0d 04 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a104
c001ec1d:	b8 10 27 00 00       	mov    eax,0x2710
c001ec22:	89 c2                	mov    edx,eax
c001ec24:	c1 fa 1f             	sar    edx,0x1f
c001ec27:	f7 f9                	idiv   ecx
c001ec29:	83 ec 0c             	sub    esp,0xc
c001ec2c:	50                   	push   eax
c001ec2d:	e8 7e f5 fe ff       	call   c000e1b0 <timerHandler(unsigned int)>
c001ec32:	83 c4 10             	add    esp,0x10
c001ec35:	90                   	nop
c001ec36:	83 c4 0c             	add    esp,0xc
c001ec39:	c3                   	ret    
c001ec3a:	66 90                	xchg   ax,ax

c001ec3c <PIT::open(int, int, void*)>:
c001ec3c:	83 ec 0c             	sub    esp,0xc
c001ec3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec43:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec45:	83 c0 24             	add    eax,0x24
c001ec48:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec4a:	83 ec 08             	sub    esp,0x8
c001ec4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec55:	ff d0                	call   eax
c001ec57:	83 c4 10             	add    esp,0x10
c001ec5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec5e:	83 ec 0c             	sub    esp,0xc
c001ec61:	6a 00                	push   0x0
c001ec63:	6a 01                	push   0x1
c001ec65:	68 14 ec 01 c0       	push   0xc001ec14
c001ec6a:	6a 00                	push   0x0
c001ec6c:	50                   	push   eax
c001ec6d:	e8 88 da fe ff       	call   c000c6fa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ec72:	83 c4 20             	add    esp,0x20
c001ec75:	89 c2                	mov    edx,eax
c001ec77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec7b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ec81:	b8 00 00 00 00       	mov    eax,0x0
c001ec86:	83 c4 0c             	add    esp,0xc
c001ec89:	c3                   	ret    
c001ec8a:	66 90                	xchg   ax,ax

c001ec8c <PIT::close(int, int, void*)>:
c001ec8c:	83 ec 0c             	sub    esp,0xc
c001ec8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec93:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ec9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca1:	6a 01                	push   0x1
c001eca3:	68 14 ec 01 c0       	push   0xc001ec14
c001eca8:	6a 00                	push   0x0
c001ecaa:	50                   	push   eax
c001ecab:	e8 80 da fe ff       	call   c000c730 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ecb0:	83 c4 10             	add    esp,0x10
c001ecb3:	b8 00 00 00 00       	mov    eax,0x0
c001ecb8:	83 c4 0c             	add    esp,0xc
c001ecbb:	c3                   	ret    

c001ecbc <PIT::PIT()>:
c001ecbc:	83 ec 0c             	sub    esp,0xc
c001ecbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecc3:	83 ec 08             	sub    esp,0x8
c001ecc6:	68 40 32 02 c0       	push   0xc0023240
c001eccb:	50                   	push   eax
c001eccc:	e8 13 f4 fe ff       	call   c000e0e4 <Timer::Timer(char const*)>
c001ecd1:	83 c4 10             	add    esp,0x10
c001ecd4:	ba 68 32 02 c0       	mov    edx,0xc0023268
c001ecd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecdd:	89 10                	mov    DWORD PTR [eax],edx
c001ecdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ece9:	0f b6 d0             	movzx  edx,al
c001ecec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ecf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecfb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ed01:	0f b6 d0             	movzx  edx,al
c001ed04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed08:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ed0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed11:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ed17:	8d 50 01             	lea    edx,[eax+0x1]
c001ed1a:	88 d1                	mov    cl,dl
c001ed1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed20:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ed26:	0f b6 d0             	movzx  edx,al
c001ed29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed2d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ed31:	83 e1 3f             	and    ecx,0x3f
c001ed34:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ed38:	90                   	nop
c001ed39:	83 c4 0c             	add    esp,0xc
c001ed3c:	c3                   	ret    
c001ed3d:	66 90                	xchg   ax,ax
c001ed3f:	90                   	nop

c001ed40 <avxDetect>:
c001ed40:	b8 01 00 00 00       	mov    eax,0x1
c001ed45:	0f a2                	cpuid  
c001ed47:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ed4d:	74 15                	je     c001ed64 <avxDetect.noAVX>
c001ed4f:	b8 01 00 00 00       	mov    eax,0x1
c001ed54:	0f a2                	cpuid  
c001ed56:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ed5c:	74 06                	je     c001ed64 <avxDetect.noAVX>
c001ed5e:	b8 01 00 00 00       	mov    eax,0x1
c001ed63:	c3                   	ret    

c001ed64 <avxDetect.noAVX>:
c001ed64:	b8 00 00 00 00       	mov    eax,0x0
c001ed69:	c3                   	ret    

c001ed6a <avxSave>:
c001ed6a:	53                   	push   ebx
c001ed6b:	52                   	push   edx
c001ed6c:	31 c0                	xor    eax,eax
c001ed6e:	48                   	dec    eax
c001ed6f:	89 c2                	mov    edx,eax
c001ed71:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ed75:	0f ae 23             	xsave  [ebx]
c001ed78:	5a                   	pop    edx
c001ed79:	5b                   	pop    ebx
c001ed7a:	c3                   	ret    

c001ed7b <avxLoad>:
c001ed7b:	53                   	push   ebx
c001ed7c:	52                   	push   edx
c001ed7d:	31 c0                	xor    eax,eax
c001ed7f:	48                   	dec    eax
c001ed80:	89 c2                	mov    edx,eax
c001ed82:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ed86:	0f ae 2b             	xrstor [ebx]
c001ed89:	5a                   	pop    edx
c001ed8a:	5b                   	pop    ebx
c001ed8b:	c3                   	ret    

c001ed8c <avxInit>:
c001ed8c:	e8 67 03 00 00       	call   c001f0f8 <sseInit>
c001ed91:	50                   	push   eax
c001ed92:	51                   	push   ecx
c001ed93:	0f 20 e0             	mov    eax,cr4
c001ed96:	0d 00 00 04 00       	or     eax,0x40000
c001ed9b:	0f 22 e0             	mov    cr4,eax
c001ed9e:	31 c9                	xor    ecx,ecx
c001eda0:	0f 01 d0             	xgetbv 
c001eda3:	0d 07 00 00 00       	or     eax,0x7
c001eda8:	0f 01 d1             	xsetbv 
c001edab:	59                   	pop    ecx
c001edac:	58                   	pop    eax
c001edad:	c3                   	ret    

c001edae <avxClose>:
c001edae:	c3                   	ret    

c001edaf <wouldSheSayYes>:
c001edaf:	c3                   	ret    
c001edb0:	49                   	dec    ecx
c001edb1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001edb5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001edb9:	75 20                	jne    c001eddb <isr0+0xb>
c001edbb:	4e                   	dec    esi
c001edbc:	79 61                	jns    c001ee1f <isr7+0x3>
c001edbe:	68 2e 2e 2e 00       	push   0x2e2e2e
c001edc3:	66 90                	xchg   ax,ax
c001edc5:	66 90                	xchg   ax,ax
c001edc7:	66 90                	xchg   ax,ax
c001edc9:	66 90                	xchg   ax,ax
c001edcb:	66 90                	xchg   ax,ax
c001edcd:	66 90                	xchg   ax,ax
c001edcf:	90                   	nop

c001edd0 <isr0>:
c001edd0:	fa                   	cli    
c001edd1:	68 00 00 00 00       	push   0x0
c001edd6:	68 00 00 00 00       	push   0x0
c001eddb:	e9 56 01 00 00       	jmp    c001ef36 <int_common_stub>

c001ede0 <isr1>:
c001ede0:	fa                   	cli    
c001ede1:	6a 00                	push   0x0
c001ede3:	6a 01                	push   0x1
c001ede5:	e9 4c 01 00 00       	jmp    c001ef36 <int_common_stub>

c001edea <isr2>:
c001edea:	fa                   	cli    
c001edeb:	6a 00                	push   0x0
c001eded:	6a 02                	push   0x2
c001edef:	e9 42 01 00 00       	jmp    c001ef36 <int_common_stub>

c001edf4 <isr3>:
c001edf4:	fa                   	cli    
c001edf5:	6a 00                	push   0x0
c001edf7:	6a 03                	push   0x3
c001edf9:	e9 38 01 00 00       	jmp    c001ef36 <int_common_stub>

c001edfe <isr4>:
c001edfe:	fa                   	cli    
c001edff:	6a 00                	push   0x0
c001ee01:	6a 04                	push   0x4
c001ee03:	e9 2e 01 00 00       	jmp    c001ef36 <int_common_stub>

c001ee08 <isr5>:
c001ee08:	fa                   	cli    
c001ee09:	6a 00                	push   0x0
c001ee0b:	6a 05                	push   0x5
c001ee0d:	e9 24 01 00 00       	jmp    c001ef36 <int_common_stub>

c001ee12 <isr6>:
c001ee12:	fa                   	cli    
c001ee13:	6a 00                	push   0x0
c001ee15:	6a 06                	push   0x6
c001ee17:	e9 1a 01 00 00       	jmp    c001ef36 <int_common_stub>

c001ee1c <isr7>:
c001ee1c:	fa                   	cli    
c001ee1d:	6a 00                	push   0x0
c001ee1f:	6a 07                	push   0x7
c001ee21:	e9 10 01 00 00       	jmp    c001ef36 <int_common_stub>

c001ee26 <isr8>:
c001ee26:	fa                   	cli    
c001ee27:	6a 08                	push   0x8
c001ee29:	e9 08 01 00 00       	jmp    c001ef36 <int_common_stub>

c001ee2e <isr9>:
c001ee2e:	fa                   	cli    
c001ee2f:	6a 00                	push   0x0
c001ee31:	6a 09                	push   0x9
c001ee33:	e9 fe 00 00 00       	jmp    c001ef36 <int_common_stub>

c001ee38 <isr10>:
c001ee38:	fa                   	cli    
c001ee39:	6a 0a                	push   0xa
c001ee3b:	e9 f6 00 00 00       	jmp    c001ef36 <int_common_stub>

c001ee40 <isr11>:
c001ee40:	fa                   	cli    
c001ee41:	6a 0b                	push   0xb
c001ee43:	e9 ee 00 00 00       	jmp    c001ef36 <int_common_stub>

c001ee48 <isr12>:
c001ee48:	fa                   	cli    
c001ee49:	6a 0c                	push   0xc
c001ee4b:	e9 e6 00 00 00       	jmp    c001ef36 <int_common_stub>

c001ee50 <isr13>:
c001ee50:	fa                   	cli    
c001ee51:	6a 0d                	push   0xd
c001ee53:	53                   	push   ebx
c001ee54:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ee58:	81 fb 26 f0 01 c0    	cmp    ebx,0xc001f026
c001ee5e:	5b                   	pop    ebx
c001ee5f:	0f 84 c3 01 00 00    	je     c001f028 <finishSignal2>
c001ee65:	e9 cc 00 00 00       	jmp    c001ef36 <int_common_stub>

c001ee6a <isr14>:
c001ee6a:	fa                   	cli    
c001ee6b:	6a 0e                	push   0xe
c001ee6d:	e9 c4 00 00 00       	jmp    c001ef36 <int_common_stub>

c001ee72 <isr15>:
c001ee72:	fa                   	cli    
c001ee73:	6a 00                	push   0x0
c001ee75:	6a 0f                	push   0xf
c001ee77:	e9 ba 00 00 00       	jmp    c001ef36 <int_common_stub>

c001ee7c <isr16>:
c001ee7c:	fa                   	cli    
c001ee7d:	6a 00                	push   0x0
c001ee7f:	6a 10                	push   0x10
c001ee81:	e9 b0 00 00 00       	jmp    c001ef36 <int_common_stub>

c001ee86 <isr17>:
c001ee86:	fa                   	cli    
c001ee87:	6a 00                	push   0x0
c001ee89:	6a 11                	push   0x11
c001ee8b:	e9 a6 00 00 00       	jmp    c001ef36 <int_common_stub>

c001ee90 <isr18>:
c001ee90:	fa                   	cli    
c001ee91:	6a 00                	push   0x0
c001ee93:	6a 12                	push   0x12
c001ee95:	e9 9c 00 00 00       	jmp    c001ef36 <int_common_stub>

c001ee9a <irq3>:
c001ee9a:	fa                   	cli    
c001ee9b:	6a 00                	push   0x0
c001ee9d:	6a 23                	push   0x23
c001ee9f:	e9 92 00 00 00       	jmp    c001ef36 <int_common_stub>

c001eea4 <irq4>:
c001eea4:	fa                   	cli    
c001eea5:	6a 00                	push   0x0
c001eea7:	6a 24                	push   0x24
c001eea9:	e9 88 00 00 00       	jmp    c001ef36 <int_common_stub>

c001eeae <irq5>:
c001eeae:	fa                   	cli    
c001eeaf:	6a 00                	push   0x0
c001eeb1:	6a 25                	push   0x25
c001eeb3:	e9 7e 00 00 00       	jmp    c001ef36 <int_common_stub>

c001eeb8 <irq6>:
c001eeb8:	fa                   	cli    
c001eeb9:	6a 00                	push   0x0
c001eebb:	6a 26                	push   0x26
c001eebd:	e9 74 00 00 00       	jmp    c001ef36 <int_common_stub>

c001eec2 <irq7>:
c001eec2:	fa                   	cli    
c001eec3:	6a 00                	push   0x0
c001eec5:	6a 27                	push   0x27
c001eec7:	e9 6a 00 00 00       	jmp    c001ef36 <int_common_stub>

c001eecc <irq8>:
c001eecc:	fa                   	cli    
c001eecd:	6a 00                	push   0x0
c001eecf:	6a 28                	push   0x28
c001eed1:	e9 60 00 00 00       	jmp    c001ef36 <int_common_stub>

c001eed6 <irq9>:
c001eed6:	fa                   	cli    
c001eed7:	6a 00                	push   0x0
c001eed9:	6a 29                	push   0x29
c001eedb:	e9 56 00 00 00       	jmp    c001ef36 <int_common_stub>

c001eee0 <irq10>:
c001eee0:	fa                   	cli    
c001eee1:	6a 00                	push   0x0
c001eee3:	6a 2a                	push   0x2a
c001eee5:	e9 4c 00 00 00       	jmp    c001ef36 <int_common_stub>

c001eeea <irq11>:
c001eeea:	fa                   	cli    
c001eeeb:	6a 00                	push   0x0
c001eeed:	6a 2b                	push   0x2b
c001eeef:	e9 42 00 00 00       	jmp    c001ef36 <int_common_stub>

c001eef4 <irq12>:
c001eef4:	fa                   	cli    
c001eef5:	6a 00                	push   0x0
c001eef7:	6a 2c                	push   0x2c
c001eef9:	e9 38 00 00 00       	jmp    c001ef36 <int_common_stub>

c001eefe <irq13>:
c001eefe:	fa                   	cli    
c001eeff:	6a 00                	push   0x0
c001ef01:	6a 2d                	push   0x2d
c001ef03:	e9 2e 00 00 00       	jmp    c001ef36 <int_common_stub>

c001ef08 <irq14>:
c001ef08:	fa                   	cli    
c001ef09:	6a 00                	push   0x0
c001ef0b:	6a 2e                	push   0x2e
c001ef0d:	e9 24 00 00 00       	jmp    c001ef36 <int_common_stub>

c001ef12 <irq15>:
c001ef12:	fa                   	cli    
c001ef13:	6a 00                	push   0x0
c001ef15:	6a 2f                	push   0x2f
c001ef17:	e9 1a 00 00 00       	jmp    c001ef36 <int_common_stub>

c001ef1c <irq1>:
c001ef1c:	fa                   	cli    
c001ef1d:	6a 00                	push   0x0
c001ef1f:	6a 21                	push   0x21
c001ef21:	eb 13                	jmp    c001ef36 <int_common_stub>

c001ef23 <irq2>:
c001ef23:	fa                   	cli    
c001ef24:	6a 00                	push   0x0
c001ef26:	6a 22                	push   0x22
c001ef28:	eb 0c                	jmp    c001ef36 <int_common_stub>

c001ef2a <isr96>:
c001ef2a:	6a 00                	push   0x0
c001ef2c:	6a 60                	push   0x60
c001ef2e:	fb                   	sti    
c001ef2f:	eb 37                	jmp    c001ef68 <syscall_common_stub>

c001ef31 <irq0>:
c001ef31:	fa                   	cli    
c001ef32:	6a 00                	push   0x0
c001ef34:	6a 20                	push   0x20

c001ef36 <int_common_stub>:
c001ef36:	60                   	pusha  
c001ef37:	1e                   	push   ds
c001ef38:	06                   	push   es
c001ef39:	0f a0                	push   fs
c001ef3b:	0f a8                	push   gs
c001ef3d:	66 b8 10 00          	mov    ax,0x10
c001ef41:	66 8e d8             	mov    ds,ax
c001ef44:	66 8e c0             	mov    es,ax
c001ef47:	66 8e e0             	mov    fs,ax
c001ef4a:	66 8e e8             	mov    gs,ax
c001ef4d:	54                   	push   esp
c001ef4e:	fc                   	cld    
c001ef4f:	e8 a4 dc fe ff       	call   c000cbf8 <int_handler>
c001ef54:	81 c4 04 00 00 00    	add    esp,0x4
c001ef5a:	0f a9                	pop    gs
c001ef5c:	0f a1                	pop    fs
c001ef5e:	07                   	pop    es
c001ef5f:	1f                   	pop    ds
c001ef60:	61                   	popa   
c001ef61:	81 c4 08 00 00 00    	add    esp,0x8
c001ef67:	cf                   	iret   

c001ef68 <syscall_common_stub>:
c001ef68:	60                   	pusha  
c001ef69:	1e                   	push   ds
c001ef6a:	06                   	push   es
c001ef6b:	0f a0                	push   fs
c001ef6d:	0f a8                	push   gs
c001ef6f:	66 b8 10 00          	mov    ax,0x10
c001ef73:	66 8e d8             	mov    ds,ax
c001ef76:	66 8e c0             	mov    es,ax
c001ef79:	66 8e e0             	mov    fs,ax
c001ef7c:	66 8e e8             	mov    gs,ax
c001ef7f:	54                   	push   esp
c001ef80:	fc                   	cld    
c001ef81:	e8 72 dc fe ff       	call   c000cbf8 <int_handler>
c001ef86:	81 c4 04 00 00 00    	add    esp,0x4
c001ef8c:	0f a9                	pop    gs
c001ef8e:	0f a1                	pop    fs
c001ef90:	07                   	pop    es
c001ef91:	1f                   	pop    ds
c001ef92:	e8 fb 29 ff ff       	call   c0011992 <KiCheckSignalZ>
c001ef97:	3d 00 00 00 00       	cmp    eax,0x0
c001ef9c:	0f 84 c0 00 00 00    	je     c001f062 <skipSignals>
c001efa2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001efa7:	61                   	popa   
c001efa8:	53                   	push   ebx
c001efa9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001efaf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001efb2:	5b                   	pop    ebx
c001efb3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001efb8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001efbb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001efbe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001efc1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001efc4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001efc7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001efca:	81 c4 08 00 00 00    	add    esp,0x8
c001efd0:	5e                   	pop    esi
c001efd1:	5b                   	pop    ebx
c001efd2:	59                   	pop    ecx
c001efd3:	5a                   	pop    edx
c001efd4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001efd7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001efda:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001efdd:	52                   	push   edx
c001efde:	51                   	push   ecx
c001efdf:	53                   	push   ebx
c001efe0:	56                   	push   esi
c001efe1:	81 ec 08 00 00 00    	sub    esp,0x8
c001efe7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001efea:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001efed:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001eff0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001eff3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001eff6:	60                   	pusha  
c001eff7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001effd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f000:	89 e3                	mov    ebx,esp
c001f002:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f005:	52                   	push   edx
c001f006:	68 26 f0 01 c0       	push   0xc001f026
c001f00b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f00e:	89 dc                	mov    esp,ebx
c001f010:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f013:	68 23 00 00 00       	push   0x23
c001f018:	51                   	push   ecx
c001f019:	68 02 02 00 00       	push   0x202
c001f01e:	68 1b 00 00 00       	push   0x1b
c001f023:	ff 36                	push   DWORD PTR [esi]
c001f025:	cf                   	iret   

c001f026 <finishSignal>:
c001f026:	cd 0f                	int    0xf

c001f028 <finishSignal2>:
c001f028:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f02e:	e8 dc 29 ff ff       	call   c0011a0f <KiFinishSignalZ>
c001f033:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f039:	68 23 00 00 00       	push   0x23
c001f03e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f041:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f044:	68 1b 00 00 00       	push   0x1b
c001f049:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f04c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f04f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f052:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f055:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f058:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f05b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f05e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f061:	cf                   	iret   

c001f062 <skipSignals>:
c001f062:	61                   	popa   
c001f063:	81 c4 08 00 00 00    	add    esp,0x8
c001f069:	cf                   	iret   
c001f06a:	90                   	nop
c001f06b:	90                   	nop

c001f06c <irq16>:
c001f06c:	fa                   	cli    
c001f06d:	6a 00                	push   0x0
c001f06f:	6a 30                	push   0x30
c001f071:	e9 c0 fe ff ff       	jmp    c001ef36 <int_common_stub>

c001f076 <irq17>:
c001f076:	fa                   	cli    
c001f077:	6a 00                	push   0x0
c001f079:	6a 31                	push   0x31
c001f07b:	e9 b6 fe ff ff       	jmp    c001ef36 <int_common_stub>

c001f080 <irq18>:
c001f080:	fa                   	cli    
c001f081:	6a 00                	push   0x0
c001f083:	6a 32                	push   0x32
c001f085:	e9 ac fe ff ff       	jmp    c001ef36 <int_common_stub>

c001f08a <irq19>:
c001f08a:	fa                   	cli    
c001f08b:	6a 00                	push   0x0
c001f08d:	6a 33                	push   0x33
c001f08f:	e9 a2 fe ff ff       	jmp    c001ef36 <int_common_stub>

c001f094 <irq20>:
c001f094:	fa                   	cli    
c001f095:	6a 00                	push   0x0
c001f097:	6a 34                	push   0x34
c001f099:	e9 98 fe ff ff       	jmp    c001ef36 <int_common_stub>

c001f09e <irq21>:
c001f09e:	fa                   	cli    
c001f09f:	6a 00                	push   0x0
c001f0a1:	6a 35                	push   0x35
c001f0a3:	e9 8e fe ff ff       	jmp    c001ef36 <int_common_stub>

c001f0a8 <irq22>:
c001f0a8:	fa                   	cli    
c001f0a9:	6a 00                	push   0x0
c001f0ab:	6a 36                	push   0x36
c001f0ad:	e9 84 fe ff ff       	jmp    c001ef36 <int_common_stub>

c001f0b2 <irq23>:
c001f0b2:	fa                   	cli    
c001f0b3:	6a 00                	push   0x0
c001f0b5:	6a 37                	push   0x37
c001f0b7:	e9 7a fe ff ff       	jmp    c001ef36 <int_common_stub>
c001f0bc:	66 90                	xchg   ax,ax
c001f0be:	66 90                	xchg   ax,ax

c001f0c0 <i386GetRDRAND>:
c001f0c0:	b9 64 00 00 00       	mov    ecx,0x64

c001f0c5 <retry>:
c001f0c5:	0f c7 f0             	rdrand eax
c001f0c8:	72 05                	jb     c001f0cf <retry.done>
c001f0ca:	e2 f9                	loop   c001f0c5 <retry>

c001f0cc <retry.fail>:
c001f0cc:	31 c0                	xor    eax,eax
c001f0ce:	c3                   	ret    

c001f0cf <retry.done>:
c001f0cf:	c3                   	ret    

c001f0d0 <absolutelyNoChanceInHell>:
c001f0d0:	b8 01 00 00 00       	mov    eax,0x1
c001f0d5:	0f a2                	cpuid  
c001f0d7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f0dd:	74 06                	je     c001f0e5 <sseDetect.noSSE>
c001f0df:	b8 01 00 00 00       	mov    eax,0x1
c001f0e4:	c3                   	ret    

c001f0e5 <sseDetect.noSSE>:
c001f0e5:	31 c0                	xor    eax,eax
c001f0e7:	c3                   	ret    

c001f0e8 <sseSave>:
c001f0e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0ec:	0f ae 00             	fxsave [eax]
c001f0ef:	c3                   	ret    

c001f0f0 <sseLoad>:
c001f0f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0f4:	0f ae 08             	fxrstor [eax]
c001f0f7:	c3                   	ret    

c001f0f8 <sseInit>:
c001f0f8:	e8 42 00 00 00       	call   c001f13f <x87Init>
c001f0fd:	0f 20 e0             	mov    eax,cr4
c001f100:	66 0d 00 06          	or     ax,0x600
c001f104:	0f 22 e0             	mov    cr4,eax
c001f107:	c3                   	ret    

c001f108 <sseClose>:
c001f108:	c3                   	ret    
c001f109:	66 90                	xchg   ax,ax
c001f10b:	66 90                	xchg   ax,ax
c001f10d:	66 90                	xchg   ax,ax
c001f10f:	90                   	nop

c001f110 <value_37F>:
c001f110:	7f 03                	jg     c001f115 <value_37A+0x1>

c001f112 <value_37E>:
c001f112:	7e 03                	jle    c001f117 <x87Detect+0x1>

c001f114 <value_37A>:
c001f114:	7a 03                	jp     c001f119 <x87Detect+0x3>

c001f116 <x87Detect>:
c001f116:	b8 01 00 00 00       	mov    eax,0x1
c001f11b:	0f a2                	cpuid  
c001f11d:	f7 c2 01 00 00 00    	test   edx,0x1
c001f123:	74 06                	je     c001f12b <x87Detect.nox87>
c001f125:	b8 01 00 00 00       	mov    eax,0x1
c001f12a:	c3                   	ret    

c001f12b <x87Detect.nox87>:
c001f12b:	b8 00 00 00 00       	mov    eax,0x0
c001f130:	c3                   	ret    

c001f131 <x87Save>:
c001f131:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f135:	dd 30                	fnsave [eax]
c001f137:	c3                   	ret    

c001f138 <x87Load>:
c001f138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f13c:	dd 20                	frstor [eax]
c001f13e:	c3                   	ret    

c001f13f <x87Init>:
c001f13f:	0f 20 c0             	mov    eax,cr0
c001f142:	66 25 fb ff          	and    ax,0xfffb
c001f146:	66 0d 22 00          	or     ax,0x22
c001f14a:	0f 22 c0             	mov    cr0,eax
c001f14d:	db e3                	fninit 
c001f14f:	0f 06                	clts   
c001f151:	d9 2d 14 f1 01 c0    	fldcw  WORD PTR ds:0xc001f114
c001f157:	c3                   	ret    

c001f158 <x87Close>:
c001f158:	c3                   	ret    
c001f159:	66 90                	xchg   ax,ax
c001f15b:	90                   	nop

c001f15c <__do_global_ctors_aux>:
c001f15c:	a1 10 01 02 c0       	mov    eax,ds:0xc0020110
c001f161:	83 f8 ff             	cmp    eax,0xffffffff
c001f164:	74 1a                	je     c001f180 <__do_global_ctors_aux+0x24>
c001f166:	55                   	push   ebp
c001f167:	89 e5                	mov    ebp,esp
c001f169:	53                   	push   ebx
c001f16a:	52                   	push   edx
c001f16b:	bb 10 01 02 c0       	mov    ebx,0xc0020110
c001f170:	ff d0                	call   eax
c001f172:	83 eb 04             	sub    ebx,0x4
c001f175:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f177:	83 f8 ff             	cmp    eax,0xffffffff
c001f17a:	75 f4                	jne    c001f170 <__do_global_ctors_aux+0x14>
c001f17c:	58                   	pop    eax
c001f17d:	5b                   	pop    ebx
c001f17e:	5d                   	pop    ebp
c001f17f:	c3                   	ret    
c001f180:	c3                   	ret    
c001f181:	66 90                	xchg   ax,ax
c001f183:	90                   	nop

c001f184 <__divdi3>:
c001f184:	55                   	push   ebp
c001f185:	57                   	push   edi
c001f186:	56                   	push   esi
c001f187:	53                   	push   ebx
c001f188:	83 ec 1c             	sub    esp,0x1c
c001f18b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f18f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f193:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f196:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f19a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f19e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f1a2:	85 db                	test   ebx,ebx
c001f1a4:	0f 88 8e 00 00 00    	js     c001f238 <__divdi3+0xb4>
c001f1aa:	89 dd                	mov    ebp,ebx
c001f1ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f1b4:	89 d3                	mov    ebx,edx
c001f1b6:	85 d2                	test   edx,edx
c001f1b8:	79 0d                	jns    c001f1c7 <__divdi3+0x43>
c001f1ba:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f1be:	f7 d8                	neg    eax
c001f1c0:	83 d2 00             	adc    edx,0x0
c001f1c3:	f7 da                	neg    edx
c001f1c5:	89 d3                	mov    ebx,edx
c001f1c7:	89 c7                	mov    edi,eax
c001f1c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f1cc:	85 db                	test   ebx,ebx
c001f1ce:	75 48                	jne    c001f218 <__divdi3+0x94>
c001f1d0:	39 ef                	cmp    edi,ebp
c001f1d2:	76 24                	jbe    c001f1f8 <__divdi3+0x74>
c001f1d4:	89 ea                	mov    edx,ebp
c001f1d6:	f7 f7                	div    edi
c001f1d8:	89 c1                	mov    ecx,eax
c001f1da:	31 f6                	xor    esi,esi
c001f1dc:	89 c8                	mov    eax,ecx
c001f1de:	89 f2                	mov    edx,esi
c001f1e0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f1e4:	85 c9                	test   ecx,ecx
c001f1e6:	74 07                	je     c001f1ef <__divdi3+0x6b>
c001f1e8:	f7 d8                	neg    eax
c001f1ea:	83 d2 00             	adc    edx,0x0
c001f1ed:	f7 da                	neg    edx
c001f1ef:	83 c4 1c             	add    esp,0x1c
c001f1f2:	5b                   	pop    ebx
c001f1f3:	5e                   	pop    esi
c001f1f4:	5f                   	pop    edi
c001f1f5:	5d                   	pop    ebp
c001f1f6:	c3                   	ret    
c001f1f7:	90                   	nop
c001f1f8:	85 ff                	test   edi,edi
c001f1fa:	75 0b                	jne    c001f207 <__divdi3+0x83>
c001f1fc:	b8 01 00 00 00       	mov    eax,0x1
c001f201:	31 d2                	xor    edx,edx
c001f203:	f7 f3                	div    ebx
c001f205:	89 c7                	mov    edi,eax
c001f207:	31 d2                	xor    edx,edx
c001f209:	89 e8                	mov    eax,ebp
c001f20b:	f7 f7                	div    edi
c001f20d:	89 c6                	mov    esi,eax
c001f20f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f212:	f7 f7                	div    edi
c001f214:	89 c1                	mov    ecx,eax
c001f216:	eb c4                	jmp    c001f1dc <__divdi3+0x58>
c001f218:	39 eb                	cmp    ebx,ebp
c001f21a:	77 3c                	ja     c001f258 <__divdi3+0xd4>
c001f21c:	0f bd f3             	bsr    esi,ebx
c001f21f:	83 f6 1f             	xor    esi,0x1f
c001f222:	75 40                	jne    c001f264 <__divdi3+0xe0>
c001f224:	39 eb                	cmp    ebx,ebp
c001f226:	72 09                	jb     c001f231 <__divdi3+0xad>
c001f228:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f22b:	0f 87 97 00 00 00    	ja     c001f2c8 <__divdi3+0x144>
c001f231:	b9 01 00 00 00       	mov    ecx,0x1
c001f236:	eb a4                	jmp    c001f1dc <__divdi3+0x58>
c001f238:	f7 d9                	neg    ecx
c001f23a:	83 d3 00             	adc    ebx,0x0
c001f23d:	f7 db                	neg    ebx
c001f23f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f242:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f246:	89 dd                	mov    ebp,ebx
c001f248:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f250:	e9 5f ff ff ff       	jmp    c001f1b4 <__divdi3+0x30>
c001f255:	8d 76 00             	lea    esi,[esi+0x0]
c001f258:	31 f6                	xor    esi,esi
c001f25a:	31 c9                	xor    ecx,ecx
c001f25c:	e9 7b ff ff ff       	jmp    c001f1dc <__divdi3+0x58>
c001f261:	8d 76 00             	lea    esi,[esi+0x0]
c001f264:	b8 20 00 00 00       	mov    eax,0x20
c001f269:	29 f0                	sub    eax,esi
c001f26b:	89 f1                	mov    ecx,esi
c001f26d:	d3 e3                	shl    ebx,cl
c001f26f:	89 fa                	mov    edx,edi
c001f271:	88 c1                	mov    cl,al
c001f273:	d3 ea                	shr    edx,cl
c001f275:	09 da                	or     edx,ebx
c001f277:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f27b:	89 f1                	mov    ecx,esi
c001f27d:	d3 e7                	shl    edi,cl
c001f27f:	89 eb                	mov    ebx,ebp
c001f281:	88 c1                	mov    cl,al
c001f283:	d3 eb                	shr    ebx,cl
c001f285:	89 f1                	mov    ecx,esi
c001f287:	d3 e5                	shl    ebp,cl
c001f289:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f28c:	88 c1                	mov    cl,al
c001f28e:	d3 ea                	shr    edx,cl
c001f290:	09 d5                	or     ebp,edx
c001f292:	89 e8                	mov    eax,ebp
c001f294:	89 da                	mov    edx,ebx
c001f296:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f29a:	89 d3                	mov    ebx,edx
c001f29c:	89 c5                	mov    ebp,eax
c001f29e:	f7 e7                	mul    edi
c001f2a0:	39 d3                	cmp    ebx,edx
c001f2a2:	72 18                	jb     c001f2bc <__divdi3+0x138>
c001f2a4:	74 0a                	je     c001f2b0 <__divdi3+0x12c>
c001f2a6:	89 e9                	mov    ecx,ebp
c001f2a8:	31 f6                	xor    esi,esi
c001f2aa:	e9 2d ff ff ff       	jmp    c001f1dc <__divdi3+0x58>
c001f2af:	90                   	nop
c001f2b0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f2b3:	89 f1                	mov    ecx,esi
c001f2b5:	d3 e7                	shl    edi,cl
c001f2b7:	39 c7                	cmp    edi,eax
c001f2b9:	73 eb                	jae    c001f2a6 <__divdi3+0x122>
c001f2bb:	90                   	nop
c001f2bc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f2bf:	31 f6                	xor    esi,esi
c001f2c1:	e9 16 ff ff ff       	jmp    c001f1dc <__divdi3+0x58>
c001f2c6:	66 90                	xchg   ax,ax
c001f2c8:	31 c9                	xor    ecx,ecx
c001f2ca:	e9 0d ff ff ff       	jmp    c001f1dc <__divdi3+0x58>
c001f2cf:	90                   	nop

c001f2d0 <__moddi3>:
c001f2d0:	55                   	push   ebp
c001f2d1:	57                   	push   edi
c001f2d2:	56                   	push   esi
c001f2d3:	53                   	push   ebx
c001f2d4:	83 ec 2c             	sub    esp,0x2c
c001f2d7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f2db:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f2df:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f2e3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f2e7:	85 db                	test   ebx,ebx
c001f2e9:	0f 88 85 00 00 00    	js     c001f374 <__moddi3+0xa4>
c001f2ef:	89 de                	mov    esi,ebx
c001f2f1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f2f9:	89 d7                	mov    edi,edx
c001f2fb:	85 d2                	test   edx,edx
c001f2fd:	79 09                	jns    c001f308 <__moddi3+0x38>
c001f2ff:	f7 d8                	neg    eax
c001f301:	83 d2 00             	adc    edx,0x0
c001f304:	f7 da                	neg    edx
c001f306:	89 d7                	mov    edi,edx
c001f308:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f30c:	89 cd                	mov    ebp,ecx
c001f30e:	85 ff                	test   edi,edi
c001f310:	75 52                	jne    c001f364 <__moddi3+0x94>
c001f312:	89 c3                	mov    ebx,eax
c001f314:	39 f0                	cmp    eax,esi
c001f316:	76 24                	jbe    c001f33c <__moddi3+0x6c>
c001f318:	89 c8                	mov    eax,ecx
c001f31a:	89 f2                	mov    edx,esi
c001f31c:	f7 f3                	div    ebx
c001f31e:	89 d6                	mov    esi,edx
c001f320:	89 f0                	mov    eax,esi
c001f322:	31 d2                	xor    edx,edx
c001f324:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f328:	85 c9                	test   ecx,ecx
c001f32a:	74 07                	je     c001f333 <__moddi3+0x63>
c001f32c:	f7 d8                	neg    eax
c001f32e:	83 d2 00             	adc    edx,0x0
c001f331:	f7 da                	neg    edx
c001f333:	83 c4 2c             	add    esp,0x2c
c001f336:	5b                   	pop    ebx
c001f337:	5e                   	pop    esi
c001f338:	5f                   	pop    edi
c001f339:	5d                   	pop    ebp
c001f33a:	c3                   	ret    
c001f33b:	90                   	nop
c001f33c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f340:	85 db                	test   ebx,ebx
c001f342:	75 0d                	jne    c001f351 <__moddi3+0x81>
c001f344:	b8 01 00 00 00       	mov    eax,0x1
c001f349:	31 d2                	xor    edx,edx
c001f34b:	f7 f7                	div    edi
c001f34d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f351:	89 f0                	mov    eax,esi
c001f353:	31 d2                	xor    edx,edx
c001f355:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f359:	f7 f7                	div    edi
c001f35b:	89 e8                	mov    eax,ebp
c001f35d:	f7 f7                	div    edi
c001f35f:	89 d6                	mov    esi,edx
c001f361:	eb bd                	jmp    c001f320 <__moddi3+0x50>
c001f363:	90                   	nop
c001f364:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f368:	39 f7                	cmp    edi,esi
c001f36a:	76 20                	jbe    c001f38c <__moddi3+0xbc>
c001f36c:	89 c8                	mov    eax,ecx
c001f36e:	89 f2                	mov    edx,esi
c001f370:	eb b2                	jmp    c001f324 <__moddi3+0x54>
c001f372:	66 90                	xchg   ax,ax
c001f374:	f7 d9                	neg    ecx
c001f376:	83 d3 00             	adc    ebx,0x0
c001f379:	f7 db                	neg    ebx
c001f37b:	89 de                	mov    esi,ebx
c001f37d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f385:	e9 6f ff ff ff       	jmp    c001f2f9 <__moddi3+0x29>
c001f38a:	66 90                	xchg   ax,ax
c001f38c:	0f bd c7             	bsr    eax,edi
c001f38f:	83 f0 1f             	xor    eax,0x1f
c001f392:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f396:	75 24                	jne    c001f3bc <__moddi3+0xec>
c001f398:	39 f7                	cmp    edi,esi
c001f39a:	72 06                	jb     c001f3a2 <__moddi3+0xd2>
c001f39c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f3a0:	77 0c                	ja     c001f3ae <__moddi3+0xde>
c001f3a2:	89 e9                	mov    ecx,ebp
c001f3a4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f3a8:	19 fe                	sbb    esi,edi
c001f3aa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f3ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f3b2:	89 f2                	mov    edx,esi
c001f3b4:	e9 6b ff ff ff       	jmp    c001f324 <__moddi3+0x54>
c001f3b9:	8d 76 00             	lea    esi,[esi+0x0]
c001f3bc:	b8 20 00 00 00       	mov    eax,0x20
c001f3c1:	89 c2                	mov    edx,eax
c001f3c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f3c7:	29 da                	sub    edx,ebx
c001f3c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f3cd:	88 d9                	mov    cl,bl
c001f3cf:	d3 e7                	shl    edi,cl
c001f3d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f3d5:	88 d1                	mov    cl,dl
c001f3d7:	d3 e8                	shr    eax,cl
c001f3d9:	09 c7                	or     edi,eax
c001f3db:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f3df:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f3e3:	89 d8                	mov    eax,ebx
c001f3e5:	88 d9                	mov    cl,bl
c001f3e7:	d3 e7                	shl    edi,cl
c001f3e9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f3ed:	89 f3                	mov    ebx,esi
c001f3ef:	88 d1                	mov    cl,dl
c001f3f1:	d3 eb                	shr    ebx,cl
c001f3f3:	89 c7                	mov    edi,eax
c001f3f5:	88 c1                	mov    cl,al
c001f3f7:	d3 e6                	shl    esi,cl
c001f3f9:	89 e8                	mov    eax,ebp
c001f3fb:	88 d1                	mov    cl,dl
c001f3fd:	d3 e8                	shr    eax,cl
c001f3ff:	09 f0                	or     eax,esi
c001f401:	89 f9                	mov    ecx,edi
c001f403:	d3 e5                	shl    ebp,cl
c001f405:	89 da                	mov    edx,ebx
c001f407:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f40b:	89 d3                	mov    ebx,edx
c001f40d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f411:	89 c6                	mov    esi,eax
c001f413:	89 d1                	mov    ecx,edx
c001f415:	39 d3                	cmp    ebx,edx
c001f417:	72 27                	jb     c001f440 <__moddi3+0x170>
c001f419:	74 21                	je     c001f43c <__moddi3+0x16c>
c001f41b:	29 f5                	sub    ebp,esi
c001f41d:	19 cb                	sbb    ebx,ecx
c001f41f:	89 de                	mov    esi,ebx
c001f421:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f425:	d3 e6                	shl    esi,cl
c001f427:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f42b:	89 f9                	mov    ecx,edi
c001f42d:	d3 ed                	shr    ebp,cl
c001f42f:	09 ee                	or     esi,ebp
c001f431:	89 f0                	mov    eax,esi
c001f433:	d3 eb                	shr    ebx,cl
c001f435:	89 da                	mov    edx,ebx
c001f437:	e9 e8 fe ff ff       	jmp    c001f324 <__moddi3+0x54>
c001f43c:	39 c5                	cmp    ebp,eax
c001f43e:	73 db                	jae    c001f41b <__moddi3+0x14b>
c001f440:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f444:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f448:	89 d1                	mov    ecx,edx
c001f44a:	89 c6                	mov    esi,eax
c001f44c:	eb cd                	jmp    c001f41b <__moddi3+0x14b>
c001f44e:	66 90                	xchg   ax,ax

c001f450 <__udivdi3>:
c001f450:	55                   	push   ebp
c001f451:	57                   	push   edi
c001f452:	56                   	push   esi
c001f453:	53                   	push   ebx
c001f454:	83 ec 1c             	sub    esp,0x1c
c001f457:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f45b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f45f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f463:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f467:	85 d2                	test   edx,edx
c001f469:	75 41                	jne    c001f4ac <__udivdi3+0x5c>
c001f46b:	39 f7                	cmp    edi,esi
c001f46d:	76 15                	jbe    c001f484 <__udivdi3+0x34>
c001f46f:	89 e8                	mov    eax,ebp
c001f471:	89 f2                	mov    edx,esi
c001f473:	f7 f7                	div    edi
c001f475:	31 db                	xor    ebx,ebx
c001f477:	89 da                	mov    edx,ebx
c001f479:	83 c4 1c             	add    esp,0x1c
c001f47c:	5b                   	pop    ebx
c001f47d:	5e                   	pop    esi
c001f47e:	5f                   	pop    edi
c001f47f:	5d                   	pop    ebp
c001f480:	c3                   	ret    
c001f481:	8d 76 00             	lea    esi,[esi+0x0]
c001f484:	89 f9                	mov    ecx,edi
c001f486:	85 ff                	test   edi,edi
c001f488:	75 0b                	jne    c001f495 <__udivdi3+0x45>
c001f48a:	b8 01 00 00 00       	mov    eax,0x1
c001f48f:	31 d2                	xor    edx,edx
c001f491:	f7 f7                	div    edi
c001f493:	89 c1                	mov    ecx,eax
c001f495:	31 d2                	xor    edx,edx
c001f497:	89 f0                	mov    eax,esi
c001f499:	f7 f1                	div    ecx
c001f49b:	89 c3                	mov    ebx,eax
c001f49d:	89 e8                	mov    eax,ebp
c001f49f:	f7 f1                	div    ecx
c001f4a1:	89 da                	mov    edx,ebx
c001f4a3:	83 c4 1c             	add    esp,0x1c
c001f4a6:	5b                   	pop    ebx
c001f4a7:	5e                   	pop    esi
c001f4a8:	5f                   	pop    edi
c001f4a9:	5d                   	pop    ebp
c001f4aa:	c3                   	ret    
c001f4ab:	90                   	nop
c001f4ac:	39 f2                	cmp    edx,esi
c001f4ae:	77 1c                	ja     c001f4cc <__udivdi3+0x7c>
c001f4b0:	0f bd da             	bsr    ebx,edx
c001f4b3:	83 f3 1f             	xor    ebx,0x1f
c001f4b6:	75 24                	jne    c001f4dc <__udivdi3+0x8c>
c001f4b8:	39 f2                	cmp    edx,esi
c001f4ba:	72 08                	jb     c001f4c4 <__udivdi3+0x74>
c001f4bc:	39 ef                	cmp    edi,ebp
c001f4be:	0f 87 84 00 00 00    	ja     c001f548 <__udivdi3+0xf8>
c001f4c4:	b8 01 00 00 00       	mov    eax,0x1
c001f4c9:	eb ac                	jmp    c001f477 <__udivdi3+0x27>
c001f4cb:	90                   	nop
c001f4cc:	31 db                	xor    ebx,ebx
c001f4ce:	31 c0                	xor    eax,eax
c001f4d0:	89 da                	mov    edx,ebx
c001f4d2:	83 c4 1c             	add    esp,0x1c
c001f4d5:	5b                   	pop    ebx
c001f4d6:	5e                   	pop    esi
c001f4d7:	5f                   	pop    edi
c001f4d8:	5d                   	pop    ebp
c001f4d9:	c3                   	ret    
c001f4da:	66 90                	xchg   ax,ax
c001f4dc:	b8 20 00 00 00       	mov    eax,0x20
c001f4e1:	29 d8                	sub    eax,ebx
c001f4e3:	88 d9                	mov    cl,bl
c001f4e5:	d3 e2                	shl    edx,cl
c001f4e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f4eb:	89 fa                	mov    edx,edi
c001f4ed:	88 c1                	mov    cl,al
c001f4ef:	d3 ea                	shr    edx,cl
c001f4f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f4f5:	09 d1                	or     ecx,edx
c001f4f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f4fb:	88 d9                	mov    cl,bl
c001f4fd:	d3 e7                	shl    edi,cl
c001f4ff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f503:	89 f7                	mov    edi,esi
c001f505:	88 c1                	mov    cl,al
c001f507:	d3 ef                	shr    edi,cl
c001f509:	88 d9                	mov    cl,bl
c001f50b:	d3 e6                	shl    esi,cl
c001f50d:	89 ea                	mov    edx,ebp
c001f50f:	88 c1                	mov    cl,al
c001f511:	d3 ea                	shr    edx,cl
c001f513:	09 d6                	or     esi,edx
c001f515:	89 f0                	mov    eax,esi
c001f517:	89 fa                	mov    edx,edi
c001f519:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f51d:	89 d7                	mov    edi,edx
c001f51f:	89 c6                	mov    esi,eax
c001f521:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f525:	39 d7                	cmp    edi,edx
c001f527:	72 13                	jb     c001f53c <__udivdi3+0xec>
c001f529:	74 09                	je     c001f534 <__udivdi3+0xe4>
c001f52b:	89 f0                	mov    eax,esi
c001f52d:	31 db                	xor    ebx,ebx
c001f52f:	e9 43 ff ff ff       	jmp    c001f477 <__udivdi3+0x27>
c001f534:	88 d9                	mov    cl,bl
c001f536:	d3 e5                	shl    ebp,cl
c001f538:	39 c5                	cmp    ebp,eax
c001f53a:	73 ef                	jae    c001f52b <__udivdi3+0xdb>
c001f53c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f53f:	31 db                	xor    ebx,ebx
c001f541:	e9 31 ff ff ff       	jmp    c001f477 <__udivdi3+0x27>
c001f546:	66 90                	xchg   ax,ax
c001f548:	31 c0                	xor    eax,eax
c001f54a:	e9 28 ff ff ff       	jmp    c001f477 <__udivdi3+0x27>
c001f54f:	90                   	nop

c001f550 <__umoddi3>:
c001f550:	55                   	push   ebp
c001f551:	57                   	push   edi
c001f552:	56                   	push   esi
c001f553:	53                   	push   ebx
c001f554:	83 ec 1c             	sub    esp,0x1c
c001f557:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f55b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f55f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f563:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f567:	89 da                	mov    edx,ebx
c001f569:	85 c0                	test   eax,eax
c001f56b:	75 37                	jne    c001f5a4 <__umoddi3+0x54>
c001f56d:	39 df                	cmp    edi,ebx
c001f56f:	76 13                	jbe    c001f584 <__umoddi3+0x34>
c001f571:	89 f0                	mov    eax,esi
c001f573:	f7 f7                	div    edi
c001f575:	89 d0                	mov    eax,edx
c001f577:	31 d2                	xor    edx,edx
c001f579:	83 c4 1c             	add    esp,0x1c
c001f57c:	5b                   	pop    ebx
c001f57d:	5e                   	pop    esi
c001f57e:	5f                   	pop    edi
c001f57f:	5d                   	pop    ebp
c001f580:	c3                   	ret    
c001f581:	8d 76 00             	lea    esi,[esi+0x0]
c001f584:	89 fd                	mov    ebp,edi
c001f586:	85 ff                	test   edi,edi
c001f588:	75 0b                	jne    c001f595 <__umoddi3+0x45>
c001f58a:	b8 01 00 00 00       	mov    eax,0x1
c001f58f:	31 d2                	xor    edx,edx
c001f591:	f7 f7                	div    edi
c001f593:	89 c5                	mov    ebp,eax
c001f595:	89 d8                	mov    eax,ebx
c001f597:	31 d2                	xor    edx,edx
c001f599:	f7 f5                	div    ebp
c001f59b:	89 f0                	mov    eax,esi
c001f59d:	f7 f5                	div    ebp
c001f59f:	89 d0                	mov    eax,edx
c001f5a1:	eb d4                	jmp    c001f577 <__umoddi3+0x27>
c001f5a3:	90                   	nop
c001f5a4:	89 f1                	mov    ecx,esi
c001f5a6:	39 d8                	cmp    eax,ebx
c001f5a8:	76 0a                	jbe    c001f5b4 <__umoddi3+0x64>
c001f5aa:	89 f0                	mov    eax,esi
c001f5ac:	83 c4 1c             	add    esp,0x1c
c001f5af:	5b                   	pop    ebx
c001f5b0:	5e                   	pop    esi
c001f5b1:	5f                   	pop    edi
c001f5b2:	5d                   	pop    ebp
c001f5b3:	c3                   	ret    
c001f5b4:	0f bd e8             	bsr    ebp,eax
c001f5b7:	83 f5 1f             	xor    ebp,0x1f
c001f5ba:	75 1c                	jne    c001f5d8 <__umoddi3+0x88>
c001f5bc:	39 d8                	cmp    eax,ebx
c001f5be:	72 04                	jb     c001f5c4 <__umoddi3+0x74>
c001f5c0:	39 f7                	cmp    edi,esi
c001f5c2:	77 08                	ja     c001f5cc <__umoddi3+0x7c>
c001f5c4:	89 da                	mov    edx,ebx
c001f5c6:	29 fe                	sub    esi,edi
c001f5c8:	19 c2                	sbb    edx,eax
c001f5ca:	89 f1                	mov    ecx,esi
c001f5cc:	89 c8                	mov    eax,ecx
c001f5ce:	83 c4 1c             	add    esp,0x1c
c001f5d1:	5b                   	pop    ebx
c001f5d2:	5e                   	pop    esi
c001f5d3:	5f                   	pop    edi
c001f5d4:	5d                   	pop    ebp
c001f5d5:	c3                   	ret    
c001f5d6:	66 90                	xchg   ax,ax
c001f5d8:	ba 20 00 00 00       	mov    edx,0x20
c001f5dd:	29 ea                	sub    edx,ebp
c001f5df:	89 e9                	mov    ecx,ebp
c001f5e1:	d3 e0                	shl    eax,cl
c001f5e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f5e7:	89 f8                	mov    eax,edi
c001f5e9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f5ed:	88 d1                	mov    cl,dl
c001f5ef:	d3 e8                	shr    eax,cl
c001f5f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5f5:	09 c1                	or     ecx,eax
c001f5f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f5fb:	89 e9                	mov    ecx,ebp
c001f5fd:	d3 e7                	shl    edi,cl
c001f5ff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f603:	89 d8                	mov    eax,ebx
c001f605:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f609:	88 d1                	mov    cl,dl
c001f60b:	d3 e8                	shr    eax,cl
c001f60d:	89 c7                	mov    edi,eax
c001f60f:	89 e9                	mov    ecx,ebp
c001f611:	d3 e3                	shl    ebx,cl
c001f613:	89 f0                	mov    eax,esi
c001f615:	88 d1                	mov    cl,dl
c001f617:	d3 e8                	shr    eax,cl
c001f619:	09 d8                	or     eax,ebx
c001f61b:	89 e9                	mov    ecx,ebp
c001f61d:	d3 e6                	shl    esi,cl
c001f61f:	89 f3                	mov    ebx,esi
c001f621:	89 fa                	mov    edx,edi
c001f623:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f627:	89 d1                	mov    ecx,edx
c001f629:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f62d:	89 c6                	mov    esi,eax
c001f62f:	89 d7                	mov    edi,edx
c001f631:	39 d1                	cmp    ecx,edx
c001f633:	72 27                	jb     c001f65c <__umoddi3+0x10c>
c001f635:	74 21                	je     c001f658 <__umoddi3+0x108>
c001f637:	89 ca                	mov    edx,ecx
c001f639:	29 f3                	sub    ebx,esi
c001f63b:	19 fa                	sbb    edx,edi
c001f63d:	89 d0                	mov    eax,edx
c001f63f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f643:	d3 e0                	shl    eax,cl
c001f645:	89 e9                	mov    ecx,ebp
c001f647:	d3 eb                	shr    ebx,cl
c001f649:	09 d8                	or     eax,ebx
c001f64b:	d3 ea                	shr    edx,cl
c001f64d:	83 c4 1c             	add    esp,0x1c
c001f650:	5b                   	pop    ebx
c001f651:	5e                   	pop    esi
c001f652:	5f                   	pop    edi
c001f653:	5d                   	pop    ebp
c001f654:	c3                   	ret    
c001f655:	8d 76 00             	lea    esi,[esi+0x0]
c001f658:	39 c3                	cmp    ebx,eax
c001f65a:	73 db                	jae    c001f637 <__umoddi3+0xe7>
c001f65c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f660:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f664:	89 d7                	mov    edi,edx
c001f666:	89 c6                	mov    esi,eax
c001f668:	eb cd                	jmp    c001f637 <__umoddi3+0xe7>

Disassembly of section .init:

c001f66a <_init>:
c001f66a:	55                   	push   ebp
c001f66b:	89 e5                	mov    ebp,esp
c001f66d:	e8 82 0a fe ff       	call   c00000f4 <frame_dummy>
c001f672:	e8 e5 fa ff ff       	call   c001f15c <__do_global_ctors_aux>
c001f677:	5d                   	pop    ebp
c001f678:	c3                   	ret    

Disassembly of section .fini:

c001f679 <_fini>:
c001f679:	55                   	push   ebp
c001f67a:	89 e5                	mov    ebp,esp
c001f67c:	e8 03 0a fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f681:	5d                   	pop    ebp
c001f682:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f684 <Computer::~Computer()>:
c001f684:	83 ec 0c             	sub    esp,0xc
c001f687:	ba 94 09 02 c0       	mov    edx,0xc0020994
c001f68c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f690:	89 10                	mov    DWORD PTR [eax],edx
c001f692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f696:	83 ec 0c             	sub    esp,0xc
c001f699:	50                   	push   eax
c001f69a:	e8 b1 cf fe ff       	call   c000c650 <Device::~Device()>
c001f69f:	83 c4 10             	add    esp,0x10
c001f6a2:	90                   	nop
c001f6a3:	83 c4 0c             	add    esp,0xc
c001f6a6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f6a8 <Computer::~Computer()>:
c001f6a8:	83 ec 0c             	sub    esp,0xc
c001f6ab:	83 ec 0c             	sub    esp,0xc
c001f6ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6b2:	e8 cd ff ff ff       	call   c001f684 <Computer::~Computer()>
c001f6b7:	83 c4 10             	add    esp,0x10
c001f6ba:	83 ec 08             	sub    esp,0x8
c001f6bd:	68 70 01 00 00       	push   0x170
c001f6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6c6:	e8 4d b1 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f6cb:	83 c4 10             	add    esp,0x10
c001f6ce:	83 c4 0c             	add    esp,0xc
c001f6d1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f6d2 <idleCommon()>:
c001f6d2:	83 ec 0c             	sub    esp,0xc
c001f6d5:	fa                   	cli    
c001f6d6:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001f6dc:	e8 ff 66 ff ff       	call   c0015de0 <schedule()>
c001f6e1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001f6e6:	48                   	dec    eax
c001f6e7:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001f6ec:	75 01                	jne    c001f6ef <idleCommon()+0x1d>
c001f6ee:	fb                   	sti    
c001f6ef:	83 c4 0c             	add    esp,0xc
c001f6f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f6f4 <LinkedList<UnixFile>::~LinkedList()>:
c001f6f4:	90                   	nop
c001f6f5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f6f6 <LinkedList<UnixFile>::LinkedList()>:
c001f6f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f704:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f70b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f70f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f71a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f724:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f72b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f72f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f736:	90                   	nop
c001f737:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f738 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f738:	83 ec 0c             	sub    esp,0xc
c001f73b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f740:	75 10                	jne    c001f752 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f742:	83 ec 0c             	sub    esp,0xc
c001f745:	68 a8 0b 02 c0       	push   0xc0020ba8
c001f74a:	e8 2e 1c ff ff       	call   c001137d <KePanic(char const*)>
c001f74f:	83 c4 10             	add    esp,0x10
c001f752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f756:	8b 00                	mov    eax,DWORD PTR [eax]
c001f758:	85 c0                	test   eax,eax
c001f75a:	74 34                	je     c001f790 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f75c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f760:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f763:	85 c0                	test   eax,eax
c001f765:	74 29                	je     c001f790 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f767:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f76b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f76e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f772:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f779:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f77d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f784:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f787:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f78e:	eb 65                	jmp    c001f7f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f794:	8b 00                	mov    eax,DWORD PTR [eax]
c001f796:	85 c0                	test   eax,eax
c001f798:	75 4b                	jne    c001f7e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7a1:	85 c0                	test   eax,eax
c001f7a3:	75 40                	jne    c001f7e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f7a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7ad:	89 10                	mov    DWORD PTR [eax],edx
c001f7af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f7b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7c1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7cf:	85 c0                	test   eax,eax
c001f7d1:	74 22                	je     c001f7f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f7d3:	83 ec 0c             	sub    esp,0xc
c001f7d6:	68 ca 0b 02 c0       	push   0xc0020bca
c001f7db:	e8 9d 1b ff ff       	call   c001137d <KePanic(char const*)>
c001f7e0:	83 c4 10             	add    esp,0x10
c001f7e3:	eb 10                	jmp    c001f7f5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f7e5:	83 ec 0c             	sub    esp,0xc
c001f7e8:	68 d4 0b 02 c0       	push   0xc0020bd4
c001f7ed:	e8 8b 1b ff ff       	call   c001137d <KePanic(char const*)>
c001f7f2:	83 c4 10             	add    esp,0x10
c001f7f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7f9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7fc:	8d 50 01             	lea    edx,[eax+0x1]
c001f7ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f803:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f806:	90                   	nop
c001f807:	83 c4 0c             	add    esp,0xc
c001f80a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f80c <LinkedList<UnixFile>::getFirstElement()>:
c001f80c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f810:	8b 00                	mov    eax,DWORD PTR [eax]
c001f812:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f814 <LinkedList<UnixFile>::removeFirst()>:
c001f814:	83 ec 0c             	sub    esp,0xc
c001f817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f81b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f81d:	85 c0                	test   eax,eax
c001f81f:	75 12                	jne    c001f833 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f821:	83 ec 0c             	sub    esp,0xc
c001f824:	68 e0 0b 02 c0       	push   0xc0020be0
c001f829:	e8 4f 1b ff ff       	call   c001137d <KePanic(char const*)>
c001f82e:	83 c4 10             	add    esp,0x10
c001f831:	eb 7e                	jmp    c001f8b1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f837:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f83a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f83d:	85 c0                	test   eax,eax
c001f83f:	74 10                	je     c001f851 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f841:	83 ec 0c             	sub    esp,0xc
c001f844:	68 2b 0c 02 c0       	push   0xc0020c2b
c001f849:	e8 2f 1b ff ff       	call   c001137d <KePanic(char const*)>
c001f84e:	83 c4 10             	add    esp,0x10
c001f851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f855:	8b 00                	mov    eax,DWORD PTR [eax]
c001f857:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f85a:	85 c0                	test   eax,eax
c001f85c:	75 33                	jne    c001f891 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f85e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f862:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f86c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f877:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f87a:	83 f8 01             	cmp    eax,0x1
c001f87d:	74 21                	je     c001f8a0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f87f:	83 ec 0c             	sub    esp,0xc
c001f882:	68 04 0c 02 c0       	push   0xc0020c04
c001f887:	e8 f1 1a ff ff       	call   c001137d <KePanic(char const*)>
c001f88c:	83 c4 10             	add    esp,0x10
c001f88f:	eb 0f                	jmp    c001f8a0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f895:	8b 00                	mov    eax,DWORD PTR [eax]
c001f897:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f89a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f89e:	89 10                	mov    DWORD PTR [eax],edx
c001f8a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8a7:	8d 50 ff             	lea    edx,[eax-0x1]
c001f8aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f8b1:	83 c4 0c             	add    esp,0xc
c001f8b4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f8b6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f8b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8bd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f8be <DriverlessDevice::~DriverlessDevice()>:
c001f8be:	ba bc 17 02 c0       	mov    edx,0xc00217bc
c001f8c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8c7:	89 10                	mov    DWORD PTR [eax],edx
c001f8c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8cd:	50                   	push   eax
c001f8ce:	e8 7d cd fe ff       	call   c000c650 <Device::~Device()>
c001f8d3:	83 c4 04             	add    esp,0x4
c001f8d6:	90                   	nop
c001f8d7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f8d8 <DriverlessDevice::~DriverlessDevice()>:
c001f8d8:	83 ec 0c             	sub    esp,0xc
c001f8db:	83 ec 0c             	sub    esp,0xc
c001f8de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8e2:	e8 d7 ff ff ff       	call   c001f8be <DriverlessDevice::~DriverlessDevice()>
c001f8e7:	83 c4 10             	add    esp,0x10
c001f8ea:	83 ec 08             	sub    esp,0x8
c001f8ed:	68 58 01 00 00       	push   0x158
c001f8f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8f6:	e8 1d af fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f8fb:	83 c4 10             	add    esp,0x10
c001f8fe:	83 c4 0c             	add    esp,0xc
c001f901:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f902 <LinkedList<Device>::addElement(Device*)>:
c001f902:	83 ec 0c             	sub    esp,0xc
c001f905:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f90a:	75 10                	jne    c001f91c <LinkedList<Device>::addElement(Device*)+0x1a>
c001f90c:	83 ec 0c             	sub    esp,0xc
c001f90f:	68 a8 0b 02 c0       	push   0xc0020ba8
c001f914:	e8 64 1a ff ff       	call   c001137d <KePanic(char const*)>
c001f919:	83 c4 10             	add    esp,0x10
c001f91c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f920:	8b 00                	mov    eax,DWORD PTR [eax]
c001f922:	85 c0                	test   eax,eax
c001f924:	74 3a                	je     c001f960 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f92a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f92d:	85 c0                	test   eax,eax
c001f92f:	74 2f                	je     c001f960 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f935:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f938:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f93c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f946:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f94a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f94d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f951:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f954:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f95e:	eb 68                	jmp    c001f9c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f964:	8b 00                	mov    eax,DWORD PTR [eax]
c001f966:	85 c0                	test   eax,eax
c001f968:	75 4e                	jne    c001f9b8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f96a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f96e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f971:	85 c0                	test   eax,eax
c001f973:	75 43                	jne    c001f9b8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f979:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f97d:	89 10                	mov    DWORD PTR [eax],edx
c001f97f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f983:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f987:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f98e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f991:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f99b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f99f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9a2:	85 c0                	test   eax,eax
c001f9a4:	74 22                	je     c001f9c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f9a6:	83 ec 0c             	sub    esp,0xc
c001f9a9:	68 ca 0b 02 c0       	push   0xc0020bca
c001f9ae:	e8 ca 19 ff ff       	call   c001137d <KePanic(char const*)>
c001f9b3:	83 c4 10             	add    esp,0x10
c001f9b6:	eb 10                	jmp    c001f9c8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f9b8:	83 ec 0c             	sub    esp,0xc
c001f9bb:	68 d4 0b 02 c0       	push   0xc0020bd4
c001f9c0:	e8 b8 19 ff ff       	call   c001137d <KePanic(char const*)>
c001f9c5:	83 c4 10             	add    esp,0x10
c001f9c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9cf:	8d 50 01             	lea    edx,[eax+0x1]
c001f9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9d9:	90                   	nop
c001f9da:	83 c4 0c             	add    esp,0xc
c001f9dd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f9de <LinkedList<Device>::LinkedList()>:
c001f9de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa02:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa17:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa1e:	90                   	nop
c001fa1f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fa20 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fa20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa24:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa26:	85 c0                	test   eax,eax
c001fa28:	75 0e                	jne    c001fa38 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fa2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa31:	85 c0                	test   eax,eax
c001fa33:	75 03                	jne    c001fa38 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fa35:	b0 01                	mov    al,0x1
c001fa37:	c3                   	ret    
c001fa38:	b0 00                	mov    al,0x0
c001fa3a:	90                   	nop
c001fa3b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fa3c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fa3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa40:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa42:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fa44 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fa44:	83 ec 0c             	sub    esp,0xc
c001fa47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa4b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa4d:	85 c0                	test   eax,eax
c001fa4f:	75 17                	jne    c001fa68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fa51:	83 ec 0c             	sub    esp,0xc
c001fa54:	68 e0 0b 02 c0       	push   0xc0020be0
c001fa59:	e8 1f 19 ff ff       	call   c001137d <KePanic(char const*)>
c001fa5e:	83 c4 10             	add    esp,0x10
c001fa61:	e9 96 00 00 00       	jmp    c001fafc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fa66:	66 90                	xchg   ax,ax
c001fa68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa6f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fa72:	85 c0                	test   eax,eax
c001fa74:	0f 95 c0             	setne  al
c001fa77:	0f b6 c0             	movzx  eax,al
c001fa7a:	85 c0                	test   eax,eax
c001fa7c:	74 12                	je     c001fa90 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fa7e:	83 ec 0c             	sub    esp,0xc
c001fa81:	68 2b 0c 02 c0       	push   0xc0020c2b
c001fa86:	e8 f2 18 ff ff       	call   c001137d <KePanic(char const*)>
c001fa8b:	83 c4 10             	add    esp,0x10
c001fa8e:	66 90                	xchg   ax,ax
c001fa90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa94:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa96:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fa99:	85 c0                	test   eax,eax
c001fa9b:	0f 94 c0             	sete   al
c001fa9e:	0f b6 c0             	movzx  eax,al
c001faa1:	85 c0                	test   eax,eax
c001faa3:	74 33                	je     c001fad8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001faa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001faaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001faba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fabe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fac1:	83 f8 01             	cmp    eax,0x1
c001fac4:	74 22                	je     c001fae8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fac6:	83 ec 0c             	sub    esp,0xc
c001fac9:	68 04 0c 02 c0       	push   0xc0020c04
c001face:	e8 aa 18 ff ff       	call   c001137d <KePanic(char const*)>
c001fad3:	83 c4 10             	add    esp,0x10
c001fad6:	eb 10                	jmp    c001fae8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fadc:	8b 00                	mov    eax,DWORD PTR [eax]
c001fade:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae5:	89 10                	mov    DWORD PTR [eax],edx
c001fae7:	90                   	nop
c001fae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001faef:	8d 50 ff             	lea    edx,[eax-0x1]
c001faf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001faf9:	8d 76 00             	lea    esi,[esi+0x0]
c001fafc:	83 c4 0c             	add    esp,0xc
c001faff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fb00 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fb00:	83 ec 0c             	sub    esp,0xc
c001fb03:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fb08:	75 12                	jne    c001fb1c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fb0a:	83 ec 0c             	sub    esp,0xc
c001fb0d:	68 a8 0b 02 c0       	push   0xc0020ba8
c001fb12:	e8 66 18 ff ff       	call   c001137d <KePanic(char const*)>
c001fb17:	83 c4 10             	add    esp,0x10
c001fb1a:	66 90                	xchg   ax,ax
c001fb1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb20:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb22:	85 c0                	test   eax,eax
c001fb24:	74 36                	je     c001fb5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fb26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb2d:	85 c0                	test   eax,eax
c001fb2f:	74 2b                	je     c001fb5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fb31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb35:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb3c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fb3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb47:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb51:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fb58:	eb 6a                	jmp    c001fbc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fb5a:	66 90                	xchg   ax,ax
c001fb5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb60:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb62:	85 c0                	test   eax,eax
c001fb64:	75 4e                	jne    c001fbb4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fb66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb6d:	85 c0                	test   eax,eax
c001fb6f:	75 43                	jne    c001fbb4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb75:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb79:	89 10                	mov    DWORD PTR [eax],edx
c001fb7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb7f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fb83:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fb86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb8d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fb94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb98:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb9b:	85 c0                	test   eax,eax
c001fb9d:	74 25                	je     c001fbc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fb9f:	83 ec 0c             	sub    esp,0xc
c001fba2:	68 ca 0b 02 c0       	push   0xc0020bca
c001fba7:	e8 d1 17 ff ff       	call   c001137d <KePanic(char const*)>
c001fbac:	83 c4 10             	add    esp,0x10
c001fbaf:	eb 13                	jmp    c001fbc4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fbb1:	8d 76 00             	lea    esi,[esi+0x0]
c001fbb4:	83 ec 0c             	sub    esp,0xc
c001fbb7:	68 d4 0b 02 c0       	push   0xc0020bd4
c001fbbc:	e8 bc 17 ff ff       	call   c001137d <KePanic(char const*)>
c001fbc1:	83 c4 10             	add    esp,0x10
c001fbc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fbcb:	8d 50 01             	lea    edx,[eax+0x1]
c001fbce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fbd5:	90                   	nop
c001fbd6:	83 c4 0c             	add    esp,0xc
c001fbd9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fbdc <ACPI::~ACPI()>:
c001fbdc:	83 ec 0c             	sub    esp,0xc
c001fbdf:	ba a4 1d 02 c0       	mov    edx,0xc0021da4
c001fbe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe8:	89 10                	mov    DWORD PTR [eax],edx
c001fbea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbee:	83 ec 0c             	sub    esp,0xc
c001fbf1:	50                   	push   eax
c001fbf2:	e8 59 ca fe ff       	call   c000c650 <Device::~Device()>
c001fbf7:	83 c4 10             	add    esp,0x10
c001fbfa:	90                   	nop
c001fbfb:	83 c4 0c             	add    esp,0xc
c001fbfe:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fc00 <ACPI::~ACPI()>:
c001fc00:	83 ec 0c             	sub    esp,0xc
c001fc03:	83 ec 0c             	sub    esp,0xc
c001fc06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc0a:	e8 cd ff ff ff       	call   c001fbdc <ACPI::~ACPI()>
c001fc0f:	83 c4 10             	add    esp,0x10
c001fc12:	83 ec 08             	sub    esp,0x8
c001fc15:	68 64 12 00 00       	push   0x1264
c001fc1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc1e:	e8 f5 ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fc23:	83 c4 10             	add    esp,0x10
c001fc26:	83 c4 0c             	add    esp,0xc
c001fc29:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001fc2c <LinkedList<Device>::~LinkedList()>:
c001fc2c:	90                   	nop
c001fc2d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fc30 <LinkedList<Device>::isEmpty()>:
c001fc30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc34:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc36:	85 c0                	test   eax,eax
c001fc38:	75 0e                	jne    c001fc48 <LinkedList<Device>::isEmpty()+0x18>
c001fc3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc41:	85 c0                	test   eax,eax
c001fc43:	75 03                	jne    c001fc48 <LinkedList<Device>::isEmpty()+0x18>
c001fc45:	b0 01                	mov    al,0x1
c001fc47:	c3                   	ret    
c001fc48:	b0 00                	mov    al,0x0
c001fc4a:	90                   	nop
c001fc4b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001fc4c <LinkedList<Device>::getFirstElement()>:
c001fc4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc50:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001fc54 <LinkedList<Device>::removeFirst()>:
c001fc54:	83 ec 0c             	sub    esp,0xc
c001fc57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc5b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc5d:	85 c0                	test   eax,eax
c001fc5f:	75 17                	jne    c001fc78 <LinkedList<Device>::removeFirst()+0x24>
c001fc61:	83 ec 0c             	sub    esp,0xc
c001fc64:	68 e0 0b 02 c0       	push   0xc0020be0
c001fc69:	e8 0f 17 ff ff       	call   c001137d <KePanic(char const*)>
c001fc6e:	83 c4 10             	add    esp,0x10
c001fc71:	e9 92 00 00 00       	jmp    c001fd08 <LinkedList<Device>::removeFirst()+0xb4>
c001fc76:	66 90                	xchg   ax,ax
c001fc78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc7f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fc85:	85 c0                	test   eax,eax
c001fc87:	74 13                	je     c001fc9c <LinkedList<Device>::removeFirst()+0x48>
c001fc89:	83 ec 0c             	sub    esp,0xc
c001fc8c:	68 2b 0c 02 c0       	push   0xc0020c2b
c001fc91:	e8 e7 16 ff ff       	call   c001137d <KePanic(char const*)>
c001fc96:	83 c4 10             	add    esp,0x10
c001fc99:	8d 76 00             	lea    esi,[esi+0x0]
c001fc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fca2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fca8:	85 c0                	test   eax,eax
c001fcaa:	75 34                	jne    c001fce0 <LinkedList<Device>::removeFirst()+0x8c>
c001fcac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fcb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fcc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcc5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fcc8:	83 f8 01             	cmp    eax,0x1
c001fccb:	74 27                	je     c001fcf4 <LinkedList<Device>::removeFirst()+0xa0>
c001fccd:	83 ec 0c             	sub    esp,0xc
c001fcd0:	68 04 0c 02 c0       	push   0xc0020c04
c001fcd5:	e8 a3 16 ff ff       	call   c001137d <KePanic(char const*)>
c001fcda:	83 c4 10             	add    esp,0x10
c001fcdd:	eb 15                	jmp    c001fcf4 <LinkedList<Device>::removeFirst()+0xa0>
c001fcdf:	90                   	nop
c001fce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fce6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001fcec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf0:	89 10                	mov    DWORD PTR [eax],edx
c001fcf2:	66 90                	xchg   ax,ax
c001fcf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fcfb:	8d 50 ff             	lea    edx,[eax-0x1]
c001fcfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd05:	8d 76 00             	lea    esi,[esi+0x0]
c001fd08:	83 c4 0c             	add    esp,0xc
c001fd0b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fd0c <CPU::~CPU()>:
c001fd0c:	83 ec 0c             	sub    esp,0xc
c001fd0f:	ba 4c 1f 02 c0       	mov    edx,0xc0021f4c
c001fd14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd18:	89 10                	mov    DWORD PTR [eax],edx
c001fd1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd1e:	83 ec 0c             	sub    esp,0xc
c001fd21:	50                   	push   eax
c001fd22:	e8 29 c9 fe ff       	call   c000c650 <Device::~Device()>
c001fd27:	83 c4 10             	add    esp,0x10
c001fd2a:	90                   	nop
c001fd2b:	83 c4 0c             	add    esp,0xc
c001fd2e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fd30 <CPU::~CPU()>:
c001fd30:	83 ec 0c             	sub    esp,0xc
c001fd33:	83 ec 0c             	sub    esp,0xc
c001fd36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd3a:	e8 cd ff ff ff       	call   c001fd0c <CPU::~CPU()>
c001fd3f:	83 c4 10             	add    esp,0x10
c001fd42:	83 ec 08             	sub    esp,0x8
c001fd45:	68 94 11 00 00       	push   0x1194
c001fd4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd4e:	e8 c5 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd53:	83 c4 10             	add    esp,0x10
c001fd56:	83 c4 0c             	add    esp,0xc
c001fd59:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fd5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fd5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd60:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fd63:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fd64 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fd64:	90                   	nop
c001fd65:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fd68 <ThreadControlBlock::ThreadControlBlock()>:
c001fd68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd6c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fd73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd77:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fd7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd82:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fd89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd8d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fd94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd98:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fd9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fda3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fda7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdab:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fdaf:	90                   	nop
c001fdb0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fdb4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fdb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdb8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fdbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdc2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fdc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdcd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fdd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdd8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fdde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fde2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fde9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fded:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fdf4:	90                   	nop
c001fdf5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fdf6 <PCI::~PCI()>:
c001fdf6:	83 ec 0c             	sub    esp,0xc
c001fdf9:	ba 2c 2e 02 c0       	mov    edx,0xc0022e2c
c001fdfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe02:	89 10                	mov    DWORD PTR [eax],edx
c001fe04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe08:	83 ec 0c             	sub    esp,0xc
c001fe0b:	50                   	push   eax
c001fe0c:	e8 d7 c2 fe ff       	call   c000c0e8 <Bus::~Bus()>
c001fe11:	83 c4 10             	add    esp,0x10
c001fe14:	90                   	nop
c001fe15:	83 c4 0c             	add    esp,0xc
c001fe18:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fe1a <PCI::~PCI()>:
c001fe1a:	83 ec 0c             	sub    esp,0xc
c001fe1d:	83 ec 0c             	sub    esp,0xc
c001fe20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe24:	e8 cd ff ff ff       	call   c001fdf6 <PCI::~PCI()>
c001fe29:	83 c4 10             	add    esp,0x10
c001fe2c:	83 ec 08             	sub    esp,0x8
c001fe2f:	68 5c 01 00 00       	push   0x15c
c001fe34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe38:	e8 db a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fe3d:	83 c4 10             	add    esp,0x10
c001fe40:	83 c4 0c             	add    esp,0xc
c001fe43:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fe44 <IDE::~IDE()>:
c001fe44:	83 ec 0c             	sub    esp,0xc
c001fe47:	ba e0 2e 02 c0       	mov    edx,0xc0022ee0
c001fe4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe50:	89 10                	mov    DWORD PTR [eax],edx
c001fe52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe56:	83 ec 0c             	sub    esp,0xc
c001fe59:	50                   	push   eax
c001fe5a:	e8 69 cc fe ff       	call   c000cac8 <HardDiskController::~HardDiskController()>
c001fe5f:	83 c4 10             	add    esp,0x10
c001fe62:	90                   	nop
c001fe63:	83 c4 0c             	add    esp,0xc
c001fe66:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fe68 <IDE::~IDE()>:
c001fe68:	83 ec 0c             	sub    esp,0xc
c001fe6b:	83 ec 0c             	sub    esp,0xc
c001fe6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe72:	e8 cd ff ff ff       	call   c001fe44 <IDE::~IDE()>
c001fe77:	83 c4 10             	add    esp,0x10
c001fe7a:	83 ec 08             	sub    esp,0x8
c001fe7d:	68 70 02 00 00       	push   0x270
c001fe82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe86:	e8 8d a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fe8b:	83 c4 10             	add    esp,0x10
c001fe8e:	83 c4 0c             	add    esp,0xc
c001fe91:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fe92 <SATABus::~SATABus()>:
c001fe92:	83 ec 0c             	sub    esp,0xc
c001fe95:	ba 30 2f 02 c0       	mov    edx,0xc0022f30
c001fe9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe9e:	89 10                	mov    DWORD PTR [eax],edx
c001fea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea4:	83 ec 0c             	sub    esp,0xc
c001fea7:	50                   	push   eax
c001fea8:	e8 1b cc fe ff       	call   c000cac8 <HardDiskController::~HardDiskController()>
c001fead:	83 c4 10             	add    esp,0x10
c001feb0:	90                   	nop
c001feb1:	83 c4 0c             	add    esp,0xc
c001feb4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001feb6 <SATABus::~SATABus()>:
c001feb6:	83 ec 0c             	sub    esp,0xc
c001feb9:	83 ec 0c             	sub    esp,0xc
c001febc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fec0:	e8 cd ff ff ff       	call   c001fe92 <SATABus::~SATABus()>
c001fec5:	83 c4 10             	add    esp,0x10
c001fec8:	83 ec 08             	sub    esp,0x8
c001fecb:	68 64 01 00 00       	push   0x164
c001fed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fed4:	e8 3f a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fed9:	83 c4 10             	add    esp,0x10
c001fedc:	83 c4 0c             	add    esp,0xc
c001fedf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fee0 <ATA::~ATA()>:
c001fee0:	83 ec 0c             	sub    esp,0xc
c001fee3:	ba 70 2f 02 c0       	mov    edx,0xc0022f70
c001fee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feec:	89 10                	mov    DWORD PTR [eax],edx
c001feee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef2:	83 ec 0c             	sub    esp,0xc
c001fef5:	50                   	push   eax
c001fef6:	e8 af cc fe ff       	call   c000cbaa <PhysicalDisk::~PhysicalDisk()>
c001fefb:	83 c4 10             	add    esp,0x10
c001fefe:	90                   	nop
c001feff:	83 c4 0c             	add    esp,0xc
c001ff02:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ff04 <ATA::~ATA()>:
c001ff04:	83 ec 0c             	sub    esp,0xc
c001ff07:	83 ec 0c             	sub    esp,0xc
c001ff0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff0e:	e8 cd ff ff ff       	call   c001fee0 <ATA::~ATA()>
c001ff13:	83 c4 10             	add    esp,0x10
c001ff16:	83 ec 08             	sub    esp,0x8
c001ff19:	68 7c 01 00 00       	push   0x17c
c001ff1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff22:	e8 f1 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ff27:	83 c4 10             	add    esp,0x10
c001ff2a:	83 c4 0c             	add    esp,0xc
c001ff2d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ff2e <ATAPI::~ATAPI()>:
c001ff2e:	83 ec 0c             	sub    esp,0xc
c001ff31:	ba b8 2f 02 c0       	mov    edx,0xc0022fb8
c001ff36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff3a:	89 10                	mov    DWORD PTR [eax],edx
c001ff3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff40:	83 ec 0c             	sub    esp,0xc
c001ff43:	50                   	push   eax
c001ff44:	e8 61 cc fe ff       	call   c000cbaa <PhysicalDisk::~PhysicalDisk()>
c001ff49:	83 c4 10             	add    esp,0x10
c001ff4c:	90                   	nop
c001ff4d:	83 c4 0c             	add    esp,0xc
c001ff50:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001ff52 <ATAPI::~ATAPI()>:
c001ff52:	83 ec 0c             	sub    esp,0xc
c001ff55:	83 ec 0c             	sub    esp,0xc
c001ff58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff5c:	e8 cd ff ff ff       	call   c001ff2e <ATAPI::~ATAPI()>
c001ff61:	83 c4 10             	add    esp,0x10
c001ff64:	83 ec 08             	sub    esp,0x8
c001ff67:	68 84 01 00 00       	push   0x184
c001ff6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff70:	e8 a3 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ff75:	83 c4 10             	add    esp,0x10
c001ff78:	83 c4 0c             	add    esp,0xc
c001ff7b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001ff7c <SATA::~SATA()>:
c001ff7c:	83 ec 0c             	sub    esp,0xc
c001ff7f:	ba 6c 30 02 c0       	mov    edx,0xc002306c
c001ff84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff88:	89 10                	mov    DWORD PTR [eax],edx
c001ff8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff8e:	83 ec 0c             	sub    esp,0xc
c001ff91:	50                   	push   eax
c001ff92:	e8 13 cc fe ff       	call   c000cbaa <PhysicalDisk::~PhysicalDisk()>
c001ff97:	83 c4 10             	add    esp,0x10
c001ff9a:	90                   	nop
c001ff9b:	83 c4 0c             	add    esp,0xc
c001ff9e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001ffa0 <SATA::~SATA()>:
c001ffa0:	83 ec 0c             	sub    esp,0xc
c001ffa3:	83 ec 0c             	sub    esp,0xc
c001ffa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffaa:	e8 cd ff ff ff       	call   c001ff7c <SATA::~SATA()>
c001ffaf:	83 c4 10             	add    esp,0x10
c001ffb2:	83 ec 08             	sub    esp,0x8
c001ffb5:	68 7c 01 00 00       	push   0x17c
c001ffba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffbe:	e8 55 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ffc3:	83 c4 10             	add    esp,0x10
c001ffc6:	83 c4 0c             	add    esp,0xc
c001ffc9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001ffca <SATAPI::~SATAPI()>:
c001ffca:	83 ec 0c             	sub    esp,0xc
c001ffcd:	ba 90 31 02 c0       	mov    edx,0xc0023190
c001ffd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffd6:	89 10                	mov    DWORD PTR [eax],edx
c001ffd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffdc:	83 ec 0c             	sub    esp,0xc
c001ffdf:	50                   	push   eax
c001ffe0:	e8 c5 cb fe ff       	call   c000cbaa <PhysicalDisk::~PhysicalDisk()>
c001ffe5:	83 c4 10             	add    esp,0x10
c001ffe8:	90                   	nop
c001ffe9:	83 c4 0c             	add    esp,0xc
c001ffec:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001ffee <SATAPI::~SATAPI()>:
c001ffee:	83 ec 0c             	sub    esp,0xc
c001fff1:	83 ec 0c             	sub    esp,0xc
c001fff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fff8:	e8 cd ff ff ff       	call   c001ffca <SATAPI::~SATAPI()>
c001fffd:	83 c4 10             	add    esp,0x10
c0020000:	83 ec 08             	sub    esp,0x8
c0020003:	68 84 01 00 00       	push   0x184
c0020008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002000c:	e8 07 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020011:	83 c4 10             	add    esp,0x10
c0020014:	83 c4 0c             	add    esp,0xc
c0020017:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020018 <IOAPIC::~IOAPIC()>:
c0020018:	83 ec 0c             	sub    esp,0xc
c002001b:	ba d0 31 02 c0       	mov    edx,0xc00231d0
c0020020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020024:	89 10                	mov    DWORD PTR [eax],edx
c0020026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002002a:	83 ec 0c             	sub    esp,0xc
c002002d:	50                   	push   eax
c002002e:	e8 1d c6 fe ff       	call   c000c650 <Device::~Device()>
c0020033:	83 c4 10             	add    esp,0x10
c0020036:	90                   	nop
c0020037:	83 c4 0c             	add    esp,0xc
c002003a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002003c <IOAPIC::~IOAPIC()>:
c002003c:	83 ec 0c             	sub    esp,0xc
c002003f:	83 ec 0c             	sub    esp,0xc
c0020042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020046:	e8 cd ff ff ff       	call   c0020018 <IOAPIC::~IOAPIC()>
c002004b:	83 c4 10             	add    esp,0x10
c002004e:	83 ec 08             	sub    esp,0x8
c0020051:	68 68 01 00 00       	push   0x168
c0020056:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002005a:	e8 b9 a7 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002005f:	83 c4 10             	add    esp,0x10
c0020062:	83 c4 0c             	add    esp,0xc
c0020065:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020068 <APICTimer::~APICTimer()>:
c0020068:	83 ec 0c             	sub    esp,0xc
c002006b:	ba 18 32 02 c0       	mov    edx,0xc0023218
c0020070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020074:	89 10                	mov    DWORD PTR [eax],edx
c0020076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002007a:	83 ec 0c             	sub    esp,0xc
c002007d:	50                   	push   eax
c002007e:	e8 99 e0 fe ff       	call   c000e11c <Timer::~Timer()>
c0020083:	83 c4 10             	add    esp,0x10
c0020086:	90                   	nop
c0020087:	83 c4 0c             	add    esp,0xc
c002008a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002008c <APICTimer::~APICTimer()>:
c002008c:	83 ec 0c             	sub    esp,0xc
c002008f:	83 ec 0c             	sub    esp,0xc
c0020092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020096:	e8 cd ff ff ff       	call   c0020068 <APICTimer::~APICTimer()>
c002009b:	83 c4 10             	add    esp,0x10
c002009e:	83 ec 08             	sub    esp,0x8
c00200a1:	68 60 01 00 00       	push   0x160
c00200a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200aa:	e8 69 a7 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00200af:	83 c4 10             	add    esp,0x10
c00200b2:	83 c4 0c             	add    esp,0xc
c00200b5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00200b8 <PIT::~PIT()>:
c00200b8:	83 ec 0c             	sub    esp,0xc
c00200bb:	ba 68 32 02 c0       	mov    edx,0xc0023268
c00200c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c4:	89 10                	mov    DWORD PTR [eax],edx
c00200c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200ca:	83 ec 0c             	sub    esp,0xc
c00200cd:	50                   	push   eax
c00200ce:	e8 49 e0 fe ff       	call   c000e11c <Timer::~Timer()>
c00200d3:	83 c4 10             	add    esp,0x10
c00200d6:	90                   	nop
c00200d7:	83 c4 0c             	add    esp,0xc
c00200da:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00200dc <PIT::~PIT()>:
c00200dc:	83 ec 0c             	sub    esp,0xc
c00200df:	83 ec 0c             	sub    esp,0xc
c00200e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200e6:	e8 cd ff ff ff       	call   c00200b8 <PIT::~PIT()>
c00200eb:	83 c4 10             	add    esp,0x10
c00200ee:	83 ec 08             	sub    esp,0x8
c00200f1:	68 5c 01 00 00       	push   0x15c
c00200f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200fa:	e8 19 a7 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00200ff:	83 c4 10             	add    esp,0x10
c0020102:	83 c4 0c             	add    esp,0xc
c0020105:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be 7d 20 02 c0       	mov    esi,0xc002207d
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be 99 20 02 c0       	mov    esi,0xc0022099
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
